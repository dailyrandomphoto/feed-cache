<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Illustrating Lexical Scope in JavaScript</title>
      <author>Rajat Verma</author>
      <pubDate>Fri, 02 Jul 2021 06:00:58 +0000</pubDate>
      <link>https://dev.to/rajat2502/illustrating-lexical-scope-in-javascript-2h0f</link>
      <guid>https://dev.to/rajat2502/illustrating-lexical-scope-in-javascript-2h0f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-2-illustrating-lexical-scope"&gt;
  &lt;/a&gt;
  Chapter 2: Illustrating Lexical Scope
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;These are the notes of second chapter of the book "You Don't Know JS: Scope and Closures".&lt;/li&gt;
&lt;li&gt;In this chapter, we will discuss how our program is handled by the JS Engine and how the JS Engine works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#marbles-and-buckets-and-bubbles-oh-my"&gt;
  &lt;/a&gt;
  Marbles, and Buckets, and Bubbles... Oh My!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's say we have marbles of three different colors Red, Blue, and Green. To sort all the marbles we will drop the red marbles into a red bucket, blue into a blue bucket, and green into a green bucket.&lt;/li&gt;
&lt;li&gt;Now if we need a red marble we know the red bucket is where to get it from.&lt;/li&gt;
&lt;li&gt;Now apply this analogy to scope and variables, the marbles are the variables and the buckets are the scopes.&lt;/li&gt;
&lt;li&gt;Let's understand this with the help of an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// outer/global scope: RED

var students = [
  { id: 14, name: "Kyle" },
  { id: 73, name: "Suzy" },
  { id: 112, name: "Frank" },
  { id: 6, name: "Sarah" },
];

function getStudentName(studentID) {
  // function scope: BLUE
  for (let student of students) {
    // loop scope: GREEN
    if (student.id == studentID) {
      return student.name;
    }
  }
}

var nextStudent = getStudentName(73);
console.log(nextStudent); // Suzy

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;As you can see that we have designated three scope colors with code comments: RED (outermost global scope), BLUE (scope of function), and GREEN (scope inside the for loop).&lt;/li&gt;
&lt;li&gt;Now let's see the boundaries of these scope buckets by drawing colored bubbles:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ANR5uzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/124065686-e50eea00-da54-11eb-8ac5-d4b7686bc61d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ANR5uzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/124065686-e50eea00-da54-11eb-8ac5-d4b7686bc61d.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bubble 1 (RED): surround global scope, holds three identifiers: &lt;code&gt;students&lt;/code&gt;, &lt;code&gt;getStudentName&lt;/code&gt; and &lt;code&gt;nextStudent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Bubble 2 (BLUE): surround scope of function &lt;code&gt;getStudentName(..)&lt;/code&gt;, holds one identifier: &lt;code&gt;studentID&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Bubble 3 (GREEN): surround the scope of the for-loop, holds one identifier: &lt;code&gt;student&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Scope bubbles are determined during compilation. Each marble is colored based on which bucket it's declared in, not the color of the scope it may be accessed from.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scopes can nest inside each other, to any depth of nesting as your program needs.&lt;/li&gt;
&lt;li&gt;References (non-declarations) to variables/identifiers are allowed if there's a matching declaration either in the current scope, or any scope above/outside the current scope, but not with declarations from lower/nested scopes.&lt;/li&gt;
&lt;li&gt;An expression in the RED(1) bucket only has access to RED(1) marbles, not BLUE(2) or GREEN(3). An expression in the BLUE(2) bucket can reference either BLUE(2) or RED(1) marbles, not GREEN(3). And an expression in the GREEN(3) bucket has access to RED(1), BLUE(2), and GREEN(3) marbles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nested-scope"&gt;
  &lt;/a&gt;
  Nested Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scopes are lexically nested to any arbitrary depth as the program defines.&lt;/li&gt;
&lt;li&gt;In the above example, the function scope for &lt;code&gt;getStudentName(..)&lt;/code&gt; is nested inside the global scope. The block scope of the &lt;code&gt;for&lt;/code&gt; loop is similarly nested inside that function scope.&lt;/li&gt;
&lt;li&gt;Any time an identifier reference cannot be found in the current scope, the next outer scope in the nesting is consulted; that process is repeated until an answer is found or there are no more scopes to consult.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#undefined-mess"&gt;
  &lt;/a&gt;
  Undefined Mess
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If the variable is a source, an unresolved identifier lookup is considered an undeclared (unknown, missing) variable, which always results in a &lt;code&gt;ReferenceError&lt;/code&gt; being thrown. &lt;/li&gt;
&lt;li&gt;If the variable is a target, and the code at that moment is running in strict-mode, the variable is considered undeclared and similarly throws a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The error message for an undeclared variable condition, in most JS environments, will look like, "Reference Error: XYZ is not defined."&lt;/li&gt;
&lt;li&gt;"Not defined" means "not declared" or "undeclared".&lt;/li&gt;
&lt;li&gt;"Undefined" means that the variable was found, but it has no other value at the moment. So it defaults to the &lt;code&gt;undefined&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;To perpetuate the confusion even further, JS's &lt;code&gt;typeof&lt;/code&gt; operator returns the string "undefined" for variable references in either state:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var studentName;

typeof studentName; // "undefined"
typeof doesntExist; // "undefined"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, we as developers have to pay close attention to not mix up which kind of "undefined" we're dealing with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#global-what"&gt;
  &lt;/a&gt;
  Global... What!?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If the variable is a target and the program is not in strict-mode, the engine creates an accidental global variable to fulfill that target assignment. For Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getStudentName() {
  // assignment to an undeclared variable :(
  nextStudent = "Suzy";
}

getStudentName();
console.log(nextStudent);
// "Suzy" -- oops, an accidental-global variable!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This is another reason why we should use strict-mode. It prevents us from such incidents by throwing a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it for this chapter. I will be back with the notes of the next chapter. &lt;/p&gt;

&lt;p&gt;Till then, &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading these notes or have any suggestions or doubts, then do let me know your views in the comments. &lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/rajat2502"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/rajat2502"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/rajatverma2502"&gt;Twitter&lt;/a&gt; | &lt;a href="https://medium.com/@rajat2502"&gt;Medium&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting started with Probot</title>
      <author>Pragati Verma</author>
      <pubDate>Fri, 02 Jul 2021 05:57:12 +0000</pubDate>
      <link>https://dev.to/pragativerma18/getting-started-with-probot-jhd</link>
      <guid>https://dev.to/pragativerma18/getting-started-with-probot-jhd</guid>
      <description>&lt;p&gt;Open-source projects get more complex and hard to manage as they grow in terms of codebase and contributions, and thus, GitHub bots could help the project maintainers to cut down on the tedious tasks that can be automated with minimum code and efforts on installation. &lt;/p&gt;

&lt;p&gt;The easiest marketplace solution available for GitHub bots is  &lt;a href="https://probot.github.io/"&gt;Probot&lt;/a&gt;. We already discussed some great GitHub bots for every open-source project in the &lt;a href="https://dev.to/pragativerma18/github-bots-for-every-open-source-project-47hl"&gt;last article&lt;/a&gt;. Now, it's time to move a step forward and learn how to install, enable and customize these GitHub bots with an easy example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ckSYCRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625169236531/GOlxvVsO0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ckSYCRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625169236531/GOlxvVsO0.png" alt="Probot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-probot"&gt;
  &lt;/a&gt;
  Getting started with Probot
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started with Probot, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An open-source repository hosted on &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://help.github.com/en/articles/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization"&gt;Admin rights&lt;/a&gt; to install Probot apps on the GitHub repository or organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the Probot apps available on their marketplace are hosted, so you just need to install them and you're ready to go, without any deployment needed. Although, there could be some of them that would require you to deploy them over services such as &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt;, &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;, or &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-a-hosted-probot-app"&gt;
  &lt;/a&gt;
  How to install a hosted Probot App?
&lt;/h2&gt;

&lt;p&gt;To learn how to install a hosted Probot app, we'll walk through an example where I add the &lt;a href="https://probot.github.io/apps/welcome/"&gt;Welcome bot&lt;/a&gt; to one of my GitHub repositories. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-add-to-github"&gt;
  &lt;/a&gt;
  Step 1: Add to GitHub
&lt;/h3&gt;

&lt;p&gt;Navigate to the Welcome bot &lt;a href="https://probot.github.io/apps/welcome/"&gt;webpage&lt;/a&gt;, and click on &lt;strong&gt;Add to GitHub&lt;/strong&gt; button to begin as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkPp3JvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625167882414/YiM3ImyBl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkPp3JvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625167882414/YiM3ImyBl.png" alt="Add to GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-choose-account"&gt;
  &lt;/a&gt;
  Step 2: Choose Account
&lt;/h3&gt;

&lt;p&gt;Clicking on the &lt;strong&gt;Add to GitHub&lt;/strong&gt; button will take you to a new tab, where you're asked to select the location or GitHub account where you want to install the Welcome bot. You'll notice that you can see a &lt;em&gt;Configure&lt;/em&gt; option for the accounts or organizations where you have Admin access. Note that you won't be able to add the app to a repository where you don't have Admin access. For the next steps, I am choosing my personal account, so I'll select &lt;strong&gt;PragatiVerma18&lt;/strong&gt; here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLg7mW0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625167675177/_WuH01OtR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLg7mW0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625167675177/_WuH01OtR.png" alt="Choose Account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-confirm-installation"&gt;
  &lt;/a&gt;
  Step 3: Confirm Installation
&lt;/h3&gt;

&lt;p&gt;You'll be asked to confirm installation by entering your GitHub password. Once you're done with that, you'll be taken to the settings page where you have most of the documentation and usage directions regarding the app. Scrolling down the same page, you'll find an option to opt for Repository access to the bot, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2ySsk5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625168388690/Ep-3Btn_l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2ySsk5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625168388690/Ep-3Btn_l.png" alt="Repository Access"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose the GitHub repository from the dropdown and click on &lt;strong&gt;save&lt;/strong&gt;, to update the settings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-configuration"&gt;
  &lt;/a&gt;
  Step 4: Configuration
&lt;/h3&gt;

&lt;p&gt;This is the last but the most important step, as we deal with the configurations for this app here. Navigate to the GitHub repository where you installed the Welcome bot. Create a &lt;code&gt;.github/config.yml&lt;/code&gt; file to declare the contents of the comments, you can refer to the code as shown here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Configuration for new-issue-welcome - https://github.com/behaviorbot/new-issue-welcome&lt;/span&gt;

&lt;span class="c1"&gt;# Comment to be posted to on first-time issues&lt;/span&gt;
&lt;span class="na"&gt;newIssueWelcomeComment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s"&gt;Thanks for opening your first issue here! Be sure to follow the issue template!&lt;/span&gt;

&lt;span class="c1"&gt;# Configuration for new-pr-welcome - https://github.com/behaviorbot/new-pr-welcome&lt;/span&gt;

&lt;span class="c1"&gt;# Comment to be posted to on PRs from first-time contributors in your repository&lt;/span&gt;
&lt;span class="na"&gt;newPRWelcomeComment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s"&gt;Thanks for making your first PR here!&lt;/span&gt;

&lt;span class="c1"&gt;# Configuration for first-pr-merge - https://github.com/behaviorbot/first-pr-merge&lt;/span&gt;

&lt;span class="c1"&gt;# Comment to be posted to on pull requests merged by a first time user&lt;/span&gt;
&lt;span class="na"&gt;firstPRMergeComment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s"&gt;Congrats on merging your first pull request! We're are so proud of you!&lt;/span&gt;

&lt;span class="c1"&gt;# It is recommended to include as many gifs and emojis as possible&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay!! You're all done. The installation and configuration for the Welcome bot are hereby complete and now you can see it working in the comments whenever someone opens up a new issue or Pull Request as seen here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5Yc6-R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625169825906/ammj-1KlS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5Yc6-R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625169825906/ammj-1KlS.png" alt="Working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a simple example that can act as a reference, as most of the Probot apps usually follow similar steps to let you install and then customize their configurations inside a &lt;code&gt;.yml&lt;/code&gt; file inside the &lt;code&gt;.github&lt;/code&gt; folder on your default branch. The name of the file might vary as per the bot documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To learn how to deploy unhosted Probot apps, read more &lt;a href="https://probot.github.io/docs/deployment/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all for this article. I hope this has been a helpful and insightful read. Please comment with your valuable suggestions and feedback. Also, let me know your favorite GitHub bots or apps that you may have used.&lt;/p&gt;

&lt;p&gt;In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/pragativerma18/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/PragatiVerma18/"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/pragati_verma18"&gt;Twitter&lt;/a&gt; | &lt;a href="https://medium.com/@itispragativerma"&gt;Medium&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>github</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Laravel Image Text Watermarking Tutorial</title>
      <author>avani-trivedi</author>
      <pubDate>Fri, 02 Jul 2021 05:09:03 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/laravel-image-text-watermarking-tutorial-4c1k</link>
      <guid>https://dev.to/avanitrivedi/laravel-image-text-watermarking-tutorial-4c1k</guid>
      <description>&lt;p&gt;Hello Friends,&lt;/p&gt;

&lt;p&gt;Now let's see example of how to image text watermarking in laravel. This is a short guide on laravel if image text watermarking. We will use how to use image text watermarking in laravel. Here you will learn how to use image text watermarking in laravel. Let's get started with how to image text watermarking in laravel.&lt;/p&gt;

&lt;p&gt;Here i will give you many example how you can image text watermarking in laravel.&lt;/p&gt;

&lt;p&gt;More..&lt;br&gt;
&lt;a href="https://www.mywebtuts.com/blog/laravel-image-text-watermarking-tutorial"&gt;https://www.mywebtuts.com/blog/laravel-image-text-watermarking-tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>How to get Microsoft Azure Fundamentals Certified?</title>
      <author>Aniket Kumar Sinha</author>
      <pubDate>Fri, 02 Jul 2021 04:47:48 +0000</pubDate>
      <link>https://dev.to/aniketkumarsinha/how-to-get-microsoft-azure-fundamentals-certified-2edl</link>
      <guid>https://dev.to/aniketkumarsinha/how-to-get-microsoft-azure-fundamentals-certified-2edl</guid>
      <description>&lt;p&gt;I recently passed the Microsoft Azure Fundamentals Certification Examination(AZ 900). It was an awesome learning journey and I learned a lot about Azure and Cloud Computing. This article is related to the same. What is Microsoft Certified: Azure Fundamentals examination and how to prepare for it.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;What is Cloud Computing?&lt;/strong&gt;&lt;br&gt;
Cloud computing is the delivery of computing services — including servers, storage, databases, networking, software, analytics, and intelligence — over the Internet (“the cloud”) to offer faster innovation, flexible resources, and economies of scale. You typically pay only for cloud services you use, helping lower your operating costs, run your infrastructure more efficiently and scale as your business needs change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Azure?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://azure.microsoft.com/en-in/"&gt;Azure&lt;/a&gt; is a cloud computing platform with an ever-expanding set of services to help you build solutions to meet your business goals. The Azure cloud platform is more than 200 products and cloud services designed to help you bring new solutions to life — to solve today’s challenges and create the future. Build, run and manage applications across multiple clouds, on-premises and at the edge, with the tools and frameworks of your choice.&lt;br&gt;
To become Microsoft certified in Azure Fundamentals, you need to pass the AZ-900 Examination.&lt;/p&gt;




&lt;p&gt;The AZ-900 is the exam needed to get the Azure Fundamentals certification. The exam is intended for candidates who are just beginning to work with cloud-based solutions and services or are new to Azure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare for AZ 900 Examination?&lt;/strong&gt;&lt;br&gt;
Microsoft Learn is an amazing platform to learn about Microsoft technologies. For Azure too, you should visit Microsoft Learn. I am mentioning the important links related to this Certification and also links to the learning paths which you need to prepare for this examination:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-fundamentals/"&gt;Microsoft Certified: Azure Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/az-900"&gt;Exam AZ-900: Microsoft Azure Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-cloud-concepts/"&gt;Azure Fundamentals part 1: Describe core Azure concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-core-azure-services/"&gt;Azure Fundamentals part 2: Describe core Azure services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-core-solutions-management-tools-azure/"&gt;Azure Fundamentals part 3: Describe core solutions and management tools on Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-general-security-network-security-features/"&gt;Azure Fundamentals part 4: Describe general security and network security features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-identity-governance-privacy-compliance-features/"&gt;Azure Fundamentals part 5: Describe identity, governance, privacy, and compliance features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-900-describe-azure-cost-management-service-level-agreements/"&gt;Azure Fundamentals part 6: Describe Azure cost management and service level agreements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/specializations/microsoft-azure-fundamentals-az-900?"&gt;Microsoft Azure Fundamentals AZ-900 Exam Prep Specialization
AZ-900 Microsoft Azure Fundamentals Free Full Course and Study Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NKEFWyqJ5XA"&gt;FreeCodeCamp’s Microsoft Azure Fundamentals Certification Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can practice through practice tests like &lt;a href="https://in.mindhub.com/az-900-microsoft-azure-fundamentals-microsoft-official-practice-test/p/MU-AZ-900?utm_source=microsoft&amp;amp;utm_medium=certpage&amp;amp;utm_campaign=msofficialpractice"&gt;Mindhub’s AZ-900: Microsoft Azure Fundamentals Microsoft Official Practice Test&lt;/a&gt; and &lt;a href="https://www.whizlabs.com/microsoft-azure-certification-az-900/"&gt;Whizlabs’ Microsoft Azure Exam AZ-900 Certification Practice Tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the question pattern and marks distribution of the AZ 900 examination?&lt;/strong&gt;&lt;br&gt;
According to the most updated terms and conditions, the following is the exam skill outline and question distribution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe cloud concepts (20–25%)&lt;/li&gt;
&lt;li&gt;Describe core Azure services (15–20%)&lt;/li&gt;
&lt;li&gt;Describe core solutions and management tools on Azure (10–15%)&lt;/li&gt;
&lt;li&gt;Describe general security and network security features (10–15%)&lt;/li&gt;
&lt;li&gt;Describe identity, governance, privacy, and compliance features (20–25%)&lt;/li&gt;
&lt;li&gt;Describe Azure cost management and Service Level Agreements (10–15%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The questions are mainly theory based and are majorly MCQ based with around 40–60 questions which are to be answered in 60 minutes.&lt;/p&gt;




&lt;p&gt;So, this is it. If you are done with above mentioned stuff, you are good to go for the AZ-900 examination.&lt;/p&gt;

&lt;p&gt;All the best!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>microsoftcertified</category>
      <category>microsoftazure</category>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>JavaScript - Duplicate parameters  in JavaScript Functions</title>
      <author>capscode</author>
      <pubDate>Fri, 02 Jul 2021 04:32:04 +0000</pubDate>
      <link>https://dev.to/capscode/javascript-duplicate-parameters-in-javascript-functions-og2</link>
      <guid>https://dev.to/capscode/javascript-duplicate-parameters-in-javascript-functions-og2</guid>
      <description>&lt;p&gt;Hi Devs,&lt;/p&gt;

&lt;p&gt;In this article i will introduce you to one of the most confusing and common doubt for every newbie devs, Duplicate parameters in javascript functions&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-0"&gt;duplicating parameter in regular JS function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;duplicating parameter in non strict mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;duplicating parameter in strict mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;How do arrow functions treat duplicate parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#first-we-will-see-duplicating-parameters-in-regular-javascript-function"&gt;
  &lt;/a&gt;
  First we will see duplicating parameters in regular JavaScript function. &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//this is syntax of duplicating parameter in js function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-nonstrict-mode-regular-javascript-functions-allow-duplicate-named-parameters"&gt;
  &lt;/a&gt;
  In &lt;strong&gt;non-strict mode&lt;/strong&gt;, regular JavaScript functions allow duplicate named parameters &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="c1"&gt;// first =&amp;gt; 1  &lt;/span&gt;
     &lt;span class="c1"&gt;// second =&amp;gt; 2&lt;/span&gt;
     &lt;span class="c1"&gt;// first =&amp;gt; 3&lt;/span&gt;
    &lt;span class="nx"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3 2 3&lt;/span&gt;

    &lt;span class="c1"&gt;// first =&amp;gt; 1&lt;/span&gt;
    &lt;span class="c1"&gt;// second =&amp;gt; 2 &lt;/span&gt;
    &lt;span class="c1"&gt;// first =&amp;gt; undefined&lt;/span&gt;
    &lt;span class="nx"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//undefined  [undefined, 2, undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-check-this-in-strict-mode"&gt;
  &lt;/a&gt;
  Lets check this in &lt;strong&gt;strict mode&lt;/strong&gt;,&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Throws an error because of duplicate parameters (Strict mode)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Strict mode we cannot duplicate the parameter name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-arrow-functions-treat-duplicate-parameters"&gt;
  &lt;/a&gt;
  How do arrow functions treat duplicate parameters? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now here is something about arrow functions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike regular functions, arrow functions do not allow duplicate parameters, whether in strict or non-strict mode. Duplicate parameters will cause a  &lt;code&gt;Syntax  Error&lt;/code&gt;  to be thrown._&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Always throws a syntax error&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;                         
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CONGRATULATOIONS, YOU HAVE LEARNET ONE NEW TOPIC TODAY.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/#/blog"&gt;https://www.capscode.in/#/blog&lt;/a&gt; TO LEARN MORE...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 183</title>
      <author>The Ember Times</author>
      <pubDate>Fri, 02 Jul 2021 01:19:37 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-183-10g9</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-183-10g9</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;New release of Unstable Ember Language Server, share code snippets on Twitter using Ember, the difference between ember serve and npm run start, and an addon roundup!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#release-of-uels-v2016"&gt;
  &lt;/a&gt;
  &lt;a href="https://discord.com/channels/480462759797063690/480499624663056390/845766724040523786"&gt;Release of uELS v2.0.16 ✅&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable"&gt;Unstable Ember Language Server&lt;/a&gt; is a fully featured fork of Ember Language Server. While the name says &lt;em&gt;unstable&lt;/em&gt; it actually has been &lt;strong&gt;stable&lt;/strong&gt; and ready to use for day-to-day development!&lt;/p&gt;

&lt;p&gt;Thanks to both &lt;a href="https://github.com/alexlafroscia"&gt;Alex LaFroscia (@alexlafroscia)&lt;/a&gt; and &lt;a href="https://github.com/lifeart"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt; for new version release which provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support workspace/didChangeConfiguration event&lt;/li&gt;
&lt;li&gt;Improved startup speed by delaying template tokenization&lt;/li&gt;
&lt;li&gt;Autocomplete now use global registry and file change events, not fs lookup, but we still do fs lookup on project initialization&lt;/li&gt;
&lt;li&gt;Added template-lint severity support&lt;/li&gt;
&lt;li&gt;Improved template-linting speed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try out uELS today by installing over &lt;a href="https://open-vsx.org/extension/lifeart/vscode-ember-unstable"&gt;Open VSX&lt;/a&gt; or &lt;a href="https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable"&gt;Visual Studio Marketplace&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#share-code-snippets-on-twitter-using-ember"&gt;
  &lt;/a&gt;
  &lt;a href="https://limber.glimdown.com/?"&gt;Share code snippets on Twitter using Ember 🐦&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Do you want to share demos, gifs, or code snippets on Twitter? Try &lt;a href="https://limber.glimdown.com/?"&gt;limber.glimdown.com&lt;/a&gt; from &lt;a href="https://github.com/nullvoxpopuli"&gt;@NullVoxPopuli&lt;/a&gt;, built with Ember! Code snippets on &lt;a href="https://limber.glimdown.com/?"&gt;limber.glimdown.com&lt;/a&gt; can be copied as text or images.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MUZQZCxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E3c2kbUXEAMJHK3.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1_RoKVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1272751459533283330/XiJZzSB-_normal.jpg" alt="NullVoxPopuli profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        NullVoxPopuli
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nullvoxpopuli"&gt;@nullvoxpopuli&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Want to make demos / gifs / snippets for twitter using &lt;a href="https://twitter.com/hashtag/EmberJS"&gt;#EmberJS&lt;/a&gt;?&lt;br&gt;&lt;br&gt;Try &lt;a href="https://t.co/VsJm2Bk0Ui"&gt;limber.glimdown.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/TypeScript"&gt;#TypeScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/XState"&gt;#XState&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Playground"&gt;#Playground&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Demo"&gt;#Demo&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WebDev"&gt;#WebDev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:33 PM - 09 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1402650042364829700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1402650042364829700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1402650042364829700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#the-difference-between-ember-serve-and-npm-run-start-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/jayjayjpg/the-difference-between-ember-serve-and-npm-run-start-2m5p"&gt;The difference between ember serve and npm run start 🖥&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jayjayjpg"&gt;Jesse Jordan (@jayjayjpg)&lt;/a&gt; blogged about some subtle differences between &lt;code&gt;npm run start&lt;/code&gt; and &lt;code&gt;ember serve&lt;/code&gt;, inspired by &lt;a href="https://stackoverflow.com/questions/63340251/is-there-a-difference-between-ember-serve-and-npm-start"&gt;this question on StackOverflow&lt;/a&gt;. Even when using &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;, there can be some dependency gotchas with globally installed packages. Check out Jesse's &lt;a href="https://dev.to/jayjayjpg/the-difference-between-ember-serve-and-npm-run-start-2m5p"&gt;dev.to post&lt;/a&gt; for more info.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#addon-roundup"&gt;
  &lt;/a&gt;
  Addon roundup 🌐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://github.com/empress/empress-blog"&gt;empress-blog&lt;/a&gt;? If you're not familiar with it, empress-blog is the fully-functional, SEO friendly static site implementation of a blog system built on Ember. Check out &lt;a href="https://github.com/MichalBryxi"&gt;Michal Bryxí (@MichalBryxi)&lt;/a&gt;'s bite-sized blog posts posts on &lt;a href="https://dev.to/michalbryxi/mixpanel-empress-blog-5fd2"&gt;how to set up Mixpanel tracking events in empress-blog&lt;/a&gt; and &lt;a href="https://dev.to/michalbryxi/tag-page-in-main-menu-for-empress-blog-31b9"&gt;how to add a tag page to your empress-blog main menu&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to migrate your Ember projects to Tailwind CSS, but don't know where to start? &lt;a href="https://github.com/rajasegar"&gt;Rajasegar Chandran (@rajasegar)&lt;/a&gt; created the &lt;a href="https://github.com/rajasegar/ember-tailwind-codemod"&gt;ember-tailwind-codemod&lt;/a&gt; addon to make your migrations less painful. Give it a spin on your repos and check out the README for contribution ideas.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rajasegar"&gt;Rajasegar Chandran (@rajasegar)&lt;/a&gt; created &lt;em&gt;another&lt;/em&gt; new addon, &lt;a href="https://github.com/rajasegar/ember-plantuml"&gt;ember-plantuml&lt;/a&gt;, which allows you to visualize your Ember components and models via PlantUML. You can also download the UML diagrams as SVG files. Look forward to trying it out, seems promising for visual learners!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner 👏&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/fozy81" rel="noopener noreferrer"&gt;Tim (@fozy81)&lt;/a&gt;, &lt;a href="https://github.com/jacojoubert" rel="noopener noreferrer"&gt;Jaco Joubert (@jacojoubert)&lt;/a&gt;, &lt;a href="https://github.com/saracope" rel="noopener noreferrer"&gt;Sara Cope (@saracope)&lt;/a&gt;, &lt;a href="https://github.com/jherdman" rel="noopener noreferrer"&gt;James Herdman (@jherdman)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/hannakim91" rel="noopener noreferrer"&gt;Hanna (she/her) (@hannakim91)&lt;/a&gt;, &lt;a href="https://github.com/jaredgalanis" rel="noopener noreferrer"&gt;Jared Galanis (@jaredgalanis)&lt;/a&gt;, &lt;a href="https://github.com/prakashchoudhary07" rel="noopener noreferrer"&gt;Prakash Choudhary (@prakashchoudhary07)&lt;/a&gt;, &lt;a href="https://github.com/pzuraq" rel="noopener noreferrer"&gt;Chris Garrett (@pzuraq)&lt;/a&gt;, &lt;a href="https://github.com/kiwiupover" rel="noopener noreferrer"&gt;Dave Laird (@kiwiupover)&lt;/a&gt;, &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/esquith" rel="noopener noreferrer"&gt;Esquith Allen (@esquith)&lt;/a&gt;, &lt;a href="https://github.com/lukeingalls" rel="noopener noreferrer"&gt;Luke Ingalls (@lukeingalls)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/ankushdharkar" rel="noopener noreferrer"&gt;Ankush Dharkar (@ankushdharkar)&lt;/a&gt;, &lt;a href="https://github.com/chriskrycho" rel="noopener noreferrer"&gt;Chris Krycho (@chriskrycho)&lt;/a&gt;, &lt;a href="https://github.com/chiragpat" rel="noopener noreferrer"&gt;Chirag Patel (@chiragpat)&lt;/a&gt;, &lt;a href="https://github.com/sumitd94" rel="noopener noreferrer"&gt;Sumit Dhanania (@sumitd94)&lt;/a&gt;, and &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us 🤓&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFeF_Sir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fgtqyo0djxriimilhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFeF_Sir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fgtqyo0djxriimilhi.png" alt="Office Hours Tomster Mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Software Design: Deep Modules</title>
      <author>Federico Ramirez</author>
      <pubDate>Fri, 02 Jul 2021 00:24:55 +0000</pubDate>
      <link>https://dev.to/gosukiwi/software-design-deep-modules-2on9</link>
      <guid>https://dev.to/gosukiwi/software-design-deep-modules-2on9</guid>
      <description>&lt;p&gt;I'm reading &lt;a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201"&gt;A Philosophy of Software Design&lt;/a&gt;, by John K. Ousterhout, a professor of computer science at Stanford University and the creator of the &lt;a href="https://www.tcl.tk/about/"&gt;Tcl&lt;/a&gt; programming language. &lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://johz.bearblog.dev/book-review-philosophy-software-design/"&gt;this other review&lt;/a&gt; he has almost two decades of real world software experience, so he seems to know a thing or two about software design.&lt;/p&gt;

&lt;p&gt;I love software design, and I love reading different takes on it. I admit I haven't finished the book yet, but so far I love his simple yet complete approach.&lt;/p&gt;

&lt;p&gt;So far, I'd recommend it, even though I both agree and disagree on what he calls &lt;em&gt;Classitis&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classitis"&gt;
  &lt;/a&gt;
  Classitis
&lt;/h2&gt;

&lt;p&gt;I don't want to spoil or copy too much from his book but to make things short, let's say classes are a type of module, and he encourages modules to be deep, instead of shallow.&lt;/p&gt;

&lt;p&gt;A shallow module is module is one with a big public interface, compared to it's implementation. A deep module, is one with a small public interface, compared to it's implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   DEEP MODULE
  ┌────────────┐
  │            ├─────► Interface
  ├────────────┤
  │            │
  │            │
  │            ├─────► Implementation
  │            │
  │            │
  │            │
  └────────────┘

  SHALLOW MODULE
  ┌────────────┐
  │            ├─────► Interface
  │            │
  │            │
  │            │
  ├────────────┤
  │            │
  │            ├─────► Implementation
  │            │
  └────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;His argument is that shallow modules don't help to manage complexity, because the benefit they provide (hiding implementation) is dwarfed by the cost of having to learn a big, complicated public interface. Thus, they must be avoided when possible.&lt;/p&gt;

&lt;p&gt;I think he makes a great point. The example he gives (a perfect one, I must add) is the Java File API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;FileInputStream&lt;/span&gt; &lt;span class="n"&gt;fileStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bufferedStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferedStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complexity of the &lt;code&gt;ObjectInputStream&lt;/code&gt; interface is huge. You need to know a lot of things in order to use that class. And that unknown, is complexity.&lt;/p&gt;

&lt;p&gt;Sure, the class is very flexible, but the API is not great. He calls having several small classes like this &lt;strong&gt;Classitis&lt;/strong&gt;, and says it must be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-small-classes-are-good-right"&gt;
  &lt;/a&gt;
  But... Small classes are good, right?
&lt;/h2&gt;

&lt;p&gt;Small classes are a staple of OOP languages like Smalltalk, and to some extent, Ruby inherited that.&lt;/p&gt;

&lt;p&gt;Authors like &lt;a href="https://sandimetz.com/"&gt;Sandi Metz&lt;/a&gt;, a Ruby consultant with 30+ years of experience, and a Smalltalk background, strongly &lt;a href="https://thoughtbot.com/blog/sandi-metz-rules-for-developers"&gt;advises for small classes and small methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Small objects seem to make following the &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;Object Oriented Design Principles&lt;/a&gt; easier.&lt;/p&gt;

&lt;p&gt;So, how can two well-respected authors have polar opposite opinions? Well, for one, because software is hard, but also, because writing good, maintainable software is more an art than a mathematical formula you can blindly apply.&lt;/p&gt;

&lt;p&gt;Different people with different backgrounds and different experience reach the goal in different ways. Shocker right? 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-case-for-small-objects"&gt;
  &lt;/a&gt;
  A case for small objects
&lt;/h2&gt;

&lt;p&gt;I am biased. Being a Ruby developer, and sharing Sandi's philosophy, I love small objects with tiny interfaces. But I know sometimes, they can make things more complex.&lt;/p&gt;

&lt;p&gt;Something Sandi and John have in common is that they both care a lot about abstractions. Abstractions are very important, and they require constant refactor, in order to accommodate them to the software we are writing.&lt;/p&gt;

&lt;p&gt;Sandi says "it's better to have duplication, than the wrong abstraction". And in this sense, we can see that it's not enough to blindly follow some rules. And &lt;strong&gt;that&lt;/strong&gt; is the trick to it.&lt;/p&gt;

&lt;p&gt;Whether you approach it from the right or from the left, whether you prefer small objects or deep modules, you need a critical eye, and always be watching the design of your software.&lt;/p&gt;

&lt;p&gt;Take time to refactor, accommodate the abstractions, think about different solutions, and sometimes, recognize that you just can't come up with a good solution, in which case, it's better to leave it as it is for now, until you have more code. The more repetition you have, the easier it is to notice the pattern, and abstract it away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-java-example"&gt;
  &lt;/a&gt;
  Back to the Java example
&lt;/h2&gt;

&lt;p&gt;Remember this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;FileInputStream&lt;/span&gt; &lt;span class="n"&gt;fileStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bufferedStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferedStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ugly right? One could look at it and blame the small classes. But you could also look at it, and realize you are looking at an implementation, not an interface.&lt;/p&gt;

&lt;p&gt;What if you used a &lt;a href="https://en.wikipedia.org/wiki/Builder_pattern"&gt;builder object&lt;/a&gt; to abstract it away? I don't know much about the Java API, but in Ruby-land, it could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;StreamBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;buffered: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing the name of the classes and what it takes to instantiate them is a dependency. You can abstract those away, think of them as implementation details. The consumers of &lt;code&gt;StreamBuilder&lt;/code&gt; don't even need to know they exist.&lt;/p&gt;

&lt;p&gt;We now exposed a small interface -- only a constructor -- and hide the implementation details, which is the name of classes and how to arrange them all together.&lt;/p&gt;

&lt;p&gt;You will still need to know the name of the builder class, and what it expects in the constructor, but that can be easily documented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h2&gt;

&lt;p&gt;It is true small classes have issues. A class will always be more complex than just a function, and debugging OOP code can feel like following Alice through the rabbit hole. You look at one object which uses another which uses another.&lt;/p&gt;

&lt;p&gt;But they also have advantages. For example, you don't have to hold several objects in your head at once, but you might need to hold a lot of state if you are debugging one big method.&lt;/p&gt;

&lt;p&gt;Also, small classes force you to separate the algorithm into smaller parts. A fundamental part of your problem could easily be intermingled and hidden away, you might not even know it exist, if it was just one big method or massive class.&lt;/p&gt;

&lt;p&gt;Yet another advantage is that the average complexity of your code will be smaller. It might not be perfect, but it will be &lt;strong&gt;consistent&lt;/strong&gt;. It will allow your software to not be consumed by it's own inevitable complexity.&lt;/p&gt;

&lt;p&gt;There's a great talk by Sandi called &lt;a href="https://www.youtube.com/watch?v=8bZh5LMaSmE"&gt;All the Little Things&lt;/a&gt; which explains this in detail.&lt;/p&gt;

&lt;p&gt;So, what's better? It depends. We know that both extremes are wrong, so it's up to you to come with a happy middle! What do &lt;strong&gt;you&lt;/strong&gt; prefer?&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>oop</category>
      <category>ruby</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Migrating HLS videos to Mp4 format in Rails.</title>
      <author>Konnor Rogers</author>
      <pubDate>Fri, 02 Jul 2021 00:13:36 +0000</pubDate>
      <link>https://dev.to/paramagicdev/migrating-hls-videos-to-mp4-format-in-rails-2nj5</link>
      <guid>https://dev.to/paramagicdev/migrating-hls-videos-to-mp4-format-in-rails-2nj5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;Recently, I was tasked with migrating our HLS videos over to mp4 format and store it on S3 for a variety of reasons. I wanted to document the magic incantations I followed to make this happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ffmpeg-command"&gt;
  &lt;/a&gt;
  The FFMPEG command.
&lt;/h2&gt;

&lt;p&gt;The first step is how do you convert HLS to mp4. Well, theres a number of ways. FFMPEG is my go to solution because its widely available and generally on most servers.&lt;/p&gt;

&lt;p&gt;To begin, I googled around and found this was the secret sauce to be able to convert HLS video into mp4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &amp;lt;input&amp;gt; &lt;span class="nt"&gt;-acodec&lt;/span&gt; copy &lt;span class="nt"&gt;-bsf&lt;/span&gt;:a aac_adtstoasc &lt;span class="nt"&gt;-vcodec&lt;/span&gt; copy &amp;lt;output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whats super cool to note is &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; can actually be a fully qualified &lt;code&gt;https://provider/video.m3u8&lt;/code&gt; url so the HLS manifest doesn't have to be available locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-it-to-rails"&gt;
  &lt;/a&gt;
  Moving it to Rails
&lt;/h2&gt;

&lt;p&gt;Okay, but how do we do that in Rails?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice I didn't make this one big string. Instead the first argument is the command, and everything else afterwards are flags. The reason for this is to help prevent command injection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  Whats next
&lt;/h2&gt;

&lt;p&gt;Alright, now that we have the command to convert the video, now we have to clean up some loose ends including generating a temporary file for storage, and then shoving the file contents into S3 via ActiveStorage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#housekeeping"&gt;
  &lt;/a&gt;
  Housekeeping
&lt;/h3&gt;

&lt;p&gt;Since I know this method is going to do a couple things, lets call it &lt;code&gt;migrate_to_mp4&lt;/code&gt;. This method will also exist on the &lt;code&gt;Video&lt;/code&gt; model and the &lt;code&gt;Video&lt;/code&gt; will have one attached mp4 video like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Video&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_one_attached&lt;/span&gt; &lt;span class="ss"&gt;:mp4_video&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generating-a-temporary-file"&gt;
  &lt;/a&gt;
  Generating a temporary file
&lt;/h3&gt;

&lt;p&gt;Now that we have some structure in place, lets work on expanding this method to actually work!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".mp4"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unlink&lt;/span&gt;

    &lt;span class="c1"&gt;# hls_url is a db column on the video record.&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we create a &lt;code&gt;Tempfile&lt;/code&gt; which has a number of semantics that make it great for creating...you guessed it, temporary files.&lt;/p&gt;

&lt;p&gt;By passing &lt;code&gt;::Tempfile.new&lt;/code&gt; an array we say: "Generate a temporary file with a random name prefixed with 'video' and ending with '.mp4'"&lt;/p&gt;

&lt;p&gt;Next we save its path since its going to be unique. Then we close it and unlink it so it gets deleted immediately. We do this because if the file exists, FFMPEG will give us a warning and we have to manually address it which we dont want to have to do.&lt;/p&gt;

&lt;p&gt;Finally, we pass the path along to the ffmpeg command and we're nearly done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-activestorage"&gt;
  &lt;/a&gt;
  Writing to ActiveStorage
&lt;/h3&gt;

&lt;p&gt;The next step is to write this newly created file to ActiveStorage. To do so, we call the &lt;code&gt;#attach&lt;/code&gt; method on &lt;code&gt;mp4_video&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"video-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mp4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h3&gt;

&lt;p&gt;Okay we did it! Its done! Not quite, theres still a couple other loose ends to tie up. First, since we actually wrote this file onto disk, we should delete it. We should also wrap FFMPEG in a &lt;code&gt;begin/ensure&lt;/code&gt; clause to ensure we delete the file regardless of whether or not it succeeds.&lt;/p&gt;

&lt;p&gt;Heres what our final method looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

    &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".mp4"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;

    &lt;span class="c1"&gt;# We dont actually want the tempfile, just its path.&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unlink&lt;/span&gt;

    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"video-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mp4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;ensure&lt;/span&gt;
      &lt;span class="c1"&gt;# always cleanup our mess.&lt;/span&gt;
      &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright thats the final method I ended up with!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;There are a couple extra steps as part of the migration process that I'll add here. I also had to do the following:&lt;/p&gt;

&lt;p&gt;1.) Find all videos not migrated&lt;br&gt;
2.) If they're not migrated, migrate them.&lt;/p&gt;

&lt;p&gt;So this is easily broken up into 2 parts. The first part is writing the query to find all non-migrated videos. Heres what my query looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:not_migrated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;left_joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="ss"&gt;:mp4_video_attachment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;active_storage_attachments: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, that takes care of &lt;em&gt;HOW&lt;/em&gt; to find not migrated videos. The next step is to do something about it.&lt;/p&gt;

&lt;p&gt;When I find I need to do imperative items like this, I like to reach for &lt;code&gt;ActiveJob&lt;/code&gt;. We also use Sidekiq so its worth noting to make sure to use JSON serializable parameters with Sidekiq.&lt;/p&gt;

&lt;p&gt;Heres what my job to migrate looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MigrateVideoStorageJob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationJob&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;
      &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not_migrated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ids&lt;/span&gt;

      &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;MigrateVideoStorageJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;

    &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So then, in a console you can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails console
MigrateVideoStorageJob.perform_later
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now there are some issues with this job. &lt;/p&gt;

&lt;p&gt;The first issue is that it goes 1 by 1 which means for every video we're going to incur a full DB query. &lt;/p&gt;

&lt;p&gt;Its not great, but there was only roughly 100 videos to migrate so I didn't think it was worth batching and worrying about performance. &lt;/p&gt;

&lt;p&gt;"Real artists ship".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yes-were-done"&gt;
  &lt;/a&gt;
  Yes. We're done.
&lt;/h2&gt;

&lt;p&gt;Anyways, this was my foray into migrating HLS videos over to MP4 videos. Thanks for coming along for the ride!&lt;/p&gt;

</description>
      <category>hls</category>
      <category>video</category>
      <category>rails</category>
      <category>activestorage</category>
    </item>
    <item>
      <title>Guia intergalático do artigo técnico</title>
      <author>Letícia Silva</author>
      <pubDate>Thu, 01 Jul 2021 23:51:47 +0000</pubDate>
      <link>https://dev.to/dii_lua/guia-intergalatico-do-artigo-tecnico-1g3f</link>
      <guid>https://dev.to/dii_lua/guia-intergalatico-do-artigo-tecnico-1g3f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tudo-o-que-voc%C3%AA-precisa-saber-para-fazer-o-seu-primeiro-texto-sair-do-papel"&gt;
  &lt;/a&gt;
  Tudo o que você precisa saber para fazer o seu primeiro texto sair do papel!
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Uma das premissas mais verdadeiras na vida para mim é aquela que diz que "Todo mundo tem algo a aprender e a ensinar". E é baseado nisso que eu sempre incentivei as pessoas a compartilharem seus conhecimentos, seja através de palestras, tutoriais, artigos, posts ou vídeos. Independente da forma, quando você decide compartilhar algo que já sabe, está passando por um processo nada trivial e muito importante, onde precisa explicar um conteúdo que já aprendeu para uma pessoa que possa (ou não) ter conhecimento no assunto. E sendo sincera, a segunda opção é bem mais comum e difícil de se colocar em prática. Por isso mesmo, decidi vir aqui compartilhar um pouco da minha experiência sobre a tarefa - NADA fácil - de escrever artigos técnicos acessíveis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-lel%C3%AA-por-que-acess%C3%ADvel"&gt;
  &lt;/a&gt;
  Mas Lelê, por que "acessível"?
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/S5Jpp1srTJayEJZKvU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/S5Jpp1srTJayEJZKvU/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Meme com mulher perguntando "por que?"&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;E eu te explico: materiais técnicos, como artigos, possuem uma fama de serem "difíceis de entender". E óbvio que essa constatação não é 100% verdadeira, mas ela se torna real a partir do momento em que houve apenas uma preocupação na criação do material em questão: a sua existência. Uma propriedade muito importante e lembrada com pouca frequência é a tal de legibilidade, que torna as coisas mais fáceis de se ler, ou entendíveis. E há muitas maneiras de colocar essa engrenagem para girar, mas a principal é: ter empatia com quem está lendo. Você pode não saber quem é ou não ter conhecimento do background da pessoa leitora, mas deve ter como parâmetro que a sua avó (ou qualquer outra pessoa que não tenha muito conhecimento no assunto) consiga compreender o que está escrito.&lt;/p&gt;

&lt;p&gt;Partindo desse ponto, vamos para um dos tópicos que eu mais amo no mundo: &lt;strong&gt;analogias&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-arte-de-explicar-utilizando-exemplos-simples"&gt;
  &lt;/a&gt;
  A arte de explicar utilizando exemplos simples
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/l44QiZECjPEjLAwzm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l44QiZECjPEjLAwzm/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Mulher jogando papéis picados para alto&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Quando penso em analogia, sempre me vem a cabeça atividades comuns do dia a dia: andar, escovar os dentes, cozinhar, fazer compras, assistir série. Esse termo faz referência a um processo que passa a ser explicado de uma maneira descomplicada, e normalmente utiliza coisas que façam parte da realidade da maioria das pessoas. Por exemplo, minha avó não entende o que é um algoritmo, mas sabe o que é uma receita de bolo. Então, se eu disser para ela que um algoritmo funciona como uma série de passos, assim como uma receita de bolo, provavelmente ela entenderá o conceito (mesmo sem saber programação) e conseguirá construir uma ponte entre os dois assuntos.&lt;/p&gt;

&lt;p&gt;Mas vamos a outro exemplo. Imagine que você está tentando explicar a alguém sobre o conceito de Github, mas não consegue encontrar um conceito do dia a dia para utilizar na explicação. E eis que você pensa numa geladeira! O Github é um site que funciona como uma "rede social das pessoas programadoras", onde se armazena código e projetos em repositórios. Uma geladeira é um local cheio de prateleiras e compartimentos, onde se guardam alimentos e pratos prontos. Então, se pensarmos no Github como uma geladeira que não guarda comida, mas principalmente código, e possui divisões de acordo com o tipo / categoria / área em que o código está sendo utilizado, as coisas ficam muito mais legíveis e visuais.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#uma-imagem-vale-mais-que-mil-palavras-ou-quase-isso"&gt;
  &lt;/a&gt;
  "Uma imagem vale mais que mil palavras", ou quase isso
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/2XskdWTCW96qaKAJncA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2XskdWTCW96qaKAJncA/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Gif com as obras do pintor Van Gogh&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Que um exemplo pode ficar bem mais explícito como uma imagem não se discute. Mas, no momento em que se deseja ilustrar algo com uma figura, deve pensar-se também em alguns outros pontos, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na resolução dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não é porque "&lt;em&gt;no meu computador funciona&lt;/em&gt;" que no computador de outras pessoas vai funcionar, não é mesmo? O que você consegue visualizar bem no seu monitor de 29' full HD pode não ser o ideal para quem está lendo do celular. Por esse motivo, sempre prefira figuras com alta resolução ou envie seu artigo para outras pessoas verificarem se as fotografias não estão distorcidas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nas cores dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O que funciona para um pode não funcionar para os outros. Você pode conseguir identificar todas as cores presentes em uma imagem, mas há pessoas que não e tá tudo bem. Lembre-se sempre disso quando for descrever a imagem, pois citar uma determinada parte da figura através de sua cor pode não ser acessível.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se a figura contém texto, e se ele está legível&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sempre tome o cuidado de descrever as imagens, para que pessoas cegas, com baixa visão ou com alguma dificuldade na vista não sejam prejudicadas por não conseguirem visualizar a foto em questão.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na explicação dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagens devem ser usadas quando necessárias, mas isso não significa soltar elas aleatoriamente ao longo do texto. Sempre tente manter a coerência entre o que está escrito e ilustrado.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nos direitos autorais da figura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagens, se não criadas pela própria pessoa autora do texto, foram retiradas de algum lugar. É super importante passar dentro do artigo de onde a figura foi extraída, e tentar ao máximo utilizar imagens que possuam licença de direitos autorais livre. Nesses sites você pode encontrar figuras nessa categoria:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#foque-na-comunica%C3%A7%C3%A3o-n%C3%A3o-no-tecniqu%C3%AAs"&gt;
  &lt;/a&gt;
  Foque na comunicação, não no &lt;em&gt;tecniquês&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/RdtcEbPrajYcmM8oH0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RdtcEbPrajYcmM8oH0/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Homem se comunicando enquanto faz gestos com as mãos&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Mas eu entendo o que eu escrevo"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bem, bom pra você né, anjo. Utilizar muitos termos técnicos, além de dificultar a leitura do conteúdo que você dedicou seu tempo e preprou com carinho, faz com que uma gama de pessoas não sintam-se capazes de consumir o seu conteúdo por ele ser difícíl de interpretar. Nas minhas aulas de Storytelling, sempre enfatizava esse fato para a turma, pois é crucial para que as pessoas sintam-se confortáveis o suficiente com o enredo que você montou e se identifiquem com a história.  &lt;/p&gt;

&lt;p&gt;Lembre-se: não usar o tecniquês não significa escrever algo ruim, mas sim fazer com que mais pessoas entendam o conteúdo que você está publicando e ajudar o conhecimento a ser disseminado.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entenda quem você quer atingir&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não adianta produzir um artigo com conteúdo extremamente avançados, se o seu desejo é alcançar as pessoas que possuem mais senioridade, e vice versa. Se você quer ter um público mais geral e menos específico, pense em estratégias e conteúdos que possam ajudar nisso, e que atinjam essas pessoas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#comunique"&gt;
  &lt;/a&gt;
  C-O-M-U-N-I-Q-U-E
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/jV4wbvtJxdjnMriYmY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jV4wbvtJxdjnMriYmY/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Meme do Bob Esponja apresentando a comunicação&lt;/center&gt;  

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Hoje em dia muito se fala sobre &lt;strong&gt;comunicação neutra&lt;/strong&gt; e afins. Você sabe realmente o que isso significa e sua importância?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pessoas são pessoas, e apenas isso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse termo surgiu com o intuito de fazer com que &lt;strong&gt;TODAS&lt;/strong&gt; as pessoas, independente de gênero ou opção sexual, sintam-se representadas. Isso significa que, referir-se a alguém como "desenvolvedor", "o programador", "o cara", é algo excludente e que deve ficar no passado. Além de ignorar a existência de mulheres em uma determinada área ou assunto (isso é muito comum em tecnologia, principalmente em vagas), você pode acabar excluindo pessoas não binárias ou que se identifiquem com um pronome que você não esteja utilizando.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O temido "&lt;em&gt;x&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu já vi muita gente criticando e muita gente usando termos terminados com "x" no final, como "desenvolvedorxs", "cientistx", "alunxs", etc. Acontece que, esse &lt;strong&gt;x&lt;/strong&gt; que as pessoas cismam em colocar para deixar as coisas "&lt;em&gt;inclusivas&lt;/em&gt;" acaba tornando o processo mais doloroso para pessoas deficientes visuais que precisam utilizar leitores de tela. Isso porque leitores de tela não conseguem reproduzir o som representado por esses termos, exatamente por esse &lt;strong&gt;x&lt;/strong&gt; não estar configurado nos equipamentos. Por esse motivo, NÃO UTILIZE X nos termos para tentar ser uma pessoa inclusiva. O efeito rebote é real.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tira o "&lt;em&gt;x&lt;/em&gt;", mas coloca o "&lt;em&gt;e&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como solução para não usar o &lt;strong&gt;x&lt;/strong&gt;, as pessoas começaram a colocar o &lt;strong&gt;e&lt;/strong&gt; no final, como forma de tornar acessível e diverso o texto escrito. Acontece que, de acordo com as normas da língua portuguesa, isso é uma prática errada. Eu não estou aqui para defender um lado ou outro, mas para dizer que: há uma saída que não exclua absolutamente ninguém - seja por exclusão de minorias, seja por ilegibilidade - e que torna a leitura mais fluida, acessível e inclusiva. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O inclusivo - e mais esquecido - substantivo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Composto, primitivo, derivado, próprio: calma, isso não é aula de português, mas também é importante! Um dos tipos de substantivos menos citados e mais importante é o coletivo, que engloba um grupo de itens do mesmo tipo, e é extremamente útil para se referir a um grupo de pessoas, sem necessariamente utilizar um pronome que defina gênero. &lt;em&gt;Grupo&lt;/em&gt;, &lt;em&gt;comunidade&lt;/em&gt;, &lt;em&gt;pessoas&lt;/em&gt;, &lt;em&gt;turma&lt;/em&gt;, &lt;em&gt;estudantes&lt;/em&gt; são ótimos exemplos para fazer isso.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#seja-confiante"&gt;
  &lt;/a&gt;
  Seja confiante!
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/loSQ6ueH5uC8CQsYXp/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/loSQ6ueH5uC8CQsYXp/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Personagem da série Lucifer emanando confiança&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Quando perguntei no &lt;a href="https://twitter.com/dii_lua/status/1396587542674350083"&gt;Twitter&lt;/a&gt; quais as maiores dúvidas da galera a respeito de artigo técnico, recebi diversas respostas, e vou tentar respondê-las agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Será que vai ser útil pra alguém?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Será que vai ser realmente útil?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu tenho uma tese (vulgo mantra) de que todo mundo há algo para compartilhar e algo para aprender. Isso serve para eu que estou escrevendo desse lado, para você que está lendo do outro, para a pessoa idosa que está caminhando na rua e para a criança brincando de futebol no andar de cima. Independente de quem seja, as pessoas têm muito a agregar. E por isso mesmo isso não deveria ser uma pergunta, mas uma AFIRMAÇÃO de que sim, o seu conteúdo tem muita utilidade para alguém.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que o que vou dizer está certo? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu não conheço alguém que saiba de absolutamente tudo. Mesmo quem seja visto como uma referência de uma determinada área, essa pessoa pode não saber tudo dela. E tá tudon bem! Precisamos normalizar que as pessoas, ainda mais as desenvolvedoras, não precisam ser gênias das tecnologias que trabalham para poder falar sobre elas :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que alguém consegue explicar melhor que eu?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talvez. Não posso te afirmar nem negar, exatamente pelo fato do mundo ter quase 8 bilhões de pessoas. Mas isso não significa que, só porque há a possibilidade de alguém explicar melhor, você não deva se permitir explicar sobre um tópico. &lt;/p&gt;

&lt;p&gt;Vou te dar um exemplo pessoal: eu tenho uma palestra, que fiz lá em 2018, e dou ela até hoje. Seu nome é "Data Science: É de comer?", e eu já palestrei em eventos nacionais, internacionais e locais usando ela, dezenas de vezes. Ela inspirou artigos, palestras e podcasts, e muita gente fala bem quando levo ela para os eventos. Mesmo te contando tudo isso, não significa que seja a melhor palestra do mundo. A única certeza que ela me traz é: toda vez que vou ministrá-la em algum lugar, eu aprendo mais sobre o assunto. E consigo aprimorar minhas falas, slides e ganchos, simplesmente porque estou praticando isso. Então, antes de se comparar com alguém ou considerar que uma determinada pessoa consegue explicar melhor que você, faça! Apenas faça e se aprimore nisso, porque essa é a única maneira de voce ganhar experiência: praticando. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como se limitar a pesquisa para não se perder em tantas possibilidade?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definindo seus objetivos e metas a serem atingidas com um determinado conteúdo. Quando você decide falar a respeito de um assunto, deve pensar no que pretende focar e como deseja abordar o tópico em questão, pois esses pilares te nortearão no desenvolvimento da sua pesquisa, e fará com que você estabeleça os principais pontos que deseja destacar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;De que forma devo escrever? O mais formal possível? Menos formal?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depende muito de que está escrevendo. Eu, por exemplo, não uso uma linguagem extremamente formal, porque gosto que as pessoas se identifiquem com o que estou abordando. Isso também não significa que eu use apenas termos que estão &lt;em&gt;hypados&lt;/em&gt; (famosos) na área, apenas porque eles ganharam visibilidade no momento, ou não respeite as normas do português. Escrita pra mim, independente do gênero ou objetivo, é uma forma de se expressar. E gosto que as pessoas e enxerguem no que eu produzo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que não estou passando alguma informação errada ou não tão certa?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu sempre pesquiso muito antes de passar uma determinada informação, e recomendo que as pessoas também façam isso. Porém, há dois fatos bem interessantes sobre esse ponto, que são: não precisamos saber tudo, e errar é humano. Engana-se quem pensa que artigos técnicos são carregados de informações 100% verídicas na maior parte do tempo, porque não são. Já encontrei diversas vezes erros e afirmações gritantes que, claramente, mostravam que não havia sido feito uma pesquisa ou a pessoa que produziu tinha embasamento. Por isso mesmo, a recomendação é: pesquise, e se não souber, pergunte. Não custa nada, inclusive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Me embasar em artigos de diferentes pessoas sobre o assunto ou buscar afunilar mais minha base de busca?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu adoro me embasar em artigos de diferentes pessoas, e também amo fazer pesquisas para tornar a definição do que pretendo escrever mais clara. Uma coisa não impede a outra, mas acho que há alguns pontos importantes nisso:&lt;/p&gt;

&lt;p&gt;-&amp;gt; Se embasar é diferente de fazer cópia. Diversas vezes, artigos e conteúdos de outras pessoas me deram ideias, mas plágio é crime e sou totalmente contra a isso;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Sempre que citar a fala / pesquisa / conteúdo de alguém, dê os créditos e de preferência, coloque o link para o material;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Quando for pesquisar para afunilar mais a sua base de buscqa, tome cuidado para não acabar se encantando com outras temáticas e esquecendo a sua original. Não há problema algum em escrever sobre tópicos relacionados, mas deixar o assunto que você queria tratar porque encontrou outro pode gerar frustração (já aconteceu comigo). Nesse caso, recomendo optar por escrever dois textos, cada um tratando de uma temática específica, ou caso deseje, englobando um assunto no outro. Reflita se faz sentido.      &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quais os passos para produzir desde o início até sua publicação?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bem, há muitas formas de se fazer isso, incluindo rascunhar em um papel qual é a estrutura que você quer obter e as metas a serem atingidas com o seu artigo, mas acredito que um esqueleto sempre pode ajudar!&lt;/p&gt;

&lt;p&gt;Pensando nisso, decidi montar um esqueleto baseado no que faço, e deixei disponível para você baixar e modificar como quiser! O template está bem simples, e você pode encontrá-lo &lt;a href="https://drive.google.com/file/d/1H0gANJP8i70QJDfcFOSxwo8iMxpVT2OO/view?usp=sharing"&gt;aqui&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Caso haja interesse, posso organizar uma live ou workshop para que possamos construir juntos! &lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/KZAMZlHBmqZ6Zu0HBO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KZAMZlHBmqZ6Zu0HBO/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Gif de um boneco mandando corações&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Você também pode conferir mais artigos meus e como organizo as ideias nos meus perfis do &lt;a href="https://dev.to/dii_lua"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@dii_lua"&gt;Medium&lt;/a&gt; e &lt;a href="https://www.therelicans.com/dii_lua"&gt;The Relicans&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se quiser trocar uma ideia, me dá um alô no &lt;a href="https://twitter.com/dii_lua"&gt;Twitter&lt;/a&gt; que a gente conversa!&lt;/p&gt;

&lt;p&gt;Beijinhos científicos, &lt;/p&gt;

&lt;p&gt;Lelê &amp;lt;3&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rotation in AVL tree</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 01 Jul 2021 23:13:04 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/rotation-in-avl-tree-376o</link>
      <guid>https://dev.to/ayabouchiha/rotation-in-avl-tree-376o</guid>
      <description>&lt;p&gt;Hi, on this amazing day we're going to discuss rotation in the AVL tree! if you're not familiar with AVL trees check this &lt;a href="https://dev.to/ayabouchiha/introduction-to-avl-tree-fbk"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-rotation"&gt;
  &lt;/a&gt;
  Type of Rotation
&lt;/h2&gt;

&lt;p&gt;before starting, I want to remention that the BalanceFactor &lt;code&gt;BalanceFactor = height(left sub-tree) - height(right sub-tree)&lt;/code&gt; should be -1, 0 or 1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#right-rotation"&gt;
  &lt;/a&gt;
  Right rotation
&lt;/h3&gt;

&lt;p&gt;We use this rotation when the tree is a left unbalanced tree like this example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:2) 
    /
  11 (bf:1)      left unbalanced tree
 /
9 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this case, the tree needs a right rotation (&lt;em&gt;RR&lt;/em&gt;), so the unbalanced node(&lt;em&gt;15&lt;/em&gt;) becomes a right child of its left child (&lt;em&gt;11&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           11  (bf:0)
         /    \
(bf:0)  9     15 (bf:-0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#left-rotation"&gt;
  &lt;/a&gt;
  Left rotation
&lt;/h3&gt;

&lt;p&gt;We use this rotation when the tree is a right unbalanced tree like this example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 15 (bf:-2) 
  \
   17 (bf:-1)   right unbalanced tree
     \
      19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this case, the tree needs a left rotation (&lt;em&gt;LL&lt;/em&gt;), so the unbalanced node(&lt;em&gt;15&lt;/em&gt;) becomes a left child of its right child (&lt;em&gt;17&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           17  (bf:0)
         /    \
(bf:0)  15     19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rightleft-rotation"&gt;
  &lt;/a&gt;
  Right-Left rotation
&lt;/h3&gt;

&lt;p&gt;The Right Left Rotation is a combination of right rotation followed by a left rotation. Let's see this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;15 (bf:-2)
  \ 
   19 (bf:1)
  / 
16 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;firstly, we'll perform a right rotation so this tree we'll be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:-2)
      \
       16 (bf:-1)
        \
         19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we'll perform a left rotation because the tree becomes a right unbalanced tree. That's why (&lt;em&gt;15&lt;/em&gt;) will become the left child of its right child (&lt;em&gt;16&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         16 (bf:0)
        /  \
(bf:0)15    19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#leftright-rotation"&gt;
  &lt;/a&gt;
  Left-Right rotation
&lt;/h3&gt;

&lt;p&gt;The Left-Right Rotation is a combination of left rotation followed by a right rotation. Let's see this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    15  (bf:2)
   /  
 11 (bf:-1)
   \
    13 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;firstly, we'll perform a left rotation of the tree we'll be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:2)
    /
   13  (bf:1)
  /
11 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we'll perform a right rotation because the tree becomes a left unbalanced tree. That's why (&lt;em&gt;15&lt;/em&gt;) will become the right child of its left child (&lt;em&gt;13&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          13 (bf:0)
         /  \
(bf:0) 11    15 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tomorrow, I'll cover the implementation of insertion using &lt;strong&gt;python&lt;/strong&gt;!&lt;br&gt;
Thank you for your time and happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.educative.io/edpresso/common-avl-rotation-techniques"&gt;https://www.educative.io/edpresso/common-avl-rotation-techniques&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/avl-tree-insertion-rotation-and-balance-factor/"&gt;https://www.freecodecamp.org/news/avl-tree-insertion-rotation-and-balance-factor/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/avl_tree_algorithm.htm"&gt;https://www.tutorialspoint.com/data_structures_algorithms/avl_tree_algorithm.htm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tree_rotation"&gt;https://en.wikipedia.org/wiki/Tree_rotation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_8qqlVH5NC0"&gt;https://www.youtube.com/watch?v=_8qqlVH5NC0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=YWqla0UX-38"&gt;https://www.youtube.com/watch?v=YWqla0UX-38&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The NEW Manual Validation Task for Azure DevOps YAML Pipelines Demystified</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 01 Jul 2021 23:04:13 +0000</pubDate>
      <link>https://dev.to/n3wt0n/the-new-manual-validation-task-for-azure-devops-yaml-pipelines-demystified-385c</link>
      <guid>https://dev.to/n3wt0n/the-new-manual-validation-task-for-azure-devops-yaml-pipelines-demystified-385c</guid>
      <description>&lt;p&gt;With the newly released Manual Validation task you can pause a YAML pipeline mid-stage. This allows you to perform manual or offline activities and then resume (or reject) the run. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As I've mentioned, you can use this new task in a YAML pipeline to pause a run within a stage, typically to perform some manual actions or validations, and then resume/reject the run.&lt;/p&gt;

&lt;p&gt;This is especially useful in scenarios where you want to pause a pipeline and validate configuration settings, build package, etc. before moving on to a long-running, compute-intensive job.&lt;/p&gt;

&lt;p&gt;When the Manual validation task is activated during a pipeline, it displays a message bar containing a link that opens the Manual validation dialog containing the instructions. After carrying out the manual steps, the administrator or user can choose to resume the run or reject it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Let's see this in action. We will cover how to configure Azure Pipelines to use it and how to use it.&lt;/p&gt;

&lt;p&gt;Here you have &lt;strong&gt;the video with the whole demo and explanation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sfb3d100JPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/sfb3d100JPo"&gt;Link to the video: https://youtu.be/sfb3d100JPo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;Remember that, as I've mentioned in the video, you can use this new approach only in an agentless job of a YAML pipeline. If like in my example you have other jobs already, you would need to add a job with pool: server to make this work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;I wanna know what you think about this feature, so let me know in the comment section below.&lt;/p&gt;

&lt;p&gt;Also, check &lt;a href="https://youtu.be/3cGtA__dKUc"&gt;this video over here&lt;/a&gt;, where I talk about the differences between Classic and YAML pipelines for both Build and Release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sfb3d100JPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>pipelines</category>
      <category>cicd</category>
      <category>yaml</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 01 Jul 2021 22:58:09 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-568n</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-568n</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;Starting off Top Comments with a movie quote on this post about &lt;a href="https://dev.to/knajjars/learnings-after-5-years-of-being-a-hipster-in-tech-1b0n"&gt;being a hipster in tech&lt;/a&gt; is exactly what we needed this week, thanks &lt;a class="mentioned-user" href="https://dev.to/booyouon"&gt;@booyouon&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/booyouon"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPmDOheO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--90K7P0N6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644362/a837d826-1fa2-41ff-8900-41a34b21cad0.jpg" alt="booyouon profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/booyouon"&gt;
        &lt;span class="comment-username"&gt;Vince Abuyuan&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/booyouon/comment/1fmb7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 27
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This reminds me of a quote from the dead poet society “ medicine, law, business, engineering, these are noble pursuits and necessary to sustain life. But poetry, beauty, romance, love, these are what we stay alive for. ” :) &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://dev.to/devteam/what-was-your-win-this-week-10c6"&gt;Weekly Wins&lt;/a&gt; keep us going. Congrats, &lt;a class="mentioned-user" href="https://dev.to/cenacr007_harsh"&gt;@cenacr007_harsh&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/cenacr007_harsh"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwqQPxuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--IaELHd5L--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/d1caf43e-4478-42c3-8ac3-f3b2980d031b.png" alt="cenacr007_harsh profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/cenacr007_harsh"&gt;
        &lt;span class="comment-username"&gt;KUMAR HARSH&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/cenacr007_harsh/comment/1fl62" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;My last post on Dev crossed 10k views for the first time 🤗&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes we all need to be explained things &lt;a href="https://dev.to/peter/explain-a-memory-leak-like-i-m-five-2664"&gt;like we're five&lt;/a&gt;. Thanks for the great walkthrough, &lt;a class="mentioned-user" href="https://dev.to/glsolaria"&gt;@glsolaria&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/glsolaria"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5tRa3AK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0V-Bp95C--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/229706/ea693a42-a672-4081-8f6e-135b9069fd24.jpg" alt="glsolaria profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/glsolaria"&gt;
        &lt;span class="comment-username"&gt;G.L Solaria&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/glsolaria/comment/1fkk7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;To extend the lego block analogy and make the explanation unnecessarily more complicated for applications running with managed memory models (e.g. C# and Java)...&lt;/p&gt;

&lt;p&gt;Imagine there is an invisible robot vacuum cleaner (i.e. the garbage collector) that runs around automatically picking up lego blocks. &lt;/p&gt;

&lt;p&gt;Nobody is really sure when the robot will run and what it will pick up.  &lt;/p&gt;

&lt;p&gt;Sometimes it will not pick up some of the blocks even when you know it has run (e.g. when memory is pinned) and sometimes the block could be collected but the robot just doesn't feel like picking it up on that run. &lt;/p&gt;

&lt;p&gt;To frustrate you further, when you go looking for leaked blocks, sometimes they are chained together and the root block actually stopping a bunch of other blocks from being collected is a block you least suspect.&lt;/p&gt;

&lt;p&gt;I forgot to mention that it is also a Heisenberg robot so when you go looking for leaked blocks, the robot starts behaving differently.&lt;/p&gt;

&lt;p&gt;So in conclusion, not only do you trip over the blocks in the dark but you might get super lucky and trip over the invisible robot vacuum too! &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://dev.to/chetan_atrawalkar/how-to-avoid-stress-during-coding-56f1"&gt;Stress during coding&lt;/a&gt; can be a huge roadblock to a successful launch, day, or project. Meditiation really is a great way to help relieve the pain - good tip, &lt;a class="mentioned-user" href="https://dev.to/qwby"&gt;@qwby&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/qwby"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DBZ8krk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B-LSnX65--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620049/734f4236-9fae-478f-a02f-e11c20742830.png" alt="qwby profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/qwby"&gt;
        &lt;span class="comment-username"&gt;Dominik Halfkann&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/qwby/comment/1fn2p" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 28
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I would add to that: Meditation.&lt;br&gt;
It helps relief stress and anxiety, can make you more focused, you’ll have more patience and experience a whole lot of other positive effects.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jonsilver"&gt;@jonsilver&lt;/a&gt;
 really adds to this post on &lt;a href="https://dev.to/mayank0508/things-you-should-master-before-you-jump-on-react-js-4d1a"&gt;things to master before working with React.js&lt;/a&gt;! Thanks for the comment!&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jonsilver"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyv9GU68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ti3GWHZB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174828/bb99344d-0862-4126-a7da-814f99808368.jpg" alt="jonsilver profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jonsilver"&gt;
        &lt;span class="comment-username"&gt;Jon Silver&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/jonsilver/comment/1fm8b" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 27
  &lt;/time&gt;

    • Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Jun 27&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I'd go a lot further than a basic knowledge of Javascript. You need to intimately understand Javascript fundamentals like lexical scopes and closures, and referential equality vs value equality, so you can understand why function-based components and hooks work the way they do. Most Javascript developers have no idea about these concepts until they're forced to relearn by diving into React, which can be a much more painful introduction to the craft than learning Javascript properly beforehand.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
  </channel>
</rss>
