<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Detailed Python: or How to Cross the Border of Knowledge</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Mon, 29 Nov 2021 09:57:56 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/detailed-python-or-how-to-cross-the-border-of-knowledge-29j8</link>
      <guid>https://dev.to/vadimkolobanov/detailed-python-or-how-to-cross-the-border-of-knowledge-29j8</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@emilep?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Emile Perron&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/python?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want your code to look high-quality and concise and speak about you as an experienced developer? Then let's dive a little deeper into the basic knowledge and see how much you can simplify your code, how to make it readable and not lose the desire to return to your work again. Welcome to detailed Python. It's time to get better!&lt;/p&gt;

&lt;p&gt;If you started learning Python, watched a dozen training videos, took several free courses, intensive courses and meetups, and are trying to write your first project, then this article will certainly help you. A superficial analysis of Russian-language Python training materials on the Internet suggested that a novice Python developer is rarely shown the beauty and effectiveness of this language. Basic (often non-professional) training involves familiarity with the simplest mechanics, which are often found in other languages. The road will be mastered by the walking one, which means let's strive for more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-this-article-you-will-see"&gt;
  &lt;/a&gt;
  In this article you will see:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;List comprehensions (List Generator)&lt;/li&gt;
&lt;li&gt;Unpacking items from a list&lt;/li&gt;
&lt;li&gt;Slicing (Slices or Slices)&lt;/li&gt;
&lt;li&gt;Some nice Python language tricks&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#list-comprehensions-list-generator"&gt;
  &lt;/a&gt;
  List comprehensions (List generator)
&lt;/h1&gt;

&lt;p&gt;In most cases, list generators are used to create a list from a set of values - so as not to resort to more complex constructions via for and append.&lt;/p&gt;

&lt;p&gt;Speaking in detail, the list generator can create a collection of values in just one line. Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, we took a sequence of numbers from 0 to 9 (our range) and squared each iteration of the loop, after which we wrote the result to the end of the empty list declared above.&lt;/p&gt;

&lt;p&gt;So, the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. And it is difficult to criticize this method because it works, is readable, not cumbersome, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example using a list generator:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From four lines to one. Is it beautiful, readable, concise?&lt;/p&gt;

&lt;p&gt;Now learn more about the syntax of the generator. In general, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, the generator can also contain a condition under which the iterated elements will fall into the list. I'll show you an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only even numbers were included in the list (if read by condition, these are those that are divisible by 2 without remainder)&lt;/p&gt;

&lt;p&gt;Here the efficiency of the generator is even more pronounced. You combine both a loop and a conditional operator in one expression and get an ordered, mutable list at the output.&lt;/p&gt;

&lt;p&gt;Now, raise the level:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use an expression as a function argument. This is convenient, and your code will leave a pleasant impression about you.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that the generator exists not only for lists, but also for dict and set and is called Dict comprehensions and Set comprehensions, respectively. Their basic syntax is similar. I will show the differences with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pay attention to the type of brackets in the list and in these two examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#unpacking-items-from-a-list"&gt;
  &lt;/a&gt;
  Unpacking items from a list
&lt;/h1&gt;

&lt;p&gt;If you need to get a certain element from the collection, then the first and obvious method is to get it by index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method can be used effectively if your collection is immutable, and lst[1] will always contain the value you need. The disadvantage of the approach is the so-called "magic numbers". Imagine that you are reading someone else's code, in which the developer gets the value, as in the example. You won't have any questions: "What is lst[1]? Why 1 and not 2 and not 20?" That's why they call such numbers in parentheses "magic numbers". Appeared out of nowhere, denote something inside. You should learn how to use unpacking.&lt;/p&gt;

&lt;p&gt;Python allows you to assign collection values to individual variables. This is effective if the collection is small. Read more in the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the same time, it's worth looking at how to assign multiple values to multiple variables at once, and how to replace variables beautifully.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multiple-assignment"&gt;
  &lt;/a&gt;
  Multiple assignment
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This expression is equivalent to :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But you took 3 lines instead of one. Is it normal if your project will be 50 lines, and if 300 or 800?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#replacing-variables"&gt;
  &lt;/a&gt;
  Replacing variables.
&lt;/h1&gt;

&lt;p&gt;In order to swap variables, you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;_tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; 
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_tmp&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is a way to make this record shorter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the principles of the Python language states:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Readability counts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let's be real "pythonists" in our works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#slicing"&gt;
  &lt;/a&gt;
  Slicing
&lt;/h1&gt;

&lt;p&gt;Speaking of large collections. What if we need multiple values from a collection? And what if they are needed from the middle or through one? Python provides such a mechanism, which is called Slicing or Slices. The syntax is quite simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;start&lt;/strong&gt; = index of the element from which the slice starts;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stop&lt;/strong&gt; = index of the element that ends the slice;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;step&lt;/strong&gt; = slice step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We took every second item in the list from between 1 and 6 indexes. In your work, you will often resort to the help of slices, do not underestimate them.&lt;/p&gt;

&lt;p&gt;Slices can be written easier. If the beginning or end of the slice is equivalent to the beginning and end of the list, they can be omitted. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we take a slice from 0 to 2 of the index of the element with a step of 1. We didn't specify the beginning or the step, but only the end of the slice. Note that 3 is the index of the final element, but it does not fall into the final list, so the slice will be from 0 to 2 of the index.&lt;/p&gt;

&lt;p&gt;Now an example indicating the start:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The slice started with index 3, but in this situation the element with index 3 got into the slice. A similar principle works in range. Just remember that. This way you will eliminate a number of errors in your code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-nice-python-language-tricks"&gt;
  &lt;/a&gt;
  Some nice Python language tricks
&lt;/h1&gt;

&lt;p&gt;Many people believe that it was fashionable to monitor memory in the era of assembly language programming. Many, but not all. I'll give you a clear example of why sometimes it's worth thinking about which function to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;range_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="c1"&gt;# bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine that a sequence of numbers from 0 to 9999 takes up only 48 bytes.&lt;/p&gt;

&lt;p&gt;And here is an example with the same sequence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;real_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;real_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="mi"&gt;87616&lt;/span&gt; &lt;span class="c1"&gt;# bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two identical sequences from 0 to 9999. They occupy memory with a difference of almost 2000 times. And if the program contains 100 such lists?&lt;/p&gt;

&lt;p&gt;The fact is that range only pretends to be a list, behaves like a list, but in fact, the range function returns a class and, of course, loads less memory.&lt;/p&gt;

&lt;p&gt;And finally, a small focus on the number of repetitions of the value in the collection (a favorite task in various tutorials and courses):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'abracadabra'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use a list instead of a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The argument in most_common specifies the number of repeatable elements that need to be counted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'abracadabra'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is worth noting that for the mechanisms described in the article to work correctly, it is necessary to have a full understanding of lists, dictionaries, sets, and tuples. These types of data are very insidious and have important differences that are worth paying attention to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Deeper immersion in the technology being studied always brings its own result. After reading this material, you will get the opportunity to distinguish the code of a beginner (or lazy) from the code of a developer who loves his work, immerses himself in it, tries to do not only for himself but also for others. You will want to establish contact with such people, make a joint project or invite them to work. Writing code is like drawing: all paints are the same color, but some get a house with a triangular roof, while others have magnificent landscapes. The question is effort.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tproger.ru/articles/podrobnyj-python-ili-kak-perestupit-granicu-znanij/"&gt;You can read the original article in Russian here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#put-on-heart-if-you-liked-it-and-you-learned-something-new"&gt;
  &lt;/a&gt;
  Put on Heart if you liked it and you learned something new!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-follow-me-to-receive-notifications-about-new-interesting-articles"&gt;
  &lt;/a&gt;
  You can also follow &lt;a href="https://dev.to/vadimkolobanov"&gt;ME&lt;/a&gt; to receive notifications about new interesting articles.
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look into the following series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vadimkolobanov/series/15329"&gt;Learning Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15349"&gt;Step by Step to Junior&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15331"&gt;Ideas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we cooperate with you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have interesting projects and you need a python (web)developer, then you can contact me by &lt;strong&gt;&lt;a href="//titanyforgame@gmail.com"&gt;mail&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://discord.gg/szEuVAhatW"&gt;discord&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/vadzim-hlobuz-0b44531b7/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt; for cooperation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Facebook&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;br&gt;
&lt;p&gt;To beat depression, try to just quit &lt;a href="https://twitter.com/hashtag/programming?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#programming&lt;/a&gt; 🤪&lt;/p&gt;— Vadim Kolobanov (@decodesperato) &lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>C# conversions: Implicit VS Explicit</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 29 Nov 2021 09:19:59 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/c-conversions-implicit-vs-explicit-41g4</link>
      <guid>https://dev.to/dotnetsafer/c-conversions-implicit-vs-explicit-41g4</guid>
      <description>&lt;p&gt;After many years programming in .&lt;em&gt;NET&lt;/em&gt;, you may have already realized that the framework allows us, in a &lt;strong&gt;very simple way&lt;/strong&gt;, to make conversions between different types of data.&lt;/p&gt;

&lt;p&gt;Conversions can be of 2 types 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implicit Conversions&lt;/li&gt;
&lt;li&gt;Explicit Conversions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Implicit conversions&lt;/strong&gt; are for which it is not necessary to indicate the conversion in parentheses &lt;strong&gt;(…)&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code we assign a variable of type &lt;strong&gt;double&lt;/strong&gt; a value of type int:&lt;/p&gt;

&lt;p&gt;But the compiler doesn’t tell us anything and lets us continue working as if nothing had happened. This is known as an &lt;strong&gt;implicit conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Instead, if we do the following 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler will give us an error indicating that an &lt;strong&gt;implicit conversion&lt;/strong&gt; from double to int cannot be done, and tells us to use an &lt;strong&gt;explicit conversion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is no mystery about it, simply this problem can be fixed by putting &lt;strong&gt;(int)&lt;/strong&gt; in front of &lt;strong&gt;10.0&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Placing the type of data to which we want to convert it in parentheses is called explicit conversion. What this means is that with this syntax we are explicitly indicating to the compiler that we want to convert one type of data into a different one.&lt;/p&gt;

&lt;p&gt;At this point you could perfectly tell me that this would also work 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apparently it does the same as if we don’t put &lt;strong&gt;(double)&lt;/strong&gt; in front of it.&lt;/p&gt;

&lt;p&gt;So… where is the difference? 🤔&lt;/p&gt;

&lt;p&gt;The only difference between implicit and explicit conversions has to do with whether or not there is a risk of that information being lost.&lt;/p&gt;

&lt;p&gt;If we go to the first case (without parentheses), it is an &lt;strong&gt;implicit conversion&lt;/strong&gt;. The value of the litetal int does not matter as if we write &lt;strong&gt;double&lt;/strong&gt; since there will be no risk of losing the information as it is a type of greater capacity.&lt;/p&gt;

&lt;p&gt;On the contrary, if we go to the second case, we are forced to do an explicit conversion. This works because a &lt;strong&gt;double&lt;/strong&gt; object can contain values ​​that a smaller capacity int type cannot represent.&lt;/p&gt;

&lt;p&gt;Let’s take an example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An integer type cannot contain decimals, so it will truncate &lt;strong&gt;10.5&lt;/strong&gt; to &lt;strong&gt;10&lt;/strong&gt;, thus losing information.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-we-can-create-our-own-conversions"&gt;
  &lt;/a&gt;
  How we can create our own conversions
&lt;/h3&gt;

&lt;p&gt;Usually the conversions of the &lt;em&gt;Framework&lt;/em&gt; are more than enough for the needs that arise. However, there may be many cases where it would be more useful to define our own implicit and explicit conversions. The .&lt;em&gt;NET&lt;/em&gt; platform provides us with an easy way to do it.&lt;/p&gt;

&lt;p&gt;To create a conversion between two types, we simply have to write the corresponding operator, either implicit or explicit.&lt;/p&gt;

&lt;p&gt;We are going to create an imaginary scenario in which we have to manage the &lt;strong&gt;temperatures&lt;/strong&gt; so that the &lt;strong&gt;degrees&lt;/strong&gt; can change between &lt;em&gt;Celsius&lt;/em&gt; and &lt;em&gt;Fahrenheit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create the code 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Celsius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Grados&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fahrenheit&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Grados&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with this code we have the possibility of writing methods so that we do the conversion between them, and which we call each time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="nf"&gt;ToCelsius&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="m"&gt;5.0f&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;9.0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Fahrenheit&lt;/span&gt; &lt;span class="nf"&gt;ToFahrenheit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="m"&gt;9.0f&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;5.0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="n"&gt;cel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Fahrenheit&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToFahrenheit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="n"&gt;cel2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToCelsius&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works, but we will have to call the corresponding method each time and this makes the code very messy.&lt;/p&gt;

&lt;p&gt;If we want to do an &lt;strong&gt;implicit conversion&lt;/strong&gt;, we simply have to define a static operator with the static &lt;strong&gt;implicit operator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We go back to our example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Celsius&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Grados&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="nf"&gt;Fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Fahrenheit&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;9.0f&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;5.0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fahrenheit&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Grados&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fahrenheit&lt;/span&gt; &lt;span class="n"&gt;fahr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;5.0f&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;9.0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degrees&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="n"&gt;cel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Fahrenheit&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="n"&gt;cel2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that to each class we add an &lt;strong&gt;implicit conversion&lt;/strong&gt; operator for the other related class, and after that, we just implicitly perform the conversions.&lt;/p&gt;

&lt;p&gt;What we gain from this is a much cleaner code that meets the conditions for &lt;strong&gt;implicit conversions&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#if-we-want-to-do-it-differently"&gt;
  &lt;/a&gt;
  If we want to do it differently… 🤔
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Let’s imagine that we have an application that has to manage the teachers and students of a school.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see it better 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pupil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;IdsCourse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Teacher&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;IdContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If at some point a student becomes a teacher or vice versa, we will need to use a conversion to reuse the data. As in this case, we are going to lose information since the different classes do not handle the same information.&lt;/p&gt;

&lt;p&gt;Therefore the conversion will have to be &lt;strong&gt;explicit&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pupil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;IdsCourse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="nf"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pupil&lt;/span&gt; &lt;span class="n"&gt;alum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IdContract&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;IdContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="nf"&gt;Pupil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Teacher&lt;/span&gt; &lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Pupil&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IdsCourse&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Teacher&lt;/span&gt; &lt;span class="n"&gt;teacher&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Juan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IdContract&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Pupil&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pupil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;teacher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Teacher&lt;/span&gt; &lt;span class="n"&gt;teacher2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  ✅ Conclution:
&lt;/h3&gt;

&lt;p&gt;Marking a conversion as &lt;strong&gt;implicit&lt;/strong&gt; or &lt;strong&gt;explicit&lt;/strong&gt; must strictly meet the criteria of whether there is a risk of information loss. It may be the case that today you consider the loss of information that occurs to be negligible, but that at some point it is not.&lt;/p&gt;

&lt;p&gt;If you have marked the conversion as &lt;strong&gt;implicit&lt;/strong&gt;, anyone who uses it directly assumes that &lt;strong&gt;there is no information loss&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If there is later and the failure is in that conversion, it can be a big headache, even more so if the code is part of a library and the person who uses it cannot see the code, so always think about it before defining the conversion. 🤗&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>netcore</category>
    </item>
    <item>
      <title>Text Generation with Markov Chains in JavaScript</title>
      <author>Alex</author>
      <pubDate>Mon, 29 Nov 2021 09:19:20 +0000</pubDate>
      <link>https://dev.to/bespoyasov/text-generation-with-markov-chains-in-javascript-i38</link>
      <guid>https://dev.to/bespoyasov/text-generation-with-markov-chains-in-javascript-i38</guid>
      <description>&lt;p&gt;Let's do something fun today! 😃&lt;/p&gt;

&lt;p&gt;I once came across a discussion on Russian Twitter about how to generate &lt;a href="https://twitter.com/govorov_n/status/1423684963841593350?s=21"&gt;a nice human-readable login&lt;/a&gt;. From university, I remember that it's possible to use Markov chains to generate such a text.&lt;/p&gt;

&lt;p&gt;I wasn't working with Markov chains at the time. So I was curious to implement them from scratch and see what kind of text they could generate.&lt;/p&gt;

&lt;p&gt;In this post, we will implement a text generator using Markov chains and feed it with different sets of texts to see what texts it will generate and whether it will consider “author's style”.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In addition to the text, we will try to generate code with this tool. This “code generator” will be completely useless but I still haven't got access to GitHub Copilot, so at least I'll have some generator 😃&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, we will have an app that generates texts like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello world! Wish me luck 🍀&lt;/p&gt;

&lt;p&gt;It has a post about the codebase. This will be my first place, we are skyrocketing!&lt;/p&gt;

&lt;p&gt;In our case, to guarantee random method existence we can use autosuggestions to select a field to test against business expectations. This helps us to avoid unwanted and unnecessary components re-renders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'll leave the links to the app and the source code right here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bespoyasov.ru/showcase/text-generator/browser/"&gt;Text Generator App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bespoyasov/text-generator"&gt;Source on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These links will also be at the end of this post. And now let's start creating the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markov-chains"&gt;
  &lt;/a&gt;
  Markov Chains
&lt;/h2&gt;

&lt;p&gt;Without going into &lt;a href="https://en.wikipedia.org/wiki/Markov_chain"&gt;mathematical details&lt;/a&gt;, a Markov chain is a sequence of events in which the occurrence of each event depends &lt;em&gt;only on the previous event&lt;/em&gt; and doesn't depend on any other events. Because of this property, the chain has “no memory”. It “doesn't remember” what happened before the current moment, which determines what happens next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KbqdZH11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiq3wi1soed2dac7zbxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbqdZH11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiq3wi1soed2dac7zbxr.png" alt="If the circuit is in state B, the fact that C1 or C2 occurs depends only on B and is independent of A and all events before that" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because of this lack of memory, a Markov chain can produce a syntactically correct and yet almost meaningless text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-generation"&gt;
  &lt;/a&gt;
  Text Generation
&lt;/h2&gt;

&lt;p&gt;A chain is a sequence of events. In text generation, the event is the next token in a sentence—a word or punctuation mark. For example, if we represent this sentence as a chain:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;have an idea have ikea!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...We get a sequence like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;START → have → idea → have → ikea → ! → END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the words, we take &lt;em&gt;punctuation marks&lt;/em&gt; into account because they contain information about sentence structure and syntax. For example, a period most often means the end of one sentence and the beginning of another. We'll see how to use this later, but for now, let's take a closer look at the structure of the chain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chain-structure-and-transition-probabilities-distribution"&gt;
  &lt;/a&gt;
  Chain Structure and Transition Probabilities Distribution
&lt;/h3&gt;

&lt;p&gt;In a sequence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;START → have → idea → have → ikea → ! → END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...There are some events that occur more often than others. For example, the word “have” occurs twice, while the others occur only once.&lt;/p&gt;

&lt;p&gt;We can make recurring events more noticeable if we represent the chain as a &lt;a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"&gt;graph&lt;/a&gt;, with events as vertices and transitions between them as edges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGzm4fwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix86s1pyxelqsbz1cno5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGzm4fwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix86s1pyxelqsbz1cno5.png" alt="All possible transitions between events in the chain in the graph, the loop between “have” and “idea” became visible" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We assume that the transitions from “have” to “idea” and “ikea” are equally likely. That is, half the time we will see “idea” and the other half will see “ikea”:&lt;/p&gt;

&lt;p&gt;If the events' probabilities are different, the chain will behave differently. For example, when the probability of going from “have” to “idea” is relatively higher, such looped chains will appear more often:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;START → have → idea → have → idea → have → idea → have → ikea → ! → END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What exactly affects the probability of a next event, we'll see a little later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transition-matrix"&gt;
  &lt;/a&gt;
  Transition Matrix
&lt;/h3&gt;

&lt;p&gt;The transition graph is convenient to read (well... relatively 😃) for people. But to use it in a text generation algorithm, we need its code representation. Such a representation could be a &lt;a href="https://en.wikipedia.org/wiki/Stochastic_matrix"&gt;transition matrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's convenient to think of it as a table, with rows listing initial states and columns listing next states. In the cells, there are probabilities of transitions from the initial state to the next one. We can represent the transition graph of our chain as a table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;START&lt;/th&gt;
&lt;th&gt;have&lt;/th&gt;
&lt;th&gt;idea&lt;/th&gt;
&lt;th&gt;ikea&lt;/th&gt;
&lt;th&gt;!&lt;/th&gt;
&lt;th&gt;END&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Here, with 0 we describe impossible transitions, which never happen, and with 1—ones, which are guaranteed to happen. Such a representation is already more convenient to convert, for example, into a two-dimensional array. But we can write this matrix even more compactly.&lt;/p&gt;

&lt;p&gt;Most of the table is zeros—impossible transitions. Since they are impossible, we can skip them and reduce the table to 2 columns:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Possible next events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have&lt;/td&gt;
&lt;td&gt;→ idea, → ikea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea&lt;/td&gt;
&lt;td&gt;→ !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;→ END&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now we store only the original event and a list of possible next events. We can turn such a table into an object, where the key is the first column (the original event) and the value is the second column (the list of next events):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--019ATKvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blzy00gwejid7grcmx2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--019ATKvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blzy00gwejid7grcmx2q.png" alt="Presenting the transition matrix as an object" width="636" height="721"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use this representation of the transition matrix later on when implementing the generator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-from-multiple-tokens"&gt;
  &lt;/a&gt;
  Events From Multiple Tokens
&lt;/h3&gt;

&lt;p&gt;The transition matrix from the example above works, but it won't be enough to generate &lt;em&gt;syntactically correct&lt;/em&gt; text. A single token event contains too little information about its environment and location.&lt;/p&gt;

&lt;p&gt;We want to generate sequences that are more likely to appear in the real text. In that case, events need to know (at least roughly) their context. We don't have to “remember everything”, it's enough to just “know a bit” of the context of each particular token. We can do this by using more than one token as a key.&lt;/p&gt;

&lt;p&gt;For example, with a key of 2 tokens, the chain from will break down into this transition matrix:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2-token key&lt;/th&gt;
&lt;th&gt;Possible next events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START → have&lt;/td&gt;
&lt;td&gt;→ idea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → idea&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea → have&lt;/td&gt;
&lt;td&gt;→ ikea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → ikea&lt;/td&gt;
&lt;td&gt;→ !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea → !&lt;/td&gt;
&lt;td&gt;→ END&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;! → END&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With a key of 3 tokens:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;3-token key&lt;/th&gt;
&lt;th&gt;Possible next events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START → have → idea&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → idea → have&lt;/td&gt;
&lt;td&gt;→ ikea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea → have → ikea&lt;/td&gt;
&lt;td&gt;→ !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → ikea → !&lt;/td&gt;
&lt;td&gt;→ END&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea → ! → END&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;...And so on. The data structure and generation algorithm will be the same, but we will capture more information about the environment of each particular token.&lt;/p&gt;

&lt;p&gt;Long keys have &lt;em&gt;fewer possible next events&lt;/em&gt;. For example, in the last table, we basically have no options other than to generate the original sentence. But if there are &lt;em&gt;many source tokens&lt;/em&gt;, this will allow the text to be generated in whole “phrases” rather than “words”. This will make it seem more real.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-text"&gt;
  &lt;/a&gt;
  Source Text
&lt;/h3&gt;

&lt;p&gt;We have considered the case where a chain is generated from already existing tokens. A real generator would need to get those tokens from somewhere.&lt;/p&gt;

&lt;p&gt;We will “get” them from the source text, the &lt;em&gt;corpus&lt;/em&gt;, which will be the argument of our generator. We will tokenize this source text: break it down into words, punctuation, and spaces. These tokens will make a transition matrix, and the generator will use this matrix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naive-generator-implementation"&gt;
  &lt;/a&gt;
  Naive Generator Implementation
&lt;/h2&gt;

&lt;p&gt;To begin with, we will “forget” about long keys and focus on working with 1-token keys. This will let us understand the principle of how the chain works and learn how to generate simpler texts. Then we will generalize the algorithm and be able to generate text similar to real sentences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parsing-and-tokenizing-text"&gt;
  &lt;/a&gt;
  Parsing and Tokenizing Text
&lt;/h3&gt;

&lt;p&gt;Let's take the first few paragraphs of Bulgakov's “The Master and Margarita” as a corpus. Then let's divide this text into tokens that we will work with. When tokenizing, we need to consider a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we need to treat &lt;em&gt;line breaks&lt;/em&gt; as separate tokens for the generator to break the text into paragraphs;&lt;/li&gt;
&lt;li&gt;we need to keep &lt;em&gt;punctuation marks and spaces&lt;/em&gt; to structure sentences more accurately;&lt;/li&gt;
&lt;li&gt;and we won't normalize the text, to avoid bothering with capital letters at the beginning of sentences and proper nouns; we'll use the words spelling &lt;em&gt;as they occur in the text&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Whether to count spaces as tokens or not is an implementation issue. I've tried to exclude spaces when tokenizing and haven't seen much quality difference, but the code got more complicated. In this post, I decided not to overcomplicate the example and treat spaces as tokens just like words and punctuation marks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all this in mind, let's start writing the tokenizer. First, let's replace line breaks with something else, so we can distinguish them from other whitespace characters.&lt;/p&gt;

&lt;p&gt;I suggest the paragraph sign “§”. We can quickly find it in the generated text and replace it with the line break. Besides, if we find such a character in the source text too, we won't lose anything by replacing it with a line break.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NEWLINE_PLACEHOLDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;§&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newlinesRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\n\s&lt;/span&gt;&lt;span class="sr"&gt;*/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newlinesRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NEWLINE_PLACEHOLDER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To divide the text into tokens, considering the punctuation and spaces, we'll use a regular expression. Let's use &lt;a href="https://stackoverflow.com/questions/6162600/how-do-you-split-a-javascript-string-by-spaces-and-punctuation"&gt;this one&lt;/a&gt; as the basis and extend it a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;punctuation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`[](){}!?.,:;'"\/*&amp;amp;^%$_+-–—=&amp;lt;&amp;gt;@|~`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ellipsis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;.{3}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[a-zA-Zа-яА-ЯёЁ]+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenizeRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ellipsis&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;|&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;compounds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;|&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;|[&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;])`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, we create “internals” of the expression. Those are responsible for different groups of tokens: punctuation, compound words, simple words, etc. Then we combine them into a Capturing Group, where we list what we want to find in the text.&lt;/p&gt;

&lt;p&gt;The Capturing Group string is used then as a source for the &lt;code&gt;RegExp&lt;/code&gt; constructor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to know how exactly this regular expression works, I suggest you try it in &lt;a href="https://regex101.com"&gt;regex101&lt;/a&gt;. It visualizes groups and highlights the found characters in the text. I use it wherever I have to use regular expressions 😃&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To divide the text into tokens, let's use the &lt;code&gt;split()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newlinesRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NEWLINE_PLACEHOLDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenizeRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;tokenize&lt;/code&gt; function returns an array of tokens found in the text. Among them, there may be empty lines because some punctuation marks are typed without a space before them. For example, notice the period and commas in this sentence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  '§',        'At',     ' ',     'the',       ' ',
  'sunset',   ' ',      'hour',  ' ',         'of',
  ' ',        'one',    ' ',     'warm',      ' ',
  'spring',   ' ',      'day',   ' ',         'two',
  ' ',        'men',    ' ',     'were',      ' ',
  'to',       ' ',      'be',    ' ',         'seen',
  ' ',        'at',     ' ',     'Patriarch', '',
  "'",        '',       's',     ' ',         'Ponds',
  '',         '.',      ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need empty strings, so we filter them out. Let's add a function called &lt;code&gt;exists&lt;/code&gt;, which will return &lt;code&gt;false&lt;/code&gt; if it receives a falsy-value as input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...And use it to filter the array of tokens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newlinesRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NEWLINE_PLACEHOLDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenizeRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#slicing-corpus-into-samples"&gt;
  &lt;/a&gt;
  Slicing Corpus Into Samples
&lt;/h3&gt;

&lt;p&gt;To make a transition matrix, we will divide the whole corpus into an array of samples. By a &lt;em&gt;sample&lt;/em&gt; we will mean the “event—transition” combination in the transition matrix. For example, if we want to use a transition matrix with 1-token keys:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Transition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have&lt;/td&gt;
&lt;td&gt;→ idea, → ikea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea&lt;/td&gt;
&lt;td&gt;→ !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;→ END&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;...Then the samples will be pairs of “START have”, “have idea”, “have ikea”, “idea have”, etc.&lt;/p&gt;

&lt;p&gt;In a matrix with longer keys, the samples will be larger. For example, in a matrix with 2-token keys:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2-token key&lt;/th&gt;
&lt;th&gt;Transition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;START → have&lt;/td&gt;
&lt;td&gt;→ idea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → idea&lt;/td&gt;
&lt;td&gt;→ have&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;idea → have&lt;/td&gt;
&lt;td&gt;→ ikea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;have → ikea&lt;/td&gt;
&lt;td&gt;→ !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ikea → !&lt;/td&gt;
&lt;td&gt;→ END&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;! → END&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;...Samples will be of size 3: “START have idea”, “have idea have”, “idea have ikea”, etc.&lt;/p&gt;

&lt;p&gt;The sample size is always equal to the sum of the number of tokens in the key and the number of tokens in the transition. Since the transition has always 1 token:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Sample size) = (Number of tokens in the key) + 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a naive implementation, the sample size will be 2. Let's write the &lt;code&gt;sliceCorpus&lt;/code&gt; function, which divides an array of tokens into such samples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sliceCorpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;corpus&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will take an array of tokens as an argument. It will return an array of arrays with &lt;code&gt;sampleSize&lt;/code&gt; elements. In the sub-arrays, the first elements will be keys, and the last elements will be transitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  ['§', 'At'],        ['At', ' '],      [' ', 'the'],
  ['the', ' '],       [' ', 'sunset'],  ['sunset', ' '],
  [' ', 'hour'],      ['hour', ' '],    [' ', 'of'],
  ['of', ' '],        [' ', 'one'],     ['one', ' '],
  [' ', 'warm'],      ['warm', ' '],    [' ', 'spring'],
  ['spring', ' '],    [' ', 'day'],     ['day', ' '],
  [' ', 'two'],       ['two', ' '],     [' ', 'men'],
  ['men', ' '],       [' ', 'were'],    ['were', ' '],
  [' ', 'to'],        ['to', ' '],      [' ', 'be'],
  ['be', ' '],        [' ', 'seen'],    ['seen', ' '],
  [' ', 'at'],        ['at', ' '],      [' ', 'Patriarch'],
  ['Patriarch', ''],  ['', "'"],        ["'", ''],
  ['', 's'],          ['s', ' '],       [' ', 'Ponds'],
  ['Ponds', ''],      ['', '.'],        ['.', ' '],
  ...
]

// ['§',     'At'].length === 2
//   ↑ Key    ↑ Transition    ↑ Sample Size
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will use these samples to create the transition matrix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-transition-matrix"&gt;
  &lt;/a&gt;
  Creating Transition Matrix
&lt;/h3&gt;

&lt;p&gt;The easiest way to represent a transition matrix in the code is in the form of an object where the key is the current event and the value is a list of all possible next events. We have already seen such an object before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--019ATKvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blzy00gwejid7grcmx2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--019ATKvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blzy00gwejid7grcmx2q.png" alt="Transition matrix representation as an object" width="636" height="721"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create such an object, we will run through all samples, take out keys and transitions, and for each key collect a list of all encountered transitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;collectTransitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Split the sample into the current state&lt;/span&gt;
    &lt;span class="c1"&gt;// and the transition state:&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// If the current state doesn't have&lt;/span&gt;
    &lt;span class="c1"&gt;// a list of possible transitions we create it.&lt;/span&gt;
    &lt;span class="c1"&gt;// After, we add a new transition into the list:&lt;/span&gt;
    &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There may be repetitions in the list of transitions. The more often a token appears in this list, the more often it will be selected during generation.&lt;/p&gt;

&lt;p&gt;This way we make transitions not equally likely, but make them “consider” the source text. The more often the word is used, the more often it will appear in the generated text—we're kinda “catching the author's style” :-)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predicting-words"&gt;
  &lt;/a&gt;
  Predicting Words
&lt;/h3&gt;

&lt;p&gt;Now let's write a function that will select the next token based on the current state of the chain.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;predictNext&lt;/code&gt; function will take a chain and a transition matrix. The &lt;em&gt;chain&lt;/em&gt; will be an array of previously generated tokens. The function will take the last token, search for it in the matrix for a list of possible transitions, and then randomly choose one of those transitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextWords&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will write a couple of utilities for random selection. The function &lt;code&gt;random&lt;/code&gt; will return a random integer within a specified range, and &lt;code&gt;pickRandom&lt;/code&gt; will return an element from an array with a random index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickRandom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The easiest way to check the function is to pass it an array with the most frequent character in the text—space:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sliceCorpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;collectTransitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function will return randomly selected words that came after a space in the source text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5cUiTku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu7pyx3yxmvbks8b1uhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5cUiTku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu7pyx3yxmvbks8b1uhz.png" alt="Several consecutive function calls return different random words" width="822" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to store the chain itself somewhere and make it possible to add a newly generated token to the chain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-generator-in-generator"&gt;
  &lt;/a&gt;
  Wrapping Generator in Generator
&lt;/h3&gt;

&lt;p&gt;To generate a chain we will use a special type of function—&lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"&gt;generator&lt;/a&gt;&lt;/em&gt;. Such functions know how to pause their execution until they are called again.&lt;/p&gt;

&lt;p&gt;We'll use them because we may not know the size of the chain we need to generate. The generator will endlessly create a new token for each call, increasing the chain. We will store the chain itself in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;closure&lt;/a&gt; of the generator function so that we won't need to care about global variables and the state.&lt;/p&gt;

&lt;p&gt;Let's create a generator function named &lt;code&gt;generateChain&lt;/code&gt;. Note the asterisk after the word &lt;code&gt;function*&lt;/code&gt; - this is how the generator is noted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this function, we create an infinite loop in which we generate a new token for the chain, returning it as the result of the iteration. In the end, we add that token to the chain, so that the next word will be generated based on it.&lt;/p&gt;

&lt;p&gt;Also, we create the chain before the loop with the &lt;code&gt;createChain&lt;/code&gt; function. This function creates a chain from the text passed to it. If nothing is passed, it selects a random token from the transition matrix and makes it the start of the chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startText&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;pickRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we call the &lt;code&gt;generateChain&lt;/code&gt; function, we get an object with the &lt;code&gt;next()&lt;/code&gt; method that returns a generated word:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;collectTransitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sliceCorpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// { value: 'the', done: false }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can call the &lt;code&gt;next()&lt;/code&gt; method time after time and the chain will continue growing and each call will result in a new token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 'the'&lt;/span&gt;
&lt;span class="c1"&gt;// ' '&lt;/span&gt;
&lt;span class="c1"&gt;// 'myth'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will write a wrapper function called &lt;code&gt;generate&lt;/code&gt; which will generate a text of &lt;code&gt;wordsCount&lt;/code&gt; length. The function will accept an object with settings and source data.&lt;/p&gt;

&lt;p&gt;Internally it will tokenize the source text, split it into samples and create a transition matrix. Then it will create a chain generator and call it as many times as specified in the settings. We will write the result of generation to an array, which we will then glue together using the &lt;code&gt;textify&lt;/code&gt; function to get the text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wordsCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sliceCorpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;collectTransitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generatedTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;wordsCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generatedTokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;textify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generatedTokens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;textify&lt;/code&gt; function will join the tokens together and replace paragraph marks with line breaks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tokenizer.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PARAGRAPH_CHARACTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;textify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NEWLINE_PLACEHOLDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PARAGRAPH_CHARACTER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will call the generator like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;wordsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result we will get a text somewhat like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the subject he was all the request seemed to a long anti-religious poem in a later this poem in front of the chequered figure in May which affected Berlioz alone alone was saying was so powerful&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This, of course, doesn't sound like a real text at all 😃&lt;br&gt;&lt;br&gt;
There are two reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we used so little information about the context of the sentence;&lt;/li&gt;
&lt;li&gt;the original text was probably too short.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's try to fix both problems.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-text-more-natural"&gt;
  &lt;/a&gt;
  Making Text More Natural
&lt;/h2&gt;

&lt;p&gt;To make the generated text look more like the real one, we will increase the sample size and select a bigger corpus.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementing-dynamic-sample-size"&gt;
  &lt;/a&gt;
  Implementing Dynamic Sample Size
&lt;/h3&gt;

&lt;p&gt;In our naive implementation, we used the sample size of 2 tokens. The first token was a key and the second was a transition event. This time we will make the sample size customizable so that users can decide for themselves what size would be best for them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can't predict the optimal sample size because it depends on the size of the corpus. The bigger the corpus the more word combinations there are, the longer sample we can use for the generation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we'll update the &lt;code&gt;sliceCorpus&lt;/code&gt; function. It will now start to take sample size as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sliceCorpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;corpus&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we update the &lt;code&gt;collectTransitions&lt;/code&gt; function which creates the transition matrix. There, we will generalize the search for key tokens and a transition token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;collectTransitions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Split the sample into key tokens and the transition token:&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;restTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The first tokens constitute the key&lt;/span&gt;
    &lt;span class="c1"&gt;// which we will use to get the list of potential transitions:&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fromTokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restTokens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// And later it's all like we did earlier:&lt;/span&gt;
    &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;fromTokens&lt;/code&gt; function “glues” several tokens together to get a key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;escapeString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`_+&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fromTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;escapeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;escapeString&lt;/code&gt; function is a naive escaping. It is needed so that we don't have problems with object properties that already exist. For example, so that we don't try to get the &lt;code&gt;transitions['constructor']&lt;/code&gt; property 😃&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We won't use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and an array-keys, because &lt;code&gt;Map&lt;/code&gt; compares keys using the &lt;a href="https://tc39.es/ecma262/#sec-samevaluezero"&gt;SameValueZero&lt;/a&gt; algorithm. In the case of arrays, to get the value, we have to pass &lt;em&gt;the same&lt;/em&gt; array. Different arrays are considered different keys, even if they have exactly the same content. This wouldn't be as convenient as referring to an escaped key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let's update the &lt;code&gt;predictNext&lt;/code&gt; function to be able to handle the new structure of the transition matrix. It will also take the sample size as an argument. It will use it to extract the right number of tokens to make the key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fromTokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sampleSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextWords&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also update the signature of the generator itself, so you can specify the sample size in the parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll add a condition that if no transition is found at some iteration, we remove the last token from the chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generator.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;predictNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transitions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sampleSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is necessary because when the sample size is big, the generator may create combinations that weren't in the text. At this point, we must either stop the generation or “rollback” such a combination. We will use the second option.&lt;/p&gt;

&lt;p&gt;Now let's try to generate a text with a sample size of 5:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The other, a broad-shouldered young man with curly reddish hair and a check cap pushed back to the nape of his magazine. Ivan Nikolayich had written this poem in record time, but unfortunately the editor had commissioned the poet to write a long anti-religious poem for one of the strangest appearance. On his small head was a jockey-cap and he wore a short check bum-freezer made of air. The man was seven feet tall but narrow in the shoulders, incredibly thin and&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It got better. The chain now starts to generate more “meaningful” sentences, and it also “learned” the rules of punctuation. At least now it uses commas and writes the people's names correctly 😃&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selecting-source-text"&gt;
  &lt;/a&gt;
  Selecting Source Text
&lt;/h3&gt;

&lt;p&gt;In addition to improving the chain settings, we can make the corpus bigger. Generating Bulgakov is interesting and all, but we can do something funnier. I decided to feed the chain all of my tweets and blog posts and see &lt;del&gt;if I can stop blogging on my own&lt;/del&gt; what would happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-new-corpus"&gt;
  &lt;/a&gt;
  Using New Corpus
&lt;/h2&gt;

&lt;p&gt;For this post, I prepared several sets of texts. In the first one, I collected all my tweets, in the second one—all the blog posts, and in the third one—code from my projects on GitHub 😅&lt;/p&gt;

&lt;p&gt;Later, I'll show you how you can download the archive with your tweets too and generate a “new tweet”. I'll also leave the &lt;a href="https://bespoyasov.ru/showcase/text-generator/browser/"&gt;link to the generator&lt;/a&gt; right here in case you want to play with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-tweets"&gt;
  &lt;/a&gt;
  Generating Tweets
&lt;/h3&gt;

&lt;p&gt;To download all my tweets, I opened a special &lt;a href="https://twitter.com/settings/download_your_data"&gt;page where I could request the data archive&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWMKWqdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr8trwxrj9g931gaeaz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWMKWqdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr8trwxrj9g931gaeaz4.png" alt="It will take some time before Twitter prepares the archive" width="880" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found the &lt;code&gt;data/tweet.js&lt;/code&gt; file in the archive and pulled the text of all my tweets from it. I wrote a script to exclude links, retweets, and automatic messages from IFTTT. I got something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onlyText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;full_text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onlyAuthored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;full_text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RT @&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeHandles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/@&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z_&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeTwitterLinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/https&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;t&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;co&lt;/span&gt;&lt;span class="se"&gt;\/[&lt;/span&gt;&lt;span class="sr"&gt;0-9a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tweets&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onlyAuthored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onlyText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeHandles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeTwitterLinks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I'm not sure if by the time you read this article, the format of the archive will still be the same. This code might not work, sorry 🤷&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found out that a sample of 3-4 tokens is the best for generating “my tweets”. With that settings, the chain generates these, ahem, thoughts:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello world! Wish me luck 🍀&lt;/p&gt;

&lt;p&gt;It has a post about the codebase. This will be my first place, we are skyrocketing!&lt;/p&gt;

&lt;p&gt;I prefer the Game of folder structure :–)&lt;/p&gt;

&lt;p&gt;Got a cup of Life!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#generating-blog-posts"&gt;
  &lt;/a&gt;
  Generating Blog Posts
&lt;/h3&gt;

&lt;p&gt;After tweets, I decided to feed the generator with the texts from my blog. I found out that for the blog the generator needs a sample of 6-7 tokens to generate something more or less sane.&lt;/p&gt;

&lt;p&gt;For example, here is a post about what files are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFVbyGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7mq6qzu9xfrdeohdile.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFVbyGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7mq6qzu9xfrdeohdile.png" alt="Generated post" width="880" height="859"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or here's a note about software design:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61uHwC8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteuja0dpf4ki1e41ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61uHwC8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteuja0dpf4ki1e41ma.png" alt="Generated post about software design" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something about objects and testing...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--caBnlvMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv16jossd68hxmc7svos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--caBnlvMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv16jossd68hxmc7svos.png" alt="Generated post about testing" width="880" height="696"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's funny that sometimes chain produces the Markdown text with basic formatting like headings, quotes, or lists.&lt;/p&gt;

&lt;p&gt;It's not &lt;a href="https://en.wikipedia.org/wiki/GPT-3"&gt;GPT-3&lt;/a&gt; (or &lt;a href="https://towardsdatascience.com/gpt-4-will-have-100-trillion-parameters-500x-the-size-of-gpt-3-582b98d82253"&gt;GPT-4&lt;/a&gt;) of course, but in general, for some random text for a landing page design mockup, it's quite good.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-code"&gt;
  &lt;/a&gt;
  Generating Code?
&lt;/h3&gt;

&lt;p&gt;After generating text I thought, why not try to generate code with this thing. I wondered if it could write something at least syntactically correct. At first, I thought it was hopeless because of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fieldSize&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;isFromRub&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;centralNodes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAgent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;scrollbar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="s1"&gt;)

const renderBackBtn == useSelector(selectCourse);
}

onPointerDown(e)
// http:// closest =&amp;gt; el } = lastPageX =&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it turned out that on larger sample sizes it can handle it! Well, for example, with a 6-token sample it produced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defaultDatetime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sortWith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comparableTagValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TagKind&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Metadata&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-color"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyAppInitialProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;appModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Instance&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;ThemeModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we ignore the undeclared variables, the code can be compiled. Or here with sample size 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;correctTimeZoneDependentDates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StorableState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TimeZoneShift&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;StorableState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastRecalcDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getTodayStartTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAdapters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStateDependentAdapters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;since&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;budget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysPassed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daysBetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getTodayStartTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;lastRecalcDateTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;daysPassed&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rule of hooks is broken! Too bad.&lt;/p&gt;

&lt;p&gt;At size 10 it starts declaring complex interfaces and types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AnalyticsEventName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AnalyticsEventParameters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ObsoleteHistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ObsoleteRecord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ActualHistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HistoryLog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertRecordKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObsoleteRecordKind&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;RecordEntryKind&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;KeyboardSymbolKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;KeyboardSymbolKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Comma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;shapeSymbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For brevity, I'm omitting piles of imports. (For what it's worth, the generator likes to import unnecessary stuff the most.)&lt;/p&gt;

&lt;p&gt;Another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;CompareResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AThenB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;BThenA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Equal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CompareFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TComparable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TComparable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TComparable&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CompareResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TCollection&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;AnyCollection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TCollection&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;CollectionSize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to sort by missing datetime field.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the size of 15, the result is already too much like the original code.&lt;/p&gt;

&lt;p&gt;I would describe the result as... Well, have you seen movies where hackers sit around and type some code without thinking? This seems to be the right one for these movies 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementations"&gt;
  &lt;/a&gt;
  Implementations
&lt;/h2&gt;

&lt;p&gt;I wouldn't write this myself for production of course. There are some implementations, here are a couple for Python and JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jsvine/markovify"&gt;markovify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Edwin-Pratt/js-markov"&gt;js-markov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I wanted to “feel” it and build it with my hands to really understand how it worked. I wanted to know the problem that those libraries were solving and wanted to know how they did it in principle, what obstacles they met.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage-of-markov-chains"&gt;
  &lt;/a&gt;
  Usage of Markov Chains
&lt;/h2&gt;

&lt;p&gt;Text generation is not the only application of Markov chains. They can be used in &lt;a href="https://en.wikipedia.org/wiki/Markov_chain#Applications"&gt;various random processes modeling&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for speech recognition;&lt;/li&gt;
&lt;li&gt;modeling the spread of infections;&lt;/li&gt;
&lt;li&gt;calculations in statistical mechanics;&lt;/li&gt;
&lt;li&gt;and even economics, music, and games.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there, of course, it's more complicated than I showed in this post :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-sources"&gt;
  &lt;/a&gt;
  References and Sources
&lt;/h2&gt;

&lt;p&gt;As usual, I compiled a list of useful links at the end of the post. In addition to mathematics, libraries, and implementations in other languages, I also left links to the application itself, the sources on GitHub, and a Twitter page where you can request a tweet archive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bespoyasov.ru/showcase/text-generator/browser/"&gt;Browser Text Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bespoyasov/text-generator"&gt;Source on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/settings/download_your_data"&gt;Request a tweet archive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Share your generated “tweets” on social networks! 😃&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#markov-chains"&gt;
  &lt;/a&gt;
  Markov Chains
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Markov_chain"&gt;Markov Chains on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Markov_chain#Applications"&gt;Applications for Markov Chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Stochastic_process"&gt;Stochastic process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"&gt;Graph, mathematics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Stochastic_matrix"&gt;Transition matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#text-tokenization-and-generation"&gt;
  &lt;/a&gt;
  Text Tokenization and Generation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://regex101.com"&gt;RegEx101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6162600/how-do-you-split-a-javascript-string-by-spaces-and-punctuation"&gt;How do you split a javascript string by spaces and punctuation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ru.wikipedia.org/wiki/GPT-3"&gt;GPT-3&lt;/a&gt; &amp;amp; &lt;a href="https://towardsdatascience.com/gpt-4-will-have-100-trillion-parameters-500x-the-size-of-gpt-3-582b98d82253"&gt;GPT-4&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementations-and-libraries"&gt;
  &lt;/a&gt;
  Implementations and Libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/from-what-is-a-markov-model-to-here-is-how-markov-models-work-1ac5f4629b71"&gt;From “What is a Markov Model” to “Here is how Markov Models Work”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jsvine/markovify"&gt;markovify, Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Edwin-Pratt/js-markov"&gt;js-markov, JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#javascript-stuff"&gt;
  &lt;/a&gt;
  JavaScript Stuff
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"&gt;Generators&lt;/a&gt; &amp;amp; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction"&gt;Generator functions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;Closures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>textgeneration</category>
      <category>markov</category>
      <category>chains</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Amazon launches AWS RoboRunner to support robotics apps &amp; much more</title>
      <author>Adit Modi</author>
      <pubDate>Mon, 29 Nov 2021 09:10:48 +0000</pubDate>
      <link>https://dev.to/cloudtech/amazon-launches-aws-roborunner-to-support-robotics-apps-much-more-50li</link>
      <guid>https://dev.to/cloudtech/amazon-launches-aws-roborunner-to-support-robotics-apps-much-more-50li</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At a keynote during its &lt;strong&gt;Amazon Web Services (AWS) re:Invent 2021 conference today&lt;/strong&gt;, Amazon launched &lt;strong&gt;AWS IoT RoboRunner&lt;/strong&gt;, a new robotics service designed to make it easier for enterprises to build and deploy apps that enable fleets of robots to work together. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alongside &lt;strong&gt;IoT RoboRunner&lt;/strong&gt;, Amazon announced the &lt;strong&gt;AWS Robotics Startup Accelerator&lt;/strong&gt;, an incubator program in collaboration with nonprofit &lt;strong&gt;MassRobotics&lt;/strong&gt; to tackle challenges in automation, robotics, and industrial internet of things (IoT) technologies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As pandemics drive digital transformation, enterprises are accelerating the adoption of robotics and, more broadly, automation. recently report Automation World companies have found that most of the companies that have adopted robotics over the past year have adopted it to reduce labor costs, increase capacity, and overcome the shortage of available workers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;According to the same survey, &lt;strong&gt;44.9%&lt;/strong&gt; of companies now consider robots in assembly and manufacturing facilities to be an integral part of their day-to-day operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon — a large investor in robotics itself — wasn’t shy about its intention to win most of the robotics software market. is expected It is worth more than &lt;strong&gt;$ 7.52 billion by 2022&lt;/strong&gt;. In 2018, the company announced AWS RoboMaker, A product that assists developers in deploying robot applications with AI and machine learning capabilities. And Amazon earlier this year Rolled out SageMaker Reinforcement learning Kubeflow components, a toolkit that supports RoboMaker services for tuning robotics workflows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#iot-roborunner"&gt;
  &lt;/a&gt;
  IoT RoboRunner
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9N-41za6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwrww3zfl2fupke1goq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9N-41za6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwrww3zfl2fupke1goq1.png" alt="Image description" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Currently previewing IoT RoboRunner is built on technology already used in Amazon Warehouse for robotics management. This allows AWS customers to connect robots to existing automation software and combine each type of data to coordinate the work of the entire operation. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fleet robot Standardize data types such as facilities, locations, and robot task data in the central repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the goal of IoT RoboRunner is to simplify the process of building a robot group management app. As companies become more and more dependent on robotics to automate their operations, they are choosing different types of robots, making it more difficult to organize robots efficiently. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each robot vendor and work management system has its own, often incompatible control software, data formats, and data repositories. Also, as new robots are added to the fleet, they will need to be programmed to connect the control software to the workflow management system and program the logic of the management app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers can use &lt;strong&gt;IoT RoboRunner&lt;/strong&gt; to access the data needed to build robot management apps and leverage pre-built software libraries to create apps for tasks such as work assignments. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition to this, you can use IoT RoboRunner to deliver metrics and KPIs to the management dashboard via the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With AWS IoT RoboRunner, robot developers no longer have to manage their robots in silos, and centralized management can more effectively automate tasks across the facility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS IoT RoboRunner lets you connect your robots and work management systems, thereby enabling you to orchestrate work across your operation through a single system view.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#aws-robotics-startup-accelerator"&gt;
  &lt;/a&gt;
  AWS Robotics Startup Accelerator
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPtXYUXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsc4j1x1ygjg1e0w9t0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPtXYUXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsc4j1x1ygjg1e0w9t0y.png" alt="Image description" width="880" height="498"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon also announced the &lt;strong&gt;Robotics Startup Accelerator&lt;/strong&gt;. The company says it will foster robotics by providing resources to develop, prototype, test, and commercialize products and services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The AWS Robotics Startup Accelerator delivered by MassRobotics aims to help robotics startups adopt and use AWS to boost their robotics development, as well as get hands-on support from industry and AWS experts to rapidly scale their business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the trend towards automation continues, robotics start-ups, especially industrial robotics, are attracting the attention of venture capitalists. From March 2020 to March 2021, venture companies invested $ 6.3 billion in robotics companies, an increase of about 50% from March 2019 to March 2020. according to To the data from PitchBook. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the long run, investment in robotics has more than quintupled over the past five years, rising from $ 1 billion in 2015 to $ 5.4 billion in 2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The accelerator is a &lt;strong&gt;four-week technical, business, and mentorship opportunity&lt;/strong&gt; open to robotics hardware and software startups from around the globe. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Startups accepted into the four-week program will consult with AWS and MassRobotics industry experts on business models and with AWS robotics experts for help overcoming technological blockers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Program benefits for startups include hands-on training about AWS solutions for robotics and up to $10,000 in promotional credits for use of AWS IoT, Robotics, and ML services to help guide them forward. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Participants will gain additional knowledge through mentoring from &lt;strong&gt;robotics domain experts&lt;/strong&gt; and &lt;strong&gt;technical subject matter experts&lt;/strong&gt;. To get ready for life after the accelerator, startups will also get business development and investment guidance from MassRobotics, and co-marketing opportunities with AWS via blogs and case studies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Startups interested in applying to be part of the program can learn more &lt;a href="https://awsroboticsstartupaccelerator.splashthat.com/"&gt;here&lt;/a&gt;. Applications close on Sunday, January 16, 2022.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Let me know your thoughts in the comment section about the new aws services and accelerator program 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;👨‍💻 &lt;strong&gt;Join our &lt;a href="https://join.slack.com/t/cloudtechcommunity/shared_invite/zt-wptacj2f-Eu4PPvq6WEkBTHg7PR2ncA"&gt;Cloud Tech Slack Community&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
👋 &lt;strong&gt;Follow us on &lt;a href="https://www.linkedin.com/company/cloud-techs"&gt;Linkedin&lt;/a&gt; / &lt;a href="https://twitter.com/AboutCloudTech"&gt;Twitter&lt;/a&gt; for latest news&lt;/strong&gt; &lt;br&gt;
💻 &lt;strong&gt;Take a Look at our &lt;a href="https://github.com/My-Machine-Learning-Projects-2020"&gt;Github Repos&lt;/a&gt; to know more about our projects&lt;/strong&gt; &lt;br&gt;
✍️ &lt;strong&gt;Our &lt;a href="https://cloudtech.hashnode.dev"&gt;Website&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mobile Testing</title>
      <author>Cody Simons</author>
      <pubDate>Mon, 29 Nov 2021 09:06:16 +0000</pubDate>
      <link>https://dev.to/codysimons20/mobile-testing-3h86</link>
      <guid>https://dev.to/codysimons20/mobile-testing-3h86</guid>
      <description>&lt;p&gt;"The quality of a mobile application affects its sustainability in the market. The question is, how can app providers build high-quality products that stand out among the rest? The answer is with testing."&lt;br&gt;
&lt;a href="https://www.katalon.com/mobile-testing/"&gt;Continue reading&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>mobiletesting</category>
    </item>
    <item>
      <title>Feature update: Feed</title>
      <author>Amy Lin</author>
      <pubDate>Mon, 29 Nov 2021 08:27:35 +0000</pubDate>
      <link>https://dev.to/devteam/feature-update-feed-3go5</link>
      <guid>https://dev.to/devteam/feature-update-feed-3go5</guid>
      <description>&lt;p&gt;Hello, wonderful DEV community!&lt;/p&gt;

&lt;p&gt;My name is Amy, and I’m a product manager here at Forem. I started my journey here this past August so if we haven’t interacted on DEV before, it’s great to meet you!&lt;/p&gt;

&lt;p&gt;Today, I wanted to share an update about a topic that impacts anyone who regularly visits and/or writes on DEV – our home feed and the algorithm behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addressing-some-important-concerns"&gt;
  &lt;/a&gt;
  Addressing some important concerns
&lt;/h2&gt;

&lt;p&gt;We have heard our community's frustrations about our feed. Some examples include your feed not reflecting tag preferences, too many listicles, and more recent posts rather than relevant posts. We have come across posts by community members exploring how to improve their experience of the feed with a handful of unofficial workarounds.&lt;/p&gt;

&lt;p&gt;While the ingenuity of our community doesn't surprise us (and in fact, delights us), we don't think you should have to find "hacks" in order to make this space work as you expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-commitment-on-continuous-improvement"&gt;
  &lt;/a&gt;
  Our commitment on continuous improvement
&lt;/h2&gt;

&lt;p&gt;We strive to make DEV an enjoyable place for our members. However, this is not always easy. To solve these problems effectively, we first need to know what might contribute to these problems. As some of you probably already know, our feed algorithm is complex. It is often difficult for &lt;strong&gt;us&lt;/strong&gt;, as core team members at Forem, to digest what is going on in it. This challenge makes it difficult for the community to chime in, as it hasn’t been clear what factors are diminishing our feed’s quality. As technology evolves over time naturally, we need to untangle and refactor different layers of decision making in our software so as to pinpoint the underlying root cause(s).&lt;/p&gt;

&lt;p&gt;We are committed to making a great feed experience while being transparent in how we work. The first step is for us to shed light on how our algorithm works to ensure that the code base is accessible and readable for our community. This post, the changes to our feed algorithm, plus all the great &lt;a href="https://github.com/forem/forem/pull/15240"&gt;refactoring&lt;/a&gt; &lt;a href="https://github.com/forem/forem/pull/15180"&gt;work&lt;/a&gt; going into it by &lt;a href="https://dev.to/jeremyf"&gt;Jeremy&lt;/a&gt; are our first baby steps towards this commitment. We also renamed the name of the default sorting on your feed &lt;a href="https://github.com/forem/forem/pull/15435"&gt;from “Feed” to “Relevant”&lt;/a&gt; for clarity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-peek-at-how-the-dev-feed-works"&gt;
  &lt;/a&gt;
  A peek at how the DEV feed works
&lt;/h2&gt;

&lt;p&gt;Without further ado, here is a high-level summary of how our feed algorithm works.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;When deciding which posts should be in your home feed, four things come into play:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The freshness of a post (how new is a post?)&lt;/li&gt;
&lt;li&gt;The relevance of a post (relevance as in, do you follow any of the tags on this post? Do you follow the author?)&lt;/li&gt;
&lt;li&gt;The popularity of a post (how many comments have been left? How many reactions have been given?)&lt;/li&gt;
&lt;li&gt;Moderator feedback for a post (has this post been reported?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a series of calculations based on the above, we will then assign a “score” to each post. Then, the posts with the highest scores are delivered to your feed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possible-causes-of-devs-feed-algorithm-quality-issues"&gt;
  &lt;/a&gt;
  Possible causes of DEV’s feed algorithm quality issues
&lt;/h2&gt;

&lt;p&gt;After some investigation, &lt;strong&gt;we realized we are unintentionally giving reactions too much weight when calculating the aforementioned score of a post. It manifests itself in the following ways:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It’s really easy to game the algorithm by farming reactions&lt;/li&gt;
&lt;li&gt;Sometimes too many irrelevant posts show up in feed because they have gotten lots of reactions&lt;/li&gt;
&lt;li&gt;As a consequence, there are too many irrelevant posts to a point that you don’t feel like your feed is relevant to you anymore&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-we-have-changed-so-far"&gt;
  &lt;/a&gt;
  What we have changed so far
&lt;/h2&gt;

&lt;p&gt;We are launching an &lt;a href="https://github.com/forem/forem/pull/15240"&gt;A/B test&lt;/a&gt; in our algorithm, with the treatment of suppressing the effect of reactions in calculation. We will start with 20% of our users, and observe the performance to decide whether it is ready to be rolled out to more users – or if it requires some tweaks. &lt;/p&gt;

&lt;p&gt;We also have identified several other opportunities to improve the algorithm, and we see this as an iterative effort. In other words, you’ll be hearing from me again with more updates and information about our feed as we work on improving it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;We would love to hear your thoughts on anything mentioned above. Do you think our fixes will address the issues you have encountered on your home feed? Are there other problems you are experiencing with the feed? Let me know in the comments below!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, on behalf of the entire Forem team, I want to thank you not only for being a member of DEV, but also for being active and vocal with your frustrations and the changes you’d like to see here. We appreciate your patience and commitment to being stewards of this community.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>meta</category>
      <category>product</category>
      <category>ux</category>
      <category>changelog</category>
    </item>
    <item>
      <title>Use GIT REBASE instead of GIT MERGE</title>
      <author>ThePylot</author>
      <pubDate>Mon, 29 Nov 2021 08:20:49 +0000</pubDate>
      <link>https://dev.to/thepylot/use-git-rebase-instead-of-git-merge-3c1c</link>
      <guid>https://dev.to/thepylot/use-git-rebase-instead-of-git-merge-3c1c</guid>
      <description>&lt;p&gt;&lt;a href="https://www.thepylot.dev/use-git-rebase-instead-of-git-merge-2/"&gt;In this quick post&lt;/a&gt;, I want to show how to use git rebase to keep your commit path clean and maintainable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-git-rebase-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;git rebase&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;It behaves like merging by applying all changes from the target branch but not creating an extra commit for that where it keeps the commit log clean and readable. Simply, it takes your new commits at puts them at the very top of commit log.&lt;/p&gt;

&lt;p&gt;Let's assume that you're implementing a new feature by creating a new branch from the master. Meanwhile, you're co-workers also working on other features and some of them already merged their PRs to master branch. &lt;/p&gt;

&lt;p&gt;At this point, your branch will be no longer up-to-date with master so you need to apply those changes before attempting to create any pull request.&lt;/p&gt;

&lt;p&gt;Usually, there're two options for such cases:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;git merge&lt;/code&gt;&lt;br&gt;
Using &lt;code&gt;git rebase&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's say you decide to use &lt;code&gt;git merge&lt;/code&gt; to apply changes from &lt;code&gt;master&lt;/code&gt; where it will create an extra commit for each merging. Imagine how messy the git log will be if we continuously use merging to keep our branch up-to-date. It also makes hard to track real commits since the majority of them will be created automatically by merging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-scenario"&gt;
  &lt;/a&gt;
  Example scenario
&lt;/h2&gt;

&lt;p&gt;Assume that we want to rebase with the &lt;code&gt;master&lt;/code&gt; branch to apply most recent changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there will be any conflicts while rebasing, then you have to resolve them and also adding changes once you finished:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -u
git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you decided to abort the process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase --abort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once rebasing finished, you will able to see new changes in your branch.&lt;/p&gt;

&lt;p&gt;I prefer to avoid git merge at all except in PRs where it have to merge with master by creating a commit about it. So, when analyzing git log it will be much easier to understand purpose of commits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/laKgInNOie4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Feature update: Markdown toolbar</title>
      <author>Amy Lin</author>
      <pubDate>Mon, 29 Nov 2021 08:16:43 +0000</pubDate>
      <link>https://dev.to/devteam/feature-update-markdown-toolbar-2lma</link>
      <guid>https://dev.to/devteam/feature-update-markdown-toolbar-2lma</guid>
      <description>&lt;p&gt;Hello, DEV community!&lt;/p&gt;

&lt;p&gt;Today, I have a quick (but exciting!) update for those of you who write on DEV. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-now-have-a-markdown-toolbar-in-our-editor"&gt;
  &lt;/a&gt;
  We now have a markdown toolbar in our editor!
&lt;/h2&gt;

&lt;p&gt;We have always prided ourselves on minimalistic and concise design. When possible, we keep things simple and straightforward. Our editor is tricky, though. While we have gotten consistent feedback that our community appreciates the simplicity, we have also gotten requests for more instruction and guidance when writing, especially around markdown formatting syntaxes. Though the majority of our community members are familiar with markdown syntaxes, we certainly don’t want those who are not familiar with them feeling uncomfortable and unwelcome to share their experience on DEV. &lt;/p&gt;

&lt;p&gt;To improve this, we are adding a little human touch to the editor with the introduction of the markdown toolbar. We believe the toolbar should give writers &lt;em&gt;just enough&lt;/em&gt;  guidance to have an enriched writing experience without formatting getting in the way of the writing itself. In other words, we aim to remove the distractions you may encounter, so you can focus on writing. (Hint: we also have something exciting planned around &lt;a href="https://github.com/forem/forem/issues/15099"&gt;simplifying liquid tags&lt;/a&gt; ✨)&lt;/p&gt;

&lt;p&gt;We are also aware that our community enjoys learning about how our features come together. If that is your cup of tea, stay tuned! Our own wonderful &lt;a href="https://dev.to/s_aitchison"&gt;Suzanne&lt;/a&gt; (Frontend Software Engineer @ Forem) will be sharing her experience developing the Toolbar. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-you-written-a-post-yet"&gt;
  &lt;/a&gt;
  Have you written a post yet?
&lt;/h2&gt;

&lt;p&gt;Have you written a post since this update? Have you noticed the Toolbar? How do you like it? Are you a Toolbar user or do you prefer to type out syntaxes? If you haven’t used the Toolbar yet, I encourage you to check it out and let us know what you think! &lt;/p&gt;

&lt;p&gt;If you have &lt;em&gt;never&lt;/em&gt; written a post on DEV, consider this your personal invitation from me to start! Check out &lt;a href="https://dev.to/andrewbaisden/100-blog-topic-ideas-for-your-next-article-no-more-writers-block-2e0j"&gt;these ideas&lt;/a&gt; for your first DEV post from community member &lt;a class="mentioned-user" href="https://dev.to/andrewbaisden"&gt;@andrewbaisden&lt;/a&gt;
 for your first DEV post.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image screenshot by &lt;a href="https://dev.to/s_aitchison"&gt;Suzanne Aitchison&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>meta</category>
      <category>product</category>
      <category>ux</category>
      <category>changelog</category>
    </item>
    <item>
      <title>Running Serverless Applications on Kubernetes with Knative</title>
      <author>Peter Mbanugo</author>
      <pubDate>Mon, 29 Nov 2021 08:06:05 +0000</pubDate>
      <link>https://dev.to/pmbanugo/running-serverless-applications-on-kubernetes-with-knative-bef</link>
      <guid>https://dev.to/pmbanugo/running-serverless-applications-on-kubernetes-with-knative-bef</guid>
      <description>&lt;p&gt;Kubernetes provides a set of primitives to run resilient, distributed applications. It takes care of scaling and automatic failover for your application and it provides deployment patterns and APIs that allow you to automate resource management and provision new workloads.&lt;/p&gt;

&lt;p&gt;One of the main challenges that developers face is how to focus more on the details of the code rather than the infrastructure where that code runs. For that, serverless is one of the leading architectural paradigms to address this challenge. There are various platforms that allow you to run serverless applications either deployed as single functions or running inside containers, such as AWS Lambda, AWS Fargate, and Azure Functions. These managed platforms come with some drawbacks like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vendor lock-in&lt;/li&gt;
&lt;li&gt;Constraint in the size of the application binary/artifacts&lt;/li&gt;
&lt;li&gt;Cold start performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could be in a situation where you're only allowed to run applications within a private data center, or you may be using Kubernetes but you'd like to harness the benefits of serverless. There are different open-source platforms, such as Knative and OpenFaaS, that use Kubernetes to abstract the infrastructure from the developer, allowing you to deploy and manage your applications using serverless architecture and patterns. Using any of those platforms takes away the problems mentioned in the previous paragraph.&lt;/p&gt;

&lt;p&gt;This article will show you how to deploy and manage serverless applications using Knative and Kubernetes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-landscape"&gt;
  &lt;/a&gt;
  Serverless Landscape
&lt;/h2&gt;

&lt;p&gt;Serverless computing is a development model that allows you to build and run applications without having to manage servers. It describes a model where a cloud provider handles the routine work of provisioning, maintaining, and scaling the server infrastructure, while the developers can simply package and upload their code for deployment. Serverless apps can automatically scale up and down as needed, without any extra configuration by the developer.&lt;/p&gt;

&lt;p&gt;As stated in a &lt;a href="https://github.com/cncf/wg-serverless/tree/master/whitepapers/serverless-overview"&gt;white paper&lt;/a&gt; by the CNCF serverless working group, there are two primary serverless personas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Developer&lt;/strong&gt;: Writes code for and benefits from the serverless platform that provides them with the point of view that there are no servers and that their code is always running.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Provider&lt;/strong&gt;: Deploys the serverless platform for an external or internal customer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;provider&lt;/em&gt; needs to manage servers (or containers) and will have some cost for running the platform, even when idle. A self-hosted system can still be considered serverless: Typically, one team acts as the provider and another as the developer.&lt;/p&gt;

&lt;p&gt;In the Kubernetes landscape, there are various ways to run serverless apps. It can be through managed serverless platforms like IBM Cloud Code and Google Cloud Run, or open-source alternatives that you can self-host, such as OpenFaaS and Knative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-knative"&gt;
  &lt;/a&gt;
  Introduction to Knative
&lt;/h2&gt;

&lt;p&gt;Knative is a set of Kubernetes components that provides serverless capabilities. It provides an event-driven platform that can be used to deploy and run applications and services that can auto-scale based on demand, with out-of-the-box support for monitoring, automatic renewal of TLS certificates, and more.&lt;/p&gt;

&lt;p&gt;Knative is used by a lot of companies. In fact, it powers the Google Cloud Run platform, IBM Cloud Code Engine, and Scaleway serverless functions.&lt;/p&gt;

&lt;p&gt;The basic deployment unit for Knative is a container that can receive incoming traffic. You give it a container image to run and Knative handles every other component needed to run and scale the application. The deployment and management of the containerized app is handled by one of the core components of Knative, called Knative Serving. Knative Serving is the component in Knative that manages the deployment and rollout of stateless services, plus its networking and autoscaling requirements.&lt;/p&gt;

&lt;p&gt;The other core component of Knative is called Knative Eventing. This component provides an abstract way to consume &lt;strong&gt;Cloud Events&lt;/strong&gt; from internal and external sources without writing extra code for different event sources. This article focuses on Knative Serving but you will learn about how to use and configure Knative Eventing for different use-cases in a future article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-set-up"&gt;
  &lt;/a&gt;
  Development Set Up
&lt;/h2&gt;

&lt;p&gt;In order to install Knative and deploy your application, you'll need a Kubernetes cluster and the following tools installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;kubectl, the Kubernetes command-line tool&lt;/li&gt;
&lt;li&gt;kn CLI, the CLI for managing Knative application and configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h3&gt;

&lt;p&gt;To install Docker, go to the URL &lt;a href="https://docs.docker.com/get-docker"&gt;docs.docker.com/get-docker&lt;/a&gt; and download the appropriate binary for your OS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-kubectl"&gt;
  &lt;/a&gt;
  Installing kubectl
&lt;/h3&gt;

&lt;p&gt;The Kubernetes command-line tool &lt;em&gt;kubectl&lt;/em&gt; allows you to run commands against Kubernetes clusters. Docker Desktop installs kubectl for you, so if you followed the previous section in installing Docker Desktop, you should already have kubectl installed and you can skip this step. If you don't have kubectl installed, follow the instructions below to install it.&lt;/p&gt;

&lt;p&gt;If you're on Linux or macOS, you can install kubectl using Homebrew by running the command &lt;code&gt;brew install kubectl&lt;/code&gt;. Ensure that the version you installed is up to date by running the command &lt;code&gt;kubectl version --client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're on Windows, run the command &lt;code&gt;curl -LO https://dl.k8s.io/release/v1.21.0/bin/windows/amd64/kubectl.exe&lt;/code&gt; to install kubectl, and then add the binary to your PATH. Ensure that the version you installed is up to date by running the command &lt;code&gt;kubectl version --client&lt;/code&gt;. You should have version 1.20.x or v1.21.x because in a future section, you're going to create a server cluster with Kubernetes version 1.21.x.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-kn-cli"&gt;
  &lt;/a&gt;
  Installing kn CLI
&lt;/h3&gt;

&lt;p&gt;The kn CLI provides a quick and easy interface for creating Knative resources, such as services and event sources, without the need to create or modify YAML files directly. kn also simplifies completion of otherwise complex procedures, such as autoscaling and traffic splitting.&lt;/p&gt;

&lt;p&gt;To install kn on macOS or Linux, run the command &lt;code&gt;brew install kn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To install kn on Windows, download and install a stable binary from &lt;a href="https://mirror.openshift.com/pub/openshift-v4/clients/serverless/latest"&gt;https://mirror.openshift.com/pub/openshift-v4/clients/serverless/latest&lt;/a&gt;. Afterward, add the binary to the system PATH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Creating a Kubernetes Cluster
&lt;/h2&gt;

&lt;p&gt;You need a Kubernetes cluster to run Knative. For this article, you're going to work with a local Kubernetes cluster running on Docker. You should have Docker Desktop installed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-cluster-with-docker-desktop"&gt;
  &lt;/a&gt;
  Create a Cluster with Docker Desktop
&lt;/h3&gt;

&lt;p&gt;Docker Desktop includes a standalone Kubernetes server and client. This is a single-node cluster that runs within a Docker container on your local system and should be used only for local testing.&lt;/p&gt;

&lt;p&gt;To enable Kubernetes support and install a standalone instance of Kubernetes running as a Docker container, go to &lt;strong&gt;Preferences &amp;gt; Kubernetes&lt;/strong&gt; and then click &lt;strong&gt;Enable Kubernetes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Apply &amp;amp; Restart&lt;/strong&gt; to save the settings and then click Install to confirm, as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maZyvpGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maZyvpGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image1.png" alt="Figure 1: Enable Kubernetes on Docker Desktop" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This instantiates the images required to run the Kubernetes server as containers.&lt;/p&gt;

&lt;p&gt;The status of Kubernetes shows in the Docker menu and the context points to &lt;strong&gt;docker-desktop&lt;/strong&gt;, as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRbSMNaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRbSMNaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image2.png" alt="Figure 2 : kube context" width="387" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternatively-create-a-cluster-with-kind"&gt;
  &lt;/a&gt;
  Alternatively, Create a Cluster with Kind
&lt;/h3&gt;

&lt;p&gt;You can also create a cluster using kind, a tool for running local Kubernetes clusters using Docker container nodes. If you have kind installed, you can run the following command to create your kind cluster and set the kubectl context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sL https://raw.githubusercontent.com/csantanapr/knative-kind/master/01-kind.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-knative-serving"&gt;
  &lt;/a&gt;
  Install Knative Serving
&lt;/h2&gt;

&lt;p&gt;Knative Serving manages service deployments, revisions, networking, and scaling. The Knative Serving component exposes your service via an HTTP URL and has safe defaults for its configurations.&lt;/p&gt;

&lt;p&gt;For kind users, follow these instructions to install Knative Serving:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command &lt;code&gt;curl -sL https://raw.githubusercontent.com/csantanapr/knative-kind/master/02-serving.sh | sh&lt;/code&gt; to install Knative Serving.&lt;/li&gt;
&lt;li&gt;When that's done, run the command &lt;code&gt;curl -sL https://raw.githubusercontent.com/csantanapr/knative-kind/master/02-kourier.sh | sh&lt;/code&gt; to install and configure Kourier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Docker Desktop users, run the command &lt;code&gt;curl -sL https://raw.githubusercontent.com/csantanapr/knative-docker-desktop/main/demo.sh | sh&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-your-first-application"&gt;
  &lt;/a&gt;
  Deploying Your First Application
&lt;/h2&gt;

&lt;p&gt;Next, you'll deploy a basic Hello World application so that you can learn how to deploy and configure an application on Knative. You can deploy an application using a YAML file and the kubectl command, or using the kn command and passing the right options. For this article, I'll be using the kn command. The sample container image you'll use is hosted on &lt;a href="https://gcr.io/knative-samples/helloworld-go"&gt;gcr.io/knative-samples/helloworld-go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To deploy an application, you use the &lt;code&gt;kn service create&lt;/code&gt; command, and you need to specify the name of the application and the container image to use.&lt;/p&gt;

&lt;p&gt;Run the following command to create a service called &lt;code&gt;hello&lt;/code&gt; using the image &lt;a href="https://gcr.io/knative-samples/helloworld-go"&gt;https://gcr.io/knative-samples/helloworld-go&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kn service create hello &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--image&lt;/span&gt; gcr.io/knative-samples/helloworld-go &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--port&lt;/span&gt; 8080 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--revision-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command creates and starts a new service using the specified image and port. An environment variable is set using the &lt;code&gt;--env&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;The revision name is set to &lt;code&gt;world&lt;/code&gt; using the &lt;code&gt;--revision-name&lt;/code&gt; option. Knative uses revisions to maintain the history of each change to a service. Each time a service is updated, a new revision is created and promoted as the current version of the application. This feature allows you to roll back to previous version of the service when needed. Specifying a name for the revision allows you to easily identify them.&lt;/p&gt;

&lt;p&gt;When the service is created and ready, you should get the following output printed in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Service hello created to latest revision 'hello-world'
is available at URL: http://hello.default.127.0.0.1.nip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm that the application is running by running the command &lt;code&gt;curl http://hello.default.127.0.0.1.nip.io&lt;/code&gt;. You should get the output &lt;strong&gt;Hello World!&lt;/strong&gt; printed in the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-the-service"&gt;
  &lt;/a&gt;
  Update the Service
&lt;/h3&gt;

&lt;p&gt;Suppose you want to update the service; you can use the &lt;code&gt;kn service update&lt;/code&gt; command to make any changes to the service. Each change creates a new revision, and directs all traffic to the new revision once it's started and is healthy.&lt;/p&gt;

&lt;p&gt;Update the TARGET environment variable by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kn service update hello &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Coder &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--revision-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;coder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the following output when the command has completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Service 'hello' updated to latest revision
'hello-coder' is available at
URL: http://hello.default.127.0.0.1.nip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the curl command again and you should get &lt;strong&gt;Hello Coder!&lt;/strong&gt; printed out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ curl http://hello.default.127.0.0.1.nip.io
~ Hello Coder!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#traffic-splitting-and-revisions"&gt;
  &lt;/a&gt;
  Traffic Splitting and Revisions
&lt;/h2&gt;

&lt;p&gt;Knative Revision is similar to a version control tag or label and it's immutable. Every Knative Revision has a corresponding Kubernetes Deployment associated with it; it allows the application to be rolled back to any of the previous revisions. You can see the list of available revisions by running the command &lt;code&gt;kn revisions list&lt;/code&gt;. This should print out a list of available revisions for every service, with information on how much traffic each revision gets, as shown in the image below. By default, each new revision gets routed 100% of traffic when created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuOGb3UY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuOGb3UY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image5.png" alt="Figure 5 : Revision list" width="880" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With revisions, you may wish to deploy applications using common deployment patterns such as Canary or blue-green. You need to have more than one revision of a service in order to use these patterns. The &lt;em&gt;hello&lt;/em&gt; service you deployed in the previous section already have two revisions named &lt;strong&gt;hello-world&lt;/strong&gt; and &lt;strong&gt;hello-coder&lt;/strong&gt; respectively. You can split traffic 50% for each revision using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kn service update hello &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--traffic&lt;/span&gt; hello-world&lt;span class="o"&gt;=&lt;/span&gt;50 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--traffic&lt;/span&gt; hello-coder&lt;span class="o"&gt;=&lt;/span&gt;50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;curl http://hello.default.127.0.0.1.nip.io&lt;/code&gt; command a few times to see that you get &lt;strong&gt;Hello World!&lt;/strong&gt; sometimes, and &lt;strong&gt;Hello Coder!&lt;/strong&gt; other times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbT9fRwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbT9fRwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image6.png" alt="Figure 6 : Traffic Splitting" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autoscaling-services"&gt;
  &lt;/a&gt;
  Autoscaling Services
&lt;/h2&gt;

&lt;p&gt;One of the benefits of serverless is the ability to scale up and down to meet demand. When there's no traffic coming in, it should scale down, and when it peaks, it should scale up to meet demand. Knative scales out the pods for a Knative Service based on inbound HTTP traffic. After a period of idleness (by default, 60 seconds), Knative terminates all of the pods for that service. In other words, it scales down to zero. This autoscaling capability of Knative is managed by &lt;strong&gt;Knative Horizontal Pod Autoscaler&lt;/strong&gt; in conjunction with the &lt;strong&gt;Horizontal Pod Autoscaler&lt;/strong&gt; built into Kubernetes.&lt;/p&gt;

&lt;p&gt;If you've not accessed the hello service for more than one minute, the pods should have already been terminated. Running the command &lt;code&gt;kubectl get pod -l serving.knative.dev/service=hello -w&lt;/code&gt; should show you an empty result. To see the autoscaling in action, open the service URL in the browser and check back to see the pods started and responding to the request. You should get an output similar to what's shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqubFnew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqubFnew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image7.png" alt="Scaling Up" width="880" height="340"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Scaling Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9R36_kF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9R36_kF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codemag.com/Article/Image/2109081/image8.png" alt="Scaling Down" width="880" height="205"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Scaling Down&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There you have the awesome autoscaling capability of serverless.&lt;/p&gt;

&lt;p&gt;If you have an application that is badly affected by the coldstart performance, and you'd like to keep at least one instance of the application running, you can do so by running the command &lt;code&gt;kn service update &amp;lt;SERVICE_NAME&amp;gt; --scale-min &amp;lt;VALUE&amp;gt;&lt;/code&gt;. For example, to keep at least one instance of the hello service running at all times, you can use the command &lt;code&gt;kn service update hello --scale-min 1&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h2&gt;

&lt;p&gt;Kubernetes has become a standard tool for managing container workloads. A lot of companies rely on it to build and scale cloud native applications, and it powers many of the products and services you use today. Although companies are adopting Kubernetes and reaping some benefits, developers aren't interested in the low-level details of Kubernetes and therefore want to focus on their code without worrying about the infrastructure bits of running the application.&lt;/p&gt;

&lt;p&gt;Knative provides a set of tools and CLI that developers can use to deploy their code and have Knative manage the infrastructure requirement of the application. In this article, you saw how to install the Knative Serving component and deploy services to run on it. You also learned how to deploy services and manage their configuration using the kn CLI. If you want to learn more about how to use the kn CLI, check out this free cheat sheet I made at &lt;a href="http://cheatsheet.pmbanugo.me/knative-serving"&gt;cheatsheet.pmbanugo.me/knative-serving&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a future article, I'll show you how to work with Knative Eventing and how your application can respond to Cloud Events in and out of your cluster.&lt;/p&gt;

&lt;p&gt;In the meantime, you can get my book &lt;a href="https://books.pmbanugo.me/serverless-app-platform"&gt;How to build a serverless app platform on Kubernetes&lt;/a&gt;. It will teach you how to build a platform to deploy and manage web apps and services using Cloud Native technologies. You will learn about serverless, Knative, Tekton, GitHub Apps, Cloud Native Buildpacks, and more!&lt;/p&gt;

&lt;p&gt;Get your copy at &lt;a href="https://books.pmbanugo.me/serverless-app-platform"&gt;books.pmbanugo.me/serverless-app-platform&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://www.codemag.com/article/2109081"&gt;Code Magazine&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>serverless</category>
      <category>cloudnative</category>
      <category>kubernetes</category>
      <category>cloud</category>
    </item>
    <item>
      <title>CAST AI is officially SOC 2 Type II compliant</title>
      <author>CAST AI</author>
      <pubDate>Mon, 29 Nov 2021 08:00:14 +0000</pubDate>
      <link>https://dev.to/castai/cast-ai-is-officially-soc-2-type-ii-compliant-3oa3</link>
      <guid>https://dev.to/castai/cast-ai-is-officially-soc-2-type-ii-compliant-3oa3</guid>
      <description>&lt;p&gt;We mean it when we say that security is at the heart of CAST AI. &lt;/p&gt;

&lt;p&gt;Several of our founders previously built a company that specialized in application security and attack mitigation. Leon Kuperman, our CTO, previously worked at Oracle as the VP of Security Products.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As part of our continued commitment to deliver the most secure environment for our clients, we're pleased to report that &lt;strong&gt;CAST AI has passed the independent SOC 2 Type II examination&lt;/strong&gt; that attests to the high level of our privacy and security policies and processes. &lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Why is SOC 2 Type II important?&lt;/h2&gt;

&lt;p&gt;SOC 2 Type II refers to a specific type and degree of SOC (Service Organization Control) report. SOC is a system of standards from the American Institute of Certified Public Accountants (AICPA) used to assess a company’s data security policies and their effectiveness. &lt;/p&gt;

&lt;p&gt;Under the SOC umbrella, SOC 2 Type II represents the most thorough and difficult-to-achieve compliance. It’s one of the most trusted and sought-after third-party security verifications.&lt;/p&gt;

&lt;h2&gt;What does the SOC 2 Type II examination take into account?&lt;/h2&gt;

&lt;p&gt;SOC 2 Type II examine the security, confidentiality, and availability in an organization using five key principles of trust established by the AICPA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protections against unauthorized access that defines the security of a vendor's system.&lt;/li&gt;
&lt;li&gt;The completeness, validity, timeliness, accuracy, and authorization of a vendor's system's processing.&lt;/li&gt;
&lt;li&gt;The availability of a vendor's system for operation and usage as specified in the customer agreement.&lt;/li&gt;
&lt;li&gt;The confidentiality of the information the vendor processes and keeps, and how that confidentiality is safeguarded.&lt;/li&gt;
&lt;li&gt;The privacy of the personal information the vendor collects, holds, uses, discloses, and disposes of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To qualify for the SOC 2 Type II report, we developed strict security procedures following these principles. We then engaged an accredited independent auditor to assess their quality and monitor our adherence to these procedures over the period of 4 four months (June-October 2021). &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The result was a detailed report showing that we consistently live up to our security promises. It confirmed that &lt;strong&gt;CAST AI meets all the service commitments and system requirements&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Our commitment to providing a secure solution to our customers doesn’t end here. We’re already ISO27001-certified and are constantly improving our security practices to make our product fully protected against all kinds of threats.&lt;/p&gt;

&lt;h2&gt;Was SOC 2 holding you back from trying out CAST AI?&lt;/h2&gt;

&lt;p&gt;Book a demo call today with the assurance that CAST AI is compatible with your security practices.&lt;/p&gt;



&lt;h2&gt;Learn more about security in CAST AI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To learn more about our approach to security, check out this &lt;a href="https://cast.ai/blog/a-quick-guide-to-data-and-security-in-cast-ai/"&gt;guide to security and privacy in CAST AI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Here’s a detailed look into how CAST AI works when analyzing and optimizing cloud infrastructure: &lt;a href="https://cast.ai/blog/how-does-the-read-only-cast-ai-agent-work-and-what-data-can-it-read/"&gt;How does the read-only CAST AI agent work and what data can it read?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>news</category>
      <category>cloud</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Create your own NFT collection on Ethereum w/Solidity</title>
      <author>Eda</author>
      <pubDate>Mon, 29 Nov 2021 07:46:29 +0000</pubDate>
      <link>https://dev.to/edatweets_/create-your-own-nft-collection-on-ethereum-wsolidity-1ai5</link>
      <guid>https://dev.to/edatweets_/create-your-own-nft-collection-on-ethereum-wsolidity-1ai5</guid>
      <description>&lt;p&gt;My Twitter feed has tons of avatar profile pictures, articles are coming out daily showcasing some large NFT sales, and people are earning money with their in-game creatures... &lt;/p&gt;

&lt;p&gt;I guess this means it's time to go down the NFT rabbit hole. So let's get to it!&lt;/p&gt;

&lt;p&gt;This article &lt;strong&gt;introduces NFT's&lt;/strong&gt; and guides you through &lt;strong&gt;creating your NFT collection on Ethereum using solidity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Creating your collection sounds complicated; I thought the same. Frankly, I would have never imagined creating an NFT collection, let alone try to explain it in a 10min article, if it weren't for  &lt;a href="https://buildspace.so/"&gt;buildspace&lt;/a&gt; . Buildspace is a platform for developers to learn about web3 by creating projects. I signed up for my first project and was amazed at what I was able to build. Check it out  &lt;a href="https://twitter.com/edatweets_/status/1447299670796029957"&gt;here&lt;/a&gt;. In this post, we will follow the project from buildspace "Mint your own NFT collection and ship a Web3 app to show them off."&lt;/p&gt;

&lt;p&gt;So bare with me; it's just the new terminology that makes things complicated.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cant-you-just-take-a-screenshot"&gt;
  &lt;/a&gt;
  Can't you just take a screenshot?
&lt;/h2&gt;

&lt;p&gt;It seems like a lot of people ask this question. I know for one that my friends and family do. By the end of this section, we'll have an answer 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nft"&gt;
  &lt;/a&gt;
  NFT
&lt;/h3&gt;

&lt;p&gt;Firstly, NFT stands for Non-Fungible Token.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non-fungible: Fungibility indicates that a good can be interchanged (a word I googled many times). Non-fungible refers to goods that have unique properties and can not be changed with one another. For example, bitcoin is a fungible asset. If we each have a bitcoin and send them to each other, in the end, we'll have the same thing. On the other hand, a house is non-fungible. If we decide to switch homes, we'll end up with something different. &lt;/li&gt;
&lt;li&gt;Token: In short, blockchain is a shared and immutable ledger, and a token is a digital asset living on top of the blockchain. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NFT's are &lt;strong&gt;unique digital assets on the blockchain&lt;/strong&gt;. They are each one of a kind; this allows for tracking the ownership.&lt;/p&gt;

&lt;p&gt;Today, most NFT's are on the Ethereum blockchain. However, we are also seeing many projects coming out on Solana and Avalanche.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-what-really-are-nfts"&gt;
  &lt;/a&gt;
  But what really are NFT's?
&lt;/h3&gt;

&lt;p&gt;The sky is the limit. Any digital asset can theoretically be an NFT. The most popular are Collectibles and Art.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collectibles&lt;/strong&gt;, as the name indicates, are a collection of assets in the format of an NFT. Think of these as Pokemon cards or even penny collections. NFT collectibles have the same logic, except they are in the digital world.&lt;/p&gt;

&lt;p&gt;The earliest NFT was a collectibles project called  &lt;a href="https://www.cryptokitties.co/"&gt;CryptoKitties&lt;/a&gt; . It came out as a game centered around breeding cats. Each kitty (which is an nft) is unique, and you can breed kitties to create new ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YYd9Ph8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635355372129/D7w1lXJ7N.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YYd9Ph8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635355372129/D7w1lXJ7N.jpeg" alt="1_Mw8ZN07nisyUMS0fiR5KOw.jpeg" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example of a collectible NFT project is &lt;a href="https://www.larvalabs.com/cryptopunks"&gt;CryptoPunks&lt;/a&gt;. There are 10,000 crypto punks with different attributes such as a beanie, big beard, purple hair etc. The characteristics change for each punk, making each a unique CryptoPunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ldacJWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635354476266/77jBf5p44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ldacJWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635354476266/77jBf5p44.png" alt="Screen Shot 2021-10-27 at 20.06.02.png" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Art&lt;/strong&gt; is self-explanatory. Artists have the chance to create their work on the blockchain and can directly reach their buyers. This process removes the many middlemen in between by directly connecting the buyer and the creator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43RQkwjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635354256092/EeSV1-0bY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43RQkwjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635354256092/EeSV1-0bY.png" alt="Screen Shot 2021-10-27 at 20.03.49.png" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other use cases for NFT's include &lt;strong&gt;domain names, gaming, music, ticketing...&lt;/strong&gt; (There can be many more applications which we have not even discovered yet.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts-amp-transactions"&gt;
  &lt;/a&gt;
  Smart Contracts &amp;amp; Transactions
&lt;/h3&gt;

&lt;p&gt;NFT's are created by running the code on the smart contract. This process is also called "minting."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721&lt;/a&gt;  is a standard type of smart contract that creates fungible tokens on Ethereum&lt;/strong&gt;. The way each token is globally unique is with the tokenId field. Therefore, for every smart contract that creates an NFT, the &lt;strong&gt;smart contract and the tokenId pair is different&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once you mint an NFT, you will be able to see it in your crypto wallet. You can then use secondary markets to buy/sell NFT's. Today,  &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt;  is the most popular secondary market.&lt;/p&gt;

&lt;p&gt;One thing to note is that every transaction on the blockchain has a cost. So when you want to mint, buy or sell an NFT, you need to pay the price called &lt;strong&gt;&lt;a href="https://ethereum.org/en/developers/docs/gas/"&gt;gas fee&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gas is the measure of the unit to denote the cost for a transaction. Accordingly, gas fees are the fees that are paid to the network to process the transactions.&lt;/p&gt;

&lt;p&gt;On the Ethereum blockchain, gas fees are paid in ETH and denoted in gwei (10-9 ETH). Due to the high demand for the Ethereum network, gas fee's are pretty high. Especially when there is a popular NFT project drop, and you could end up paying 100 dollars just for the transaction. Make sure to check the &lt;a href="https://etherscan.io/gastracker"&gt;gas tracker&lt;/a&gt; before making transactions. &lt;/p&gt;

&lt;p&gt;High gas fees are an issue which the Ethereum team and other scaling solutions are working on. High gas fees explain why many projects are coming out on the other blockchains. &lt;/p&gt;

&lt;p&gt;🙌 Going back to our screenshot question. The main value proposition of an NFT is &lt;strong&gt;trackable and transparent ownership&lt;/strong&gt;. The owner can prove that they own an NFT. If an NFT gets transferred, the transaction is recorded on the blockchain. It's basically a new way to transfer digital arts or even any asset. So, just like taking a photo of the Mona Lisa is not the same thing as owning the piece. Likewise, taking a screenshot of an NFT is not the same as being listed as the owner on a transparent and immutable ledger.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-create-your-own-nft-collection"&gt;
  &lt;/a&gt;
  How to create your own NFT collection?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#project-tools"&gt;
  &lt;/a&gt;
  Project Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://metamask.io/"&gt;Metamask Wallet&lt;/a&gt;: crypto wallet. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dashboard.alchemyapi.io/"&gt;Alchemy&lt;/a&gt;: ethereum developer platform. We will be using the Alchemy API to interact with Alchemy's Ethereum infrastructure.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt;: ethereum development environment. It comes as an npm package.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts"&gt;OpenZepplin Contracts&lt;/a&gt;: library for secure smart contract implementations. We will be using the ERC271 libary standard. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;(It's the same setup from my  &lt;a href="https://eda.hashnode.dev/create-your-own-cryptocurrency-token"&gt;previous post&lt;/a&gt;, here is a checklist to review the items.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose your IDE and get the "solidity extension."&lt;/li&gt;
&lt;li&gt;Create an account on  &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt;  and switch to the rinkeby test network. &lt;/li&gt;
&lt;li&gt;Get your  &lt;a href="https://alchemy.com/?r=63afe97f6fd780ac"&gt;Alchemy API key&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Get  &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt;  to use hardhat.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-your-nft-collection"&gt;
  &lt;/a&gt;
  Create your NFT collection
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a project folder and head over to its directory. Install hardhat.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir eda-nft-collection
cd eda-nft-collection
npm init -y
npm install --save-dev hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your project directory &lt;strong&gt;create a hardhat project&lt;/strong&gt; by &lt;br&gt;
running &lt;code&gt;npx hardhat.&lt;/code&gt; The setup wizard will direct, you can &lt;br&gt;
click enter throughout the setup wizard and keep the default &lt;br&gt;
options.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx hardhat
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the command to install the &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts"&gt;OpenZepplin &lt;br&gt;
implementation&lt;/a&gt; for &lt;br&gt;
smart contracts. It has the &lt;strong&gt;ERC-721 token&lt;/strong&gt; standard which &lt;br&gt;
we will extend from.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @openzeppelin/contracts
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under the 'Contracts' folder create a new solidity &lt;br&gt;
file(file extension is .sol). This will be the file for our &lt;br&gt;
ERC-721 token. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Below you can see a sample &lt;strong&gt;ERC-721 token smart contract&lt;/strong&gt; extended from OpenZepplin. I have added some comments to explain what's going on in the code. Copy and paste it onto your own solidity file.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.9; // tells the solidity version to    the complier

// get the OpenZeppelin Contracts, we will use to creat our own
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

import "hardhat/console.sol"; // built in hardhat local environment 

contract EdaNFTCollection is ERC721URIStorage {

  // keep count of the tokenId
  using Counters for Counters.Counter; // keep track of the token id's
  Counters.Counter private _tokenIds;

  uint256 public constant maxSupply = 2; // set the max supply of NFT's for your collection

  constructor() ERC721 ("edaNFTCollection", "EDA") { // construct your token, needs name and symbol
    console.log("An NFT has been minted to %s", msg.sender);
}

  function createEdaNFT() public { //function to create nfts

    uint256 newItemId = _tokenIds.current(); // get the tokenId

    require(newItemId &amp;lt; maxSupply); // check if the total supply has been reached 

    _safeMint(msg.sender, newItemId); // mint the nft from the sender account 

    _setTokenURI(newItemId, "https://jsonkeeper.com/b/2KQZ"); // add the contents to the nft 
    // the content of this nft is on the url above. This means that the nft is an off-chain nft
    // if the server with the content changes then the image in the url changes 

    _tokenIds.increment(); // increment the token, so when the next person calls the function it will be the next token in line 

    console.log("NFT ID %s has been minted", newItemId); 

   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to take our contract from our local machine and put it onto the Rinkeby Test Network. For this, simply create a &lt;strong&gt;deploy.js&lt;/strong&gt; file under the 'Scripts' folder. Copy and paste the content below onto your file.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const main = async () =&amp;gt; {

    const nftContractFactory = await hre.ethers.getContractFactory('EdaNFTCollection'); // get the contract 
    const nftContract = await nftContractFactory.deploy(); // deploy --&amp;gt; convert to computer language
    await nftContract.deployed(); // wait for it to deploy
    console.log("Contract deployed to:", nftContract.address);

    let txn = await nftContract.createEdaNFT() // mint the nft 
    await txn.wait() // wait for the mint

    txn = await nftContract.createEdaNFT() // mint another nft (we set 2 as the max supply, can't mint more)
    await txn.wait() // wait for the mint

  };

  const runMain = async () =&amp;gt; {
    try {
      await main();
      process.exit(0);
    } catch (error) {
      console.log(error);
      process.exit(1);
    }
  };
  runMain();
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get your &lt;em&gt;Alchemy API key&lt;/em&gt;, it is needed to talk to the Rinkeby Test Network from our contract. Add your API key to the &lt;strong&gt;hardhat.config.json&lt;/strong&gt; (see code snippet under step-8)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your &lt;em&gt;metamask private key&lt;/em&gt; to &lt;strong&gt;hardhat.config.json&lt;/strong&gt;. You can get this by clicking Account Details --&amp;gt; Export Private Key from your Metamask extension.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('@nomiclabs/hardhat-waffle');

module.exports = {
  solidity: '0.8.9', // make sure the version matches the one in smart contract file 
  networks: {
    rinkeby: {
      url: ' ', // rinkeby key 
      accounts: [' '], // metamask privte key- DO NOT SHARE THIS!! It has access to all your accounts
    },
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the command below to deploy the contract to the Rinkeby Test Network.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npx hardhat run scripts/deploy.js --network rinkeby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is working, it should deploy the contract and print out the contract address to the terminal. &lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://rinkeby.etherscan.io/"&gt;Etherscan&lt;/a&gt; for the Rinkeby Test Network. Etherscan shows all the transactions and the contracts on Ethereum. When you search for your contract address, you should be able to see the contract details and associated transactions. &lt;/p&gt;

&lt;p&gt;Go to your account on &lt;a href="https://testnets.opensea.io/account"&gt;Rinkeby Opensea&lt;/a&gt; to view the NFT's you just minted.&lt;/p&gt;

&lt;p&gt;🎉 There we go! Now we have created an NFT collection on the Ethereum blockchain using the solidity programming language. &lt;/p&gt;

&lt;p&gt;Make sure to checkout  &lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt; for more projects and sign up for the NFT Collection if you haven't already. You get to build a frontend for your nfts and even make on-chain nft's in the project!&lt;/p&gt;




&lt;p&gt;On a final note, the NFT industry is very new. There are a lot of speculations going on, and with little to no regulation, it can be intimating. However, I find NFT's very exciting because, before NFT's, decentralized finance was the primary industry for blockchain. Now we have a completely new application for blockchain technology. So let's see how the space will evolve.&lt;/p&gt;

&lt;p&gt;Thanks for reading my article. If you have any questions drop them below and connect with me from  &lt;a href="https://twitter.com/edatweets_"&gt;Twitter&lt;/a&gt;, I'd love to hear from you! &lt;/p&gt;

</description>
      <category>web3</category>
      <category>solidity</category>
      <category>ethereum</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Typewriter effect CSS</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 29 Nov 2021 07:13:34 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/typewriter-effect-css-4d2l</link>
      <guid>https://dev.to/dailydevtips1/typewriter-effect-css-4d2l</guid>
      <description>&lt;p&gt;In this article, we'll be creating a typewriter effect in CSS!&lt;br&gt;
We won't be needing any JavaScript to achieve this effect and the result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/GRvzjYL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alright, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-html"&gt;
  &lt;/a&gt;
  Setting up the HTML
&lt;/h2&gt;

&lt;p&gt;As for the HTML, we don't really need much. We just want a paragraph or text element that we can manipulate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Beetlejuice, Beetlejuice, Beetlejuice!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's quickly add some basic styling so the text is centred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can add some basic styling to make the text stand out a bit more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Courier New"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By now, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMwTpxpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637216446187/DPv1J7y_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMwTpxpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637216446187/DPv1J7y_g.png" alt="Styled typewriter in CSS" width="809" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-blinking-type-caret"&gt;
  &lt;/a&gt;
  Adding the blinking type caret
&lt;/h2&gt;

&lt;p&gt;Let's start by adding the blinking type caret at the end.&lt;br&gt;
This type of caret indicates a typewriter effect in most applications; I'll be using the one from iAWriter, which is a blue one.&lt;/p&gt;

&lt;p&gt;We can achieve this blinking caret by leveraging the right border of the p element like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="err"&gt;#18&lt;/span&gt;&lt;span class="nt"&gt;BDEC&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To animate this, let's create a blink animation that will run forever.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blink&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This blink animation will be super simple as it only needs to change the border-color to be transparent halfway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the 1 step in the animation, we create the quick blink effect instead of a slow fade.&lt;/p&gt;

&lt;p&gt;Resulting in the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l73Zc-eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637217127932/WJ9IrvPaF.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l73Zc-eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637217127932/WJ9IrvPaF.gif" alt="Caret type effect CSS" width="282" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-typing-effect"&gt;
  &lt;/a&gt;
  The typing effect
&lt;/h2&gt;

&lt;p&gt;Now it's time for the actual typing effect.&lt;/p&gt;

&lt;p&gt;We first want to make the &lt;code&gt;p&lt;/code&gt; tag have 0 width and not wrap to other lines or show the overflow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;white-space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;nowrap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we want to add the animation. Since we already have an animation in place, we can use a &lt;code&gt;,&lt;/code&gt; to separate the two.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;typing&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;38&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt; &lt;span class="nt"&gt;both&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blink&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used 38 steps as there would be 38 characters in my paragraph.&lt;/p&gt;

&lt;p&gt;Let's have a look at how this typing animation should look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yep, that's it, a simple 0 to 100% width animation.&lt;br&gt;
And it will give us this cool typewriter effect we are looking for.&lt;/p&gt;

&lt;p&gt;To make your animation fit your text and font, you might have to play around with the animation settings.&lt;/p&gt;

&lt;p&gt;Try playing around with the duration (&lt;code&gt;4s&lt;/code&gt;) and the steps to make it work best for you.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article and learned something new.&lt;br&gt;
Do share your creations with me on Twitter! 👀⌨️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
  </channel>
</rss>
