<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The "DeRxJSViewModel Pattern": The E=mc^2 of State Management [Part 2]</title>
      <author>Zack DeRose</author>
      <pubDate>Sun, 31 Oct 2021 07:58:17 +0000</pubDate>
      <link>https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73</link>
      <guid>https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73</guid>
      <description>&lt;p&gt;👋 hi all - this article is a continuation of a &lt;a href="https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-e-mc-2-of-state-management-part-1-3dka"&gt;previous article&lt;/a&gt; that explains the goals of the DeRxJS pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;entirely de-couple state management code from presentational code (to the point where your state management code could be re-used across frameworks)&lt;/li&gt;
&lt;li&gt;maximize the benefits of RxJS, while minimizing the negatives&lt;/li&gt;
&lt;li&gt;next-level testing [and potential to hand over all our state-management code to AI at some point]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that article, we did most of the heavy lifting - developing our state-management code and fully testing out every edge case with "timeline testing" (allowing us to assert not only "what" state looks like, but "when" it should look that way as well).&lt;/p&gt;

&lt;p&gt;In this article, we'll bring that state management code and show how we can use this across 3 front-end "frameworks": React, Angular, and Vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;One of the goals of DeRxJS [as the name suggests] is to remove actual RxJS code from our code bases. We discussed in the previous example how &lt;a href="https://www.npmjs.com/package/@derxjs/reducer"&gt;@derxjs/reducer&lt;/a&gt; can help us write our state management, leveraging RxJS, but without actually writing any RxJS code ourselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sA-WOU30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZackDeRose/derxjs/raw/main/derxjs-react-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sA-WOU30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZackDeRose/derxjs/raw/main/derxjs-react-logo.png" alt="@derxjs/react logo" width="813" height="921"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I'm excited to introduce &lt;a href="https://www.npmjs.com/package/@derxjs/react"&gt;@derxjs/react&lt;/a&gt; - that will allow us to leverage that same approach to our react presentation code.&lt;/p&gt;

&lt;p&gt;In all honesty, I've prioritized React as the first presentation-based package for derxjs in part because of React's popularity. But beyond that there are 2 huge reasons that I've targeted React first:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;RxJS and React don't really play well together [yet!]&lt;/li&gt;
&lt;li&gt;One of my favorite things about React is how it is not domain-specific, for nearly everything but state-management! (Interestingly, I think this is almost entirely inverted from Angular, which I'd argue is domain-specific for everything BUT state-management) Marrying React and RxJS I think can close that gap, so that the state-management code you write is as domain-agnostic as the rest of your react code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, I'm quite long on React. My motivations are almost entirely selfish - I think if this package works the way I want it to, this will be my ideal environment for frontend development.&lt;/p&gt;

&lt;p&gt;Without further ado, here's the general api for our @derxjs/react code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;DeRxJSComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeViewModelInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeViewModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ticTacToeViewModel$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeView&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createInitialViewModel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;triggerMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userSpaceClickEvents$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userResetClickEvents$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomAi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;viewModel$&lt;/code&gt; is imported from our work from the previous article&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;component&lt;/code&gt; is a presentational component (we'll see that next!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initialValue&lt;/code&gt; is the starting value for our state (the &lt;code&gt;createInitialViewModel()&lt;/code&gt; function comes from the previous article as well)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;triggerMap&lt;/code&gt; is a [type-safe!] object that maps the name of "trigger" functions for our presentational components to Observable inputs of our &lt;code&gt;viewModel$&lt;/code&gt;. "Trigger" functions are how we'll communicate the message passing our presentation component will need to perform, and hand this off to to the @derxjs/react package to turn those into Observables (so we don't have to write any of that RxJS code ourselves).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;inputs&lt;/code&gt; is our way to provide any non-reactive (or non-Observable) inputs to our &lt;code&gt;viewModel$&lt;/code&gt; function. Note we're passing our &lt;code&gt;randomAi&lt;/code&gt; function here - essentially parameterizing functionality of our &lt;code&gt;viewModel$&lt;/code&gt; this way. (Would be fun in future work to create an "unbeatable" ai as well!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This API is designed to allow you to write all presentational code as "presentational" components, delegating any smarts to your @derxjs/view-model, and using the provided trigger functions for message passing.&lt;/p&gt;

&lt;p&gt;Here's how that code ends up looking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SpaceProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SpaceProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeViewModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;board&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Space&lt;/span&gt;
                &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
                &lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
                &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Reset&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how &lt;code&gt;onClick&lt;/code&gt;s are set to those "trigger functions" we defined.&lt;/p&gt;

&lt;p&gt;Here's that code in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-ts-6wxgfx?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h2&gt;

&lt;p&gt;Next up: Angular! As mentioned, I'm of the opinion that Angular is generally very domain-agnostic when it comes to state management. In particular, it's very RxJS friendly.&lt;/p&gt;

&lt;p&gt;As such, I don't know if a @derxjs/angular package is really necessary. Eventually we could end up creating a package of utilities for hiding more of the RxJS code that we'd write, but I have no plans for that at the moment.&lt;/p&gt;

&lt;p&gt;Here's a look at the Typescript component code we'll write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;userResetClickEvents$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;userSpaceClickEvents$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;vm$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ticTacToeViewModel$&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomAi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;userSpaceClickEvents&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickEvents$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;userResetClickEvents&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickEvents$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nl"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BoardIndex&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;handleSpaceClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleResetClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we're creating our observables by creating an 'observer' property on the class at "construction time", and then in our click handler methods, we call &lt;code&gt;next()&lt;/code&gt; on those observers. (This essentially the same "message passing" as our React code, but the @derxjs/react package hid most of the actual code here)&lt;/p&gt;

&lt;p&gt;Similar to our react example, we'll see the same idea of a 'presentational' component in our template - with the one exception of passing our &lt;code&gt;viewModel$&lt;/code&gt; to the Angular async pipe at the top level of our template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Tic Tac Toe&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"vm$ | async as vm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ vm.turn }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"board"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let row of rows"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let column of rows"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"handleSpaceClick({ row, column })"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ vm.board[row][column] | uppercase }}
          &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reset"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"handleResetClick()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and simple :). Here's the stackblitz for our Angular code:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-qe6zzv?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-js"&gt;
  &lt;/a&gt;
  Vanilla JS
&lt;/h2&gt;

&lt;p&gt;In this example, we'll use the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"&gt;dom-manipulation API&lt;/a&gt; to do the lifting that React and Angular were doing in their examples. Here's the simplified version of what we're doing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a "template" for our component, attaching id's to the buttons we'll need to listen to for clicks/update their text. This example is a bit fortunate as all the elements on the DOM are static (they don't need to be added or removed, so we can just leave the &lt;code&gt;Element&lt;/code&gt; objects on the DOM as-is, and change their text content. This would be significantly more difficult if this were not the case).&lt;/li&gt;
&lt;li&gt;use &lt;a href="https://rxjs.dev/api/index/function/fromEvent"&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt; from RxJS to get observables of the 'click' events on the buttons.&lt;/li&gt;
&lt;li&gt;Once we have our observables, pass them to that same &lt;code&gt;viewModel$&lt;/code&gt; function we used in React and Angular to create our View Model observable.&lt;/li&gt;
&lt;li&gt;Subscribe to that observable, and update the 'board' by changing the text content of the buttons to match the &lt;code&gt;board&lt;/code&gt; property on the view model object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's how that looks in the stackblitz:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/typescript-bavrh2?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's a wrap!! Hope that this article helped spark some cool ideas. Be sure to reach out on &lt;a href="https://twitter.com/zackderose"&gt;twitter&lt;/a&gt; or check out &lt;a href="https://github.com/ZackDeRose/derxjs"&gt;the DeRxJS repo&lt;/a&gt; if you ever want to jam about state-management or good code architecture!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSdgrUbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idzdgnshhxtbabgvvrmw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSdgrUbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idzdgnshhxtbabgvvrmw.jpg" alt="Zack DeRose" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zack DeRose [or DeRxJS if you like] is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/community/experts/directory/profile/profile-zack-derose?hl=en"&gt;a GDE in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a recent nx conf/NgConf/RxJS Live/The Angular Show/ZDS speaker&lt;/li&gt;
&lt;li&gt;Creator of the &lt;a href="https://github.com/ZackDeRose/derxjs"&gt;@derxjs OSS packages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Senior Engineer and Engineering Manager at &lt;a href="https://nrwl.io/"&gt;Nrwl&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkout out my &lt;a href="https://zackderose.dev/videos"&gt;personal website&lt;/a&gt; for more of my dev content! And go bug &lt;a href="https://twitter.com/jeffbcross"&gt;Jeff Cross&lt;/a&gt;/&lt;a href="https://twitter.com/joerjohnson"&gt;Joe Johnson&lt;/a&gt; if you want to hire me to come help out your codebase or come help level up your team on Nx/NgRx/DeRxJS/RxJS/State Management! (I especially love building awesome stuff - and building up teams with bright developers that are eager to learn!)&lt;/p&gt;

</description>
      <category>rxjs</category>
      <category>react</category>
      <category>angular</category>
      <category>javascript</category>
    </item>
    <item>
      <title>When you type a URL in the browser!</title>
      <author>namitmalasi</author>
      <pubDate>Sun, 31 Oct 2021 07:57:26 +0000</pubDate>
      <link>https://dev.to/namitmalasi/when-you-type-a-url-in-the-browser-1cli</link>
      <guid>https://dev.to/namitmalasi/when-you-type-a-url-in-the-browser-1cli</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered what exactly happens when you type an URL in the browser and press enter? In this blog, we will see what happens in the background, step by step when we type any URL.&lt;br&gt;
If you want to have a better understanding of this article,then i would recommend you to have an overview of &lt;a href="https://dev.to/namitmalasi/url-and-dns-explained-4aef"&gt;URL and DNS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-you-enter-url-in-the-browser"&gt;
  &lt;/a&gt;
  1. You enter URL in the browser
&lt;/h3&gt;

&lt;p&gt;It basically means that you want to reach the server where the site is hosted. for example, if you are searching for facebook.com then, you are searching for the server where facebook .com is hosted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-browser-looks-for-the-ip-address-in-the-dnsdomain-name-server"&gt;
  &lt;/a&gt;
  2. The browser looks for the IP Address in the DNS(Domain name server)
&lt;/h3&gt;

&lt;p&gt;a) The browser maintains a cache of the DNS records for some fixed amount of time. So, it is the first place to run a DNS query.&lt;/p&gt;

&lt;p&gt;b) If the browser doesn't contain the cache then it requests to the Operating System as the OS also maintains a cache of the DNS records.&lt;/p&gt;

&lt;p&gt;c) If your computer doesn't have the cache, then it searches the routers as routers also have the cache of the DNS records.&lt;/p&gt;

&lt;p&gt;d) If all above steps fail, the browser would move on to the ISP. Your ISP maintains it's own DNS server which includes a cache of DNS records which the browser would check.&lt;/p&gt;

&lt;p&gt;If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts facebook.com.&lt;br&gt;
The purpose of a DNS query is to search multiple DNS servers on the internet until it finds the correct IP address for the website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-browser-initiates-a-tcp-connection-with-the-server"&gt;
  &lt;/a&gt;
  3. The Browser initiates a TCP connection with the server.
&lt;/h3&gt;

&lt;p&gt;When the browser receives the IP address, it will build a connection between the browser and the server using the internet protocol. The most common protocol used is TCP protocol. The connection is established using a &lt;a href="https://www.guru99.com/tcp-3-way-handshake.html"&gt;three-way handshake&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-browser-sends-an-http-request-to-the-server"&gt;
  &lt;/a&gt;
  4. The browser sends an HTTP request to the server.
&lt;/h3&gt;

&lt;p&gt;Once the TCP connection is established, it is time to start transferring data! The browser will send a GET request asking for facebook.com web page.&lt;/p&gt;

&lt;p&gt;Sample Get Request:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msrVKp6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGhbJSc5YTomg/article-inline_image-shrink_1500_2232/0/1559318572982%3Fe%3D1641427200%26v%3Dbeta%26t%3Db0enUMgQMYHkuGUQD9iSppidf6-qb5Qo8bBw-cP1yFI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msrVKp6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGhbJSc5YTomg/article-inline_image-shrink_1500_2232/0/1559318572982%3Fe%3D1641427200%26v%3Dbeta%26t%3Db0enUMgQMYHkuGUQD9iSppidf6-qb5Qo8bBw-cP1yFI" alt="Sample Get Request" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-the-server-handles-the-request-and-sends-back-a-response"&gt;
  &lt;/a&gt;
  5. The server handles the request and sends back a response.
&lt;/h3&gt;

&lt;p&gt;The server handles the HTTP request and sends a response. The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the page (Cache-Control), any cookies to set, privacy information, etc.&lt;/p&gt;

&lt;p&gt;Example HTTP server response:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3v0AA5CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGQs0X5LR4eoA/article-inline_image-shrink_1500_2232-alternative/0/1559318638805%3Fe%3D1641427200%26v%3Dbeta%26t%3Dn4GTWBBE_YQMp_MZHsNRejx2n-zEeCZtbC2K3ptyAcQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3v0AA5CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGQs0X5LR4eoA/article-inline_image-shrink_1500_2232-alternative/0/1559318638805%3Fe%3D1641427200%26v%3Dbeta%26t%3Dn4GTWBBE_YQMp_MZHsNRejx2n-zEeCZtbC2K3ptyAcQ" alt="Example HTTP server response:" width="880" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-the-browser-displays-the-html-content"&gt;
  &lt;/a&gt;
  6. The browser displays the HTML content.
&lt;/h3&gt;

&lt;p&gt;The browser displays the HTML content in phases. First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and sends out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files etc.&lt;br&gt;
At the end, you’ll see facebook.com appearing on your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. If you have any doubt or you think i missed something let me know in the comments.&lt;br&gt;
You can connect with me on:&lt;/p&gt;

&lt;p&gt;Twitter:&lt;a href="https://twitter.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>browser</category>
      <category>url</category>
    </item>
    <item>
      <title>My first month as a software engineer at daily.dev</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 31 Oct 2021 06:59:07 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/my-first-month-as-a-software-engineer-at-dailydev-2fep</link>
      <guid>https://dev.to/dailydevtips1/my-first-month-as-a-software-engineer-at-dailydev-2fep</guid>
      <description>&lt;p&gt;Can you believe it's already been a month since I joined the fantastic team over at &lt;a href="https://daily.dev/"&gt;Daily.dev&lt;/a&gt;!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWlYnjL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1443837375084441603/pu/img/MJ24oCsYLBu9dOyf.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcPzQF6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427162143049273347/n7sip_36_normal.jpg" alt="Chris Bongers 🤓💻⚡️ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Chris Bongers 🤓💻⚡️
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This video says it all ❤️&lt;br&gt;&lt;br&gt;Super stoked to get started at &lt;a href="https://twitter.com/dailydotdev"&gt;@dailydotdev&lt;/a&gt; as a new software engineer 🤩 &lt;a href="https://t.co/g2V9UOBzV7"&gt;twitter.com/dailydotdev/st…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:18 AM - 01 Oct 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            daily.dev
          &lt;/span&gt;
          @dailydotdev
        &lt;/div&gt;
        Show your love to our new team member ❤️
The one and only &lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;
! 🤩
We're stoked to have you onboard, good luck! https://t.co/mMVt04H9zL
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443837754568290340" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443837754568290340" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443837754568290340" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This article is an honest opinion about how I experienced this first month and what I've learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-quick-can-you-get-started"&gt;
  &lt;/a&gt;
  How quick can you get started
&lt;/h2&gt;

&lt;p&gt;If you know Daily.dev, you might quickly realize it's quite the system. So I initially thought it would take me quite a while to get familiar with the system and codebase.&lt;/p&gt;

&lt;p&gt;I started work on the 1st of September (A Friday), and I already launched my first ever feature in the wild on Monday! 🤯&lt;/p&gt;

&lt;p&gt;&lt;a href="https://changelog.daily.dev/settings-dropdown-menu-209417"&gt;Settings dropdown menu in Daily.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, what a rollercoaster on the first two days.&lt;/p&gt;

&lt;p&gt;This is not because I'm such a fantastic developer. It's because Ido and the team set up such an excellent initial system.&lt;br&gt;
Their docs are super-advanced, and the development flow works.&lt;/p&gt;

&lt;p&gt;This made it possible to get started so quickly and develop a full-on feature in no-time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#life-is-about-more-than-development"&gt;
  &lt;/a&gt;
  Life is about more than development
&lt;/h2&gt;

&lt;p&gt;On my first day, I also launched a Daily.dev blog post about &lt;a href="https://daily.dev/blog/adding-the-daily-devcard-to-your-github-profile"&gt;adding a DevCard to your GitHub profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And throughout working for them, you quickly learn these kinds of jobs are not just development jobs.&lt;br&gt;
They are also advocacy jobs, writing documentation jobs, and being a user of the product jobs.&lt;/p&gt;

&lt;p&gt;And there is only one thing I can say about that: I love it!&lt;br&gt;
I've never had so much joy in doing my job.&lt;/p&gt;

&lt;p&gt;I was an advocate for the product long before even joining them.&lt;/p&gt;

&lt;p&gt;When a product works, you want. To give your honest opinion about it and let other people know how great it is.&lt;/p&gt;

&lt;p&gt;And how amazing is it to be able to work for them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#humble-yourself"&gt;
  &lt;/a&gt;
  Humble yourself
&lt;/h2&gt;

&lt;p&gt;With the above said, I must say I'm very humbled to be part of the team. I feel super privileged to be chosen as one of the team members. &lt;/p&gt;

&lt;p&gt;It doesn't even feel like being an employee, but being part of an incredible group of people who do amazing things for developers!&lt;/p&gt;

&lt;p&gt;Another thing I've learned, and I keep learning in every new job, is to humble yourself in your skills.&lt;/p&gt;

&lt;p&gt;Working with Lee and Ido on new features shows you how crazy-skilled some people are. It's very cool to be part of code reviews and solutions designs with these two legends.&lt;/p&gt;

&lt;p&gt;It's teaching me so much, and it's empowering me to become an even greater developer.&lt;/p&gt;

&lt;p&gt;Thank you so much, Lee and Ido, for all the fantastic PR reviews and code talks&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-on-learning"&gt;
  &lt;/a&gt;
  Keep on learning
&lt;/h2&gt;

&lt;p&gt;That brings me to the next point, as it's one of my absolute favorite things about development.&lt;/p&gt;

&lt;p&gt;Keep on learning!&lt;br&gt;
You are never done learning if you enter the web development world. &lt;/p&gt;

&lt;p&gt;Frameworks change, evolve, deprecate, and new tech will rise. So try and keep up with the latest trends.&lt;/p&gt;

&lt;p&gt;It doesn't mean you should know all the trends inside out, but reading articles, trying it out might help.&lt;/p&gt;

&lt;p&gt;And hey, what better way to read articles than to use &lt;a href="https://daily.dev/"&gt;Daily.dev&lt;/a&gt; 😏&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'm super grateful to Nimrod, Ido, and Tsahi for hiring me. And super happy to be part of this fantastic team.&lt;/p&gt;

&lt;p&gt;Watch this space as a lot of amazing things are in the pipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>devlive</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Single Folder Git clone?</title>
      <author>Rushan S J</author>
      <pubDate>Sun, 31 Oct 2021 06:58:11 +0000</pubDate>
      <link>https://dev.to/rushannotofficial/single-folder-git-clone-21ld</link>
      <guid>https://dev.to/rushannotofficial/single-folder-git-clone-21ld</guid>
      <description>&lt;p&gt;How do you clone a single folder from a repo?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone --no-checkout &amp;lt;link&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd &amp;lt;cloned folder&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git sparse-checkout init --cone&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git sparse-checkout set &amp;lt;Folder Name&amp;gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voilà !&lt;/p&gt;

</description>
      <category>git</category>
      <category>inthirtyseconds</category>
    </item>
    <item>
      <title>Escape If-else hell in Javascript</title>
      <author>Melvin Liu</author>
      <pubDate>Sun, 31 Oct 2021 06:52:01 +0000</pubDate>
      <link>https://dev.to/melvnl/escape-if-else-hell-in-javascript-odn</link>
      <guid>https://dev.to/melvnl/escape-if-else-hell-in-javascript-odn</guid>
      <description>&lt;h3&gt;
  &lt;a href="#backstory-problem"&gt;
  &lt;/a&gt;
  Backstory / Problem
&lt;/h3&gt;

&lt;p&gt;Few months ago, there is a certain case where I need to calculate the percentage of input file in each form that user has filled (It was for a react native app that take user feedback by filling several form that represent different category such as personal information form, the user property information, etc.), the system flow look like this in a nutshell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b75SwdB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jaxjtqua09bslt0e1qq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b75SwdB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jaxjtqua09bslt0e1qq.jpg" alt="System flow in nutshell" width="868" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first approach was using if/else statement to handle the conditional logic. Although it might be a good idea for one or two conditions here and there, using multiple if-else statements chained together will make your code look very ugly, and less readable, and for my case there is probably more than 30 if-else statements in scattered in 5 different forms. Not gonna lie, it look very simple and straight to the point, yet painful to read.&lt;/p&gt;

&lt;p&gt;Also, when my peer reviewing the PR, he refers something humorous in reddit about &lt;a href="https://www.reddit.com/r/ProgrammerHumor/comments/53uhsw/the_code_behind_yandere_simulator/"&gt;the code behind yandere simulator&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfr8eX4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5m0oeqx4w8xcva3hf6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfr8eX4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5m0oeqx4w8xcva3hf6x.png" alt="Yandere Simulator code" width="828" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is a hell of if-else statements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;The solution will be vary, depends on your case / need. But most likely the thing that you need is &lt;strong&gt;object&lt;/strong&gt;. As for instance, let's say you need to return a string based on a key&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;available&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`The user is currently available`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;busy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`The user is currently busy`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;away&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`The user is away from keyboard`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;breaktime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`The user is having a good lunch`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just imagine if you have other 20+ status type ? Will you be comfortable reading or writing that much line of if-else statements?&lt;/p&gt;

&lt;p&gt;Instead we can use object or &lt;strong&gt;Map object&lt;/strong&gt; to make a sort of table consist of paired key and value to look up to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;statusList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;available&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The user is currently available&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;busy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The user is currently busy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;away&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The user is currently away from keyboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;breaktime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The user is currently having a good lunc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;statusList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//console.log(statusList[status])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be also applied in algorithm leetcode-type-of-question to save you up some time from writing repeated if-else statement over and over again.&lt;/p&gt;

&lt;p&gt;Thanks for reading!!!&lt;br&gt;
Have a good day, and remember that project you always think about won't code itself 🤪.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I ended up making a JAMstack app on Rails &amp; Vue</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Sun, 31 Oct 2021 06:30:16 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/how-i-ended-up-making-a-jamstack-app-on-rails-vue-1pb5</link>
      <guid>https://dev.to/jasonleowsg/how-i-ended-up-making-a-jamstack-app-on-rails-vue-1pb5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#amongst-tech-stacks-pairing-rails-as-backend-and-vue-as-frontend-with-a-jamstack-approach-has-got-to-be-one-of-the-weirder-combinations"&gt;
  &lt;/a&gt;
  &lt;em&gt;Amongst tech stacks, pairing Rails as backend and Vue as frontend with a JAMstack approach has got to be one of the weirder combinations...&lt;/em&gt;
&lt;/h2&gt;




&lt;p&gt;"I WON!" I felt like a lottery winner when I finally made an API-first app. One that works not just in local but in production, out in the real world. It’s a todo list app, with Ruby on Rails REST API as backend, and a Vue.js app as frontend to fetch data from the API.&lt;/p&gt;

&lt;p&gt;But amongst tech stacks, this has got to be one of the weirder combinations. Pairing Vue with Node, yeah more normal. Or any of the more recent and modern frameworks to handle the backend server. Rails is usually thought of as a monolith, not quite for JAMstack. So how did I come to this combo?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-rails-to-jamstack-to-vue"&gt;
  &lt;/a&gt;
  From Rails to JAMstack to Vue
&lt;/h3&gt;

&lt;p&gt;When I discovered JAMstack, I knew it in my gut (even though I’m a coding noob at that time) that I want to explore this tech stack for making web apps, and eventually my SaaS. But I didn’t know how to get there. I dabbled with Stackbit then and it was such a great way to slowly orientate myself to JAMstack, since you can literally spin up a JAMstack website in minutes using Stackbit. I made tiny customizations to the template, slowly begin to read a little JSX/React/Gatsby, how everything connected together. &lt;/p&gt;

&lt;p&gt;But how do I make an API, and which frontend framework should I use to fetch data from it? I knew a bit of Ruby on Rails by then (from my learning to code journey the year before), and I always felt that creating a backend on Rails felt within my reach. It wasn’t as scary as using other frameworks. And I’d done it with Rails before already. So I decided to go for Rails as my backend framework of choice.&lt;/p&gt;

&lt;p&gt;Then I (re-)started my journey of learning how to code, this time with Vue.js. AN hour of code everyday. Just start. I got inspired by what @dannypostmaa was doing with his product Headlime. He also didn’t know how to code eight months ago! When asked, he said he picked up Vue.js because it looks easiest to start. So I researched a bit, and discovered it suited my programming taste. It can be adopted progressively, and all that’s needed was to add a script to the html file, just like the good old jQuery days. That was familiar because all the HTML, CSS and JS were all used the same way I was used to in web development 101. It was not so scary unlike React, Next.js and Gatsby where everything was JS, even in a HTML file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-vue-and-the-first-taste-of-the-joy-of-coding"&gt;
  &lt;/a&gt;
  Learning Vue and the first taste of the joy of coding
&lt;/h3&gt;

&lt;p&gt;Learning Vue had been such a joy. I could never have known that I would enjoy coding this fun, all because of a framework that was suited to me. But more importantly, I also found incremental ways to learn coding and to stay motivated, by browsing mini Vue projects on Codepen, and learning from them.&lt;/p&gt;

&lt;p&gt;And now, after almost two months of feeling my way through coding on Vue and then Rails, I have a production-level kind of app (albeit a very basic one) using that Rails-Vue stack. It felt like I’d come so far from only knowing how to make informational websites using HTML, CSS and JS. Or to go even further back, from making sites using Wordpress. &lt;/p&gt;

&lt;p&gt;And the best part? &lt;/p&gt;

&lt;p&gt;That sense of excitement and possibility, from what was a tiny little spark, to what’s a blazing fire today. &lt;/p&gt;

&lt;p&gt;Now that is precious beyond measure.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>rails</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Developer Profile Packages - Why and Why not</title>
      <author>Rushan S J</author>
      <pubDate>Sun, 31 Oct 2021 06:14:49 +0000</pubDate>
      <link>https://dev.to/rushannotofficial/developer-profile-packages-why-and-why-not-49lj</link>
      <guid>https://dev.to/rushannotofficial/developer-profile-packages-why-and-why-not-49lj</guid>
      <description>&lt;p&gt;Maybe you've heard.... or maybe not ? &lt;/p&gt;

&lt;p&gt;I just realized a thing. &lt;br&gt;
You can make your profile as a package. And not just a package, a dev profile on pypi (pip) or npm. Virtually any package manager. &lt;/p&gt;

&lt;p&gt;By making a cli app in python (pip), .NET (nuget) or node (npm), and globalizing it, you can make your app spit out information about you when its called. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;Well, its just a cool and creative way to show people your dev profile. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-not"&gt;
  &lt;/a&gt;
  Why not
&lt;/h3&gt;

&lt;p&gt;Some times, It just isn't cool. If you make a package with the name as a username that's related to a actual package, you're in trouble. For example, there is this package called pyplot in python but to install it, you would run &lt;code&gt;pip install plot&lt;/code&gt; and not 'pip install pyplot'. Any new developer who wants to just download code and run would find it tough when the error says to install pyplot. Naturally, the developer would run &lt;code&gt;pip install pyplot&lt;/code&gt; and then, you someone made a dev profile package called pyplot (might be their username?), the new dev would get further confused when the code doesn't work. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workaround"&gt;
  &lt;/a&gt;
  Workaround
&lt;/h3&gt;

&lt;p&gt;You could perhaps name your package as &lt;strong&gt;profile-pyplot&lt;/strong&gt; instead of &lt;strong&gt;pyplot&lt;/strong&gt; which doesn't confuse people but some (bad?) developers would not listen to this and continue confusing people. &lt;/p&gt;

&lt;p&gt;"&lt;em&gt;With great power, comes great responsibility&lt;/em&gt;"&lt;br&gt;
                 - A nice developer.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>powerfuldevs</category>
    </item>
    <item>
      <title>🔥 🔥 🔥 Do you know all these means to avoid repeated rendering of React components?</title>
      <author>liu-jin-yi</author>
      <pubDate>Sun, 31 Oct 2021 06:11:21 +0000</pubDate>
      <link>https://dev.to/liujinyi/do-you-know-all-these-means-to-avoid-repeated-rendering-of-react-components-5mf</link>
      <guid>https://dev.to/liujinyi/do-you-know-all-these-means-to-avoid-repeated-rendering-of-react-components-5mf</guid>
      <description>&lt;p&gt;Use React has been three years, in these three years inside also deposited a lot of best practices on React code optimization, today first write a part out and share with you to share. We'll see if the article is popular and then we'll see if we share the later ones.&lt;/p&gt;

&lt;p&gt;For each best practice in this post I will provide two examples, one good and one bad, for comparison, and a preview of the &lt;code&gt;.gif&lt;/code&gt; image.&lt;/p&gt;

&lt;p&gt;The article in this piece focuses on optimizing these three situations：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parent component update causes child component to render&lt;/li&gt;
&lt;li&gt;Wrong way of writing Props leads to component rendering&lt;/li&gt;
&lt;li&gt;Context updates lead to component rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reading the article if you think it has helped you, please help to click a praise, your praise is the biggest motivation for my creation. &lt;strong&gt;comment kudos can get the source code!!!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parent-component-update-causes-child-component-to-render"&gt;
  &lt;/a&gt;
  Parent component update causes child component to render
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class-example"&gt;
  &lt;/a&gt;
  Class Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  ❎ Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQEaT9ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a35acb5e75a64b1ca1ee523e1501d063%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQEaT9ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a35acb5e75a64b1ca1ee523e1501d063%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="1.classBad.gif" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from "react";
class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  render() {
    const { count } = this.state;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent ComponentCount--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;Son /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Son extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Sub-component re-rendered!!!");
    return &amp;lt;div className="son"&amp;gt;Sub-components&amp;lt;/div&amp;gt;;
  }
}

export { Parent, Son };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, a change in the state of the parent component causes the child component to be re-rendered, which is a very normal way to write code, but seriously, it will still cause a waste of performance, after all, the child component is re-rendered! Next, let's see how to solve this problem!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: This example does not mean to eliminate the need to write such code, in fact, optimization is also dependent on the scenario!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, PureComponent } from "react";
class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  render() {
    const { count } = this.state;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent ComponentCount--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;Son /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Son extends PureComponent {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Sub-component re-rendered!!!");
    return &amp;lt;div className="son"&amp;gt;Sub-components&amp;lt;/div&amp;gt;;
  }
}

export default Parent;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we are mainly borrowing from &lt;strong&gt;PureComponent&lt;/strong&gt; to inherit this class, and React will automatically perform &lt;strong&gt;shouldComponentUpdate&lt;/strong&gt; for us to perform a shallow comparison optimization update of Props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Actually, in all seriousness, components in React are executed by React.createElement(Son), and the resulting component's Props reference is new every time, thus triggering a re-render!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-2"&gt;
  &lt;/a&gt;
  ✅ Correct example 2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from "react";
class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  render() {
    const { count } = this.state;
    const { children } = this.props;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 2&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
        {children}
      &amp;lt;/div&amp;gt;
    );
  }
}

export default Parent;

&amp;lt;Parent&amp;gt;
  &amp;lt;Son /&amp;gt;
&amp;lt;/Parent&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the optimization of this example, we separate stateful and stateless components and use &lt;strong&gt;children&lt;/strong&gt; to pass stateless components in. This will avoid pointless re-rendering! So why would writing it this way avoid re-rendering? Because using &lt;br&gt;
 &lt;strong&gt;children&lt;/strong&gt; directly in the stateful component will avoid using &lt;strong&gt;React.createElement(Son)&lt;/strong&gt; to render the child component in the stateful component! This can also be done to optimize!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-3"&gt;
  &lt;/a&gt;
  ✅ Correct example 3
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, memo } from "react";
import { Son } from "./Bad";

const MemoSon = memo(() =&amp;gt; &amp;lt;Son&amp;gt;&amp;lt;/Son&amp;gt;);

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  render() {
    const { count } = this.state;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 3&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;MemoSon /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default Parent;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the idea of optimization is similar to the one mentioned in example 1, we borrowed the &lt;strong&gt;memo&lt;/strong&gt; function, which is actually an optimization tool for the &lt;strong&gt;Function component&lt;/strong&gt; We are also cheeky here to force the use of a little! The idea of avoiding re-rendering is actually to compare references to Props as well. Decide whether to render or not !!!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-4"&gt;
  &lt;/a&gt;
  ✅ Correct example 4
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, useState, Fragment } from "react";
import { Son } from "./Bad";

const ClickCount = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;Fragment&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 4&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/Fragment&amp;gt;
  );
};

class Parent extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;ClickCount /&amp;gt;
        &amp;lt;Son /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default Parent;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, our optimization is mainly to remove the state component into one component, so that the state change is separated from the child component. It also avoids the re-rendering of the child components!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description: This optimization means seriously speaking or used quite little, depending on the situation use it!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooks-example"&gt;
  &lt;/a&gt;
  Hooks Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAPq0kbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0970a11548c54714a7df5718eac2cce6%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAPq0kbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0970a11548c54714a7df5718eac2cce6%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="1.HooksBad.gif" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
const Son = () =&amp;gt; {
  console.log("Sub-component re-rendered!!!");
  return &amp;lt;div className="son"&amp;gt;Sub-components&amp;lt;/div&amp;gt;;
};

const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;Son /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export { Son, Parent };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Hooks the above is also a very normal way of writing, but compared to Class components, &lt;strong&gt;Function components&lt;/strong&gt; have the feature that each time the component is re-rendered, the function is re-executed once. For a Class component, it will only execute &lt;strong&gt;new Class&lt;/strong&gt; once, which is actually quite scary when you think about it. For function components, each execution means a new context, a new variable, and a new scope. So we need to pay more attention to the performance optimization of function components.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";

const Parent = ({ children }) =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      {children}
    &amp;lt;/div&amp;gt;
  );
};

export default Parent;

&amp;lt;Parent&amp;gt;
  &amp;lt;Son /&amp;gt;
&amp;lt;/Parent

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we use &lt;strong&gt;children&lt;/strong&gt; to render child components directly, the principle of which has been explained in the Class component example above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description: Seriously speaking, combining the characteristics of function components this means of optimization is actually a cure for the symptoms, not the root cause!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-2"&gt;
  &lt;/a&gt;
  ✅ Correct example 2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useMemo } from "react";
import { Son } from "./Bad";
const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Correct example 2&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      {useMemo(
        () =&amp;gt; (
          &amp;lt;Son /&amp;gt;
        ),
        []
      )}
    &amp;lt;/div&amp;gt;
  );
};

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;n this example we use the optimization Hook &lt;strong&gt;useMemo&lt;/strong&gt; , we cache the Son component and only when the dependency changes we re-execute the function to complete the re-rendering, otherwise the timing is the same &lt;strong&gt;memoized&lt;/strong&gt;, which helps avoid high overhead calculations at each rendering. It also avoids having to redeclare variables, functions, scopes, etc. in the child component each time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: I think this optimization is absolutely brilliant because useMemo saves the component reference and does not re-execute the function component, thus avoiding the declaration of variables, functions, and scopes within the component. Thus, performance is optimized. Nice!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-3"&gt;
  &lt;/a&gt;
  ✅ Correct example 3
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, memo } from "react";
import { Son } from "./Bad";

const SonMemo = memo(Son);

const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Correct example 3&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;SonMemo /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we use the api &lt;strong&gt;memo&lt;/strong&gt;, mainly to compare whether the props reference has changed, thus avoiding the re-rendering of child components!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrong-way-of-writing-props-leads-to-component-rendering"&gt;
  &lt;/a&gt;
  Wrong way of writing Props leads to component rendering
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class-example"&gt;
  &lt;/a&gt;
  Class Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  ❎ Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WY9zY7lT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d31e1ec190a42a8bb3b81f5b4df9da9%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WY9zY7lT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d31e1ec190a42a8bb3b81f5b4df9da9%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="2.ClassBad.gif" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, PureComponent } from "react";

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  render() {
    const { count } = this.state;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;Son componentDetails={{ name: "Sub-components" }} anyMethod={() =&amp;gt; {}} /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Son extends PureComponent {
  constructor(props) {
    super(props);
  }
  render() {
    const { componentDetails, anyMethod } = this.props;
    console.log("Son -&amp;gt; render -&amp;gt; anyMethod", anyMethod);
    console.log("Son -&amp;gt; render -&amp;gt; componentDetails", componentDetails);
    return &amp;lt;div className="son"&amp;gt;{componentDetails?.name}&amp;lt;/div&amp;gt;;
  }
}

export { Parent, Son };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The passing of Props in this example is directly wrong way to write it. Because the rendering of the component is mainly rendered by listening to the change of Props and State, that in this example passed props each time is a new object,*&lt;em&gt;because the reference is different, each time the rendering of the parent component will lead to the rendering of the child component. *&lt;/em&gt; So the re-rendering of real numbers caused by this writing should not!&lt;/p&gt;

&lt;p&gt;So how should we write it?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, PureComponent } from "react";

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
      componentDetails: { name: "Sub-components" },
    };
  }
  handleClick = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };
  anyMethod = () =&amp;gt; {};
  render() {
    const { count, componentDetails } = this.state;
    return (
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
        &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;增加&amp;lt;/button&amp;gt;
        &amp;lt;Son componentDetails={componentDetails} anyMethod={this.anyMethod} /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Son extends PureComponent {
  constructor(props) {
    super(props);
  }
  render() {
    const { componentDetails, anyMethod } = this.props;
    console.log("Son -&amp;gt; render -&amp;gt; anyMethod", anyMethod);
    console.log("Son -&amp;gt; render -&amp;gt; componentDetails", componentDetails);
    return &amp;lt;div className="son"&amp;gt;{componentDetails?.name}&amp;lt;/div&amp;gt;;
  }
}

export default Parent;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main correct way to write this example is to pass the variable directly to the child component, because the reference to the variable is the same, so after checking by &lt;strong&gt;PureComponent&lt;/strong&gt;, the reference has not changed, thus preventing the child component from rendering!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Strictly speaking, this buggy example is a writing problem that causes re-rendering of subcomponents, so there's no talk of optimization, so let's forbid writing code like the buggy example!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooks-example"&gt;
  &lt;/a&gt;
  Hooks Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  ❎ Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sffnLVkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7bb39ef843e492ab780e9d29430e146%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sffnLVkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7bb39ef843e492ab780e9d29430e146%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="2.HooksBad.gif" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useEffect } from "react";
const Son = ({ componentDetails, anyMethod }) =&amp;gt; {
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; componentDetails", componentDetails);
  }, [componentDetails]);
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; anyMethod", anyMethod);
  }, [anyMethod]);
  return &amp;lt;div className="son"&amp;gt;{componentDetails.name}&amp;lt;/div&amp;gt;;
};

const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;Son componentDetails={{ name: "Sub-components" }} anyMethod={() =&amp;gt; {}} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export { Son, Parent };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this error example, it is still a problem with the way props are passed! Next see how to correct it!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useEffect } from "react";
const Son = ({ componentDetails, anyMethod }) =&amp;gt; {
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; componentDetails", componentDetails);
  }, [componentDetails]);
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; anyMethod", anyMethod);
  }, [anyMethod]);
  return &amp;lt;div className="son"&amp;gt;{componentDetails.name}&amp;lt;/div&amp;gt;;
};
// This is written for immutable values and can be passed like this
const componentDetails = { name: "Sub-components件" };
const anyMethod = () =&amp;gt; {};

const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };
  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;Son componentDetails={componentDetails} anyMethod={anyMethod} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Parent;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we simply refer the invariant value &lt;strong&gt;outside the component&lt;/strong&gt; to ensure that the reference is unique and will not change as the component is updated. But there is a limitation to this way of writing. It is that it is only suitable for invariant values. But it also effectively avoids duplicate rendering of components.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-2"&gt;
  &lt;/a&gt;
  ✅ Correct example 2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useEffect, useMemo, useCallback } from "react";
const Son = ({ componentDetails, anyMethod }) =&amp;gt; {
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; componentDetails", componentDetails);
  }, [componentDetails]);
  useEffect(() =&amp;gt; {
    console.log("Son -&amp;gt; anyMethod", anyMethod);
  }, [anyMethod]);
  return &amp;lt;div className="son"&amp;gt;{componentDetails.name}&amp;lt;/div&amp;gt;;
};

const Parent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  const handleClick = () =&amp;gt; {
    setCount((old) =&amp;gt; old + 1);
  };

  const anyMethod = useCallback(() =&amp;gt; {}, []);

  const [componentDetails] = useMemo(() =&amp;gt; {
    const componentDetails = { name: "Sub-components" };
    return [componentDetails];
  }, []);

  return (
    &amp;lt;div className="parent"&amp;gt;
      &amp;lt;h5&amp;gt;Correct example 2&amp;lt;/h5&amp;gt;
      &amp;lt;p&amp;gt;Parent Component Count--{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;Son componentDetails={componentDetails} anyMethod={anyMethod} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, two optimization hooks, &lt;strong&gt;useCallback&lt;/strong&gt; and  &lt;strong&gt;useMemo&lt;/strong&gt; , are used to determine whether to update a value change based on whether the dependency has changed to ensure that the value reference remains unchanged. This is suitable for most writes, but it should not be overused. Otherwise the code will be very confusing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context-updates-lead-to-component-rendering"&gt;
  &lt;/a&gt;
  Context updates lead to component rendering
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class-example"&gt;
  &lt;/a&gt;
  Class Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  ❎ Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f25wNTrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15006e4a38d4327ab68b10e2bd1b270%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f25wNTrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15006e4a38d4327ab68b10e2bd1b270%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="3.ClassBad.gif" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, createContext } from "react";

const contextValue = createContext(undefined);

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
      handleIncrement:this.handleIncrement
    };
  }
  handleIncrement = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };

  render() {


    return (
      &amp;lt;contextValue.Provider
        value={this.state}
      &amp;gt;
        &amp;lt;div className="parent"&amp;gt;
          &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
          &amp;lt;Son1 /&amp;gt;
          &amp;lt;contextValue.Consumer&amp;gt;
            {(conProps) =&amp;gt; &amp;lt;Son2 conProps={conProps} /&amp;gt;}
          &amp;lt;/contextValue.Consumer&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/contextValue.Provider&amp;gt;
    );
  }
}

class Son1 extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 1 is re-rendered!");
    return &amp;lt;div className="son"&amp;gt;Subassembly 1&amp;lt;/div&amp;gt;;
  }
}

class Son2 extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 2 is re-rendered!");

    const {
      conProps: { count, handleIncrement },
    } = this.props;
    return (
      &amp;lt;div className="son"&amp;gt;
        &amp;lt;p&amp;gt;Subassembly 2--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export { Parent };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, if you look carefully, when you click the button in child component 2,&lt;strong&gt;t is the state of the parent component that changes&lt;/strong&gt; so the problem is that the rendering of the parent component causes the child component to render as well. So how should we avoid duplicate rendering of the child component?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, createContext } from "react";

const contextValue = createContext(undefined);

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
      handleIncrement:this.handleIncrement
    };
  }
  handleIncrement = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };

  render() {
    const { children } = this.props;
    return (
      &amp;lt;contextValue.Provider
        value={this.state}
      &amp;gt;
        &amp;lt;div className="parent"&amp;gt;
          &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
          {children}
          &amp;lt;contextValue.Consumer&amp;gt;
            {(conProps) =&amp;gt; &amp;lt;Son2 conProps={conProps} /&amp;gt;}
          &amp;lt;/contextValue.Consumer&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/contextValue.Provider&amp;gt;
    );
  }
}

class Son1 extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 1 is re-rendered!");
    return &amp;lt;div className="son"&amp;gt;Subassembly 1&amp;lt;/div&amp;gt;;
  }
}

class Son2 extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 2 is re-rendered!");

    const {
      conProps: { count, handleIncrement },
    } = this.props;
    return (
      &amp;lt;div className="son"&amp;gt;
        &amp;lt;p&amp;gt;Subassembly 2--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export { Parent, Son1 };

&amp;lt;Parent&amp;gt;
 &amp;lt;Son1 /&amp;gt;
&amp;lt;/Parent&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we still borrow the mechanism of &lt;strong&gt;children&lt;/strong&gt; o render directly, so there is no &lt;strong&gt;Ract.createElement(Son)&lt;/strong&gt; api execution in the parent component, and therefore no duplicate rendering!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-2"&gt;
  &lt;/a&gt;
  ✅ Correct example 2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component, createContext, PureComponent } from "react";

const contextValue = createContext(undefined);

class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
      handleIncrement:this.handleIncrement
    };
  }
  handleIncrement = () =&amp;gt; {
    const { count } = this.state;
    this.setState({
      count: count + 1,
    });
  };

  render() {
    return (
      &amp;lt;contextValue.Provider
        value={this.state}
      &amp;gt;
        &amp;lt;div className="parent"&amp;gt;
          &amp;lt;h5&amp;gt;Correct example 2&amp;lt;/h5&amp;gt;
          &amp;lt;Son1 /&amp;gt;
          &amp;lt;contextValue.Consumer&amp;gt;
            {(conProps) =&amp;gt; &amp;lt;Son2 conProps={conProps} /&amp;gt;}
          &amp;lt;/contextValue.Consumer&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/contextValue.Provider&amp;gt;
    );
  }
}

class Son1 extends PureComponent {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 1 is re-rendered!");
    return &amp;lt;div className="son"&amp;gt;Subcomponent 1&amp;lt;/div&amp;gt;;
  }
}

class Son2 extends PureComponent {
  constructor(props) {
    super(props);
  }
  render() {
    console.log("Subcomponent 2 is re-rendered!");

    const {
      conProps: { count, handleIncrement },
    } = this.props;
    return (
      &amp;lt;div className="son"&amp;gt;
        &amp;lt;p&amp;gt;Subcomponent 2--{count}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we mainly borrow the class &lt;strong&gt;PureComponent&lt;/strong&gt; to help us perform the optimization automatically, so it is also possible to avoid duplicate rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Here you can also force the use of React.memo a bit.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooks-example"&gt;
  &lt;/a&gt;
  Hooks Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#error-example-preview"&gt;
  &lt;/a&gt;
  ❎ Error Example Preview
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNJHD8Qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69380ea1d85e49a9b624e35b4abebc45%257Etplv-k3u1fbpfcp-watermark.image%3F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNJHD8Qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69380ea1d85e49a9b624e35b4abebc45%257Etplv-k3u1fbpfcp-watermark.image%3F" alt="3.HooksBad.gif" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-example"&gt;
  &lt;/a&gt;
  ❎ Error Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createContext, useContext } from "react";
import { useCustomReducer } from "../useCustomizeContext";
const CustomizeContext = createContext(undefined);

const Son1 = () =&amp;gt; {
  console.log("Subcomponent 1 re-rendered!!!");
  return &amp;lt;div className="son"&amp;gt;子组件1&amp;lt;/div&amp;gt;;
};
const Son2 = () =&amp;gt; {
  const { count, handleIncrement } = useContext(CustomizeContext);
  console.log("Subcomponent 2 re-rendered!!!");
  return (
    &amp;lt;div className="son"&amp;gt;
      &amp;lt;p&amp;gt;Subcomponent 2-{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

const Parent = () =&amp;gt; {
  const value = useCustomReducer({ initValue: 1 });
  return (
    &amp;lt;CustomizeContext.Provider value={value}&amp;gt;
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Error Example&amp;lt;/h5&amp;gt;
        &amp;lt;Son2 /&amp;gt;
        &amp;lt;Son1 /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/CustomizeContext.Provider&amp;gt;
  );
};

export { Son1, Parent, Son2 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the api's  &lt;strong&gt;createContext，useContext，useReducer&lt;/strong&gt; are used to implement a small Redux, and clicking on the button in child component 2 changes the count value, which in turn causes the value to change, so the parent component renders, causing the child component to follow suit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-1"&gt;
  &lt;/a&gt;
  ✅ Correct example 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import {
  CustomizeProvider,
  useCustomizeContext,
  useCustomReducer,
} from "../useCustomizeContext";

const Son1 = () =&amp;gt; {
  console.log("Subcomponent 1 re-rendered!!!");
  return &amp;lt;div className="son"&amp;gt;Subcomponent 1&amp;lt;/div&amp;gt;;
};
const Son2 = () =&amp;gt; {
  const { count, handleIncrement } = useCustomizeContext();
  console.log("Subcomponent 2 re-rendered!!!");
  return (
    &amp;lt;div className="son"&amp;gt;
      &amp;lt;p&amp;gt;Subcomponent 2-{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

const Parent = ({ children }) =&amp;gt; {
  const value = useCustomReducer({ initValue: 1 });
  return (
    &amp;lt;CustomizeProvider value={value}&amp;gt;
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 1&amp;lt;/h5&amp;gt;
        &amp;lt;Son2 /&amp;gt;
        {children}
      &amp;lt;/div&amp;gt;
    &amp;lt;/CustomizeProvider&amp;gt;
  );
};
export { Son1 };
export default Parent;


&amp;lt;Parent&amp;gt;
 &amp;lt;Son1 /&amp;gt;
&amp;lt;/Parent&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we are still using &lt;strong&gt;children&lt;/strong&gt; to solve the duplicate rendering problem. This still works!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description: In fact, you must use the right optimization in your project!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-2"&gt;
  &lt;/a&gt;
  ✅ Correct example 2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { memo } from "react";
import {
  CustomizeProvider,
  useCustomizeContext,
  useCustomReducer,
} from "../useCustomizeContext";

const Son1 = () =&amp;gt; {
  console.log("Subcomponent 1 re-rendered!!!");
  return &amp;lt;div className="son"&amp;gt;Subcomponent 1&amp;lt;/div&amp;gt;;
};
const Son2 = () =&amp;gt; {
  const { count, handleIncrement } = useCustomizeContext();
  console.log("Subcomponent 2 re-rendered!!!");
  return (
    &amp;lt;div className="son"&amp;gt;
      &amp;lt;p&amp;gt;Subcomponent 2-{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
// use memo
const MemoSon1 = memo(Son1);
const Parent = () =&amp;gt; {
  const value = useCustomReducer({ initValue: 1 });
  return (
    &amp;lt;CustomizeProvider value={value}&amp;gt;
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct example 2&amp;lt;/h5&amp;gt;
        &amp;lt;Son2 /&amp;gt;
        &amp;lt;MemoSon1 /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/CustomizeProvider&amp;gt;
  );
};

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The api &lt;strong&gt;memo&lt;/strong&gt; is also used in this example, and is still the same, comparing whether the reference to the props has changed or not, and deciding whether to update it or not.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#correct-example-3"&gt;
  &lt;/a&gt;
  ✅ Correct Example 3
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useMemo } from "react";
import {
  CustomizeProvider,
  useCustomizeContext,
  useCustomReducer,
} from "../useCustomizeContext";

const Son1 = () =&amp;gt; {
  console.log("Subcomponent 1 re-rendered!!!");
  return &amp;lt;div className="son"&amp;gt;Subcomponent 1&amp;lt;/div&amp;gt;;
};
const Son2 = () =&amp;gt; {
  const { count, handleIncrement } = useCustomizeContext();
  console.log("Subcomponent 2 re-rendered!!!");
  return (
    &amp;lt;div className="son"&amp;gt;
      &amp;lt;p&amp;gt;Subcomponent 2-{count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={handleIncrement}&amp;gt;Add&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

const Parent = () =&amp;gt; {
  const value = useCustomReducer({ initValue: 1 });
  return (
    &amp;lt;CustomizeProvider value={value}&amp;gt;
      &amp;lt;div className="parent"&amp;gt;
        &amp;lt;h5&amp;gt;Correct Example 3&amp;lt;/h5&amp;gt;
        &amp;lt;Son2 /&amp;gt;
        {useMemo(
          () =&amp;gt; (
            &amp;lt;Son1 /&amp;gt;
          ),
          []
        )}
      &amp;lt;/div&amp;gt;
    &amp;lt;/CustomizeProvider&amp;gt;
  );
};

export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-code-best-practices-lzf1o"&gt;✋🏻 Click to view online demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we still use the &lt;strong&gt;useMemo&lt;/strong&gt; optimization hook to optimize the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  🤙🤙🤙 Summary
&lt;/h2&gt;

&lt;p&gt;The means of optimization in three cases are described in the article of this piece, mainly the use of.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🤙useMemo&lt;/li&gt;
&lt;li&gt;🤙memo&lt;/li&gt;
&lt;li&gt;🤙children&lt;/li&gt;
&lt;li&gt;🤙useCallback&lt;/li&gt;
&lt;li&gt;🤙PureComponent&lt;/li&gt;
&lt;li&gt;🤙Extracting status components&lt;/li&gt;
&lt;li&gt;🤙Extraction of constant values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These optimizations can be used in different situations, so you must use the appropriate optimizations if you are in the process of using them in conjunction with your code. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you know other means of optimization can also be left in the comments section Oh!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tips to become a great programmer</title>
      <author>John</author>
      <pubDate>Sun, 31 Oct 2021 05:45:25 +0000</pubDate>
      <link>https://dev.to/jdk/tips-to-become-a-great-programmer-1362</link>
      <guid>https://dev.to/jdk/tips-to-become-a-great-programmer-1362</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Integrate Appwrite Storage API with React</title>
      <author>HarisaranG</author>
      <pubDate>Sun, 31 Oct 2021 05:21:14 +0000</pubDate>
      <link>https://dev.to/harisarang/integrate-appwrite-storage-api-with-react-5dg3</link>
      <guid>https://dev.to/harisarang/integrate-appwrite-storage-api-with-react-5dg3</guid>
      <description>&lt;p&gt;In this blog tutorial we going to create a react web app using Appwrite storage API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initialize-appwrite-and-create-a-react-project"&gt;
  &lt;/a&gt;
  Step 1: ▶️ Initialize Appwrite and Create a React project
&lt;/h2&gt;

&lt;p&gt;I have used Digital ocean to host my Appwrite instance.(Feel free to explore other hosting options)&lt;/p&gt;

&lt;p&gt;First create a droplet in digital ocean (min. 2GB RAM / 2vCPU),&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MX4KR555--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ma98obtapo5j2anz170.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MX4KR555--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ma98obtapo5j2anz170.png" alt="Digital Ocean" width="880" height="504"&gt;&lt;/a&gt;&lt;br&gt;
To install appwrite execute the following command (make sure you have docker installed in the instance),&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use you IP address of your VM in browser to access your Appwrite console or you can add DNS "A record" pointing to your Droplet IP address and access the console using that domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoI4ZZza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvawbo48tupjrhl8ctvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoI4ZZza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvawbo48tupjrhl8ctvz.png" alt="Appwrite Console" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create your React project using &lt;code&gt;create-react-app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app appwrite-storage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then install &lt;code&gt;appwrite&lt;/code&gt; js package to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-connect-you-react-app-with-appwrite"&gt;
  &lt;/a&gt;
  Step 2: 🔗 Connect you React App with Appwrite
&lt;/h2&gt;

&lt;p&gt;Create a new project in Appwrite console named &lt;code&gt;madewithappwrite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, register a new web platform in Appwrite. For development purpose add &lt;code&gt;localhost&lt;/code&gt; and for production register a new web platform with the domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUBqeAXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dracp19ua8o20sl3mq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUBqeAXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1dracp19ua8o20sl3mq.png" alt="Platform 1" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prGPXN5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiynu0j47otyo3qe69n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prGPXN5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiynu0j47otyo3qe69n8.png" alt="Platform 2" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, I am going to use anonymous users instead of OAuth and email and password.&lt;/p&gt;

&lt;p&gt;Now, use the api wrapper below 👇 to perform various operations with appwrite server. (You can also extend by adding various functions to it)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a new file under lib/appwrite.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;appwrite&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite-endpoint-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;project-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;getFileView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find you &lt;code&gt;project-id&lt;/code&gt; in appwrite console under settings in your project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5APcF_vU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ea38aaq2ucu5cmrwch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5APcF_vU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ea38aaq2ucu5cmrwch.png" alt="Project ID" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay 🥳 ! You have successfully connected your React App with Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-user-session-management"&gt;
  &lt;/a&gt;
  Step 3: 👩‍💻 User Session management
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Warning: You cannot create a file in appwrite storage without signing in with a user&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this project, I am going to use anonymous users (Feel free to explore other options too !)&lt;br&gt;
You can explore other options &lt;a href="https://appwrite.io/docs/server/users"&gt;here&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;Now, create a anonymous user session when they land on your web app i.e. create new user under &lt;code&gt;src/App.js&lt;/code&gt; using &lt;code&gt;useEffect&lt;/code&gt; react hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./lib/appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-create-files-in-appwrite-storage"&gt;
  &lt;/a&gt;
  Step 4: 📩 Create files in Appwrite Storage
&lt;/h2&gt;

&lt;p&gt;We are going to use the helper function which we have created (&lt;code&gt;api.createFile()&lt;/code&gt;) to upload file to Appwrite storage.&lt;/p&gt;

&lt;p&gt;First we need a create a React form component with &lt;code&gt;input&lt;/code&gt; field with type of &lt;code&gt;"file"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./lib/appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;respsone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;respsone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No file is uploaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;min-h-screen bg-primary flex justify-center items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;required&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-view-file-from-appwrite-storage"&gt;
  &lt;/a&gt;
  Step 5: 🔍 View file from Appwrite Storage
&lt;/h2&gt;

&lt;p&gt;We are going to use the helper function which we have created (&lt;code&gt;api.getFileView()&lt;/code&gt;) to get file URL from Appwrite storage.&lt;/p&gt;

&lt;p&gt;To get the file URL you need a "File ID". There are two ways you can File ID. &lt;/p&gt;

&lt;p&gt;First one is you can get the ID from the response of the from &lt;code&gt;api.createFile()&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;respsone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;respsone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Logs the file ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other is way is to get the File ID from the Appwrite console,&lt;/p&gt;

&lt;p&gt;Navigate, to the file you want to get id for,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---foi9D1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogssqfkoc3o4f1i4ry4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---foi9D1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogssqfkoc3o4f1i4ry4o.png" alt="ID" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And get the file ID,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPpZvtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38uzjauz3quooian4hj8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPpZvtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38uzjauz3quooian4hj8.png" alt="ID" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After getting the file ID, using the helper function mentioned above you get the file URL,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use this url to view the file you have stored in Appwrite Storage.&lt;/p&gt;

&lt;p&gt;That's a wrap !✊. Now, you have successfully 🏆 built an React app with Appwrite Storage 🎉.&lt;/p&gt;

</description>
      <category>react</category>
      <category>appwrite</category>
      <category>storage</category>
    </item>
    <item>
      <title>Webpack Unpacked: A Pragmatic Guide</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 31 Oct 2021 05:06:23 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/webpack-unpacked-a-pragmatic-guide-486f</link>
      <guid>https://dev.to/ruppysuppy/webpack-unpacked-a-pragmatic-guide-486f</guid>
      <description>&lt;p&gt;Managing assets can be a cumbersome task. Luckily we now have bundlers to streamline this task. In this article, we would be taking a look at &lt;strong&gt;Webpack&lt;/strong&gt;, the most popular bundler available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; can seem extremely daunting at first glance, but this article will ensure that you have enough knowledge to configure &lt;strong&gt;Webpack&lt;/strong&gt; on your own. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQTwi94a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rta3rvsvaej9huvrm09s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQTwi94a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rta3rvsvaej9huvrm09s.gif" alt="Let's Do It" width="356" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-exactly-is-webpack"&gt;
  &lt;/a&gt;
  What Exactly is Webpack?
&lt;/h1&gt;

&lt;p&gt;Let's see how Google defines it: &lt;em&gt;"webpack is an open-source JavaScript module bundler. It is made primarily for JavaScript, but it can transform front-end assets such as HTML, CSS, and images if the corresponding loaders are included. webpack takes modules with dependencies and generates static assets representing those modules."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You might have come across a few new terms like &lt;em&gt;"loaders"&lt;/em&gt; in the definition. Let's take a look at a few terms before proceeding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;loaders&lt;/strong&gt;: &lt;strong&gt;Loaders&lt;/strong&gt; are &lt;em&gt;third-party extensions&lt;/em&gt; that help &lt;strong&gt;webpack&lt;/strong&gt; deal with various file extensions. For example, there are loaders for &lt;strong&gt;CSS&lt;/strong&gt;, for images, etc.&lt;/p&gt;

&lt;p&gt;The goal of a loader is to transform files (other than &lt;strong&gt;JavaScript&lt;/strong&gt;) in modules. Once the file becomes a module, webpack can use it as a dependency in your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;plugins&lt;/strong&gt;: &lt;strong&gt;Plugins&lt;/strong&gt; are &lt;em&gt;third-party extensions&lt;/em&gt; that can alter how &lt;strong&gt;webpack&lt;/strong&gt; works. For example there are &lt;strong&gt;plugins&lt;/strong&gt; for extracting &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, for working with micro-frontends.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#first-webpack-app"&gt;
  &lt;/a&gt;
  First Webpack App
&lt;/h1&gt;

&lt;p&gt;Let's start small. Initialize a new node project by creating a new folder and using the command &lt;code&gt;npm init -y&lt;/code&gt;. Install &lt;strong&gt;webpack&lt;/strong&gt; related dependencies using &lt;code&gt;npm i -D webpack webpack-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NOTE: &lt;strong&gt;Webpack&lt;/strong&gt; dependencies should always be Dev Dependencies.&lt;/p&gt;

&lt;p&gt;Initialize the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- public/index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Demo&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../dist/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.html&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Webpack!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, add the following script in your &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --config webpack.config.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you can use &lt;code&gt;npm run build&lt;/code&gt; to generate &lt;code&gt;dist/bundle.js&lt;/code&gt; and run &lt;code&gt;public/index.html&lt;/code&gt; to utilize the generated bundle.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-loaders"&gt;
  &lt;/a&gt;
  Adding Loaders
&lt;/h1&gt;

&lt;p&gt;You might be wondering &lt;em&gt;"So much work for THIS?"&lt;/em&gt; Fret not my friend, here's where &lt;strong&gt;Webpack's&lt;/strong&gt; magic starts.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;file-loader&lt;/code&gt; to our project using &lt;code&gt;npm i -D file-loader&lt;/code&gt; and update &lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// defining the rules for additional modules, other than .js files&lt;/span&gt;
        &lt;span class="c1"&gt;// you can very well use rules for .js files too, eg: using babel-loader&lt;/span&gt;
        &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// files the rule applies to (using RegEx is a good practice)&lt;/span&gt;
                &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;png|jpe&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;g|svg&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;// loaders &amp;amp; configuration&lt;/span&gt;
                &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="c1"&gt;// if you skip the options, the default options will be used&lt;/span&gt;
                        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name].[ext]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="na"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you can import image files into your projects.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// NOTE: you can use ES Modules import/export statements&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;natureImg&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./assets/nature.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;natureImg&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the &lt;code&gt;build&lt;/code&gt; script to generate the files. Open &lt;code&gt;public/index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bj3l2Q7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/978yp5l525dq0hhu7ulu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bj3l2Q7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/978yp5l525dq0hhu7ulu.PNG" alt="Page" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-plugins"&gt;
  &lt;/a&gt;
  Adding Plugins
&lt;/h1&gt;

&lt;p&gt;Let's now optimize how we handle &lt;strong&gt;HTML&lt;/strong&gt; so that &lt;strong&gt;webpack&lt;/strong&gt; automatically adds the script files to the page. Add the &lt;code&gt;html-webpack-plugin&lt;/code&gt; using the command &lt;code&gt;npm i -D html-webpack-plugin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remove the &lt;code&gt;script&lt;/code&gt; tag from &lt;code&gt;public/index.html&lt;/code&gt;. &lt;strong&gt;Webpack&lt;/strong&gt; will inject the scripts. It will also generate an additional &lt;code&gt;index.html&lt;/code&gt; file in the &lt;em&gt;dist&lt;/em&gt; folder, which you can use.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#using-dev-server"&gt;
  &lt;/a&gt;
  Using Dev Server
&lt;/h1&gt;

&lt;p&gt;Repeatedly reloading the page quite often turns out a big pain. To solve this very problem, we have &lt;code&gt;webpack-dev-server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install the dependency using &lt;code&gt;npm i -D webpack-dev-server&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="na"&gt;devServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// default: 8000&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;That's all you need to know about &lt;strong&gt;webpack&lt;/strong&gt;... it's just a module bundler, which allows you to configure it as per your requirement using &lt;strong&gt;loaders&lt;/strong&gt; and &lt;strong&gt;plugins&lt;/strong&gt;. You can look at some other available plugins in the following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/create-react-app-from-scratch-like-a-pro-de0"&gt;Create React App from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/micro-frontends-the-next-gen-way-to-build-web-apps-16da"&gt;Micro-Frontends: The Next Gen Way to build Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you have overcome your fear of using &lt;strong&gt;webpack&lt;/strong&gt; and this article helps you in your development journey!&lt;/p&gt;

&lt;p&gt;I am currently working on a project using a completely custom configured &lt;strong&gt;Webpack&lt;/strong&gt;, feel free to check it out:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/Crypto-Crowdfund"&gt;
        Crypto-Crowdfund
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🤑💰 Platform backed by Ethereum Blockchain to bring your creative projects to life
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Looking for ways to boost your productivity? Check out my &lt;strong&gt;Bi-Weekly Productivity Blogs&lt;/strong&gt; on &lt;a href="https://tapajyotibose.medium.com/"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt;? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webpack</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>babel</category>
    </item>
    <item>
      <title>Why You Should Write Pure Functions</title>
      <author>Brett Martin</author>
      <pubDate>Sun, 31 Oct 2021 05:01:05 +0000</pubDate>
      <link>https://dev.to/bamartindev/why-you-should-write-pure-functions-4ea2</link>
      <guid>https://dev.to/bamartindev/why-you-should-write-pure-functions-4ea2</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted @ &lt;a href="https://www.catstache.io/blog/js-pure-functions"&gt;CatStache.io&lt;/a&gt; - Check it out for more posts and project updates!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pure functions are a cornerstone of functional programming, but even if you are writing code that isn't purely functional its a great idea to prefer them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-pure-function"&gt;
  &lt;/a&gt;
  Defining Pure Function
&lt;/h2&gt;

&lt;p&gt;The two properties of a pure function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given the same set of arguments, the function will always produce the same result.&lt;/li&gt;
&lt;li&gt;Invoking the function produces no side effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A side effect can be thought of as any observable effect &lt;em&gt;besides&lt;/em&gt; returning a value to the invoker.&lt;/p&gt;

&lt;p&gt;A simple example of a pure function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For any input into this function, it will always produce the same value.  That is to say, invoking the function like &lt;code&gt;add(5,2)&lt;/code&gt; will &lt;strong&gt;always&lt;/strong&gt; produce 7.  It is also possible to see that nothing else, such as modifying state or interacting with other systems, so this function is pure!&lt;/p&gt;

&lt;p&gt;Technically, if we were to rewrite the previous function to call &lt;code&gt;console.log&lt;/code&gt; to output some info, that would make the function &lt;em&gt;impure&lt;/em&gt; because it is having an observable effect that is not just returning the function.  &lt;/p&gt;

&lt;p&gt;Another example of an impure function would be &lt;code&gt;Math.random()&lt;/code&gt; as it modifies the internal state of the Math object (breaking point 2) and you get different results each time the function is invoked (breaking point 1).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-effects-cause-complexity"&gt;
  &lt;/a&gt;
  Side Effects Cause Complexity
&lt;/h2&gt;

&lt;p&gt;Functions that are pure are easier to reason about - you can create a mapping of inputs to outputs, and that mapping will always hold true.  It doesn't depend on external state or effects to produce a result!&lt;/p&gt;

&lt;p&gt;Lets look at a function that might be written to determine the number of days since the UNIX epoch (January 1, 1970 00:00:00 UTC) to now (don't use this, and prefer a library if you are working with time, this is just an example 😉)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysSinceUnixEpoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;epochDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1/1/1970&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;currentDate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;epochDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will produce the value &lt;code&gt;18930&lt;/code&gt;, and every time I run it it will produce that value.  Well, it will produce that every time I run that &lt;strong&gt;today&lt;/strong&gt;.  Depending on when you read this, if you were to copy this function and invoke it, I have no idea what value it will produce!  This makes it difficult to reason about, because I need to know the external state, namely the current day, to try and figure out what value should be produced.  This function would also be incredibly difficult to test, and any test that might be written would be very brittle.  We can see that the issue is that we are making use of an impure value produced by &lt;code&gt;new Date()&lt;/code&gt; to determine the current date.  We could refactor this to make a function that is pure and testable by doing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysSinceUnixEpoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;epochDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1/1/1970&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;currentDate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;epochDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A simple swap to require a date string for computing the difference makes this a pure function since we will &lt;strong&gt;always&lt;/strong&gt; get the same result for a given input, and we are not make use of any effectful code.  Now, if I were to call this with &lt;code&gt;daysSinceUnixEpoch('10/31/2021')&lt;/code&gt; I get the same result, but now if you were to call it you should also get &lt;code&gt;18930&lt;/code&gt;, neat!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-effects-are-unavoidable"&gt;
  &lt;/a&gt;
  Side Effects Are Unavoidable
&lt;/h2&gt;

&lt;p&gt;Now, while pure functions are awesome, we can't really build an app that does anything of note without side effects.  If the user can't see output, or interact with the app in any way, they probably won't have much reason to stick around!  Therefore, the idea of preferring pure functions isn't to get rid of side effect, but to reduce the surface area where effectful code is executed and extract pure functionality into reusable and testable functions. &lt;/p&gt;

&lt;p&gt;Let's look at another example of some code that might be written server side with the Express web framework.  A common thing that is done server side is ensuring that the data sent in a request contains all the expected values.  Imagine writing a handler for a POST request to an endpoint &lt;code&gt;/api/comment&lt;/code&gt; that expected a request body with keys for &lt;code&gt;postId&lt;/code&gt;, &lt;code&gt;userId&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; to indicate who posted the comment, what post the comment was on, and what the comment was. Lets take a first stab at this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expected keys for postId, userId, and comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would work, we see that we pull the keys out of the request body, then we check that they all exists.  If they do we do something to create the comment, otherwise we send back a 400 with the message saying we expected certain keys.  If we want to test that our logic for rejecting the request based on the payload is correct we would need to do a lot of mocking and faking a request with different payloads.  Thats a huge pain!  What if we instead extracted the pure code from this effectful function?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expectedReqBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expectedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;expectedReqBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expectedKeys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Body of request needs to contain the following keys: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expectedKeys&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have extracted out the pure functionality of checking if values exist.  If we are given an array of expected keys and the request body we can ensure they all exist.  Now we can test the functionality by testing the pure function &lt;code&gt;expectedReqBody&lt;/code&gt; and feel safe when we are using this function as part of validation.  As a bonus, if you wanted to validate the body on other requests you have an already tested solution!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extra-bonuses"&gt;
  &lt;/a&gt;
  Extra Bonuses
&lt;/h2&gt;

&lt;p&gt;I have previously written briefly about &lt;a href="https://www.catstache.io/blog/js-hof-composition"&gt;function composition&lt;/a&gt; and this works really well with pure functions!  If you compose a handful of pure functions it is really easy to reason about what will happen throughout the 'data pipeline'.  If you have effectful code sprinkled in, it can cause a massive headache!&lt;/p&gt;

&lt;p&gt;Pure functions can also be memoized!  If you have functionality that takes a lot of CPU power to compute, but is pure, you can cache the results!  I can write a bit about memoization but some libraries to use include ramda's &lt;a href="https://ramdajs.com/docs/#memoizeWith"&gt;memoizeWith&lt;/a&gt; and lodash's &lt;a href="https://lodash.com/docs/4.17.15#memoize"&gt;memoize&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for taking the time to read about pure functions! I will leave you with a tldr bullet point list on the topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure functions always map the same input to output, and contain no side effects.
&lt;/li&gt;
&lt;li&gt;We can reason about and test pure functions easily, and pure functions are easier to reuse and compose with.&lt;/li&gt;
&lt;li&gt;Side effect add extra complexity, but they are unavoidable if we want to write meaningful apps.
&lt;/li&gt;
&lt;li&gt;Writing pure functions allows us to reduce the surface area of effectful code.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
