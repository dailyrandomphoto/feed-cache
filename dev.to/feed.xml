<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clean code &amp; programming principles – The ultimate beginner’s guide</title>
      <author>Spyros Argalias</author>
      <pubDate>Fri, 14 May 2021 11:18:14 +0000</pubDate>
      <link>https://dev.to/sargalias/clean-code-programming-principles-the-ultimate-beginner-s-guide-5605</link>
      <guid>https://dev.to/sargalias/clean-code-programming-principles-the-ultimate-beginner-s-guide-5605</guid>
      <description>&lt;p&gt;This article is the beginner's introductory guide to programming principles.&lt;/p&gt;

&lt;p&gt;First we're going to examine what good code is. The qualities of good code. That's because those qualities come before programming principles. Programming principles are just guidelines to help us apply those qualities to code.&lt;/p&gt;

&lt;p&gt;Afterwards, we'll examine the most important programming principles, one-by-one, at an introductory level.&lt;/p&gt;

&lt;p&gt;Hopefully, this article will feel less like "have small functions" and more like "these are the qualities you want in code, for reasons 1, 2 and 3. So as you can see, small functions help you achieve those in ways X, Y and Z".&lt;/p&gt;

&lt;p&gt;I believe that this kind of understanding is more beneficial than just knowing some arbitrary rules. They're especially helpful if you've been stuck on how to apply certain programming principles in the past. Knowing how they help and what they're trying to achieve should help you apply them even in unfamiliar situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#target-audience"&gt;
  &lt;/a&gt;
  Target audience
&lt;/h2&gt;

&lt;p&gt;I believe that this article is suitable for all audiences.&lt;/p&gt;

&lt;p&gt;If you're a beginner developer, some of the things mentioned in this article may be too abstract. But, some others should be useful immediately. Nevertheless, this article will give you an understanding that will help you very much in the future, even if you don't understand all of it now.&lt;/p&gt;

&lt;p&gt;If you're an intermediate-level developer, you'll probably gain the most benefit. You are probably writing medium to large programs. You've got the hang of the basics. Now, you need to learn how to write code that scales (in size). This is what programming principles help you with.&lt;/p&gt;

&lt;p&gt;If you're an advanced-level developer, you'll probably (hopefully) know most of these things already. However, you might enjoy this article nonetheless.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#qualities-of-good-code"&gt;
  &lt;/a&gt;
  Qualities of good code
&lt;/h2&gt;

&lt;p&gt;What is good code?&lt;/p&gt;

&lt;p&gt;To answer that question, first we need to examine the requirements of code. Then, the qualities that we (people) need for something to be easy to work with. After that, the qualities of good code become obvious.&lt;/p&gt;

&lt;p&gt;If you want to skip the discussion, here are the conclusions:&lt;/p&gt;

&lt;p&gt;The requirements of code are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should work as intended, without bugs&lt;/li&gt;
&lt;li&gt;it should be built as quickly and efficiently as possible (without sacrificing quality) (just like all products)&lt;/li&gt;
&lt;li&gt;it should be easy and fast to work with and modify (for the next time you need to work with it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of our limitations are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can't remember too much at any one time. This means that we won't remember that modifying X will break Y and Z.&lt;/li&gt;
&lt;li&gt;we find complicated things disproportionally more difficult than simple things&lt;/li&gt;
&lt;li&gt;making multiple similar changes is very error-prone for us&lt;/li&gt;
&lt;li&gt;we have bad days where we are bored, can't focus and don't pay too much attention&lt;/li&gt;
&lt;li&gt;we always make mistakes, no matter what. This means that we need tests (manual or automated) and other error-catching things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From those two, after a bit of reasoning, we conclude that code should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be simple (because we're bad with complicated things)&lt;/li&gt;
&lt;li&gt;be immediately understandable (so we can understand it quickly and make changes faster. Also so we don't misunderstand it and create bugs, especially if we're not really focusing that day)&lt;/li&gt;
&lt;li&gt;be organised (so we can understand the project structure easier and find the files we need to modify faster)&lt;/li&gt;
&lt;li&gt;be independent (so we can make reasonable changes to X without breaking 1,000 other things in the project)&lt;/li&gt;
&lt;li&gt;have minimal duplication (because we're bad with repetitive changes. They're also slower)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details and explanations are below. If you're not interested, please skip to the next section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements-of-code"&gt;
  &lt;/a&gt;
  Requirements of code
&lt;/h3&gt;

&lt;p&gt;Software is a product. Businesses hire programmers to build software products. It's not abstract art (usually). It's something built for a specific purpose.&lt;/p&gt;

&lt;p&gt;From a business perspective, products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have to be fit for purpose and work as intended&lt;/li&gt;
&lt;li&gt;should be as cheap and efficient as possible to create (without sacrificing quality)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same applies to software.&lt;/p&gt;

&lt;p&gt;But software has some unique aspects. It needs constant modification. That's because software is often never "finished". Companies may be requesting new features for decades after initial release. Also, there may be bugs that need fixing at any time. Finally, during development, programmers constantly modify the code.&lt;/p&gt;

&lt;p&gt;Therefore, for the software product to be as efficient and cheap as possible to create and maintain, the code needs to be easy and fast to work with and modify.&lt;/p&gt;

&lt;p&gt;Not to mention that being easy to work with means less bugs due to changes.&lt;/p&gt;

&lt;p&gt;So, the requirements of code are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should work as intended, without bugs&lt;/li&gt;
&lt;li&gt;it should be built as quickly and efficiently as possible (without sacrificing quality)&lt;/li&gt;
&lt;li&gt;it should be easy and fast to work with and modify (for the next time you need to work with it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For even more detail on this, please see the post &lt;a href="https://programmingduck.com/articles/requirements-of-software"&gt;requirements of software&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-limitations-and-bad-code"&gt;
  &lt;/a&gt;
  Human limitations and bad code
&lt;/h3&gt;

&lt;p&gt;Code can be difficult to work with because of our limitations.&lt;/p&gt;

&lt;p&gt;Here are some of our limitations and what we can do to counter them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#memory"&gt;
  &lt;/a&gt;
  Memory
&lt;/h4&gt;

&lt;p&gt;We can't remember too much at any one time.  The quote about short term memory and &lt;a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two"&gt;the magical number 7 plus or minus 2&lt;/a&gt; comes to mind.&lt;/p&gt;

&lt;p&gt;To counter that, we need code to be sufficiently independent (decoupled) and without hidden dependencies. That way, when we're modifying code, we won't accidentally break it due to forgetting to also update a dependency that we didn't remember existed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-like-things-simple"&gt;
  &lt;/a&gt;
  We like things simple
&lt;/h4&gt;

&lt;p&gt;Complicated things are disproportionally more difficult for us. This is partly because we need to keep in mind many things about them at once. Therefore, we should make code simple and easy to work with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-are-impatient"&gt;
  &lt;/a&gt;
  We are impatient
&lt;/h4&gt;

&lt;p&gt;We get impatient, skim things often, have bad days and get bored.&lt;/p&gt;

&lt;p&gt;To counter that, we should make code simple, easy to understand and easy to work with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-are-bad-with-repetitive-work"&gt;
  &lt;/a&gt;
  We are bad with repetitive work
&lt;/h4&gt;

&lt;p&gt;Repetition is error-prone for us, particularly if every repetition is slightly different.&lt;/p&gt;

&lt;p&gt;Repetitive work means more chances to make an error. Also, probably due to impatience and lack of focus, we're more likely to rush this type of work. We don't usually provide the necessary care and attention to every single change. To help, we should minimise repetitive work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-make-mistakes"&gt;
  &lt;/a&gt;
  We make mistakes
&lt;/h4&gt;

&lt;p&gt;We make mistakes often and in all areas of life. This includes programming, mathematics, engineering, art, design and everything else.&lt;/p&gt;

&lt;p&gt;Therefore, we always need to double check our work. As a result, we use practices like code reviews and automated testing. We also use tools to statically analyse our code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-we-should-work-on-software"&gt;
  &lt;/a&gt;
  How we should work on software
&lt;/h3&gt;

&lt;p&gt;We should work on software deliberately. We should know and understand as much as possible about the code we're currently working on. This means that we'll be as certain as possible that we're doing the right thing and that we won't break anything.&lt;/p&gt;

&lt;p&gt;In comparison, if we're just trying things at random, we're not certain that they'll work. Most of the things we try won't work, except the last one (at which point we'll stop). Also, we'll only know whether they work or not because of our tests. We'll probably manually test everything we try.&lt;/p&gt;

&lt;p&gt;This is problematic, because, since we're not really sure what we're doing, we might have broken other things that we won't think to test.&lt;/p&gt;

&lt;p&gt;So, to minimize the chance of error, it's important to understand as much as possible about what we're doing.&lt;/p&gt;

&lt;p&gt;The best way to do that is to make code simple, easy to understand and easy to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-code-should-be"&gt;
  &lt;/a&gt;
  How code should be
&lt;/h3&gt;

&lt;p&gt;Everything we've examined so far points to a certain way for how code should be. Code should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be simple (because we're bad with complicated things)&lt;/li&gt;
&lt;li&gt;be immediately understandable (so we can understand it quickly and make changes faster. Also so we don't misunderstand it and create bugs, especially if we're not really focusing that day)&lt;/li&gt;
&lt;li&gt;be organised (so we can understand the project structure easier and find the files we need to modify faster)&lt;/li&gt;
&lt;li&gt;be independent (so we can make reasonable changes to X without breaking 1,000 other things in the project)&lt;/li&gt;
&lt;li&gt;have minimal duplication (because we're bad with repetitive changes. They're also slower)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let's examine the programming principles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gs4KTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqny8u6qkxvto5jtl4dt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gs4KTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqny8u6qkxvto5jtl4dt.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-pragmatic-the-most-important-principle"&gt;
  &lt;/a&gt;
  Be pragmatic - The most important principle
&lt;/h2&gt;

&lt;p&gt;Not just in programming, but pretty much everything in life, being pragmatic is essential.&lt;/p&gt;

&lt;p&gt;It means to remember the true goal of what you're trying to accomplish, maximise that, and not get side-tracked.&lt;/p&gt;

&lt;p&gt;In programming, your aims are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have code that works correctly&lt;/li&gt;
&lt;li&gt;make your changes as quickly and efficiently as possible&lt;/li&gt;
&lt;li&gt;make the code easy and fast to work with for the next time someone works on it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The programming principles are guidelines to help you do that. But, your aims come first. If a programming principle will be detrimental to your aims, you shouldn't apply it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-apply-principles-to-the-extreme"&gt;
  &lt;/a&gt;
  Don't apply principles to the extreme
&lt;/h3&gt;

&lt;p&gt;For example, having code that's short is commonly considered a good thing. It has many benefits which we'll examine later. But you should never make your code shorter if it will make it more difficult to understand and work with.&lt;/p&gt;

&lt;p&gt;Don't play "code golf", where you use complicated syntax and mathematical tricks to make the code as short as possible. That makes the code more complicated and more difficult to understand.&lt;/p&gt;

&lt;p&gt;In other words, have code that's short (the guideline), but only if it makes the code simpler and easier to understand (your aims).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#balance-time-spent-refactoring"&gt;
  &lt;/a&gt;
  Balance time spent refactoring
&lt;/h3&gt;

&lt;p&gt;Additionally, you need to make your changes in a reasonable timeframe. You've got to balance how much time you spend refactoring code against how much benefit it will provide.&lt;/p&gt;

&lt;p&gt;For example, if you have some code that's very difficult to understand, you absolutely should refactor it. It might take a few hours, but it's probably worth it. It will make your project easier to work with in the long-term. You'll reclaim the time you spent refactoring through higher efficiency in the future.&lt;/p&gt;

&lt;p&gt;But, if you have some code that's almost perfect, don't spend 3 days refactoring it only to make it slightly better. You would have spent 3 days for almost no benefit. Instead, you could have used that time in better ways. You could have written a new feature, or refactored a more suitable part of the codebase.&lt;/p&gt;

&lt;p&gt;The point here is: You need to prioritise based on value. That usually means keeping code pretty clean and refactoring when needed. But it probably doesn't mean spending an unreasonable amount of time refactoring for almost no benefit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yagni"&gt;
  &lt;/a&gt;
  YAGNI
&lt;/h3&gt;

&lt;p&gt;Another important thing to talk about is YAGNI. It stands for "you ain't gonna need it".&lt;/p&gt;

&lt;p&gt;It warns you against coding things in anticipation of features you might need in the future. For a simple contrived example, you may create a function &lt;code&gt;foo&lt;/code&gt;, which has the parameter &lt;code&gt;bar&lt;/code&gt;. But you might think "feature X might be added in the future, which will need a parameter &lt;code&gt;baz&lt;/code&gt;, so let me add it to the function now".&lt;/p&gt;

&lt;p&gt;In general, you want to be wary of doing that. Firstly, that feature is probably never going to be needed. Secondly, you increase the complexity of the code today, making it harder to work with. Thirdly, if that feature is needed in the future, you might code it differently to how you anticipate today.&lt;/p&gt;

&lt;p&gt;Instead, code the simplest solution for what you need today. Then, make the changes needed for that feature when it's needed (if ever).&lt;/p&gt;

&lt;p&gt;This is optimal, because you won't needlessly waste your time or make the codebase more complicated. Even if you did predict a feature correctly, it will be much faster to code it when you need it compared to all of the time you would have spent coding everything prematurely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-recommendations"&gt;
  &lt;/a&gt;
  Personal recommendations
&lt;/h3&gt;

&lt;p&gt;Create a fairly simple solution for what you need today, that is simple to understand and work with.&lt;/p&gt;

&lt;p&gt;Write clean code and maintain your code so it's fairly clean. Refactoring may take time upfront, but it pays off in the long-term because the code is easier to work with.&lt;/p&gt;

&lt;p&gt;Only apply programming principles if they'll make your code better and easier to work with.&lt;/p&gt;

&lt;p&gt;If you're newer to programming principles, consider applying them more heavily than necessary when you practice. You'll get practice applying them and you'll get a feel for when you've taken them too far.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLGAvDyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4p6okeex1phlw5xotpv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLGAvDyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4p6okeex1phlw5xotpv.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kiss-keep-it-simple-stupid-and-the-principle-of-least-astonishment"&gt;
  &lt;/a&gt;
  KISS (keep it simple stupid) and the principle of least astonishment
&lt;/h2&gt;

&lt;p&gt;KISS (keep it simple stupid) is another principle that's universal to most things in life. It means that your code should be simple and easy to understand.&lt;/p&gt;

&lt;p&gt;The principle of least astonishment is also important. It means that things should work exactly as you expect them to, they shouldn't be surprising. It's a cousin to KISS.&lt;/p&gt;

&lt;p&gt;If you don't keep things simple and easy to understand, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everything takes longer to understand&lt;/li&gt;
&lt;li&gt;sometimes you might not understand how things work, even after spending a lot of time on them&lt;/li&gt;
&lt;li&gt;you might &lt;strong&gt;misunderstand&lt;/strong&gt; how things work. Then, if you modify the software, you could easily create bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-kiss-and-the-principle-of-least-astonishment"&gt;
  &lt;/a&gt;
  How to apply KISS and the principle of least astonishment
&lt;/h3&gt;

&lt;p&gt;Here are some guidelines for making your code simple and easy to understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-to-writing-dumb-code-avoid-writing-clever-code"&gt;
  &lt;/a&gt;
  Default to writing dumb code, avoid writing clever code
&lt;/h4&gt;

&lt;p&gt;Dumb code is simple code. Clever code is probably not simple code.&lt;/p&gt;

&lt;p&gt;Really clever code is not simple, it's difficult to understand and it's tricky. People will &lt;strong&gt;misunderstand&lt;/strong&gt; it and create bugs as a result.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keep-code-short-and-concise"&gt;
  &lt;/a&gt;
  Keep code short and concise
&lt;/h4&gt;

&lt;p&gt;Shorter code is more likely to be simple.&lt;/p&gt;

&lt;p&gt;Short code means that units, such as functions and classes, do less things. That means they're simpler and easier to understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-good-names"&gt;
  &lt;/a&gt;
  Use good names
&lt;/h4&gt;

&lt;p&gt;If you have a well-named function, you can understand what it does from the name, without reading the function body. The same applies to all code. This makes your work faster and easier.&lt;/p&gt;

&lt;p&gt;The name also provides meaning, which helps you decipher code faster.&lt;/p&gt;

&lt;p&gt;For example, if you see the code &lt;code&gt;2 * Math.PI * radius&lt;/code&gt;, you may not understand what it's doing and why, even after reading it. You may look at it and be like "what? PI, radius?? What is this???".&lt;/p&gt;

&lt;p&gt;But, if you see &lt;code&gt;const circleArea = 2 * Math.PI * radius&lt;/code&gt;, straight away you're like "oh I get it. It's calculating the area of the circle, of courseeeee. No wonder PI and radius are there...".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#always-consider-the-programmer-reading-the-code-for-the-first-time"&gt;
  &lt;/a&gt;
  Always consider the programmer reading the code for the first time
&lt;/h4&gt;

&lt;p&gt;This is the person you're trying to optimise the code for. The colleague who has never worked on this code before, or even yourself, 6 months from now, when you've forgotten what this code does and how it works.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Any code of your own that you haven't looked at for six or more months might as well have been written by someone else." - Eagleson's law&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider that when you're writing the code, you know what the code needs to do and you just code it. But the person reading the code for the first time, has to parse what the code is doing &lt;strong&gt;and also has to understand why it's doing it&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-immutability-never-reassigning-the-values-of-variables"&gt;
  &lt;/a&gt;
  Consider immutability (never reassigning the values of variables)
&lt;/h4&gt;

&lt;p&gt;Immutability provides a guarantee that a value will never change.&lt;/p&gt;

&lt;p&gt;This makes the code simpler to understand, because you don't have to trace through the code for the history of the variable, just in case it happened to change anywhere in your codebase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#follow-existing-conventions"&gt;
  &lt;/a&gt;
  Follow existing conventions
&lt;/h4&gt;

&lt;p&gt;Code that follows existing conventions is unsurprising. Code that breaks conventions can be very unexpected. Someone who skims the code may not realise that it doesn't follow the convention, so they may misunderstand how it works.&lt;/p&gt;

&lt;p&gt;Try to follow conventions which already exist in your codebase. Conventions which exist in your language or framework are less essential to follow, but also recommended.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOL-0G1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vskcn0a3p3r2pu2361.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOL-0G1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vskcn0a3p3r2pu2361.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-of-concerns"&gt;
  &lt;/a&gt;
  Separation of concerns
&lt;/h2&gt;

&lt;p&gt;Separation of concerns means to organise functionality well in code.&lt;/p&gt;

&lt;p&gt;Code should be separated into sensible units (modules, classes, functions and methods). Someone looking at the code should immediately understand what the particular unit does.&lt;/p&gt;

&lt;p&gt;For example, if you have a &lt;code&gt;Circle&lt;/code&gt; class, an &lt;code&gt;Enumerable&lt;/code&gt; interface or a &lt;code&gt;Math&lt;/code&gt; object or module, you tend to have a pretty good idea of what each does and contains. You would expect to find &lt;code&gt;Math.PI&lt;/code&gt;, or &lt;code&gt;Math.pow(base, exponent)&lt;/code&gt; (these methods exist in the JavaScript &lt;code&gt;Math&lt;/code&gt; object). However, you wouldn't expect to find &lt;code&gt;Math.printHelloToTheScreen()&lt;/code&gt; or &lt;code&gt;Math.produceAccountingReport()&lt;/code&gt;. The methods in the latter example would be unexpected, which would break the principles of KISS and least astonishment.&lt;/p&gt;

&lt;p&gt;In addition, units should be small and only do one thing (also known as the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single responsibility principle&lt;/a&gt;). Another way of thinking about this is that different concerns should be separated at a granular level.&lt;/p&gt;

&lt;p&gt;For example, you shouldn't have a god-class called &lt;code&gt;Shape&lt;/code&gt; that has functionality for all possible shapes within it. Instead, you should have a small class for each shape.&lt;/p&gt;

&lt;p&gt;This code is the bad version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Bad god class&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// length2 is an optional parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the good version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Good small and simple classes&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another example.&lt;/p&gt;

&lt;p&gt;This code is the bad version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function does too many things&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLessThan1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to submit error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is the better version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functionality is separated well over multiple functions&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendError&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isGreaterThan5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLessThan1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to submit error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea that you should have small, specific units applies to all code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-small-units"&gt;
  &lt;/a&gt;
  Advantages of small units
&lt;/h3&gt;

&lt;p&gt;Smaller, more specific units, have multiple advantages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#better-code-organisation"&gt;
  &lt;/a&gt;
  Better code organisation
&lt;/h4&gt;

&lt;p&gt;Technically, with the god-class &lt;code&gt;Shape&lt;/code&gt;, you know where to go to find the circle functionality, so the organisation is not too bad.&lt;/p&gt;

&lt;p&gt;But, with the more specific units of &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt;, you can find functionality faster and easier.&lt;/p&gt;

&lt;p&gt;It's less obvious with the &lt;code&gt;sendData&lt;/code&gt; example, but the same thing applies. Say you want to find the functionality for validating the data. You can find that instantly in the second version. There is a function clearly named &lt;code&gt;isValid&lt;/code&gt;. &lt;code&gt;sendData&lt;/code&gt; also calls &lt;code&gt;isValid(formattedData)&lt;/code&gt;, which labels where the data is validated.&lt;/p&gt;

&lt;p&gt;However, in the first version of &lt;code&gt;sendData&lt;/code&gt;, you'll have to spend more time reading through the details of &lt;code&gt;sendData&lt;/code&gt; to find it. Also, the part where the data is validated isn't labelled. You'll have to both parse the code and &lt;strong&gt;recognise&lt;/strong&gt; the line which does the data validation. If you're not familiar with the code, this may be difficult.&lt;/p&gt;

&lt;p&gt;In summary, smaller units provide better organisation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simplicity-and-understandability"&gt;
  &lt;/a&gt;
  Simplicity and understandability
&lt;/h4&gt;

&lt;p&gt;If you examine the &lt;code&gt;Shape&lt;/code&gt; example, you'll see that the code there is quite long and complex. It's difficult to follow. In comparison, the classes &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt; are super simple. As a result, they're much easier to understand.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example, understanding what &lt;code&gt;sendData&lt;/code&gt; does is easier in the second version. It almost reads like English:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Format data&lt;/li&gt;
&lt;li&gt;If the data is valid: fetch&lt;/li&gt;
&lt;li&gt;Else: sendError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You also don't have to read the implementation of the separate functions, such as &lt;code&gt;isValid&lt;/code&gt;, because their names tell you what they do.&lt;/p&gt;

&lt;p&gt;All of the smaller functions are simpler too. They are clearly labelled (which helps you understand them even if the implementation is complicated) and they only do a small thing.&lt;/p&gt;

&lt;p&gt;In general, smaller units have less code and do less things. This applies the KISS principle, which makes code easier to read and understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-changes"&gt;
  &lt;/a&gt;
  Easier changes
&lt;/h4&gt;

&lt;p&gt;Code that does fewer things is easier to change than code which does many things.&lt;/p&gt;

&lt;p&gt;At the very least, the code you need to change isn't surrounded by other code that you need to carefully avoid changing. Also, you need to understand the code before changing it, which is easier with small units.&lt;/p&gt;

&lt;p&gt;Consider the god-class &lt;code&gt;Shape&lt;/code&gt; example. The code for the functionality of all the shapes is entangled together. If you try to change the code for the circle, you could accidentally modify something else and create a bug. Also, the functionality for circle exists in multiple different methods inside &lt;code&gt;Shape&lt;/code&gt;. You'll have to jump around and change multiple different things.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt; are very easy to change. Unrelated code is nowhere to be found. You can't break any other shape by accident.&lt;/p&gt;

&lt;p&gt;The same applies to the &lt;code&gt;sendData&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;In the second version, if you want to change the data validation, you change the code in &lt;code&gt;isValid&lt;/code&gt; and you're finished. You can't break any unrelated code, because there isn't any.&lt;/p&gt;

&lt;p&gt;However, in the first version, since a lot of unrelated code is placed together, you might accidentally change something else by accident.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-to-test"&gt;
  &lt;/a&gt;
  Easier to test
&lt;/h4&gt;

&lt;p&gt;In general, if a unit does less stuff, it's easier to test than if it does more stuff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-to-reuse"&gt;
  &lt;/a&gt;
  Easier to reuse
&lt;/h4&gt;

&lt;p&gt;If a unit does one specific thing, it's immediately reusable any time you need that one thing. However, if a unit does 10 things, or even 2 things, it's generally not reusable unless you need all of those things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-separation-of-concerns"&gt;
  &lt;/a&gt;
  How to apply separation of concerns
&lt;/h3&gt;

&lt;p&gt;To apply separation of concerns, you extract functionality.&lt;/p&gt;

&lt;p&gt;For example, with &lt;code&gt;Shape&lt;/code&gt;, if you extract all of the relevant code for the circle functionality into its own class, you end up with &lt;code&gt;Circle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a more step-by-step process.&lt;/p&gt;

&lt;p&gt;Here is &lt;code&gt;Shape&lt;/code&gt; again for reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// length2 is an optional parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's define a class called &lt;code&gt;Circle&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;code&gt;Shape&lt;/code&gt;, let's extract only the constructor functionality that's relevant to circle. That's the part inside the &lt;code&gt;constructor&lt;/code&gt; method and inside the &lt;code&gt;if (this.type === 'circle')&lt;/code&gt; conditional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repeat for the &lt;code&gt;getArea&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on for all the other methods which might be in &lt;code&gt;Shape&lt;/code&gt;. Afterwards, repeat for the other shapes.&lt;/p&gt;

&lt;p&gt;The same process applies for &lt;code&gt;sendData&lt;/code&gt;, although in this case we're not completely replacing &lt;code&gt;sendData&lt;/code&gt; like we did with &lt;code&gt;Shape&lt;/code&gt; and &lt;code&gt;Circle&lt;/code&gt;. Instead, we're extracting functionality into separate functions and calling them inside &lt;code&gt;sendData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the code to format data was moved into the &lt;code&gt;formatData&lt;/code&gt; function and the code to check if the data is valid was moved into the &lt;code&gt;isValid&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-apply-separation-of-concerns"&gt;
  &lt;/a&gt;
  When to apply separation of concerns
&lt;/h3&gt;

&lt;p&gt;Now that you understand the "why" and "how" of separation of concerns, when should you apply it?&lt;/p&gt;

&lt;p&gt;Generally, you want "small, specific units that only do one thing".&lt;/p&gt;

&lt;p&gt;However, the definition of "one thing" varies, it depends on context.&lt;/p&gt;

&lt;p&gt;If you were to show the god-class &lt;code&gt;Shape&lt;/code&gt; to someone, they might rightfully say that it only does one thing. "It handles shapes".&lt;/p&gt;

&lt;p&gt;Someone else may say that &lt;code&gt;Shape&lt;/code&gt; does a lot of things. "It handles circles, rectangles and so on. That's multiple things".&lt;/p&gt;

&lt;p&gt;Both claims are correct. It all depends on what level of abstraction you consider.&lt;/p&gt;

&lt;p&gt;In general, it's good to consider small levels of abstraction. You want units that do small, specific things.&lt;/p&gt;

&lt;p&gt;That's because, as already examined, smaller units have more benefits than larger units.&lt;/p&gt;

&lt;p&gt;So, here are some guidelines.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-code-feels-large-and-complicated"&gt;
  &lt;/a&gt;
  When code feels large and complicated
&lt;/h4&gt;

&lt;p&gt;If you feel that some code is difficult to understand, or too large, try extracting some units out of it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#can-you-keep-extracting"&gt;
  &lt;/a&gt;
  Can you keep extracting?
&lt;/h4&gt;

&lt;p&gt;Robert Martin has a technique that he calls &lt;a href="https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop"&gt;"extract till you drop"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In short, you keep extracting functionality until there is no reasonable way of extracting any more.&lt;/p&gt;

&lt;p&gt;As you write code, consider: "Can I extract some more functionality from this unit, into a separate unit?"&lt;/p&gt;

&lt;p&gt;If it's possible to extract further, then consider doing so.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop"&gt;Robert Martin's blog post on extract till you drop&lt;/a&gt; for more information on this technique.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reasons-to-change"&gt;
  &lt;/a&gt;
  Reasons to change
&lt;/h4&gt;

&lt;p&gt;Consider, what reasons does this code have to change?&lt;/p&gt;

&lt;p&gt;Code which is placed together, which has different reasons to change (different parts may change at different times), is bad, as we've already examined.&lt;/p&gt;

&lt;p&gt;The solution is to move code with different reasons to change into separate units.&lt;/p&gt;

&lt;p&gt;Consider the &lt;code&gt;Shape&lt;/code&gt; example. &lt;code&gt;Shape&lt;/code&gt; will change when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;anything needs changing for circles&lt;/li&gt;
&lt;li&gt;anything needs changing for rectangles&lt;/li&gt;
&lt;li&gt;anything needs changing on any other shape&lt;/li&gt;
&lt;li&gt;a new shape needs to be added or removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example, &lt;code&gt;sendData&lt;/code&gt; could change if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the formatting of the data needs to change&lt;/li&gt;
&lt;li&gt;the validation of the data needs to change&lt;/li&gt;
&lt;li&gt;the data in the error request needs to change&lt;/li&gt;
&lt;li&gt;the endpoint (URL) of the error request needs to change&lt;/li&gt;
&lt;li&gt;the data in the &lt;code&gt;sendData&lt;/code&gt; request needs to change&lt;/li&gt;
&lt;li&gt;the endpoint (URL) of the &lt;code&gt;sendData&lt;/code&gt; request needs to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these reasons are indicators that you may want to separate that functionality.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#who-which-role-in-the-company-may-want-to-change-this-code"&gt;
  &lt;/a&gt;
  Who (which role in the company) may want to change this code
&lt;/h4&gt;

&lt;p&gt;This is another flavour of "what reasons does this code have to change".&lt;/p&gt;

&lt;p&gt;It asks who (which role in the company) may want to change the code.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;developers may want to change something about the URL endpoints of the requests or the bodies of the requests&lt;/li&gt;
&lt;li&gt;accountants may want to change the data validation in the future&lt;/li&gt;
&lt;li&gt;a product owner who uses the submitted data to generate reports could want to format the data differently in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these questions (what could change and who may want changes) try to point out different concerns in the code, that may benefit from separation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-pragmatic"&gt;
  &lt;/a&gt;
  Be pragmatic
&lt;/h4&gt;

&lt;p&gt;The final point is to be pragmatic.&lt;/p&gt;

&lt;p&gt;You don't have to separate everything to the extreme. The goal is to have code that's easy to work with.&lt;/p&gt;

&lt;p&gt;For example, you don't need to enforce every function in your codebase to be at maximum 4 lines long (which is possible to do). You would end up with hundreds of miniscule functions. They may be harder to work with than more reasonably sized functions, that are an average of 4 to 8 lines long.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dycw6v5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muj76yszugvl5223efu1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dycw6v5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muj76yszugvl5223efu1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#principle-of-least-knowledge"&gt;
  &lt;/a&gt;
  Principle of least knowledge
&lt;/h2&gt;

&lt;p&gt;In software, it's beneficial to minimise knowledge. This includes the knowledge that code has of other code (dependencies), as well as the knowledge you need to work with particular areas of code.&lt;/p&gt;

&lt;p&gt;In other words, you want software to be decoupled and easy to work with. Making changes shouldn't break seemingly unrelated code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-in-code"&gt;
  &lt;/a&gt;
  Knowledge in code
&lt;/h3&gt;

&lt;p&gt;In programming, knowledge means dependencies.&lt;/p&gt;

&lt;p&gt;If some code (call it module A), &lt;strong&gt;knows&lt;/strong&gt; about some other code (call it module B), it means that it &lt;strong&gt;uses&lt;/strong&gt; that other code. It depends on it.&lt;/p&gt;

&lt;p&gt;If some code is being used elsewhere, that means that there are &lt;strong&gt;limitations on how you can change it&lt;/strong&gt;, otherwise you would break the code that uses it.&lt;/p&gt;

&lt;p&gt;Without discipline and control, this is where you can get into a chain reaction of propagating changes. The situation where you just wanted to make a small change and had to modify every file in the system to do so. You changed A, which was used by B and C so you had to change both of those to accommodate your changes to A. In turn B and C were used in other places which you also had to change. And so on.&lt;/p&gt;

&lt;p&gt;Every change is error-prone, multiple cascading changes are much worse.&lt;/p&gt;

&lt;p&gt;Additionally, you need to actually remember or know that these dependencies exist. This is quite difficult to do, especially when dependencies propagate far and wide throughout your code. But if you don't remember, you won't make all of the required changes and you'll immediately introduce bugs.&lt;/p&gt;

&lt;p&gt;That's why you need to minimise knowledge in your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifications-to-code"&gt;
  &lt;/a&gt;
  Modifications to code
&lt;/h3&gt;

&lt;p&gt;Here are the possible changes you can make to already-existing code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-change-to-contract"&gt;
  &lt;/a&gt;
  No change to contract
&lt;/h4&gt;

&lt;p&gt;The only change you can make with no propagating changes, is a change that doesn't affect anything else in the codebase.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Original&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// After change&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two functions are equivalent from a caller's point of view. They have the same contract. If you change from one version to the other, nothing else in the codebase needs to change, because nothing could possibly be affected by this change.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-the-contract-of-a-private-function"&gt;
  &lt;/a&gt;
  Changing the contract of a "private" function
&lt;/h4&gt;

&lt;p&gt;The next best case is when you change the contract of a private function. Something that's not public to the majority of the codebase. In this case, if you change the contract, the code that is affected is very small.&lt;/p&gt;

&lt;p&gt;For example, consider this Circle class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Circle.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_privateCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_privateCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, consider that we want to delete &lt;code&gt;_privateCalculation&lt;/code&gt;. Here is the code after the change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Circle.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we deleted &lt;code&gt;_privateCalculation&lt;/code&gt;, &lt;code&gt;getArea&lt;/code&gt; was affected. As a result, we also had to modify &lt;code&gt;getArea&lt;/code&gt; to accommodate the changes. However, since &lt;code&gt;_privateCalculation&lt;/code&gt; wasn't used anywhere else in the codebase and since &lt;code&gt;getArea&lt;/code&gt; didn't change its contract, we're finished. Nothing else in the codebase needs to be modified.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-the-contract-of-a-public-function"&gt;
  &lt;/a&gt;
  Changing the contract of a public function
&lt;/h4&gt;

&lt;p&gt;The pattern continues in the same way. If you change the contract of anything, you'll have to modify &lt;strong&gt;everything&lt;/strong&gt; that uses it to accommodate. If you change more contracts as a result, you'll have to modify even more things. And so on.&lt;/p&gt;

&lt;p&gt;For example, if you delete &lt;code&gt;getArea&lt;/code&gt;, you'll have to update all of the code in the codebase that uses it. Since &lt;code&gt;getArea&lt;/code&gt; is a public function, many things could be using it.&lt;/p&gt;

&lt;p&gt;In general, you want to prevent these situations.&lt;/p&gt;

&lt;p&gt;The only real way to prevent them is to separate concerns properly. You need to organise your code into sensible units that make sense for your project. If done well, that minimises the chance that you'll need to change the contract of those units in the future.&lt;/p&gt;

&lt;p&gt;For example, what is the chance that the &lt;code&gt;Circle&lt;/code&gt; class needs to change its contract? It's very low.&lt;/p&gt;

&lt;p&gt;Other than that, keep everything you can private, so that very little is affected when you need to change code.&lt;/p&gt;

&lt;p&gt;Now, changes to public things are necessary sometimes. That's life. It could be due to new requirements, or due to large refactors. You'll deal with them when you need to, but hopefully it won't be too often.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-tips"&gt;
  &lt;/a&gt;
  More tips
&lt;/h3&gt;

&lt;p&gt;The principle of least knowledge has many more applications. They all deal with making code independent to changes and with minimizing the mental knowledge you need to work with code.&lt;/p&gt;

&lt;p&gt;Other applications of this principle include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the interface segregation principle. This keeps interfaces small. It means that code which uses an interface depends on less things. It allows for easier future changes such as splitting a class based on its interfaces or creating a smaller separate class for an interface.&lt;/li&gt;
&lt;li&gt;the law of Demeter. This prevents functions / methods from depending on long chains of object compositions.&lt;/li&gt;
&lt;li&gt;immutability. This eliminates changes to variables. It means that you don't need to track how the variable has changed over time. It reduces the knowledge you need to work.&lt;/li&gt;
&lt;li&gt;only accessing things in the local scope (or maybe instance scope). Global things are accessible by many things in the codebase. Changing them may break many things. It's also difficult to track how they change over time, because many things can change them. However, local things are more "private". This makes tracking changes easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9P2EfoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sr57hh1cs4unum5lh1x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9P2EfoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sr57hh1cs4unum5lh1x.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction-and-dont-repeat-yourself-dry"&gt;
  &lt;/a&gt;
  Abstraction and don't repeat yourself (DRY)
&lt;/h2&gt;

&lt;p&gt;DRY (don't repeat yourself) is a core principle in programming.&lt;/p&gt;

&lt;p&gt;It says that if you have multiple instances of similar code, you should refactor them into a single abstraction. That way you'll end up with just one instance of the code, rather than multiple.&lt;/p&gt;

&lt;p&gt;To accommodate the differences, the resulting abstraction accepts arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivation-for-dry"&gt;
  &lt;/a&gt;
  Motivation for DRY
&lt;/h3&gt;

&lt;p&gt;One of the reasons for DRY is to cut down the time you need to write code. If you already have an abstraction for X functionality, then you can import it and use it, rather than re-code it from scratch every time you need it.&lt;/p&gt;

&lt;p&gt;Another reason is to make changes easier. As already mentioned, we're bad with repetitive work. If code is DRY, then you only have to make a specific change in one place. If code isn't DRY then you have to make a similar change in multiple places. Making a single change is safer and faster than making multiple similar changes.&lt;/p&gt;

&lt;p&gt;Additionally, keeping code DRY applies separation of concerns. The abstraction will have to be placed in a sensible place in the codebase (good for code organisation). Also, the implementation of the abstraction is separated from the caller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-abstraction-and-dry"&gt;
  &lt;/a&gt;
  How to apply abstraction and DRY
&lt;/h3&gt;

&lt;p&gt;Here are some guidelines for applying DRY.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#combine-similar-code-into-a-single-abstraction"&gt;
  &lt;/a&gt;
  Combine similar code into a single abstraction
&lt;/h4&gt;

&lt;p&gt;Whenever you find multiple instances of the same or similar code, combine them into a single abstraction. If there are slight differences between the instances, accept arguments to handle them.&lt;/p&gt;

&lt;p&gt;You've probably done this a vast number of times throughout your career.&lt;/p&gt;

&lt;p&gt;To illustrate the point, let's use the function &lt;code&gt;map&lt;/code&gt; as an example. &lt;code&gt;map&lt;/code&gt; is a function that handles this common process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new, empty, array&lt;/li&gt;
&lt;li&gt;Iterate over an array with a for-loop&lt;/li&gt;
&lt;li&gt;Run some functionality on every value&lt;/li&gt;
&lt;li&gt;Push the resulting value to the new array&lt;/li&gt;
&lt;li&gt;After the for-loop ends, return the new array&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process is very common. It appears all the time in many codebases.&lt;/p&gt;

&lt;p&gt;Here is what it normally looks like using a for-loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformedElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformedElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the function &lt;code&gt;doubleArray&lt;/code&gt;, there would be many other functions that are almost exactly the same, except for the transformation they make on each element.&lt;/p&gt;

&lt;p&gt;So, take the common parts from those functions and put them into a separate function called &lt;code&gt;map&lt;/code&gt;. Accept an argument for the thing that's different every time, the transformation to run on each element.&lt;/p&gt;

&lt;p&gt;Here is the resulting code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transformationFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformedElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transformationFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformedElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in every function in your codebase similar to &lt;code&gt;doubleArray&lt;/code&gt;, use &lt;code&gt;map&lt;/code&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Of course, arrays in JavaScript already have a built-in method for &lt;code&gt;map&lt;/code&gt;, so you wouldn't need to create a standalone &lt;code&gt;map&lt;/code&gt; function. This was just for illustrative purposes.)&lt;/p&gt;

&lt;p&gt;You can do the same with any other code. Any time you encounter similar code, combine it into a single abstraction and accept arguments for any differences.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-of-three"&gt;
  &lt;/a&gt;
  Rule of three
&lt;/h4&gt;

&lt;p&gt;The rule of three is a precaution against combining functionality too early.&lt;/p&gt;

&lt;p&gt;It states that you should combine functionality into a single abstraction if there are three occurrences of it. Don't combine if there are only two occurrences.&lt;/p&gt;

&lt;p&gt;That's because the instances of code you might combine, may diverge (each may change differently) in the future.&lt;/p&gt;

&lt;p&gt;For example, consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would probably be a mistake to combine the duplicate functionality into its own abstraction, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// combined too early&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that, in the future, &lt;code&gt;validateUsername&lt;/code&gt; and &lt;code&gt;validatePassword&lt;/code&gt; may change differently. It's not difficult to see how that may happen.&lt;/p&gt;

&lt;p&gt;For example, in the future, &lt;code&gt;validateUsername&lt;/code&gt; may need to check that there are no special characters, while the password may require special characters.&lt;/p&gt;

&lt;p&gt;Obviously you could make both scenarios work in the &lt;code&gt;validate&lt;/code&gt; function using conditionals, but it would be messier than if you had kept the functionality separate.&lt;/p&gt;

&lt;p&gt;This is why we use the rule of three. Waiting until the third occurrence makes it more likely that the similar functionality is significant rather than coincidental. It means that things are less likely to diverge in the future.&lt;/p&gt;

&lt;p&gt;It also makes it so that if one of the three instances of similar code diverges, you can separate it and still keep the abstraction for the other two. On the other hand, if you combined functionality on the second occurrence, then had to separate them out again, you would have to revert both of them.&lt;/p&gt;

&lt;p&gt;In summary, refactoring on the second occurrence is more likely to be a waste of time.&lt;/p&gt;

&lt;p&gt;Of course, the rule of three is just a guideline. Remember to be pragmatic and do what's best for your project. Some similar instances of code may be changing in the same way every time. Or maybe they are each quite complicated to change, and you have to make a similar change to both every time. In that case, it may be more beneficial for your project to combine them into a single abstraction, even if you have to ignore the rule of three.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqHChfYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1mw771wt4wncc6zdjv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqHChfYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1mw771wt4wncc6zdjv.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-effects"&gt;
  &lt;/a&gt;
  Side effects
&lt;/h2&gt;

&lt;p&gt;The last thing we're going to look at is side effects. These aren't a single principle, but a combination of many principles + being pragmatic.&lt;/p&gt;

&lt;p&gt;(And no, they're not just the domain of functional programming. It's essential for all code to handle side effects properly.)&lt;/p&gt;

&lt;p&gt;In programming, the general definition of a side effect is anything that changes the state of the system. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changing the value of a variable&lt;/li&gt;
&lt;li&gt;logging to the console&lt;/li&gt;
&lt;li&gt;modifying the DOM&lt;/li&gt;
&lt;li&gt;modifying the database&lt;/li&gt;
&lt;li&gt;any mutation whatsoever&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also includes "actions" that may not be viewed as mutations, such as sending data over the network.&lt;/p&gt;

&lt;p&gt;I also say that accessing non-local scope is a side effect. It may not be in the official definition, but it's as unsafe as other side effects, especially if the variable you're trying to access is mutable. After all, if you access a global variable whose value isn't what you expect, you have a bug, even if the code in question doesn't modify it.&lt;/p&gt;

&lt;p&gt;All code needs "side effects" to be useful. For example, you have to modify the database or the DOM at some point.&lt;/p&gt;

&lt;p&gt;But side effects can be dangerous. They need to be handled carefully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-danger-of-side-effects"&gt;
  &lt;/a&gt;
  The danger of side effects
&lt;/h3&gt;

&lt;p&gt;Side effects are not directly harmful, but they can be indirectly harmful.&lt;/p&gt;

&lt;p&gt;For example, code A and B might both depend on the value of a global variable. You might change the value of the global variable, because you want to influence code A. But, you don't remember that code B will be affected as well. As a result, you now have a bug.&lt;/p&gt;

&lt;p&gt;These hidden dependencies, where you change one thing and something else breaks, can be very difficult to remember, track and manage.&lt;/p&gt;

&lt;p&gt;Another example is changing the DOM. The DOM can be thought of as just a global object with state. The problem is that, if different pieces of code affect the DOM at different times, in non-compatible ways, there can be bugs. Maybe code A depends on element X to be there, but code B deleted that entire section altogether just before code A ran.&lt;/p&gt;

&lt;p&gt;Perhaps you've encountered bugs like these in your work as well.&lt;/p&gt;

&lt;p&gt;Additionally, side effects break most of the principles we've covered so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;KISS and the principle of least astonishment&lt;/li&gt;
&lt;li&gt;principle of least knowledge (because code affects other, seemingly unrelated code)&lt;/li&gt;
&lt;li&gt;separation of concerns (because concerns are not necessarily self-contained or well-organised)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One important thing to understand however, is that side effects are not inherently harmful. They only cause bugs if we code them incorrectly. They are code we write which happens to be incompatible with other code we write. We write code A and then we write code B which breaks code A under certain circumstances.&lt;/p&gt;

&lt;p&gt;The main danger of side effects is that they're generally very difficult to track. The reason for that is because tracking global state, which anything can modify at any time, is very difficult. If uncontrolled, how could you possibly track changes made to the DOM over time? You may have to track so many things that it just wouldn't be feasible.&lt;/p&gt;

&lt;p&gt;Asynchronicity and race conditions also add to the complexity and difficulty of tracking side effects.&lt;/p&gt;

&lt;p&gt;Another downside of side effects is that code with side effects is generally harder to test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-side-effects"&gt;
  &lt;/a&gt;
  Handling side effects
&lt;/h3&gt;

&lt;p&gt;Even though side effects are dangerous, they can be handled effectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-pragmatic"&gt;
  &lt;/a&gt;
  Be pragmatic
&lt;/h4&gt;

&lt;p&gt;The most important point, as always, is to be pragmatic.&lt;/p&gt;

&lt;p&gt;You don't have to avoid all side effects to the extreme. You are only required to be careful with potentially incompatible code.&lt;/p&gt;

&lt;p&gt;For example, immutability is a good way to avoid many types of side effects. However, immutability makes little difference in the local scope of functions.&lt;/p&gt;

&lt;p&gt;For example, here are two functions that do the same thing. One uses immutability and the other doesn't.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, &lt;code&gt;factorial1&lt;/code&gt; uses mutation. The values of &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; both change during execution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;factorial2&lt;/code&gt; uses immutability. The values of the variables inside it never change during function execution.&lt;/p&gt;

&lt;p&gt;But it makes no difference. Other than some language limitations of recursion (which we'll ignore for this example), for all intents and purposes, &lt;code&gt;factorial1&lt;/code&gt; and &lt;code&gt;factorial2&lt;/code&gt; are exactly the same from the perspective of the caller.&lt;/p&gt;

&lt;p&gt;In fact, people tend to be less comfortable with recursion, so &lt;code&gt;factorial2&lt;/code&gt; could actually be the worse choice depending on your team.&lt;/p&gt;

&lt;p&gt;So be pragmatic and do what's best for your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#immutability"&gt;
  &lt;/a&gt;
  Immutability
&lt;/h4&gt;

&lt;p&gt;Having said that, immutability is an easy way to avoid a large portion of side effects.&lt;/p&gt;

&lt;p&gt;By never modifying variables in your code unnecessarily, you remove a large problem. You won't have things changing unexpectedly. You also won't have to track the lifecycle of variables to know what values they contain.&lt;/p&gt;

&lt;p&gt;When starting with immutability, start simple. Then, over time, try to make as many things immutable in your work as possible.&lt;/p&gt;

&lt;p&gt;Instead of modifying a variable, create a new variable for the new value. Instead of modifying an object, create a new object with the new values you want.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1 - Don't do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// mutates the original array&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 2 - Do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns a new array, without modifying the original&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In example 1, the original array is modified.&lt;/p&gt;

&lt;p&gt;In example 2 the original array is not modified. &lt;code&gt;doubleArray&lt;/code&gt; creates and returns a new array with the doubled values. Outside of the function, we create the new variable &lt;code&gt;result&lt;/code&gt; to hold the new array.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#immutability-performance-concerns"&gt;
  &lt;/a&gt;
  Immutability performance concerns
&lt;/h5&gt;

&lt;p&gt;Immutability may be slightly worse for performance. However, you probably shouldn't worry about that, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you shouldn't do premature optimisation for performance. Don't worry about performance except for the bottlenecks in your code.&lt;/li&gt;
&lt;li&gt;in most cases, immutability won't have a significant impact on performance&lt;/li&gt;
&lt;li&gt;you can use a performant immutable data structures library, such as Immer for JavaScript. It converts some operations from Big-O(n) time (such as copying an entire object) to Big-O(1) time.&lt;/li&gt;
&lt;li&gt;you can be pragmatic. You don't have to apply immutability in places where it would bottleneck performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, in some cases, immutability can improve performance by making things easier to run in parallel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-nonlocal-scope"&gt;
  &lt;/a&gt;
  Avoid non-local scope
&lt;/h4&gt;

&lt;p&gt;Avoid accessing or modifying things that are not &lt;strong&gt;exclusively&lt;/strong&gt; in the local scope of your functions or methods. This means that it's probably okay to modify variables that originated in your local scope, but not variables which were passed in as arguments (originated outside of the local scope).&lt;/p&gt;

&lt;p&gt;If necessary, it's alright to mutate things up to instance or module scope.&lt;/p&gt;

&lt;p&gt;The further away from local scope you go, the more dangerous it gets, because things become more global. This makes things harder to track and introduces far-reaching dependencies in your code.&lt;/p&gt;

&lt;p&gt;Wherever possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pass things in explicitly as arguments&lt;/li&gt;
&lt;li&gt;stick as close to local-scope as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1 - Don't do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Accesses and mutates a variable outside of the local scope&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;doubleResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 2 - Do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Accesses parameter which is in local scope. Doesn't mutate anything&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In example 1, &lt;code&gt;doubleResult&lt;/code&gt; accesses &lt;code&gt;result&lt;/code&gt;, which is a variable outside of its local scope. It also mutates it, changing its value. Now, if any other code in the codebase accesses &lt;code&gt;result&lt;/code&gt;, it will see the new value.&lt;/p&gt;

&lt;p&gt;In example 2, &lt;code&gt;double&lt;/code&gt; only accesses its parameter, which is part of its local scope. It doesn't mutate any values outside of its local scope.&lt;/p&gt;

&lt;p&gt;In a real codebase, something resembling example 1 could be very difficult to track. The &lt;code&gt;result&lt;/code&gt; variable may be defined much further away from both the &lt;code&gt;doubleResult&lt;/code&gt; function as well as the function call. This makes it harder to track the value of &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, if &lt;code&gt;result&lt;/code&gt; isn't what you expect, you have a bug. For example, you may have already called &lt;code&gt;doubleResult&lt;/code&gt; 3 times but you may not remember.&lt;/p&gt;

&lt;p&gt;Overall, in example 1, you can't predict what a function that uses &lt;code&gt;result&lt;/code&gt; will do unless you know the exact value of &lt;code&gt;result&lt;/code&gt; at that time. To do this, you'll need to search and trace through the entire codebase to keep track of &lt;code&gt;result&lt;/code&gt; at all times.&lt;/p&gt;

&lt;p&gt;In the second example, &lt;code&gt;initialValue&lt;/code&gt; is always 5, so there are never any surprises. Also you can see what the function is doing immediately and can easily predict what will happen.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-extremely-careful"&gt;
  &lt;/a&gt;
  Be extremely careful
&lt;/h4&gt;

&lt;p&gt;Sometimes you can't just rely on immutability. For example, at some point, you must mutate the DOM or the database, or make a call to a third party API, or run some sort of side effect. As already mentioned, asynchronicity only adds to the problem.&lt;/p&gt;

&lt;p&gt;In this case, you just have to be extremely careful.&lt;/p&gt;

&lt;p&gt;Side effects are probably where the majority of the bugs in your codebase exist. They're the hardest code to understand and track.&lt;/p&gt;

&lt;p&gt;Regardless of what you do to try and manage them, you must always invest the required time and attention to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#separate-pure-and-impure-functionality"&gt;
  &lt;/a&gt;
  Separate pure and impure functionality
&lt;/h4&gt;

&lt;p&gt;For the most part, try to separate code with side effects and code without side effects. Your functions shouldn't both perform side effects and have "pure" code. They should do one or the other (within reason).&lt;/p&gt;

&lt;p&gt;This is also known as the &lt;a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation"&gt;command-query separation principle&lt;/a&gt;. It's also an application of separation of concerns.&lt;/p&gt;

&lt;p&gt;For starters, something like writing to the database is very different to calculating what to write to the database. Those two concerns can change independently and for different reasons. As we examined in separation of concerns, they should be separated.&lt;/p&gt;

&lt;p&gt;Further, pure functions are generally easy to understand, reuse and test. Functions with side effects are not. Therefore, for your codebase to be easy to work with, you probably want as many functions as possible to be pure. This means that you should separate your pure functionality from your side effects.&lt;/p&gt;

&lt;p&gt;For example, instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArrayAndDisplayInDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function does a non-trivial calculation / operation and performs a side effect&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// (pretend this is a non-trivial calculation / operation)&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// writing to the DOM is a side effect&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doubleArrayAndDisplayInDOM&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function only does a calculation / operation&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayInDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function only performs a side effect&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;displayInDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#clear-areas-of-responsibility"&gt;
  &lt;/a&gt;
  Clear areas of responsibility
&lt;/h4&gt;

&lt;p&gt;As much as possible, you need to make sure that your code doesn't have conflicts. Code which performs side effects shouldn't conflict with other code performing other side effects at different times.&lt;/p&gt;

&lt;p&gt;A good way to do this is to have distinct areas of responsibility in your code.&lt;/p&gt;

&lt;p&gt;For example, if code A modifies element X in the DOM, then it should ideally be the only code which modifies that part of the DOM. All other code that needs to influence X should talk to code A to do so. That way tracking changes to element X is as easy as possible.&lt;/p&gt;

&lt;p&gt;Additionally, try to organise code dependencies well. For example, code A shouldn't run if any other code runs which would conflict with it. Also, code A shouldn't run if the state that it depends on isn't there or isn't what code A expects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#side-effects-in-pairs"&gt;
  &lt;/a&gt;
  Side effects in pairs
&lt;/h4&gt;

&lt;p&gt;For side effects which come in pairs (e.g. open / close file), the function that started the side effect should also finish it.&lt;/p&gt;

&lt;p&gt;For example, instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note, this is pseudocode */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Lots of other code in-between */&lt;/span&gt;

&lt;span class="nx"&gt;doStuffToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note, this is pseudocode */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;useFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doStuffToFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Robert Martin calls this technique "passing a block". The function &lt;code&gt;useFile&lt;/code&gt; both opens and closes the file, so it doesn't leave an open file pointer in the system.&lt;/p&gt;

&lt;p&gt;This ensures that the file will be closed when it's no longer needed.&lt;/p&gt;

&lt;p&gt;As for the functionality to perform on the file, that's passed into the function. It's the parameter &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This ensures that you won't forget to finish the side effect later. It also provides good code organisation and makes the code easy to understand and track. The entire side effect is fully handled in one place.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-using-a-framework-or-functional-programming-language"&gt;
  &lt;/a&gt;
  Consider using a framework or functional programming language
&lt;/h4&gt;

&lt;p&gt;As with immutability, the best option might be to avoid side effects as much as possible.&lt;/p&gt;

&lt;p&gt;To help with this, you can consider delegating some of them to a framework, library, or functional programming language.&lt;/p&gt;

&lt;p&gt;For example, for working with the DOM, you can use a library such as &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; (or one of the many alternatives).&lt;/p&gt;

&lt;p&gt;Something like React handles all of the DOM-related side effects. Then, in your application, you just write pure functions. You don't modify the DOM directly. Instead, your functions generate an object that represents what the DOM should look like.&lt;/p&gt;

&lt;p&gt;This is good for you, because working with pure functions is much easier than working with side effects.&lt;/p&gt;

&lt;p&gt;As for actually modifying the DOM, those side effects still occur, but they're React's problem now.&lt;/p&gt;

&lt;p&gt;Additionally, the parent / child hierarchy of React ensures that your DOM manipulations won't conflict with each other and cause problems. For example, React code involving element X won't run if element X won't actually exist. This is an example of good organisation and structure in your code to prevent conflicts with other side effects.&lt;/p&gt;

&lt;p&gt;Of course, there are many more pros and cons to using something like this. But it's just an option for you to consider.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;That was a high-level overview of what I consider to be the most important concepts for writing good code. I hope that this article helped you understand the reasoning, motivation and overview behind clean code and programming principles. Hopefully, this knowledge will help you when you go on to learn more programming principles, or find more practical examples of them.&lt;/p&gt;

&lt;p&gt;For the next step, I recommend learning clean code and programming principles more practically. Use a resource that explains the concepts with many examples and applications in code.&lt;/p&gt;

&lt;p&gt;I highly recommend looking into content created by &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert Martin&lt;/a&gt;. For the "quick", free version, I found his lectures &lt;a href="https://www.youtube.com/watch?v=SVRiktFlWxI"&gt;Coding a better world together part 1&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=qnq9syXUuFE"&gt;Coding a better world together part 2&lt;/a&gt; to be some of the best programming videos I've ever watched. For more detail you might want to check out his book &lt;a href="https://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/"&gt;Clean Code&lt;/a&gt; or his videos &lt;a href="https://cleancoders.com/"&gt;Clean Coders&lt;/a&gt; (start with the fundamentals series and the SOLID principles). I've learned a lot from Robert Martin's resources. I especially like that he explains the principles very practically, giving many practical examples of each and a lot of information in general.&lt;/p&gt;

&lt;p&gt;I also found the book &lt;a href="https://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X"&gt;The Pragmatic Programmer&lt;/a&gt; very good. Some of the details are outdated, but the concepts are not. That book truly hammers in the concept of being pragmatic. If anyone reads the &lt;a href="https://www.amazon.co.uk/Pragmatic-Programmer-journey-mastery-Anniversary/dp/0135957052/"&gt;20th anniversary edition of The Pragmatic Programmer&lt;/a&gt; please let me know what you thought. It's on my list but I haven't read it yet.&lt;/p&gt;

&lt;p&gt;I'm sure there are other amazing resources as well, but these are the ones I'm familiar with and can personally recommend.&lt;/p&gt;

&lt;p&gt;Finally, I recommend thinking about the programming principles yourself. Challenge them, consider where they might be useful or not be. Spend time on your own and consider everything that this article discussed.&lt;/p&gt;

&lt;p&gt;Alright, if you have any comments, feedback, or even counter-arguments to what this article discussed, please let me know in the comments. I'm always happy for a discussion. See you next time.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Setup a Minimal Node.js Server</title>
      <author>Abel Lifaefi Mbula</author>
      <pubDate>Fri, 14 May 2021 11:03:19 +0000</pubDate>
      <link>https://dev.to/bam92/how-to-setup-a-minimal-node-js-server-5479</link>
      <guid>https://dev.to/bam92/how-to-setup-a-minimal-node-js-server-5479</guid>
      <description>&lt;p&gt;Node.js is a JavaScript engine that let us use JS language in the backend. You can say goodbye to Apache, Ngix servers or something similar for your backend needs. Thanks to Node.js, your JS knowledge is enough to work in the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Bam92/node-starter"&gt;TL;DR–Explore the example repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;bootstrap a Node.js server&lt;/li&gt;
&lt;li&gt;serve up an HTML file&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;have Node.js installed in your local machine (at least version 10)&lt;/li&gt;
&lt;li&gt;have a basic knowledge of CLI (command-line interface)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To check your Node.js installation, open your terminal and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mine is &lt;code&gt;v14.4.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check also the packet manager that comes with Node.js &lt;code&gt;npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mine is &lt;code&gt;6.14.7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In case you don't have &lt;code&gt;Node.js&lt;/code&gt;, go &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt; to download it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-project-initialization"&gt;
  &lt;/a&gt;
  The project initialization
&lt;/h1&gt;

&lt;p&gt;We need a folder to locate our project. Create one and name it as you want and move to it. In this tutorial, I'm using the CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;node-server
&lt;span class="nb"&gt;cd &lt;/span&gt;node-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The folder name is &lt;code&gt;node-server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once in our project folder, from the CLI, we can now initialize the &lt;code&gt;npm&lt;/code&gt; project like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing tricky here, we're initializing an npm project with default values (&lt;code&gt;-y&lt;/code&gt; flag). If you leave &lt;code&gt;-y&lt;/code&gt; flag you'll be answering questions interactively. Maybe you should try it :).&lt;/p&gt;

&lt;p&gt;Did you notice it? npm has created a file (&lt;code&gt;ls&lt;/code&gt; to see it) called:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt; is an important file in any Node.js project as it keeps all info (values) for the projet: author, licence, packages...&lt;/p&gt;

&lt;p&gt;If you want to see defaults info in &lt;em&gt;package.json&lt;/em&gt;, use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm config list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you want to change defaults, use &lt;code&gt;npm set &amp;lt;key&amp;gt;&amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.name &lt;span class="s2"&gt;"&amp;lt;Your Name&amp;gt;"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.email &lt;span class="s2"&gt;"you@example.com"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.url &lt;span class="s2"&gt;"example.com"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.license &lt;span class="s2"&gt;"MIT"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's much to say about the &lt;em&gt;package.json&lt;/em&gt; file, but I think we can stop by there for now.&lt;/p&gt;

&lt;p&gt;Now is the time to discuss the file organization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-file-structure"&gt;
  &lt;/a&gt;
  The file structure
&lt;/h1&gt;

&lt;p&gt;There are many file organizations out there. You should feel free to go with one that works fine for you. In this section, I'm showing you one of the ways I do.&lt;/p&gt;

&lt;p&gt;Make sure you're in our initial project folder (&lt;code&gt;node-server&lt;/code&gt;). From there create an &lt;code&gt;src&lt;/code&gt; folder and within it create &lt;code&gt;server.js&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;src
&lt;span class="nb"&gt;touch &lt;/span&gt;server.js app.js
&lt;span class="nb"&gt;mkdir &lt;/span&gt;views public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find it better to separate API declarations (&lt;code&gt;app.js&lt;/code&gt;) from network concerns (&lt;code&gt;server.js&lt;/code&gt;), but I see many friends using just one file either server.js or app.js. The &lt;code&gt;views&lt;/code&gt; folder is about the screen (html files or template like &lt;code&gt;pug&lt;/code&gt;). In &lt;code&gt;public&lt;/code&gt; folder I put images, styles and scripts.&lt;/p&gt;

&lt;p&gt;In final, my file structure looks like this&lt;/p&gt;

&lt;p&gt;Now, we can start coding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bootstrapping-a-nodejs-server-with-expressjs"&gt;
  &lt;/a&gt;
  Bootstrapping a Node.js server with Express.js
&lt;/h1&gt;

&lt;p&gt;To create a Node.js server, it's easy and recommended to use a framework like Express.js. To add a JS package as a dependency in your project, you use this syntax: &lt;code&gt;npm install --save &amp;lt;package name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's install Express.js package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the installation is successful, you'll see a &lt;code&gt;node_modules&lt;/code&gt; folder created in your project directory. Also, in the &lt;em&gt;package.json&lt;/em&gt; under &lt;code&gt;dependencies&lt;/code&gt; property &lt;code&gt;express&lt;/code&gt; is added with its version (&lt;code&gt;"express": "^4.17.1"&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
If you're using &lt;strong&gt;git&lt;/strong&gt;, do add &lt;code&gt;node_modules&lt;/code&gt; in &lt;strong&gt;.gitignore&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now make use of &lt;code&gt;express&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;app.js&lt;/code&gt; and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing tricky here. We require &lt;code&gt;express&lt;/code&gt;, we create an instance of it so that we can use it in the project and at the end we export the file.&lt;/p&gt;

&lt;p&gt;We can now start the server in &lt;code&gt;server.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The server is listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;app.listen()&lt;/code&gt; function that binds and listens the connections on the specified host and port. To see if everything is OK we can start the server like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get this message on the console &lt;code&gt;The server is listening on port 4000&lt;/code&gt;. But if you go on &lt;code&gt;localhost:4000&lt;/code&gt; you'll get an error (&lt;code&gt;Cannot GET /&lt;/code&gt;) because we did not define any route yet. We can add a simple route like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// previous code here...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For productivity purposes, we can add color to our console messages and a logger to get the log on the console. Install these packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;chalk morgan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, we can configure them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chalk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The server is listning on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using &lt;code&gt;chalk&lt;/code&gt; green color here. You can use the one you want. Check the &lt;a href="https://www.npmjs.com/package/chalk"&gt;doc&lt;/a&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tiny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;morgan&lt;/code&gt; is a logger middleware. You can log anything you want on the console. You can log as much info as you want. Here I only want some basic info, so I use &lt;code&gt;tiny&lt;/code&gt;. Other options are &lt;code&gt;combined&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;. Try them yourself and see the output or read the &lt;a href="https://www.npmjs.com/package/morgan"&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run the server (&lt;code&gt;node src/server.js&lt;/code&gt;) and see the result. On the browser you have &lt;code&gt;Hello&lt;/code&gt;, on the console 4000 is in green color and some other info printed there.&lt;/p&gt;

&lt;p&gt;Just one more thing before we jump to serving up an html file. Instead of typing everytime &lt;code&gt;node src/server.js&lt;/code&gt;, we can add it to our &lt;em&gt;package.json&lt;/em&gt; so that we can use the automated tools out there like &lt;code&gt;npm start&lt;/code&gt;. So, under &lt;code&gt;scripts&lt;/code&gt; property add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node src/server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even better, add &lt;code&gt;src/server.js&lt;/code&gt; as the value of &lt;code&gt;main&lt;/code&gt; property and modify the "start" script like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node .&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the server, you simply have to do &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To finish this section, add the string "world" after after "Hello" and go to the browser to see the result. Do you see "world"? No, sorry :(. The reason is that, the server did not restart to serve up new modifications. Stop the server (&lt;code&gt;Ctrl + C&lt;/code&gt;) and restart it. Now you can see "Hello world" on the browser.&lt;/p&gt;

&lt;p&gt;To allow the automatic restart of the server, we can use &lt;code&gt;nodemon&lt;/code&gt; package. Install it and modify the "start" script as so: &lt;code&gt;"start": "nodemon ."&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations! Your server is up and listening fine on port &lt;code&gt;4000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now is the time to serve up HTML file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serving-files"&gt;
  &lt;/a&gt;
  Serving files
&lt;/h1&gt;

&lt;p&gt;In the &lt;code&gt;views&lt;/code&gt; forlder, create a file called &lt;code&gt;index.html&lt;/code&gt; and add this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--views/index.html--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Node.js Starter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If you can see this text, your server is running properly.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;How can we see the content of the file above on the browser?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's learn how to:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deal-with-files-and-directories"&gt;
  &lt;/a&gt;
  Deal with files and directories
&lt;/h2&gt;

&lt;p&gt;To work with files and directories in a Node.js app, we need these elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;sendFile()&lt;/strong&gt;: an Express.js method available on the response object (&lt;strong&gt;res&lt;/strong&gt;) that is used to render a file &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;path&lt;/strong&gt;: a buit-in module that gives us all of the tools we need to handle cross-platform paths.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;__dirname&lt;/strong&gt;: a global object that return the absolute path of the directory containing the currently executing file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's put all into practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path we want want send is this &lt;code&gt;views/index.html&lt;/code&gt;. We could just do this to define our path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;views/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will just work fine if you are on a UNIX-like system. If you're developing in a Windows machine you'll encounter some problems as paths do not work the same on Windows OS and MacOSX or GNU/Linux. To avoid having troubles, we can let Node.js handle this for us. Welcome &lt;code&gt;path&lt;/code&gt; module!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I include the &lt;code&gt;path&lt;/code&gt; module in the project and use its &lt;code&gt;.join()&lt;/code&gt; method to join (concatenate) all paths into a string. The final path after I run the server will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/home/abelmbula/Documents/dev/educative-courses/node-starter/src/views/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;In this lesson, we learned how to create a simple Node.js server with Express framework and how to render an html file. You can find the full code &lt;a href="https://github.com/Bam92/node-starter"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>node</category>
      <category>express</category>
      <category>javascript</category>
      <category>server</category>
    </item>
    <item>
      <title>The Accidental Public Speaker or How I Got Over My Fear of Public Speaking</title>
      <author>Alex Lakatos 🥑</author>
      <pubDate>Fri, 14 May 2021 10:34:23 +0000</pubDate>
      <link>https://dev.to/lakatos88/the-accidental-public-speaker-or-how-i-got-over-my-fear-of-public-speaking-48c9</link>
      <guid>https://dev.to/lakatos88/the-accidental-public-speaker-or-how-i-got-over-my-fear-of-public-speaking-48c9</guid>
      <description>&lt;p&gt;&lt;strong&gt;I’ve given over a hundred talks in the past few years&lt;/strong&gt;. Why? Because I think it’s perfectly OK for me to be terrified, but it’s not OK for me to stay that way. My biggest fear? Same as you, same as everybody else. I was afraid to speak in front of people. &lt;/p&gt;

&lt;p&gt;A hundred talks later, &lt;strong&gt;I’m still terrified every time I go on stage&lt;/strong&gt;. How did I ever get on stage, though? Well, here’s a little trip down memory lane, the series of unfortunate events that got me up on stage. I entirely blame &lt;a href="https://twitter.com/ioana_cis"&gt;Ioana&lt;/a&gt; and &lt;a href="https://twitter.com/pensacolla"&gt;Marcela&lt;/a&gt; for this btw, if you want the tl;dr. 😅&lt;/p&gt;

&lt;p&gt;Why did I do over a hundred talks, you might ask? Well, I do a bunch of things in this world. In my free time, I’m a Mozilla Tech Speaker. I also volunteer for the Mozilla Reps program, and I’m a Mentor in that program. Both of those programs are geared towards speaking to tech audiences and building communities. But I do like the idea of a paycheck and getting paid, so I work for Fidel as a Developer Relations Manager. And speaking in public is part of the job. I know, I must be a masochist. There’s no other explanation. 🤦&lt;/p&gt;

&lt;p&gt;With Mozilla or work, I’ve met a lot of great people, Developer Advocates, Community Builders, and Developers getting over their fear of speaking so they could share their knowledge. Because there is not a lot to do in the “Speakers Room” at conferences, and because misery loves company, the question I always asked was: “How did you get here”. Everybody I’ve asked has a different origin story. There’s no common denominator, really. I will tell you a bit of my story, how I started out.&lt;/p&gt;

&lt;p&gt;It all started about 10 years ago, there was an event called Open Source Open Mind in Romania, and I was working for Mozilla at the time. They asked our team to talk about Mozilla. Still, I was terrified of public speaking, so it definitely wasn’t going to be me. Ioana said she’d do it, but she was travelling to the US and didn’t have time to do the slides. I volunteered to do slides; that was the easy part; I didn’t actually have to go in front of 100 something people. So I did the slides. &lt;strong&gt;This was my first mistake&lt;/strong&gt;. 😅&lt;/p&gt;

&lt;p&gt;On the morning of the event, I was waiting at the airport for Ioana to land when she calls me to tell me her flight got delayed, so I should go to the event and stall; she’ll get there on the next flight. I get to the event. &lt;strong&gt;This was my second mistake&lt;/strong&gt;. Marcela, the organizer, is a friend and a really nice person; she kept pushing our time slot later and later in the day. It came to the last time slot of the day. Someone had to go up on stage.&lt;/p&gt;

&lt;p&gt;Marcela goes up on stage, looks for Ioana in the audience, but Ioana isn’t there yet. She then utters the words that sealed my fate: “And now, from Mozilla… Alex! Alex is going to come and speak about it!". It took me a while to process. I went up on stage, I put my hands in my pockets, I kept bouncing from one foot to the other, and it took a good minute until I started speaking. It was horrible. I couldn’t face my audience. I was looking halfway at my slides, halfway at the sidewall. &lt;/p&gt;

&lt;p&gt;Sadly, the experience is recorded and &lt;a href="https://www.youtube.com/watch?v=pMnwjpy_3J0&amp;amp;t=5s"&gt;still up on YouTube&lt;/a&gt;. I still use it as an example of what not to do when I try to help other people get over their fear of public speaking. Luckily, the experience isn’t in English, so you can’t really understand how bad it was unless you speak Romanian. 😅&lt;/p&gt;

&lt;p&gt;The problem was, &lt;strong&gt;once I started speaking, I couldn’t stop&lt;/strong&gt; —no questions from the audience, no nothing. After I finished my presentation, there was a Q&amp;amp;A part. For every question I got, I kept stepping further and further into the audience space. At a certain point, when the Q&amp;amp;A portion was finished, I was literally in the middle of the room.&lt;/p&gt;

&lt;p&gt;By the time I finished my talk, Ioana actually showed up at the conference. But the damage was already done. &lt;strong&gt;I had spoken in public without dying in the process&lt;/strong&gt;. After that first experience, I was horrified, nervous and &lt;strong&gt;vowed never to do it again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Two weeks later, I was doing it again, speaking in front of 50 other people. That’s how I got started into all this. Turns out, peer pressure is a strong motivating force, especially if done live in front of hundreds of strangers. I’m being sarcastic here. Please don’t do this to your friends. I highly doubt it’s going to work a second time. You might call me the “Accidental Public Speaker”.&lt;/p&gt;

&lt;p&gt;The other hundred or so talks that followed, I have no excuse for those. 😅 In the meantime, I’ve learned a lot about things that help me get on stage and power through fear. I do some embarrassing things before I go on stage now. But they work for me, so I’ve &lt;strong&gt;learned to accept the process&lt;/strong&gt; and don’t fix it if it’s not broken.&lt;/p&gt;

&lt;p&gt;One of the things that work for me has to do with the “Psychology of Winning”. If I make myself believe I’ve “won” this talk before it even starts, there no pressure to hype my fear levels. It sort of takes the edge off enough for me to start. And once I start, and get through the first 2 minutes of it, practice and a lot of other things kick in, and it’s all the better from there.&lt;/p&gt;

&lt;p&gt;How do I trick myself into believing I “won” something before it happened? Well, this is where the embarrassing things happen. The “Psychology of Winning” says winning is a state of mind that correlates to physical reactions to winning. The reverse is also true to some extent, so mimicking those physical reactions will induce a mild “winning” mental state. You see where I’m going with this.&lt;/p&gt;

&lt;p&gt;Before my talks, I find a quiet corner at the conference or an empty bathroom stall 😳. And I do winning gestures, like pumping my chest forward, raising my fists in the air, jumping up and down, and screaming my lungs out. In case you’ve been at a conference with me before and you’ve “experienced” the ritual, I’d like to profusely apologize. 😅 &lt;strong&gt;I hope we can still be friends&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If this all inspired or convinced you to try speaking in front of people, &lt;a href="https://twitter.com/lakatos88"&gt;reach out on Twitter&lt;/a&gt;. I’m putting together a list of other things I tried to get over my fear of public speaking, some of which actually worked.&lt;/p&gt;

</description>
      <category>speaking</category>
      <category>devrel</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Use Vim</title>
      <author>jones268</author>
      <pubDate>Fri, 14 May 2021 10:24:45 +0000</pubDate>
      <link>https://dev.to/jones268/how-to-use-vim-g1o</link>
      <guid>https://dev.to/jones268/how-to-use-vim-g1o</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)"&gt;Vim&lt;/a&gt; is a powerful text editor used by programmers and system administrators as a command line interface. Vim is widely used by Linux users. It is also available in Windows, Mac OS X and every other Unix system.&lt;/p&gt;

&lt;p&gt;The reason why it is that popular is that vim allows the programmer to code efficiently without leaving the editor. When coding, you don't need to use your mouse. This sounds simple, but this is exactly what any programmer wants from an editor.&lt;/p&gt;

&lt;p&gt;Most of its commands are robust and cryptic enough to be typed in blindly, which makes it a good choice for operating on remote servers without a GUI interface. But you can also use vim mode in your favorite IDE to increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a16yyT1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5do19b8g8evk8jjd0w5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a16yyT1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5do19b8g8evk8jjd0w5.gif" alt="vim productivity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For beginners vim can be confusing, but it can boost your coding productivity. If you are new to vim, I recommend &lt;a href="https://vim.is/"&gt;these exercises&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-computer"&gt;
  &lt;/a&gt;
  Installation 💻
&lt;/h2&gt;

&lt;p&gt;The following is a very simple and quick installation of Vim on any Unix-like system. These instructions are geared towards systems with GNU coreutils, but it should work equally well on other systems with minor modifications.&lt;/p&gt;

&lt;p&gt;Most likely vim or vi is already installed on your comptuer. But if not, you want to install Vim, so run:&lt;/p&gt;

&lt;p&gt;Ubuntu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OpenSUSE:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo zypper install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fedora:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use-vim-fire"&gt;
  &lt;/a&gt;
  How to use vim 🔥
&lt;/h2&gt;

&lt;p&gt;Here are some basic commands that will help you navigate the text files using Vim. To enter commands press &lt;code&gt;ESC&lt;/code&gt; first, to write press &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To open a file in Vim, you can type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vim filename.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Save file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To save a file in Vim, you can type &lt;code&gt;:w&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quit&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To quit from vim, you can type &lt;code&gt;:q&lt;/code&gt;. This command will also save the changes of the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open another file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To open a new file, you can type &lt;code&gt;:e&lt;/code&gt; filename. This command will open the file and move the cursor to line number one of the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI-2ncnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izvqvbpn9szcflygymia.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI-2ncnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izvqvbpn9szcflygymia.gif" alt="power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands-penguin"&gt;
  &lt;/a&gt;
  Commands 🐧
&lt;/h2&gt;

&lt;p&gt;Vim is a modal text editor. It's a tool with a long pedigree, and is to computer text editors what Microsoft Word is to word processors. It has two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;command mode&lt;/li&gt;
&lt;li&gt;insert mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In command mode (&lt;code&gt;ESC&lt;/code&gt;), you'll type a series of commands to perform edits, such as typing text or searching the file system. &lt;/p&gt;

&lt;p&gt;In insert mode (&lt;code&gt;i&lt;/code&gt; or &lt;code&gt;Insert&lt;/code&gt;), you'll type text like you would in any other text editor. Vim has many features that make it popular, but its most distinctive feature is probably its modal design. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAa7RCzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacvktwjelm9nz0r5cki.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAa7RCzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacvktwjelm9nz0r5cki.gif" alt="vim commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins-whale2"&gt;
  &lt;/a&gt;
  Plugins 🐋
&lt;/h2&gt;

&lt;p&gt;Vim is also an extensible editor - a programmer can change the editor just by writing a new plugin. There are already hundreds of &lt;a href="https://github.com/topics/vim-plugins"&gt;plugins&lt;/a&gt; for vim. &lt;/p&gt;

&lt;p&gt;Some plugins make vim behave like an IDE (integrated development environment). Do note that IDEs often have vim emulation mode plugins themselves.&lt;/p&gt;

&lt;p&gt;Others provide syntax highlight for hundreds of programming languages. For example, there are more than 20 syntax-highlight plugins for javascript (including CoffeeScript, LESS, Sass, and Stylus).&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>vim</category>
      <category>linux</category>
    </item>
    <item>
      <title>🚀 Flutter CI/CD using Git Tags in 5 minutes</title>
      <author>Julien</author>
      <pubDate>Fri, 14 May 2021 09:50:20 +0000</pubDate>
      <link>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</link>
      <guid>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-you-need"&gt;What you will need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-you-do"&gt;What you will do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Step 1: Deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Step 2: Git push with tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-need"&gt;
  &lt;/a&gt;
  What you will need &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;📲 A Flutter app (obviously)&lt;/li&gt;
&lt;li&gt;📦 A Github, Gitlab or Bitbucket account&lt;/li&gt;
&lt;li&gt;✨ A &lt;a href="https://codemagic.io/start/"&gt;Codemagic&lt;/a&gt; account (linked to your app repository)&lt;/li&gt;
&lt;li&gt;😁 Your best smile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-do"&gt;
  &lt;/a&gt;
  What you will do &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You will create a git tag containing your new app version, then push it to your repository. It will automatically trigger a Codemagic build, and release your app on the Play Store 🚀&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-deployment-script-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Step 1: Create a deployment script 🛠 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Below you'll find code to configure the CI/CD. You just have to add it to the root of your repository in a file named &lt;strong&gt;codemagic.yaml&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;I've used a script instead of the workflow editor (Codemagic GUI) for multiple reasons (versioned, faster...) but mainly because the version handling isn't possible using the editor.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- Here you will include the "reusable" parts that are described afterward&lt;/span&gt;

&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;play-store&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Play Store Release&lt;/span&gt;
    &lt;span class="na"&gt;max_build_duration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*caching&lt;/span&gt;

    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*flutter_version&lt;/span&gt;
      &lt;span class="na"&gt;xcode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
      &lt;span class="na"&gt;cocoapods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
      &lt;span class="na"&gt;vars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*gcp_service_credentials&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*keystore_release&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="na"&gt;triggering&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;tag&lt;/span&gt;
      &lt;span class="na"&gt;branch_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;master"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;tag_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

    &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*android_key_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_pub_get&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_build_play_store_release&lt;/span&gt;

    &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build/**/outputs/**/*.aab&lt;/span&gt;

    &lt;span class="na"&gt;publishing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;google_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*play_console_credentials&lt;/span&gt;
        &lt;span class="na"&gt;track&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpha&lt;/span&gt;
        &lt;span class="na"&gt;in_app_update_priority&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next are the reusable parts, to be clean and not repeat yourself ✨. Replace the encrypted variables using your credentials and the &lt;a href="https://docs.codemagic.io/building/encrypting/"&gt;Codemagic encrypting tool&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="na"&gt;reusable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_version&lt;/span&gt; &lt;span class="s"&gt;1.22.6&lt;/span&gt;

  &lt;span class="na"&gt;environment-variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;keystore_release&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/tmp/keystore.keystore&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_ALIAS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;gcp_service_credentials&lt;/span&gt;
      &lt;span class="na"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;      

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;play_console_credentials&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

  &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;android_key_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Android - Setup key.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;echo $FCI_KEYSTORE | base64 --decode &amp;gt; $FCI_KEYSTORE_PATH&lt;/span&gt;
        &lt;span class="s"&gt;cat &amp;gt;&amp;gt; "$FCI_BUILD_DIR/android/key.properties" &amp;lt;&amp;lt;EOF&lt;/span&gt;
        &lt;span class="s"&gt;storePassword=$FCI_KEYSTORE_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyPassword=$FCI_KEY_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyAlias=$FCI_KEY_ALIAS&lt;/span&gt;
        &lt;span class="s"&gt;storeFile=/tmp/keystore.keystore&lt;/span&gt;
        &lt;span class="s"&gt;EOF&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter x Android - Setup local.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "flutter.sdk=$HOME/programs/flutter" &amp;gt; "$FCI_BUILD_DIR/android/local.properties"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_pub_get&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Get dependencies&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter packages pub get&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_test&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Run tests&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter test --machine&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_build_play_store_release&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build AAB for Play Store release&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS=$(echo $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS | base64 --decode)&lt;/span&gt;
        &lt;span class="s"&gt;NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name 'com.company.example') + 1))&lt;/span&gt;
        &lt;span class="s"&gt;NEW_VERSION_NAME=$(git describe --tags)&lt;/span&gt;

        &lt;span class="s"&gt;echo $NEW_VERSION_NAME&lt;/span&gt;
        &lt;span class="s"&gt;echo $NEW_BUILD_NUMBER&lt;/span&gt;

        &lt;span class="s"&gt;flutter build appbundle --build-name=$NEW_VERSION_NAME --build-number=$NEW_BUILD_NUMBER  --obfuscate --split-debug-info=$FCI_BUILD_DIR/debug_files&lt;/span&gt;

  &lt;span class="na"&gt;caching&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;caching&lt;/span&gt;
    &lt;span class="na"&gt;cache_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$HOME/.gradle/caches&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$FLUTTER_ROOT/.pub-cache&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- The workflow part described before should be here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous script, the &lt;strong&gt;"flutter_build_play_store_release"&lt;/strong&gt; script handle the versioning :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Version&lt;/strong&gt; is retrieved from the tag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build number&lt;/strong&gt; is retrieved from the play console (fetching the highest build number, and incrementing it for this release).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Don't forget to replace &lt;strong&gt;com.company.example&lt;/strong&gt; with your app package name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can now push this script onto your repository. It should then be visible from Codemagic and you should be able to trigger it manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-git-tag-gt-push-it"&gt;
  &lt;/a&gt;
  Step 2: Add git tag 🔖 -&amp;gt; push it 🚀 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Creating a git tag is very easy. We will use 1.0.0 as our version, and tag.&lt;br&gt;
You just have to run the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag &lt;span class="nt"&gt;-a&lt;/span&gt; 1.0.0 &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Release 1.0.0"&lt;/span&gt;
git push origin 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You should see a build running in Codemagic 🏄‍♂️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;You can add as many workflows as you want using Codemagic! You can use the GUI editor, and then extract to code to have more control over the code. &lt;/p&gt;

&lt;p&gt;Here we deploy on Alpha, so you can change to Production when you feel ready. And then, you can add an iOS workflow with mostly the same code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leave a comment, a like or even a unicorn 🦄 if you've achieved this tutorial! 🚀🔖&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>git</category>
      <category>codemagic</category>
      <category>android</category>
    </item>
    <item>
      <title>4 ways to perfectly center content using CSS
</title>
      <author>Rajat Kapoor </author>
      <pubDate>Fri, 14 May 2021 09:48:58 +0000</pubDate>
      <link>https://dev.to/rajatkapoor/4-ways-to-perfectly-center-content-using-css-5hfi</link>
      <guid>https://dev.to/rajatkapoor/4-ways-to-perfectly-center-content-using-css-5hfi</guid>
      <description>&lt;p&gt;Centering content in CSS is something that beginners struggle a lot with. CSS provides a lot of options that allow you to center content inside a container. We'll try some of the most commonly used ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#centering-text"&gt;
  &lt;/a&gt;
  Centering text
&lt;/h2&gt;

&lt;p&gt;Let's start by learning how to center text in a container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--  our html has a container and text content inside --&amp;gt;
&amp;lt;div class="container center"&amp;gt;
  this text should be centered
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can center the text content using &lt;code&gt;text-align: center&lt;/code&gt;. Here's is how our CSS looks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Just to see how big the container is*/
.container {
  background: black;
  font-size: 2rem;
  color: turquoise;
  height: 400px;
}

.center {
  text-align: center;  /* horizontally center aligns the text */

  vertical-align: middle;  /* aligns the text in the middle of the `line-height` of the text*/
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajatkapoor/embed/VwpvGMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you want to place the text at the center of the screen, wrap it in a &lt;code&gt;div&lt;/code&gt; and follow any of the techniques below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#centering-a-div-inside-another"&gt;
  &lt;/a&gt;
  Centering a div inside another
&lt;/h2&gt;

&lt;p&gt;There are multiple ways to do it. Check out all of these and let me know your favorite one in the comments. For the next few examples, we'll use this common HTML and CSS and highlight only the CSS changes needed to center the contents&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--  our html has a container which contains a div we wish to center--&amp;gt;
&amp;lt;div class="container center"&amp;gt;
  &amp;lt;div class="inner"&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;#### CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html,
body {
  height: 100%;
}
.container {
  background: black;
  width: 100%;
  height: 100%;
  font-size: 2rem;
}

.inner {
  background: turquoise;
  width: 50px;
  height: 50px;
  border-radius: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-margin-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;margin&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We can horizontally center the inner div using margin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inner{
  margin: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action here&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajatkapoor/embed/yLMYQYN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-flex-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;flex&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To center this using flex, we need the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.center{
  display: flex;
  align-items: center;
  justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action here&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajatkapoor/embed/qBrOJQR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-grid-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;grid&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.center{
  display: grid;
  place-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action here&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajatkapoor/embed/RwpWqwy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is not all of it. There are many other ways to center content. Post your favorite way of centering content in the comments.&lt;/p&gt;

</description>
      <category>css</category>
      <category>cssgrid</category>
      <category>flexbox</category>
      <category>html</category>
    </item>
    <item>
      <title>How to support your team during the pandemic</title>
      <author>Neha Sharma </author>
      <pubDate>Fri, 14 May 2021 09:44:29 +0000</pubDate>
      <link>https://dev.to/hellonehha/how-to-manage-a-team-during-a-pandemic-48ee</link>
      <guid>https://dev.to/hellonehha/how-to-manage-a-team-during-a-pandemic-48ee</guid>
      <description>&lt;p&gt;It is more than a year we are in the pandemic. Everyone is working remotely and slowly we are losing the touch of humans, cafeteria breaks, lunch walks, sharing food, or having offline parties.&lt;/p&gt;

&lt;p&gt;Even now we reached where the fun-Friday, online concerts, or annual functions are not motivating. &lt;/p&gt;

&lt;p&gt;People are losing their loved ones and mental health is at the worst.&lt;/p&gt;

&lt;p&gt;I remember when I started giving interviews at the start of the pandemic a director of an MNC company asked me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Question: "How you will motivate your team in a WFH situation?"&lt;/p&gt;

&lt;p&gt;(For me, at that time it was easy to answer this question)&lt;/p&gt;

&lt;p&gt;My Answer: As a leader no matters what will happen I have to be there for them every morning with positive energy.  &lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;Now, after a year I can see that this is very challenging when you are 9 AM - 6 PM sitting in front of the laptop, moving from one meeting to other, living with just your calendar. Even public holidays and weekends are not exciting anymore.&lt;/p&gt;

&lt;p&gt;So, what to do? This is one question I am asking myself since the 2nd wave hit India.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-accept"&gt;
  &lt;/a&gt;
  1) Accept
&lt;/h2&gt;

&lt;p&gt;Accept that there is a problem. You cannot deny that there is a problem remote work during pandemic vs pre-pandemic is very different. &lt;/p&gt;

&lt;p&gt;The reason is pre-pandemic we can at least meet our friends in person after office or monthly/yearly meet our team in person. In the current situation - we cannot. &lt;/p&gt;

&lt;p&gt;So, better to accept that there is a problem that people are not as excited about the work as they used to before and we cannot do much about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-avoid-overdoing"&gt;
  &lt;/a&gt;
  2) Avoid over-doing
&lt;/h2&gt;

&lt;p&gt;Do not...I repeat DO NOT overdo anything to excite your team or to have fun activities. It is better to give your team free time to relax, sleep, or whatever they want to do rather than having online game time. Keep things optional if someone wants to join they will, if they don't want to it is fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-understand"&gt;
  &lt;/a&gt;
  3) Understand
&lt;/h2&gt;

&lt;p&gt;We need to understand that everyone is working from their home. We have no clue what is going at their end. So, try to understand if someone is not giving 100% for a few days. This is a very hard time. &lt;/p&gt;

&lt;p&gt;The office is used to be an excuse to escape from our problems but now there is no line between home and office. Hence, it is very important to understand that there could be a &lt;strong&gt;LOT&lt;/strong&gt; going in their life and we might not able to do anything and they might not share with us. All we can do is understand and let it go but be always there just in case they want to talk about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-fewer-meetings-amp-only-scheduled-one"&gt;
  &lt;/a&gt;
  4) Fewer meetings &amp;amp; only scheduled one
&lt;/h2&gt;

&lt;p&gt;This is very important to always plan your week and avoid unplanned meetings as well as have only fewer meetings.&lt;/p&gt;

&lt;p&gt;I am sure you must have heard this a lot - &lt;em&gt;"There are so many meetings since we went WFH".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yes, over-communication is important.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yes, meetings are the only mode of communicating with the team.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, plan your meetings and have fewer meetings. &lt;strong&gt;Why?&lt;/strong&gt; this will balance the work and meetings, the team will be less on calls, the team can plan their day well.&lt;/p&gt;

&lt;p&gt;Also, trust your team. Just because they are not on calls doesn't mean they are not working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-no-question-asked-timeoff"&gt;
  &lt;/a&gt;
  5) No question asked time-off
&lt;/h2&gt;

&lt;p&gt;Stop asking why people are taking off. Mental health is at the worst for most folks. It is important to give folks time off. Make them understand that work is not an excuse to escape from reality now. Accept and find your escape in something else as this could impact your mental health.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-fixed-working-hours"&gt;
  &lt;/a&gt;
  6) Fixed working hours
&lt;/h2&gt;

&lt;p&gt;As everyone knows we all are stuck at home so it is very common to expect that everyone is available 24/7. As a manager, set up fixed working hours and make sure no meetings, calls are getting schedules after that hours. As well as, encourage your team not to work after those hours. The reason is this will set up an example and helps the team to have a work-life balance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-live-by-calendar"&gt;
  &lt;/a&gt;
  7) Live by calendar
&lt;/h2&gt;

&lt;p&gt;Encourage your time to have the calendar blocked for lunch, short breaks. This will helps in people blocking your calendar at your lunchtime or breaks. Encourage them to say No or Decline meetings but write a small note while declining (to be polite). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-informal-11"&gt;
  &lt;/a&gt;
  8) Informal 1:1
&lt;/h2&gt;

&lt;p&gt;1:1 should not be only focused on the work. Have the light 1:1 talk about anything apart from the work. This is a nice way of having a break from day-to-day work conversation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-lead-by-example"&gt;
  &lt;/a&gt;
  9) Lead by example
&lt;/h2&gt;

&lt;p&gt;Always remember you are setting an example for your team. So, lead by example. Take off, keep fewer meetings, have some time for yourself, work within fixed working hours, take care of your mental and physical health.&lt;/p&gt;

&lt;p&gt;Stay Safe!!&lt;/p&gt;

&lt;p&gt;Let me know what you are doing to keep your team motivated at this time or what you expect your employer to do for you?&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>management</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Jamstack subscription form with Netlify forms and Fauna - Part 1</title>
      <author>Tapas Adhikary</author>
      <pubDate>Fri, 14 May 2021 09:42:49 +0000</pubDate>
      <link>https://dev.to/atapas/build-a-jamstack-subscription-form-with-netlify-forms-and-fauna-part-1-3aj1</link>
      <guid>https://dev.to/atapas/build-a-jamstack-subscription-form-with-netlify-forms-and-fauna-part-1-3aj1</guid>
      <description>&lt;p&gt;What are a few things you wish for as a software/solution/product developer? In case you are thinking to answer, your list may contain some of these,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is fun when we have to do less to achieve more.&lt;/li&gt;
&lt;li&gt;It is more worthy when we have to pay less to build something great.&lt;/li&gt;
&lt;li&gt;It is relaxing when we don't have to worry much about the security, patching, upgrading, and maintaining many libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, we are happy and confident developers when we have support for these three pillars of software development and delivery,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBApoDjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620701304536/vYFlcvLTa.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBApoDjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620701304536/vYFlcvLTa.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Jamstack Pillars - Speed Cost Security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Jamstack&lt;/code&gt; is a web development architecture that helps us achieve these with client-side JavaScript, reusable APIs, and prebuilt Markup. In this article, we will see the usage of the Jamstack architecture to build a super-fast, low-cost, easily maintainable &lt;code&gt;Subscription Form&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will be able to follow this article and build the subscription form without any prior knowledge to Jamstack. Of course, it would help if you had a basic understanding of &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;. However, if you are looking for an in-depth understanding of Jamstack, this series may help you: &lt;a href="https://blog.greenroots.info/series/jamstack-for-all"&gt;Jamstack for All&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To keep it simple and focused, let's split the topic into two articles. It is &lt;code&gt;part - 1&lt;/code&gt; to get things working with Netlify Forms. In &lt;code&gt;part - 2&lt;/code&gt;, we will learn about the functions and data store.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At any point in time, you can access the source code from here: &lt;a href="https://github.com/atapas/jamstack-subscription-form"&gt;https://github.com/atapas/jamstack-subscription-form&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, now relax and enjoy the article 🧘‍♀️.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subscription-form"&gt;
  &lt;/a&gt;
  Subscription Form
&lt;/h1&gt;

&lt;p&gt;Let's take a simple subscription form that asks a user to subscribe to a newsletter by providing the following details,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full Name&lt;/li&gt;
&lt;li&gt;E-mail address&lt;/li&gt;
&lt;li&gt;Frequency to get the newsletter(daily, weekly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the user fill-up the form and submits it, we show the user a success page with a note of thanks. We will develop it using basic HTML and CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DLvIex6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620571808013/Y4EShkCdr.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DLvIex6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620571808013/Y4EShkCdr.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="form.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that's not all. What about the nuisances of handling the form data? What about an e-mail notification every time someone subscribes? How about storing the data in a store? What are the options of performing some analytics on top of the stored data? &lt;/p&gt;

&lt;p&gt;Right, there are many essential and exciting use-cases involved in the form handling.  We will use the &lt;code&gt;Netlify Forms&lt;/code&gt; for better form handling. We will also use &lt;code&gt;Fauna&lt;/code&gt; as a data store to store the information of the subscribers. The Fauna part is optional for a simple form handling like this, but I was greedy to try it out and found it super cool.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-form-using-html-and-css"&gt;
  &lt;/a&gt;
  Create a Form using HTML and CSS
&lt;/h1&gt;

&lt;p&gt;Let us now create the subscription form using &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;CSS&lt;/code&gt;. First, create a project folder with the name of your choice(something like &lt;code&gt;jamstack-subscription-form&lt;/code&gt;). Then, open a command prompt/terminal window and change the directory to the project folder. &lt;/p&gt;

&lt;p&gt;Initiate a node project using the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Provide the required details and create the &lt;code&gt;package.json&lt;/code&gt; file. Here is a sample package.json file,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jamstack-subscription-form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Tapas Adhikary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a folder called &lt;code&gt;src&lt;/code&gt; at the root of the project folder. Now, create two empty files, &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;index.css&lt;/code&gt; respectively, inside the &lt;code&gt;src&lt;/code&gt; folder. At this stage, your folder structure should look like this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQraovVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620569860875/C-jT700L4.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQraovVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620569860875/C-jT700L4.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add the HTML part now. Copy the below code to the &lt;code&gt;index.html&lt;/code&gt; file. It has the code to,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;code&gt;index.css&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;HTML structure to have a form with required input fields and a button.&lt;/li&gt;
&lt;li&gt;Other HTML elements to show a header, paragraph to explain the purpose of the page.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Monthly Bytes&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Monthly Bytes&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Please fill-up the form below to subscribe to our &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;M&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;onthly &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;ytes newsletter.
            We send you the quality content every month.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/success"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"subscription"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"fullName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Full name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; 
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fullName"&lt;/span&gt; 
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"fullName"&lt;/span&gt; 
                &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"We want to know your name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;E-mail&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; 
                &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; 
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; 
                &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Tell us your e-mail id"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;I want to get it&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
                        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; 
                        &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"frequency"&lt;/span&gt; 
                        &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"daily"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Daily
                &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; 
                        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; 
                        &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"frequency"&lt;/span&gt; 
                        &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"weekly"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Weekly
                &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Subscribe&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we are ready to load and run this HTML file in the browser. If you are using an editor like &lt;code&gt;VS Code&lt;/code&gt;, you can use the extensions(like Live Server) to run it. Alternatively, use this command from the root of the project folder to run the app and see the index.html rendered in the browser.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx serve src/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can now access the app @&lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiFW6btQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620570473567/fzaynIZ1X.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiFW6btQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620570473567/fzaynIZ1X.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see, the page has all the required elements, but it misses the styles. Let us now add a few styles to make the page look better. Copy the below CSS styles to the &lt;code&gt;index.css&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;#e351ad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;410px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9a00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9a00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you should see the browser tab refreshes to load the latest app with the style changes. Looks better, huh?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHGKe7bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620571063700/y2qFPlXKA.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHGKe7bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620571063700/y2qFPlXKA.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#create-a-success-page"&gt;
  &lt;/a&gt;
  Create a Success page
&lt;/h1&gt;

&lt;p&gt;Now it's time to create a success page to thank our subscribers with a message. First, create a file called &lt;code&gt;success.html&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Success&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       Hey, Thanks for subscribing. You are awesome!
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Also, add the following style to the &lt;code&gt;index.css&lt;/code&gt; page to make the message look better.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.success&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e351ad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e351ad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Great! Now try out the subscription form. Once you fill up the details and hit the &lt;code&gt;Subscribe&lt;/code&gt; button, we will see a success page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVu6L82R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620708456549/yi9yokj3e.gif%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVu6L82R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620708456549/yi9yokj3e.gif%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="demo_1.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note, we have not done many form validations here. That's purely intentional and out of the scope of the article. However, I encourage you to include it as you wish.&lt;/p&gt;

&lt;p&gt;At this stage, please create a repository in your favorite Git provider(like GitHub) and push the source code done so far. Here is mine, &lt;a href="https://github.com/atapas/jamstack-subscription-form"&gt;https://github.com/atapas/jamstack-subscription-form&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up-netlify"&gt;
  &lt;/a&gt;
  Set up Netlify
&lt;/h1&gt;

&lt;p&gt;We have a working subscription form, but we are not doing anything with the form data yet. Next, we will use the &lt;code&gt;Netlify Form&lt;/code&gt; to perform all the heavy lifting to handle data and perform actions using it. Before that, let us set up &lt;code&gt;Netlify&lt;/code&gt; to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; is a powerful serverless platform to build, deploy web applications with all the advantages of CI/CD and scalable hosting. It has a Git-based workflow that keeps your code changes integrated continuously with the deployment. In addition, the services like functions, forms are there to use instantly without having them built in-house.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.netlify.com/signup"&gt;Create an account&lt;/a&gt; with Netlify and log in. Now click on the button to create a new site from Git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCyjW-yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572256286/lwNYja6VX.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCyjW-yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572256286/lwNYja6VX.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="1_netlify.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select your Git provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LshhTJp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572266507/C5m4eiAsD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LshhTJp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572266507/C5m4eiAsD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="2_netlify.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, select the project you want to deploy to Netlify. In this case, it is the &lt;code&gt;jamstack-subscription-form&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0O9z67h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572276031/MVs7zRX_Z.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0O9z67h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572276031/MVs7zRX_Z.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="3_netlify.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the setting window, provide the base directory as &lt;code&gt;src&lt;/code&gt; and click on the &lt;code&gt;Deploy site&lt;/code&gt; button.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XpUrUar---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572289768/PP1BmSMdu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpUrUar---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620572289768/PP1BmSMdu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="4_netlify.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will take a few seconds and make your site available to use. Now you can access the subscription form using a URL provided by Netlify.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#netlify-forms"&gt;
  &lt;/a&gt;
  Netlify Forms
&lt;/h2&gt;

&lt;p&gt;Netlify's built-in form handling is enabled for your account by default. However, we need to make a couple of changes in our form for netlify to recognize and parse it correctly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;data-netlify="true"&lt;/code&gt; or a &lt;code&gt;netlify&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. It will enable form submissions in your Netlify site admin panel.&lt;/li&gt;
&lt;li&gt;You must have a &lt;code&gt;name&lt;/code&gt; attribute for your form. It determines the form name to show in the netlify interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let's edit our subscription form to include &lt;code&gt;data-netlify="true"&lt;/code&gt;. Also, notice the form name is &lt;code&gt;subscription&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; 
   &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/success"&lt;/span&gt; 
   &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; 
   &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"subscription"&lt;/span&gt; 
   &lt;span class="na"&gt;data-netlify=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it. Now push your changes to the source code repository. You will see the build started in Netlify. Once the build is over and your recent changes are published, please access the app(using the app URL provided by Netlify) in the browser. Now fill in the form details and submit it.&lt;/p&gt;

&lt;p&gt;Browse to the &lt;code&gt;Forms&lt;/code&gt; tab from the Netlify interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybCzfw71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620723018913/hXg3_aq56.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybCzfw71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620723018913/hXg3_aq56.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see an entry with the form name. In our case, it is &lt;code&gt;subscription&lt;/code&gt; under the &lt;code&gt;Active forms&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pOBDIYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620723106093/w7Ro4a30A.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pOBDIYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620723106093/w7Ro4a30A.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it to see the form data we have submitted a while back. You can find the form data and a few valuable options like &lt;code&gt;Download as CSV&lt;/code&gt;, &lt;code&gt;Mark as spam&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQnN1dY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620724435971/mYXXokxo6.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQnN1dY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620724435971/mYXXokxo6.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#handling-spam-filters"&gt;
  &lt;/a&gt;
  Handling Spam Filters
&lt;/h2&gt;

&lt;p&gt;Netlify uses &lt;a href="https://akismet.com/"&gt;Akismet&lt;/a&gt; to provide spam filters for all your form submissions. The integration with Akismet, the industry leader in spam detection, is enabled by default. However, we can add a &lt;code&gt;honeypot field&lt;/code&gt;, a &lt;code&gt;reCAPTCHA 2&lt;/code&gt;, or both for extra protection. Let us see an example of adding a honeypot field.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;honeypot field&lt;/code&gt; is a hidden form field that a bot will fill up along with other fields in the form. As humans can not see this field, we can safely reject the submission that has the honeypot field filled up. We can add the &lt;code&gt;netlify-honeypot&lt;/code&gt; attribute to our &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; with the name of our hidden field. &lt;/p&gt;

&lt;p&gt;Let's add a hidden field anywhere inside the form. Add a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag and an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; text field inside it with the name &lt;code&gt;bot-field&lt;/code&gt;. Also, add a class called &lt;code&gt;hidden&lt;/code&gt; to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element to hide it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Don’t fill this out if you’re human: 
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, add &lt;code&gt;netlify-honeypot="bot-field"&lt;/code&gt; to the form. Now the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; has following attributes,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; 
    &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/success"&lt;/span&gt; 
    &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; 
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"subscription"&lt;/span&gt; 
    &lt;span class="na"&gt;data-netlify=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; 
    &lt;span class="na"&gt;netlify-honeypot=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Last, add the CSS style for the class &lt;code&gt;hidden&lt;/code&gt; in the &lt;code&gt;index.css&lt;/code&gt; file,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hidden&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it. We have enabled the extra protection with the &lt;code&gt;honeypot field&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enable-notifications"&gt;
  &lt;/a&gt;
  Enable Notifications
&lt;/h2&gt;

&lt;p&gt;We can enable notifications such that when a form is submitted, we get an email, a notification in the slack channel, or an external service of our choice. Let's enable the e-mail notification for our subscription form.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;Settings and usage&lt;/code&gt; button inside the &lt;code&gt;Forms&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7xb5bpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727271225/1WpNEDV80.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7xb5bpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727271225/1WpNEDV80.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Form notifications&lt;/code&gt; section and click on the &lt;code&gt;Add notification&lt;/code&gt; menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpgcAjl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727382015/Imiu-IpVZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpgcAjl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727382015/Imiu-IpVZ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;code&gt;Email notification&lt;/code&gt; option. Then, please fill-up the details with an e-mail address, form name, and save it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mqaitUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727899040/GOYcCZ4X2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mqaitUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727899040/GOYcCZ4X2.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all. Whenever someone fills up the subscription form and submits it, you will receive an email notification on the configured e-mail id. Here is a sample e-mail,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHGu199k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727635177/ZYxu32vAT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHGu199k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620727635177/ZYxu32vAT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h1&gt;

&lt;p&gt;Thank you for reading so far. I hope you enjoyed following it and made the subscription form working with &lt;code&gt;Netlify Forms&lt;/code&gt;. In the next part, we will use &lt;code&gt;Fauna&lt;/code&gt; to store the form data. We will also see the &lt;code&gt;Netlify Function&lt;/code&gt; play an important role there.&lt;/p&gt;

&lt;p&gt;Please feel free to clone/fork the repository and try it out. Then, stay tuned for part 2.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atapas"&gt;
        atapas
      &lt;/a&gt; / &lt;a href="https://github.com/atapas/jamstack-subscription-form"&gt;
        jamstack-subscription-form
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Let's build a subscription form with the Jamstack concept using Netlify Forms, Functions, and Fauna data-store.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
jamstack-subscription-form&lt;/h1&gt;
&lt;p&gt;Let's build a subscription form using the &lt;code&gt;Jamstack&lt;/code&gt; concept. &lt;code&gt;Netlify&lt;/code&gt; comes with the form handling capability that allows you achieve the power of Jamstack for form handling.&lt;/p&gt;
&lt;p&gt;With this project, we will build a simple(yet powerful) &lt;code&gt;Subscription&lt;/code&gt; form and submit it using the Netlify forms capability. We will use the &lt;code&gt;Netlify Functions&lt;/code&gt; to handle the form data and store it in a serverless data store called &lt;code&gt;Fauna&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
Want to Motivate?&lt;/h1&gt;
&lt;p&gt;Have you foint this project helpful? You can give a star(⭐) to let me know, you care.&lt;/p&gt;
&lt;h2&gt;
Many Thanks to all the &lt;code&gt;Stargazers&lt;/code&gt; who has supported this project with stars(⭐)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/atapas/jamstack-subscription-form/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/8b7e5091a622ccc4472108711fdbe09d57f6a9a8b5417b2d17bb53ba366e8ec9/68747470733a2f2f7265706f726f737465722e636f6d2f73746172732f6174617061732f6a616d737461636b2d737562736372697074696f6e2d666f726d" alt="Stargazers repo roster for @atapas/jamstack-subscription-form"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
How to run this project?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Clone this repository and change the directory to &lt;code&gt;jamstack-subscription-form&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;netlify-cli&lt;/code&gt;. &lt;a href="https://docs.netlify.com/cli/get-started/" rel="nofollow"&gt;Use this link&lt;/a&gt; to create an account with Netlify and install the CLI tool.&lt;/li&gt;
&lt;li&gt;Create an account with &lt;a href="https://fauna.com/" rel="nofollow"&gt;Fauna&lt;/a&gt;. Create a database. Upload the &lt;a href="https://raw.githubusercontent.com/atapas/jamstack-subscription-form/main//db/schema.gql"&gt;schema&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atapas/jamstack-subscription-form"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here are a few additional reads you may find helpful,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/forms/setup/"&gt;Netlify Forms - Official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/series/jamstack-for-all"&gt;Jamstack for All - The series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;br&gt;
If you enjoyed this article or found it helpful, let's connect. You can find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt; sharing thoughts, tips, and code practices. 

&lt;p&gt;Do you know, you can support my work by sponsoring me? Please &lt;a href="https://blog.greenroots.info/sponsor"&gt;check this out&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>javascript</category>
      <category>html</category>
      <category>netlify</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / Currying 🥘</title>
      <author>Nikita Kozlov</author>
      <pubDate>Fri, 14 May 2021 09:21:47 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
What is currying in JavaScript?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
It is a technique used to convert a function that takes multiple arguments into a chain of functions where every only takes one argument.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
Currying is basically all about &lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-higher-order-functions-38kb"&gt;Higher Order Functions&lt;/a&gt;. It is an application of JavaScript's ability to return functions from other functions.&lt;/p&gt;

&lt;p&gt;We are replacing a function that takes &lt;code&gt;n&lt;/code&gt; arguments with a set of &lt;code&gt;n&lt;/code&gt; functions, which applied one by one gives exactly the same answer as original functions.&lt;/p&gt;

&lt;p&gt;We can learn it by example right away. Btw it feels like this one is the most common one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// regular implementation&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;

&lt;span class="c1"&gt;// curried implementation&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it. This is what currying is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;br&gt;
At first glance, it may look a bit weird 🤯 Why do we ever need to call a function separating arguments?&lt;/p&gt;

&lt;p&gt;You can think of it as a function preparation for execution. If you have some common operation, e.g. getting an object property, you can move it to a curried version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// user['id'] can be refactored with&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Or you can go even further and implement generic getter&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So functions like this can be joined to some helpers library. And here is &lt;a href="https://www.learnrxjs.io/learn-rxjs/operators/transformation/pluck"&gt;RxJS.pluck&lt;/a&gt; and here is &lt;a href="https://ramdajs.com/docs/#pluck"&gt;Ramda.pluck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a good curry 🥘&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;wiki/Currying&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-promise-4fhl"&gt;JS interview in 2 minutes / Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-this-3hlm"&gt;JS interview in 2 minutes / this 🤯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-encapsulation-oop-2ico"&gt;JS interview in 2 minutes / Encapsulation (OOP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Automatically publish a Flutter Web App on GitHub Pages</title>
      <author>Jan Mewes</author>
      <pubDate>Fri, 14 May 2021 09:14:58 +0000</pubDate>
      <link>https://dev.to/janux_de/automatically-publish-a-flutter-web-app-on-github-pages-3m1f</link>
      <guid>https://dev.to/janux_de/automatically-publish-a-flutter-web-app-on-github-pages-3m1f</guid>
      <description>&lt;p&gt;This blog post describes how to automatically publish a Flutter Web app to GitHub pages after every change in the repository.&lt;/p&gt;

&lt;p&gt;It is assumed that you already know how to create and build a &lt;a href="https://flutter.dev/docs/get-started/web"&gt;Flutter Web app&lt;/a&gt;. Further, it is assumed that your source Flutter source code is located in a Git repository hosted by GitHub. The GitHub Pages feature is available for free on public repositories but requires a paid plan for private repositories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publish-to-ghpages-branch"&gt;
  &lt;/a&gt;
  Publish to gh-pages branch
&lt;/h2&gt;

&lt;p&gt;GitHub offers to run a script when there is a change on your branches or a tag was created. This feature is called &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. In the spirit of the "Don't repeat yourself" principle, GitHub Actions can be grouped into modules. So, in this way, a group of steps can be grouped into one module which can then be used without.&lt;/p&gt;

&lt;p&gt;There is already a GitHub Action available with which the goal of the blog post can be reached:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/deploy-flutter-web-app-to-github-pages"&gt;https://github.com/marketplace/actions/deploy-flutter-web-app-to-github-pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may refer to the &lt;a href="https://github.com/erickzanardo/flutter-gh-pages/blob/main/action.yml"&gt;action.yml&lt;/a&gt; of this GitHub Action to understand what it is doing.&lt;/p&gt;

&lt;p&gt;What you need to do to apply this action is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a directory ".github/workflows" in your repository&lt;/li&gt;
&lt;li&gt;In the "workflows" directory, create a &lt;a href="https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started/"&gt;YAML&lt;/a&gt; file, e.g . "publish.yaml"
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish to GitHub Pages&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;subosito/flutter-action@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;erickzanardo/flutter-gh-pages@v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells GitHub to trigger this action whenever it sees a new change on the "main" branch. Then it creates a new Ubuntu VM on which the action will run. The first actual step will be the checkout of your repository. Then it installs Flutter on the VM. Finally, it builds the web app, creates a "gh-pages" branch in your repository, and commits the web app there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-github-pages"&gt;
  &lt;/a&gt;
  Enable GitHub Pages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is another feature of GitHub. It provides you a web server for static HTML files and a subdomain. The way to publish a website there is to enable the feature for a repository and then to tell it where to look for the files. Any branch can be the source of the website, and in this branch, you can choose whether you want to place the website in the repository root ("/") or in the "/docs" directory.&lt;/p&gt;

&lt;p&gt;Go to the "Pages" settings, select the "gh-pages" branch as the source, keep the directory root, and then click on "Save".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkyA5Wf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdzhhuulhfdjybwg1soi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkyA5Wf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdzhhuulhfdjybwg1soi.gif" alt="Enable GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The URL at which your website will be published is displayed in the banner above the source configuration. Mind that the initial rendering of the website may take a while. Afterwards, published updates will be available within 1-10 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-base-url"&gt;
  &lt;/a&gt;
  Change base URL
&lt;/h2&gt;

&lt;p&gt;If you are not using a custom domain for your GitHub Pages, then, by default, your URL will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first part of the URL is the owner of the repository which can be an organization or a personal account. In this example, the owner is the organization "ksch-workflows". The domain of the URL is "github.io". Then after the domain is the resource path with the repository name. In this example, it is "registration-desk".&lt;/p&gt;

&lt;p&gt;So, the "index.html" file of the website will be available under the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/registration-desk/index.html"&gt;https://ksch-workflows.github.io/registration-desk/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem with this is that the Flutter app, by default, assumes that it is located directly under the domain, not under a resource path. So, it assumes that the "index.html" file of the website will be available under a URL like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/index.html"&gt;https://ksch-workflows.github.io/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result of this is that links to the root of the website will lead to "&lt;a href="https://ksch-workflows.github.io/"&gt;https://ksch-workflows.github.io/&lt;/a&gt;", not to "&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;". So, when the page tries to load the "main.dart.js" file which will render the page, then it tries to get it from "&lt;a href="https://ksch-workflows.github.io/main.dart.js"&gt;https://ksch-workflows.github.io/main.dart.js&lt;/a&gt;" which will yield a 404 Not Found error. The result of this is that you would see an empty page on the attempt to open "&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;" in a browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WGZNEIHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlucju1a4vbuejl3k9cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WGZNEIHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlucju1a4vbuejl3k9cf.png" alt="404 Not Found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution for this is to change the base URL on the start page of the Flutter app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;diff --git a/web/index.html b/web/index.html
index fd7cfeb..7c588d9 100644
-------- a/web/index.html
+++ b/web/index.html
@@ -11,7 +11,7 @@
     Fore more details:
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
   --&amp;gt;
-  &amp;lt;base href="/"&amp;gt;
+  &amp;lt;base href="/registration-desk/"&amp;gt;

   &amp;lt;meta charset="UTF-8"&amp;gt;
   &amp;lt;meta content="IE=Edge" http-equiv="X-UA-Compatible"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;"Trans Canada Keystone Oil Pipeline" by shannonpatrick17 is licensed with CC BY 2.0. To view a copy of this license, visit &lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;https://creativecommons.org/licenses/by/2.0/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>github</category>
    </item>
    <item>
      <title>I made a Twitter Clone with VueJS and Go</title>
      <author>Juan Christian</author>
      <pubDate>Fri, 14 May 2021 08:55:30 +0000</pubDate>
      <link>https://dev.to/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf</link>
      <guid>https://dev.to/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf</guid>
      <description>&lt;p&gt;Hello DEV community! 👋&lt;/p&gt;

&lt;p&gt;I've recently attempted to make a clone of Twitter using VueJS as its frontend and Golang as its backend server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JxeUXo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts1k9b9b00x0qlx4xmfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JxeUXo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts1k9b9b00x0qlx4xmfe.jpg" alt="twitter clone profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CifyeFtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgvujwsj162ra7tqls5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CifyeFtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgvujwsj162ra7tqls5.jpg" alt="twitter clone status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the github repository here for the source code:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HotPotatoC"&gt;
        HotPotatoC
      &lt;/a&gt; / &lt;a href="https://github.com/HotPotatoC/twitter-clone"&gt;
        twitter-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Twitter Clone developed using Go + Vue 3 + Vite + TailwindCSS + PostgreSQL + Redis
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/HotPotatoC/heiver"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDxmhGW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/Twitter-clone.png" alt="Logo"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Twitter Clone&lt;/h3&gt;
  &lt;p&gt;A Twitter clone created with Golang, PostgreSQL, Redis, VueJS and Vite with support for dark mode and light mode using TailwindCSS
  &lt;/p&gt;
  &lt;p&gt;Status: Some features are yet to be implemented&lt;/p&gt;

&lt;h1&gt;
Preview&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/twitterclone.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnVnneSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/twitterclone.gif" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For more check out some screenshots &lt;a href="https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/SCREENSHOTS.md"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
Features ✨
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Not all features from twitter are implemented because of how big Twitter is, Only the main features are implemented atm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Modular Architecture&lt;/li&gt;
&lt;li&gt;Database migration tool using &lt;a href="https://github.com/golang-migrate/migrate"&gt;migrate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Golang Hot-reloading using &lt;a href="https://github.com/cosmtrek/air"&gt;air&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Supports dark-mode and light-mode with &lt;a href="http://tailwindcs.com/" rel="nofollow"&gt;TailwindCSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Database seeding script using NodeJS&lt;/li&gt;
&lt;li&gt;Authentication using JWT Refresh token flow and Redis for token blacklisting&lt;/li&gt;
&lt;li&gt;Strongly typed Vuex store&lt;/li&gt;
&lt;li&gt;List Tweets feed&lt;/li&gt;
&lt;li&gt;Create Tweets with images&lt;/li&gt;
&lt;li&gt;Retweets&lt;/li&gt;
&lt;li&gt;Reply to Tweets or reply to another reply!&lt;/li&gt;
&lt;li&gt;Like Tweets&lt;/li&gt;
&lt;li&gt;Follow users&lt;/li&gt;
&lt;li&gt;Images &amp;amp; Media uploads stored in AWS S3 Buckets&lt;/li&gt;
&lt;li&gt;Up to 4 images in a single tweet with the same layout as Twitter&lt;/li&gt;
&lt;li&gt;Crop profile image&lt;/li&gt;
&lt;li&gt;Edit Profile Details&lt;/li&gt;
&lt;li&gt;Edit Profile…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HotPotatoC/twitter-clone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Please note that some features are yet to be implemented and i would love to hear your feedback!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>go</category>
    </item>
    <item>
      <title>Solution: Flatten Binary Tree to Linked List</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 14 May 2021 08:49:02 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-flatten-binary-tree-to-linked-list-599p</link>
      <guid>https://dev.to/seanpgallivan/solution-flatten-binary-tree-to-linked-list-599p</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1207642"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-114-medium-flatten-binary-tree-to-linked-list"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/"&gt;Leetcode Problem #114 (&lt;em&gt;Medium&lt;/em&gt;): Flatten Binary Tree to Linked List&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, flatten the tree into a "linked list":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The "linked list" should use the same &lt;code&gt;TreeNode&lt;/code&gt; class where the &lt;code&gt;right&lt;/code&gt; child pointer points to the next node in the list and the &lt;code&gt;left&lt;/code&gt; child pointer is always &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; The "linked list" should be in the same order as a &lt;strong&gt;pre-order traversal&lt;/strong&gt; of the binary tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [1,2,5,3,4,null,6]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,null,2,null,3,null,4,null,5,null,6]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4p_h8Sqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = []&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[0]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the tree is in the range &lt;code&gt;[0, 2000]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;O(1) Space Approach:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to properly connect the &lt;strong&gt;linked list&lt;/strong&gt;, we'll need to start at the bottom and work up. This means that we'll need to move in &lt;em&gt;reverse&lt;/em&gt; &lt;strong&gt;pre-order traversal&lt;/strong&gt; order through the &lt;strong&gt;binary tree&lt;/strong&gt;. Since pre-order traversal is normally &lt;strong&gt;"node, left, right"&lt;/strong&gt;, we'll have to move in the reverse order of &lt;strong&gt;"right, left, node"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to complete this solution in &lt;strong&gt;O(1) space&lt;/strong&gt;, we won't be able to conveniently backtrack via a &lt;strong&gt;stack&lt;/strong&gt;, so the key to this solution will be to retreat all the way back up to the &lt;strong&gt;root&lt;/strong&gt; each time we reach a leaf. This will push the &lt;strong&gt;time complexity&lt;/strong&gt; to &lt;strong&gt;O(N^2)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll want to first set up &lt;strong&gt;head&lt;/strong&gt; and &lt;strong&gt;curr&lt;/strong&gt; to keep track of the head of the linked list we're building and the current node we're visiting. We'll know we're finished once &lt;strong&gt;head = root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To follow the reverse pre-order traversal order, we'll first attempt to go right and then left. Since we're backtracking to &lt;strong&gt;root&lt;/strong&gt;, however, we'll eventually run back into the same node that we've set as &lt;strong&gt;head&lt;/strong&gt; doing this. To prevent this, we'll stop &lt;em&gt;before&lt;/em&gt; moving to the &lt;strong&gt;head&lt;/strong&gt; node and sever the connection.&lt;/p&gt;

&lt;p&gt;Now that we can't run into already-completed territory, we can be confident that any leaf we move to must be the next value for &lt;strong&gt;head&lt;/strong&gt;, so we should connect it to the old &lt;strong&gt;head&lt;/strong&gt;, update &lt;strong&gt;head&lt;/strong&gt;, and reset back to the &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As noted before, once &lt;strong&gt;head = root&lt;/strong&gt;, we've finished our traversal and can exit the function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N^2)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the number of &lt;strong&gt;nodes&lt;/strong&gt; in the binary tree, due to repeated backtracking to root&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Recursive Approach:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to properly connect the &lt;strong&gt;linked list&lt;/strong&gt;, we'll need to start at the bottom and work up. This means that we'll need to move in &lt;em&gt;reverse&lt;/em&gt; &lt;strong&gt;pre-order traversal&lt;/strong&gt; order through the &lt;strong&gt;binary tree&lt;/strong&gt;. Since pre-order traversal is normally &lt;strong&gt;"node, left, right"&lt;/strong&gt;, we'll have to move in the reverse order of &lt;strong&gt;"right, left, node"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Binary tree traversal is prime ground for a &lt;strong&gt;recursive&lt;/strong&gt; solution, so let's define a helper (&lt;strong&gt;revPreOrder&lt;/strong&gt;) for the purpose. We'll also keep a global variable &lt;strong&gt;head&lt;/strong&gt; to keep track of the head of the linked list as we work our way backwards.&lt;/p&gt;

&lt;p&gt;Per our reverse pre-order traversal approach, we want to recursively work down the right path first then the left path, if they exist. Once we've flattened the left and right paths recursively, &lt;strong&gt;head&lt;/strong&gt; should at this point be equal to the next node after the current one, so we should set it as &lt;strong&gt;node.right&lt;/strong&gt;. We shouldn't forget to set &lt;strong&gt;node.left&lt;/strong&gt; to &lt;strong&gt;null&lt;/strong&gt;, as well.&lt;/p&gt;

&lt;p&gt;Once we're done with the current node, we can update &lt;strong&gt;head&lt;/strong&gt; to &lt;strong&gt;node&lt;/strong&gt; and allow the recursion to complete and move back up to the next layer. Once the recursion stack is exhausted, &lt;strong&gt;head&lt;/strong&gt; will be equal to &lt;strong&gt;root&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;Lastly, we have to deal with an edge case of an empty &lt;strong&gt;root&lt;/strong&gt;, so we can just make sure to only call the initial recursion on &lt;strong&gt;root&lt;/strong&gt; if &lt;strong&gt;root&lt;/strong&gt; actually is a node. There is no need for a &lt;strong&gt;return&lt;/strong&gt; statement, because the test suite will evaluate &lt;strong&gt;root&lt;/strong&gt; directly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the number of &lt;strong&gt;nodes&lt;/strong&gt; in the binary tree&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for the &lt;strong&gt;recursion stack&lt;/strong&gt;, which is as long as the maximum depth of the binary tree, which can go up to &lt;strong&gt;N&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
  </channel>
</rss>
