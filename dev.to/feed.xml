<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to not become a better developer</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Thu, 23 Sep 2021 15:20:44 +0000</pubDate>
      <link>https://dev.to/byteslash/how-to-not-become-a-better-developer-597h</link>
      <guid>https://dev.to/byteslash/how-to-not-become-a-better-developer-597h</guid>
      <description>&lt;p&gt;The world has plenty of good programmers. So how can you stand out and be the worst one? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UNKtAya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JxRanFvDRd8AAAAC/im-different-2chainz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UNKtAya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JxRanFvDRd8AAAAC/im-different-2chainz.gif" alt="different"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here are some points on how &lt;em&gt;**not *&lt;/em&gt;* to become a better developer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-multiple-programming-languages-at-once"&gt;
  &lt;/a&gt;
  Learn multiple programming languages at once
&lt;/h3&gt;

&lt;p&gt;Good programmers focus only on one language and try to learn it properly. Learning one language at once helps you focus on it properly and know what exactly is going on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shoot-first-think-later"&gt;
  &lt;/a&gt;
  Shoot first, think later
&lt;/h3&gt;

&lt;p&gt;Why think about the problem, solve it, and then type the code, when you can type gibberish again and again and pray it works the nth time?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watching-tutorials-than-doing-projects"&gt;
  &lt;/a&gt;
  Watching tutorials than doing Projects
&lt;/h3&gt;

&lt;p&gt;Do you know how fun it is to just watch countless tutorials on a sofa, without taking notes? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-your-cocoon"&gt;
  &lt;/a&gt;
  Stay in your cocoon
&lt;/h3&gt;

&lt;p&gt;Socializing, building networks, joining communities? NAH. Better stay in my cocoon and game all day. Just never touch social media platforms like discord, Instagram, Twitter for good use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-accept-feedback"&gt;
  &lt;/a&gt;
  Don’t Accept Feedback
&lt;/h3&gt;

&lt;p&gt;Only good programmers ask others from various communities, to give feedback on what they made. This is precisely what you should avoid!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#think-you-know-everything"&gt;
  &lt;/a&gt;
  Think you know everything
&lt;/h3&gt;

&lt;p&gt;Always think you know everything and never Google a problem or try to research about it. You know it, spend 10 days on a bug instead of getting the answer in 10 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-contribute-to-open-source"&gt;
  &lt;/a&gt;
  Don't contribute to open source
&lt;/h3&gt;

&lt;p&gt;Why contribute to the open-source projects and have a look at how their code? Just look at your code and follow your code practice!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-document-your-journey"&gt;
  &lt;/a&gt;
  Don't document your journey
&lt;/h3&gt;

&lt;p&gt;A great thing that good devs do is documenting their journey.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teaching is a great way to keep learning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But this is what are we are trying not to do!&lt;/p&gt;

&lt;p&gt;Finally,&lt;br&gt;
&lt;strong&gt;Don't follow me for more awesome tips and tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/gnBPzpNF"&gt;Join the Byteslash Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tips</category>
      <category>dev</category>
      <category>devtips</category>
    </item>
    <item>
      <title>Why Switch Statement is Bad</title>
      <author>eslamelkholy</author>
      <pubDate>Thu, 23 Sep 2021 14:32:51 +0000</pubDate>
      <link>https://dev.to/eslamelkholy/why-switch-statement-is-bad-3hfi</link>
      <guid>https://dev.to/eslamelkholy/why-switch-statement-is-bad-3hfi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-switch-statement-is-bad"&gt;
  &lt;/a&gt;
  Why Switch Statement Is Bad
&lt;/h2&gt;

&lt;p&gt;First of all Switch Statement is not bad but sometimes violates Clean Code Principles&lt;br&gt;
So Switch statement should be used very carefully. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-switch-statement-is-sometimes-bad"&gt;
  &lt;/a&gt;
  Why Switch Statement is Sometimes Bad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Violates Open-Closed Principle S(O)LID&lt;/strong&gt;
When adding a new Functionality with a new requirements so i will violate the Open-Closed Principle&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintenance&lt;/strong&gt;&lt;br&gt;
By time with a new Requirements it will be very hard to maintain it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bad Code Smell &amp;amp; Bad OOP Style&lt;/strong&gt; &lt;br&gt;
containing lots of redundant codes and the code going to be messy with time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#old-example"&gt;
  &lt;/a&gt;
  Old Example
&lt;/h3&gt;

&lt;p&gt;this Example Violates &lt;strong&gt;Open-Closed&lt;/strong&gt; when we want to add new Functionality at this Function&lt;br&gt;
also we have lots of redundant codes like Order Msg Data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;orderData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CHECKOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CHECKOUT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAYMENT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAYMENT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DELIVER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DELIVER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Using switch on a type is very bad OOP Style how can we refactor this code ? &lt;br&gt;&lt;/p&gt;

&lt;p&gt;The best solution of this is Using &lt;strong&gt;( Polymorphism + Strategy Pattern )&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-below-code-is-a-solution-with-polymorphism-amp-strategy-pattern"&gt;
  &lt;/a&gt;
  The Below Code is a Solution with Polymorphism &amp;amp; Strategy Pattern
&lt;/h3&gt;

&lt;p&gt;1- Initialize IOrder Interface &amp;amp; Other Payment Processors which have different business logic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CHECKOUT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Payment&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAYMENT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Deliver&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DELIVER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Action`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2- Add Strategy Design Pattern Which Holds All Payment Processors Objects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OrderStrategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;CHECKOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;PAYMENT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;DELIVER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IOrder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CHECKOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAYMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DELIVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Deliver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3- Now Our getOrderData function clean and Ready to use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ORDER_STATUS&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;OrderData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrderStrategy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;orderStrategy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getOrderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Switch Statement is not bad at all but sometimes it violates OOP, also Breaks Open-Closed Principle &lt;br&gt;&lt;br&gt;
and it's going to be very hard to maintain and and refactor our Code in the future is going to be like a rock in our back &lt;br&gt; and the best solution to handle&lt;br&gt;
these staff is to use &lt;strong&gt;Polymorphism and Strategy Pattern&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>oop</category>
      <category>designpatterns</category>
      <category>architecture</category>
      <category>polymorphism</category>
    </item>
    <item>
      <title>Higher-Order Functions - JavaScript Concepts Simplified</title>
      <author>Thisura Thenuka</author>
      <pubDate>Thu, 23 Sep 2021 14:01:20 +0000</pubDate>
      <link>https://dev.to/thisurathenuka/higher-order-functions-javascript-concepts-simplified-49ok</link>
      <guid>https://dev.to/thisurathenuka/higher-order-functions-javascript-concepts-simplified-49ok</guid>
      <description>&lt;p&gt;Hello guys, I'm back with another article in my &lt;strong&gt;JavaScript Concepts Simplified&lt;/strong&gt; series. Today, I'm going to go through the concept of Higher-Order Functions. &lt;/p&gt;

&lt;p&gt;This is not necessarily specific to JavaScript per se. But it is an essential concept you must learn when going forward with JavaScript. If you read my article regarding closures, you do already have some experience with higher-order functions even if you do not have an idea.&lt;/p&gt;

&lt;p&gt;The term, &lt;strong&gt;Higher-Order Functions&lt;/strong&gt; aka &lt;strong&gt;HOF&lt;/strong&gt;s, is said to be  &lt;a href="https://softwareengineering.stackexchange.com/questions/186035/who-first-coined-the-term-higher-order-function-and-or-first-class-citizen"&gt;coined way back in 1891&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useful-terminology"&gt;
  &lt;/a&gt;
  Useful Terminology
&lt;/h1&gt;

&lt;p&gt;Before learning Higher-Order functions, let's quickly check out few other concepts that would aid you in understanding higher-order functions better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Functional programming (often abbreviated FP) is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects. Functional programming is declarative rather than imperative, and the application state flows through pure functions. Contrast with object-oriented programming, where application state is usually shared and colocated with methods in objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0"&gt;Source - Medium&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firstclass-functions"&gt;
  &lt;/a&gt;
  First-Class Functions
&lt;/h2&gt;

&lt;p&gt;In a programming language where functions are treated as variables, it is said to have &lt;strong&gt;First-Class functions&lt;/strong&gt;. In such a language like JS, a function can be passed as an argument to other functions, can be assigned as a value to a variable and can be returned by another function&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-higherorder-function"&gt;
  &lt;/a&gt;
  What is a Higher-Order Function?
&lt;/h1&gt;

&lt;p&gt;A Higher-Order Function is a function that does at least one of the following things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Takes one or more functions as arguments&lt;/li&gt;
&lt;li&gt;Returns a function as a result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the functions that are not higher-order functions are called &lt;strong&gt;first-order functions&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;JavaScript has a list of inbuilt HOFs as well as we can write our own HOFs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inbuilt-higherorder-functions"&gt;
  &lt;/a&gt;
  Inbuilt Higher-Order Functions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#array-filter-method"&gt;
  &lt;/a&gt;
  Array filter method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numbers = [1, 2, 3, 4, 5, 6, 7]
const smallerThanFive = x =&amp;gt; x &amp;lt; 5
console.log(numbers.filter(smallerThanFive)) // [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we are &lt;em&gt;passing a function&lt;/em&gt; called &lt;strong&gt;smallerThanFive&lt;/strong&gt; to the filter method as the callback function. Read more on the filter method  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-find-method"&gt;
  &lt;/a&gt;
  Array find method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const innings = [
    {player: "Sanga", score: 59},
    {player: "Mahela", score: 70},
    {player: "Angie", score: 85}
];
const higherThanSeventyFive = inning =&amp;gt; inning.score &amp;gt; 75
console.log(innings.find(higherThanSeventyFive)) //{ player: 'Angie', score: 85 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we are &lt;em&gt;passing a function&lt;/em&gt; called &lt;strong&gt;higherThanSeventyFive&lt;/strong&gt; to the find method as the callback function. Read more on the find method &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-map-method"&gt;
  &lt;/a&gt;
  Array map method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numbers = [1, 2, 3, 4]
const multiplyByTwo = x =&amp;gt; x * 2
console.log(numbers.map(multiplyByTwo)) // [2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we are &lt;em&gt;passing a function&lt;/em&gt; called &lt;strong&gt;multiplyByTwo&lt;/strong&gt; to the map method as the callback function. Read more on the map method  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list goes on and on. I'd like to recommend you to check out the  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN Docs articles on Array methods&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-higherorder-functions"&gt;
  &lt;/a&gt;
  Custom Higher-Order Functions
&lt;/h2&gt;

&lt;p&gt;Since all the above examples were about passing functions as parameters, let's make our own higher-order function return a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply = (firstValue) =&amp;gt; (secondValue) =&amp;gt; firstValue * secondValue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me write this without the arrow function syntax to make things a bit clearer for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply (firstValue) {
  return function (secondValue){
    return firstValue * secondValue;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;multiply&lt;/strong&gt; function gets the &lt;strong&gt;firstValue&lt;/strong&gt; as an argument and returns a function that asks for the &lt;strong&gt;secondValue&lt;/strong&gt; as an argument. Here is how you call this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multiply(10)(20) //Returns 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of you might be thinking, "&lt;em&gt;We can just write this in a single function and pass both values into that. Why did you use a higher-order function for this?&lt;/em&gt;". Yes, you are right. There is no need for writing a higher-order function to multiply two values. &lt;/p&gt;

&lt;p&gt;But, if you want to make the inner functions not accessible to the outside, you can write a higher-order function. And learning to write higher-order functions would save you a lot of time.&lt;/p&gt;

&lt;p&gt;I know this could be hard to grasp, especially if you are new to functional programming. I believe you understand what is happening in the above function. But some of you might not still understand the thinking process behind writing a higher-order function like this. &lt;/p&gt;

&lt;p&gt;Let me take you through the thinking process so that you can attempt writing your own higher-order function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explaining-the-thought-process"&gt;
  &lt;/a&gt;
  Explaining The Thought Process
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply (firstValue) {
  //Do some stuff with firstValue
}

multiply(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you have a normal function that takes in an argument called &lt;strong&gt;firstValue&lt;/strong&gt;. And then you realize that you have to write another function, but you don't want to make it accessible from the outside. So, what are your options?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply (firstValue) {
  //Do some stuff with firstValue
  return function (secondValue) {
    //Do some stuff with firstValue and secondValue
  }
}

multiply(10)(20)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can write it as a nested function. But then, there is no way for you to pass arguments from outside (You can pass the value to the outer function and then pass it to the inner function. But that is not a good coding practice). What you can do is to return the inner function and take in an argument from the inner function. Likewise, you can just keep writing functions inside functions as much as you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;To sum things up, higher-order functions are just like regular functions in JavaScript. The only difference is that while the regular functions take in variables and return variables, Higher-Order functions take in functions and return functions.&lt;/p&gt;

&lt;p&gt;I hope you learned something valuable from Today's article. If you liked it, drop a like and follow me so that you don't miss the upcoming articles. And as always, stay safe guys 😷&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Best Programming Stuff</title>
      <author>niksin</author>
      <pubDate>Thu, 23 Sep 2021 13:51:27 +0000</pubDate>
      <link>https://dev.to/stuffsuggested/best-programming-stuff-bhn</link>
      <guid>https://dev.to/stuffsuggested/best-programming-stuff-bhn</guid>
      <description>&lt;p&gt;I  have seen some of the programming stuff article on internet as usual sharing it with you guys...Some of the websites are having affiliate links&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-best-monitors-for-programming"&gt;
  &lt;/a&gt;
  1. Best Monitors For Programming
&lt;/h2&gt;

&lt;p&gt;When programming or coding for long periods, it's essential to have a comfortable monitor to keep eye strain to a minimum.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://suggestedstuff.com/best-monitors-for-programming-in-india-2021/"&gt;Best Monitor For Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rtings.com/monitor/reviews/best/by-usage/programming-and-coding"&gt;Best Monitor For Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-monitor-programming.html"&gt;Best Monitor for Programming &amp;amp; Coding (2021 Update)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-best-keyboard-for-programing"&gt;
  &lt;/a&gt;
  2. Best Keyboard For Programing
&lt;/h2&gt;

&lt;p&gt;As developers we don’t need many tools to work, many would say that we just need a laptop or computer, and even though that’s true, there’s a difference between having the minimum required to work to have the tools that you need to work comfortably, productive and healthy.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/best-keyboards-for-programming-in-2021.html"&gt;List of Best keyboard for programming India 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.thecrazyprogrammer.com/2020/09/best-keyboards-for-programming-in-india.html"&gt;8 Best Keyboards for Programming in India 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-keyboards.html"&gt;Best Keyboard for Programming &amp;amp; Coding in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-best-mouse-for-programing"&gt;
  &lt;/a&gt;
  3. Best Mouse For Programing
&lt;/h2&gt;

&lt;p&gt;Programmer, Gammers, and coders spend their whole day with computers. So they have comfortable things for use. A standard mouse is irritating to use for a long time. A mouse that puts your hand in an unprejudiced position is maybe the best way to reduce these problems you just have to find a vertical or trackball mouse. Here, I've listed the Best mouse for programming.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/7-best-mouse-for-developer-gaming-coding.html"&gt;7 Best Mouse For Developer / Gaming / Coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.guru99.com/best-mouse-programming.html"&gt;Best MOUSE for Programming &amp;amp; Coding (2021 Updated List)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.techradar.com/in/news/computing-components/peripherals/what-mouse-10-best-mice-compared-1027809"&gt;The best mouse of 2021: 10 top computer mice compared&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>stuff</category>
    </item>
    <item>
      <title>Top six dev tools to start with React</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Thu, 23 Sep 2021 13:47:21 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/top-six-dev-tools-to-start-with-react-397g</link>
      <guid>https://dev.to/koulurunandakishorereddy/top-six-dev-tools-to-start-with-react-397g</guid>
      <description>&lt;p&gt;Most web applications today are built using React.js, a JavaScript library. Approximately 8 thousand industries globally use React.js for app and web development. Even the popular Fortune 500 companies that we all are acquainted with use React.js.The list includes popular tech houses like Facebook, Instagram, WhatsApp, Netflix, etc. A number of Javascripts version are available in the market that has dominated the global web development scenario including Angular and Vue.js. To those just starting out with dev tools, it is important to understand the building blocks of React.js presented in this post.&lt;/p&gt;

&lt;h2&gt;What is React?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pe3eIQpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8mfayzal4o9py4b4rb9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pe3eIQpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8mfayzal4o9py4b4rb9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Developed by Facebook, React.js is an open source JavaScript library to build a single-page application. This layer handles apps both on the web and mobile devices. You can even create UI components using React. If Facebook can launch its news feed, and Instagram its website with an open source tool then think of its brilliancy as a JS library. Moreover, React allows developers to easily update large web applications without reloading the page. If I have to use three words to define React, I shall use; Simple, scalable, and fast. It only works on user interfaces within applications. According to the MVC template, this would correspond to the view. The library and framework can be used in combination, for example, with Angular JS in an MVC application.&lt;/p&gt;

&lt;h2&gt;What is JavaScript Library?&lt;/h2&gt;

&lt;p&gt;A JavaScript library contains prewritten JavaScript code so that JavaScript-based applications, particularly those using AJAX or other web technologies, can be developed easily and be used and reused to perform standard JavaScript functions. You can plug JavaScript library code into the rest of your project as needed. Consequently, the development will be faster, and errors were less likely to occur.&lt;/p&gt;

&lt;h2&gt;What Makes ReactJS a Go-To Tool for Web Developers?&lt;/h2&gt;

&lt;p&gt;There are a lot of open source platforms for making front-end web application development more accessible. Even Angular is contributing its bit. While with technology upgrades, it is difficult to keep a track of different web development frameworks, especially when that framework may not hold up in the long run, ReactJS has proved to be a versatile option. Take a closer look at some of React's most important features that makes it scalable and developers' personal favourite.&lt;/p&gt;

&lt;p&gt;&lt;a&gt; Further study&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;‌&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CAST AI vs. Harness: Which solution is better for Kubernetes?</title>
      <author>CAST AI</author>
      <pubDate>Thu, 23 Sep 2021 13:34:53 +0000</pubDate>
      <link>https://dev.to/castai/cast-ai-vs-harness-which-solution-is-better-for-kubernetes-3n54</link>
      <guid>https://dev.to/castai/cast-ai-vs-harness-which-solution-is-better-for-kubernetes-3n54</guid>
      <description>&lt;p&gt;Kubernetes poses several cost-related challenges. Fortunately, teams are working hard to help engineers take full advantage of Kubernetes without making their CFOs faint at the sight of their cloud bills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI and Harness are two examples of such tools. But which one is a better pick for teams looking to reduce their cloud expenses for running Kubernetes? Keep on reading to find out.&lt;/strong&gt;&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;CAST AI - cloud native cost optimization platform &lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;Harness - automated cloud cost management&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Created by cybersecurity experts, CAST AI is an ISO 27001-certified, comprehensive cloud automation platform for optimizing Kubernetes environments. Companies across e-commerce and adtech are using CAST AI to cut their cloud bills by 50% to even 90%.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Harness is a continuous integration and delivery platform for engineering and DevOps teams. The platform includes a cloud cost management module that supports cost savings in Kubernetes and offers Business Intelligence tools for analyzing cloud costs.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;CAST AI vs. Harness - quick feature comparison&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;CAST AI 🥇&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Harness&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Supported platforms&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;AWS&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Google Cloud&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Microsoft Azure&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅ (coming soon)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Cost allocation and visibility&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Detailed cost allocation&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Cost reporting&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Real-time alerts&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅ (coming soon)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Cost view across multi cloud&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅ &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Cost optimization and automation&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Automated rightsizing&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Horizontal pod autoscaling and node autoscaling&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Node autoscaling&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Cluster scheduling and termination&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Automatic bin packing &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Spot instance automation&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Full multi cloud optimization&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;✖&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;Detailed feature comparison of Harness and CAST AI&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#costvisibility"&gt;Cost visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costoptimizationandautomation"&gt;Cost optimization and automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spotinstanceautomation"&gt;Spot instance automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullmulticloudoptimization"&gt;Full multi cloud optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pricing"&gt;Pricing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="costvisibility"&gt;1. Cost visibility&lt;/h2&gt;

&lt;h3&gt;Cost allocation and reporting &lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;CAST AI&lt;/strong&gt;, cloud costs are split into project, cluster, namespace, and deployment levels. Teams may track expenses down to individual microservices and then produce a full estimate of their cluster costs. The platform uses industry-standard metrics that work with any cloud service provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt;'s cost allocation works on a per cluster and per node basis. The team intends to expand the cost dimensions disclosed to include control plane, network, egress, storage, and others. In addition, a capability for ongoing cloud cost reporting is being developed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; offers in-depth Kubernetes visibility by displaying the utilized, idle and unallocated resources per workload and cluster. This data is paired with ready-made insights to help teams make the right decisions when taking action. Users can correlate costs generated by deployments and change the in replica count, CPU, or memory configurations, with the help of cost events and specific lines of code.&lt;/p&gt;

&lt;p&gt;Moreover, &lt;strong&gt;Harness&lt;/strong&gt; visualizes cost information by projects, teams, business units, departments, and more. Users can also get periodic reports on cost and usage metrics that matter to them most. Moreover, governing usage is easier thanks to custom budgeting, spend forecasts, and accounts for cost showbacks and chargebacks.&lt;/p&gt;

&lt;h3&gt;Real-time alerting&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;CAST AI &lt;/strong&gt;team is now working on real-time warning capabilities that will tell customers when their cloud spending exceeds a certain level, reducing the danger of an out-of-control service bill.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; identifies anomalies in cloud usage and informs users every time their expenses are greater or lower than they should be. The platform achieves that by analyzing historical spend trends.&lt;/p&gt;

&lt;h3&gt;Cost view across multi cloud&lt;/h3&gt;

&lt;p&gt;Multi cloud support is a key part of cost optimization efforts since many companies nowadays use more than one cloud platform.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Allocating expenditures for multi-cloud setups is tricky, but &lt;strong&gt;CAST AI&lt;/strong&gt;'s enhanced multi cloud capabilities make it much easier. Thanks to universal metrics from Grafana and Kibana, the platform easily operates with any cloud service provider and enables cross-cloud visibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; allows users to keep track of their cost and usage across all of their cloud resources. The tool displays insights on custom, data-driven dashboards to help teams track resources across every cloud provider they use.&lt;/p&gt;

&lt;h2 id="costoptimizationandautomation"&gt;2. Cost optimization and automation&lt;/h2&gt;

&lt;h3&gt;CAST AI - fully automated cost optimization&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rightsizing with automated instance selection &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;chooses the best instance types and sizes to meet an application's requirements while reducing cloud costs. When a cluster needs extra nodes, the automation engine selects the instances with the highest performance at the lowest cost. Given that everything is automated, teams don't have to do anything extra.&lt;/p&gt;

&lt;p&gt;The platform enables multi-shape cluster formation as using the same instance shape for every node in a cluster can easily lead to overprovisioning. CAST AI offers the right mix of multiple instance types for the application's requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Horizontal pod autoscaling and node autoscaling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CAST AI automates pod scaling settings to help companies avoid overprovisioning their infrastructures. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Horizontal Pod Autoscaler calculates the optimal number of necessary pod instances based on business KPIs. If there is no work to be done, the feature gradually reduces the replica count of your pods until it reaches 0 and then removes all pods. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CAST AI also ensures that the number of nodes in use always matches the application's needs, scaling nodes up and down automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster scheduling and termination&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CAST AI automatically pauses and resumes clusters formed inside the platform so that teams avoid paying for resources they don't use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bin packing is done automatically.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes presents a financial challenge since it distributes apps evenly throughout a cluster, regardless of how cost-effective this architecture may be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; alters the default pod scheduling strategy and employs automated bin packing to maximize savings based on user preferences. The cost reductions are larger when there are fewer nodes.&lt;/p&gt;

&lt;h3&gt;Harness - recommendations combined with automation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Detailed reports and recommendations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; provides its users with in-depth reporting combined with practical suggestions for cluster utilization, rightsizing, autoscaling, cleaning underutilized or orphaned resources, and picking the optimal cloud service tier based on usage trends. Before implementing the suggestions, users can perform a what-if analysis.&lt;/p&gt;

&lt;p&gt;Another &lt;strong&gt;Harness&lt;/strong&gt; feature that helps to optimize costs is the option to set monthly, quarterly, and yearly budgets or keep track of expense variations. Thanks to precise forecasting, teams can see whether their present spend rate is within budget or on its way to surpassing it. The alerts sent at key thresholds offer some extra help in tracking the budget consumption.&lt;/p&gt;

&lt;p&gt;Harness offers a range of automated features as well. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automation in Harness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since non-production resources are usually used during working hours, teams can use the AutoStopping feature to turn them off anytime they're not in use. If workloads are running on Spot instances, there’s no risk of disruption if users execute them on coordinated spot instances.&lt;/li&gt;
&lt;li&gt;Harness Continuous Delivery provides cost information about your apps, services, and environments without the need for human tagging. This cuts a lot of time and effort teams would dedicate to this task to improve cost allocation and reporting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="spotinstanceautomation"&gt;3. Spot instance automation&lt;/h2&gt;

&lt;p&gt;Spot instances offer massive cost savings when compared to the cost of On-Demand instances - even up to 90%. But providers may reclaim these resources back at any time. That’s why automation is so important for teams that want to take advantage of Spot instances.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;CAST AI&lt;/strong&gt;, the replacement of interrupted spot instances is entirely automatic. Teams no longer have to worry about their apps running out of capacity. To achieve high availability, the platform constantly looks for the best instance alternatives and spins new instances in a fraction of a second.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; recognized the value of Spot instances as well. Its users can run workloads on fully orchestrated Spot instances without having to worry about the interruption. The platform handles this part smoothly. &lt;/p&gt;

&lt;h2 id="fullmulticloudoptimization"&gt;4. Full multi cloud optimization&lt;/h2&gt;

&lt;p&gt;The need to analyze, manage, and optimize cloud costs across providers is more important than ever as we enter the era of multi cloud. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;satisfies this requirement with a variety of multi cloud features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Active-Active Multi Cloud&lt;/strong&gt; - the platform replicates apps and data over several cloud services so that if one fails, others keep the applications running and business continuity is guaranteed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global Server Load Balancing&lt;/strong&gt; - CAST AI intelligently distributes traffic across all clouds in use, always selecting up and healthy endpoints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi cloud visibility&lt;/strong&gt; - the solution delivers cost allocation across cloud services thanks to data from Grafana and Kibana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Harness &lt;/strong&gt;currently&lt;strong&gt; &lt;/strong&gt;only offers cost visibility for AWS, Microsoft Azure, and Google Cloud.&lt;/p&gt;

&lt;h2 id="pricing"&gt;5. Pricing&lt;/h2&gt;

&lt;p&gt;Users of &lt;strong&gt;CAST AI&lt;/strong&gt; can begin by using the free Cluster Analyzer to see whether they can save money on their cloud services. The &lt;a href="https://cast.ai/blog/how-does-the-read-only-cast-ai-agent-work-and-what-data-can-it-read/"&gt;read-only agent&lt;/a&gt; evaluates their infrastructure and shares helpful recommendations. Next, you can either apply these insights manually or use automated cost optimization features. In the latter scenario, users can choose between two plans: Growth and Enterprise. CAST AI guarantees cost savings of at least 50%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harness&lt;/strong&gt; offers three plans: Free, Team, and Enterprise. Note that the first two aren’t publicly available yet. In the Team plan, Harness charges 2.25% of the customer’s annual cloud spend. In the Enterprise plan, the company charges 2.50% of yearly cloud expenses.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Overall winner&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;CAST AI&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;Both Harness and CAST AI are excellent cloud cost management platforms that improve cost visibility, allocation, monitoring, and optimization.  &lt;/p&gt;

&lt;p&gt;While Harness offers in-depth recommendations and a limited number of automation features, CAST AI provides teams with a number of handy automation features that guarantee cost savings and streamline work with Kubernetes. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;The comprehensive automation features, unique multi cloud functionality, and cloud native architecture position CAST AI as the top cloud cost optimization platform.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you prefer a hands-on approach, &lt;strong&gt;you can always run the free &lt;a href="https://console.cast.ai/?screen_hint=SIGNUP" rel="noreferrer noopener"&gt;CAST AI Cost Analyzer&lt;/a&gt;&lt;/strong&gt; to see what the platform could save you automatically. &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>googlecloud</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>☄Deep Dive into Object Oriented Programming: Part 2</title>
      <author>Sahil Bondre</author>
      <pubDate>Thu, 23 Sep 2021 13:26:31 +0000</pubDate>
      <link>https://dev.to/godcrampy/deep-dive-into-object-oriented-programming-part-2-2b4</link>
      <guid>https://dev.to/godcrampy/deep-dive-into-object-oriented-programming-part-2-2b4</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/godcrampy/deep-dive-into-object-oriented-programming-part-1-1lbi"&gt;last post&lt;/a&gt;, we started with the basics of Object-Oriented Programming. We made our first class. Added some members and methods to it and initialized an object of the Car class. It's time to dive deeper now.&lt;/p&gt;

&lt;p&gt;Earlier, we had defined a &lt;code&gt;refuelTank&lt;/code&gt; method to increase the fuel in our car. Now when I have a car object with me, no one stops me from changing the &lt;code&gt;fuelLeft&lt;/code&gt; value without using the &lt;code&gt;refuelTank&lt;/code&gt; method. I can directly access the member using the dot operator and change its value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fuelLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the real-life, I cannot magically change the fuel in my car. That's against the laws of physics. But apparently, I can do that in the software version of my car. To solve this, we'll introduce access modifiers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#access-modifiers"&gt;
  &lt;/a&gt;
  Access Modifiers
&lt;/h2&gt;

&lt;p&gt;Java has three keywords to solve this problem: &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt;. When something is &lt;code&gt;public&lt;/code&gt;, everyone can access it. When something is &lt;code&gt;private&lt;/code&gt;, it can only be accessed internally. We'll talk about &lt;code&gt;protected&lt;/code&gt; in some time.&lt;/p&gt;

&lt;p&gt;To prevent someone from magically changing the &lt;code&gt;fuelLeft&lt;/code&gt; member, we'll add the &lt;code&gt;private&lt;/code&gt; keyword before its definition in the class. This will prevent it from being accessed using the dot operator.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car.java&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But this creates a different problem. In our &lt;code&gt;main&lt;/code&gt; method, we used the &lt;code&gt;fuelLeft&lt;/code&gt; member to print the value. Not to magically change the value but just to have a look at its value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Main.java&lt;/span&gt;

&lt;span class="c1"&gt;// ERROR!&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;refuelTank&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running the above code will give us an error. To preserve the functionality to be able to view the data, we'll create a "getter" method in the Car class:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car.java&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getFuelLeft&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since this method belongs to and is "inside" the class, it can access the private members. So it just takes the value and returns it. Now we can refactor our main function code to use this method instead of the member:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFuelLeft&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;refuelTank&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;honda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFuelLeft&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And voila! Everything works as before with additional security of not changing the &lt;code&gt;fuelLeft&lt;/code&gt; member magically.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#refactoring-other-members"&gt;
  &lt;/a&gt;
  Refactoring Other Members
&lt;/h3&gt;

&lt;p&gt;If you think about it, all the other members of the Car class should be private by the same argument of not changing their value manually. Let's make all of them private and add getter functions to them:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;distanceTravelled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getColor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getPeopleCapacity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getFuelLeft&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getDistanceTravelled&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distanceTravelled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// other methods...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#access-of-methods"&gt;
  &lt;/a&gt;
  Access of methods
&lt;/h3&gt;

&lt;p&gt;Just like members, we can add access modifiers to our class methods as well. If a class method is &lt;code&gt;private&lt;/code&gt;, it cannot be called using the dot operator in the object. It can only be used internally by other methods inside the class. And that is the reason we had&lt;/p&gt;

&lt;p&gt;In the last post, we defined our constructor as &lt;code&gt;public&lt;/code&gt;. Now let's make sense of it. Our constructor needs to be accessible from anywhere to initialize the object from the class. Hence, we made it &lt;code&gt;public&lt;/code&gt;. Let's now define a &lt;code&gt;private&lt;/code&gt; method. When we start the engine, the car also checks if all the systems are working in proper condition. Let's call this method &lt;code&gt;checkSystems&lt;/code&gt;. This method shouldn't be used by the car user but just called internally by the &lt;code&gt;startEngine&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car.java&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkSystems&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Checking Systems..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;startEngine&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;checkSystems&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Engine!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now when we call &lt;code&gt;startEngine&lt;/code&gt; on the car object from the main method, it'll print "Checking Systems..." too. However, we cannot access the &lt;code&gt;checkSystems&lt;/code&gt; method externally:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Main.java&lt;/span&gt;

&lt;span class="c1"&gt;// ERROR&lt;/span&gt;
&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkSystems&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you may wonder, earlier all members and methods in the &lt;code&gt;Car&lt;/code&gt; class were neither public nor private; still we could access them. Why is that? If nothing is mentioned, does java make them public by default? The short answer is not really. Let's take a step back and understand what packages are in java.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#packages"&gt;
  &lt;/a&gt;
  Packages
&lt;/h2&gt;

&lt;p&gt;Packages in java are used to group similar classes (and sub-packages) together. At the start of each java class, we mention the package name:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.godcrampy.oop_deep_dive&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Conventionally, to avoid naming collisions, companies use reverse domain names as a prefix for the package name. So if let's say if a company has its domain as &lt;code&gt;example.com&lt;/code&gt; and is developing a utility for helpful string operations, it may name it as &lt;code&gt;com.example.string_util&lt;/code&gt;. Packages can contain sub-packages too. So, suppose the string operations utility has a section for generating random names. In that case, it could be in a package called &lt;code&gt;com.example.string_util.random_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All the class files are structured in directories according to the package name. For example, let's consider the java project that I am using for this tutorial. I have defined the package name as &lt;code&gt;com.godcrampy.oop_deep_dive&lt;/code&gt;. All the source code for my project is in the &lt;code&gt;src/main&lt;/code&gt; folder of the repository with the following structure:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    └── src
        └── main
            └── java
                └── com
                    └── godcrampy
                        └── oop_deep_dive
                            ├── Car.java
                            └── Main.java

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now let's move our &lt;code&gt;Car&lt;/code&gt; class to a subpackage called &lt;code&gt;vehicle&lt;/code&gt;. To do this, I created a new directory called &lt;code&gt;vehicle&lt;/code&gt; and moved the class there:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;└── src
    └── main
        └── java
            └── com
                └── godcrampy
                    └── oop_deep_dive
                        ├── Main.java
                        └── vehicle
                            └── Car.java

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we need to update the package declarations of our Car class. So I change the first line of the Car class from &lt;code&gt;package com.godcrampy.oop_deep_dive;&lt;/code&gt; to &lt;code&gt;package com.godcrampy.oop_deep_dive.vehicle;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, if you are coding along with this tutorial, you may notice that your IDE has already started showing some errors. &lt;code&gt;honda.startEngine&lt;/code&gt;, &lt;code&gt;honda.refuelTank&lt;/code&gt; and &lt;code&gt;honda.drive&lt;/code&gt; methods are not accessible in the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For these methods, we didn't add the &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; keywords. So when a member or method has no access modifier specified, it gets the &lt;code&gt;default&lt;/code&gt; access. This means that they can be accessed in some other class only if both the classes are in the same package. In our example, both &lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;Car&lt;/code&gt; classes were in &lt;code&gt;com.godcrampy.oop_deep_dive&lt;/code&gt; package. So everything worked fine before. So when we moved &lt;code&gt;Car&lt;/code&gt; to &lt;code&gt;com.godcrampy.oop_deep_dive.vehicle&lt;/code&gt; package, all the default methods became inaccessible.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fixing-the-defaults"&gt;
  &lt;/a&gt;
  Fixing the defaults
&lt;/h2&gt;

&lt;p&gt;To fix this, I'll make all the default methods in our car class &lt;code&gt;public&lt;/code&gt;. So finally, the Car class looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.godcrampy.oop_deep_dive.vehicle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;distanceTravelled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getColor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getPeopleCapacity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getFuelLeft&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fuelLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getDistanceTravelled&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distanceTravelled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peopleCapacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;peopleCapacity&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fuelLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;distanceTravelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkSystems&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Checking Systems..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;startEngine&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;checkSystems&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Engine!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;refuelTank&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fuel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fuelLeft&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;fuel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Driving..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;distanceTravelled&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now all the errors are gone, and we are good to go. If you notice, at the start of the class as well, we added the public keyword: &lt;code&gt;public class Car {&lt;/code&gt;. This follows from the same access rules as we discussed before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acess Modifier&lt;/th&gt;
&lt;th&gt;Within Class&lt;/th&gt;
&lt;th&gt;Within Package&lt;/th&gt;
&lt;th&gt;Outside Package&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Private&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Public&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Protected&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;protected&lt;/code&gt; keyword is still to be investigated. We will do that in the next post.&lt;br&gt;
That wraps it up for the post. We understood what access modifiers are and how they can be used to improve the security of our code. We also explored packages in java and how to organise our code. You can find the code mentioned in the post here: &lt;a href="https://github.com/godcrampy/oop-deep-dive-notes"&gt;https://github.com/godcrampy/oop-deep-dive-notes&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I hope you liked the post. If this was helpful, please show some love by clicking ♥, 🦄 and saving the post for later. Feel free to express your suggestions and opinoins in the comments below. Oh, BTW do you want to learn Bash? Here's my crash-course post on Shell Scripting:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/godcrampy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7m_VL-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--IIQrUBME--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/205514/d6dd6688-3ad3-4913-9421-b9256cdea822.png" alt="godcrampy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/godcrampy/the-missing-shell-scripting-crash-course-37mk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🚀 The Missing Shell Scripting Crash Course&lt;/h2&gt;
      &lt;h3&gt;Sahil Bondre ・ Apr 21 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;🌟 I made some &lt;a href="https://github.com/godcrampy/cheat-sheets"&gt;Cheat-Sheets&lt;/a&gt;&lt;br&gt;
🚀 Follow me on &lt;a href="//github.com/godcrampy"&gt;Github&lt;/a&gt; | &lt;a href="//twitter.com/godcrampy"&gt;Twitter&lt;/a&gt;&lt;br&gt;
📜 Check my &lt;a href="//sahil.surge.sh"&gt;Website&lt;/a&gt;&lt;br&gt;
😄 Have a wonderful day!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>oop</category>
      <category>java</category>
    </item>
    <item>
      <title>The Power of Console API</title>
      <author>Mayank Pathela</author>
      <pubDate>Thu, 23 Sep 2021 13:22:40 +0000</pubDate>
      <link>https://dev.to/starkblaze01/the-power-of-console-api-2dlo</link>
      <guid>https://dev.to/starkblaze01/the-power-of-console-api-2dlo</guid>
      <description>&lt;p&gt;When working with a JavaScript project, the most common debugging method we use is putting the &lt;code&gt;console.log("Something happened here", {some_variable})&lt;/code&gt; in between the lines of code and passing some irrelevant and relevant information respectively as parameters to identify where and when the problem occurred.&lt;/p&gt;

&lt;p&gt;Have you ever wondered what the other methods supported by &lt;code&gt;console&lt;/code&gt; except for &lt;code&gt;console.log()&lt;/code&gt; are? Let's walk through some of those fantastic methods in this blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-console-api-used-for"&gt;
  &lt;/a&gt;
  What is Console API used for?
&lt;/h2&gt;

&lt;p&gt;Console API provides the functionality to allow the users to perform the debugging level tasks, like logging values of any variable, tracking execution time at different set points in the code.&lt;/p&gt;

&lt;p&gt;The most common way to access it using the &lt;code&gt;console&lt;/code&gt; object, which can be accessed from anywhere with global scope access. Also, it is supported by &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web Workers&lt;/a&gt; that’s why it can be easily used in browsing scope without working about concurrency.&lt;/p&gt;

&lt;p&gt;Now, let’s have a look over some of the methods provided by it&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Note:&lt;/em&gt; I will be using Chrome console, and the output format may differ for different browsers):&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outputting-the-values-on-the-console"&gt;
  &lt;/a&gt;
  Outputting the values on the console:
&lt;/h2&gt;

&lt;p&gt;Primarily there are four standard methods you can access to print a text on the console:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;console.log()&lt;/code&gt; - This most popular method outputs a message to the console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2RGLyd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt2abchqc5mey3y7pi9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2RGLyd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt2abchqc5mey3y7pi9t.png" alt="img1a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;console.info()&lt;/code&gt; - This method outputs the value in the same way as the &lt;code&gt;console.log()&lt;/code&gt;. Some browsers may add the info icon or may format the output differently. For, e.g., in the below image, you can see the &lt;code&gt;console.log()&lt;/code&gt; is identified by my React Devtools extension and override it, but the &lt;code&gt;console.info()&lt;/code&gt; is not recognized by it, so it is run by the native browser environment:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gbtm7MKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9go8x7283dy77qtu521n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gbtm7MKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9go8x7283dy77qtu521n.png" alt="img2a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;console.warn()&lt;/code&gt; - This method outputs a warning message to the Web console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxaWvMNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46ljbltcglffqj25txxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxaWvMNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46ljbltcglffqj25txxr.png" alt="img3a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;console.error()&lt;/code&gt; - This method outputs an error message to the Web console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGkauXWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxiaplkdak227l6og3b9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGkauXWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxiaplkdak227l6og3b9.png" alt="img4a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from these four, there are other methods to output on the console like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.dir()&lt;/code&gt; - Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Key difference between &lt;code&gt;console.log()&lt;/code&gt; and &lt;code&gt;console.dir()&lt;/code&gt;&lt;/strong&gt;-  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cei4YBGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bh5cpgdyvhpvci36bsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cei4YBGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bh5cpgdyvhpvci36bsj.png" alt="img5a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;console.log()&lt;/code&gt; prints it HTML-like tree but &lt;code&gt;console.dir()&lt;/code&gt; print it in a JSON-like tree.&lt;/p&gt;

&lt;p&gt;Another similar method is the &lt;code&gt;console.dirxml()&lt;/code&gt;, which displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#printing-the-data-in-the-tabular-format"&gt;
  &lt;/a&gt;
  Printing the data in the tabular format:
&lt;/h4&gt;

&lt;p&gt;We often have the tabular data that we got in the response from any SQL query or API response. Consider using the &lt;code&gt;console.table(${data}, ${column})&lt;/code&gt; method for the same. E.g. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92E66GL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxklyx3m2t02thkzwyva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92E66GL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxklyx3m2t02thkzwyva.png" alt="img6a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secret sauce: Try clicking on the column headings, and don’t get surprised if you see sorted values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-css-to-the-output-values"&gt;
  &lt;/a&gt;
  Applying CSS to the output values:
&lt;/h2&gt;

&lt;p&gt;It’s pretty cool that we can format the text we want to print just by using the &lt;code&gt;%c&lt;/code&gt; directive with the text we want to print. Let’s dive into the below example to have a close look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkgHBxnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c7f9xyvzv4epewwm4mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkgHBxnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c7f9xyvzv4epewwm4mc.png" alt="img7a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! Isn’t it?&lt;/p&gt;

&lt;p&gt;Let’s have a look at another example with different stylings in the same output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJCp7NS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt8fi60a2cvtfw5u3ic2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJCp7NS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt8fi60a2cvtfw5u3ic2.png" alt="img8a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#printing-in-the-nested-group-level"&gt;
  &lt;/a&gt;
  Printing in the nested group level:
&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;console.group()&lt;/code&gt;, &lt;code&gt;console.groupCollapsed()&lt;/code&gt;, and &lt;code&gt;console.groupEnd()&lt;/code&gt; methods to log the values in a nested format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XvSRiLqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvr2x3mffrf7fw70u6eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvSRiLqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvr2x3mffrf7fw70u6eu.png" alt="img9a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, &lt;code&gt;console.warn()&lt;/code&gt;, and &lt;code&gt;console.error()&lt;/code&gt; has been used. That's why the final outputs are formatted. Also, the Second Inner level is in the collapsed form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-the-time-of-any-process"&gt;
  &lt;/a&gt;
  Tracking the time of any process:
&lt;/h2&gt;

&lt;p&gt;Say we want to track how much time a function takes for the execution, so rather than using any external function we can use &lt;code&gt;console.time()&lt;/code&gt;, &lt;code&gt;console.timeLog()&lt;/code&gt;, and &lt;code&gt;console.timeEnd()&lt;/code&gt;.&lt;br&gt;
For example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMJ93DeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwoktstjj9asx8jq4ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMJ93DeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwoktstjj9asx8jq4ij.png" alt="img10a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;console.time("Task 1")&lt;/code&gt; started the timer, &lt;code&gt;console.timeLog("Task 1")&lt;/code&gt; logs the time in between Task 1 and &lt;code&gt;console.timeEnd("Task 1")&lt;/code&gt; ends the timer and prints the final value at the end. Once the timer is stopped, we cannot reaccess it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5oV3rAde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08016nzli1pdey5r452n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5oV3rAde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08016nzli1pdey5r452n.png" alt="img11a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack-trace-and-conditional-tracing-of-function-execution"&gt;
  &lt;/a&gt;
  Stack trace and conditional tracing of function execution:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.trace()&lt;/code&gt; and &lt;code&gt;console.assert()&lt;/code&gt; are practical methods that help trace back the stack of the execution. The difference between these methods is that the &lt;code&gt;console.assert()&lt;/code&gt; will only print the stack trace if the first parameter is false and will also print in the same way &lt;code&gt;console.error()&lt;/code&gt; method does.&lt;/p&gt;

&lt;p&gt;E.g.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbNwF3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs0t56j1ufr7a0vnoxhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbNwF3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs0t56j1ufr7a0vnoxhd.png" alt="img12a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#count-the-number-of-times-a-line-is-being-executed"&gt;
  &lt;/a&gt;
  Count the number of times a line is being executed:
&lt;/h2&gt;

&lt;p&gt;Suppose you want to track how many times a function has been called, say any recursive function, then &lt;code&gt;console.count()&lt;/code&gt; and &lt;code&gt;console.countReset()&lt;/code&gt; are a great help. For e.g.&lt;/p&gt;

&lt;p&gt;In the above example, you can see it prints the value of how many times the label a has been called, and after calling reset, it goes back to 1 on the next call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-substitution-using-the-directives"&gt;
  &lt;/a&gt;
  String Substitution using the directives:
&lt;/h2&gt;

&lt;p&gt;You can format the string and substitute it using &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%o&lt;/code&gt; or &lt;code&gt;%O&lt;/code&gt;, and &lt;code&gt;%d&lt;/code&gt; or &lt;code&gt;%i&lt;/code&gt;, &lt;code&gt;%f&lt;/code&gt; directives. (For showing a few examples, I am using Firefox console as Chrome console doesn’t support precision formatting)  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XihtTiju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv5y2o5soz60ir16tx8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XihtTiju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv5y2o5soz60ir16tx8a.png" alt="img13a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These were the methods provided by the Console API to make life easier, but before wrapping up, it’s worth noting how Console API works in browsers vs. how it works in NodeJS stream. &lt;/p&gt;

&lt;p&gt;It’s synchronous for browsers, but for NodeJS streams, it’s neither consistently synchronous nor consistently asynchronous like all other Node.js streams. In NodeJS, they internally use &lt;code&gt;process.stdout&lt;/code&gt; and &lt;code&gt;process.stderr&lt;/code&gt;, and these two streams write synchronous or asynchronous depending on what the stream is connected to and whether the system is Windows or POSIX. The following is the write operation behavior of these two NodeJS process streams:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files: synchronous on Windows and POSIX&lt;/li&gt;
&lt;li&gt;TTYs (Terminals): asynchronous on Windows, synchronous on POSIX&lt;/li&gt;
&lt;li&gt;Pipes (and sockets): synchronous on Windows, asynchronous on POSIX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s a wrap!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;&lt;a href=""&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;NodeJS API Ref&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>console</category>
      <category>api</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How To Enable Real-Time Merge Conflict Detection In PyCharm</title>
      <author>Sunny</author>
      <pubDate>Thu, 23 Sep 2021 13:22:39 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-pycharm-2bgc</link>
      <guid>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-pycharm-2bgc</guid>
      <description>&lt;p&gt;Ah, the dreaded resolve conflicts popup. You've finished crafting the perfect code, just a quick merge in of master (ahem, main) before you submit your PR, and then... 💥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxxQrzzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213847061/hH7A9HisQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxxQrzzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213847061/hH7A9HisQ.png" alt="img-1-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If only there was an early warning system for merge conflicts so you could be better prepared or even avoid the conflicts in the first place I hear you say? Well if you are a PyCharm user today is your lucky day!&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install and set up &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;. Then if you right click the gutter on PyCharm, you will see the option to “Show Other's Changes”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MUHLISNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213888884/r9d3Htb6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MUHLISNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213888884/r9d3Htb6c.png" alt="img-2-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be disabled if the file open in the editor is not from git or there are no other changes to it from contributors working on other branches (aka you are safe from conflicts). If it's enabled there will be one or more change indicators in the gutter of the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FZ87Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632216789242/xha1qtf-h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FZ87Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632216789242/xha1qtf-h.png" alt="image-3-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These will show you where your teammates have made changes compared to your version of the file and even update in real-time as you and your teammates are editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcCQ-i4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213899673/wr0LvxtSi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcCQ-i4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213899673/wr0LvxtSi.png" alt="key indicators-dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've made a conflicting change you will see the bright red conflict indicator. These conflicts can be uncommitted local changes you have not pushed yet or existing changes on your branch that conflict with your teammates’ changes.&lt;/p&gt;

&lt;p&gt;Click your teammate’s icon in the gutter to see the diff between your version and theirs, the branch the offending changes are from, and the issue connected to that branch if there is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SatVK3vv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632214614303/behcC17Np.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SatVK3vv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632214614303/behcC17Np.png" alt="img-5-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this popup you can also cherry-pick your teammate’s change directly from their local version of the file. For simple conflicts this can be a quick way to resolve them as identical changes on different branches will merge cleanly.&lt;/p&gt;

&lt;p&gt;Unfortunately, it's not always possible to resolve a conflict straight away but with the early warning, you'll be better prepared, avoiding any nasty surprises at merge time!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://blog.git.live/gitlive-11.0-Real-time-merge-conflict-detection"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/mergeconflicts/"&gt;GitLive docs&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>git</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Jaeger vs Zipkin - Key architecture components, differences and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Thu, 23 Sep 2021 13:17:05 +0000</pubDate>
      <link>https://dev.to/signoz/jaeger-vs-zipkin-key-architecture-components-differences-and-alternatives-8b0</link>
      <guid>https://dev.to/signoz/jaeger-vs-zipkin-key-architecture-components-differences-and-alternatives-8b0</guid>
      <description>&lt;p&gt;Distributed tracing is becoming a critical component of any application's performance monitoring stack. However, setting it up in-house is an arduous task, and that's why many companies prefer outside tools. Jaeger and Zipkin are two popular open-source projects used for end-to-end distributed tracing. Let us explore their key differences in this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both Zipkin and Jaeger are popular open-source distributed tracing tools. Zipkin was originally inspired by Google's Dapper and was developed by Twitter. Zipkin is a much older project than Jaeger and was first released as an open-source project in 2012. Jaeger was originally built by teams at Uber and then open-sourced in 2015. It got accepted as a Cloud Native incubation project in 2017 and graduated in 2019.&lt;/p&gt;

&lt;p&gt;Before we dive into the differences between Jaeger and Zipkin, let's take a short detour to understand distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two important concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A trace context is passed along when requests travel between services, which tracks a user request across services. You can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jaeger-and-zipkin-key-components"&gt;
  &lt;/a&gt;
  Jaeger and Zipkin: Key components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jaegertracing/jaeger" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Jaeger's&lt;/b&gt;&lt;/a&gt; source code is primarily written in Go, while &lt;a href="https://github.com/openzipkin/zipkin" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Zipkin's&lt;/b&gt;&lt;/a&gt; source code is primarily written in Java. The architecture of Jaeger and Zipkin is somewhat similar. Major components in both architectures include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instrumentation Libraries&lt;/li&gt;
&lt;li&gt;Collectors&lt;/li&gt;
&lt;li&gt;Query Service and web UI&lt;/li&gt;
&lt;li&gt;Database Storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Jaeger architecture"&gt;&lt;/a&gt;Illustration of  Jaeger architecture (Source: Jaeger website)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqh6ezZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/zipkin_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqh6ezZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/zipkin_architecture-min.jpg" alt="Zipkin architecture"&gt;&lt;/a&gt;Illustration of Zipkin architecture (Source: Zipkin website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumentation-libraries"&gt;
  &lt;/a&gt;
  Instrumentation Libraries
&lt;/h3&gt;

&lt;p&gt;Instrumentation is the process of generating telemetry data(logs, metrics, and traces) from an application code. Both Jaeger and Zipkin provide language-specific instrumentation libraries. Instrumentation enables a service to create spans on incoming requests and to attach context information on outgoing requests.&lt;/p&gt;

&lt;p&gt;Key points to note about instrumentation libraries of Jaeger and Zipkin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jaeger's instrumentation libraries are based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt;. OpenTracing was also started at Uber with an aim to create vendor-neutral instrumentation APIs for distributed tracing. Zipkin has its own instrumentation libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jaeger has &lt;a href="https://www.jaegertracing.io/docs/1.26/client-libraries/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;official client libraries&lt;/b&gt;&lt;/a&gt; in Go, Java, Node.js, Python, C++, C#. Zipkin team maintains &lt;a href="https://zipkin.io/pages/tracers_instrumentation.html" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;instrumentation libraries&lt;/b&gt;&lt;/a&gt; for frameworks in C#, Go, Java, Javascript, Ruby, Scala, and PHP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both Jaeger and Zipkin support out-of-box instrumentation for a lot of popular frameworks. Jaeger is also compatible with Zipkin's API. That means you can use instrumentation libraries of Zipkin with Jaeger.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/orgs/opentracing-contrib/repositories" rel="noopener noreferrer nofollow"&gt;Jaeger's 3rd party supported frameworks&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zipkin.io/pages/tracers_instrumentation.html" rel="noopener noreferrer nofollow"&gt;Zipkin's 3rd party supported frameworks&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collectors"&gt;
  &lt;/a&gt;
  Collectors
&lt;/h3&gt;

&lt;p&gt;Telemetry data collected by the instrumentation libraries are sent to a collector in both Jaeger and Zipkin. Jaeger's collectors validate traces, index them, perform any transformations, and finally stores them. Zipkin collector too validates and indexes the collected trace data for lookups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-service-and-web-ui"&gt;
  &lt;/a&gt;
  Query Service and Web UI
&lt;/h3&gt;

&lt;p&gt;Zipkin provides a JSON API for finding and retrieving traces. Jaeger provides stateless service API endpoints which are typically run behind a load balancer, such as NGINX.&lt;/p&gt;

&lt;p&gt;The consumer of the query service is a Web UI in both Jaeger and Zipkin, which is used to visualize trace data by a user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" alt="Jaeger's web UI showing Gantt charts"&gt;&lt;/a&gt;Jaeger's Web UI showing spans with Gantt charts&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q48kV-kO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_trace_ui.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q48kV-kO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_trace_ui.jpg" alt="Zipkin trace UI"&gt;&lt;/a&gt;Zipkin's trace UI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-storage"&gt;
  &lt;/a&gt;
  Database storage
&lt;/h3&gt;

&lt;p&gt;Both Jaeger and Zipkin provide pluggable storage backends for trace data. Cassandra and Elasticsearch are the primarily supported storage backends by Jaeger.&lt;/p&gt;

&lt;p&gt;Zipkin was originally built to store data in Cassandra, but it later started supporting Elasticsearch and MySQL too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-jaeger-and-zipkin"&gt;
  &lt;/a&gt;
  Comparing Jaeger and Zipkin
&lt;/h2&gt;

&lt;p&gt;Jaeger and Zipkin have a lot of similarities in their architecture. Though Zipkin is an older project, Jaeger has a more modern and scalable design. Let us summarize the key differences between Jaeger and Zipkin in the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jaeger's has wider support of instrumentation libraries as it supports OpenTracing APIs and is also compatible with Zipkin's API. Jaeger also provides an option to &lt;a href="https://www.jaegertracing.io/docs/1.26/getting-started/#migrating-from-zipkin" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;migrate from Zipkin&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jaeger can be deployed as a single binary where all Jaeger backend components run as a single process or as a scalable distributed system. Zipkin, on the other hand, can only be run as a single binary that includes the collector, storage, query service, and web UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As Jaeger comes under CNCF along with other projects such as Kubernetes, there are official orchestration templates for running Jaeger with &lt;a href="https://github.com/jaegertracing/jaeger-kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://github.com/jaegertracing/jaeger-openshift"&gt;OpenShift&lt;/a&gt;. Zipkin provides three options to build and start an instance of Zipkin: using Java, Docker, or running from the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Despite being older, Jaeger has caught up to Zipkin in terms of community support. Zipkin is a standalone project which came into existence before containerization went mainstream. Jaeger, as part of CNCF, is a recognized project in cloud-native architectures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both Jaeger and Zipkin are strong contenders when it comes to a distributed tracing tool. But are traces enough to solve all performance issues of a modern distributed application? The answer is no. You also need metrics and a way to correlate metrics with traces with a single dashboard. Most SaaS vendors provide both metrics and traces under a single pane of glass. But the beauty of Jaeger and Zipkin is that they are open-source. What if an open-source solution does both and comes with a great web UI with actionable insights for your engineering teams?&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-to-alternative-to-jaeger-and-zipkin-signoz"&gt;
  &lt;/a&gt;
  A better to alternative to Jaeger and Zipkin - SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Jaeger and Zipkin. It provides advanced distributed tracing capabilities along with metrics under a single dashboard.&lt;/p&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rate my SVG art! [Compared to CSS art]</title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 23 Sep 2021 13:14:44 +0000</pubDate>
      <link>https://dev.to/inhuofficial/css-art-pfft-try-svg-art-2o0n</link>
      <guid>https://dev.to/inhuofficial/css-art-pfft-try-svg-art-2o0n</guid>
      <description>&lt;p&gt;Loads of people like to do CSS art. It is really impressive but next to pointless for anything other than a cool demonstration. &lt;/p&gt;

&lt;p&gt;Why don't we see what you should &lt;strong&gt;actually&lt;/strong&gt; use for art...SVG&lt;/p&gt;

&lt;p&gt;Inspired by this post where &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
 once again blows my mind with his CSS ninja skills!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/rate-my-first-css-drawing-51m5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Rate my first CSS drawing&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Sep 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;As a first CSS drawing...my rating is a 10!&lt;/p&gt;

&lt;p&gt;But what if a zero skilled noob like myself wanted to create an image? Well I would use SVG of course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-compare-the-results"&gt;
  &lt;/a&gt;
  Let's compare the results
&lt;/h2&gt;

&lt;p&gt;let's see the three items side by side:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#original-image"&gt;
  &lt;/a&gt;
  Original image
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0RcmQrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sRZfn1nC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://i.pinimg.com/originals/15/3a/be/153abee445a48e98bc10d8a29d6b7a16.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0RcmQrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sRZfn1nC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://i.pinimg.com/originals/15/3a/be/153abee445a48e98bc10d8a29d6b7a16.jpg" alt="Livai Ackerman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-version"&gt;
  &lt;/a&gt;
  CSS version
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoXXRd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-version"&gt;
  &lt;/a&gt;
  SVG version
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/n3cepyrx//embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;Yes the third image is an SVG, I haven't just included a base64 encoded image or anything, you should check out the source code!&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#comparison-of-effort-etc"&gt;
  &lt;/a&gt;
  Comparison of effort etc.
&lt;/h2&gt;

&lt;p&gt;Let's compare how long they took etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-complete"&gt;
  &lt;/a&gt;
  Time to complete
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS version:&lt;/strong&gt; 6 hours ❌&lt;br&gt;
&lt;strong&gt;SVG version:&lt;/strong&gt; &amp;lt;30 minutes (would take longer without reference image to copy!) ✅&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-size"&gt;
  &lt;/a&gt;
  File Size
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; 3kb gzipped ✅&lt;br&gt;
&lt;strong&gt;SVG version:&lt;/strong&gt; 16kb gzipped (but can be made a lot smaller at the expense of accuracy) ❌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accuracy"&gt;
  &lt;/a&gt;
  Accuracy
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; Good ❌&lt;br&gt;
&lt;strong&gt;SVG Version:&lt;/strong&gt; Extremely Good ✅&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; Will scale almost infinitely ✅&lt;br&gt;
&lt;strong&gt;SVG Version:&lt;/strong&gt; Will scale almost infinitely  ✅&lt;br&gt;
(A draw! They are both effectively vector images)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; Doesn't work well in Safari (the new IE!) ❌&lt;br&gt;
&lt;strong&gt;SVG Version:&lt;/strong&gt; works all the way back to IE9! ✅&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexibility"&gt;
  &lt;/a&gt;
  Flexibility
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; Works well on a web page (assuming all CSS properties are supported). ❌&lt;br&gt;
&lt;strong&gt;SVG Version:&lt;/strong&gt; Works on a web page, but can also be sent for professional printing. As an added bonus you can include it as an image on a web page (or you can inline it to reduce the need for a network request). You can even export it as a JPEG or PNG etc. for image sharing sites. ✅&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skill-level-required"&gt;
  &lt;/a&gt;
  Skill Level Required
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS Version:&lt;/strong&gt; Simply blows my mind ✅&lt;br&gt;
&lt;strong&gt;SVG Version:&lt;/strong&gt; Meh, SVG is pretty easy! ❌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-winner"&gt;
  &lt;/a&gt;
  The winner?
&lt;/h2&gt;

&lt;p&gt;SVG without a doubt, even the one item it didn't win (file size) was due to the massive complexity / detail increase.&lt;/p&gt;

&lt;p&gt;Obviously it isn't as impressive though and I suppose if you want to show off you should use CSS, for everything else there is &lt;del&gt;mastercard&lt;/del&gt; SVG!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-which-should-you-use"&gt;
  &lt;/a&gt;
  So which should you use?
&lt;/h2&gt;

&lt;p&gt;If you enjoy making CSS art it is far more impressive than SVG and is a great way to learn some advanced CSS tricks.&lt;/p&gt;

&lt;p&gt;But for production, in the real world, where time is important, SVG wins hands down.&lt;/p&gt;

&lt;p&gt;It will also just work on any browser, no worrying about supported properties or anything like that!&lt;/p&gt;

&lt;p&gt;So while I love CSS art as it is always amazing to see how people make things work, SVG creation is probably the tool you want in your arsenal when designing things!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;Let me know what do you think 👇👇&lt;/p&gt;

&lt;p&gt;✔️ SVG is amazing, I am going to go learn it!&lt;br&gt;
❌ I won't use SVG 🤮, I want overly complex CSS imagery and lots of headaches instead!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codepen</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Why we built yet another crypto wallet</title>
      <author>Thomas Wiesner</author>
      <pubDate>Thu, 23 Sep 2021 13:10:12 +0000</pubDate>
      <link>https://dev.to/tomw1808/why-we-built-yet-another-crypto-wallet-12c</link>
      <guid>https://dev.to/tomw1808/why-we-built-yet-another-crypto-wallet-12c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TjqHTXZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klisw7di9hym5y7biuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjqHTXZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klisw7di9hym5y7biuv.png" alt="Another Wallet Morpher Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
Hi, I'm Thomas, CTO here at &lt;a href="https://www.morpher.com/"&gt;Morpher&lt;/a&gt;. In this post I want to talk a little bit how the Wallet-Components are set up and why we built the wallet in the first place. It's a pretty technical article, so if you are a developer then this article is for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-yet-another-wallet"&gt;
  &lt;/a&gt;
  Why yet another Wallet?! 🤔
&lt;/h2&gt;

&lt;p&gt;Morpher's goal is to make trading using Blockchain tech accessible to the masses. Current wallet implementations are all very &lt;em&gt;very&lt;/em&gt; secure, but not very convenient for users to use. They are also very often not easy for developers to work with. We think that convenience doesn't have to jeopardize security.&lt;/p&gt;

&lt;p&gt;We started Morpher with three different wallets: MetaMask, Portis and Fortmatic. The integration with wallets usually works like this: The wallet injects a full web3 object into the website and takes care of connecting to a node, as well as providing a keystore to sign transactions. So, essentially you need to connect to the right node and then have means to sign transactions that get sent &lt;em&gt;through the wallet's connection to the node&lt;/em&gt;. Those are two components: A Http/WebSocket connector and a keystore, both in one "wallet" that takes care of signing and sending.&lt;/p&gt;

&lt;p&gt;Having both in external components gives very little control back to the developer. For example, with MetaMask you can't directly influence to which network to connect to -- the user needs to do this. Besides some &lt;a href="https://eips.ethereum.org/EIPS/eip-2015"&gt;small advances in new RPC calls&lt;/a&gt; that allow developers to automatically add a new network, all you can do is listen and observe which network the user is connected to and inform then via a modal or some sort of alert that the user is connected to the wrong network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZ8qI879--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/metamask_change_network.png%3Fw%3D719" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZ8qI879--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/metamask_change_network.png%3Fw%3D719" alt="Instructions for switching networks in Metamask inside DApp."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metamask"&gt;
  &lt;/a&gt;
  MetaMask
&lt;/h2&gt;

&lt;p&gt;Imagine you are a user who never touched Blockchain.&lt;/p&gt;

&lt;p&gt;Now you need to setup MetaMask before you start to use a platform. You have to download a browser plugin you never heard of that has a fox-head following your mouse pointer. Then you need to enter a secure password -- and god forbid you lose it. Then you are asked to remember a seed phrase. At this point you have no idea what a &lt;em&gt;seed phrase&lt;/em&gt; is, but it sounds like you just started your internship at the CIA.&lt;/p&gt;

&lt;p&gt;If you haven't given up at this point you are then greeted with a popup to enter network details and switch around something which sounds very scary to the regular user. Now you made it to the Morpher Sidechain 🎉 (like us, chances are that your DApp also operates on a layer-2 network).&lt;/p&gt;

&lt;p&gt;To top it off, you get one ETH to sign transactions on our sidechain. These are like testnet ETH on our POA sidechain, and are essentially worthless. Nevertheless MetaMask tells you that you are rich. Needless to say, it's very disappointing to find out your new fortune isn't a fortune at all and those $3,000 in your wallet are not real. But at this point, these are all just details, because most users already gave up on downloading MetaMask.&lt;/p&gt;

&lt;p&gt;They come to trade, not to become blockchain experts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#portis-and-fortmatic"&gt;
  &lt;/a&gt;
  Portis and Fortmatic
&lt;/h2&gt;

&lt;p&gt;Here come the hosted wallets. Let's just focus on Fortmatic (or Magic?) for now.&lt;/p&gt;

&lt;p&gt;It also makes the full web3 object accessible to the website. That means, it does two things: connect to a network and provides a keystore.&lt;/p&gt;

&lt;p&gt;It claims to be non-custodial. It uses AWS KMS for encryption. But essentially is a man-in-the-middle as a &lt;a href="https://medium.com/fortmatic/security-infrastructure-at-fortmatic-4a95c3688997"&gt;relayer in the recovery process&lt;/a&gt; and has your recovery keys stored within their own infrastructure 🤷‍♂️.&lt;/p&gt;

&lt;p&gt;It does let you style the popups a little bit. But if Fortmatic decides that everyone needs 2FA today, so be it. Nothing you can do about it. If Fortmatic decides tomorrow that you need to verify your email address again, so be it. If Fortmatic decides that exporting your private key is deleting the account, well, nothing you can do. If Fortmatic decides that it won't connect to your layer-2 network anymore, all you can do is pray to the all-mighty blockchain gods. And Fortmatic has not decided to let developers or users turn off transaction-confirmation screens at all (and those pop-ups are not pretty on mobile). But there is only so much you can do about it.&lt;/p&gt;

&lt;p&gt;It's not enough being at the mercy of third party providers in a world, you need to have deep pockets. Pricing is based on user-signups. You're on the hook the moment your DApp takes off, even if you haven't monetized those users yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHC0aiMP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/fortmatic_pricing.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHC0aiMP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/fortmatic_pricing.png%3Fw%3D1024" alt="Fortmatic wallet pricing options from free to enterprise."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-morpher-wallet"&gt;
  &lt;/a&gt;
  Introducing Morpher Wallet
&lt;/h2&gt;

&lt;p&gt;Now think about this:&lt;/p&gt;

&lt;p&gt;You are a user who comes to Morpher. You are used to web 2.0 signup flows. You want to sign up to trade. You want to go long on Tesla. You don't want to worry about (and don't have any reason to know about) signature popups, seed phrases or private keys. You &lt;em&gt;can&lt;/em&gt; do all that cool crypto stuff too, but first and foremost you are here to trade, not to learn how crypto works, export seed phrases or learn why it is better to use PBKDF2 over SHA256 to encrypt stuff.&lt;/p&gt;

&lt;p&gt;Or you are like us: You are a developer. You want to give your users a smooth experience. You want to have a non-custodial solution and full control over how it looks and feels without compromising &lt;em&gt;too much&lt;/em&gt; on security.&lt;/p&gt;

&lt;p&gt;This is why we built the Morpher Wallet. But how does it work?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-rundown"&gt;
  &lt;/a&gt;
  Technical Rundown
&lt;/h2&gt;

&lt;p&gt;After that esoteric introduction on why we built the wallet, I am sure you are also interested in the full tech rundown. After all, we're developers. So, let's do this!&lt;/p&gt;

&lt;p&gt;Morpher Wallet uses 3 components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A Backend Component, written in NodeJS/Express, that never sees an unencrypted private key or seed phrase. It's basically store&amp;amp;retrieve for encrypted keys.&lt;/li&gt;
&lt;li&gt;  A Frontend Component that acts as a keystore and interface.&lt;/li&gt;
&lt;li&gt;  And an SDK that creates a web3 object and gives it to a website. It connects the wallet as an iFrame and makes sure the communication between the iFrame is secure and things like web3.eth.signTransaction work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take this step by step and see what happens for example on signup up, before diving into into the communication between the iFrame and parent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signup-and-noncustodial-dataflow"&gt;
  &lt;/a&gt;
  Signup and Non-Custodial Data-Flow
&lt;/h3&gt;

&lt;p&gt;When a user signs up, the Frontend &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/3aba733c2ee1dcc09b7374b8fd6fe22f71de5719/vue/src/utils/keystore.ts#L31"&gt;generates a seed phrase using bip39&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's working all on the frontend at this point -- the backend sits there idle, only telling the frontend if a user with that email already exists.&lt;/p&gt;

&lt;p&gt;The frontend then hashes the user's password, uses that hash to encrypt the seed phrase using AES-GCM 256 bits with &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/3aba733c2ee1dcc09b7374b8fd6fe22f71de5719/vue/src/utils/cryptoFunctions.ts#L16"&gt;10000 SHA-256 iterations PBKDF2&lt;/a&gt;. Fairly industry standard at this point.&lt;/p&gt;

&lt;p&gt;After that, we store the encrypted keystore on the backend.&lt;/p&gt;

&lt;p&gt;We also store the encrypted keystore in localStorage, so the user just needs to enter the password next time he opens the browser, but that's a different story and purely convenience. It doesn't jeopardize the fact that everything is non-custodial and encrypted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#login"&gt;
  &lt;/a&gt;
  Login
&lt;/h3&gt;

&lt;p&gt;So, a user is registered, but where's the data coming from to get to the magic private key? It's stored in the backend, but encrypted. Besides having all the usual best web practices to not to fall victim to DDoS attacks etc., the key is also only decrypted client-side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5y0T4l4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/login_uml.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5y0T4l4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://morpherhome.files.wordpress.com/2021/09/login_uml.png%3Fw%3D1024" alt="UML technical diagram for Morpher Wallet login flow."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The user enters the email address and a password.&lt;/li&gt;
&lt;li&gt; (Optional) The user is guided through a 2FA flow.&lt;/li&gt;
&lt;li&gt; The frontend asks the backend to try and find an entry in the database for that email address.&lt;/li&gt;
&lt;li&gt; The backend sends back the encrypted seed phrase.&lt;/li&gt;
&lt;li&gt; The frontend tries to de-crypt the seed phrase with the hashed password client-side.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From there, the a web3.eth.accounts keystore is created from the now decrypted seed phrase and kept in memory in the browser sandbox for further use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signing-a-transaction"&gt;
  &lt;/a&gt;
  Signing a Transaction
&lt;/h3&gt;

&lt;p&gt;The keystore in the Morpher Wallet is actually just the most important component, which, in itself doesn't connect to a node. The architecture is built in a way that the wallet is embedded as an iFrame into another website.&lt;/p&gt;

&lt;p&gt;If you direct your attention to the Vuex store, you'll find all the necessary functions when the &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/master/vue/src/store/index.ts#L878"&gt;wallet is embedded&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The actual signing is done by the &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/master/vue/src/store/index.ts#L921"&gt;web3 library&lt;/a&gt; and this is then handed back over to the parent frame, which embeds the wallet which is &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/master/morpherwallet-sdk/src/index.ts#L333"&gt;a custom HookedWalletProvider&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's then forwarded to a node, through the normal web3 process, sending a signed transaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In a nutshell, that's how the internal nuts and bolts work. Obviously, there is a lot more to it than just signup, login and signing transactions. But for a quick introduction, that's probably enough.&lt;/p&gt;

&lt;p&gt;The most important part for us is to have full control over the UI and how it behaves. We intentionally wanted to make the user onboarding simple, but leave enough controls for the user to lock down their wallet as needed.&lt;/p&gt;

&lt;p&gt;Heck, you could even go, export the seed phrase, import into MetaMask and login to Morpher again. That's how standardized this is.&lt;/p&gt;

&lt;p&gt;If you are interested in more, there's a &lt;a href="https://github.com/Morpher-io/MorpherWallet/blob/master/docs/audit-doc.pdf"&gt;full audit doc&lt;/a&gt; that goes into more details about how the encryption and decryption and data flow works.&lt;/p&gt;

&lt;p&gt;If you want to integrate the wallet solution into your own website or DApp, then let us know! We're planning to completely open it up for other developers as well.&lt;/p&gt;




&lt;p&gt;How to get involved and learn more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Fill out the &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdh00G9PenekJDMQoc4Nu8bYOpDFPULs0f04yuRpriTqnhrmg/viewform?usp=sf_link"&gt;SDK Request Form&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Explore &lt;a href="https://github.com/Morpher-io/MorpherWallet"&gt;MorpherWallet on Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Visit the &lt;a href="https://www.morpher.com/wallet"&gt;Wallet Landing Page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Try &lt;a href="https://wallet.morpher.com/"&gt;Morpher Wallet in your browser&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>blockchain</category>
      <category>ethereum</category>
      <category>dapp</category>
      <category>wallet</category>
    </item>
  </channel>
</rss>
