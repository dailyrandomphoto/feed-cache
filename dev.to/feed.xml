<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>16 Tips on How to Make Remote Meetings More Efficient (+ Apps &amp; Tools)</title>
      <author>Anastasia üèÑüèª‚Äç‚ôÄÔ∏è</author>
      <pubDate>Fri, 11 Jun 2021 10:21:26 +0000</pubDate>
      <link>https://dev.to/actitime/16-tips-on-how-to-make-remote-meetings-more-efficient-apps-tools-1g9g</link>
      <guid>https://dev.to/actitime/16-tips-on-how-to-make-remote-meetings-more-efficient-apps-tools-1g9g</guid>
      <description>&lt;p&gt;With the outbreak of the global pandemic and the growing popularity of remote work, remote meetings became an essential part of every workflow. Most managers prefer face-to-face meetings and perceive remote ones as less productive. But the good news is that there is always a possibility to adapt and improve the remote collaboration processes and outcomes.&lt;/p&gt;

&lt;p&gt;To help you maximize the productivity of remote meetings, we‚Äôve created the following list of tips. Read on to learn how to prepare for remote meetings, how to hold them effectively and what you can do to make sure that you and your team members will make the most of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#before"&gt;Before the Meeting&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#tools"&gt;Pick Meeting Tools&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#agenda"&gt;Sharpen the Meeting Agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#settime"&gt;Set Time Properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rules"&gt;Develop and Share the Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#icebreakers"&gt;Plan Ice-Breakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context"&gt;Communicate the Meeting Context&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#during"&gt;During the Meeting&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#mood"&gt;Set the Mood&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#introduce"&gt;Introduce Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#goal"&gt;Remind of the Meeting Goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#roles"&gt;Split the Roles Between Attendants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#engaging"&gt;Be Engaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive"&gt;Use Interactive Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contribute"&gt;Ask Participants to Contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#after"&gt;After the Meeting&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#takeaways"&gt;Clarify Takeaways&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#followups"&gt;Send Follow-ups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feedback"&gt;Ask for Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#stay"&gt;Remote Work is Here to Stay&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-the-meeting"&gt;
  &lt;/a&gt;
  Before the Meeting &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-pick-meeting-tools"&gt;
  &lt;/a&gt;
  1. Pick Meeting Tools &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Any remote meeting is based on three pillars: connection, collaboration and feedback. Here are our top suggestions for each category:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Connection tools:&lt;/strong&gt; &lt;a href="http://zoom.com/"&gt;Zoom&lt;/a&gt;, &lt;a href="https://www.microsoft.com/en-ca/microsoft-365/skype-for-business/download-app"&gt;Skype for Business&lt;/a&gt;, &lt;a href="https://www.skype.com/en/business/"&gt;Microsoft Teams&lt;/a&gt;, &lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Collaboration tools:&lt;/strong&gt; &lt;a href="https://slack.com/intl/en-gb/"&gt;Slack&lt;/a&gt;, &lt;a href="https://www.google.com/intl/en/slides/about/"&gt;Google Slides&lt;/a&gt;, &lt;a href="https://workspace.google.com/products/jamboard/"&gt;Google Jamboard&lt;/a&gt;, &lt;a href="http://www.trello.com/"&gt;Trello&lt;/a&gt;, &lt;a href="https://coggle.it/"&gt;Coggle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feedback tools:&lt;/strong&gt; &lt;a href="https://workspace.google.com/intl/en/products/forms/"&gt;Google Forms&lt;/a&gt;, &lt;a href="https://www.surveymonkey.com/"&gt;SurveyMonkey&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these essentials, you can be sure that participants will feel more engaged. Don‚Äôt forget to notify them about your choice of tools beforehand. Otherwise, you‚Äôll have to waste some meeting time to set your meeting environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sharpen-the-meeting-agenda"&gt;
  &lt;/a&gt;
  2. Sharpen the Meeting Agenda &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Meetings take the time and effort of all the participants, so the best way you can save these resources is to prepare the meeting agenda in advance. Create a detailed plan of all the items you plan to cover and make sure that this order of items is the most digestible one for your listeners.&lt;/p&gt;

&lt;p&gt;To make the most of the meeting, you may want to use questions instead of items for discussion in your meeting plan. Questions will allow you to get a better understanding of who should be invited to the meeting, what problems should be solved instead of abstract topics covered. When you cover all the questions from your agenda, you may be sure that you‚Äôve reached the goal of the meeting.&lt;/p&gt;

&lt;p&gt;For maximum meeting productivity, share your agenda with the participants in advance so that they could prepare their questions and ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of idea visualization tools:&lt;/strong&gt; Google Slides, &lt;a href="https://www.mindmeister.com/mind-map-pricing"&gt;MindMeister&lt;/a&gt;, &lt;a href="https://coggle.it/"&gt;Coggle&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-set-time-properly"&gt;
  &lt;/a&gt;
  3. Set Time Properly &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When scheduling the meeting time, you need to decide whose priorities come first. For example, if you intend to include team members related to the client service, you‚Äôll want to prioritize their needs and adjust meeting time to their schedules because clients always come first. Or if your team is scattered across the globe and different time zones, you need to consider their local time or schedule different meetings for participants from different parts of the world.&lt;/p&gt;

&lt;p&gt;Think about the duration of the meeting and don‚Äôt hesitate to schedule strict time limits. Check with your meeting agenda and make sure that you‚Äôll have enough time to cover all the items and hold a discussion. At the same time, a shorter meeting length creates positive pressure and makes you focus on the most important ideas.&lt;/p&gt;

&lt;p&gt;For more productivity, notify your team about the start time of the meeting and its approximate duration so that all participants could schedule their time properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-develop-and-share-the-rules"&gt;
  &lt;/a&gt;
  4. Develop and Share the Rules &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Regardless of the type of meeting, you need to develop the scenario to make it organized and productive. Are you going to ask introductory questions or go ahead with your speech first? Can participants ask questions as they arise or wait until you finish with the presentation? In which cases attendants should use voice and text chats? All these questions should be carefully thought through and communicated to the participants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of chat tools:&lt;/strong&gt; &lt;a href="https://slack.com/intl/en-gb/"&gt;Slack&lt;/a&gt;, &lt;a href="https://fleep.io/"&gt;Fleep&lt;/a&gt;, &lt;a href="https://twist.com/"&gt;Twist&lt;/a&gt;, &lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-plan-icebreakers"&gt;
  &lt;/a&gt;
  5. Plan Ice-Breakers &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Remote work creates not only physical but also emotional distance between employees. When you gather a remote meeting and see familiar faces joining the video call, you can‚Äôt expect them to be initiative right away after they‚Äôve spent most of their day at home in a comfy atmosphere. So, if you hold remote meetings, it‚Äôs your responsibility to break the ice and make your team members engage in the conversation.&lt;/p&gt;

&lt;p&gt;When it comes to ideas of ice-breaking activities, your imagination and your corporate culture are the only restrictions. You can find dozens of ideas on the Internet, but below, we list our favorites to inspire you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Coffee time.&lt;/strong&gt; Gather together in a video chat room and have tea or coffee together, just like during the office coffee breaks. Feel free to discuss the weather, hobbies, plans for weekends ‚Äî anything that is not related to work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trivia quiz.&lt;/strong&gt; Create a quiz about any topic, share your screen, host the quiz and let your meeting participants discuss the answer options and submit the winning choice. Trivia quizzes can either be related to work (e.g., fact quiz that introduces participants to the topic of the meeting) or not related (e.g., team trivia quiz where participants should answer fun questions about their colleagues).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Team photo.&lt;/strong&gt; Take a funny team photo on the video chat platform. Allow the meeting participants to choose a funny video background photo, put on weird hats and clothes or decide which funny face to make. Give them a few minutes to get ready and snap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plan icebreakers and team-building activities before the start of the meeting and include them in your meeting plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of virtual icebreakers:&lt;/strong&gt; &lt;a href="https://www.bored.social/"&gt;Bored&lt;/a&gt;, &lt;a href="https://icebreaker.range.co/"&gt;IceBreakers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-communicate-the-meeting-context"&gt;
  &lt;/a&gt;
  6. Communicate the Meeting Context &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Most remote meetings require introducing the participants to the details such as the topic of the meeting, its duration, what kind of participants‚Äô interaction is expected. To do this, you may want to send pre-meeting emails or send a message to the meeting chat in Slack.&lt;/p&gt;

&lt;p&gt;Regular meetings, e.g., standup meetings, usually don‚Äôt require any introductions, but brainstorms could go either way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#during-the-meeting"&gt;
  &lt;/a&gt;
  During the Meeting &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#7-set-the-mood"&gt;
  &lt;/a&gt;
  7. Set the Mood &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Mood has a significant impact on how we feel and behave, especially in the working environment. As the meeting host, it‚Äôs important that you set the right meeting tone for the remote meeting. Start the meeting with energy and set a positive mood to encourage creativity and productivity.&lt;/p&gt;

&lt;p&gt;Introduce the planned ice-breaking activity at the onset of the meeting to create a positive atmosphere at the meeting. Hold a brainstorming session, create a trivia quiz or something fun to lighten the mood and encourage participants to engage. Keep this spirit alive through the whole meeting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-introduce-everyone"&gt;
  &lt;/a&gt;
  8. Introduce Everyone &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Not everyone turns their cameras on during the remote video meetings and a long list of participants may not display all the users present at the meeting. In any case, it is a good practice to introduce speakers and attendants of the meeting. You may also want to invite your participants to introduce themselves, if necessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-remind-of-the-meeting-goal"&gt;
  &lt;/a&gt;
  9. Remind of the Meeting Goal &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Introduce or remind the participants of the meeting goal and objectives. Use visual aids such as presentations, collaboration whiteboards and mind maps to make your introduction more engaging.&lt;/p&gt;

&lt;p&gt;After you introduce the agenda, it‚Äôs the best time to share the meeting rules and plan. Explain to the participants the meeting scenario, the order of topics and speakers, the rules on when they can ask the questions. For example, suppose you are planning to hold a brainstorming session. In that case, you may want to notify the participants about that in advance to avoid unnecessary interruptions during the course of the meeting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of task management apps:&lt;/strong&gt; &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;, &lt;a href="https://todoist.com/"&gt;Todoist&lt;/a&gt;, &lt;a href="https://asana.com/"&gt;Asana&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-split-the-roles-between-attendants"&gt;
  &lt;/a&gt;
  10. Split the Roles Between Attendants &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To hold an effective remote meeting, you need to keep track of many things, which makes it almost impossible to handle everything on your own. Pick a few attendants and assign special roles to them to help you hold the meeting.&lt;/p&gt;

&lt;p&gt;Here are a few role ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Facilitator&lt;/strong&gt; ‚Äî responsible for guiding the attendants towards reaching the meeting goal by setting the meeting pace, asking open questions to start discussions, leading decisions and capturing action points.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Notetaker&lt;/strong&gt; ‚Äî records key ideas, decisions, results. These notes are usually sent out in the follow-up letters after the meeting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Timekeeper&lt;/strong&gt; ‚Äî makes sure that every agenda item receives enough time and attention. For example, they limit time spent on each topic and notify the attendants about time running out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case of recurring meetings, assign these roles to different people or run a lottery so that nobody knows which role they‚Äôll get the next time. This will improve the engagement of the meeting attendants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of note-taking apps:&lt;/strong&gt; &lt;a href="https://evernote.com/intl/en/"&gt;Evernote&lt;/a&gt;, &lt;a href="https://www.microsoft.com/en-us/microsoft-365/onenote/digital-note-taking-app"&gt;OneNote&lt;/a&gt;, Google Drive &amp;amp; Docs, &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of time tracking apps:&lt;/strong&gt; &lt;a href="http://actitime.com/?utm_source=dev.to&amp;amp;utm_medium=Syndication&amp;amp;utm_content=homepage"&gt;actiTIME&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-be-engaging"&gt;
  &lt;/a&gt;
  11. Be Engaging &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Speaking of engagement, no one likes boring meetings. We‚Äôve already mentioned ice breakers that set the tone of the meeting. To keep the attendants‚Äô attention, we advise the following ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Set expectations&lt;/strong&gt; for the participants‚Äô engagement&lt;/li&gt;
&lt;li&gt;Run short &lt;strong&gt;team-building activities&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Take time to &lt;strong&gt;celebrate achievements&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;quizzes&lt;/strong&gt; to introduce attendants to the meeting agenda&lt;/li&gt;
&lt;li&gt;Encourage the use of the &lt;strong&gt;text chat&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;online whiteboards&lt;/strong&gt; to create flow charts and other visuals&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;opinion polls&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Allow attendants to &lt;strong&gt;submit anonymous questions&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand the importance of this advice, think of college professors whose lectures are monotonous and tedious ‚Äî their main mistake is that they prioritize information and facts over the audience. One of the key elements of any performance is to be mindful of your audience and encourage their participation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-use-interactive-tools"&gt;
  &lt;/a&gt;
  12. Use Interactive Tools &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To encourage employee engagement and make the most of remote meetings, you can implement various online tools for surveying, brainstorming and visualizing. Here are some of our top picks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polls and quizzes:&lt;/strong&gt; &lt;a href="https://www.google.com/intl/en/forms/about/"&gt;Google Forms&lt;/a&gt;, &lt;a href="https://www.mentimeter.com/"&gt;Mentimeter&lt;/a&gt;, &lt;a href="https://www.polleverywhere.com/"&gt;Poll Everywhere&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Whiteboards:&lt;/strong&gt; &lt;a href="https://miro.com/pricing/"&gt;Miro&lt;/a&gt;, &lt;a href="https://awwapp.com/"&gt;Aww&lt;/a&gt;, &lt;a href="https://www.microsoft.com/en-us/microsoft-365/microsoft-whiteboard/digital-whiteboard-app"&gt;Microsoft Whiteboard&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Mind maps:&lt;/strong&gt; &lt;a href="https://coggle.it/"&gt;Coggle&lt;/a&gt;, &lt;a href="https://www.mindmeister.com/"&gt;MindMeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interactive apps will allow even the shyest employees to involve and participate in meeting activities. Whiteboards and mind maps will help the participants to come up with new ideas and grasp new concepts with more ease. At the same time, polls and quizzes will break the ice and help you to collect feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-ask-participants-to-contribute"&gt;
  &lt;/a&gt;
  13. Ask Participants to Contribute &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Remind participants of their responsibility to contribute to the meeting. The best way to do it is to ask attendees of their perspectives on the meeting agenda regardless of their position, e.g., ask your online marketers and customer support agents to share their thoughts on the product development. Or try the ‚Äú&lt;a href="https://hbr.org/2020/03/how-to-get-people-to-actually-participate-in-virtual-meetings"&gt;nowhere to hide&lt;/a&gt;‚Äù rule: assign people to groups, define the problem they need to solve and give them a limited timeframe to come up with the solution.&lt;/p&gt;

&lt;p&gt;Here are a few more ideas of how to get people to participate in remote meetings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Take polls.&lt;/strong&gt; Incorporate polls and surveys throughout the event. Take anonymous polls if it‚Äôs a sensitive topic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ask open questions.&lt;/strong&gt; As a meeting host, be genuinely interested in collecting as many opinions as possible. Ask questions that require creativity, imagination or analysis e.g., ask employees from other departments to review a new product feature and share their opinion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get them to collaborate.&lt;/strong&gt; Use online whiteboards for brainstorming sessions or encourage collective note-taking using Google Docs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take breaks.&lt;/strong&gt; After you introduce the agenda and finish your presentation, take a break to allow participants to digest and reflect on the information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that during remote meetings, participants can only hear one person at a time clearly, so establish the rules on how to take turns and mute those who ignore them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-the-meeting"&gt;
  &lt;/a&gt;
  After the Meeting &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#14-clarify-takeaways"&gt;
  &lt;/a&gt;
  14. Clarify Takeaways &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Before the meeting is over, refresh the key takeaways to keep in mind. Summarize the most important ideas, next steps or individual tasks and responsibilities that have been identified and assigned during the meeting. Here are a few ideas for the perfect takeaway part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight key ideas&lt;/li&gt;
&lt;li&gt;Ask for questions&lt;/li&gt;
&lt;li&gt;List action items&lt;/li&gt;
&lt;li&gt;Set deadlines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This closing stage of the meeting is essential to the meeting‚Äôs success because it helps the participants remember and write them down if they haven‚Äôt done that yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-send-followups"&gt;
  &lt;/a&gt;
  15. Send Follow-ups &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To make sure that all the participants can get back to the meeting takeaways anytime and people responsible for taking the next steps won‚Äôt forget about that, you need to send follow-ups to all the participants. Pick the distribution channel that will ensure that the follow-ups will reach as many people as possible e.g., for this reason, you may prefer to use a Slack channel over emails.&lt;/p&gt;

&lt;p&gt;Another best practice of engaging follow-ups is to add a touch of creativity and humor. Include gifs and funny pics, add funny quotes and ideas from the meeting, give thanks to the most participating attendants, celebrate the brightest ideas and make it a habit. Make the meeting participants wait for your next follow-up message each time after the meeting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-ask-for-feedback"&gt;
  &lt;/a&gt;
  16. Ask for Feedback &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Finally, one of the essential tips for meeting hosts is to ask for feedback and learn from it. Prepare quick online surveys where meeting participants can anonymously share their opinions and offer ideas for improvement. Use this feedback to reflect, learn and introduce new tools and approaches during your next meeting.&lt;/p&gt;

&lt;p&gt;To keep post-meeting messages and notifications to the minimum, include the link to the feedback-gathering form in the follow-up email or message.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our top picks of quiz apps:&lt;/strong&gt; &lt;a href="https://www.google.com/intl/en/forms/about/"&gt;Google Forms&lt;/a&gt;, &lt;a href="https://www.mentimeter.com/"&gt;Mentimeter&lt;/a&gt;, &lt;a href="https://www.polleverywhere.com/"&gt;Poll Everywhere&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-work-is-here-to-stay"&gt;
  &lt;/a&gt;
  Remote Work is Here to Stay &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The global shift to remote work has proved many &lt;a href="https://www.actitime.com/remote-work-guide/remote-work-benefits/?utm_source=dev.to&amp;amp;utm_medium=Syndication&amp;amp;utm_content=remote-work-benefits"&gt;benefits for employers and employees&lt;/a&gt;. Companies are planning to cut their commercial space and allow most of their employees to work from home 2‚Äì4 days per week with only a few days in the office if needed. So, remote meetings and online tools became an essential part of every workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.actitime.com/?utm_source=dev.to&amp;amp;utm_medium=Syndication&amp;amp;utm_content=homepage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jT44Og5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619702589851/tlEoizZRK.jpeg%3Fauto%3Dcompress" alt="actiTIME - time tracking software"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>management</category>
    </item>
    <item>
      <title>ü§ì Task analytics as a path to effective implementation</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Fri, 11 Jun 2021 10:03:48 +0000</pubDate>
      <link>https://dev.to/koddr/task-analytics-as-a-path-to-effective-implementation-171k</link>
      <guid>https://dev.to/koddr/task-analytics-as-a-path-to-effective-implementation-171k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! üëã It's time to share my experience on the topic of task analytics for programmers to execute them as efficiently as possible.&lt;/p&gt;

&lt;p&gt;Originally, I was inspired by &lt;a href="https://habr.com/ru/post/557182/"&gt;this&lt;/a&gt; article on &lt;strong&gt;Habr&lt;/strong&gt; (in Russian) and thought that I could modify some points from it a bit with my experience. &lt;/p&gt;

&lt;p&gt;And here you are reading what I got!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#analyzing-the-task-and-trying-to-identify-the-final-needs"&gt;Analyzing the task and trying to identify the final needs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploring-a-subject-area"&gt;Exploring a subject area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#matching-solution-options"&gt;Matching solution options&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#do-not-put-into-your-code-features-that-you-do-not-need-now"&gt;Do not put into your code features that you do not need now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trying-the-chosen-option-on-your-picture-of-understanding"&gt;Trying the chosen option on your picture of understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#specifying-details"&gt;Specifying details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementing"&gt;Implementing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyzing-the-task-and-trying-to-identify-the-final-needs"&gt;
  &lt;/a&gt;
  Analyzing the task and trying to identify the final needs
&lt;/h2&gt;

&lt;p&gt;We read the task, think about it and try to understand what the programmer ultimately wants to get. It is not always possible to do this immediately, because other people &lt;strong&gt;think differently&lt;/strong&gt;, while programmers often have a "professional deformation", which makes it more difficult to understand what "non-programmer" is thinking.&lt;/p&gt;

&lt;p&gt;And here we have only two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the task refers to &lt;strong&gt;any part&lt;/strong&gt; of the product being developed, then go there, "click" the buttons and see what happens, re-read the task, check it against what you see on the screen.&lt;/li&gt;
&lt;li&gt;If the task concerns some &lt;strong&gt;new direction or function&lt;/strong&gt;, or &lt;strong&gt;does not concern&lt;/strong&gt; the developed product at all, then we study the business process. Here the base is the business process.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è Although the first option also has a business process, but it's not immediately visible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, the puzzle must come together in your head. I don't know about others (&lt;em&gt;please, share your experience in comments below&lt;/em&gt;), but in my head immediately arise possible solutions. &lt;/p&gt;

&lt;p&gt;Even without the period of understanding the task as such: if there are &lt;strong&gt;options for a solution&lt;/strong&gt;, then the task is understood and the goal of this stage is achieved!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-a-subject-area"&gt;
  &lt;/a&gt;
  Exploring a subject area
&lt;/h2&gt;

&lt;p&gt;This is more &lt;em&gt;complicated&lt;/em&gt; and &lt;em&gt;easier&lt;/em&gt; at the same time. At this stage, you don't have to think much, you have to &lt;strong&gt;research&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, the business process (&lt;em&gt;in the context of the stage, the business process is the environment in which the task will work&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Then, the software products.&lt;/li&gt;
&lt;li&gt;Next, the implementation of existing parts.&lt;/li&gt;
&lt;li&gt;And finally, the environment in which the code works and dependencies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's important to know the architecture of the application. Especially, if you haven't worked with it before. But anyway, you must see if the architecture has been modified, and if so, what kinds. Over time, the architecture of the application, its external dependencies will always be in your head.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è This does not exclude the existence of documentation. It must be! There is simply &lt;strong&gt;no&lt;/strong&gt; other option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only after all the parts of the subject area have been put together in your head can you move on to solution options.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_aGCZ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgudhjg0wo73dbs8zt9w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_aGCZ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgudhjg0wo73dbs8zt9w.jpg" alt="matching solution options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#matching-solution-options"&gt;
  &lt;/a&gt;
  Matching solution options
&lt;/h2&gt;

&lt;p&gt;Hopefully, you have previously researched and understood everything that is required. OK, now you can &lt;strong&gt;start thinking for real&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Yes, choosing the right option is sometimes &lt;em&gt;extremely&lt;/em&gt; difficult, because for the chosen variant it's necessary to be responsible. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§î Responsibility is the biggest fear of almost everyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each option &lt;strong&gt;must&lt;/strong&gt; meet several requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solve the problem.&lt;/li&gt;
&lt;li&gt;Must be implementable in adequate time.&lt;/li&gt;
&lt;li&gt;Not "break" the architecture of the application.&lt;/li&gt;
&lt;li&gt;It should not introduce "trash" and unnecessary "crutches".&lt;/li&gt;
&lt;li&gt;Easy to use for the end users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you chosen your options? Now, try to choose the one that is &lt;strong&gt;more useful&lt;/strong&gt;. There are two frontier states here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It's done quickly, but it's a one-time solution;&lt;/li&gt;
&lt;li&gt;It takes longer, but it's universal;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh, but we need to choose something in between... To make it as efficient as possible, there are some little tips I've learned during more than 12 years of development in different teams. &lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-not-put-into-your-code-features-that-you-do-not-need-now"&gt;
  &lt;/a&gt;
  Do not put into your code features that you do not need now
&lt;/h3&gt;

&lt;p&gt;Immediately cut off the idea of features that you do not need now, but may need in the future. Usually, these features will "dead load" with ~70% probability.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trying-the-chosen-option-on-your-picture-of-understanding"&gt;
  &lt;/a&gt;
  Trying the chosen option on your picture of understanding
&lt;/h3&gt;

&lt;p&gt;And if I tell you that the chosen option is wrong? You will, of course, answer that it cannot be, because you have already gone through a bunch of options and chosen the right one.&lt;/p&gt;

&lt;p&gt;OK. So be it! But what happens if we start to implement it? What are the odds that nothing will break? Just these questions need to be answered at this stage. &lt;/p&gt;

&lt;p&gt;For a better understanding, I will give you an example of the &lt;a href="https://en.wikipedia.org/wiki/Ansible_(software)"&gt;Ansible&lt;/a&gt; approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è For those who are not familiar with &lt;strong&gt;Ansible&lt;/strong&gt;, it's a tool to automate the processes of deploying off-the-shelf infrastructure on a remote server. Please, read the &lt;a href="https://docs.ansible.com/ansible/latest/index.html"&gt;official docs&lt;/a&gt; for more information!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ansible has a special mode of operation, called "dry run", where it "plays" the given playbook (file in &lt;code&gt;YAML&lt;/code&gt; format), but does &lt;strong&gt;not&lt;/strong&gt; make any changes. After making sure that the option does not "break" anything, Ansible runs the &lt;em&gt;real change process&lt;/em&gt; on the target server.&lt;/p&gt;

&lt;p&gt;Similarly, you need to "dry run" in your head the chosen implementation and see what it will affect. And if there is a chance to "break" something, we go back a step and look for new options.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specifying-details"&gt;
  &lt;/a&gt;
  Specifying details
&lt;/h3&gt;

&lt;p&gt;Some additional data or examples may be needed &lt;strong&gt;before&lt;/strong&gt; implementation.&lt;/p&gt;

&lt;p&gt;If you have gathered everything you might need, you are ready. At this point, you have to understand that &lt;strong&gt;nothing&lt;/strong&gt; is stopping you from writing code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network works.&lt;/li&gt;
&lt;li&gt;Software licenses are alive.&lt;/li&gt;
&lt;li&gt;Your chair and table are comfortable.&lt;/li&gt;
&lt;li&gt;Coffee or tea poured into your favorite mug.&lt;/li&gt;
&lt;li&gt;...and so on üòâ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing"&gt;
  &lt;/a&gt;
  Implementing
&lt;/h3&gt;

&lt;p&gt;At last, we're writing code! Don't get too excited, this has its own pitfalls. It's highly probable that you will find things you haven't considered while writing the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§∑‚Äç‚ôÄÔ∏è Well, it happens! But let's not stand still and move on. It's important not to panic and not to consider it your fault.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just answer the question: &lt;em&gt;does the new data interfere with realization, or is it just a correction&lt;/em&gt;? If they only make clarifications, then you are &lt;strong&gt;lucky&lt;/strong&gt;, and you can move on. &lt;/p&gt;

&lt;p&gt;But if they interfere with the implementation, then we &lt;strong&gt;go back&lt;/strong&gt; at least three steps. Yes, you read that correctly. In a critical scenario, it's better to go back and go all the way again with changed data.&lt;/p&gt;

&lt;p&gt;OK. But what about task's &lt;strong&gt;deadline&lt;/strong&gt;, if I've to turn back? &lt;/p&gt;

&lt;p&gt;That's exactly what many people are afraid of and can't accept responsibility for the implementation option they've chosen. And there is one simple recipe that has more than once saved me and my development team from inevitable technical debt and bad decisions.&lt;/p&gt;

&lt;p&gt;üéØ &lt;strong&gt;Let's take our time and do it right, not the way they make us do it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just talk to the person who gave you this task and try to explain the difficulties. Learn to assert your right to create truly great code!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è I assure you that no project manager would want to explain to a client after the project is delivered that the resulting product (&lt;em&gt;although it works now&lt;/em&gt;) has many unaccounted for moments that may be a problem for the project's development in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Thought Catalog &lt;a href="https://unsplash.com/photos/Nv-vx3kUR2A"&gt;https://unsplash.com/photos/Nv-vx3kUR2A&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Avi Richards &lt;a href="https://unsplash.com/photos/Z3ownETsdNQ"&gt;https://unsplash.com/photos/Z3ownETsdNQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more ‚Üí write a comment below &amp;amp; follow me. Thanks! üòò&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>devjournal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>4 Tips for JavaScript 2021 to write optimized code</title>
      <author>Animesh Dhanuk</author>
      <pubDate>Fri, 11 Jun 2021 09:49:51 +0000</pubDate>
      <link>https://dev.to/animeshdhanuk/4-tips-for-javascript-2021-to-write-optimized-code-3ih</link>
      <guid>https://dev.to/animeshdhanuk/4-tips-for-javascript-2021-to-write-optimized-code-3ih</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tips-for-javascript-2021-to-write-optimized-code"&gt;
  &lt;/a&gt;
  tips for JavaScript 2021 to write optimized code
&lt;/h1&gt;

&lt;p&gt;JavaScript is the front-hand language as we know. JavaScript is using for web designing, mobile apps, game development, crate web servers, and JavaScript is WebSite Scripting Language(WSSL). That's one of the most used languages by developers, programmers, and coders.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-use-logical-assignment-operators"&gt;
  &lt;/a&gt;
  1. Use Logical Assignment Operators
&lt;/h1&gt;

&lt;p&gt;Now, In JavaScript 2021 logical operators and assignment operators are combined, so you can use both in the same syntax as below. And That's one of the most used tips for JavaScript 2021 to write optimized code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#or-operator"&gt;
  &lt;/a&gt;
  OR Operator
&lt;/h2&gt;

&lt;p&gt;The logical OR assignment (X ||= Y) operator only assigns if X is false.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-operator"&gt;
  &lt;/a&gt;
  AND Operator
&lt;/h2&gt;

&lt;p&gt;The logical AND assignment (X &amp;amp;&amp;amp;= Y) operator only assigns if X is true.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-use-numeric-separators"&gt;
  &lt;/a&gt;
  2. Use Numeric Separators
&lt;/h1&gt;

&lt;p&gt;This is one of the most used operators by developers and programmers when they have a large amount of numbers.  When using a separator in number it looks better than an unseparated number. This is one of the best tips for JavaScript 2021 to write optimized code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-use-replace-all"&gt;
  &lt;/a&gt;
  3. Use Replace All
&lt;/h1&gt;

&lt;p&gt;The replaceAll() method returns a new string with all matches. It returns any pattern that can be a string. The original string is left unchanged. The syntax of this operator is replaceAll(regexp, newSubstr). That's one of the most used tips for JavaScript 2021 to write optimized code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-use-promiseany"&gt;
  &lt;/a&gt;
  4. Use Promise.Any()
&lt;/h1&gt;

&lt;p&gt;The promise.any() method is to resolve your promise() as soon as which is passed by you. If no promise is passed then it returns promise is rejected with an error. That's one of the best tips for JavaScript 2021 to write optimized code.&lt;/p&gt;

&lt;p&gt;I Hope You Enjoy The Above Tips. Thank For Reading...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/06/4-tips-for-javascript-2021-to-write.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introducing Otlio, a Powerful Todo List üöÄ</title>
      <author>Stanley Owen</author>
      <pubDate>Fri, 11 Jun 2021 09:44:50 +0000</pubDate>
      <link>https://dev.to/stanleyowen/introducing-otlio-a-powerful-todo-list-32n6</link>
      <guid>https://dev.to/stanleyowen/introducing-otlio-a-powerful-todo-list-32n6</guid>
      <description>&lt;p&gt;Hello World! üôã‚Äç‚ôÇÔ∏èüëã&lt;br&gt;
I would like to introduce Otlio, a powerful Todo List üöÄ, which also supports &lt;strong&gt;drag and drop&lt;/strong&gt;ü§©.&lt;/p&gt;

&lt;p&gt;Website Link: &lt;a href="https://otlio.netlify.app/"&gt;https://otlio.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Support for Google and GitHub &lt;strong&gt;OAuth&lt;/strong&gt; üî• Login&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;2FA (Two Factor Authentication)&lt;/strong&gt; üîë&lt;/li&gt;
&lt;li&gt;Support for &lt;strong&gt;Drag and Drop&lt;/strong&gt; Feature ‚úä&lt;/li&gt;
&lt;li&gt;Heavy focus on &lt;strong&gt;security&lt;/strong&gt; üîê&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customer Support&lt;/strong&gt; üôå&lt;/li&gt;
&lt;li&gt;Available in Dark Mode üåì&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Otlio is also an open source project üëê, which is hosted on: &lt;a href="https://github.com/stanleyowen/otlio"&gt;https://github.com/stanleyowen/otlio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find this project useful, leave a üåü on &lt;a href="https://github.com/stanleyowen/otlio"&gt;GitHub&lt;/a&gt; to keep a beginner motivated. üòä&lt;/p&gt;

&lt;p&gt;Any comments will be appreciated and everyone is welcome to contribute to this project (ÔºæÔºµÔºæ)„Éé&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding! üéâ
&lt;/h2&gt;

&lt;p&gt;You may also like these articles:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/build-a-login-and-register-form-with-html-and-css-1nkl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;‚ú®Build a Login and Register Form with HTML and CSS‚ú®&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen „Éª Mar 3 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/todo-application-an-open-source-and-easy-to-use-web-application-f55" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Todo Application - An Open Source and Easy to Use Web Application&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen „Éª Feb 7 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/stanleyowen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoCVBbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VbJxvjnj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513457/4f66c06f-1d41-4254-ac22-8e8b98c384c2.jpg" alt="stanleyowen image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stanleyowen/fire-ui-a-user-friendly-and-reliable-css-framework-229d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Fire-UI : A User-Friendly and Reliable CSS Framework&lt;/h2&gt;
      &lt;h3&gt;Stanley Owen „Éª Dec 19 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>portfolio</category>
      <category>javascript</category>
    </item>
    <item>
      <title>üÖπüÜÇ-üÜÅüÖ¥üÖ∞üÖ≤üÜÉ-üÖ≥üÜÅüÜà üéâ</title>
      <author>Wonjang Son</author>
      <pubDate>Fri, 11 Jun 2021 09:39:11 +0000</pubDate>
      <link>https://dev.to/filoscoder/-4e7i</link>
      <guid>https://dev.to/filoscoder/-4e7i</guid>
      <description>&lt;p&gt;üÖπüÜÇ-üÜÅüÖ¥üÖ∞üÖ≤üÜÉ-üÖ≥üÜÅüÜà üéâ&lt;/p&gt;

&lt;p&gt;Hi, I've just opened a public space to build up a useful collection of helper functions for ordinary and concurrent daily problems.&lt;/p&gt;

&lt;p&gt;I'm a freelance Software Engineer, my stack is &lt;code&gt;Javascript&lt;/code&gt; &amp;amp; &lt;code&gt;React&lt;/code&gt;. After some time working on different projects, I found myself facing the same problems and solving them with the same pattern. This is a repository for saving valuable time and stay as DRY as possible while working.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This open-source has his goal on stay as üÑ≥üÖÅüÖà (Don't Repeat Yourself) as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;How many times do I have to write a function to mask/format a mobile phone number input????&lt;/p&gt;

&lt;p&gt;This is how I implemented:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parameter&amp;gt; $inputValue: string&lt;/span&gt;
&lt;span class="c1"&gt;// Output&amp;gt; "xxx-xxxx-xxxx"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;phoneMask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;inputValue&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\D&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(\d{1,3})(\d{1,4})?(\d{1,4})?&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#same-code-to-solve-the-same-problems"&gt;
  &lt;/a&gt;
  SAME CODE to solve the SAME PROBLEMS?
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#contribute-your-grain-of-code"&gt;
  &lt;/a&gt;
  Contribute your grain of codeüëá
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://github.com/filoscoder/js-react-dry"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljESpB2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jthtj9no2b1vhfrsl4p1.png" alt="DRY-001"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>dry</category>
    </item>
    <item>
      <title>Solution: Stone Game VII</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 11 Jun 2021 09:08:33 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-stone-game-vii-3lei</link>
      <guid>https://dev.to/seanpgallivan/solution-stone-game-vii-3lei</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/stone-game-vii/discuss/1264516"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1690-medium-stone-game-vii"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/stone-game-vii/"&gt;Leetcode Problem #1690 (&lt;em&gt;Medium&lt;/em&gt;): Stone Game VII&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Alice and Bob take turns playing a game, with &lt;strong&gt;Alice starting first&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;code&gt;n&lt;/code&gt; stones arranged in a row. On each player's turn, they can &lt;strong&gt;remove&lt;/strong&gt; either the leftmost stone or the rightmost stone from the row and receive points equal to the &lt;strong&gt;sum&lt;/strong&gt; of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.&lt;/p&gt;

&lt;p&gt;Bob found that he will always lose this game (poor Bob, he always loses), so he decided to &lt;strong&gt;minimize the score's difference&lt;/strong&gt;. Alice's goal is to &lt;strong&gt;maximize the difference&lt;/strong&gt; in the score.&lt;/p&gt;

&lt;p&gt;Given an array of integers &lt;code&gt;stones&lt;/code&gt; where &lt;code&gt;stones[i]&lt;/code&gt; represents the value of the &lt;code&gt;i&lt;/code&gt;th stone &lt;strong&gt;from the left&lt;/strong&gt;, return &lt;em&gt;the &lt;strong&gt;difference&lt;/strong&gt; in Alice and Bob's score if they both play &lt;strong&gt;optimally&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;stones = [5,3,1,4,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].&lt;br&gt;- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].&lt;br&gt;- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].&lt;br&gt;- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].&lt;br&gt;- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].&lt;br&gt;The score difference is 18 - 12 = 6.&lt;br&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;stones = [7,90,5,1,100,10,10,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == stones.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= n &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= stones[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Like most of the Stone Game problems, this one boils down to a system of ever-repeating subproblems, as the there are many different ways to get to the same board condition as we move towards the end of the game. This naturally points to a &lt;strong&gt;dynamic programming&lt;/strong&gt; (&lt;strong&gt;DP&lt;/strong&gt;) solution.&lt;/p&gt;

&lt;p&gt;In order to represent the different board positions, we'd normally build an &lt;strong&gt;N * N&lt;/strong&gt; DP matrix where &lt;strong&gt;N&lt;/strong&gt; is the length of the stones array (&lt;strong&gt;S&lt;/strong&gt;). In this DP array, &lt;strong&gt;dp[i][j]&lt;/strong&gt; would represent the best score difference with &lt;strong&gt;i&lt;/strong&gt; representing the leftmost remaining stone's index and &lt;strong&gt;j&lt;/strong&gt; representing the rightmost remaining stone's index.&lt;/p&gt;

&lt;p&gt;Since we're using a &lt;strong&gt;top-down&lt;/strong&gt; DP approach, we'll start at &lt;strong&gt;i = N - 2&lt;/strong&gt; and iterate backwards and start each nested &lt;strong&gt;for&lt;/strong&gt; loop at &lt;strong&gt;j = i + 1&lt;/strong&gt;. This ensures that we're building the pyramid of DP results downward, always starting each row with &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;j&lt;/strong&gt; next to each other.&lt;/p&gt;

&lt;p&gt;For each row, we'll keep track of the sum &lt;strong&gt;total&lt;/strong&gt; of the stones in the range &lt;strong&gt;[i,j]&lt;/strong&gt; by adding &lt;strong&gt;S[j]&lt;/strong&gt; at each iteration of &lt;strong&gt;j&lt;/strong&gt;. Then, we can represent the current player's ideal play by choosing the best value between picking the stone at &lt;strong&gt;i&lt;/strong&gt; (&lt;strong&gt;total - S[i]&lt;/strong&gt;) and picking the stone at &lt;strong&gt;j&lt;/strong&gt; (&lt;strong&gt;total - S[j]&lt;/strong&gt;). For each option, we have to also subtract the best value that the other player will get from the resulting board position (&lt;strong&gt;dp[i+1][j]&lt;/strong&gt; or &lt;strong&gt;dp[i][j-1]&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Since we will only be building off the current and previously-finished rows, however, we can actually eliminate the DP matrix and instead just define two &lt;strong&gt;N&lt;/strong&gt;-length arrays representing the current and previous rows (&lt;strong&gt;dpCurr, dpLast&lt;/strong&gt;), and swap between them at each iteration of &lt;strong&gt;i&lt;/strong&gt;. This will drop the &lt;strong&gt;space complexity&lt;/strong&gt; from &lt;strong&gt;O(N^2)&lt;/strong&gt; to &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the end, the solution will be the value stored in the DP array representing the board position with all stones present. We should therefore &lt;strong&gt;return dpCurr[N-1]&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N^2)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;S&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for the two dp arrays&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stoneGameVII&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;
        &lt;span class="nx"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stoneGameVII&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;stoneGameVII&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stoneGameVII&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>What is data cleaning?</title>
      <author>SkillPayTheBills</author>
      <pubDate>Fri, 11 Jun 2021 09:07:11 +0000</pubDate>
      <link>https://dev.to/skillpaythebil1/what-is-data-cleaning-3njl</link>
      <guid>https://dev.to/skillpaythebil1/what-is-data-cleaning-3njl</guid>
      <description>&lt;p&gt;Data cleaning is one of the most important procedures you should learn in data analysis. You will constantly be working with different sets of data and the accuracy or completeness of the same is never guaranteed. Because of this reason, you should learn how to handle such data and make sure the incompleteness or errors present do not affect the final outcome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why should you clean data?&lt;/strong&gt; &lt;br&gt;
Especially if you did not produce it in the first place? Using unclean data is a sure way to get poor results. You might be using a very powerful computer capable of performing calculations at a very high speed, but what they lack is intuition. Without this, you must make a judgement call each time you go through a set of data. In data analysis, your final presentation should be a reflection of the reality in the data you use. For this reason, you must eliminate any erroneous entries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Possible Causes of Dirty Data&lt;/strong&gt; &lt;br&gt;
One of the most expensive overheads in many organizations is data cleaning. Unclean data is present in different forms. Your company might suffer in the form of omissions and errors present in the master data you need for analytical purposes. Since this data is used in important decision-making processes, the effects are costly. By understanding the different ways dirty data finds its way into your organization, you can find ways of preventing it, thereby improving the quality of data you use. &lt;/p&gt;

&lt;p&gt;In most instances, automation is applied in data collection. Because of this, you might experience some challenges with the quality of data collected or consistency of the same. Since some data is obtained from different sources, they must be collated into one file before processing. It is during this process that concerns as to the integrity of the data might arise. The following are some explanations as to why you have unclean data:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incomplete data&lt;/strong&gt;&lt;br&gt;
The problem of incomplete data is very common in most organizations. When using incomplete data, you end up with many important parts of the data blank. For example, if you are yet to categorize your customers according to the target industry, it is impossible to create a segment in your sales report according to industry classification. This is an important part of your data analysis that will be missing, hence your efforts will be futile, or expensive in terms of time and resources invested before you get the complete and appropriate data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Errors at input&lt;/strong&gt;&lt;br&gt;
Most of the mistakes that lead to erroneous data happen at data entry points. The individual in charge might enter the wrong data, use the wrong formula, misread the data, or innocently mistype the wrong data. In the case of an open-ended report like questionnaires, the respondents might input data with typos or use words and phrases that computers cannot decipher appropriately. Human error at input points is always the biggest challenge in data accuracy. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data inaccuracies&lt;/strong&gt;&lt;br&gt;
Inaccurate data is in most cases a matter of context. You could have the correct data, but for the wrong purpose. Using such data can have far-reaching effects, most of which are very costly in the long run. Think about the example of a data analyst preparing a delivery schedule for clients, but the addresses are inaccurate. The company could end up delivering products to their customers, but with the wrong address details. As a matter of context, the company does have the correct addresses for their clients, but they are not matched correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duplicate data&lt;/strong&gt;&lt;br&gt;
In cases where you collect data from different sources, there is always a high chance of data duplication. You must have a lot of checks in place to ensure that duplicates are identified. For example, one report might list student scores under Results, while another will have them under Performance. The data under these tags will be similar, but your sensors will consider them as two independent entities. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problematic sensors&lt;/strong&gt;&lt;br&gt;
Unless you are using a machine that periodically checks for errors and corrects them or alerts you, it is possible to encounter errors as a result of problematic sensors. Machines can be faulty or breakdown too, which increases the likelihood of a problematic data entry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incorrect data&lt;/strong&gt;&lt;br&gt;
Entries An incorrect entry will always deliver the wrong result. Incorrect entry happens when your dataset includes entries that are not within the acceptable range. For example, data for the month of February should range from 1 to 28 or 29. If you have data for February ranging up to 31, there is definitely an error in your entries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data mungling&lt;/strong&gt;&lt;br&gt;
If at your data entry point you use a machine with problematic sensors, it is possible to record erroneous values. You might be recording people‚Äôs ages, and the machine inputs a negative figure. In some cases, the machine could actually record correct data, but between the input point and the data collection point, the data might be mungled, hence the erroneous results. If you are accessing data from a public internet connection, a network outage during data transmission might also affect the integrity of the data.&lt;/p&gt;

&lt;p&gt;Read üëâ [(&lt;a href="https://skillpaythebills.com/what-is-data-science/)"&gt;https://skillpaythebills.com/what-is-data-science/)&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;**Standardization concerns*8&lt;br&gt;
For data obtained from different sources, one of the concerns is often how to standardize the data. You should have a system or method in place to identify similar data and represent them accordingly. Unfortunately, it is not easy to manage this level of standardization. As a result, you end up with erroneous entries. Apart from data obtained from multiple sources, you can also experience challenges dealing with data obtained from the same source. Everyone inputs data uniquely, and this might pose a challenge in data analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Identify Inaccurate Data&lt;/strong&gt; &lt;br&gt;
More often, you need to make a judgement call to determine whether the data you are accessing is accurate or not. As you go through data, you must make a logical decision based on what you see. The following are some factors you should think about:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Study the range&lt;/strong&gt;&lt;br&gt;
 First, check the range of data. This is usually one of the easiest problems to identify. Let‚Äôs say you are working on data for primary school kids. You know the definitive age bracket for the students. If you identify age entries that are either too young or too old for primary school kids whose data you have, you need to investigate further. &lt;/p&gt;

&lt;p&gt;Essentially what you are doing here is an overview of a max-min approach. With these ranges in mind, you can skim through data and identify erroneous entries. Skimming through is easy if you are working with a few entries. If you have thousands or millions of data entries, a max-min function code can help you identify the wrong entries in an instant. You can also plot the data on a graph and visually detect the values that don‚Äôt fall within the required distribution pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Investigate the categories&lt;/strong&gt;&lt;br&gt;
 How many categories of data do you expect? This is another important factor that will help you determine whether your data is accurate or not. If you expect a dataset with nine categories, anything less is acceptable, but not more. If you have more than nine categories, you should investigate to determine the legitimacy of the additional categories. Say you are working with data on marital status, and your expected options are single, married, divorced, or widowed. If the data has six categories, you should investigate to determine why there are two more.&lt;/p&gt;

&lt;p&gt;Read üëâ[(&lt;a href="https://skillpaythebills.com/what-is-data-mining/)"&gt;https://skillpaythebills.com/what-is-data-mining/)&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data consistency&lt;/strong&gt;&lt;br&gt;
 Look at the data in question and ensure all entries are consistent. In some cases, inaccuracies appear as a result of inconsistency. This is common when working with percentages. Percentages can either be fed into data sets as basis points or decimal points. If you have data that has both sets of entries, they might be incompatible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inaccuracies across multiple fields&lt;/strong&gt;&lt;br&gt;
 This is perhaps one of the most difficult challenges you will overcome when cleaning inaccurate data. The following entries, for example, are valid individually. A 4-year old girl is a valid age entry. 5 children is also a valid entry. However, a datapoint that depicts Grace as a 4-year old girl with 5 children is absurd. You would need to check for inconsistencies and inaccuracies in several rows and columns. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data visualization&lt;/strong&gt; &lt;br&gt;
Plotting data in visual form is one of the easiest ways of identifying abnormal distributions  or any other errors in the data. Say you are working with data whose visualization should result in a bimodal distribution, but when you plot the data you end up with a normal distribution. This would immediately alert you that something is not right, and you need to check your data for accuracy. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of errors&lt;/strong&gt;&lt;br&gt;
 in your data set Having identified the unique errors in the data set, you must enumerate them. Enumeration will help you make a final decision on how and whether to use the data. How many errors are there? If you have more than half of the data as inaccurate, it is obvious that your presentation would be greatly flawed. You must then follow up with the individuals who prepared the data for clarification or find an alternative. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Missing entries&lt;/strong&gt; &lt;br&gt;
A common data concern that data analysts deal with is working with datasets missing some entries. Missing entries is relative. If you are missing two or three entries, this should not be a big issue. However, if your data set is missing many entries, you have to find out the reason behind this. &lt;/p&gt;

&lt;p&gt;Missing entries usually happen when you are collating data from multiple sources, and in the process some of the data is either deleted, overwritten, or skipped. You must investigate the missing entries because the answer might help you determine whether you are missing only a few entries that might be insignificant going forward, or important entries whose absence affects the outcome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Clean Data&lt;/strong&gt;&lt;br&gt;
 Having gone through the procedures described above and identified unclean data, your next challenge is how to clean it and use accurate data for analysis. You have five possible alternatives for handling such a situation: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data imputation&lt;/strong&gt;&lt;br&gt;
 If you are unable to find the necessary values, you can impute them by filling in the gaps for the inaccurate values. The closest explanation for imputation is that it is a clever way of guessing the missing values, but through a data-driven scientific procedure. Some of the techniques you can use to impute missing data include stratification and statistical indicators like mode, mean and median. &lt;/p&gt;

&lt;p&gt;If you have studied the data and identified unique patterns, you can stratify the missing values based on the trend identified. For example, men are generally taller than women. You can use this presumption to fill in missing values based on the data you already have. &lt;/p&gt;

&lt;p&gt;The most important thing, however, is to try and seek a second opinion on the data before imputing your new values. Some datasets are very critical, and imputing might introduce a personal bias which eventually affects the outcome. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data scaling&lt;/strong&gt; &lt;br&gt;
Data scaling is a process where you change the data range so that you have a reasonable range. Without this, some values that might appear larger than others might be given prominence by some algorithms.&lt;/p&gt;

&lt;p&gt;For example, the age of a sample population generally exists within a smaller range compared to the average population of a city. Some algorithms will give the population priority over age, and might ignore the age variable altogether. &lt;/p&gt;

&lt;p&gt;By scaling such entries, you maintain a proportional relationship between different variables, ensuring that they are within a similar range. A simple way of doing this is to use a baseline for the large values, or use percentage values for the variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correcting data&lt;/strong&gt; &lt;br&gt;
Correcting data is a far better alternative than removing data. This involves intuition and clarification. If you are concerned about the accuracy of some data, getting clarification can help allay your fears. With the new information, you can fix the problems you identified and use data you are confident about in your analysis. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data removal&lt;/strong&gt; &lt;br&gt;
One of the first things you could think about is to eliminate the missing entries from your dataset. Before you do this, it is advisable that you investigate to determine why the entries are missing. In some cases, the best option is to remove the data from your analysis altogether. If, for example, more than 80% of entries in a row is missing and you cannot replace them from any other source, that row will not be useful to your analysis. It makes sense to remove it.&lt;/p&gt;

&lt;p&gt;Data removal comes with caveats. If you have to eliminate any data from your analysis, you must give a reason for this decision in a report accompanying your analysis. This is important so as to safeguard yourself from claims of data manipulation or doctoring data to suit a narrative. &lt;/p&gt;

&lt;p&gt;Some types of data are irreplaceable, so you must consult experts in the associated fields before you remove them. Most of the time, data removal is applied when you identify duplicates in the data, especially if removing the duplicates does not affect the outcome of your analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flagging data&lt;/strong&gt; &lt;br&gt;
There are situations where you have columns missing some values, but you cannot afford to eliminate all of them. If you are working with numeric data, a reprieve would be to introduce a new column where you indicate all the missing values. The algorithm you are using should identify these values as such. In case the flagged values are necessary in your analysis, you can impute them or find a better way to correct them then use them in your analysis. In case this is not possible, make sure you highlight this in your report. &lt;/p&gt;

&lt;p&gt;Cleaning erroneous data can be a difficult process. A lot of data scientists generally hope to avoid it, especially since it is time-consuming. However, it is a necessary process that will bring you closer to using appropriate data for objective is to use clean data that will give you the closest reflection of the true picture of events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Avoid Data Contamination&lt;/strong&gt; &lt;br&gt;
From empty data fields to data duplication and invalid addresses, there are so many ways you can end up with contaminated data. Having looked at possible causes and methods of cleaning data, it is important for an expert in your capacity to put measures in place to prevent data contamination in the future. The challenges you experienced in cleaning data could easily be avoided, especially if the data collection processes are within your control. &lt;/p&gt;

&lt;p&gt;Looking back to the losses your business suffers in dealing with contaminated data and the resource wastage in terms of time, you can take significant measures to reduce inefficiencies, which will eventually have an impact on your customers and their level of satisfaction. &lt;/p&gt;

&lt;p&gt;One of the most important steps today is to invest in the appropriate CRM programs to help in data handling. Having data in one place makes it easier to verify the credibility and integrity of data within your database. The following are some simple methods you can employ in your organization to prevent data contamination, and ensure you are using quality data for decision-making.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proper configurations&lt;/strong&gt; &lt;br&gt;
Irrespective of the data handling programs you use, one of the most important things is to make sure you configure applications properly. Your company could be using CRM programs or simple Excel sheets. Whichever the case, it is important to configure your programs properly. Start with the critical information. Make sure the entries are accurate and complete.&lt;/p&gt;

&lt;p&gt;One of the challenges of incomplete data is that there is always the possibility that someone could complete them with inaccurate data to make them presentable, when this is not the real picture. &lt;/p&gt;

&lt;p&gt;Data integrity is just as important, so make sure you have the appropriate data privileges in place for anyone who has to access critical information. Set the correct range for your data entries. This way, anyone keying in data will be unable to enter incorrect data not within the appropriate range. Where possible, set your system up such that you can receive notifications whenever someone enters the wrong range, or is struggling, so that you can follow up later on and ensure you captured the correct data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proper training&lt;/strong&gt; &lt;br&gt;
Human error is one of a data analyst‚Äôs worst nightmares when trying to prevent data contamination. Other than innocent mistakes, many errors from human entry are usually about context. It is important that you train everyone handling data on how to go about it. This is a good way to improve accuracy and data integrity from the foundation ‚Äì data entry. Your team must also understand the challenges you experience when using contaminated data, and more importantly why they need to be keen at data entry. If you are using CRM programs, make sure they understand different functionality levels so they know the type of data they should enter. &lt;/p&gt;

&lt;p&gt;Another issue is how to find the data they need. When under duress, most people key in random or inaccurate data to get some work done or bypass some restrictions. By training them on how to search for specific data, it is easier to avoid unnecessary challenges with erroneous entries. This is usually a problem when you have new members joining your team. Ensure you train them accordingly, and encourage them to ask for help whenever they are unsure of anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entry formats&lt;/strong&gt; &lt;br&gt;
The data format is equally important as the desired level of accuracy. Think about this from a logical perspective. If someone sends you a text message written in all capital letters, you will probably disregard it or be offended by the tone of the message. However, if the same message is sent with proper formatting, your response is more positive. The same applies to data entry. Try and make sure that everyone who participates in data handling is careful enough to enter data using the correct format. Ensure the formats are easy to understand, and remind the team to update data they come across if they realize it is not in the correct format. Such changes will go a long way in making your work easier during analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Empower data handlers&lt;/strong&gt;&lt;br&gt;
Beyond training your team, you also need to make sure they are empowered and aware of their roles in data handling. One of the best ways of doing this is to assign someone the data advocacy role. A data advocate is someone whose role is to ensure and champion consistency in data handling. Such a person will essentially be your data administrator. Their role is usually important, especially when implementing new systems. They come up with a plan to ensure data is cleaned and organized. One of their deliverables should include proper data collection procedures to help you improve the results obtained from using the data in question. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overcoming data duplication&lt;/strong&gt;&lt;br&gt;
 Data duplication happens in so many organizations because the same data is processed at different levels. Duplication might eventually see you discard important and accurate data accidentally, affecting any results derived from the said data.&lt;/p&gt;

&lt;p&gt;For example, ensure your team searches for specific items before they create new ones. Provide an in-depth search process that increases the search results and reduces the possibility of data duplication. For example, beyond looking for a customer‚Äôs name, the entry should also include contact information. Provide as many relevant fields that can be searched into, thereby increasing the possibility of arresting and avoiding duplicates. &lt;/p&gt;

&lt;p&gt;You can find data for a customer named Charles McCarthy in different databases labeled as Charles MacCarthy or Charles Mc Carthy. The moment you come across such duplicates, the last thing you want to do is to eliminate them from the database. Instead, investigate further to ascertain the similarities and differences between the entries. Consult, verify, and update the correct entry accordingly. Alternatively, you can escalate such issues to your data advocate for further action. At the same time, put measures in place that scans your database to warn users whenever they are about to create a duplicate entry.&lt;/p&gt;

&lt;p&gt;**Data filtration*8 &lt;br&gt;
Perhaps one of the best solutions would be cleaning data before it gets into your database. A good way of doing this would be creating clear outlines on the correct data format to use. With such procedures in place, you have an easier time handling data. If all the conditions are met, you will probably handle data cleaning at the entry point instead of once the data is in your database, making your work easier. &lt;/p&gt;

&lt;p&gt;Create filters to determine the right data to collect and the data that can be updated later. It doesn‚Äôt make sense to collect a lot of information to give you the illusion of a complete and elaborate database, when in a real sense very little of what you have is relevant to your cause. &lt;/p&gt;

&lt;p&gt;The misinformation that arises from inaccurate data can be avoided if you take the right precautionary measures in data handling. Data security is also important, especially if you are using data sources where lots of other users have access. Restrict access to data where possible, and make sure you create different access privileges for all users.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>database</category>
      <category>datacleaning</category>
    </item>
    <item>
      <title>AVL Tree C++</title>
      <author>Lalit Yadav</author>
      <pubDate>Fri, 11 Jun 2021 08:28:31 +0000</pubDate>
      <link>https://dev.to/therise3107/avl-tree-c-3idg</link>
      <guid>https://dev.to/therise3107/avl-tree-c-3idg</guid>
      <description>&lt;p&gt;AVL Tree is a balanced binary search tree in which any two subtree height only differ by at most 1 i.e height of |Left child - Right child| &amp;lt;= 1. Along with key and value at each node we also store the computed Height property.&lt;/p&gt;

&lt;p&gt;We do Rebalancing if the difference is more than 1.&lt;br&gt;
 AVL supports following operations:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find in O(logN)&lt;/li&gt;
&lt;li&gt;Insert in O(logN)&lt;/li&gt;
&lt;li&gt;Delete in O(logN)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#analysis-of-operations"&gt;
  &lt;/a&gt;
  Analysis of operations
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ocaml"&gt;&lt;code&gt; &lt;span class="nc"&gt;AVLInsert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nc"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="nc"&gt;Rebalancing&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

 &lt;span class="nc"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Parent&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nc"&gt;RebalanceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nc"&gt;RebalanceLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nc"&gt;P&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nc"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="nc"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nn"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;The code is pretty straightforward, we will just implement the operations. It is self explanatory and pretty verbose&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  AVLTree.h&lt;/span&gt;
&lt;span class="c1"&gt;//  Data structures&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  Created by Lalit Yadav on 06/09/20.&lt;/span&gt;
&lt;span class="c1"&gt;//  Copyright ¬© 2020 Lalit Yadav. All rights reserved.&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef AVLTree_h
#define AVLTree_h
&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Nodeptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AVLTree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;Maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RotateLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RotateRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RebalanceLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RebalanceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsEmpty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;PrintInOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;PrintPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IsEmpty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RotateLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Update the parent of the node&lt;/span&gt;
  &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Update the child of of the updated parent&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Update the child link of the parent&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RotateRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RebalanceLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;right_child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_child&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_child&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_child&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;RotateRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;RotateLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RebalanceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;left_child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_child&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_child&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_child&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;RotateLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;RotateRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;RebalanceRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;RebalanceLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;AdjustHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Replace the node with it's right child&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Replace the node with the maximum key from it's left child&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;parent_new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;parent_new_node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;Rebalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_new_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReplaceChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PrintInOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;PrintInOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;PrintInOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;AVLTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PrintPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nodeptr&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;PrintPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;PrintPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* AVLTree_h */&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>trees</category>
    </item>
    <item>
      <title>3 transforming habits for the software engineer inside you</title>
      <author>Dragos Nedelcu</author>
      <pubDate>Fri, 11 Jun 2021 08:13:22 +0000</pubDate>
      <link>https://dev.to/dragosgn/3-transforming-habits-for-the-software-engineer-inside-you-c5n</link>
      <guid>https://dev.to/dragosgn/3-transforming-habits-for-the-software-engineer-inside-you-c5n</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;This article is directed to software developers who want to create a substantial impact in their industry of choice. If lifetime balance or stability is more important to you, this content might not be relevant. But, if what you want is to excel, keep on reading‚Ä¶&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software development is a highly technical field and will be so for decades to come.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As developers, we get paid to design, model, and automate. Later on, management starts playing a higher role but even as a manager, technical excellence will make your job much much easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-excellence-is-the-backbone-of-your-developer-career"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Technical excellence is the backbone of your developer career.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;And what is the most common advice here?&lt;/p&gt;

&lt;p&gt;The obvious answer is years of experience. You need to see IT projects succeeding and failing. You need to see different development teams and different companies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Others say you need to write a few million lines of code and contribute to open-source projects, I disagree.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If experience was the key differentiator, there would be no 19 year‚Äôs old Messi. Experience is one of the roughest indicators particularly in the field of technology and it mostly works when comparing extremes. Between a 12 years experienced developer and a 2 years junior the difference will be obvious. But what about a 3 years mid-level and 5 years one?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Experience is the most common indicator of seniority, particularly in the field of technology, yet it mostly works when comparing extremes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here it gets tricky, and here you can see who is intentional about their growth (technically and not only) and who is just ‚Äúwaiting for things to happen‚Äù. Who is executing in the sprint and who is just waiting for 5‚Äôo clock?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can see who was clocking time and "waiting for things to happen".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I agree that experience comes with time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-time-is-relative"&gt;
  &lt;/a&gt;
  &lt;strong&gt;But, time is relative.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Your job as an ambitious software developer is to press the pedal&lt;/strong&gt; and give it some gas. And because experience is such a relative measure of skill:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What really matters is what you have been doing all those years.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seeing is not enough. Exposure to information is not enough, particularly in technical disciplines. Plus, a job can only give you exposure to certain topics.&lt;/p&gt;

&lt;p&gt;And how can you do that without waiting for years? Regardless of the team‚Äôs culture or the company you work for?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As in many other disciplines, in software development long term success means great habits.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our clients are successfully using these 3 habits to &lt;strong&gt;excel in their growth&lt;/strong&gt; and stay ahead of the curve:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-commit-to-your-personal-tech-radar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1.) Commit to your personal ‚Äútech radar‚Äù&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Companies do this, and you should do it too. A tech radar helps them evaluate future technologies and make decisions regarding their adoption.&lt;/p&gt;

&lt;p&gt;But Dragos, I am a developer of course I am doing this already. Yes, you probably do. You are reading this article, aren‚Äôt you? By commitment, I mean to block a monthly slot in your calendar around 1 hour where you will only dedicate yourself to visualize and periodically update your own technology radar (&lt;em&gt;more on how to build one in a future article&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When a new technology moves into the "adoption" stage, then make a plan to start learning it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No need for a huge commitment, just start getting your hands dirty. If it is a library or framework that your company can benefit from as well, that's a win-win.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-documentation-documentation-documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.) Documentation, documentation, documentation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the major habits I borrow from every successful tech lead/CTO I work with. They were all taking loads of notes. Whether it was a technical choice, a change in requirements, or their own personal development, they had a habit of writing things down. With time this will help you put things into perspective, doing reality checks and making sure you ‚Äú&lt;strong&gt;leave no stone unturned&lt;/strong&gt;‚Äù. It will also help you be always on the spot in meetings.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Whether it was a technical choice, a change in requirements, or their own personal development, they had a habit of writing things down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I borrowed this habit early in my career. Start with a ‚Äútechnical‚Äù diary. Write down what was your progress on that day. Go into technical details, the more the better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-if-you-think-about-it-go-ahead-and-write-about-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.) If you think about it, go ahead and write about it&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is a big one for many developers. And if you are thinking ‚ÄúI have nothing to say‚Äù, think twice. If you executed the steps above, just check your notes. Start small, drop those notes into a personal blog.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You probably have a lot to say.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don‚Äôt be shy, share it on the social media you are active on. Stick to it even if engagement or likes are small. Connect with other people that do the same. You will realise that you do have something to say. &lt;strong&gt;By giving it shape and putting it out there it gets even better.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#there-it-goes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;There it goes.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Start doing these 3 things regularly and trust me, the sky will be the limit for your growth as a software developer and technical leader.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more content like this, &lt;a href="https://www.linkedin.com/in/dragosnedelcu/"&gt;&lt;strong&gt;follow me on LinkedIn&lt;/strong&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if you are truly ambitious and you want to realise the full potential of your career, then get in touch with my team. You can apply for a FREE initial consultation where we will go over your situation and design a &lt;strong&gt;step-by-step plan for you to get to the next level.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#click-here-to-apply-now"&gt;
  &lt;/a&gt;
  &lt;a href="//codewithdragos.com"&gt;&lt;strong&gt;Click here to apply now!&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I look forward to speaking to you personally soon!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dragos Nedelcu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Expert Software Coach&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>FAANG is dead üíÄ, FANMAG was a great idea üí°, but FANIMAGNET has to be how we describe big tech ü§£</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 11 Jun 2021 07:53:13 +0000</pubDate>
      <link>https://dev.to/inhuofficial/faang-is-dead-fanmag-was-a-great-idea-but-fanimagment-has-to-be-how-we-describe-big-tech-42jl</link>
      <guid>https://dev.to/inhuofficial/faang-is-dead-fanmag-was-a-great-idea-but-fanimagment-has-to-be-how-we-describe-big-tech-42jl</guid>
      <description>&lt;p&gt;If you haven't seen it there is a fun and interesting article by &lt;a class="mentioned-user" href="https://dev.to/endingwithali"&gt;@endingwithali&lt;/a&gt;
 on how FAANG came to be and a better suggestion of FANMAG to describe big tech.&lt;/p&gt;

&lt;p&gt;Go give it a read then come back here (their article is actually well written and informative...unlike this one)!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/endingwithali" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZSSf5bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ugt2OHpg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/73460/bf407318-efb6-4642-a10e-9fdcb07d119c.jpg" alt="endingwithali image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/endingwithali/faang-is-over-it-s-a-fanmag-world-now-2j55" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;FAANG is Over. It's a FANMAG world now. (The History of FAANG)&lt;/h2&gt;
      &lt;h3&gt;Ali „Éª Jun 10 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now if you can't tell this post is purely satire! Oh and if you don't quite get it there is a &lt;a href="#explanation"&gt;section at the end explaining as it is a UK slang term.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-fanimagnet"&gt;
  &lt;/a&gt;
  What is FANIMAGNET
&lt;/h2&gt;

&lt;p&gt;FANIMAGNET is used to describe big tech. It stands for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;acebook &lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;mazon &lt;br&gt;
&lt;strong&gt;N&lt;/strong&gt;etflix &lt;br&gt;
&lt;strong&gt;I&lt;/strong&gt;ntel &lt;br&gt;
&lt;strong&gt;M&lt;/strong&gt;icrosoft &lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;pple &lt;br&gt;
&lt;strong&gt;G&lt;/strong&gt;oogle &lt;br&gt;
&lt;strong&gt;N&lt;/strong&gt;vidia &lt;br&gt;
&lt;strong&gt;E&lt;/strong&gt;bay &lt;br&gt;
&lt;strong&gt;T&lt;/strong&gt;oshiba&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-we-use-fanimagnet-to-describe-big-tech"&gt;
  &lt;/a&gt;
  Why should we use FANIMAGNET to describe big tech?
&lt;/h2&gt;

&lt;p&gt;I mean:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you either want to be a FANIMAGNET or you are attracted to someone who identifies as a FANIMAGNET.&lt;/li&gt;
&lt;li&gt;It is far easier to remember &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are the reasons I can think of, aren't they good enough?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-can-i-use-fanimagnet-in-day-to-day-conversations"&gt;
  &lt;/a&gt;
  How can I use FANIMAGNET in day to day conversations?
&lt;/h2&gt;

&lt;p&gt;It's easy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Look at Becca, they really get drawn to FANIMAGNETs" - used to describe someone who worships big tech!&lt;/p&gt;

&lt;p&gt;"John really wants to be part of the FANIMAGNET elite, but it isn't so easy to be accepted" - used to highlight the difficulty of getting into big tech&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#i-dont-get-the-joke"&gt;
  &lt;/a&gt;
  I don't get the joke?
&lt;/h2&gt;

&lt;p&gt;"Fanny" in the UK means vagina not bottom as in the USA. &lt;/p&gt;

&lt;p&gt;"Fanny magnet" is a term to describe a man or woman who attracts attention as they are extremely attractive / alluring / confident and people always seem to want to sleep with them. &lt;/p&gt;

&lt;p&gt;It also works for gay men as we then adopt the American meaning of Fanny, so it is an inclusive term too üòã&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Really? A conclusion...I suppose the conclusion is I said I wouldn't clutter your feed with sh*tposts but I am just too immature to let this pass.&lt;/p&gt;

&lt;p&gt;I promise this will be the last useless post I write for a while, other than the "abusing the internet" series of course! In case you missed the latest instalment of that series here it is:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/i-built-a-3-page-interactive-spa-with-a-single-image-element-and-no-css-extreme-ssr-4knk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üò≤ ZERO CSS and just a single image to build a fully interactive SPA???!!?? üò± Abusing the internet once more! [Extreme SSR!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª May 21 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Oh and please, do not give this post any hearts or anything, it isn't something I want to see on "top posts of the week" ü§£&lt;/p&gt;

&lt;p&gt;Have a great weekend everybody!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>jokes</category>
    </item>
    <item>
      <title>HackOnLisk | $33,000 in prizes üí∞</title>
      <author>Lisk</author>
      <pubDate>Fri, 11 Jun 2021 07:52:23 +0000</pubDate>
      <link>https://dev.to/liskhq/hackonlisk-33-000-in-prizes-186o</link>
      <guid>https://dev.to/liskhq/hackonlisk-33-000-in-prizes-186o</guid>
      <description>&lt;p&gt;üõ†Ô∏è Build your own blockchain application with the Lisk SDK in JavaScript. &lt;/p&gt;

&lt;p&gt;Blockchain applications can include industries such as DeFi, DAOs, Oracles, NFT Marketplace, Lending, etc.&lt;/p&gt;

&lt;p&gt;üíª &lt;a href="https://hackonlisk.devpost.com/"&gt;https://hackonlisk.devpost.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üß∞ &lt;a href="http://www.lisk.chat"&gt;www.lisk.chat&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Over 200+ participants.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>hackathon</category>
      <category>programming</category>
      <category>dapps</category>
    </item>
    <item>
      <title>An Introduction to Reinforcement Learning With OpenAI Gym‚Äôs ‚ÄòTaxi‚Äô</title>
      <author>Joy</author>
      <pubDate>Fri, 11 Jun 2021 06:54:28 +0000</pubDate>
      <link>https://dev.to/joooyz/an-introduction-to-reinforcement-learning-with-openai-gym-s-taxi-258c</link>
      <guid>https://dev.to/joooyz/an-introduction-to-reinforcement-learning-with-openai-gym-s-taxi-258c</guid>
      <description>&lt;p&gt;In this introductory tutorial, we'll apply reinforcement learning (RL) to train an agent to solve the &lt;a href="https://gym.openai.com/envs/Taxi-v3/"&gt;'Taxi' environment from OpenAI Gym&lt;/a&gt;. We'll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A basic introduction to RL&lt;/li&gt;
&lt;li&gt;  Setting up OpenAI Gym &amp;amp; Taxi&lt;/li&gt;
&lt;li&gt;  Step-by-step tutorial on how to train a Taxi agent in Python3 using RL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#before-we-start-whats%C2%A0taxi"&gt;
  &lt;/a&gt;
  Before we start, what's¬†'Taxi'?
&lt;/h2&gt;

&lt;p&gt;Taxi is one of many environments available on OpenAI Gym. These environments are used to develop and train reinforcement learning agents.&lt;/p&gt;

&lt;p&gt;The goal of Taxi is to pick-up passengers and drop them off at the destination in the least amount of moves. In this tutorial, you'll start with an agent that plays randomly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0M2-Me9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsa5r2qpwyl5fjemsscq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0M2-Me9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsa5r2qpwyl5fjemsscq.gif" alt="Random Taxi Agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶and successfully apply reinforcement learning to train an agent to solve the game:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I090QrPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smtupt4481e1mgbw462p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I090QrPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smtupt4481e1mgbw462p.gif" alt="Trained Taxi Agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-introduction-to-reinforcement-learning"&gt;
  &lt;/a&gt;
  üí° An introduction to Reinforcement Learning
&lt;/h2&gt;

&lt;p&gt;Think about how you might teach a dog a new trick, like telling it to sit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If it performs the trick correctly (it sits), you'll reward it with a treat (positive feedback) ‚úîÔ∏è&lt;/li&gt;
&lt;li&gt;  If it doesn't sit correctly, it doesn't get a treat (negative feedback) ‚ùå&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By continuing to do things that lead to positive outcomes, the dog will learn to sit when it hears the command in order to get its treat. Reinforcement learning is a subdomain of machine learning which involves training an 'agent' (the dog) to learn the correct sequences of actions to take (sitting) on its environment (in response to the command 'sit') in order to maximise its reward (getting a treat). This can be illustrated more formally as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--us0J9GPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91czfb199av8vhfy69d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--us0J9GPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91czfb199av8vhfy69d.png" alt="Sutton Barton RL"&gt;&lt;/a&gt;  Source: &lt;a href="http://incompleteideas.net/book/bookdraft2017nov5.pdf"&gt;Sutton &amp;amp;¬†Barto&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-openai-gym-and%C2%A0taxi"&gt;
  &lt;/a&gt;
  üèãÔ∏è Installing OpenAI Gym and¬†Taxi
&lt;/h2&gt;

&lt;p&gt;We'll be using the 'Taxi-v3' environment for this tutorial.&lt;/p&gt;

&lt;p&gt;You'll need to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  OpenAI Gym &lt;code&gt;pip install gym&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  NumPy &lt;code&gt;pip install numpy&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following snippet will import the necessary packages, and create the Taxi environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#random%C2%A0agent"&gt;
  &lt;/a&gt;
  üé≤ Random¬†Agent
&lt;/h2&gt;

&lt;p&gt;We'll start by implementing an agent that doesn't learn at all. Instead, it will select actions at random. This will be our baseline.&lt;/p&gt;

&lt;p&gt;The first step is to give our agent the initial state. A state tells our agent what the current environment looks like. In Taxi, a state defines the current positions of the taxi, passenger, and pick-up and drop-off locations. Below are examples of three different states for Taxi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GodPKslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o39llljgom4dtkchrh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GodPKslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o39llljgom4dtkchrh2.png" alt="Taxi States"&gt;&lt;/a&gt;&lt;br&gt;
Note: Yellow = taxi, Blue letter = pickup location, Purple letter = drop-off destination&lt;/p&gt;

&lt;p&gt;To get the initial state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# create a new instance of taxi, and get the initial state
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll run a for-loop to cycle through the game. At each iteration, our agent will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a random action from the action space (0‚Ää-‚Ääsouth, 1‚Ää-‚Äänorth, 2‚Ää-‚Ääeast, 3‚Ää-‚Ääwest, 4‚Ää-‚Ääpick-up, 5‚Ää-‚Äädrop-off)&lt;/li&gt;
&lt;li&gt;Receive the new state&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's our random agent script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create a new instance of taxi, and get the initial state
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;num_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"step: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; out of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_steps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# sample a random action from the list of available actions
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# perform this action on the environment
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the new state
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# end this instance of the taxi environment
&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run this and watch your agent make random moves. Not super exciting, but hopefully this helped you get familiar with the OpenAI Gym toolkit.&lt;/p&gt;

&lt;p&gt;Next, we'll implement the key algorithm that will enable our agent to learn from the environment in order to solve Taxi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qlearning-agent"&gt;
  &lt;/a&gt;
  üìñ Q-Learning Agent
&lt;/h2&gt;

&lt;p&gt;Q-learning is a reinforcement learning algorithm that seeks to find the best possible next action given its current state, in order to maximise the reward it receives (the 'Q' in Q-learning stands for quality‚Ää-‚Ääi.e. how valuable an action is).&lt;/p&gt;

&lt;p&gt;Let's take the following starting state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9q_q_zDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oby2le865dndm87s74uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9q_q_zDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oby2le865dndm87s74uf.png" alt="Taxi state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which action (up, down, left, right, pick-up or drop-off) should it take in order to maximise its reward? (&lt;em&gt;Note: blue = pick-up location and purple= drop-off destination&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;First, let's take a look at how our agent is 'rewarded' for its actions. &lt;strong&gt;Remember in reinforcement learning, we want our agent to take actions that will maximise the possible rewards it receives from its environment.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taxi-reward%C2%A0system"&gt;
  &lt;/a&gt;
  'Taxi' reward¬†system
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://gym.openai.com/envs/Taxi-v3/"&gt;Taxi documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"‚Ä¶you receive +20 points for a successful drop-off, and lose 1 point for every timestep it takes. There is also a 10 point penalty for illegal pick-up and drop-off actions."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking back at our original state, the possible actions it can take and the corresponding rewards it will receive are shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfsvzv2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6kpc1prk2kn321xn5ql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfsvzv2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6kpc1prk2kn321xn5ql.png" alt="Taxi rewards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, the agent loses 1 point per timestep it takes. It will also lose 10 points if it uses the pick-up or drop-off action¬†here.&lt;/p&gt;

&lt;p&gt;We want our agent to go North towards the pick-up location denoted by a blue R- &lt;strong&gt;but how will it know which action to take if they are all equally punishing?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploration"&gt;
  &lt;/a&gt;
  Exploration
&lt;/h2&gt;

&lt;p&gt;Our agent currently has no way of knowing which action will lead it closest to the blue R. This is where trial-and-error comes in‚Ää-‚Ääwe'll have our agent take random actions, and observe what rewards it gets, i.e. our agent will do some exploration of the environment. This is what our random agent was doing earlier.&lt;/p&gt;

&lt;p&gt;Over many iterations, our agent will have observed that certain sequences of actions will be more rewarding than others. Along the way, our agent will need to keep track of which actions led to what rewards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-qtables"&gt;
  &lt;/a&gt;
  Introducing‚Ä¶ Q-tables
&lt;/h2&gt;

&lt;p&gt;A Q-table is simply a look-up table storing values representing the maximum expected future rewards our agent can expect for a certain action in a certain state (&lt;em&gt;known as Q-values&lt;/em&gt;). It will tell our agent that when it encounters a certain state, some actions are more likely than others to lead to higher rewards. It becomes a 'cheatsheet' telling our agent what the best action to take is.&lt;/p&gt;

&lt;p&gt;The image below illustrates what our 'Q-table' will look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Each row corresponds to a unique state in the 'Taxi' environment&lt;/li&gt;
&lt;li&gt;  Each column corresponds to an action our agent can take&lt;/li&gt;
&lt;li&gt;  Each cell corresponds to the Q-value for that state-action pair‚Ää-‚Ääa higher Q-value means a higher maximum reward our agent can expect to get if it takes that action in that state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8k_U-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wscoifj28sptuseceblv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8k_U-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wscoifj28sptuseceblv.PNG" alt="Q-table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we begin training our agent, we'll need to initialize our Q-table as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;state_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="c1"&gt;# total number of states (S)
&lt;/span&gt;&lt;span class="n"&gt;action_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;      &lt;span class="c1"&gt;# total number of actions (A)
&lt;/span&gt;
&lt;span class="c1"&gt;# initialize a qtable with 0's for all Q-values
&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our agent explores, it will update the Q-table with the Q-values it finds. To calculate our Q-values, we'll introduce the Q-learning algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qlearning-algorithm"&gt;
  &lt;/a&gt;
  Q-Learning Algorithm
&lt;/h2&gt;

&lt;p&gt;The Q-learning algorithm is given below. We won't go into details, but you can read more about it in &lt;a href="http://www.incompleteideas.net/book/RLbook2018trimmed.pdf"&gt;Ch 6 of Sutton &amp;amp; Barto (2018)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvpJYvbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stb04it12rbkmlezbbyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvpJYvbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stb04it12rbkmlezbbyd.PNG" alt="Q-learning algorithm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Q-learning algorithm will help our agent &lt;strong&gt;update the current Q-value (Q(St,At)) with its observations after taking an action.&lt;/strong&gt; I.e. increase Q if it encountered a positive reward, or decrease Q if it encountered a negative one.&lt;/p&gt;

&lt;p&gt;Note that in Taxi, our agent doesn't receive a positive reward until it successfully drops off a passenger (&lt;em&gt;+20 points&lt;/em&gt;). Hence even if our agent is heading in the correct direction, there will be a delay in the positive reward it should receive. The following term in the Q-learning equation addresses this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NuVx92Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4ey9l6hlzetzmcou2c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NuVx92Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4ey9l6hlzetzmcou2c.PNG" alt="Maximum Q"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This term adjusts our current Q-value to include a portion of the rewards it may receive sometime in the future (St+1). The 'a' term refers to all the possible actions available for that state. The equation also contains two hyperparameters which we can specify:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learning rate (Œ±): how easily the agent should accept new information over previously learnt information&lt;/li&gt;
&lt;li&gt;Discount factor (Œ≥): how much the agent should take into consideration the rewards it could receive in the future versus its immediate reward&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's our code for implementing the Q-learning algorithm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# hyperparameters to tune
&lt;/span&gt;&lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
&lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;

&lt;span class="c1"&gt;# dummy variables
&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# R_(t+1)
&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# S_t
&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="c1"&gt;# A_t
&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# S_(t+1)
&lt;/span&gt;
&lt;span class="c1"&gt;# Qlearning algorithm: Q(s,a) := Q(s,a) + learning_rate * (reward + discount_rate * max Q(s',a') - Q(s,a))
&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exploration-vs-exploitation-tradeoff"&gt;
  &lt;/a&gt;
  Exploration vs Exploitation Trade-off
&lt;/h2&gt;

&lt;p&gt;Earlier, we let our agent explore the environment to update our Q-table. As our agent learns more about the environment, we can let it use this knowledge to take more optimal actions‚Ää-‚Ääknown as &lt;strong&gt;exploitation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;During exploitation, our agent will look at its Q-table and select the action with the highest Q-value (instead of a random action). Over time, our agent will need to explore less, and start exploiting what it knows instead.&lt;/p&gt;

&lt;p&gt;There are many ways to implement an exploration-exploitation strategy. Here's just one example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# dummy variables
&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# exploration-exploitation tradeoff
&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="c1"&gt;# probability that our agent will explore
&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="c1"&gt;# of epsilon
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# explore
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# exploit
&lt;/span&gt;    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;

&lt;span class="c1"&gt;# epsilon decreases exponentially --&amp;gt; our agent will explore less and less
&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we set some value &lt;code&gt;epsilon&lt;/code&gt; between 0 and 1. If &lt;code&gt;epsilon&lt;/code&gt; is 0.7, there is a 70% chance that on this step our agent will explore instead of exploit. We've set &lt;code&gt;epsilon&lt;/code&gt; to exponentially decay with each step, so that our agent explores less and less over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-all%C2%A0together"&gt;
  &lt;/a&gt;
  Bringing it all¬†together
&lt;/h2&gt;

&lt;p&gt;We're done with all the building blocks needed for our reinforcement learning agent. The process for training our agent will look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialising our Q-table with 0's for all Q-values&lt;/li&gt;
&lt;li&gt;Let our agent play Taxi over a large number of games&lt;/li&gt;
&lt;li&gt;Continuously update the Q-table using the Q-learning algorithm and an exploration-exploitation strategy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the full implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gym&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# create Taxi environment
&lt;/span&gt;    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Taxi-v3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# initialize q-table
&lt;/span&gt;    &lt;span class="n"&gt;state_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;observation_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;action_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;qtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# hyperparameters
&lt;/span&gt;    &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
    &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;
    &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.005&lt;/span&gt;

    &lt;span class="c1"&gt;# training variables
&lt;/span&gt;    &lt;span class="n"&gt;num_episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="c1"&gt;# per episode
&lt;/span&gt;
    &lt;span class="c1"&gt;# training
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_episodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# reset the environment
&lt;/span&gt;        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

            &lt;span class="c1"&gt;# exploration-exploitation tradeoff
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# explore
&lt;/span&gt;                &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# exploit
&lt;/span&gt;                &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;

            &lt;span class="c1"&gt;# take action and observe reward
&lt;/span&gt;            &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Q-learning algorithm
&lt;/span&gt;            &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;discount_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="c1"&gt;# Update to our new state
&lt;/span&gt;            &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;

            &lt;span class="c1"&gt;# if done, finish episode
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="c1"&gt;# Decrease epsilon
&lt;/span&gt;        &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay_rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Training completed over &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_episodes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; episodes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Press Enter to watch trained agent..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# watch trained agent
&lt;/span&gt;    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_steps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"TRAINED AGENT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Step {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,:])&lt;/span&gt;
        &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rewards&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;reward&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"score: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rewards&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats%C2%A0next"&gt;
  &lt;/a&gt;
  üëè What's¬†next?
&lt;/h2&gt;

&lt;p&gt;There are many other environments available on OpenAI Gym for you to try (e.g. &lt;a href="https://gym.openai.com/envs/FrozenLake-v0/"&gt;Frozen Lake&lt;/a&gt;). You can also try optimising the implementation above to solve Taxi in fewer episodes.&lt;/p&gt;

&lt;p&gt;Some other useful resources include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.altexsoft.com/blog/datascience/reinforcement-learning-explained-overview-comparisons-and-applications-in-business/"&gt;A good article on RL and its real-world applications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/@jonathan_hui/rl-deep-reinforcement-learning-series-833319a95530"&gt;Deep Reinforcement Learning Series&lt;/a&gt; by Jonathan Hui&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=WXuK6gekU1Y"&gt;AlphaGo full documentary&lt;/a&gt; (on Youtube)&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.incompleteideas.net/book/RLbook2018trimmed.pdf"&gt;Reinforcement Learning&lt;/a&gt; by Sutton and Barto&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
