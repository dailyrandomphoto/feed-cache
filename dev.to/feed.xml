<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Flutter tips - season 2 - part 1/10</title>
      <author>Tomic Riedel 💙</author>
      <pubDate>Wed, 20 Oct 2021 11:13:55 +0000</pubDate>
      <link>https://dev.to/tomicriedel/10-flutter-tips-season-2-part-110-336d</link>
      <guid>https://dev.to/tomicriedel/10-flutter-tips-season-2-part-110-336d</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hki-uUuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtxji25q6bo3r1l3p683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hki-uUuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtxji25q6bo3r1l3p683.png" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
 After the last part of the 1st season was published, there was actually no plan to do a second season, but you asked for it and here it is.&lt;/p&gt;

&lt;p&gt;We are looking at websites, packages, GitHub repositories, widgets, extensions and much more in the second season, so I recommend you to follow me now not to miss this!&lt;/p&gt;

&lt;p&gt;Then I hope you enjoy the 1st part of the second season,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Reading!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flutter-carplay"&gt;
  &lt;/a&gt;
  Flutter Carplay
&lt;/h3&gt;

&lt;p&gt;Meanwhile it is in the hype, Flutter Carplay. You can use it to develop an app in Flutter that will &lt;strong&gt;work on Apple Carplay&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOk-D9oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/54781138/131184549-3cb62678-ad3f-4d67-85fb-1410bd05eaff.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOk-D9oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/54781138/131184549-3cb62678-ad3f-4d67-85fb-1410bd05eaff.gif" alt="https://user-images.githubusercontent.com/54781138/131184549-3cb62678-ad3f-4d67-85fb-1410bd05eaff.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#scribble"&gt;
  &lt;/a&gt;
  Scribble
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://pub.dev/packages/scribble"&gt;scribble&lt;/a&gt; is a simple package that &lt;strong&gt;allows you to draw&lt;/strong&gt;. It reacts to changes in pressure, supports different thicknesses of a stroke and much more.&lt;/p&gt;

&lt;p&gt;It is still under development, but it is constantly getting new features and already has the most important features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGihcgs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/timcreatedit/scribble/raw/master/scribble_demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGihcgs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/timcreatedit/scribble/raw/master/scribble_demo.gif" alt="https://github.com/timcreatedit/scribble/raw/master/scribble_demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#badges"&gt;
  &lt;/a&gt;
  Badges
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://pub.dev/packages/badges"&gt;Package&lt;/a&gt; badges is used to &lt;strong&gt;add a badge to any widget&lt;/strong&gt;. This can be a number to indicate how many items you have in your cart or how many new messages you have, but it can also be used to indicate a warning, for example with an exclamation mark, or a new feature with "NEW". As you can see, the possibilities are almost endless.&lt;/p&gt;

&lt;p&gt;The great thing is that it is very easy to use. You just need to wrap your widget with the "Badge" widget and then specify the badeContent, for example a text. Here is an example of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Badge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;badgeContent:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPs45wgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/yadaniil/flutter_badges/master/images/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPs45wgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/yadaniil/flutter_badges/master/images/logo.png" alt="https://raw.githubusercontent.com/yadaniil/flutter_badges/master/images/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pinput"&gt;
  &lt;/a&gt;
  Pinput
&lt;/h3&gt;

&lt;p&gt;pinput is used to &lt;strong&gt;create a pin code input&lt;/strong&gt; where each pixel is customizable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3sqnOg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Tkko/Flutter_PinPut/master/example/media/pin_put_demo_3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3sqnOg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Tkko/Flutter_PinPut/master/example/media/pin_put_demo_3.gif" alt="https://raw.githubusercontent.com/Tkko/Flutter_PinPut/master/example/media/pin_put_demo_3.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter-blurhash"&gt;
  &lt;/a&gt;
  Flutter Blurhash
&lt;/h3&gt;

&lt;p&gt;This &lt;a href="https://pub.dev/packages/flutter_blurhash"&gt;Package&lt;/a&gt; is for adding a &lt;strong&gt;blur effect to an image&lt;/strong&gt;. The blurhash is the code that specifies how your image will look blured. To get this code you need to go to &lt;a href="https://blurha.sh/"&gt;https://blurha.sh/&lt;/a&gt; and paste your image there. Here is a visual example of how this works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRy8aHzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1295961/75059847-129d6800-54de-11ea-8832-d19ea58eb7eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRy8aHzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1295961/75059847-129d6800-54de-11ea-8832-d19ea58eb7eb.png" alt="https://user-images.githubusercontent.com/1295961/75059847-129d6800-54de-11ea-8832-d19ea58eb7eb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to insert your blurhash you have to implement the following in your flutter code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlurHashAppextendsStatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nf"&gt;BlurHashApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"BlurHash"&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;AspectRatio&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;aspectRatio:&lt;/span&gt; &lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;BlurHash&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;hash:&lt;/span&gt; &lt;span class="s"&gt;"L5H2EC=PM+yV0g-mq.wG9c010J}I"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bottom-bar-with-sheet"&gt;
  &lt;/a&gt;
  Bottom Bar with Sheet
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pub.dev/packages/bottom_bar_with_sheet"&gt;bottom_bar_with_sheet&lt;/a&gt; is a normal bottom bar, but it provides a very useful functionality. Sometimes you want to have more space on your screen, but how do you do it? Well, quite simple: with this nav bar you can &lt;strong&gt;pull up a "second screen"&lt;/strong&gt;/sheet and by doing so you get much more space. Here is a small example how it could look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xctO2ely--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Frezyx/bottom_bar_with_sheet/master/example/rep_files/examples/main.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xctO2ely--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Frezyx/bottom_bar_with_sheet/master/example/rep_files/examples/main.gif" alt="https://raw.githubusercontent.com/Frezyx/bottom_bar_with_sheet/master/example/rep_files/examples/main.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do you implement this? Well, you just write the following code in your scaffold:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;bottomNavigationBar:&lt;/span&gt; &lt;span class="n"&gt;BottomBarWithSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;selectedIndex:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;sheetChild:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Place for your another content"&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="nl"&gt;bottomBarTheme:&lt;/span&gt; &lt;span class="n"&gt;BottomBarTheme&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;mainButtonPosition:&lt;/span&gt; &lt;span class="n"&gt;MainButtonPosition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;selectedItemBackgroundColor:&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF2B65E3&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;mainActionButtonTheme:&lt;/span&gt; &lt;span class="n"&gt;MainActionButtonTheme&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;size:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xFF2B65E3&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;size:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onSelectItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'item &lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt; was pressed'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;items:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="n"&gt;BottomBarWithSheetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;people&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;BottomBarWithSheetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shopping_cart&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;BottomBarWithSheetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;BottomBarWithSheetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;favorite&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks a bit complex, but it is not. The package has a great readme file that explains everything in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-validator"&gt;
  &lt;/a&gt;
  String Validator
&lt;/h2&gt;

&lt;p&gt;This package has already saved me a lot of time. &lt;a href="http://pub.dev/packages/string_validator"&gt;string_validator&lt;/a&gt; is there to &lt;strong&gt;validate a string&lt;/strong&gt; (who would have thought it). It doesn't sound that exciting, but if you look at how &lt;strong&gt;many possibilities&lt;/strong&gt; there are to validate a string with this package, then it belongs in almost every Flutter project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvHoR2j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8eea90b-f32b-44ac-b99a-8dcf43008dd7/Screenshot_2021-10-20_at_09.55.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvHoR2j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8eea90b-f32b-44ac-b99a-8dcf43008dd7/Screenshot_2021-10-20_at_09.55.17.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8eea90b-f32b-44ac-b99a-8dcf43008dd7/Screenshot_2021-10-20_at_09.55.17.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GuMNwFZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17383206-255d-4f2d-ace9-e2d59dcd9bae/Untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuMNwFZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17383206-255d-4f2d-ace9-e2d59dcd9bae/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17383206-255d-4f2d-ace9-e2d59dcd9bae/Untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flutter-gen"&gt;
  &lt;/a&gt;
  Flutter gen
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="http://pub.dev/packages/flutter_gen"&gt;tool&lt;/a&gt; is very useful. We all know that string based APIs are &lt;strong&gt;not the most secure&lt;/strong&gt;. If you insert a single character incorrectly, the whole string will stop working. The problem is that you use sting apis very often in Flutter. Assets, fonts, colors... Flutter gen is there to solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZpF0GDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/55102ebe-b168-4cd2-9093-7e44c3bb230e/Screenshot_2021-10-20_at_10.01.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZpF0GDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/55102ebe-b168-4cd2-9093-7e44c3bb230e/Screenshot_2021-10-20_at_10.01.47.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/55102ebe-b168-4cd2-9093-7e44c3bb230e/Screenshot_2021-10-20_at_10.01.47.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a bit complicated to set up, but well worth it and you should use it in every project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photo-view"&gt;
  &lt;/a&gt;
  Photo View
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pub.dev/packages/photo_view"&gt;photo_view&lt;/a&gt; is a very simple but useful package. When you display a photo, you also want to be able &lt;strong&gt;to zoom in and out and other things&lt;/strong&gt;. Just wrap your image with the PhotoView widget and you are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@override&lt;/span&gt;
&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;PhotoView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;imageProvider:&lt;/span&gt; &lt;span class="n"&gt;AssetImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assets/large-image.jpg"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rj6Psbiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/6718144/56463745-45ec0380-63b0-11e9-8e56-0dba5deabb1a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rj6Psbiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/6718144/56463745-45ec0380-63b0-11e9-8e56-0dba5deabb1a.gif" alt="https://user-images.githubusercontent.com/6718144/56463745-45ec0380-63b0-11e9-8e56-0dba5deabb1a.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also create a gallery of photos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wakelock"&gt;
  &lt;/a&gt;
  Wakelock
&lt;/h2&gt;

&lt;p&gt;If the user has set it, then the screen goes off after a certain time and the phone locks itself. But this is sometimes very annoying, because a process is running in the app or something else. With this simple &lt;a href="https://pub.dev/packages/wakelock"&gt;plugin&lt;/a&gt; you can &lt;strong&gt;prevent the phone from locking itself automatically&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:wakelock/wakelock.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The following lines of code toggle the wakelock based on a bool value.&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The following statement enables the wakelock.&lt;/span&gt;
&lt;span class="n"&gt;Wakelock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;enable:&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The following statement disables the wakelock.&lt;/span&gt;
&lt;span class="n"&gt;Wakelock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;enable:&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// If you want to retrieve the current wakelock status,&lt;/span&gt;
&lt;span class="c1"&gt;// you will have to be in an async scope&lt;/span&gt;
&lt;span class="c1"&gt;// to await the future returned by `enabled`.&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;wakelockEnabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Wakelock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now we have reached the end of the first part of the second season.&lt;/p&gt;

&lt;p&gt;I am looking forward to the next parts. If you liked something very much or if you didn't like something that I could improve, I would be very happy if you let me know so that I can improve.&lt;/p&gt;

&lt;p&gt;If you liked the tips, I would also be happy about some claps and very happy about a follow, so you don't miss the next parts of this series!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a great day, thanks for reading!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>.NET MAUI is HERE! 3 NEW Features that will blow your mind 🤯</title>
      <author>Dotnetsafer</author>
      <pubDate>Wed, 20 Oct 2021 11:10:08 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/net-maui-is-here-3-new-features-that-will-blow-your-mind-ngp</link>
      <guid>https://dev.to/dotnetsafer/net-maui-is-here-3-new-features-that-will-blow-your-mind-ngp</guid>
      <description>&lt;p&gt;.NET MAUI is a &lt;strong&gt;framework&lt;/strong&gt; for .NET Core and ASP.NET Core MVC applications which can be used in &lt;strong&gt;cross-platform development&lt;/strong&gt; and in building complex web applications.&lt;/p&gt;

&lt;p&gt;.NET MAUI was created by &lt;strong&gt;Microsoft&lt;/strong&gt; to take care of all the things that developers usually need to do themselves, such as managing HTTP requests, setting up routing logic, handling errors and more. So that they can &lt;strong&gt;focus on what’s important:&lt;/strong&gt; building an application that does something useful for their customers.&lt;/p&gt;

&lt;p&gt;In the latest preview, Microsoft showed three new features about .NET MAUI that &lt;strong&gt;will blow your mind&lt;/strong&gt; 👇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#updated-controls"&gt;
  &lt;/a&gt;
  ✨Updated Controls
&lt;/h2&gt;

&lt;p&gt;Microsoft has changed the implementations of numerous controls in this new .NET MAUI version, which is a &lt;strong&gt;significant improvement.&lt;/strong&gt; Let’s look at the most important ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boxview"&gt;
  &lt;/a&gt;
  📦 BoxView
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BoxView&lt;/code&gt; is a &lt;strong&gt;basic rectangle&lt;/strong&gt; with a given width, height, and color. It could be used for &lt;code&gt;BoxView&lt;/code&gt; decorating, basic graphics, and touch interaction with the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0guolCii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5heueta2wsukni92sxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0guolCii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5heueta2wsukni92sxt.png" alt="BoxView (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indicatorview"&gt;
  &lt;/a&gt;
  📐IndicatorView
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;IndicatorView&lt;/code&gt; is a &lt;strong&gt;control&lt;/strong&gt; that shows indications in a &lt;code&gt;CarrouselView&lt;/code&gt; that reflect the number of items and the current position:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRMdh-bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw384qzxqx38huqfs1kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRMdh-bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fw384qzxqx38huqfs1kz.png" alt="IndicatorView control (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imagebutton"&gt;
  &lt;/a&gt;
  📷 ImageButton
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ImageButton&lt;/code&gt; view has the ability to &lt;strong&gt;combine&lt;/strong&gt; the &lt;strong&gt;Button&lt;/strong&gt; and &lt;strong&gt;Image views&lt;/strong&gt; to produce a button with an image as its content. To command the program to do a certain activity, the user &lt;strong&gt;pushes&lt;/strong&gt; the &lt;code&gt;ImageButton&lt;/code&gt; with their finger or clicks it with their mouse. The &lt;code&gt;ImageButton&lt;/code&gt; view, unlike the Button view, has no idea of text and text appearance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MJXH3uXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhx6fp979rlvn76c5ps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MJXH3uXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zhx6fp979rlvn76c5ps.png" alt="ImageButton (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webview"&gt;
  &lt;/a&gt;
  💻 WebView
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;WebView&lt;/code&gt; renders any online or embedded HTML material using the platform’s native browser control; suitable for displaying markup that is more complicated than the subset of HTML supported by &lt;code&gt;Label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-JHHnzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i55sirhkys3f2e1khnfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-JHHnzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i55sirhkys3f2e1khnfl.png" alt="New .NET MAUI WebView (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#shadows-corners-and-borders"&gt;
  &lt;/a&gt;
  🔲 Shadows, corners, and borders
&lt;/h2&gt;

&lt;p&gt;Here we have &lt;code&gt;Microsoft.Maui.Graphics&lt;/code&gt; library, that offers an &lt;em&gt;+uniform UI&lt;/em&gt;* drawing API based on native graphics engines, &lt;strong&gt;allowing&lt;/strong&gt; us to &lt;strong&gt;quickly add&lt;/strong&gt; borders, corner rendering, and gorgeous shadows to nearly any .NET MAUI layout or control.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwysQKek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpp0bcak5m0ioom9c647.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwysQKek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpp0bcak5m0ioom9c647.png" alt="Corners and borders in .NET MAUI (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft presents a new &lt;code&gt;Border&lt;/code&gt; control. It can be wrapped around any layout or control to offer borders and independent corner control. This controls are available in &lt;strong&gt;WPF, UWP, Silverlight&lt;/strong&gt;, and the most recent &lt;strong&gt;Windows App SDK styles.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9/"&gt;Microsoft example&lt;/a&gt;, we can see how they added the &lt;strong&gt;stroke&lt;/strong&gt; and &lt;strong&gt;rounded&lt;/strong&gt; the top-left and bottom-right &lt;strong&gt;corners&lt;/strong&gt; by wrapping a border checks around the counter label this template 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Border&lt;/span&gt; 
    &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;
    &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16,8"&lt;/span&gt;
    &lt;span class="n"&gt;Stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{StaticResource PrimaryBrush}"&lt;/span&gt;
    &lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#2B0B98"&lt;/span&gt;
    &lt;span class="n"&gt;StrokeThickness&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt;
    &lt;span class="n"&gt;HorizontalOptions&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrokeShape&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RoundRectangle&lt;/span&gt; &lt;span class="n"&gt;CornerRadius&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"40,0,0,40"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrokeShape&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; 
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;".NET MAUI Preview: 9"&lt;/span&gt;                
        &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;
        &lt;span class="n"&gt;FontAttributes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Bold"&lt;/span&gt;
        &lt;span class="n"&gt;TextColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"White"&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"CounterLabel"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The specified shape’s corner radius accepts a &lt;code&gt;Thickness&lt;/code&gt; type value, allowing separate &lt;strong&gt;control&lt;/strong&gt; of each of the rectangle’s &lt;em&gt;+four corners:&lt;/em&gt;* bottom-left, bottom-right, top-left and top-right.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;border control&lt;/strong&gt; creates a wraparound view element around a single piece of content, allowing you to &lt;strong&gt;customize the background&lt;/strong&gt; color and padding. There are several more attributes that may be used to modify the border’s stroke, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;StrokeLineCap:&lt;/strong&gt; is a form that appears at the end of a line.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;StrokeDashOffset:&lt;/strong&gt; is the distance between the dots in the dash pattern.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;StrokeMiterLimit:&lt;/strong&gt; set the miter length ratio to half of the stroke thickness.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;StrokeLineJoin:&lt;/strong&gt; a type of vertices join.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;StrokeDashArray:&lt;/strong&gt; a dash and gap pattern in the stroke.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you ready to give your user interface some &lt;strong&gt;depth&lt;/strong&gt;? Any layout or control, including pictures and objects, can be given with &lt;code&gt;Shadow&lt;/code&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shadow&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Shadow&lt;/span&gt; &lt;span class="n"&gt;Brush&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; 
                &lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"20,20"&lt;/span&gt;
                &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt;
                &lt;span class="n"&gt;Opacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shadow&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the result 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqNtAV9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68fjxr7as02y5eal90w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqNtAV9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68fjxr7as02y5eal90w4.png" alt="Shadows in .NET MAUI (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#android-quick-start"&gt;
  &lt;/a&gt;
  🚄 Android Quick Start
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ahead-of-time&lt;/strong&gt; (AOT) compilation &lt;strong&gt;improves the speed&lt;/strong&gt; with which your Android applications can code start. If you’re trying to stay below the wifi installation bar, full AOT may make your application artifacts larger than you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Startup tracing&lt;/strong&gt; is the solution in this case. We may balance performance and space by partially AOT’ing only the sections of your program that are run at startup.&lt;/p&gt;

&lt;p&gt;The following are the &lt;strong&gt;results&lt;/strong&gt; of device testing on the &lt;strong&gt;Pixel 5:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaPBu-Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po6nrkq7ne6ace854oeo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaPBu-Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po6nrkq7ne6ace854oeo.png" alt="Microsoft Benchmark on Pixel 5 (By. Dotnetsafer)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ecosystem-controls"&gt;
  &lt;/a&gt;
  🔰 Ecosystem Controls
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://community.devexpress.com/blogs/mobile/archive/2021/09/30/net-maui-free-early-access-preview-of-data-editors-and-more-for-mobile-development-v21-2.aspx"&gt;DevExpress&lt;/a&gt;, &lt;a href="https://www.syncfusion.com/blogs/post/introducing-the-first-set-of-syncfusion-net-maui-controls.aspx"&gt;Syncfusion&lt;/a&gt;, and &lt;a href="https://www.telerik.com/maui-ui"&gt;Telerik&lt;/a&gt; have all recently released new sets of controls for.NET MAUI that take use of Microsoft’s strong graphics capabilities. Maui.Graphics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVNIsGaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50e8he74owjy8z9q736r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVNIsGaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50e8he74owjy8z9q736r.png" alt="Ecosystem Controls (By. Microsoft)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#do-you-want-a-gift"&gt;
  &lt;/a&gt;
  🎁 Do you want a gift?
&lt;/h2&gt;

&lt;p&gt;Just for entering this article and making it this far, I’m GIVING you a &lt;strong&gt;GIFT&lt;/strong&gt; of a &lt;strong&gt;GUIDE&lt;/strong&gt; to keeping your &lt;strong&gt;.NET applications secure&lt;/strong&gt; 🎁.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQuuSh2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09cnn5pfmylevlvymslj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQuuSh2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09cnn5pfmylevlvymslj.png" alt=".NET security guide FREE (By. Dotnetsafer)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ONLY thing you have to do is &lt;strong&gt;enter your email&lt;/strong&gt; to receive it for &lt;strong&gt;FREE&lt;/strong&gt;🤑.&lt;/p&gt;

&lt;p&gt;🚨&lt;strong&gt;This won’t be around forever.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To maintain exclusivity, I’ll be editing the article soon and &lt;strong&gt;there will no longer be a gift&lt;/strong&gt;. So HURRY UP and get your guide to becoming a .NET security expert! 👇👇👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dotnetsafer220122.typeform.com/to/qefAo3WO?utm_source=netmauiishere&amp;amp;utm_medium=devto&amp;amp;utm_campaign=xxxxx&amp;amp;utm_term=xxxxx&amp;amp;utm_content=xxxxx"&gt;Get your guide for FREE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>netcore</category>
      <category>netmaui</category>
    </item>
    <item>
      <title>PASSWORD GENERATOR using HTML, CSS, and Javascript</title>
      <author>Divyamcm</author>
      <pubDate>Wed, 20 Oct 2021 10:44:35 +0000</pubDate>
      <link>https://dev.to/divyamcm/password-generator-using-html-css-and-javascript-3a0c</link>
      <guid>https://dev.to/divyamcm/password-generator-using-html-css-and-javascript-3a0c</guid>
      <description>&lt;p&gt;==================================================&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0QIFUj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477039181047-efb4357d01bd%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1470%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0QIFUj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477039181047-efb4357d01bd%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1470%26q%3D80" alt=""&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=medium&amp;amp;utm_medium=referral"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;Let’s build a password generator which generate passwords of different lengths and which can include or exclude special characters in the generated passwords based on user selection. This is going to be simple. Stay with me till the end. 🔐&lt;/p&gt;

&lt;p&gt;Folder structure:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;em&gt;index.html — contains the HTML layout which defines the element structure that would be shown on the page.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;style.css- contains CSS code for styling. Using CSS we can style the different portions to make them more visually appealing.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;script.js — contains Javascript code where all the functions are placed.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#html-layout"&gt;
  &lt;/a&gt;
  HTML Layout
&lt;/h1&gt;

&lt;p&gt;Open VSCode and create the basic HTML structure in an &lt;strong&gt;index.html&lt;/strong&gt; file by pressing ! and then pressing tab. Give the &lt;strong&gt;title&lt;/strong&gt; as ‘&lt;strong&gt;Password Generator&lt;/strong&gt;’. Link &lt;strong&gt;style.css&lt;/strong&gt; and &lt;strong&gt;script.js&lt;/strong&gt; to the created HTML file and link &lt;strong&gt;FontAwesome&lt;/strong&gt; CSS to use icons*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;Generate Password Button: Create &lt;strong&gt;button&lt;/strong&gt; inside &lt;strong&gt;div&lt;/strong&gt; class &lt;strong&gt;wrapper&lt;/strong&gt; clicking on which we will generate the password. Add &lt;code&gt;&amp;lt;i class=”fab fa-keycdn”&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; to display icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button id="generate" class="action-btn"&amp;gt;Generate Password &amp;lt;i class="fab fa-keycdn"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Slider to select length: Add one more div class &lt;strong&gt;slider_main&lt;/strong&gt; inside &lt;strong&gt;wrapper class .slider_main&lt;/strong&gt; class contains the slider which is used to select the length of the password. The  min, max and the initial  value is set and the selected value using slider will be displayed in the &lt;strong&gt;output&lt;/strong&gt; section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="slider\_main"&amp;gt;
 &amp;lt;input type="range" value="8" min="1" max="25" class="slider"oninput="this.nextElementSibling.value = this.value" id="slider"&amp;gt;
 &amp;lt;output&amp;gt;8&amp;lt;/output&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkbox to include special characters: Add an &lt;strong&gt;input&lt;/strong&gt; tag of type &lt;strong&gt;checkbox&lt;/strong&gt;, on checking we will include special characters in the password, and on unchecking we will remove special characters from password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label class="container" style="font-family: fantasy;color: rgb(3, 3, 3);"&amp;gt;Include special characters
            &amp;lt;input type="checkbox" checked="checked" id="checkbox"&amp;gt;
            &amp;lt;span class="checkmark"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Password display and copy button: Add a &lt;strong&gt;h5&lt;/strong&gt; tag under div class &lt;strong&gt;wrapper_main&lt;/strong&gt; to display the generated password and add a button to copy the generated password. Use &lt;code&gt;&amp;lt;i class=”fas fa-clipboard”&amp;gt;&lt;/code&gt; for the clipboard icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="wrapper_main"&amp;gt;
        &amp;lt;h5 id="pwd_txt"&amp;gt;&amp;lt;/h5&amp;gt;
        &amp;lt;button id="clipboard" class="clipboard"&amp;gt;
            &amp;lt;i class="fas fa-clipboard"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the complete HTML code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Password Generator&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"&amp;gt;
     &amp;lt;link rel="stylesheet" href="style.css"&amp;gt; 
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
        &amp;lt;button id="generate" class="action-btn"&amp;gt;
            Generate Password &amp;lt;i class="fab fa-keycdn"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
        &amp;lt;div class="slider_main"&amp;gt;
            &amp;lt;input type="range" value="8" min="1" max="25" class="slider"
                oninput="this.nextElementSibling.value = this.value" id="slider"&amp;gt;
            &amp;lt;output&amp;gt;8&amp;lt;/output&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;label class="container" style="font-family: fantasy;color: rgb(3, 3, 3);"&amp;gt;Include special characters
            &amp;lt;input type="checkbox" checked="checked" id="checkbox"&amp;gt;
            &amp;lt;span class="checkmark"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;



    &amp;lt;div class="wrapper_main"&amp;gt;
        &amp;lt;h5 id="pwd_txt"&amp;gt;&amp;lt;/h5&amp;gt;
        &amp;lt;button id="clipboard" class="clipboard"&amp;gt;
            &amp;lt;i class="fas fa-clipboard"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#css-styling"&gt;
  &lt;/a&gt;
  CSS Styling
&lt;/h1&gt;

&lt;p&gt;Implement a slider to override the default one and hovering on the slider will make it less opaque.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.slider{

-webkit-appearance: none;
width: 70%;
height: 10px;
background: #f7be04;
border-radius: 15px;
opacity: 1;
-webkit-transition: .2s;
transition: opacity .2s;
margin-left: 40px;
margin-top: 25px;
margin-bottom: 20px;
}

.slider:hover{
opacity: 0.5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Complete CSS code is here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html{
min-height: 100%;
}



body{
min-height: 100%;
background-color: #2d3436;
background-image: linear-gradient(315deg, #2d3436 0%, #000000 74%);
text-align: center;
}



.slider{
-webkit-appearance: none;
width: 70%;
height: 10px;
background: #f7be04;
border-radius: 15px;
opacity: 1;
-webkit-transition: .2s;
transition: opacity .2s;
margin-left: 40px;
margin-top: 25px;
margin-bottom: 20px;
}

.slider:hover{
opacity: 0.5;
}

.slider::-webkit-slider-thumb{
-webkit-appearance: none;
width: 15px;
height: 15px;
background: #000000;
border-radius: 50%;
cursor: pointer;
}

.action-btn{
background-color: #000;
border: 0;
color: #f7be04;
font-size: 20px;
cursor: pointer
padding: 10px;
margin: 10px  20px;
border-radius: 15px;
font-family: fantasy;
opacity: 1;
transition: opacity .2s;
}



.action-btn:hover{
opacity: 0.5;
}



.wrapper{
display: flex;
background-color: rgb(253, 253, 252);
flex-direction: column;
width: 30%;
margin-top: 10%;
margin-left: 35%;
border-radius: 15px;
font-family: fantasy;
padding-bottom: 1%;
}

.slider_main{
display: flex;
flex-direction: row;
}

output{
margin-top: 20px;
margin-left: 10px;
}



.wrapper_main
{
display: flex;
background-color: rgb(253, 253, 252);
flex-direction: row;
width: 22%;
margin-top: 5%;
margin-left: 38%;
border-radius: 15px;
font-family: Georgia, serif;
padding-left: 45px;
}



.clipboard{
margin-left: auto;
cursor: pointer;
border: 0;
background-color: white;
color:black;
border-radius: 15px;
font-size: 23px;
opacity: 1;
transition: opacity .2s;
}



.clipboard:hover{
opacity: 0.5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#javascript-logic"&gt;
  &lt;/a&gt;
  Javascript logic
&lt;/h1&gt;

&lt;p&gt;We need to generate the password by selecting characters randomly. The length slider value given by the user will determine the length of the password and the user can choose whether to include special characters or not using the checkbox. To implement this functionality let’s fetch the required elements and store them in the below constants and variables.&lt;/p&gt;

&lt;p&gt;password_ele — To store the &lt;strong&gt;h5&lt;/strong&gt; element which is used to set the generated password.&lt;/p&gt;

&lt;p&gt;string — To store the &lt;strong&gt;characters&lt;/strong&gt; used to generate passwords except for special characters.&lt;/p&gt;

&lt;p&gt;special_chars —Used to store &lt;strong&gt;special characters&lt;/strong&gt;, based on check box value we can add special characters to the password.&lt;/p&gt;

&lt;p&gt;generate — Used to store the &lt;strong&gt;Generate Password&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;clipboard — Used to store &lt;strong&gt;clipboard&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;pwd_length — Used to store the &lt;strong&gt;slider&lt;/strong&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const password_ele = document.getElementById("pwd_txt");

var string = "ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789";

const special_chars = "@#$%^&amp;amp;*";

const generate = document.getElementById("generate");

const clipboard = document.getElementById("clipboard");

var pwd_length = document.getElementById("slider");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking &lt;strong&gt;Generate Password&lt;/strong&gt; button we will execute some lines of codes to generate the password using &lt;strong&gt;Math.random()&lt;/strong&gt; function. If checkbox is checked then we will add special characters to our original string. Original string contains &lt;code&gt;“ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789”.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Loop through the string to fetch the character randomly and in each loop add the randomly selected character to the &lt;strong&gt;password&lt;/strong&gt; variable which was empty initially. The number of times the loop is executed is equal to the slider length so, the length of the password will be equal to the length given by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generate.addEventListener('click', () =&amp;gt; {
    let password = "";
    var checked = document.getElementById("checkbox").checked;
    var final_string = string;
    console.log(checked);
    if (checked) {
        final_string += "@#$%^&amp;amp;*";
    }
    for (var i = 0; i &amp;lt; pwd_length.value; i++) {
        let pwd = final_string[Math.floor(Math.random() * final_string.length)];
        password += pwd;
    }
    password_ele.innerText = password;
    final_string = string;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;on click of clipboard icon, the password text should get selected and display an alert message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

clipboard.addEventListener('click', () =&amp;gt; {

 navigator.clipboard.writeText(password_ele.innerText);

 alert("Password copied to clipboard");

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Complete javascript code is here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const password_ele = document.getElementById("pwd_txt");
var string = "ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789";
const special_chars = "@#$%^&amp;amp;*";
const generate = document.getElementById("generate");
const clipboard = document.getElementById("clipboard");
var pwd_length = document.getElementById("slider");


generate.addEventListener('click', () =&amp;gt; {
    let password = "";
    var checked = document.getElementById("checkbox").checked;
    var final_string = string;
    console.log(checked);
    if (checked) {
        final_string += "@#$%^&amp;amp;*";
    }
    for (var i = 0; i &amp;lt; pwd_length.value; i++) {
        let pwd = final_string[Math.floor(Math.random() * final_string.length)];
        password += pwd;
    }
    password_ele.innerText = password;
    final_string = string;
});


clipboard.addEventListener('click', () =&amp;gt; {
    navigator.clipboard.writeText(password_ele.innerText);
    alert("Password copied to clipboard");
});


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s check the output&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fz6LiqBjVxs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Complete code is placed in &lt;a href="https://github.com/Divyamcm/Projects/tree/main/Password_Generator"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your interest.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I wasted 2 months in tutorial hell😖😫</title>
      <author>Mahesh </author>
      <pubDate>Wed, 20 Oct 2021 10:30:01 +0000</pubDate>
      <link>https://dev.to/ali6nx404/i-wasted-2-months-in-tutorial-hell-136c</link>
      <guid>https://dev.to/ali6nx404/i-wasted-2-months-in-tutorial-hell-136c</guid>
      <description>&lt;p&gt;As I started learning to code, I was stuck in tutorial hell. It felt like, I am learning a lot of the stuff. I have mastered CSS and JS.&lt;/p&gt;

&lt;p&gt;After Creating a lot of projects while watching tutorials. One day I decided to create a project of my own, and the biggest myth busted 😫.&lt;/p&gt;

&lt;p&gt;I came to know that I don't know anything so I started another course and then the same happens until I discovered that I was in tutorial hell.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wtf-is-tutorial-hell"&gt;
  &lt;/a&gt;
  WTF is Tutorial Hell?
&lt;/h2&gt;

&lt;p&gt;Tutorial hell is when you continuously watch tutorials one after another and you feel like, you are learning a lot of things.&lt;/p&gt;

&lt;p&gt;But when you start doing something your own, you found out you're even not able to solve a basic coding problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-with-tutorial-hell"&gt;
  &lt;/a&gt;
  The problem with tutorial hell?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You get fake confidence.&lt;/li&gt;
&lt;li&gt;Fake feeling of growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quote by Albert Einstein - &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;" insanity is doing the same thing over and over again and expecting different results. "&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is nothing wrong with using tutorials to learn new things. You just need to stop that desire of starting a new tutorial as soon as you finish the one you were working on.&lt;/p&gt;

&lt;p&gt;When you complete a tutorial, try to recreate the same code using only your memory.  You will probably be stuck in a few things so rewatch/reread and again start the solving problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-break-tutorial-hell"&gt;
  &lt;/a&gt;
  How to Break tutorial hell?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn the Basics&lt;/li&gt;
&lt;li&gt;take Proper Notes&lt;/li&gt;
&lt;li&gt;Start With a Small problem&lt;/li&gt;
&lt;li&gt;Be consistent&lt;/li&gt;
&lt;li&gt;Teach others&lt;/li&gt;
&lt;li&gt;Build Projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deep Dive 👇&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-learn-basics-"&gt;
  &lt;/a&gt;
  1. Learn Basics -
&lt;/h4&gt;

&lt;p&gt;Don't try to jump into advanced stuff without learning enough basics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Core Fundamentals &amp;gt;&amp;gt;&amp;gt;&amp;gt; frameworks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#2-take-proper-notes-"&gt;
  &lt;/a&gt;
  2. take proper Notes -
&lt;/h4&gt;

&lt;p&gt;Notes are the best way to revise your learning because we humans are never able to remember all the things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the key points.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#3-start-with-a-small-problem-"&gt;
  &lt;/a&gt;
  3. Start with a small problem -
&lt;/h4&gt;

&lt;p&gt;Always start with small coding problems, do not try to solve big problems because you get demotivated easily in the beginning.&lt;/p&gt;

&lt;p&gt;Coding is all about solving problems so always break your problem into small sub-problem. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-be-consistent-"&gt;
  &lt;/a&gt;
  4. Be consistent -
&lt;/h4&gt;

&lt;p&gt;Do not try to learn everything in one or two months. be consistent with your learning soon you will see Great results.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-teach-others-"&gt;
  &lt;/a&gt;
  5. Teach others -
&lt;/h4&gt;

&lt;p&gt;teaching is the best way to Recalling back what we have learned. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-build-projects-"&gt;
  &lt;/a&gt;
  6. Build Projects -
&lt;/h4&gt;

&lt;p&gt;The more you code, The better you become 💛, Don't just watch the tutorials, practice what you learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-"&gt;
  &lt;/a&gt;
  Conclusion -
&lt;/h2&gt;

&lt;p&gt;If you are able to relate to this article that you are in tutorial hell. Use the given techniques to escape from tutorial hell. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading&lt;/p&gt;

&lt;p&gt;Let's connect with me on &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ali6nX404"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/mahesh-patidar-34a982192/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>developer</category>
      <category>css</category>
      <category>webdeveloper</category>
    </item>
    <item>
      <title>How to setup golang backend and react frontend in a monorepo </title>
      <author>ynwd</author>
      <pubDate>Wed, 20 Oct 2021 10:23:49 +0000</pubDate>
      <link>https://dev.to/ynwd/how-to-setup-golang-backend-and-react-frontend-in-a-monorepo-3api</link>
      <guid>https://dev.to/ynwd/how-to-setup-golang-backend-and-react-frontend-in-a-monorepo-3api</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ynwd/how-to-setup-react-tailwind-webpack-and-typescript-in-a-monorepo-3ogm"&gt;Previously&lt;/a&gt;, we have set up a frontend module using react and typescript in a monorepo.&lt;/p&gt;

&lt;p&gt;Next, we will use the golang server to serve the built webapp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── go.mod
├── go.sum
├── main.go
├── package.json
└── web
    ├── components
    └── modules
        └── root
            ├── build
            │   ├── asset-manifest.json
            │   ├── favicon.ico
            │   ├── index.html
            │   ├── logo192.png
            │   ├── logo512.png
            │   ├── manifest.json
            │   ├── robots.txt
            │   └── static
            │       ├── css
            │       │   ├── main.33a5a96b.chunk.css
            │       │   └── main.33a5a96b.chunk.css.map
            │       └── js
            │           ├── 2.59f16c8b.chunk.js
            │           ├── 2.59f16c8b.chunk.js.LICENSE.txt
            │           ├── 2.59f16c8b.chunk.js.map
            │           ├── 3.93db3793.chunk.js
            │           ├── 3.93db3793.chunk.js.map
            │           ├── main.f7ff0158.chunk.js
            │           ├── main.f7ff0158.chunk.js.LICENSE.txt
            │           ├── main.f7ff0158.chunk.js.map
            │           ├── runtime-main.08d49f3a.js
            │           └── runtime-main.08d49f3a.js.map
            └── package.json


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clone repo: &lt;a href="https://github.com/ynwd/monorepo/tree/typescript"&gt;https://github.com/ynwd/monorepo/tree/typescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;create services folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p internal/services
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;init golang app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init github.com/ynwd/monorepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;downlod fastrex package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/fastrodev/fastrex
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will generate go.mod file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module github.com/ynwd/monorepo

go 1.17

require github.com/fastrodev/fastrex v0.0.0-20211008073151-687f0b90ec18 // indirect

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;create golang app entry point&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;/* main.go */&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/fastrodev/fastrex"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web/modules/root/build/index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web/modules/root/build"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;build react root module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build -w @fstr/root
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run golang server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the final source code here: &lt;a href="https://github.com/ynwd/monorepo/tree/fastrex"&gt;https://github.com/ynwd/monorepo/tree/fastrex&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>react</category>
      <category>typescript</category>
      <category>monorepo</category>
    </item>
    <item>
      <title>Redux </title>
      <author>Gilson Gangadhar</author>
      <pubDate>Wed, 20 Oct 2021 10:14:11 +0000</pubDate>
      <link>https://dev.to/gilsongangadhar/redux-4jgf</link>
      <guid>https://dev.to/gilsongangadhar/redux-4jgf</guid>
      <description>&lt;p&gt;Introduction: &lt;/p&gt;

&lt;p&gt;If data need to be passed from one component to another component. There are two ways to do it : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By making the component from which data(state values) need to be passed as parent and the component which recieves data as child component. And data is send to child component as "props". This process is called "one-way data binding" .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If data need to be passed between two or three components, then data(state values) is lifted to the top common component and then data is shared to the child components. This process is called "lifting the state up" &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as the number of components to which data need to be passed increases in an app, the above two methods cannot be used. That where redux store come into the picture. &lt;/p&gt;

&lt;p&gt;-&amp;gt; What is Redux?&lt;/p&gt;

&lt;p&gt;Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt;

&lt;p&gt;-&amp;gt; What are the core principles of Redux?&lt;/p&gt;

&lt;p&gt;a). Single source of truth: The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/p&gt;

&lt;p&gt;b). State is read-only: The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/p&gt;

&lt;p&gt;c). Changes are made with pure functions: To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Explanation : &lt;/p&gt;

&lt;p&gt;Redux store is obtained to the react app via "redux" package. In redux store, we store "application state", which needed to be shared to all component in an app. &lt;/p&gt;

&lt;p&gt;We only state state which is required by all components is stored in redux store i.e("application state"). Not the local state which is required by a perticular component. &lt;/p&gt;

&lt;p&gt;Redux store is connected to all the components via Provider. And the components are connected to the store via Connect. Both Provider and Connect are obtained through "react-redux" package. &lt;/p&gt;

&lt;p&gt;State values of redux store can be accessed by components through mapStateToProps() function or via useSelector() hook. &lt;/p&gt;

&lt;p&gt;mapStateToProps() function : is a utility which helps your component get updated state (which is updated by some other components). It maps the state variables from your store to the props that you specify. &lt;/p&gt;

&lt;p&gt;It takes state as its argument and returns an object. &lt;/p&gt;

&lt;p&gt;useSelector() hook is obtained via "react-redux" package. It maps the state of your redux store and is used to access state values. &lt;/p&gt;

&lt;p&gt;-&amp;gt; How state values are stored &amp;amp; updating in the redux store : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RNWxbVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6zh1ue52i21ki3jq3y3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RNWxbVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6zh1ue52i21ki3jq3y3.jpg" alt="Redux-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a). In the component, if there has to be any changes in the state value of the redux store, an action is dispatched. It is dispatched either using useDispatch() hook or using dispatch() method got as a property of props of the wrapped component using Connect(). &lt;/p&gt;

&lt;p&gt;b). Actions are functions. They are two types : asynchronous and synchronous. It's the asynchronous action generator, which talks to backend and get the data using dispatch method(got through "redux-thunk" package) and it pass it on to synchronous action generator, which returns an object. It passes the data to redux store. &lt;/p&gt;

&lt;p&gt;c). Redux store gets the data from synchronous action generator and passes the data along with previous state value to the reducer. Reducer is a function which updates the state values of the redux store. Once store passes the data &amp;amp; previous state to reducer, it returns the updated state value to the redux store. &lt;/p&gt;

&lt;p&gt;d). Then the redux store passes the updated state to the component, which is rendered. &lt;/p&gt;

&lt;p&gt;So this is the brief explantion of Redux and the working for redux store. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to upload a file in Elixir with Waffle</title>
      <author>Curiosum</author>
      <pubDate>Wed, 20 Oct 2021 10:04:35 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/how-to-upload-a-file-in-elixir-with-waffle-mab</link>
      <guid>https://dev.to/curiosum_dev/how-to-upload-a-file-in-elixir-with-waffle-mab</guid>
      <description>&lt;p&gt;The ability to upload files is a key requirement for many todays web and mobile applications. In this tutorial, we will look at how we can accomplish file uploads to local storage and S3 server in Phoenix with the help of &lt;a href="https://github.com/elixir-waffle/waffle"&gt;Waffle&lt;/a&gt; library. &lt;a href="https://curiosum.com/blog/how-upload-file-elixir-waffle"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Connecting to Amazon DocumentDB with MongoDB Drivers </title>
      <author>Jerod Johnson</author>
      <pubDate>Wed, 20 Oct 2021 09:55:22 +0000</pubDate>
      <link>https://dev.to/jerodimusprime/connecting-to-amazon-documentdb-with-mongodb-drivers-14dp</link>
      <guid>https://dev.to/jerodimusprime/connecting-to-amazon-documentdb-with-mongodb-drivers-14dp</guid>
      <description>&lt;p&gt;With Amazon DocumentDB developers and DBAs can balance availability, read scalability, and latency with five pre-configured consistency levels. The data in an Amazon DocumentDB cluster is accessible just like a MongoDB 3.6 cluster.  &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.cdata.com/drivers/mongodb/odbc/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=connecting-to-amazon-documentdb-with-mongodb-drivers"&gt;CData Software Drivers for MongoDB&lt;/a&gt; provide a SQL-like interface to MongoDB data through standards-based drivers. This allows users to see their data in the BI, reporting, and ETL tools of their choice, as well as in custom tools and applications. &lt;/p&gt;

&lt;p&gt;This article walks through configuring an Amazon DocumentDB cluster and connecting to the cluster through any of the available CData Software MongoDB drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-documentdb-cluster"&gt;
  &lt;/a&gt;
  Creating a DocumentDB Cluster
&lt;/h1&gt;

&lt;p&gt;To create a DocumentDB cluster, log in to your AWS Console, select Amazon DocumentDB, click Clusters and Create to add a new cluster. Once you create the cluster, you can connect to the cluster using the MongoDB client from an EC2 instance to populate the cluster. Once you have data in the Amazon DocumentDB cluster, you can connect using the CData MongoDB Drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connecting-to-a-amazon-documentdb-cluster"&gt;
  &lt;/a&gt;
  Connecting to a Amazon DocumentDB Cluster
&lt;/h1&gt;

&lt;p&gt;With your cluster created, make note of the cluster details (found by clicking on the cluster name on the Clusters page). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtZCN5dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82szjw2dn860aaegpu87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtZCN5dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82szjw2dn860aaegpu87.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table below describes the mapping from the DocumentDB cluster details to the CData Driver properties: &lt;/p&gt;

&lt;p&gt;CData Driver Property       |        Amazon DocumentDB Property &lt;/p&gt;

&lt;p&gt;Server                      --&amp;gt;           Cluster endpoint&lt;/p&gt;

&lt;p&gt;Port                        --&amp;gt;                  Port                                    &lt;/p&gt;

&lt;p&gt;User                        --&amp;gt;               Master username &lt;/p&gt;

&lt;p&gt;Password                    --&amp;gt;  (set when you create the cluster) &lt;/p&gt;

&lt;p&gt;In addition to the cluster details, you need to set a few more additional properties in the CData drivers to connect to an Amazon DocumentDB cluster: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UseSSL:&lt;/strong&gt; True &lt;br&gt;
(Amazon DocumentDB Clusters have SSL enabled by default and this cannot be changed.) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSLServerCert:&lt;/strong&gt; * &lt;br&gt;
(This automatically accepts the certificate presented by the DocumentDB Cluster, which is already hosted within the same region and security group as the EC2 instance.) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Other:&lt;/strong&gt; "UseFindAPI=true" &lt;br&gt;
(This is set to ensure compatibility with the DocumentDB version of the MongoDB API.) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all of the properties, your standard connection string would look like the following: &lt;/p&gt;

&lt;p&gt;Server=.cluster-xxxxxxxxxxxx..docdb.amazonaws.com; Port=27107; User=myMaster; Password=myPassword; UseSSL=True; SSLServerCert=*; Other='UseFindAPI=True'; &lt;/p&gt;

&lt;p&gt;Once the connection properties are set, you can quickly connect to your Amazon DocumentDB account using any of the MongoDB Drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h1&gt;

&lt;p&gt;When developing modern applications, document databases like MongoDB are a popular choice for storing semi-structured data for use cases like product catalogs, user profiles, mobile applications, and content management. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.cdata.com/drivers/mongodb/odbc/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=connecting-to-amazon-documentdb-with-mongodb-drivers"&gt;MongoDB ODBC Driver&lt;/a&gt; is a powerful tool that allows you to connect with live MongoDB document databases, directly from any applications that support ODBC connectivity. Access MongoDB like you would a database - read, write, and update through a standard ODBC Driver interface. &lt;/p&gt;

</description>
      <category>automation</category>
      <category>integration</category>
      <category>connectivity</category>
      <category>database</category>
    </item>
    <item>
      <title>Wrapping Angular Material button in custom Angular component (part 1)</title>
      <author>Dzhavat Ushev</author>
      <pubDate>Wed, 20 Oct 2021 09:53:29 +0000</pubDate>
      <link>https://dev.to/this-is-angular/wrapping-angular-material-button-in-custom-angular-component-part-1-1ph1</link>
      <guid>https://dev.to/this-is-angular/wrapping-angular-material-button-in-custom-angular-component-part-1-1ph1</guid>
      <description>&lt;p&gt;I was recently working on a button component as part of a Design System based on Angular Material. While working on this component, I faced some interesting challenges which I would like to share with you in this and following posts.&lt;/p&gt;

&lt;p&gt;When you want to build your own Design System on top of Angular Material (or pretty much any other 3rd party component library), you have a couple of options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build a custom Angular Material theme and use the components as they are described in the documentation.&lt;/li&gt;
&lt;li&gt;Build a custom Angular Material theme and build your own component library on top of Angular Material by wrapping their components in your own components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are pros and cons with both approaches. That is a topic for another post so I’m not going into the details here. Long story short, we went with option 2.&lt;/p&gt;

&lt;p&gt;So my task was to wrap an Angular Material button in our own component and expose that for other developers to use in the rest of the app. Interesting, huh?&lt;/p&gt;

&lt;p&gt;Let’s recreate that component in this series of posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Well, the first step is to define some basic requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call the component &lt;code&gt;my-button&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Button’s text must go between the opening and closing tags of the component.&lt;/li&gt;
&lt;li&gt;The button must support three different styles depending on its usage - as a primary, secondary or a text button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#one-component-or-three-components"&gt;
  &lt;/a&gt;
  One component or three components?
&lt;/h3&gt;

&lt;p&gt;By reading the second requirement, a valid question might arise. Should we create a single component and control its style with an &lt;a href="https://angular.io/api/core/Input"&gt;Input&lt;/a&gt; property or three separate components - one for each style? I think having only one component is better because the consumers of the Design System will have only one way to display a button and adding support for more styles later on is easier.&lt;/p&gt;

&lt;p&gt;So based on this, two more requirements can be specified:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The component should have a &lt;code&gt;type&lt;/code&gt; property that takes one of these values - “&lt;em&gt;primary&lt;/em&gt;”, “&lt;em&gt;secondary&lt;/em&gt;” or “&lt;em&gt;text&lt;/em&gt;”. If not specified, the default value should be “&lt;em&gt;text&lt;/em&gt;”.&lt;/li&gt;
&lt;li&gt;Depending on the &lt;code&gt;type&lt;/code&gt;, a different button style must be shown. This is illustrated in the image below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZuAvcpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dphbhqhwp2k0ff3m7xy4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZuAvcpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dphbhqhwp2k0ff3m7xy4.jpg" alt="One button component with three different styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would you build it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;There are a number of ways to approach the problem. In this, and following posts, I’m going to share &lt;strong&gt;my&lt;/strong&gt; solution(s). If you have a different solution, questions, or tips that can help me improve my solution(s), please let me know. I’ll be happy to learn from you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  Solution 1
&lt;/h3&gt;

&lt;p&gt;Let’s start with something simple to see if we can make it work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// my-button.component.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./my-button.component.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyButtonComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-button.component.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'primary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-flat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'secondary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-stroked-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'text'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, the above solution might look kinda ok. Directives in Angular cannot be applied dynamically based on some logic so &lt;a href="https://angular.io/api/common/NgIf"&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; is used to decide which button style to display depending on the value of &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Demo time 🎉 (&lt;a href="https://stackblitz.com/edit/angular-nh42jz?file=src%2Fapp%2Fmy-button%2Fmy-button.component.html"&gt;StackBlitz&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-1YUEUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wk9v0wuo7raiovsnywe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-1YUEUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wk9v0wuo7raiovsnywe.jpg" alt="Demo to solution 1: Content projection for “primary” and “secondary” buttons is broken"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, something is clearly not working.&lt;/p&gt;

&lt;p&gt;The problem here lies in the way &lt;a href="https://angular.io/api/core/ng-content"&gt;&lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt;&lt;/a&gt; works inside &lt;code&gt;ngIf&lt;/code&gt;. If we look at the &lt;a href="https://angular.io/guide/content-projection#conditional-content-projection"&gt;"Conditional content projection"&lt;/a&gt; section in the Angular docs, we can read that “&lt;em&gt;[...] when the consumer of a component supplies the content, that content is always initialized, even if the component does not define an &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element or if that &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element is inside of an &lt;code&gt;ngIf&lt;/code&gt; statement&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;What I get out of this is that we cannot use more than one &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element in the same template when a condition is used to decide where to place the projected content. The recommendation for such scenarios is to use &lt;a href="https://angular.io/api/core/ng-template"&gt;&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So solution 1 cannot be used to implement the requirements. We need to find something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  Solution 2
&lt;/h3&gt;

&lt;p&gt;In this solution we’re going to take Angular’s recommendation and use &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. Some minor adjustments in the HTML template are necessary. Component’s class can stay the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-button.component.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'primary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-flat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'secondary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-stroked-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'text'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#buttonContent&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a couple of new things here. First, the &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; inside each button is moved inside the &lt;code&gt;ng-template&lt;/code&gt;. Then a &lt;a href="https://angular.io/guide/template-reference-variables"&gt;template variable&lt;/a&gt; &lt;code&gt;#buttonContent&lt;/code&gt; that holds a references to the &lt;code&gt;ng-template&lt;/code&gt; is defined. Lastly, &lt;a href="https://angular.io/api/common/NgTemplateOutlet"&gt;&lt;code&gt;ngTemplateOutlet&lt;/code&gt;&lt;/a&gt; is used inside each &lt;code&gt;button&lt;/code&gt; to render the given &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Demo time 🎉 (&lt;a href="https://stackblitz.com/edit/angular-nh42jz-8cambj?file=src%2Fapp%2Fbutton-overview-example.html"&gt;StackBlitz&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUZ-Xo16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rayq7vert9p4tonim077.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUZ-Xo16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rayq7vert9p4tonim077.jpg" alt="Demo to solution 2: All buttons are displayed correctly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works! The reason why it works is because Angular will not initialize the content of an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element until that element is explicitly rendered.&lt;/p&gt;

&lt;p&gt;Is the task done? Should we open a pull request (PR) and call it a day?&lt;/p&gt;

&lt;p&gt;Before we do that, let’s ask ourselves some questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are the downsides of this solution?&lt;/li&gt;
&lt;li&gt;Can the component easily be extended to support further requirements like more button styles, displaying of icon(s), disabled and/or loading state, links?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A downside is that the template will grow in size if more button styles have to be supported. The same will happen if the same component should also be used for links (yes, because &lt;a href="https://twitter.com/claviska/status/1445479402532261892"&gt;a “button” and a “link” should be one component&lt;/a&gt;) Another downside is that the template contains repetitive logic that doesn’t belong there - deciding which button style to show using a bunch of &lt;code&gt;ngIf&lt;/code&gt;s. There are other Angular APIs that can help us achieve the same result by moving the logic in the component’s class instead thus keeping the template small and tidy.&lt;/p&gt;

&lt;p&gt;As for adding more requirements, that’s a valid concern. New use cases come up all the time and some of them will probably need to be supported at some point. Is the component flexible enough to allow that?&lt;/p&gt;

&lt;p&gt;Some might stop here and say that the solution is good enough. After all, it fulfills the current requirements. Others might be curious to see other solutions and see how we can extend the component to support more requirements. That is what we’re going to explore in part 2 (coming soon).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/LayZeeDK/"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt; for reviewing this post.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@chrislawton?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Chris Lawton&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/colors?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>material</category>
    </item>
    <item>
      <title>Free courses for october</title>
      <author>BigCoder</author>
      <pubDate>Wed, 20 Oct 2021 09:51:27 +0000</pubDate>
      <link>https://dev.to/bigcoder/free-courses-for-october-5hgk</link>
      <guid>https://dev.to/bigcoder/free-courses-for-october-5hgk</guid>
      <description>&lt;p&gt;Some of my courses, free next few days&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/ethical-hacking-introduction-to-exploits/?couponCode=444C7967679EACB926F3"&gt;Ethical Hacking: Introduction to Exploits&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/ethical-hacking-nmap-in-depth/?couponCode=B736B3ECA0F9739E1319"&gt;Ethical Hacking: Master map&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/apparmor-linux-security/?couponCode=D01FE7E205C1146A122D"&gt;Cyber Security: AppArmor on Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/create-snake-with-python-pygame/?couponCode=73ABB6588DBC1C3E9B18"&gt;Create Snake with Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/file-processing-with-python/?couponCode=29A3DEF2CAB4255C4AEE"&gt;File Processing with Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/linux-terminal-for-beginners/?couponCode=1754040039B5EFD784AD"&gt;Linux terminal for beginners&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/awk-tutorial/"&gt;Linux awk tutorial&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/redis-database-tutorial/"&gt;Redis Database&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Debug Electron production binaries on Windows, Mac &amp; Linux</title>
      <author>Emmanouil Liakos</author>
      <pubDate>Wed, 20 Oct 2021 09:49:20 +0000</pubDate>
      <link>https://dev.to/mliakos/debug-electron-production-binaries-on-windows-mac-linux-2fm6</link>
      <guid>https://dev.to/mliakos/debug-electron-production-binaries-on-windows-mac-linux-2fm6</guid>
      <description>&lt;p&gt;In this short article, I would like to show you how to debug Electron production binaries on Windows, Mac &amp;amp; Linux. &lt;/p&gt;

&lt;p&gt;Sometimes you might want to see the log output of a production binary built with Electron and for some reason the web resources on this subject are extremely limited, rendering this a non-trivial task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;If you are using Windows, it's pretty straightforward. Just provide the path of your executable with the &lt;code&gt;--debug&lt;/code&gt; flag and it should do the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'path/to/MyElectronApp.exe'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--debug&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac
&lt;/h2&gt;

&lt;p&gt;For MacOS, it gets a bit more complicating - as is always the case with Apple 😀. You have to follow a different approach based on whether you have code-signed your application or not. Essentially, if the binary is code-signed with a certificate, &lt;strong&gt;then you have to strip it in order for the debugger to work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In any case you have to use the &lt;strong&gt;&lt;a href="https://lldb.llvm.org/"&gt;lldb Debugger&lt;/a&gt;&lt;/strong&gt; and your application's path (probably something like &lt;code&gt;/Applications/MyElectronApp.app&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsigned-binary"&gt;
  &lt;/a&gt;
  Unsigned binary
&lt;/h3&gt;

&lt;p&gt;For an unsigned binary run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  lldb /Applications/MyElectronApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the target has been created, run &lt;code&gt;run&lt;/code&gt; to open the app.&lt;/p&gt;

&lt;p&gt;When you are finished, run &lt;code&gt;exit&lt;/code&gt; to close the debugger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signed-binary"&gt;
  &lt;/a&gt;
  Signed binary
&lt;/h3&gt;

&lt;p&gt;The methodology for a signed binary is essentially the same, but requires an extra step before proceeding. If you try to debug a code-signed binary you will likely get the following error message:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error: process exited with status -1 (attach failed (Not allowed to attach to process. Look in the console messages (Console.app), near the debugserver entries when the attached failed. The subsystem that denied the attach permission will likely have logged an informative message about why it was denied.))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To bypass this, you have to strip the certificate using the following &lt;a href="https://gist.github.com/talaviram/1f21e141a137744c89e81b58f73e23c3"&gt;script&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Simple Utility Script for allowing debug of hardened macOS apps.&lt;/span&gt;
&lt;span class="c"&gt;# This is useful mostly for plug-in developer that would like keep developing without turning SIP off.&lt;/span&gt;
&lt;span class="c"&gt;# Credit for idea goes to (McMartin): https://forum.juce.com/t/apple-gatekeeper-notarised-distributables/29952/57?u=ttg&lt;/span&gt;
&lt;span class="nv"&gt;app_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"You need to specify app to re-codesign!"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# This uses local codesign. so it'll be valid ONLY on the machine you've re-signed with.&lt;/span&gt;
&lt;span class="nv"&gt;entitlements_plist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/debug_entitlements.plist
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Grabbing entitlements from app..."&lt;/span&gt;
codesign &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--entitlements&lt;/span&gt; :- &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Patch entitlements (if missing)..."&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.cs.disable-library-validation bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.cs.allow-unsigned-executable-memory bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.get-task-allow bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Re-applying entitlements (if missing)..."&lt;/span&gt;
codesign &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="nt"&gt;--options&lt;/span&gt; runtime &lt;span class="nt"&gt;--sign&lt;/span&gt; - &lt;span class="nt"&gt;--entitlements&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"codesign failed!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Removing temporary plist..."&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save this in a file locally and run it, while also providing the application's path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash ~/path/to/script.sh ~/path/to/MyElectronApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you can run the debugger in the exact same way as with the unsigned binary (using the &lt;code&gt;lldb&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;You can of course chain the commands to &lt;strong&gt;strip the certificate and run&lt;/strong&gt; the app in one go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash ~/path/to/script.sh ~/path/to/MyElectronApp.app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; lldb ~/path/to/MyElectronApp.app   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h2&gt;

&lt;p&gt;This is the easiest of the three. Just open the app from a terminal and you shall see the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'path/to/my/ElectronApp.AppImage'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: I haven't tried it with any target other than &lt;code&gt;AppImage&lt;/code&gt;, but I presume that it should work in the same way.&lt;/p&gt;

&lt;p&gt;Hope this was useful, thanks for reading! 🤓&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>React Django - Soft Dashboard (Free Product)</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 20 Oct 2021 09:42:01 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-django-soft-dashboard-free-product-3gi8</link>
      <guid>https://dev.to/sm0ke/react-django-soft-dashboard-free-product-3gi8</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source full-stack project crafted on top of &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; using &lt;a href="https://appseed.us/product/django-react-soft-dashboard"&gt;React and Django&lt;/a&gt; as backend framework. The product, released under the MIT license on Github, can be used as a codebase for a commercial dashboard or simply for learning especially by beginners. Codebase uses a &lt;code&gt;two-tier&lt;/code&gt; architecture where the React UI is decoupled and communicates with the backend using JSON Web Tokens (JWT). For newcomers, React is a popular JavaScript library for coding user interfaces backed by Facebook. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/product/django-react-soft-dashboard"&gt;Django React Soft Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://django-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;Django React Soft Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lga7qi9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuhj9yuqin8x93pg1nz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lga7qi9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuhj9yuqin8x93pg1nz.gif" alt="React Django Soft Dashboard - Open-source full-stack product."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-dashboard-react"&gt;
  &lt;/a&gt;
  ✨ Soft Dashboard React
&lt;/h2&gt;

&lt;p&gt;This free template is designed by Creative-Tim on top of Material-UI, the most popular components library for React. &lt;strong&gt;Soft UI Dashboard React&lt;/strong&gt; is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.  &lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. Every page is spaced well, with attractive layouts and pleasing shapes. Soft UI Dashboard React has everything you need to quickly set up an amazing project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siLPFm_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ebi3ho2yuc1bzjp9df7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siLPFm_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ebi3ho2yuc1bzjp9df7.png" alt="Soft Dashboard React - Open-source React Design, the Billing page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  ✨ How to use the product
&lt;/h2&gt;

&lt;p&gt;This open-source product is a complete full-stack seed product that covers all layers from the UI to the database using a &lt;code&gt;two-tier&lt;/code&gt; architecture: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;React Frontend&lt;/code&gt; (Soft UI Template)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JWT Authentication&lt;/code&gt;: users can register, Sign IN and logout&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Django API Backend&lt;/code&gt;: responsible with persistence &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use the product we need to build both parts: the API backend and the React Frontend. Both parts are already configured to work and communicate using compatible settings. Let's start compile the product and use it in the browser. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-the-django-api-backend"&gt;
  &lt;/a&gt;
  ✨ Start the Django API Backend
&lt;/h3&gt;

&lt;p&gt;To successfully compile the backend server, &lt;strong&gt;Python3&lt;/strong&gt; and &lt;strong&gt;GIT&lt;/strong&gt; should be properly installed and accessible in the terminal window. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--geui0cl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwua9ctmvxymqwukzns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--geui0cl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwua9ctmvxymqwukzns.png" alt="Django API Server - Open-source product crafted by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Clone sources using GIT&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-django.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-django 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Create a virtual environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Install dependencies using &lt;code&gt;PIP&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #4 - Start the API server&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 5000 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the server should run on port &lt;code&gt;5000&lt;/code&gt; and we can test the interface using POSTMAN or &lt;code&gt;curl&lt;/code&gt; to create and authenticate users. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  ✨ Start the React UI
&lt;/h3&gt;

&lt;p&gt;The dependency for this part is NodeJS, a decent version closer to 12.x or above. Once the &lt;code&gt;NodeJS&lt;/code&gt; is accessible via the terminal, we can clone the React UI from the public repository and start compiling the product. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 Step #1 - Clone sources using GIT&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-soft-ui-dashboard 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #2 - Install dependencies via &lt;code&gt;NPM&lt;/code&gt; or &lt;code&gt;Yarn&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Step #3 - Start in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we should see the login page rendered by the browser on port &lt;code&gt;3000&lt;/code&gt;. By default guest users are redirected to Sign IN page because all other pages like dashboard, user profile .. etc, are protected. Once the authentication is successful, we can access all private pages. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPo_p43K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4dj6bfzan18xisbnn4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPo_p43K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4dj6bfzan18xisbnn4m.png" alt="React Django Soft Dashboard - Profile page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RTL Page&lt;/strong&gt; - React Soft Dashboard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3BTj0ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuw5b5jq5ze8qhoopqa7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3BTj0ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuw5b5jq5ze8qhoopqa7.png" alt="React Django Soft Dashboard - RTL Sample Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published on Dev&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/react-user-authentication-jwt-token/"&gt;React User Authentication&lt;/a&gt; - JWT Token Authentication | Blog Article&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>django</category>
      <category>fullstack</category>
      <category>appseed</category>
    </item>
  </channel>
</rss>
