<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HVAC Software and Solutions for Small Businesses</title>
      <author>Energy Design System</author>
      <pubDate>Wed, 19 Jan 2022 07:24:38 +0000</pubDate>
      <link>https://dev.to/eds_tech1/hvac-software-and-solutions-for-small-businesses-49ik</link>
      <guid>https://dev.to/eds_tech1/hvac-software-and-solutions-for-small-businesses-49ik</guid>
      <description>&lt;p&gt;When you invest in a new HVAC system for your home or for your business, you may come across the term “load calculation”. You might be wondering what it means, right?&lt;/p&gt;

&lt;p&gt;Well, the heating and cooling load calculation is the first step of the iterative HVAC design procedure. It is something that ensures comfortable heating, cooling, and ventilation for the residents. Some people simply replace the old HVAC system with the new one without considering the impact of HVAC load calculation for better performance. And that’s not the reality!&lt;/p&gt;

&lt;p&gt;Having accurate heat load calculation won’t just help you get the perfect size of the HVAC system, but will also ensure a comfortable in-house experience for the residents. Contractors may have different ways of measuring size and load calculations. Some just look at the premises and tell you the necessary size whereas others may take some burden to count windows or other areas to estimate HVAC loads more precisely.&lt;/p&gt;

&lt;p&gt;The only problem with conventional heat load calculation is that it is a time-consuming process. And that is where HVAC load calculation software comes in handy. In this blog post, we will discuss what HVAC load calculations are, why it is important to perform a heat load calculation, and important tips to get accurate HVAC load calculations.&lt;/p&gt;

&lt;p&gt;Understanding HVAC load calculations…&lt;/p&gt;

&lt;p&gt;The cool or heat load calculation is how HVAC professionals or home auditors determine the correct size of your home’s HVAC system. Whether you’re building a new home or installing a new HVAC system, the HVAC load calculator helps you get the most accurate HVAC system for your home.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eds.tech"&gt;HVAC software&lt;/a&gt; can help you identify the best size, application, and type of HVAC system suitable for your home. Instead of conventional methods, you can use &lt;a href="https://www.eds.tech/hvac-load-calculator/"&gt;HVAC load calculation software&lt;/a&gt; to do the calculations quickly. The home auditor typically considers the following parameters or factors:&lt;/p&gt;

&lt;p&gt;Total square footage of your home&lt;br&gt;
The number of windows, doors, and entryways&lt;br&gt;
Check for insulation material used, the density, and how it is installed&lt;br&gt;
Make sure you consider all the floors including the number of living space vs attic space&lt;br&gt;
Don’t forget to check sunlight blockages, if any&lt;br&gt;
Check for the window treatments used to keep the sun out&lt;br&gt;
Always check duct size, condition, and vent system installed&lt;br&gt;
Considering all these factors, the contractor may use HVAC load calculation software and figure out the exact size of the HVAC system to be installed at your home.&lt;/p&gt;

&lt;p&gt;Reasons why you need an HVAC load calculator to measure loads&lt;/p&gt;

&lt;p&gt;Ensures you get an accurate HVAC system installed at your home. The size of the HVAC system plays a vital role. If you have a small HVAC system installed, it will run continuously to keep your home warm or cool. This results in uncomfortable room temperature and higher energy bills. Similarly, the larger HVAC system will waste energy due to frequent on and off. To get rid of the inappropriate size HVAC system, you can use HVAC load calculation software. With the right measurements, you can rest assured to get an accurate HVAC system designed for your unique needs.&lt;/p&gt;

&lt;p&gt;Helps you become energy efficient. Since you have an accurate and correctly-sized HVAC system installed at your home, it will consume less energy and produce better results. Unlike other HVAC systems, which are not designed appropriately, they will not require more energy to cool or warm your home. This will greatly reduce the energy bills.&lt;/p&gt;

&lt;p&gt;No additional cost. In case of incorrect heat load calculations, the service provider may either install too large equipment. You will be required to pay more for the high-capacity system, which is not at all required for your home. Using heating load calculation software, you can easily bring down the overall equipment costs.&lt;/p&gt;

&lt;p&gt;Better health and safety. Inappropriate size of the HVAC system may result in unstable temperature or humidity control problems. This has adverse side effects on the health of your family members. Professional HVAC software will ensure the proper size of your HVAC system and will contribute towards your healthy life.&lt;/p&gt;

&lt;p&gt;Improve HVAC system’s life. Since your HVAC system runs smoothly without any additional load, it will greatly reduce the wear and tear of the system and boost the overall lifespan of the equipment.&lt;/p&gt;

&lt;p&gt;Understanding the side effects of inappropriate HVAC load calculations&lt;/p&gt;

&lt;p&gt;When you don’t have accurate HVAC load calculations, you end up installing an inappropriate HVAC system. You will not just pay unnecessary additional costs for a larger unit, but you will also face health issues and poor performance and life of the HVAC system.&lt;/p&gt;

&lt;p&gt;Tips to get precise HVAC load calculations&lt;/p&gt;

&lt;p&gt;Always upgrade yourself with the latest technology and tools. Conventional methods of heat load calculations are erroneous and time-consuming. Get help from professional HVAC software or home energy audit tools to get accurate results.&lt;br&gt;
In case of doubt, always ask the home auditor.&lt;br&gt;
Make sure you never ignore short cycles of HVAC equipment.&lt;br&gt;
To achieve optimum temperature and humidity, always consider thermal enclosure and internal loads.&lt;br&gt;
How much does it cost to carry out load calculation?&lt;/p&gt;

&lt;p&gt;Well, the HVAC load calculator is not that expensive. You can easily find suitable HVAC load calculation software online, such as EDS. You can do almost everything you ever imagined using such professional heating load calculation software on your own.&lt;/p&gt;

&lt;p&gt;In the end, what matters the most is accurate heating or cooling load calculations to get the right HVAC system installed for your home. You can definitely follow a few handy tips mentioned in this blog to achieve the most accurate calculations for your home. A well-designed and rightly sized HVAC system will bring noticeable benefits such as improved energy, reduced energy bills, and comfortable temperature for your home.&lt;/p&gt;

&lt;p&gt;Want someone to do HVAC load calculations for you? Why don’t you try the &lt;a href="https://www.eds.tech"&gt;EDC HVAC load calculator&lt;/a&gt;? Talk to our experts now…&lt;/p&gt;

</description>
    </item>
    <item>
      <title>.NET Core PDF Generator</title>
      <author>IronSoftware</author>
      <pubDate>Wed, 19 Jan 2022 07:12:06 +0000</pubDate>
      <link>https://dev.to/ironsoftware/net-core-pdf-generator-3nja</link>
      <guid>https://dev.to/ironsoftware/net-core-pdf-generator-3nja</guid>
      <description>&lt;p&gt;Creating .NET Core PDF files is a cumbersome task. Working with PDFs in ASP.NET MVC projects, as well as converting MVC views, HTML files, and online web pages to PDF can be challenging. This tutorial works with the IronPDF tool to tackle these problems, providing instructional guidelines for many of your PDF .NET Core needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-generate-pdf-files-in-net-core"&gt;
  &lt;/a&gt;
  How to Generate PDF Files in .NET Core
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Download .NET Core PDF Generator Library&lt;/li&gt;
&lt;li&gt;Convert .NET core HTML or MVC view to PDF&lt;/li&gt;
&lt;li&gt;Choose Render Options&lt;/li&gt;
&lt;li&gt;Add PDF Password or Digitally Sign&lt;/li&gt;
&lt;li&gt;Extract text images or add watermark&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After this tutorial, you'll be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convert to PDF from different sources like URL, HTML, MVC views&lt;/li&gt;
&lt;li&gt;Engage with advanced options used for different output PDF settings&lt;/li&gt;
&lt;li&gt;Deploy your project to Linux and Windows&lt;/li&gt;
&lt;li&gt;Work with PDF document manipulation capabilities&lt;/li&gt;
&lt;li&gt;Add headers and footers, merge files, add stamps&lt;/li&gt;
&lt;li&gt;Work with Dockers
This wide range of .NET Core HTML to PDF capabilities will help with a whole range of project needs.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#1-install-the-ironpdf-library-free"&gt;
  &lt;/a&gt;
  1. Install the IronPDF Library Free
&lt;/h1&gt;

&lt;p&gt;IronPDF can be installed and used on all of the .NET project types like Windows applications, ASP.NET MVC, and .NET Core applications.&lt;/p&gt;

&lt;p&gt;To add the IronPDF library to our project we have two ways, either from the Visual Studio editor install using NuGet, or with a command line using package console manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-using-nuget"&gt;
  &lt;/a&gt;
  Install using NuGet
&lt;/h2&gt;

&lt;p&gt;To add the IronPDF library to our project using NuGet, we can use the visualized interface (NuGet Package Manager) or by command using Package Manager Console:&lt;/p&gt;

&lt;p&gt;1.1.1 Using NuGet Package Manager&lt;/p&gt;

&lt;p&gt;1- Right click on project name -&amp;gt; Select Manage NuGet Package&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rxAB4OY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkctcfwvh7gkpelb5kvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rxAB4OY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkctcfwvh7gkpelb5kvc.png" alt="" width="623" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- From browser tab -&amp;gt; search for IronPdf -&amp;gt; Install&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LkFjl2JK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yxxsexukd4dxdmto8x2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LkFjl2JK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yxxsexukd4dxdmto8x2.png" alt="" width="623" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Click Ok&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JexnF9Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iey1ed0oknxqnl9n8bih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JexnF9Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iey1ed0oknxqnl9n8bih.png" alt="" width="335" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Done!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6KM0H9hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74jifln7wtsn4n0cx1cj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KM0H9hp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74jifln7wtsn4n0cx1cj.png" alt="" width="623" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.1.2 Using NuGet Package Console manager&lt;/p&gt;

&lt;p&gt;1- From Tools -&amp;gt; NuGet Package Manager -&amp;gt; Package Manager Console&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkGuVt-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5yfq5vr2uxj63y23nsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkGuVt-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5yfq5vr2uxj63y23nsr.png" alt="" width="623" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Run command -&amp;gt; Install-Package IronPdf&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaKvwA-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12b9d9fss34i4tn5vq8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaKvwA-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12b9d9fss34i4tn5vq8y.png" alt="" width="561" height="366"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;How To Tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-convert-website-to-pdf"&gt;
  &lt;/a&gt;
  2. Convert Website to PDF
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Sample: ConvertUrlToPdf console application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow these steps to create a new Asp.NET MVC Project&lt;/p&gt;

&lt;p&gt;1- Open Visual Studio&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNJn2Q_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kffdxa3wqqwg2eigabsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNJn2Q_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kffdxa3wqqwg2eigabsg.png" alt="" width="326" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Choose Create new project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xfkpyL_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sell7q5vp8cp0vats6ax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xfkpyL_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sell7q5vp8cp0vats6ax.png" alt="" width="291" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Choose Console App (.NET Core)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCZ_8_aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr5krrmqplmtewbs9qza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCZ_8_aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr5krrmqplmtewbs9qza.png" alt="" width="369" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Give our sample name "ConvertUrlToPdf" and click create&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zRXOLtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghdb5ahocoxn4k56hey4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zRXOLtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghdb5ahocoxn4k56hey4.png" alt="" width="623" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5- Now we have a console application created&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfycdLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehq5v5gwdluzyanxrf7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfycdLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehq5v5gwdluzyanxrf7w.png" alt="" width="623" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6- Add IronPdf -&amp;gt; click install&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMzE29Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvpv94f7s7qac9ii9rc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMzE29Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvpv94f7s7qac9ii9rc.png" alt="" width="623" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSJXSpcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu63mogmw3q8c00bbx3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSJXSpcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu63mogmw3q8c00bbx3x.png" alt="" width="358" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7- Add our first few lines that render a Wikipedia website main page to PDF&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Render URL to PDF
anchor-convert-website-to-pdf
**/
static void Main(string[] args)
{
  Console.WriteLine("Hello World!");
  var render = new IronPdf.ChromePdfRenderer();
  var doc = render.RenderUrlAsPdf("https://www.wikipedia.org/");
  doc.SaveAs("wiki.pdf");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Render URL to PDF
'''anchor-convert-website-to-pdf
'''*
Shared Sub Main(ByVal args() As String)
  Console.WriteLine("Hello World!")
  Dim render = New IronPdf.ChromePdfRenderer()
  Dim doc = render.RenderUrlAsPdf("https://www.wikipedia.org/")
  doc.SaveAs("wiki.pdf")
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8- Run and check created file wiki.pdf&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q98o2f5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2eckvezyt91awkx09kk7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q98o2f5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2eckvezyt91awkx09kk7.png" alt="" width="635" height="474"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-convert-net-core-html-to-pdf"&gt;
  &lt;/a&gt;
  3. Convert .NET Core HTML to PDF
&lt;/h1&gt;

&lt;p&gt;**Sample: ConvertHTMLtoPdf Console application&lt;/p&gt;

&lt;p&gt;To render HTML to PDF we have two ways:&lt;br&gt;
1- Write HTML into string then render it&lt;br&gt;
2- Write HTML into file and pass it path to IronPDF to render it&lt;/p&gt;

&lt;p&gt;Rendering the HTML string sample code will look like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
NET Core HTML to PDF
anchor-convert-net-core-html-to-pdf
**/
static void Main(string[] args)
{
  var render = new IronPdf.ChromePdfRenderer();
  var doc = render.RenderHtmlAsPdf("&amp;lt;h1&amp;gt;Hello IronPdf&amp;lt;/h1&amp;gt;");
  doc.SaveAs("HtmlString.pdf");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''NET Core HTML to PDF
'''anchor-convert-net-core-html-to-pdf
'''*
Shared Sub Main(ByVal args() As String)
  Dim render = New IronPdf.ChromePdfRenderer()
  Dim doc = render.RenderHtmlAsPdf("&amp;lt;h1&amp;gt;Hello IronPdf&amp;lt;/h1&amp;gt;")
  doc.SaveAs("HtmlString.pdf")
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the resulting PDF will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNtkyJ9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tux62b77nhm7vpqzq8wf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNtkyJ9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tux62b77nhm7vpqzq8wf.png" alt="" width="623" height="361"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-convert-mvc-view-to-pdf"&gt;
  &lt;/a&gt;
  4. Convert MVC View to PDF
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Sample: TicketsApps .NET Core MVC Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s implement this real life example. I chose an online ticketing site. You open the site, and navigate to book ticket, then fill in the required information, and then you get your copy as a downloadable PDF file.&lt;/p&gt;

&lt;p&gt;We will go through these steps: -&lt;br&gt;
1- Create client object model&lt;br&gt;
2- Create client services (add, view)&lt;br&gt;
3- Add pages (register, view)&lt;br&gt;
4- Download PDF ticket&lt;/p&gt;

&lt;p&gt;So now, I will start by creating the client object model.&lt;/p&gt;

&lt;p&gt;1- Choose ASP.NET core web applications&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kiZQYbIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diu0ql0p3y8g6g33o7rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kiZQYbIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diu0ql0p3y8g6g33o7rd.png" alt="" width="296" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Name the project "TicketsApps"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SMmfL2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhru1l2kzdqle3yy7oz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SMmfL2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhru1l2kzdqle3yy7oz8.png" alt="" width="382" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Choose “.NET Core”, “ASP.NET core 3.1” , “Web Application (Model-View-Controller)”, check enable Docker, and choose Linux Image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eed_xG7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3w6jhk41a5akrwuvmz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eed_xG7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3w6jhk41a5akrwuvmz4.png" alt="" width="446" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Now it's ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G4bpiGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8sxlmxdwe3lz8bugk6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G4bpiGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8sxlmxdwe3lz8bugk6z.png" alt="" width="531" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5- Right click on models' folders, choose to add class&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK7EFf9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4itkooks65pu03yp2e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK7EFf9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4itkooks65pu03yp2e2.png" alt="" width="456" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6- Name the model "ClientModel" then click add&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUq9gQdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd51jmbs6v9yk7o8ts7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUq9gQdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd51jmbs6v9yk7o8ts7i.png" alt="" width="430" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7- Add to ClientModel the attributes name, phone, and email, and make them all required by adding required an attribute over them as follows&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
MVC View to PDF
anchor-convert-mvc-view-to-pdf
**/
public class ClientModel
{
[Required]
public string Name { get; set; }
[Required]
public string Phone { get; set; }
[Required]
public string Email { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''MVC View to PDF
'''anchor-convert-mvc-view-to-pdf
'''*
Public Class ClientModel
&amp;lt;Required&amp;gt;
Public Property Name() As String
&amp;lt;Required&amp;gt;
Public Property Phone() As String
&amp;lt;Required&amp;gt;
Public Property Email() As String
End Class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8- Step 2, add services&lt;br&gt;
   a. Create folder and with the name “services”&lt;br&gt;
   b. Then add class with the name “ClientServices”&lt;br&gt;
   c. Add static object of type “ClientModel” to use it as a &lt;br&gt;
   repository&lt;br&gt;
   d. Add two functions, one for saving client to repository, and &lt;br&gt;
   the second to get saved clients&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
MVC PDF Add Class
anchor-convert-mvc-view-to-pdf
**/
public class ClientServices
{
  private static ClientModel _clientModel;
    public static void AddClient(ClientModel clientModel)
    {
      _clientModel = clientModel;
    }
    public static ClientModel GetClient()
    {
      return _clientModel;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''MVC PDF Add Class
'''anchor-convert-mvc-view-to-pdf
'''*
Public Class ClientServices
  Private Shared _clientModel As ClientModel
    Public Shared Sub AddClient(ByVal clientModel As ClientModel)
      _clientModel = clientModel
    End Sub
    Public Shared Function GetClient() As ClientModel
      Return _clientModel
    End Function
End Class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9- Step three, the book your ticket page&lt;/p&gt;

&lt;p&gt;10- From solution explorer, right click over controller folder, choose add, then choose controller&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26RrGnad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s4i67gywc1rr0h0w8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26RrGnad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s4i67gywc1rr0h0w8x.png" alt="" width="448" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11- Name it BookTicketController&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9gwYW5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ch11n2nwwziklcy64gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9gwYW5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ch11n2nwwziklcy64gk.png" alt="" width="734" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12- Right click on index function(or as we called it action) and choose add view to add HTML&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiblL1k6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um2f8mxxde8jnwcxber4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiblL1k6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um2f8mxxde8jnwcxber4.png" alt="" width="421" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13- Set view name "index", then click add&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQRVZyvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fazxwz7a88e2ww6gq67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQRVZyvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fazxwz7a88e2ww6gq67.png" alt="" width="736" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;14- Using the mouse right click over folder views -&amp;gt; Home, and select home&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDMIodpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbp0msnbewojymb6cypa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDMIodpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbp0msnbewojymb6cypa.png" alt="" width="467" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;15- Add index view&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpBYNZUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsbrxab4b7f2yf2s5vl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpBYNZUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsbrxab4b7f2yf2s5vl2.png" alt="Image description" width="734" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;16- Update the HTML as follows&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
MVC PDF Example
anchor-convert-mvc-view-to-pdf
**/
@model IronPdfMVCHelloWorld.Models.ClientModel
@{
  ViewBag.Title = "Book Ticket";
}
&amp;lt;h2&amp;gt;Index&amp;lt;/h2&amp;gt;
@using (Html.BeginForm())
{
  &amp;lt;div class="form-horizontal"&amp;gt;
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    &amp;lt;div class="form-group"&amp;gt;
      @Html.LabelFor(model =&amp;gt; model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
      &amp;lt;div class="col-md-10"&amp;gt;
        @Html.EditorFor(model =&amp;gt; model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model =&amp;gt; model.Name, "", new { @class = "text-danger" })
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="form-group"&amp;gt;
      @Html.LabelFor(model =&amp;gt; model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
      &amp;lt;div class="col-md-10"&amp;gt;
        @Html.EditorFor(model =&amp;gt; model.Phone, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model =&amp;gt; model.Phone, "", new { @class = "text-danger" })
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="form-group"&amp;gt;
      @Html.LabelFor(model =&amp;gt; model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
      &amp;lt;div class="col-md-10"&amp;gt;
        @Html.EditorFor(model =&amp;gt; model.Email, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model =&amp;gt; model.Email, "", new { @class = "text-danger" })
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="form-group"&amp;gt;
      &amp;lt;div class="col-md-10 pull-right"&amp;gt;
        &amp;lt;button type="submit" value="Save" class="btn btn-sm"&amp;gt;
          &amp;lt;i class="fa fa-plus"&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;span&amp;gt;
            Save
          &amp;lt;/span&amp;gt;
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''MVC PDF Example
'''anchor-convert-mvc-view-to-pdf
'''*
model ReadOnly Property () As IronPdfMVCHelloWorld.Models.ClientModel
  ViewBag.Title = "Book Ticket"
End Property
'INSTANT VB TODO TASK: The following line could not be converted:
(Of h2) Index&amp;lt;/h2&amp;gt; [using](Html.BeginForm())
If True Then
'INSTANT VB TODO TASK: The following line uses invalid syntax:
'  &amp;lt;div class="form-horizontal"&amp;gt; @Html.ValidationSummary(True, "", New { @class = "text-danger" }) &amp;lt;div class="form-group"&amp;gt; @Html.LabelFor(model =&amp;gt; model.Name, htmlAttributes: New { @class = "control-label col-md-2" }) &amp;lt;div class="col-md-10"&amp;gt; @Html.EditorFor(model =&amp;gt; model.Name, New { htmlAttributes = New { @class = "form-control" } }) @Html.ValidationMessageFor(model =&amp;gt; model.Name, "", New { @class = "text-danger" }) &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="form-group"&amp;gt; @Html.LabelFor(model =&amp;gt; model.Phone, htmlAttributes: New { @class = "control-label col-md-2" }) &amp;lt;div class="col-md-10"&amp;gt; @Html.EditorFor(model =&amp;gt; model.Phone, New { htmlAttributes = New { @class = "form-control" } }) @Html.ValidationMessageFor(model =&amp;gt; model.Phone, "", New { @class = "text-danger" }) &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="form-group"&amp;gt; @Html.LabelFor(model =&amp;gt; model.Email, htmlAttributes: New { @class = "control-label col-md-2" }) &amp;lt;div class="col-md-10"&amp;gt; @Html.EditorFor(model =&amp;gt; model.Email, New { htmlAttributes = New { @class = "form-control" } }) @Html.ValidationMessageFor(model =&amp;gt; model.Email, "", New { @class = "text-danger" }) &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="form-group"&amp;gt; &amp;lt;div class="col-md-10 pull-right"&amp;gt; &amp;lt;button type="submit" value="Save" class="btn btn-sm"&amp;gt; &amp;lt;i class="fa fa-plus"&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span&amp;gt; Save &amp;lt;/span&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;17- Add a link to BookTicket Page to enable our website visitors to navigate to our new booking page by updating layout in existing path (view-&amp;gt; shared-&amp;gt; layout.chtml)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link text-dark"&lt;/span&gt; &lt;span class="na"&gt;asp-area=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"BookTicket"&lt;/span&gt; &lt;span class="na"&gt;aspaction=&lt;/span&gt;&lt;span class="s"&gt;"Index"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Book Ticket&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;18- The result should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWw2cnRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0yz848fcgi9r1608k8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWw2cnRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0yz848fcgi9r1608k8j.png" alt="" width="646" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;19- Navigate to the book ticket page by clicking on its link. You should find that it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyN_Ru0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36iwfpmzn0ndrji2a0c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyN_Ru0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36iwfpmzn0ndrji2a0c4.png" alt="" width="514" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;20- Now let’s add the action that will validate and save the booking information&lt;/p&gt;

&lt;p&gt;21- Add another index action with the attribute [HttpPost] to inform the MVC engine that this action is for submitting data. I validate the sent model, and if it's valid the code will redirect the visitor to TicketView Page. If it's not valid, the visitor will receive error validation messages on screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
MVC PDF Add HTTPPost
anchor-convert-mvc-view-to-pdf
**/
[HttpPost]
public ActionResult Index(ClientModel model)
{
  if (ModelState.IsValid)
  {
    ClientServices.AddClient(model);
    Return RedirectToAction("TicketView");
  }
  return View(model);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''MVC PDF Add HTTPPost
'''anchor-convert-mvc-view-to-pdf
'''*
&amp;lt;HttpPost&amp;gt;
Public Function Index(ByVal model As ClientModel) As ActionResult
  If ModelState.IsValid Then
    ClientServices.AddClient(model)
    [Return] RedirectToAction("TicketView")
  End If
  Return View(model)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sample of error messages&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8G8oLl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwgiunx8gm6von46y62z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8G8oLl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwgiunx8gm6von46y62z.png" alt="" width="454" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;22- Add TicketView to display our ticket&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public ActionResult TicketView()
{
  var ticket = ClientServices.GetClient();
  return View(ticket);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Public Function TicketView() As ActionResult
  Dim ticket = ClientServices.GetClient()
  Return View(ticket)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;23- Add its view&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvSj2R49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vpgi55bogrop15kxzdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvSj2R49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vpgi55bogrop15kxzdy.png" alt="" width="734" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;24- This view will host a Ticket partial view that is responsible to display the ticket and will be used later to print Ticket&lt;/p&gt;

&lt;p&gt;25- Add ticket model&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjbQtiSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el9r8ibt0kcbq8w6oegn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjbQtiSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el9r8ibt0kcbq8w6oegn.png" alt="" width="459" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;26- Use the Ticket model code as follows&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class TicketModel : ClientModel
{
  public int TicketNumber { get; set; }
  public DateTime TicketDate { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Public Class TicketModel
    Inherits ClientModel
  Public Property TicketNumber() As Integer
  Public Property TicketDate() As DateTime
End Class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;27- Add IronPDF to project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFz9NLBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s874slwvcmdytwcbppuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFz9NLBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s874slwvcmdytwcbppuv.png" alt="" width="623" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;28- Click OK&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_Qks3xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahpaqkuvm6ycz0x80z4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_Qks3xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahpaqkuvm6ycz0x80z4o.png" alt="" width="375" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;29- Add the TicketView post method that will handle the download button&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[HttpPost]
public ActionResult TicketView(TicketModel model)
{
  IronPdf.Installation.TempFolderPath = $@"{_host.ContentRootPath}/irontemp/";
  IronPdf.Installation.LinuxAndDockerDependenciesAutoConfig = true;
  var html = this.RenderViewAsync("_TicketPdf", model);
  var ironPdfRender = new IronPdf.ChromePdfRenderer();
  var pdfDoc = ironPdfRender.RenderHtmlAsPdf(html.Result);
  return File(pdfDoc.Stream.ToArray(), "application/pdf");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;HttpPost&amp;gt;
Public Function TicketView(ByVal model As TicketModel) As ActionResult
  IronPdf.Installation.TempFolderPath = $"{_host.ContentRootPath}/irontemp/"
  IronPdf.Installation.LinuxAndDockerDependenciesAutoConfig = True
  Dim html = Me.RenderViewAsync("_TicketPdf", model)
  Dim ironPdfRender = New IronPdf.ChromePdfRenderer()
  Dim pdfDoc = ironPdfRender.RenderHtmlAsPdf(html.Result)
  Return File(pdfDoc.Stream.ToArray(), "application/pdf")
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;30- Add the controller extension that will render partial view to string&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfvcJebi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmb03dpimhpqvcgy9azi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfvcJebi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmb03dpimhpqvcgy9azi.png" alt="" width="527" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;31- Use the Extension code as follows&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
MVC Partial View to String
anchor-convert-mvc-view-to-pdf
**/
public static class ControllerExtensions
{
  public static async Task&amp;lt;string&amp;gt; RenderViewAsync&amp;lt;TModel&amp;gt;(this Controller controller, string viewName, TModel model, bool partial = false)
  {
    if (string.IsNullOrEmpty(viewName))
    {
      viewName = controller.ControllerContext.ActionDescriptor.ActionName;
    }
    controller.ViewData.Model = model;
    using (var writer = new StringWriter())
    {
      IViewEngine viewEngine = controller.HttpContext.RequestServices.GetService(typeof(ICompositeViewEngine)) as ICompositeViewEngine;
      ViewEngineResult viewResult = viewEngine.FindView(controller.ControllerContext, viewName, !partial);
      if (viewResult.Success == false)
      {
        return $"A view with the name {viewName} could not be found";
      }
      ViewContext viewContext = new ViewContext(controller.ControllerContext, viewResult.View, controller.ViewData, controller.TempData, writer, new HtmlHelperOptions());
      await viewResult.View.RenderAsync(viewContext);
      return writer.GetStringBuilder().ToString();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''MVC Partial View to String
'''anchor-convert-mvc-view-to-pdf
'''*
Public Module ControllerExtensions
'INSTANT VB TODO TASK: The following line could not be converted:
  public static async Task(Of String) RenderViewAsync(Of TModel)(Me Controller controller, String viewName, TModel model, Boolean partial = False)
  If True Then
    If String.IsNullOrEmpty(viewName) Then
      viewName = controller.ControllerContext.ActionDescriptor.ActionName
    End If
    controller.ViewData.Model = model
    Using writer = New StringWriter()
      Dim viewEngine As IViewEngine = TryCast(controller.HttpContext.RequestServices.GetService(GetType(ICompositeViewEngine)), ICompositeViewEngine)
      Dim viewResult As ViewEngineResult = viewEngine.FindView(controller.ControllerContext, viewName, Not partial)
      If viewResult.Success = False Then
        Return $"A view with the name {viewName} could not be found"
      End If
      Dim viewContext As New ViewContext(controller.ControllerContext, viewResult.View, controller.ViewData, controller.TempData, writer, New HtmlHelperOptions())
      Await viewResult.View.RenderAsync(viewContext)
      Return writer.GetStringBuilder().ToString()
    End Using
  End If
End Module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;32- Run and file ticket information, then click save&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etzCPAuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/625zrokcib04i4picc16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etzCPAuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/625zrokcib04i4picc16.png" alt="" width="477" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;33- View ticket&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2MXr3qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rpx9wig7b1urskis1lj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2MXr3qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rpx9wig7b1urskis1lj.png" alt="" width="546" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;34- To download the ticket as PDF, click download. You will get a PDF containing the ticket.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#5-net-pdf-render-options-chart"&gt;
  &lt;/a&gt;
  5. .NET PDF Render Options Chart
&lt;/h1&gt;

&lt;p&gt;We have some advanced options that define PDF-rendering options like adjusting margins, paper orientation, paper size, and more.&lt;/p&gt;

&lt;p&gt;Below is a table to illustrate the many different options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1Evfy49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnvjogf211uibpz5ikd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1Evfy49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnvjogf211uibpz5ikd.png" alt="Table 1" width="874" height="1558"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yV02U5Yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b8t7lbvydz4ew5a27rn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yV02U5Yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b8t7lbvydz4ew5a27rn.png" alt="Table 1.2" width="871" height="1642"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#6-net-pdf-header-footer-options-chart"&gt;
  &lt;/a&gt;
  6. .NET PDF Header Footer Options Chart
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bYT6o_LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xah4j1sn97eg53v8bq35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYT6o_LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xah4j1sn97eg53v8bq35.png" alt="Table 2" width="880" height="929"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#7-apply-pdf-printing-rendering-options"&gt;
  &lt;/a&gt;
  7. Apply PDF Printing (Rendering) Options
&lt;/h1&gt;

&lt;p&gt;Let us try to configure our PDF rendering options&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
PDF Print Option
anchor-apply-pdfprintoption
**/
var Renderer = new ChromePdfRenderer();
Renderer.RenderingOptions.PaperSize = IronPdf.Rendering.PdfPaperSize.A4;
Renderer.RenderingOptions.PaperOrientation = IronPdf.Rendering.PdfPaperOrientation.Portrait;
pdf.RenderHTMLFileAsPdf(@"testFile.html").SaveAs("GeneratedFile.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''PDF Print Option
'''anchor-apply-pdfprintoption
'''*
Dim Renderer = New ChromePdfRenderer()
Renderer.RenderingOptions.PaperSize = IronPdf.Rendering.PdfPaperSize.A4
Renderer.RenderingOptions.PaperOrientation = IronPdf.Rendering.PdfPaperOrientation.Portrait
pdf.RenderHTMLFileAsPdf("testFile.html").SaveAs("GeneratedFile.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#8-docker-net-core-applications"&gt;
  &lt;/a&gt;
  8. Docker .NET Core Applications
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#81-what-is-docker"&gt;
  &lt;/a&gt;
  8.1 What is Docker?
&lt;/h2&gt;

&lt;p&gt;Docker is a set of platform as service products that uses OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://docs.docker.com/engine/examples/dotnetcore/" rel="nofollow"&gt;Docker and ASP.NET Core application&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;We'll skip ahead to working with Docker, but if you want to learn more, there's a great introduction to &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/docker/introduction" rel="nofollow"&gt;.NET and Docker here&lt;/a&gt;. and even more about how to &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/docker/build-container" rel="nofollow"&gt;build containers for .NET core app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started with Docker together.&lt;/p&gt;

&lt;p&gt;Visit to the Docker website here to &lt;a href="https://www.docker.com/" rel="nofollow"&gt;install Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NyJW2qcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tpynm4b6fz6vukjtx5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NyJW2qcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tpynm4b6fz6vukjtx5h.png" alt="" width="502" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click get started&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0nTaLuF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oebmmdhu0op92dqesrqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0nTaLuF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oebmmdhu0op92dqesrqf.png" alt="" width="482" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click download for Mac and Windows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPfVZwYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7ldy1s60h2a9ieprn4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPfVZwYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7ldy1s60h2a9ieprn4q.png" alt="" width="488" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Signup for free, then login.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vej3OVmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvtcv0mf02wqcxjdf07k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vej3OVmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvtcv0mf02wqcxjdf07k.png" alt="" width="469" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download Docker for Windows&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euHDLY72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtlvms86ey831hjl6zfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euHDLY72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtlvms86ey831hjl6zfe.png" alt="" width="492" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start installing Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qqm86a3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjwz37abz1tjmh4upoz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qqm86a3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjwz37abz1tjmh4upoz4.png" alt="" width="484" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will require a restart. After your machine restarts, login to Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tn05TnpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyjsyac4o1w5kywn6v8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tn05TnpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyjsyac4o1w5kywn6v8s.png" alt="" width="447" height="792"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can run Docker "hello world" by opening the Windows command line or PowerShell script and write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Docker run hello-world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScMEOlYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqqoeeetvxeuz4zte1eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScMEOlYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqqoeeetvxeuz4zte1eu.png" alt="" width="623" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a list of the most important command lines to help you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker images =&amp;gt; To list all available images on this machine&lt;/li&gt;
&lt;li&gt;Docker ps =&amp;gt; to list all running containers&lt;/li&gt;
&lt;li&gt;Docker ps –a =&amp;gt; to list all containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#83-run-into-linux-container"&gt;
  &lt;/a&gt;
  8.3 Run into Linux container
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZtcHUmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tm8e1bkl6xwd9860p8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZtcHUmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tm8e1bkl6xwd9860p8t.png" alt="" width="565" height="327"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDY7KiTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8et9dnqri13w07k2zmdv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDY7KiTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8et9dnqri13w07k2zmdv.png" alt="" width="565" height="146"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#9-work-with-existing-pdf-documents"&gt;
  &lt;/a&gt;
  9. Work with Existing PDF Documents
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#91-open-existing-pdf"&gt;
  &lt;/a&gt;
  9.1 Open Existing PDF
&lt;/h2&gt;

&lt;p&gt;As you can create a PDF from URL and HTML (text or file), you can also work with existing PDF documents.&lt;/p&gt;

&lt;p&gt;The following is an example to open either a normal PDF or encrypted PDF with a password&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Open Existing PDF
anchor-work-with-existing-pdf-documents
**/
var pdf = PdfDocument.FromFile(“testFile.pdf");
// to open an encrypted pdf
var pdf = PdfDocument.FromFile(“testFile2.pdf" ,"MyPassword");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Open Existing PDF
'''anchor-work-with-existing-pdf-documents
'''*
Dim pdf = PdfDocument.FromFile("testFile.pdf")
' to open an encrypted pdf
Dim pdf = PdfDocument.FromFile("testFile2.pdf","MyPassword")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#92-merge-multiple-pdfs"&gt;
  &lt;/a&gt;
  9.2 Merge Multiple PDFs
&lt;/h2&gt;

&lt;p&gt;You can merge multiple PDFs into one single PDF as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Merge Multiple PDFs
anchor-merge-multiple-pdfs
**/
var PDFs = new List&amp;lt;PdfDocument&amp;gt;();
PDFs.Add(PdfDocument.FromFile("1.pdf"));
PDFs.Add(PdfDocument.FromFile("2.pdf"));
PDFs.Add(PdfDocument.FromFile("3.pdf"));
PdfDocument PDF = PdfDocument.Merge(PDFs);
PDF.SaveAs("mergedFile.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Merge Multiple PDFs
'''anchor-merge-multiple-pdfs
'''*
Dim PDFs = New List(Of PdfDocument)()
PDFs.Add(PdfDocument.FromFile("1.pdf"))
PDFs.Add(PdfDocument.FromFile("2.pdf"))
PDFs.Add(PdfDocument.FromFile("3.pdf"))
Dim PDF As PdfDocument = PdfDocument.Merge(PDFs)
PDF.SaveAs("mergedFile.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Append another PDF to the end of the current PDF as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Add Page to PDF
anchor-merge-multiple-pdfs
**/
var pdf = PdfDocument.FromFile("1.pdf");
var pdf2 = PdfDocument.FromFile("2.pdf");
pdf.AppendPdf(pdf2);
pdf.SaveAs("appendedFile.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Add Page to PDF
'''anchor-merge-multiple-pdfs
'''*
Dim pdf = PdfDocument.FromFile("1.pdf")
Dim pdf2 = PdfDocument.FromFile("2.pdf")
pdf.AppendPdf(pdf2)
pdf.SaveAs("appendedFile.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Insert a PDF into another PDF starting with given index&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var pdf = PdfDocument.FromFile("1.pdf");
var pdf2 = PdfDocument.FromFile("2.pdf");
pdf.InsertPdf(pdf2, 0);
pdf.SaveAs("InsertIntoSpecificIndex.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dim pdf = PdfDocument.FromFile("1.pdf")
Dim pdf2 = PdfDocument.FromFile("2.pdf")
pdf.InsertPdf(pdf2, 0)
pdf.SaveAs("InsertIntoSpecificIndex.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#93-add-headers-or-footers"&gt;
  &lt;/a&gt;
  9.3 Add Headers or Footers
&lt;/h2&gt;

&lt;p&gt;You can add headers and footers to an existing PDF or when you render the PDF from HTML or URL.&lt;/p&gt;

&lt;p&gt;There are two classes you can use to add header or footer to a PDF&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SimpleHeaderFooter: this class to add simple text in header or footer.&lt;/li&gt;
&lt;li&gt;HtmlHeaderFooter: this class to add header or footer with rich HTML content and images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let us see two examples of how to add header/footer to existing pdf or when it is rendered using these two classes&lt;/p&gt;

&lt;p&gt;9.3.1 Add header to existing pdf&lt;br&gt;
      Below is an example to load an existing PDF, then add a &lt;br&gt;
      header and footer using AddHeaders() , AddFooters() methods&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Add Headers Footers
anchor-add-headers-or-footers
**/
var pdf = PdfDocument.FromFile("testFile.pdf");
var header = new TextHeaderFooter()
{
  CenterText="Pdf Header",
  LeftText= "{date} {time}",
  RightText ="{page} of {total-pages}",
  DrawDividerLine =true,
  FontSize=10
};
pdf.AddHeaders(header);
pdf.SaveAs("withHeader.pdf");
var Footer = new HtmlHeaderFooter()
{
  HtmlFragment= "&amp;lt;span style='text-align:right'&amp;gt; page {page} of {totalpages}&amp;lt;/span&amp;gt;",
  DrawDividerLine=true,
  FontSize=15,
  MaxHeight=10 //mm
};
pdf.AddFooters(Footer);
pdf.SaveAs("withHeaderAndFooters.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Add Headers Footers
'''anchor-add-headers-or-footers
'''*
Dim pdf = PdfDocument.FromFile("testFile.pdf")
Dim header = New TextHeaderFooter() With {
    .CenterText="Pdf Header",
    .LeftText= "{date} {time}",
    .RightText ="{page} of {total-pages}",
    .DrawDividerLine =True,
    .FontSize=10
}
pdf.AddHeaders(header)
pdf.SaveAs("withHeader.pdf")
Dim Footer = New HtmlHeaderFooter() With {
    .HtmlFragment= "&amp;lt;span style='text-align:right'&amp;gt; page {page} of {totalpages}&amp;lt;/span&amp;gt;",
    .DrawDividerLine=True,
    .FontSize=15,
    .MaxHeight=10
}
pdf.AddFooters(Footer)
pdf.SaveAs("withHeaderAndFooters.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9.3.2 Add header and footer to new pdf&lt;br&gt;
   Here is an example to create a PDF from HTML file and add a &lt;br&gt;
   header and footer to it using print options&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var renderer = new ChromePdfRenderer();
renderer.RenderingOptions.Header= new TextHeaderFooter()
{
  CenterText="Pdf Header",
  LeftText= "{date} {time}",
  RightText ="{page} of {total-pages}",
  DrawDividerLine =true,
  FontSize=10
};
renderer.RenderingOptions.Footer = new HtmlHeaderFooter()
{
  HtmlFragment= "&amp;lt;span style='text-align:right'&amp;gt; page {page} of {totalpages}&amp;lt;/span&amp;gt;",
  DrawDividerLine=true,
  FontSize=15,
  MaxHeight=10
};
var pdf = renderer.RenderHTMLFileAsPdf("test.html");
pdf.SaveAs("generatedFile.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dim renderer = New ChromePdfRenderer()
renderer.RenderingOptions.Header= New TextHeaderFooter() With {
    .CenterText="Pdf Header",
    .LeftText= "{date} {time}",
    .RightText ="{page} of {total-pages}",
    .DrawDividerLine =True,
    .FontSize=10
}
renderer.RenderingOptions.Footer = New HtmlHeaderFooter() With {
    .HtmlFragment= "&amp;lt;span style='text-align:right'&amp;gt; page {page} of {totalpages}&amp;lt;/span&amp;gt;",
    .DrawDividerLine=True,
    .FontSize=15,
    .MaxHeight=10
}
Dim pdf = renderer.RenderHTMLFileAsPdf("test.html")
pdf.SaveAs("generatedFile.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#10-add-pdf-password-and-security"&gt;
  &lt;/a&gt;
  10. Add PDF Password and Security
&lt;/h1&gt;

&lt;p&gt;You can secure your PDF with a password and edit file security settings like prevent copying and printing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Add Password Security
anchor-add-pdf-password-and-security
**/
PdfDocument Pdf = PdfDocument.FromFile("testFile.pdf");
//Edit file metadata
Pdf.MetaData.Author = "john smith";
Pdf.MetaData.Keywords = "SEO, Friendly";
Pdf.MetaData.ModifiedDate = DateTime.Now;
//Edit file security settings
//The following code makes a PDF read only and will disallow copy &amp;amp; paste and
printing
Pdf.SecuritySettings.RemovePasswordsAndEncryption();
Pdf.SecuritySettings.MakePdfDocumentReadOnly("secret-key"); //secret-key is a owner
password
Pdf.SecuritySettings.AllowUserAnnotations = false;
Pdf.SecuritySettings.AllowUserCopyPasteContent = false;
Pdf.SecuritySettings.AllowUserFormData = false;
Pdf.SecuritySettings.AllowUserPrinting =
PdfDocument.PdfSecuritySettings.PdfPrintSecrity.FullPrintRights;
//Change or set the document ecrpytion password
Pdf.Password = "123";
Pdf.SaveAs("secured.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Add Password Security
'''anchor-add-pdf-password-and-security
'''*
Dim Pdf As PdfDocument = PdfDocument.FromFile("testFile.pdf")
'Edit file metadata
Pdf.MetaData.Author = "john smith"
Pdf.MetaData.Keywords = "SEO, Friendly"
Pdf.MetaData.ModifiedDate = DateTime.Now
'Edit file security settings
'The following code makes a PDF read only and will disallow copy &amp;amp; paste and
printing Pdf.SecuritySettings.RemovePasswordsAndEncryption()
Pdf.SecuritySettings.MakePdfDocumentReadOnly("secret-key") 'secret-key is a owner
password Pdf.SecuritySettings.AllowUserAnnotations = False
Pdf.SecuritySettings.AllowUserCopyPasteContent = False
Pdf.SecuritySettings.AllowUserFormData = False
Pdf.SecuritySettings.AllowUserPrinting = PdfDocument.PdfSecuritySettings.PdfPrintSecrity.FullPrintRights
'Change or set the document ecrpytion password
Pdf.Password = "123"
Pdf.SaveAs("secured.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#digitally-sign-pdfs"&gt;
  &lt;/a&gt;
  Digitally Sign PDFs
&lt;/h1&gt;

&lt;p&gt;You can also digitally sign a PDF as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Digitally Sign PDF
anchor-digitally-sign-pdfs
**/
PdfDocument Pdf = PdfDocument.FromFile("testFile.pdf");
Pdf.QuickSignPdfWithDigitalSignatureFile("cert123.pfx", "123");
Pdf.SaveAs("signed.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Digitally Sign PDF
'''anchor-digitally-sign-pdfs
'''*
Dim Pdf As PdfDocument = PdfDocument.FromFile("testFile.pdf")
Pdf.QuickSignPdfWithDigitalSignatureFile("cert123.pfx", "123")
Pdf.SaveAs("signed.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advanced example for more control:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Advanced Digitally Sign
anchor-digitally-sign-pdfs
**/
PdfDocument Pdf = PdfDocument.FromFile("testFile.pdf");
var signature = new IronPdf.PdfSignature("cert123.pfx", "123");
//Optional signing options and a handwritten signature graphic
signature.SigningContact = "support@ironsoftware.com";
signature.SigningLocation = "Chicago, USA";
signature.SigningReason = "To show how to sign a PDF";
signature.LoadSignatureImageFromFile("handwriting.jpg");
//Sign the PDF with the PdfSignature. Multiple signing certificates may be used
Pdf.SignPdfWithDigitalSignature(
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Advanced Digitally Sign
'''anchor-digitally-sign-pdfs
'''*
Dim Pdf As PdfDocument = PdfDocument.FromFile("testFile.pdf")
Dim signature = New IronPdf.PdfSignature("cert123.pfx", "123")
'Optional signing options and a handwritten signature graphic
signature.SigningContact = "support@ironsoftware.com"
signature.SigningLocation = "Chicago, USA"
signature.SigningReason = "To show how to sign a PDF"
signature.LoadSignatureImageFromFile("handwriting.jpg")
'Sign the PDF with the PdfSignature. Multiple signing certificates may be used
'INSTANT VB TODO TASK: The following line uses invalid syntax:
'Pdf.SignPdfWithDigitalSignature(
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#12-extract-text-and-images-from-pdf"&gt;
  &lt;/a&gt;
  12. Extract Text and Images from PDF
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Extract text and images&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using IronPdf you can extract text and images from a PDF as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Extract Text and Images
anchor-extract-text-and-images-from-pdf
**/
PdfDocument Pdf = PdfDocument.FromFile("testFile.pdf");
Pdf.ExtractAllText(); //to extract all text in the pdf
Pdf.ExtractTextFromPage(0); //to read text from specific page
//to extract all images in the pdf
IEnumerable&amp;lt;System.Drawing.Image&amp;gt; AllImages = Pdf.ExtractAllImages();
//to extract images from specific page
IEnumerable&amp;lt;System.Drawing.Image&amp;gt; ImagesOfAPage= Pdf.ExtractImagesFromPage(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Extract Text and Images
'''anchor-extract-text-and-images-from-pdf
'''*
Dim Pdf As PdfDocument = PdfDocument.FromFile("testFile.pdf")
Pdf.ExtractAllText() 'to extract all text in the pdf
Pdf.ExtractTextFromPage(0) 'to read text from specific page
'to extract all images in the pdf
Dim AllImages As IEnumerable(Of System.Drawing.Image) = Pdf.ExtractAllImages()
'to extract images from specific page
Dim ImagesOfAPage As IEnumerable(Of System.Drawing.Image)= Pdf.ExtractImagesFromPage(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#21-rasterize-pdf-to-image"&gt;
  &lt;/a&gt;
  2.1 Rasterize PDF to Image
&lt;/h2&gt;

&lt;p&gt;You can also convert PDF pages to images as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Rasterize PDF to Image
anchor-extract-text-and-images-from-pdf
**/
PdfDocument Pdf = PdfDocument.FromFile("testFile.pdf");
List&amp;lt;int&amp;gt; pageList = new List&amp;lt;int&amp;gt;() { 1,2};
Pdf.RasterizeToImageFiles("*.png", pageList);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Rasterize PDF to Image
'''anchor-extract-text-and-images-from-pdf
'''*
Dim Pdf As PdfDocument = PdfDocument.FromFile("testFile.pdf")
Dim pageList As New List(Of Integer)() From {1, 2}
Pdf.RasterizeToImageFiles("*.png", pageList)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#13-add-pdf-watermark"&gt;
  &lt;/a&gt;
  13. Add PDF Watermark
&lt;/h1&gt;

&lt;p&gt;The following is an example of how to watermark PDF pages using the watermarkAllPages() method&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
Add Watermark
anchor-add-pdf-watermark
**/
IronPdf.HtmlToPdf Renderer = new IronPdf.ChromePdfRenderer();
var pdf = Renderer.RenderUrlAsPdf("https://www.nuget.org/packages/IronPdf");
pdf.WatermarkAllPages("&amp;lt;h2 style='color:red'&amp;gt;SAMPLE&amp;lt;/h2&amp;gt;",
PdfDocument.WaterMarkLocation.MiddleCenter, 50, -45, "https://www.nuget.org/packages/IronPdf");
pdf.SaveAs("Watermarked.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'''
'''Add Watermark
'''anchor-add-pdf-watermark
'''*
Dim Renderer As IronPdf.HtmlToPdf = New IronPdf.ChromePdfRenderer()
Dim pdf = Renderer.RenderUrlAsPdf("https://www.nuget.org/packages/IronPdf")
pdf.WatermarkAllPages("&amp;lt;h2 style='color:red'&amp;gt;SAMPLE&amp;lt;/h2&amp;gt;", PdfDocument.WaterMarkLocation.MiddleCenter, 50, -45, "https://www.nuget.org/packages/IronPdf")
pdf.SaveAs("Watermarked.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Watermark is restricted to basic position and a 100mm by 100mm as a maximum size. For more control you can use StampHTML method:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;IronPdf.HtmlToPdf Renderer = new IronPdf.ChromePdfRenderer();
var pdf = Renderer.RenderHtmlAsPdf("&amp;lt;div&amp;gt;test text &amp;lt;/div&amp;gt;");
 var backgroundStamp = new IronPdf.Editing.HtmlStamp()
         {
             Html = "&amp;lt;h2 style='color:red'&amp;gt;copyright 2018 ironpdf.com",
             Width = 100,
             Height = 100,
             Opacity = 50,
             Rotation = -45,
             ZIndex =  IronPdf.Editing.HtmlStamp.StampLayer.BehindExistingPDFContent ,
             Location =  IronPdf.Editing.WaterMarkLocation.MiddleCenter
         };
pdf.StampHTML(backgroundStamp);
pdf.SaveAs("stamped.pdf");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dim Renderer As IronPdf.HtmlToPdf = New IronPdf.ChromePdfRenderer()
Dim pdf = Renderer.RenderHtmlAsPdf("&amp;lt;div&amp;gt;test text &amp;lt;/div&amp;gt;")
 Dim backgroundStamp = New IronPdf.Editing.HtmlStamp() With {
     .Html = "&amp;lt;h2 style='color:red'&amp;gt;copyright 2018 ironpdf.com",
     .Width = 100,
     .Height = 100,
     .Opacity = 50,
     .Rotation = -45,
     .ZIndex = IronPdf.Editing.HtmlStamp.StampLayer.BehindExistingPDFContent,
     .Location = IronPdf.Editing.WaterMarkLocation.MiddleCenter
 }
pdf.StampHTML(backgroundStamp)
pdf.SaveAs("stamped.pdf")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
    </item>
    <item>
      <title>CRUD operations with Prisma and Fastify</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 19 Jan 2022 06:22:59 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/crud-operations-with-prisma-and-fastify-4njc</link>
      <guid>https://dev.to/dailydevtips1/crud-operations-with-prisma-and-fastify-4njc</guid>
      <description>&lt;p&gt;You might have heard of CRUD. It's a concept of data manipulation which stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;C&lt;/strong&gt;: Create&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;R&lt;/strong&gt;: Read&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;U&lt;/strong&gt;: Update&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;D&lt;/strong&gt;: Delete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which these four steps, we are generally able to create complete applications.&lt;/p&gt;

&lt;p&gt;We'll learn how to handle CRUD operations on a Prisma database for today's article while using Fastify as our server.&lt;br&gt;
This way, the end-user will perform specific requests to the API endpoint, which will handle the CRUD operations.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-framework"&gt;
  &lt;/a&gt;
  Setting up the framework
&lt;/h2&gt;

&lt;p&gt;We won't be making this project from scratch. If you are interested in &lt;a href="https://daily-dev-tips.com/posts/set-up-a-local-prisma-instance/"&gt;setting up Prisma, check out this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we created two models, the &lt;code&gt;User&lt;/code&gt; and the &lt;code&gt;Hobby&lt;/code&gt; model.&lt;br&gt;
A user can have multiple hobbies, so let's use this knowledge to enable our CRUD operations.&lt;/p&gt;

&lt;p&gt;If you like to follow along, download the following &lt;a href="https://github.com/rebelchris/local-prisma/tree/part-2"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The very first thing we'll want to do is &lt;a href="https://daily-dev-tips.com/posts/building-a-fastify-nodejs-server/"&gt;install Fastify&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i fastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've also taken the liberty to add a start script for our application in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node index.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's change our &lt;code&gt;index.ts&lt;/code&gt; file to run a primary Fastify server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Todo: Create the routes&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In between, we'll start by adding our routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-read-routes"&gt;
  &lt;/a&gt;
  Creating the read routes
&lt;/h3&gt;

&lt;p&gt;First up is a &lt;code&gt;GET&lt;/code&gt; (&lt;code&gt;read&lt;/code&gt;) route.&lt;/p&gt;

&lt;p&gt;We want to retrieve all users with their hobbies by requesting the &lt;code&gt;users&lt;/code&gt; endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allUsersAndHobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allUsersAndHobbies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try it out to see if we are on the right track.&lt;br&gt;
Run the startup script: &lt;code&gt;npm run start&lt;/code&gt;.&lt;br&gt;
Now open up your &lt;a href="https://daily-dev-tips.com/posts/testing-api-calls-in-insomnia/"&gt;favorite API client&lt;/a&gt; and paste the URL in the bar &lt;code&gt;http://localhost:3000/users&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can also use your browser for the get requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRmhr0qt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641741779987/v_e-UcTQg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRmhr0qt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641741779987/v_e-UcTQg.png" alt="Get request with Fastify Prisma CRUD" width="880" height="778"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, that is the first element done.&lt;br&gt;
There is, however, also the option to read just one user. We can leverage the Fastify params option for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IByIdParam&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have noticed I'm using a definition here to define what the &lt;code&gt;Params&lt;/code&gt; look like.&lt;br&gt;
This is because the typescript version of Fastify doesn't know wha5t kind of params to expect.&lt;br&gt;
The interface I created looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IByIdParam&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can try and retrieve only the user with ID 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zt98rgHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641741969167/6e41zuxtL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zt98rgHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641741969167/6e41zuxtL.png" alt="User one requested" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazing, this seems to work perfectly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-routes"&gt;
  &lt;/a&gt;
  Create routes
&lt;/h3&gt;

&lt;p&gt;The next thing on our list is to create new rows in our database.&lt;/p&gt;

&lt;p&gt;For this, we use the &lt;code&gt;POST&lt;/code&gt; request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IUserBodyParam&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see, we leverage the request body here, and as with the Params, Fastify does not know what our body will look like, so let's define the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IUserBodyParam&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it accepts two strings, the name, and the hobbies.&lt;br&gt;
The hobbies for the user will be a string delimited by a &lt;code&gt;;&lt;/code&gt; sign.&lt;/p&gt;

&lt;p&gt;Let's say we push the following data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"hobbies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Surfing;Cooking"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chris"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will map into the following request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Surfing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cooking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try it out and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UP0bo8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742414794/xp8I9orf-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UP0bo8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742414794/xp8I9orf-.png" alt="Create a new record Fastify Prisma" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice, another one done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-a-record"&gt;
  &lt;/a&gt;
  Update a record
&lt;/h3&gt;

&lt;p&gt;Oops, we made a mistake. We set the wrong name for a user. How can we update this?&lt;/p&gt;

&lt;p&gt;We can leverage the &lt;code&gt;PUT&lt;/code&gt; command and make an update route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IUserBodyParam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IByIdParam&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this route leverages both the body and the Params as we need to know the user's new name and ID.&lt;/p&gt;

&lt;p&gt;Then we use the Prisma update query to update the user's name with this specific ID.&lt;/p&gt;

&lt;p&gt;Let's try it out and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_5oUv5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742576907/orz-_6vWI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_5oUv5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742576907/orz-_6vWI.png" alt="Put command to update a record" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the user with ID, which we just created, was &lt;code&gt;chris&lt;/code&gt;, and now his name is &lt;code&gt;Yaatree&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-records"&gt;
  &lt;/a&gt;
  Deleting records
&lt;/h3&gt;

&lt;p&gt;The last method we want to introduce is to delete records.&lt;br&gt;
For this, we can leverage the &lt;code&gt;DELETE&lt;/code&gt; request and send this to a specific ID.&lt;/p&gt;

&lt;p&gt;The route will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IByIdParam&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/hobby/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hobby removed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we use the Prisma delete function to delete a specific hobby.&lt;/p&gt;

&lt;p&gt;Then we reply with a string that the hobby has been removed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oB3ttq16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742741814/dwEVNAQqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oB3ttq16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641742741814/dwEVNAQqf.png" alt="Deleting a record" width="854" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's it. We now learned how to use CRUD operations with Fastify and Prisma.&lt;br&gt;
This is a. Super powerful combo, and you can create any web application with these two combined.&lt;/p&gt;

&lt;p&gt;If you want to read the source code in detail, I've uploaded the project to &lt;a href="https://github.com/rebelchris/local-prisma/tree/part-3"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>database</category>
    </item>
    <item>
      <title>Customise GitHub Mobile to work better for you: Shortcuts and more</title>
      <author>Michelle Mannering</author>
      <pubDate>Wed, 19 Jan 2022 05:48:36 +0000</pubDate>
      <link>https://dev.to/github/customise-github-mobile-to-work-better-for-you-shortcuts-and-more-5ck8</link>
      <guid>https://dev.to/github/customise-github-mobile-to-work-better-for-you-shortcuts-and-more-5ck8</guid>
      <description>&lt;p&gt;Last year, I showed you some of my favourite &lt;a href="https://github.com"&gt;github.com&lt;/a&gt; keyboard shortcuts. Now, we're introducing Shortcuts on GitHub Mobile.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mishmanners" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="mishmanners"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mishmanners/keyboard-shortcuts-for-github-your-key-to-increased-productivity-bm0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Keyboard shortcuts for GitHub • your key to increased productivity&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering ・ Mar 12 '21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In today's landscape, productivity is key. Everyone is trying to do more with less. GitHub Mobile shortcuts help you stay on top of your work while on the go. Here's how to make Shortcuts work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-mobile-shortcuts"&gt;
  &lt;/a&gt;
  GitHub Mobile Shortcuts
&lt;/h2&gt;

&lt;p&gt;Shortcuts are all about getting to the things that matter most - and quickly. Shortcuts puts important things like Issues, PRs, and Discussions right where you need them.&lt;/p&gt;

&lt;p&gt;From the "Home" screen, scroll down to "Shortcuts" and click "Get Started". Now you can go about customising shortcuts to suit the way you work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXH-xjj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4mri5x5z6y31pwr9x17.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXH-xjj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4mri5x5z6y31pwr9x17.jpg" alt="GitHub Mobile Shortcuts" width="840" height="2081"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Choose from some suggested shortcuts, or make your own. You can select the emoji, name, type of shortcut, and even which repository you'd like your shortcut to work on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlNtx2ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb5pyskysujnqb1gzb24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlNtx2ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb5pyskysujnqb1gzb24.png" alt="Shortcuts screen" width="840" height="1337"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The scope of shortcuts you can create are super customisable. Choose between:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open/closed&lt;/li&gt;
&lt;li&gt;created/mentioned/assigned&lt;/li&gt;
&lt;li&gt;all/private/public repos&lt;/li&gt;
&lt;li&gt;filter by org&lt;/li&gt;
&lt;li&gt;filter by repo&lt;/li&gt;
&lt;li&gt;sort from various categories and emojis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can even choose the colour of the shortcut you'd like to create! Once you've selected your desired shortcuts, click "Save". Now your Shortcuts will appear on your "Home" screen right under "Shortcuts".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqA9S1l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqfiz6l186co49m80gtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqA9S1l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqfiz6l186co49m80gtu.png" alt="Create Shortcuts" width="840" height="1403"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-github-mobile-work-for-you"&gt;
  &lt;/a&gt;
  Make GitHub Mobile Work for you
&lt;/h2&gt;

&lt;p&gt;Working on the go isn't always about shortcuts. Often you'll want the things that matter most, front and center. From the "Home" screen, you can customise which features you want to see under "My Work". Select the ones you want to show, and hide the ones which don't need your attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLSB_Hcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zmvilvv6e4iu9o1pw0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLSB_Hcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zmvilvv6e4iu9o1pw0d.png" alt="Home screen" width="840" height="1812"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can reorder "My Work" to better fit the things you care about. If Discussions are most important to your work, place them at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hkHsQgVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi0m6aj3u4aj767e4bt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkHsQgVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi0m6aj3u4aj767e4bt6.png" alt="Edit my work" width="840" height="885"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-favourites"&gt;
  &lt;/a&gt;
  Adding Favourites
&lt;/h2&gt;

&lt;p&gt;If you're working on a particular repo, you might want that repository to show up on your "Home" page. Scroll down to "Favourites" on the "Home" screen and click "Add Favourites". Here you'll see a list of all the repositories you've been working on. Click the "+" button to add the ones you use the most.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17t7UalL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0aeefhs6qaqkq17bptg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17t7UalL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0aeefhs6qaqkq17bptg.jpg" alt="Favourites" width="840" height="2081"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now you can reorder your repos to suit the way you work. Once you're happy with the list shown, click "Save". Now your favourite repos will be front and center on your mobile app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imERdPlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5j1qulcx5pbfstfffqa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imERdPlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5j1qulcx5pbfstfffqa.jpg" alt="Reordering favourites" width="840" height="2081"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can change and reorder your favourite repos anytime by clicking the ellipses next to "Favourites".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increase-your-productivity"&gt;
  &lt;/a&gt;
  Increase your productivity
&lt;/h2&gt;

&lt;p&gt;Hopefully these features will help increase your productivity and efficiency when working on your projects. If you have feedback on any of these features, or suggestion for new ideas, please leave your comments on the &lt;a href="https://github.com/github/feedback/discussions/categories/mobile-feedback"&gt;GitHub Mobile Discussions page&lt;/a&gt;. Our team reads everything you submit, so please feel free to include as much information as you like.&lt;/p&gt;

&lt;p&gt;If you haven't already got GitHub Mobile, download it now on the &lt;a href="https://apps.apple.com/app/github/id1477376905?ls=1"&gt;App Store&lt;/a&gt;, or &lt;a href="https://play.google.com/store/apps/details?id=com.github.android"&gt;Google Play&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>tutorial</category>
      <category>github</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 43: TOP DOM Manipulations and Events Practice Knowledge Check</title>
      <author>Jennifer Tieu</author>
      <pubDate>Wed, 19 Jan 2022 05:04:37 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-43-top-dom-manipulations-and-events-practice-knowledge-check-5fi6</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-43-top-dom-manipulations-and-events-practice-knowledge-check-5fi6</guid>
      <description>&lt;p&gt;Today...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-check"&gt;
  &lt;/a&gt;
  Knowledge Check
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What is the DOM?&lt;/strong&gt;&lt;br&gt;
The DOM, or Document Object Model, is a tree-like representation of the contents of a webpage.&lt;br&gt;
&lt;strong&gt;How do you target the nodes you want to work with?&lt;/strong&gt;&lt;br&gt;
You use a combination of CSS-style selectors and relationship properties along with the DOM method, querySelector, to target the nodes you want.&lt;br&gt;
&lt;strong&gt;How do you create an element in the DOM?&lt;/strong&gt;&lt;br&gt;
You use the DOM method, createElement, to create an element in memory.&lt;br&gt;
&lt;strong&gt;How do you add an element to the DOM?&lt;/strong&gt;&lt;br&gt;
You use the DOM methods, appendChild (for adding to a parent node) or insertBefore (for adding a node into a parent and before reference node).&lt;br&gt;
&lt;strong&gt;How do you remove an element from the DOM?&lt;/strong&gt;&lt;br&gt;
You use the DOM method, removeChild.&lt;br&gt;
&lt;strong&gt;How can you alter an element in the DOM?&lt;/strong&gt;&lt;br&gt;
You can alter an element by create a reference to the node using the createElement method.&lt;br&gt;
&lt;strong&gt;When adding text to a DOM element, should you use textContent or innerHTML? Why?&lt;/strong&gt;&lt;br&gt;
You should use textContent because innerHTML is vulnerable to security risks like JavaScript injections.&lt;br&gt;
&lt;strong&gt;Where should you include your Javascript tag in your HTML file when working with DOM nodes?&lt;/strong&gt;&lt;br&gt;
The end of the script or linked to an external file in the head tag. The DOM nodes needs to be parsed and created before any JavaScript DOM methods can execute.&lt;br&gt;
&lt;strong&gt;How do “events” and “listeners” work?&lt;/strong&gt;&lt;br&gt;
Events are actions performed on the webpage or DOM. Then listeners are listening for these events to occur and reacting to them.&lt;br&gt;
&lt;strong&gt;What are three ways to use events in your code?&lt;/strong&gt;&lt;br&gt;
Attach function attributes directly on the HTML element, set the "on_event_" property on the DOM object in JavaScript, or attach event listeners to the nodes in your JavaScript&lt;br&gt;
&lt;strong&gt;Why are event listeners the preferred way to handle events?&lt;/strong&gt;&lt;br&gt;
We maintain a separation of concern and can use multiple event listeners.&lt;br&gt;
&lt;strong&gt;What are the benefits of using named functions in your listeners?&lt;/strong&gt;&lt;br&gt;
They are more organized and easier to reuse.&lt;br&gt;
&lt;strong&gt;How do you attach listeners to groups of nodes?&lt;/strong&gt;&lt;br&gt;
Use querySelectorAll to get a group of nodes or nodelist then iterate through them and attach an eventListener to each node&lt;br&gt;
&lt;strong&gt;What is the difference between the return values of querySelector and querySelectorAll?&lt;/strong&gt;&lt;br&gt;
querySelector returns a specific nodes while querySelectorAll returns a nodelist.&lt;br&gt;
&lt;strong&gt;What does a “nodelist” contain?&lt;/strong&gt;&lt;br&gt;
A nodelist is an Array-like list of nodes.&lt;br&gt;
&lt;strong&gt;Explain the difference between “capture” and “bubbling”.&lt;/strong&gt;&lt;br&gt;
Capturing is the top-down selection of elements to the target element while bubbling is the bottom-up selection of elements to the target element. They are both phases of Event Propagation which occurs when an event is performed on the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/"&gt;The Odin Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>From Facebook to META</title>
      <author>YONKEU KWEYA STEVE JUNIOR</author>
      <pubDate>Wed, 19 Jan 2022 04:59:56 +0000</pubDate>
      <link>https://dev.to/yokwejuste/from-facebook-to-meta-15oc</link>
      <guid>https://dev.to/yokwejuste/from-facebook-to-meta-15oc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, world! I guess we all have noticed the word META word on some of our social media platforms like Instagram, Facebook, and WhatsApp. &lt;br&gt;
Welcome to the META world 😊. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-whats-meta-all-about"&gt;
  &lt;/a&gt;
  Now, what’s META all about? 😊
&lt;/h2&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Hbkix6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://static.foxbusiness.com/foxbusiness.com/content/uploads/2021/10/Facebook-Meta-3.gif" alt="image.png" width="880" height="495"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
Meta is All About What You Can Expect in the Future.&lt;br&gt;
The metaverse is where the physical and digital worlds come together. It is a space where digital representations of people using avatars created by you (the user) interact at work and play, meeting in their office, going to concerts, going to schools and many others, and even trying on clothes. Why not eat?
&lt;h2&gt;
  &lt;a href="#what-is-facebook-doing-with-meta"&gt;
  &lt;/a&gt;
  What is Facebook doing with META?
&lt;/h2&gt;

&lt;p&gt;This change of name is just a prove that CEO Mark considers his company with a future orientation different from the actual one.&lt;br&gt;
 &lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpHUAws0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642563503456/CUGeXfC9d.png" alt="image.png" width="802" height="534"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
In 2021, at &lt;a href="https://www.facebookconnect.com/en-us/"&gt;CONNECT 2021&lt;/a&gt; which was a conference that was streamed virtually on October 28, 2021, where the FACEBOOK group worker together with CEO Mark Zuckerberg gave a detailed explanation of what was META for real and a small preview of its upcoming features. He added to this to the fact that he was bringing together our apps and technologies under the one and new company brand META. &lt;br&gt;
Meta’s focus will be to bring the metaverse to life and help people connect, find communities, and grow businesses.&lt;br&gt;
With all these changes, for sure there should be some kind of controversy and internal disagreements on all the harm created by social networking around the world, as we know not all ideas are supported at their initial states 🤔.
&lt;h2&gt;
  &lt;a href="#will-the-facebook-apps-change-names"&gt;
  &lt;/a&gt;
  Will the Facebook apps change names?
&lt;/h2&gt;

&lt;p&gt;As answered by Mark Zuckerberg Facebook remains Facebook, you wouldn’t have to go and check it elsewhere. He added the apps (WhatsApp, Facebook), of our social media, still remain a priority for the META group. &lt;br&gt;
Nevertheless,¬¬ on the Connect 2021 conference day, he added that &lt;a href="https://www.oculus.com/"&gt;Oculus Company Brand&lt;/a&gt; which is a division of the META platform that produces virtual reality headsets, together with Oculus Rift and Oculus Quest lines will disappear for the betterment of META.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-meta-really-mean"&gt;
  &lt;/a&gt;
  What does META really mean?
&lt;/h2&gt;

&lt;p&gt;“The always exist another thing to be built”, said Mark Zuckerberg taking reference to the new baby (META). The word Meta is found in its rot in Greek which is a synonym of “beyond” or “above”. He evokes the fact that Meta is all beyond imagination, beyond reality. What a sweet piece of cake will it be? 🤤&lt;br&gt;
META, Facebook parent’s company is aiming for deep compatibility with Blockchain technology according to an internal post from a top executive.&lt;br&gt;
In the note to employees, which was obtained by The New York Times, Andrew Bosworth, who &lt;a href="https://www.nytimes.com/2021/09/22/technology/facebook-cto-step-down-mike-schroepfer.html"&gt;will become Meta’s chief technology officer&lt;/a&gt; this year 2022, laid out a vision for the social network to adopt and work with various blockchain or cryptocurrency technologies that have collectively become known as web3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-metaverse-vision-from-mark-applicable"&gt;
  &lt;/a&gt;
  Is the METAVERSE vision from MARK applicable?
&lt;/h2&gt;


&lt;p&gt;For sure taking Facebook to the metaverse will take time because it was mostly built on theoretical aspects, now let’s get to the implementation, that’s the real challenge. &lt;br&gt;&lt;br&gt;
In this new universe that Mark Zuckerberg wishes to develop, real and virtual merge until they merge. Screens, holograms, virtual reality headsets and augmented reality glasses will be supposed to allow “movements” in virtual universes that recreate the real world identically. No need to walk or make any physical effort, we now “teleport” from the virtual universe to the virtual universe. "We need to build the connective tissue between (the different) digital spaces to overcome physical limitations and move between them with the same ease as between the rooms of his house", explained the co-founder of Meta.&lt;br&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnWzL5n6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642563609358/dKQx1h4Dz.png" alt="image.png" width="858" height="644"&gt;&lt;br&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;&lt;br&gt;
We also remember “Second Life”, the first free 3D virtual “metaverse” which attracted more than 20 million users. According to Mark Zuckerberg, smartphones are technologies that are too limited as a means of communication and access to digital spaces: “People are not supposed to navigate through a grid of applications. I think we interact a lot more naturally when we think we're present with other people."&lt;br&gt;&lt;br&gt;
Mark Zuckerberg is not in such a rush to achieve this goal. Facebook and its sister apps remain a giant company, generating more than $86 billion in annual revenue with more than 3.5 billion users worldwide.

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>facebook</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How to learn React.js in 2022: A Complete Guide for Beginners</title>
      <author>ashikarose</author>
      <pubDate>Wed, 19 Jan 2022 04:54:33 +0000</pubDate>
      <link>https://dev.to/ashikarose/how-to-learn-reactjs-in-2022-a-complete-guide-for-beginners-d94</link>
      <guid>https://dev.to/ashikarose/how-to-learn-reactjs-in-2022-a-complete-guide-for-beginners-d94</guid>
      <description>&lt;p&gt;Every front-end and web developer understands how inconvenient it is to write the same code in different places. They are compelled to do a lot of coding if they need to add a button to several sites. Other frameworks force developers to rebuild the majority of their code, even when creating regularly changing components. Developers desired a framework or library that would allow them to break down complex components and reuse code to accomplish projects more quickly. This is when React comes in and solves the issue.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;What is react.js?&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
ReactJS is a widely used open-source JavaScript library created by Facebook. It can control the view layer for both online and mobile-based apps. ReactJS is mostly used to create reusable UI components. It has an easy-to-use UI. Its large community is always there to help you.&lt;/p&gt;

&lt;p&gt;The main benefit of ReactJS is that it allows you to create a User Interface (UI) to speed up your application. Furthermore, the JavaScript virtual DOM is quicker than the conventional DOM and is responsible for performance improvements.&lt;/p&gt;

&lt;p&gt;ReactJS is based on components, which is one of its most appealing features. As a result, the complex code is split down into components that help engineers organize their codes better. The entire user interface is divided into reusable components. All of these elements are created individually and then combined into a parent component that is rendered afterwards. Each component is in charge of producing a small, reusable chunk of HTML code. These components can be stacked with one other to create complex applications using only a few basic building pieces.&lt;/p&gt;

&lt;p&gt;React's components and data structures boost readability and help you deal with huge projects. ReactJS can be used on the client, server, and with a variety of other frameworks.&lt;/p&gt;

&lt;p&gt;You can start constructing basic projects like a simple todo app, a simple calculator app, a shopping cart, and showing GitHub's user statistics using the GitHub API once you have a basic understanding of React.&lt;a href="https://www.cronj.com/hire-react-js-developers.html" rel="nofollow"&gt;hire reactjs developers&lt;/a&gt; to get assistance for your project.&lt;br&gt;
**Checklist/Prerequisites&lt;br&gt;
**1.Basic knowledge of HTML, CSS, and JavaScript&lt;br&gt;
2.Certain ES6 features of Javascript including Let and Const, Arrow Functions, Class, and ‘this’ keyword&lt;br&gt;
3.Fundamentals of NodeJS &amp;amp; Code Editors&lt;/p&gt;

&lt;p&gt;1.HTML, CSS, Javascript&lt;br&gt;
These are the three things that any front-end developer needs to get started. These are the fundamentals of frontend web development, and they all work together to create a fully effective web application or website.&lt;/p&gt;

&lt;p&gt;2.Javascript ES6 Features&lt;br&gt;
ES6 is the latest version of JavaScript, and it comes with a slew of new capabilities. To get started with ReactJS, you'll need to understand Let and Const, Arrow Functions, Class, and the 'this' keyword. Let's take a closer look at each of these ES6 features:&lt;br&gt;
let and const&lt;br&gt;
You would use 'let' and 'const' instead of the var keyword. They aren't the same as var at all. Let creates a local variable whose scope is restricted to the block in which it is declared. Const denotes a variable with fixed values that cannot be changed.&lt;br&gt;
Arrow function&lt;br&gt;
The arrow function allows you to write a function with a reduced syntax. It cleans up and improves the readability of your code.&lt;br&gt;
Class and ‘this’ keyword&lt;br&gt;
In ES6, you'll need to understand Object-Oriented Programming principles like Method, Class, and Objects. These topics may have already been taught to you in Java or C++.&lt;br&gt;
The 'this' keyword represents the currently running item. For many developers, the concept of 'this' keyword is perplexing. As a result, make certain to clear up any ambiguity. You should also learn how to use the Apply, Call, and Bind methods. These methods are used to connect or bind the keyword 'this' to a specific object.&lt;br&gt;
3.NodeJS Fundamentals &amp;amp; Code Editors&lt;br&gt;
Working with ReactJS necessitates a solid understanding of NodeJS principles. In layman's terms, NodeJS is a javascript execution environment. Many people believe it is a programming language, although this is not the case. Every browser has an inbuilt JavaScript Engine; for example, Chrome has a V8 engine and Mozilla Firefox has SpiderMonkey. You can't do anything outside of the browser, including file operations, OS activities, or network operations, therefore Node was created. All of these tasks are possible with Node outside of the browser. Chrome's V8 engine is incorporated in it.&lt;br&gt;
NPM (Node Package Manager) is a package manager that can be used to add node modules and packages to your project. For python, the installation is equivalent to PIP.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Keywords for import and export:&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
You must use the 'import' keyword to use the Node module after installing it through NPM inside your project.&lt;br&gt;
When constructing a component or module, use the 'Export' keyword. Instead of returning all variables and methods, you only need to return a part.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;How to learn ReactJS?&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;
All of the preceding topics were prerequisites for using ReactJS. Now that you've learned all of the above, it's time to dive into React. First, grasp the fundamentals of React. We'll start with a high-level overview.&lt;br&gt;
Facebook created React, a Javascript library for creating interactive User Interfaces. It uses a component-based design, which means you'll break down your entire user interface into reusable components, which will subsequently be assembled into a parent component and rendered. The following are some key ReactJS concepts to master.&lt;/p&gt;

&lt;p&gt;**Component Architecture State: &lt;br&gt;
**The term ‘state’' refers to the storage of synchronous variables in a component architecture. When you update the value of a state variable, it is immediately reflected in all of the places where that variable is utilized.&lt;br&gt;
Props work in the same way as arguments do in a function or method. Props (arguments) are supplied as input arguments into an HTML tag in React.&lt;br&gt;
Class Components, Functional Components&lt;br&gt;
CSS styling in React.&lt;br&gt;
Learn how to use React apps to connect to APIs.&lt;/p&gt;

&lt;p&gt;**React Router:&lt;br&gt;
**You can learn how to use React routing to understand how routing works in a React application. To study ReactJS, you must first learn how to load the content of a certain website or how to use &lt;a href="https://www.w3schools.com/react/react_router.asp" rel="nofollow"&gt;react router&lt;/a&gt; to efficiently redirect to a specific page.&lt;br&gt;
It becomes straightforward to construct projects like the Hacker News clone or a basic CRUD application once you have a good understanding of React Router.&lt;/p&gt;

&lt;p&gt;**Webpack:&lt;br&gt;
**Webpack is a Javascript module bundler that helps developers maintain project dependencies such as static files. As a result, the developers' workload is lighter. Webpack also has loaders that do certain tasks for your project.&lt;/p&gt;

&lt;p&gt;**Server Rendering:&lt;br&gt;
**When you understand this notion, you'll be able to create components on the server and then render them as HTML in your browser. ReactJS is used once each JavaScript module has been downloaded into the browser. One of React's most intriguing features is server rendering, which can be utilized with any back-end technology.&lt;/p&gt;

&lt;p&gt;**Redux:&lt;br&gt;
**In a complicated application, you need to be able to manipulate states across multiple components. This problem is solved by &lt;a href="https://redux.js.org/" rel="nofollow"&gt;Redux&lt;/a&gt;,a Javascript library. It keeps track of the application's status. All of your states are stored in a single source in Redux.&lt;/p&gt;

&lt;p&gt;This is a step-by-step guide to learning React from the ground up. We hope you found this information useful!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Azure Cosmos DB SQL API – Document Analytics</title>
      <author>Modhana</author>
      <pubDate>Wed, 19 Jan 2022 03:27:16 +0000</pubDate>
      <link>https://dev.to/modhanapriya/azure-cosmos-db-sql-api-document-analytics-46o2</link>
      <guid>https://dev.to/modhanapriya/azure-cosmos-db-sql-api-document-analytics-46o2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this blog, we will understand the basics of Cosmos DB partitions and the use of Cerebrata in visualizing the data stored in Cosmos DB SQL API containers based on the partition keys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logical-partitions"&gt;
  &lt;/a&gt;
  Logical Partitions
&lt;/h2&gt;

&lt;p&gt;A logical partition consists of a set of items that have the same partition key. For example, in a container that contains data about customer addresses, all items contain a state property. You can use state as the partition key for the container. Groups of items that have specific values for state form distinct logical partitions. When new items are added to a container, new logical partitions are automatically created by the system.&lt;/p&gt;

&lt;p&gt;There is no limit to the number of logical partitions in your container. Each logical partition can store up to 20 GB of data. Good partition key choices have a wide range of possible values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#physical-partitions"&gt;
  &lt;/a&gt;
  Physical Partitions
&lt;/h2&gt;

&lt;p&gt;A container is scaled by distributing data and throughput across physical partitions. One or more logical partitions are mapped to a single physical partition internally. Typically, smaller containers have many logical partitions, but they only require a single physical partition. Unlike logical partitions, physical partitions are an internal implementation of the system, and they are entirely managed by Azure Cosmos DB.&lt;/p&gt;

&lt;p&gt;The number of physical partitions in container depends on the following:&lt;/p&gt;

&lt;p&gt;The number of throughput provisioned (each individual physical partition can provide a throughput of up to 10,000 request units per second). The 10,000 RU/s limit for physical partitions implies that logical partitions also have a 10,000 RU/s limit, as each logical partition is only mapped to one physical partition.&lt;br&gt;
The total data storage (each individual physical partition can store up to 50GB of data).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-partition-key"&gt;
  &lt;/a&gt;
  Choosing a Partition key
&lt;/h2&gt;

&lt;p&gt;There is no limit for the number of logical partitions in a container. Each logical partition can store up to 20GB of data. It is not possible to insert more data into the same logical partition once the 20 GB limit is reached. Let us consider a scenario, where we need to store the address of all the customers in a Cosmos DB SQL API container. The sample document to be stored will be of the following format.&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;“id”:”CS001”,&lt;/p&gt;

&lt;p&gt;“firstName”:  “John”,&lt;/p&gt;

&lt;p&gt;“lastName: ”Smith”,&lt;/p&gt;

&lt;p&gt;“addressLine1”: ”132, My Street”,&lt;/p&gt;

&lt;p&gt;“addressLine2”: ” Kingston”,&lt;/p&gt;

&lt;p&gt;“state”:  ”New York”,&lt;/p&gt;

&lt;p&gt;“zipCode”: “12401”,&lt;/p&gt;

&lt;p&gt;“country”:”United States”&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;The partition Key path chosen for this container is “/state”. This will hold good when the population of the state is small or normal. But when the population of the state is large, then we will have a greater number of records with the same partition key and the size of the logical partition will grow enormously and may reach the 20 GB limit.&lt;/p&gt;

&lt;p&gt;So, it is very important to note that the partition key must be chosen in such a way that it holds a wide range of values. So, in the above case, it will be good if the partition Key chosen is zipcode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-analytics-in-cerebrata"&gt;
  &lt;/a&gt;
  Document analytics in Cerebrata
&lt;/h2&gt;

&lt;p&gt;In Cerebrata, it is possible to visualize the data stored in each logical partition within a container. This is available through the document analytics feature. Through this feature, we will be able to view the total size of the documents in each logical partition. This will help us in understanding the trend of the records that are stored in each logical partition.&lt;/p&gt;

&lt;p&gt;Steps in viewing the Cosmos DB SQL API document analytics&lt;br&gt;
Navigate into the required Cosmos DB SQL API container within the desired database&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t1CWudh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1CWudh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-2.png" alt="" width="530" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select Document analytics from the context menu of the container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lDs0c1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lDs0c1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-3.png" alt="" width="352" height="728"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The document analytics will be displayed in both graphical format and tabular format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZzm0dz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZzm0dz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-4.png" alt="" width="602" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capabilities-in-document-analytics"&gt;
  &lt;/a&gt;
  Capabilities in Document analytics
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Search Criteria:&lt;/strong&gt; It is possible to retrieve the documents that are modified within the provided data time interval. This can be done be selecting the Search Criteria option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBL9G0C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBL9G0C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-5.png" alt="" width="602" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Document count:&lt;/strong&gt; It is possible to visualize the total number of documents in a logical partition by grouping the records by document count.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VfoDO35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VfoDO35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-6.png" alt="" width="602" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Document size:&lt;/strong&gt; It is possible to visualize the total size of documents in a logical partition by grouping the records by document size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLXvY6gj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLXvY6gj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-9.png" alt="" width="602" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-in-document-analytics"&gt;
  &lt;/a&gt;
  Features in Document Analytics
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Export Chart:&lt;/strong&gt; It is also possible to export the document analytics as an image file. This can be done through the Export chart option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDk1y018--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDk1y018--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-10.png" alt="" width="601" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export data:&lt;/strong&gt; It is also possible to export the document analytics as CSV or Excel file. This can be done by using the Export data option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TaE-CE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TaE-CE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cerebrata.com/wp-content/uploads/2021/06/image-8.png" alt="" width="602" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-features-for-cosmos-db-sql-api"&gt;
  &lt;/a&gt;
  Other features for Cosmos DB SQL API
&lt;/h2&gt;

&lt;p&gt;Cerebrata also provides some other interesting features for Cosmos DB like management of databases, containers, stored procedures, functions, and triggers of containers in a Cosmos DB account. It is also possible to query the documents in a container, insert a new document, update, and delete the existing documents. It is also possible to copy the documents from one container to another container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this blog, we understood how Cerebrata can be used to visualize the logical partitions in a Cosmos DB SQL API container and the basics of logical and physical partitions. &lt;/p&gt;

&lt;p&gt;Apart from Azure Cosmos DB SQL API, Cerebrata enables you to manage your Azure Cosmos DB accounts (Gremlin API and Table API), Service Bus Namespaces, Cognitive Search Service accounts, Redis Cache accounts, and much more. It is also cross-platform so that you can manage your Azure resources from a platform of your choice – Windows, Mac, or Linux. Please visit &lt;a href="https://cerebrata.com/"&gt;https://www.cerebrata.com&lt;/a&gt;to learn more.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>serverless</category>
      <category>cosmosdb</category>
    </item>
    <item>
      <title>I'm a Senior Software Engineer at Uber! Quick tips that helped me get hired</title>
      <author>Felipe Porto</author>
      <pubDate>Wed, 19 Jan 2022 03:04:59 +0000</pubDate>
      <link>https://dev.to/felipeporto/im-a-senior-software-engineer-at-uber-quick-tips-that-helped-me-get-hired-4edf</link>
      <guid>https://dev.to/felipeporto/im-a-senior-software-engineer-at-uber-quick-tips-that-helped-me-get-hired-4edf</guid>
      <description>&lt;p&gt;I recently started a new job at Uber, and there are many useful tips that can help you get a job in a big tech company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;: Pick the language in which you are more comfortable and brush up on some fundamentals. Uber has a &lt;a href="https://eng.uber.com/tech-stack-part-one-foundation/"&gt;predefined tech stack&lt;/a&gt;, but you can choose your preferred language for interviews. I did my testing with JavaScript, therefore &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;MDN&lt;/a&gt; was my starting point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Design&lt;/strong&gt;: Educative recently published an article that covers the &lt;a href="https://www.educative.io/blog/complete-guide-to-system-design"&gt;System Design fundamentals&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Algorithms and Dynamic Programming&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=oBt53YbR9Kk"&gt;This video from freeCodeCamp&lt;/a&gt;, even lengthy, is a great starting point:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Behavioral interviews&lt;/strong&gt;: Remember some situations when you helped your team in resolving issues, dealing with conflicts, or mentoring other software engineers. To learn the best way to answer the questions, watch the youtube channel &lt;a href="https://www.youtube.com/c/SelfMadeMillennial"&gt;Self-Made Millennial&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Automagically  REST and GraphQL endpoints  from your Azure SQL database</title>
      <author>Davide Mauri</author>
      <pubDate>Wed, 19 Jan 2022 01:18:54 +0000</pubDate>
      <link>https://dev.to/azure/automagically-rest-and-graphql-endpoints-from-your-azure-sql-database-40j9</link>
      <guid>https://dev.to/azure/automagically-rest-and-graphql-endpoints-from-your-azure-sql-database-40j9</guid>
      <description>&lt;p&gt;I'm pretty sure that at some point of your developer career you have wished - dreamed! - to have &lt;strong&gt;something that could turn your database tables exposed as a REST or GraphQL endpoint, automatically&lt;/strong&gt;, just by expressing that intention (maybe via a configuration file or some other conventions).&lt;/p&gt;

&lt;p&gt;Such a thing could make your life so much easier and your work more efficient for certain projects.&lt;/p&gt;

&lt;p&gt;Well...dream no more, &lt;em&gt;now there is a solution&lt;/em&gt; for that and it is free and open source!&lt;/p&gt;

&lt;p&gt;And yes, for solution I really mean creating a GraphQL and REST endpoint starting from a database (maybe even from an existing table) without the need to write &lt;em&gt;any&lt;/em&gt; code at all. &lt;/p&gt;

&lt;p&gt;Curious? Well, I'm sure. So, if you want to go head down to the code and the details, you can just head to this GitHub repo: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Azure-Samples"&gt;
        Azure-Samples
      &lt;/a&gt; / &lt;a href="https://github.com/Azure-Samples/azure-sql-db-rest-graphql-directus"&gt;
        azure-sql-db-rest-graphql-directus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A full end-to-end demo using Vue, Directus, REST, GraphQL and Azure SQL database to create a modern Todo list solution
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;where you can create a full-stack / Jamstack end-to-end solution, to store a To-Do list in an Azure SQL database, and present it via Vue.JS, communicating entirely via REST or JSON. &lt;/p&gt;

&lt;p&gt;The sample implementation uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Web App: to run the Directus container&lt;/li&gt;
&lt;li&gt;Vue.Js as front-end client&lt;/li&gt;
&lt;li&gt;Directus to provide GraphQL and REST endpoints automatically from the Azure SQL database&lt;/li&gt;
&lt;li&gt;Azure SQL as database to store ToDo data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://directus.io/"&gt;Directus&lt;/a&gt; is a Node application you can run in Azure using, for example, a container. Once it is running, you just have to configure which tables you want to expose via REST and GraphQL, configure the permission level (I'm quite sure you don't want to make all your table publicly available) and...nothing else, you're done. Of course, you can do much more, but if you don't need any additional complexity, this is really all you have to do.&lt;/p&gt;

&lt;p&gt;You can go from a completely no-code/low-code approach to a more developer oriented one (as I did, for example, in the deployment script, where I also create sample To-Do items via the REST endpoint), so depending on where you are in our career or position, you can decide what is best for you. As a developer I'm just glad that I don't have to write any plubming code anymore (unless I really need to, in that case I may want to use &lt;a href="https://dev.to/azure/graphql-rest-with-prisma-and-azure-sql-love-at-first-sight-12ni"&gt;Prisma&lt;/a&gt; or &lt;a href="https://dev.to/azure/10k-rps-rest-api-with-azure-sql-dapper-and-json-3me2"&gt;Dapper&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Aside from the aforementioned GitHub post, you can also learn more about Azure SQL and Directus via this nice blog post that we just published:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sql/automatic-graphql-and-rest-endpoint-for-azure-sql-with-directus/"&gt;https://devblogs.microsoft.com/azure-sql/automatic-graphql-and-rest-endpoint-for-azure-sql-with-directus/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy! (I surely enjoyed it A LOT!)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>database</category>
      <category>azure</category>
    </item>
    <item>
      <title>An overview of software testing</title>
      <author>Luiz Calaça</author>
      <pubDate>Wed, 19 Jan 2022 00:01:29 +0000</pubDate>
      <link>https://dev.to/luizcalaca/an-overview-of-software-testing-il7</link>
      <guid>https://dev.to/luizcalaca/an-overview-of-software-testing-il7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-devs-what-are-you-going-to-read-here-important-points-and-necessaries-for-your-software-testing-knowledge"&gt;
  &lt;/a&gt;
  Hi, devs! What are you going to read here? Important points and necessaries for your software testing knowledge.
&lt;/h2&gt;

&lt;p&gt;Let's get start with the 7 principles of software testing described on syllabus CTFL - Certified Tester Foundation Level, BSTQB/ISQTB. This principles was created through over the years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 - Testing shows the presence of defects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, the goal of software testing is verify if errors exists but we cannot guarantee that there's no any error even the message says the ours test passed. When we think about TDD, clearly, first the code fail, after is necessary create what is necessary for passing test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 - Exhaustive testing is not possible&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we talking about something exhaustive in the computer science we need do pay attention, because that means more complexity. So, it is not different in software testing context, because it not possible a full coverage of whole code and test all possible inputs from users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 - Early testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You know, if you do something early before the thing can become harder, certainly, will be better. Test first already is a rule in the software programming community. Do tests. If the software is already in production, no problem, start in some point for a better future and software life cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 - Defect Clustering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pareto principle says that a small number of modules contains most of the defects. In this context, 80% of the problems are found in 20% of the modules.&lt;br&gt;
What helps us here is inversion dependency pattern, because the external modules can access our layers just through interfaces that will be done with test first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5 - Pesticide paradox&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you repeat the same thing will hope a different output? Absolutely not. So, if we always have the same test so we not going to find new bugs. Here would be great if we have some coverage test tools for helping us to find where we can do new tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6 - Testing is context-dependent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes! Testing a node web software is different of some embedded in raspberry. For example, the life cycle of a mobile software has a lot of rules and will impact its testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7 - Absence of errors fallacy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;May you have absence of errors and could think: great! But if you don't fulfill all customer requirements so you didn't a good work. Focus on the business and do a usable software using software testing techniques.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#difference-between-bug-defect-error-fault-amp-failure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Difference between Bug, Defect, Error, Fault &amp;amp; Failure&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://validation.ch/en/about-us/team/thomas-muller"&gt;Thomas Muller&lt;/a&gt; “A person can make an error (mistake), which produces a defect (fault, bug) in the code, in software or a system, or a document. If the execution of the defect in code happens, the system will fail to do what it should do (or something it shouldn’t), which causes a failure”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#lets-answer-some-necessary-questions-for-our-knowledge-of-software-testing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's answer some necessary questions for our knowledge of software testing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now, we can see some important concepts and it will help us to implement test in the most tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is unit test?&lt;/strong&gt;&lt;br&gt;
Unit test focus on a small parte of our software. If we have to build a sum function, so first we can create a unit test to test the sum. That's a fundamental concept in software testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is atomic test?&lt;/strong&gt;&lt;br&gt;
An atomic test is one smallest that focuses on testing a single feature, seems like unit test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is automated tests?&lt;/strong&gt;&lt;br&gt;
Automated -- and not manual -- testing is a process that validates if software is functioning appropriately and fulfill all requirements before it is released into production. This method uses scripted sequences that are executed by testing tools and if necessary can run repeatedly at any time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is integration testing?&lt;/strong&gt;&lt;br&gt;
Integration happens when we need more parts and not just a unique small part to test. For example, if we need to test an API, we have a lot of things to observe like database, routes and entities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is black block testing?&lt;/strong&gt;&lt;br&gt;
Black Box Testing mainly focuses on input and output of software applications and it is entirely based on software requirements and specifications. It is also known as Behavioral Testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is white block testing?&lt;/strong&gt;&lt;br&gt;
On the contrary of black block testing, the white is based on   internal functioning of our software, we want to see code, branch, linter, code quality. It is a low-level testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is system testing?&lt;/strong&gt;&lt;br&gt;
We cannot see code, but how the system work on production in different contexts, such as its memory, processing, response and others. One example, would be to do many requests to server and observe its behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is acceptance testing?&lt;/strong&gt;&lt;br&gt;
We get to fulfill all customer requirements? That's a acceptance testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an exploratory testing?&lt;/strong&gt;&lt;br&gt;
Exploratory Testing is a type of software testing that we don't have a TDD (test first) but it impulse the testing thinking, creativity and other things that stimulate a better testing process, be individual or a team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Defect Based Testing?&lt;/strong&gt;&lt;br&gt;
A Defect Based Testing is a technique of test cases that are derived on the founded defects. Not use cases or requirements, here is based on defects to orient our case tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is TDD?&lt;/strong&gt;&lt;br&gt;
TDD (Test Driven Development) is a software development focuses on test-first to do unit test case and so develop the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is BDD?&lt;/strong&gt;&lt;br&gt;
BDD (Behavior Driven Development) is derivate from TDD and is configured as an agile software development to manage projects, involving people and teams for together working oriented for software testing with test-first. As its name suggests, it was designed to test based on systems behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are user stories in software testing?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(&lt;a href="https://www.atlassian.com/agile/project-management/user-stories"&gt;By Max Rehkopf&lt;/a&gt;)Summary: A user story is an informal, general explanation of a software feature written from the perspective of the end user. Its purpose is to articulate how a software feature will provide value to the customer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How do you write a test user story?&lt;/strong&gt;&lt;br&gt;
All things that users will be unified in testable parts, so we can apply the techniques: unit test, integrations and others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is coverage test?&lt;/strong&gt;&lt;br&gt;
It's metric to show us if our code has all of its functionalities built from each case test. It there some part that has no test but is already in production? Coverage test can help us to observe it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conway-law-and-the-software-testing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conway Law and the Software Testing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.melconway.com/Home/Home.html"&gt;Mel Conway&lt;/a&gt; says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Important article: &lt;a href="http://www.melconway.com/Home/Committees_Paper.html"&gt;http://www.melconway.com/Home/Committees_Paper.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a culture of tests, great! The team certainly do much more and with quality.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#techniques-of-software-testing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Techniques of software testing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Test Double&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://martinfowler.com/bliki/TestDouble.html"&gt;Martin Fowler&lt;/a&gt; says "(..) Test Double is a generic term for any case where you replace a production object for testing purposes."&lt;/p&gt;

&lt;p&gt;Below are kinds of Test Double and is a &lt;a href="https://martinfowler.com/bliki/TestDouble.html"&gt;transcript from Martin Fowler&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Dummy objects&lt;/strong&gt; are passed around but never actually used. Usually they are just used to fill parameter lists.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fake objects&lt;/strong&gt; actually have working implementations, but usually take some shortcut which makes them not suitable for production (an InMemoryTestDatabase is a good example).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stubs&lt;/strong&gt; provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spies&lt;/strong&gt; are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mocks&lt;/strong&gt; are pre-programmed with expectations which form a specification of the calls they are expected to receive. They can throw an exception if they receive a call they don't expect and are checked during verification to ensure they got all the calls they were expecting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQjvoLCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6ygh3y5d82lzb8nwkfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQjvoLCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6ygh3y5d82lzb8nwkfx.png" alt="Mocks" width="645" height="343"&gt;&lt;/a&gt;&lt;br&gt;
credits: &lt;a href="https://medium.com/rd-shipit/test-doubles-mocks-stubs-fakes-spies-e-dummies-a5cdafcd0daf"&gt;https://medium.com/rd-shipit/test-doubles-mocks-stubs-fakes-spies-e-dummies-a5cdafcd0daf&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#unit-test-and-the-triple-a-pattern-arrange-act-assert"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unit test and the triple A pattern (Arrange, Act, Assert)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It describe that we should divide our test method into three parts: arrange, act and assert.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 - Arrange&lt;/strong&gt;&lt;br&gt;
So the arrange section you only have code required to setup that specific test. For example, here we'd have objects and mocks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 - Act&lt;/strong&gt;&lt;br&gt;
This part must do the invocation of the method that will be tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 - Assert&lt;/strong&gt;&lt;br&gt;
We need to verify: a simple check of expectations.&lt;/p&gt;

&lt;p&gt;Below, one example using triple A pattern in Javascript with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply = require('./multiply');

test('multiply 1 * 2 to equal 2', () =&amp;gt; {
  expect(multiply(1, 2)).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we write the reserved word &lt;em&gt;test&lt;/em&gt; that means our &lt;strong&gt;Arrange&lt;/strong&gt;, the function &lt;em&gt;multiply&lt;/em&gt; is our &lt;strong&gt;Act&lt;/strong&gt; and &lt;em&gt;expect&lt;/em&gt; is the &lt;strong&gt;Assert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above, we have one small example of software testing, and in practice it is a simple code, but with many concepts as we talking here. &lt;/p&gt;

&lt;p&gt;We can use mocks/stubs, &lt;strong&gt;&lt;em&gt;unit test or integration, black or white block, TDD, BDD, atomic tests, automated tests, verify the test coverage&lt;/em&gt;&lt;/strong&gt; and at the final result do a better software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That's all folks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Important readings&lt;br&gt;
Meszaros, Gerard. xUnit test patterns: Refactoring test code. Pearson Education, 2007.&lt;/p&gt;

&lt;p&gt;Contacts&lt;br&gt;
Email: &lt;a href="mailto:luizcalaca@gmail.com"&gt;luizcalaca@gmail.com&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://www.instagram.com/luizcalaca"&gt;https://www.instagram.com/luizcalaca&lt;/a&gt;&lt;br&gt;
Linkedin: &lt;a href="https://www.linkedin.com/in/luizcalaca/"&gt;https://www.linkedin.com/in/luizcalaca/&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/luizcalaca"&gt;https://twitter.com/luizcalaca&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>programming</category>
      <category>architecture</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Caching In Node.js Applications</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 18 Jan 2022 23:52:20 +0000</pubDate>
      <link>https://dev.to/honeybadger/caching-in-nodejs-applications-b33</link>
      <guid>https://dev.to/honeybadger/caching-in-nodejs-applications-b33</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/nodejs-caching/#authorDetails"&gt;Ayooluwa Isaiah&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/nodejs-caching/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Caching is the process of storing data in a high-speed storage layer so that future requests for such data can be fulfilled much faster than is possible through accessing its primary storage location. An example of caching that you may be familiar with is the browser cache, which stores frequently accessed website resources locally so that it does not have to retrieve them over the network each time they are needed. By maintaining a cache of objects on the user's hardware, retrieval of the cached data is almost instantaneous, leading to increased speed and user satisfaction.&lt;/p&gt;

&lt;p&gt;In the context of server-side applications, caching aims to improve the application's response times by reusing previously retrieved or computed data. For example, instead of repeating network requests for data that do not change often or at all (such as a list of banks in your country), you could store the data in the cache after the initial request and retrieve it from there in subsequent requests. This makes the subsequent requests for that data an order of magnitude faster leading to improved application performance, decreased costs, and faster transactions.&lt;/p&gt;

&lt;p&gt;This article aims to provide an overview of caching, caching strategies, and the solutions currently available on the market. After reading this post, you should have a better idea of when to cache, what to cache, and the appropriate techniques to use in your Node.js applications, depending on the use–case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-caching"&gt;
  &lt;/a&gt;
  Benefits of caching
&lt;/h2&gt;

&lt;p&gt;The primary benefit of caching is that it improves the speed of data retrieval by reducing the need to recompute a result or access the underlying processing or storage layer. Faster data access significantly boosts application responsiveness and performance without adding new hardware resources. Other benefits include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced server load&lt;/strong&gt;: Certain requests can require considerable processing time on the server. If the result of the query is already present in the cache, this processing can be skipped entirely so that the response time is faster, which frees up server resources to do other work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Increased reliability&lt;/strong&gt;: Higher latencies when retrieving data is the usual effect of spikes in application usage causing slower performance across the board. Redirecting a significant portion of the load to the cache layer helps performance become much more predictable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decreased network costs&lt;/strong&gt;: Placing frequently accessed objects in the cache reduces the amount of network activity that has to be performed beyond the cache. This results in far less data being transferred to and from the content origin, leading to lower transfer costs, less congestion in the queues at network switches, fewer dropped packets, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improved database performance&lt;/strong&gt;: A common finding when investigating application performance is that a significant portion of the overall response time is spent in the database layer. Even if the queries are efficient, the cost of processing each query (especially for frequently accessed objects) can quickly add up to higher latencies. A great way to mitigate this issue is to bypass the query processing altogether and use a precomputed result from the cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Increased availability of content&lt;/strong&gt;: Caching can be used as a way to preserve the availability of certain data, even when the origin data storage is down temporarily.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-cache"&gt;
  &lt;/a&gt;
  When should you cache?
&lt;/h2&gt;

&lt;p&gt;Caching is a great tool for improving performance, as evidenced by the benefits discussed in the previous section. So, when should you consider adding a cache layer to your application architecture? There are several factors to consider.&lt;/p&gt;

&lt;p&gt;Most applications have data hot spots that are queried regularly but seldom updated. For example, if you are running an online forum, there may be a steady stream of new posts, but old posts will remain the same and many old threads will stay unchanged for a long time. In this scenario, the application can receive hundreds or thousands of requests for the same unchanged data, which makes it an ideal candidate for caching. Generally speaking, data that are accessed frequently and do not change often or at all should be stored in a cache.&lt;/p&gt;

&lt;p&gt;Another consideration when deciding what to cache is whether the application needs to perform complex queries or calculations before returning or rendering some data. For high-volume websites, even the simple act of rendering some HTML output after retrieving and computing the required data can consume a significant amount of resources and increase latency. If the returned output, once computed, can be reused across multiple queries and operations, it is usually a good idea to store it in a cache.&lt;/p&gt;

&lt;p&gt;The rate at which a piece of data changes and how long outdated data can be tolerated also contribute to how cachable it is. If the data changes frequently such that it cannot be reused for subsequent queries, then it is likely not worth the overhead required to place it in a cache. Other types of optimizations should be considered in this case.&lt;/p&gt;

&lt;p&gt;Caching can be a great way to improve application performance, but it's not necessarily the right thing to do in every scenario. As with all performance optimization techniques, it's important to measure first before making substantial changes to avoid wasting time optimizing the wrong thing.&lt;/p&gt;

&lt;p&gt;The first step is to observe the state and performance of the system in question at a given request rate. If the system cannot keep up with the anticipated load, or if it throttles or suffers high latency, it might be a good idea to cache the data that the system is working with if such a cache would yield a high hit-ratio across several requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching-strategies-to-consider"&gt;
  &lt;/a&gt;
  Caching strategies to consider
&lt;/h2&gt;

&lt;p&gt;A caching strategy is a pattern employed to manage cached information, including how the cache is populated and maintained. There are several strategies to explore, and choosing the right one is crucial to getting the greatest performance benefits. The strategy employed for a gaming service that aggregates and returns a real-time leaderboard will differ considerably from a service that provides other types of data, such as COVID-19 statistics, which are updated a few times a day.&lt;/p&gt;

&lt;p&gt;Before you choose a caching solution, there are three three main things consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The type of data being cached.&lt;/li&gt;
&lt;li&gt;How the data is read and written (the data access strategy).&lt;/li&gt;
&lt;li&gt;How the cache evicts old or outdated data (the eviction policy).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next section, we’ll discuss the various data access strategies that can be employed depending on the type of data being cached.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-access-patterns"&gt;
  &lt;/a&gt;
  Data access patterns
&lt;/h3&gt;

&lt;p&gt;The data access pattern employed determines the relationship between the data source and the caching layer. Therefore, it's important to get this part right, as it can make a significant difference in the effectiveness of your caching. In the rest of this section, we'll discuss common data access patterns, along with their advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Cache-aside pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the cache-aside pattern, data is loaded to the cache only when necessary. Whenever a client requests data, the application checks the cache layer first to see if the data is present. If the data is found in the cache, it is retrieved and returned to the client. This is known as a &lt;em&gt;cache hit&lt;/em&gt;. If the data is not present in the cache (a &lt;em&gt;cache miss&lt;/em&gt;), the application will query the database to read the requested data and return it to the client. Afterwards, the data is stored in cache so that subsequent requests for the same data can be resolved more quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftW5c4ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/cache-aside.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftW5c4ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/cache-aside.png" alt="The cache-aside pattern" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following is a pseudocode example of cache-aside logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeAQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Try to get the entity from the cache.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// If there's a cache miss, get the data from the original store and cache it.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// then store the data to cache with an appropriate expiry time&lt;/span&gt;
    &lt;span class="c1"&gt;// to prevent staleness&lt;/span&gt;
    &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultTTL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return the data to the application&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// application code that gets the data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeAQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only the requested data is cached. This means that the cache is not filled up with data that never get used.&lt;/li&gt;
&lt;li&gt;It works best for read-heavy workflows in which data is written once and read several times before being updated again (if at all).&lt;/li&gt;
&lt;li&gt;It is resilient to cache failures. If the cache layer is not available, the system will fall back to the data store. Bear in mind that an extended period of cache failure can lead to increased latency.&lt;/li&gt;
&lt;li&gt;The data model in the cache does not have to map to the one in the database. For example, the results of multiple database queries can be stored under the same id in the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A cache miss may increase latency because three operations are performed:

&lt;ol&gt;
&lt;li&gt;Request data from the cache.&lt;/li&gt;
&lt;li&gt;Read data from data store.&lt;/li&gt;
&lt;li&gt;Write the data to the cache.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It does not guarantee consistency between the data store and the cache. If data is updated in the database, it may not be reflected in the cache immediately, which leads to stale data being served up by the application. To prevent this from happening, the cache-aside pattern is often combined with the write-through strategy (discussed below), in which the data is updated in the database and the cache simultaneously to prevent the cached data from going stale.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Read-through pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In read-through caching, data is always read from the cache. When an application asks the cache for an entry, and it is not already in the cache, it is loaded from the underlying data store and added to the cache for future use. Unlike the cache-aside pattern, the application is relieved of the responsibility of reading and writing directly to the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Td-ME62E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/read-through.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Td-ME62E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/read-through.png" alt="Diagram of the read-through pattern" width="880" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In most cases, you need to implement a read-through handler provided by the cache, which allows it to read data directly from the database in the event of a cache miss. Here's some pseudocode that demonstrates how it may be done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// register the function that will be executed on cache misses.&lt;/span&gt;
&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmiss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return data from the database&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Actual data from the cache or onmiss handler&lt;/span&gt;
&lt;span class="c1"&gt;// A cache entry is created automatically on cache misses&lt;/span&gt;
&lt;span class="c1"&gt;// through the key and time-to-live values after the data&lt;/span&gt;
&lt;span class="c1"&gt;// is retrieved from the database&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readThrough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like cache-aside, it works well for read-heavy workloads where the same data is requested many times.&lt;/li&gt;
&lt;li&gt;Only requested data is cached, supporting the efficient use of resources.&lt;/li&gt;
&lt;li&gt;This model allows the cache to auto-refresh an object from the database when the data is updated or when the cache entry expires.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The data model in the cache cannot be different from the data model in the database.&lt;/li&gt;
&lt;li&gt;It is not resilient to cache failures, unlike cache-aside.&lt;/li&gt;
&lt;li&gt;Latency may be increased when the requested data is not present in the cache.&lt;/li&gt;
&lt;li&gt;It's possible for the cached data to become stale, but this problem can be solved by using one of the write strategies considered below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Write-through pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the write-through strategy is employed, the cache layer is treated as the main data store for the application. This means that new or updated data is added or updated directly to the cache while the task of persisting the data to the underlying data store is delegated to the cache layer. Both write operations must be completed in a single transaction to prevent the cached data from going out of sync with the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vhrNSXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/write-through-pattern.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vhrNSXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/write-through-pattern.png" alt="The write through pattern" width="880" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following is a pseudocode example of write-through logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customerData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the callback function will be executed after updating the&lt;/span&gt;
  &lt;span class="c1"&gt;// record in the cache&lt;/span&gt;
  &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeThrough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customerData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultTTL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// save updated data to db&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// A variant is of this pattern is when updated in the db first&lt;/span&gt;
&lt;span class="c1"&gt;// and immediately updated in the cache&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customerData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// update the record in the database first&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customerData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// then set or update the record in the cache&lt;/span&gt;
  &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultTTL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data in the cache are never stale by virtue of it being synchronized with the database after each write operation.&lt;/li&gt;
&lt;li&gt;It is suitable for systems that cannot tolerate staleness in the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It adds latency when writing data because more work is being done by writing to the data store first and then to the cache.&lt;/li&gt;
&lt;li&gt;The write operation will fail if the cache layer becomes unavailable.&lt;/li&gt;
&lt;li&gt;The cache may accumulate data that are never read, which wastes resources. This can be mitigated by combining this pattern with the cache-aside pattern or by adding a time-to-live (TTL) policy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Write-behind pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the write-behind pattern (also known as write-back), data is inserted or modified directly in the cache and later asynchronously written to the data source after a configured delay, which could be as brief as a few seconds or as long as several days. The main implication of adopting this caching pattern is that database updates are applied sometime after the cache transaction is completed, which means you have to guarantee that the database writes will be completed successfully or provide a way to roll back the updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFb97Mlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/write-behind.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFb97Mlf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/write-behind.png" alt="The write-behind pattern" width="880" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved write performance compared to write-through since the application does not have to wait for the data to be written to the underlying data store.&lt;/li&gt;
&lt;li&gt;The database load is reduced since multiple writes are often batched into a single database transaction, which can also reduce costs if the number of requests is a factor in the pricing of the database provider.&lt;/li&gt;
&lt;li&gt;The application is somewhat protected against temporary database failures since failed writes can be re-queued.&lt;/li&gt;
&lt;li&gt;It is best suited for write-heavy workloads.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there's a cache failure, the data may be lost permanently. Therefore, it may not be suitable for sensitive data.&lt;/li&gt;
&lt;li&gt;Operations performed directly on the database may utilize stale data since the cache and data store cannot be guaranteed to be consistent at any given point in time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. Refresh-ahead pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the refresh-ahead pattern, frequently accessed cached data is refreshed before they expire. This happens asynchronously so that the application does not feel the effect of a slow read when an object is being retrieved from the data store in the event of its expiry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FnLOkcoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/refresh-ahead.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FnLOkcoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/refresh-ahead.png" alt="The refresh-ahead pattern" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ideal when reading data from the data store is costly.&lt;/li&gt;
&lt;li&gt;Helps to keep frequently accessed cache entries always in sync.&lt;/li&gt;
&lt;li&gt;Ideal for latency sensitive workloads, such as live sports scoring sites and stock market financial dashboards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cache needs to accurately predict which cache items are likely to be needed in the future because inaccurate predictions can incur unnecessary database reads.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cache-eviction-policy"&gt;
  &lt;/a&gt;
  Cache Eviction Policy
&lt;/h3&gt;

&lt;p&gt;The size of a cache is usually limited compared to the size of the database, so it is necessary to store only the items that are needed and remove redundant entries. A cache eviction policy ensures that the cache does not exceed its maximum limit by removing older objects from the cache as new ones are added. There are several eviction algorithms to choose from, and the best one will depend upon the needs of your application.&lt;/p&gt;

&lt;p&gt;When choosing an eviction policy, keep in mind that it isn't always appropriate to apply a global policy to every item in the cache. If a cached object is very expensive to retrieve from the data store, it may be beneficial to retain this item in the cache, regardless of whether is meets the requirements for eviction. A combination of eviction policies may also be required to achieve the optimal solution for your use case. In this section, we'll take a look at some of the most popular algorithms used in production environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Least Recently Used (LRU)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A cache that implements the LRU policy organizes its items in the order of use. Therefore, the most recently used items will be at the top of the cache, while the least recently used ones will be at the bottom. This makes it easy to identify which items should be evicted when it’s time to clean up the cache.&lt;/p&gt;

&lt;p&gt;Every time you access an entry, the LRU algorithm will update the timestamp on the object and move it to the top of the cache. When it's time to evict some items from the cache, it will analyze the state of the cache and remove items at the bottom of the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Least Frequently Used (LFU)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The least frequently used algorithm evicts items from the cache based on how frequently they are accessed. The analysis is performed by incrementing a counter on a cached object each time it is accessed so that it can be compared to other objects when it’s time to evict items from the cache.&lt;/p&gt;

&lt;p&gt;LFU shines in cases where the access patterns of the cached objects do not change often. For example, assets are cached on a CDN based on usage patterns so that the most frequently used objects are never evicted. It also helps to evict items that see a spike in requests at a certain period but whose access frequency drops drastically thereafter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Most Recently Used (MRU)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Most Recently Used eviction policy is essentially the reverse of the LRU algorithm because it also analyzes the cache items based on the recency of their last access. The difference is that it discards the most recently used objects from the cache instead of the least recently used ones.&lt;/p&gt;

&lt;p&gt;A good use case for MRU is when it is unlikely that a recently accessed object will be used again soon. An example could be removing booked flight seats from the cache immediately after booking, as they are no longer relevant for a subsequent booking application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. First In, First Out (FIFO)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A cache that implements FIFO evicts items in the order they were added, without any regard for how often or how many times they were accessed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-expiration"&gt;
  &lt;/a&gt;
  Cache expiration
&lt;/h3&gt;

&lt;p&gt;The expiration policy employed by a cache is another factor that helps determine how long a cached item is retained. The expiration policy is usually assigned to the object when it is added to the cache and is often customized for the type of object being cached. A common strategy involves assigning an absolute time of expiration to each object when it is added to the cache. Once that time elapses, the item is expired and removed from the cache accordingly. This expiration time is chosen based on client requirements, such as how quickly the data change and how tolerant the system is to stale data.&lt;/p&gt;

&lt;p&gt;A sliding expiration policy is another common way to invalidate cached objects. This policy favors the retention items frequently used by the application by extending their expiration time by a specified interval each time they are accessed. For example, an item whose sliding expiration time is 15 minutes will not be removed from the cache as long as it is accessed at least once every 15 minutes.&lt;/p&gt;

&lt;p&gt;You need to be deliberate when choosing a TTL value for cache entries. After the initial implementation of the cache, it is important to monitor the effectiveness of the chosen values so that they may be re-evaluated if necessary. Note that most caching frameworks may not removed expired items immediately for performance reasons. They normally use a scavenging algorithm, which is typically invoked when referencing the cache, looks for expired entries, and flushes them. This prevents having to constantly track expiration events to determine when items should be removed from the cache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching-solutions"&gt;
  &lt;/a&gt;
  Caching solutions
&lt;/h2&gt;

&lt;p&gt;There are multiple ways to implement caching in a web application. Often, once the need to cache is identified, an in-process cache is employed for the task since it is conceptually straightforward, relatively simple to implement, and can yield significant performance improvements with minimal effort. The major downside of in-process caches is that cached objects are limited to the current process alone. If employed in a distributed system with several instances that are load balanced, you'd end up with as many caches as application instances, leading to a cache coherence problem since requests from a client may use newer or older data depending on which server was used to process it. This problem does not apply if you're only caching immutable objects.&lt;/p&gt;

&lt;p&gt;Another shortcoming of in-process caches is that they utilize the same resources and memory space as the application itself. This can cause out-of-memory failures if the upper limits of the cache are not carefully considered while setting it up. In-process caches are also flushed whenever the application is restarted, which causes the downstream dependency to receive more load while the cache is being repopulated. This is an important consideration if a continuous deployment strategy is utilized in your application.&lt;/p&gt;

&lt;p&gt;Many of the issues with in-process caches can be solved by employing a distributed caching solution that offers a single view into the cache, even if it is deployed on a cluster of multiple nodes. This means that cached objects are written to and read from the same place, regardless of the number of servers employed, reducing the occurrence of cache coherence issues. A distributed cache also remains populated during deployments since it is independent of the application itself and uses its own storage space so that you are not limited to the available server memory.&lt;/p&gt;

&lt;p&gt;With that being said, the use of a distributed cache presents its own challenges. It increases system complexity by adding a new dependency that needs to be monitored and scaled appropriately, and it is slower than an in-process cache due to network latency and object serialization. A distributed cache may also be unavailable from time to time (for example, due to maintenance and upgrades), leading to notable performance degradations, especially during periods of prolonged outages. This issue can be mitigated by falling back to an in-process cache if the distributed cache is unavailable.&lt;/p&gt;

&lt;p&gt;In-process caching may be implemented in a Node.js application through libraries, such as &lt;a href="https://github.com/node-cache/node-cache"&gt;node-cache&lt;/a&gt;, &lt;a href="https://github.com/ptarjan/node-cache"&gt;memory-cache&lt;/a&gt;, &lt;a href="https://github.com/kwhitley/apicache"&gt;api-cache&lt;/a&gt;, and others. There is a wide variety of distributed caching solutions, but the most popular ones are &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; and &lt;a href="https://memcached.org/"&gt;Memcached&lt;/a&gt;. They are both in-memory key-value stores and optimal for read-heavy workloads or compute-intensive workloads due to their use of memory rather than the slower on-disk storage mechanisms found in traditional database systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inprocess-caching-with-nodecache"&gt;
  &lt;/a&gt;
  In-process Caching with Node-cache
&lt;/h3&gt;

&lt;p&gt;Below is an example that demonstrates how effective in-process caching can be performed without requiring a convoluted setup process. This simple NodeJS application utilizes &lt;code&gt;node-cache&lt;/code&gt; and the cache-aside pattern discussed earlier in this post to speed up subsequent requests for a list of posts from an external API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NodeCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// stdTTL is the default time-to-live for each cache entry&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodeCache&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stdTTL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// retrieve some data from an API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// try to get the posts from the cache&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;allPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// if posts does not exist in the cache, retrieve it from the&lt;/span&gt;
    &lt;span class="c1"&gt;// original source and store it in the cache&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// time-to-live is set to 300 seconds. After this period&lt;/span&gt;
      &lt;span class="c1"&gt;// the entry for `allPosts` will be removed from the cache&lt;/span&gt;
      &lt;span class="c1"&gt;// and the next request will hit the API again&lt;/span&gt;
      &lt;span class="nx"&gt;myCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;allPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the first request is made to the &lt;code&gt;/posts&lt;/code&gt; route, the cache is empty, so we have to reach out to an external API to retrieve the necessary data. When I tested the response time for the initial request, it took about 1.2 seconds to receive a response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NzoMuHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/initial-request-postman.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NzoMuHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/initial-request-postman.png" alt="Initial request took 1.2 seconds" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After data is retrieved from the API, it is stored in the cache, which causes subsequent requests to take significantly less time to be resolved. In my tests, I consistently got about 20-25 ms response times on subsequent requests, which represents approximately 6,000% performance improvement over making a network request for the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JxQD1ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/subsequent-request-postman.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JxQD1ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/subsequent-request-postman.png" alt="Subsequent requests took 20-25 ms" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-with-redis"&gt;
  &lt;/a&gt;
  Caching with Redis
&lt;/h3&gt;

&lt;p&gt;Redis is pretty much the go-to distributed caching solution for not only Node.js but also other languages. This example showcases how a cache layer may be added to a Node.js application using Redis. Similar to the previous example using &lt;code&gt;node-cache&lt;/code&gt;, the data to be cached will be retrieved from an API.&lt;/p&gt;

&lt;p&gt;Ensure that you have Redis installed before trying out the sample code below. You may follow the &lt;a href="https://redis.io/topics/quickstart"&gt;official quickstart guide&lt;/a&gt; to learn how to get it up and running. Furthermore, make sure to install the necessary dependencies before running the program. This example utilizes the &lt;a href="https://github.com/NodeRedis/node-redis"&gt;node-redis&lt;/a&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisGetAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCovid19Stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://disease.sh/v3/covid-19/all`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/covid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// try to get the data from the cache&lt;/span&gt;
    &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisGetAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;covidStats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// if data is in cache, send data to client&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise, fetch data from API&lt;/span&gt;
    &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getCovid19Stats&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// and store it in Redis. 3600 is the time to live in seconds&lt;/span&gt;
    &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;covidStats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, global COVID-19 statistics are retrieved from an API and returned to the client via the &lt;code&gt;/covid&lt;/code&gt; route. These statistics are cached in Redis for 1 hour (3,600 seconds) to ensure that network requests are kept to a minimum. Redis stores everything as a string, so you have to convert objects to a string with &lt;code&gt;JSON.stringify()&lt;/code&gt; when storing it in the cache and then back to an object with &lt;code&gt;JSON.parse()&lt;/code&gt; after retrieving it from the cache, as shown above.&lt;/p&gt;

&lt;p&gt;Notice how the &lt;code&gt;setex&lt;/code&gt; method is used to store data in the cache instead of the regular &lt;code&gt;set&lt;/code&gt; method. It's preferred here because it allows us to set an expiration time for the cached object. When the set amount of time elapses, Redis will automatically get rid of the object from the cache so that it may be refreshed by calling the API again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jpb9OvxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/redis-test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jpb9OvxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/nodejs-caching/redis-test.png" alt="Testing caching performance with Curl" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-considerations"&gt;
  &lt;/a&gt;
  Other considerations
&lt;/h2&gt;

&lt;p&gt;Here are some general best practices to consider before implementing a cache in your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that the data is cachable and will yield a hit rate high enough to justify the additional resources used to cache it.&lt;/li&gt;
&lt;li&gt;Monitor the metrics of your caching infrastructure (such as hit rates and resource consumption) to ensure that it is appropriately tuned. Use the insights gained to inform subsequent decisions regarding cache size, expiration, and eviction policies.&lt;/li&gt;
&lt;li&gt;Ensure that your system is resilient to cache failure. Deal with scenarios like cache unavailability, cache put/get failures, and downstream errors directly in your code.&lt;/li&gt;
&lt;li&gt;Mitigate security risks by utilizing encryption techniques if sensitive data is retained in the cache.&lt;/li&gt;
&lt;li&gt;Ensure that your application is resilient to changes in the storage format used for cached data. New versions of your app should be able to read the data that a previous version wrote to the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Caching is a complex topic that should not be treated lightly. When implemented correctly, you will reap huge rewards, but it can easily be a source of grief if you adopt the wrong solution. I hope this article has helped steer you in the right direction regarding setting up, managing, and administering your application cache.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
