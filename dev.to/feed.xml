<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Open sourced react eccomerce web app with PayPal checkout </title>
      <author>Abod Micheal (he/him)</author>
      <pubDate>Fri, 20 Aug 2021 22:12:58 +0000</pubDate>
      <link>https://dev.to/abodmicheal/open-sourced-react-eccomerce-web-app-with-paypal-checkout-404b</link>
      <guid>https://dev.to/abodmicheal/open-sourced-react-eccomerce-web-app-with-paypal-checkout-404b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYMpKvsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ser1j3a156ug0fb8cixb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYMpKvsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ser1j3a156ug0fb8cixb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github  - &lt;a href="https://github.com/abodmicheal/React-projects/"&gt;https://github.com/abodmicheal/React-projects/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;live project - &lt;a href="https://abod-zone.web.app"&gt;https://abod-zone.web.app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>react</category>
      <category>javascript</category>
      <category>help</category>
    </item>
    <item>
      <title>Rails on Kubernetes with Minikube and Tilt</title>
      <author>NDREAN</author>
      <pubDate>Fri, 20 Aug 2021 22:09:25 +0000</pubDate>
      <link>https://dev.to/ndrean/rails-on-kubernetes-with-minikube-and-tilt-25ka</link>
      <guid>https://dev.to/ndrean/rails-on-kubernetes-with-minikube-and-tilt-25ka</guid>
      <description>&lt;p&gt;We expose (lengthy) notes on Kubernetes manifests. We use them to deploy a full stack Rails app on a &lt;em&gt;local&lt;/em&gt; Kubernetes cluster, powered by &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;Minikube&lt;/a&gt; with the help of &lt;strong&gt;&lt;a href="https://tilt.dev/"&gt;Tilt&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;no Helm charts, just plain Kubernetes yaml manifests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To orchestrate the containers with Kubernetes, you build and push images and then deploy manually on the local cluster.&lt;br&gt;
We will use Tilt to orchestrate the (local) deployment: it just needs the Dockerfiles, the Kubernetes manifests, and a Tiltfile to conduct the deployment. It also automatically builds the images and recompiles them on code change: a cool tool. You can also add &lt;strong&gt;Starlark&lt;/strong&gt; code.&lt;/p&gt;

&lt;p&gt;In a following post, we will use another tool &lt;strong&gt;&lt;a href="https://www.grucloud.com/"&gt;GruCloud&lt;/a&gt;&lt;/strong&gt;. It is designed to &lt;strong&gt;go live&lt;/strong&gt; in the cloud (you can deploy on Minikube as well). You can select the main providers, AWS EKS or GCC or Azure for example. It uses the more familiar &lt;strong&gt;Javascript&lt;/strong&gt; language instead.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#1-the-demo-app"&gt;1. Demo app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#2-vocabulary"&gt;2. Vocabulary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#3-local-kubernetes-cluster-with-persistent-volumes"&gt;3. Local Kubernetes cluster with persistent volumes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgres"&gt;3.1 Postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-server-nginx"&gt;3.2 Web Server Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redis"&gt;3.3 Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rails"&gt;3.4 Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cable-and-sidekiq"&gt;3.5 Cable and Sidekiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#k8-server"&gt;3.6 Access to the Kubernetes API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#4-run-this-with-tilt"&gt;4. Run with Tilt on a Minikube cluster&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tiltfile"&gt;Tiltfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#job"&gt;Job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tilt-ui"&gt;Tilt UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#k8-dash"&gt;Metrics &amp;amp; Kubernetes dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hpa"&gt;Auto scaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#5-misc-files"&gt;5. Misc files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#1-the-demo-app"&gt;
  &lt;/a&gt;
  1. The Demo app
&lt;/h1&gt;

&lt;p&gt;We want to run on Kubernetes a very simple app to visualise the load-balancing of the pods as scaled. It uses the classic full stack tooling: PostgreSQL, Redis, background job framework Sidekiq, web sockets with ActionCable, and a web server Nginx in front of Rails. It broadcasts the number of page hits and a click counter to any other connected browser. It also connects to the Kubernetes API to broadcast the existing pods-ID: on every new connection (or page refresh), the counters of the existing pods are refreshed and broadcasted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoT1t2tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ererjuy51me62nhw46z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoT1t2tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ererjuy51me62nhw46z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-vocabulary"&gt;
  &lt;/a&gt;
  2. Vocabulary
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h4&gt;

&lt;p&gt;We use a "Deployment" for a stateless processes. This wraps the "ReplicaSet" controller; it guarantees the number of living pods and enables &lt;em&gt;rolling updates&lt;/em&gt; or rolling back. The pods englobe the containers. This Russian doll nesting explains the way manifests are built with matching labels.&lt;/p&gt;

&lt;p&gt;When a pod is deployed with a Deployment, then if you try to delete a pod, a new one will be created because of the ReplicaSet. It will aim to recreate one unless you set the count to zero. You should delete the Deployment instead.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#statefulset"&gt;
  &lt;/a&gt;
  StatefulSet
&lt;/h4&gt;

&lt;p&gt;Stateful processes, typically databases, should be deployed as a &lt;strong&gt;StatefulSet&lt;/strong&gt;. We will use local storage here, but in real life,  we would use network attached storage or cloud volumes or &lt;strong&gt;managed database services&lt;/strong&gt; as databases should be clustered, for high availability and disaster recovery.&lt;br&gt;
This is used because there is a master/slave relation to sync the pods, with a unique indexing. A StatefulSet comes with a &lt;strong&gt;PersistentVolumeClaim&lt;/strong&gt; and a &lt;strong&gt;PersistentVolume&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h4&gt;

&lt;p&gt;A pod needs a service to be able to communicate with the cluster's network. Every service is a load balancer, but unless described with &lt;code&gt;spec.type: NodePort&lt;/code&gt;, all are internal services, of default type &lt;code&gt;ClusterIP&lt;/code&gt;, meaning no access from outside the cluster. &lt;br&gt;
We don't use an Ingress controller. The entry point of the app is via Nginx, thus we want the Nginx service to be external.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ephemeral-volumes-with-pods"&gt;
  &lt;/a&gt;
  Ephemeral volumes with pods
&lt;/h4&gt;

&lt;p&gt;We can illustrate the host based ephemeral volume &lt;code&gt;emptyDir&lt;/code&gt; with the &lt;a href="https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/#example-1-sidecar-containers"&gt;side-car pattern&lt;/a&gt; where Nginx and Rails are in the same pod. They also share the same network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;spec.volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shared-data&lt;/span&gt;
    &lt;span class="na"&gt;emptyDir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;span class="s"&gt;spec.containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:1.21.1-alpine&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shared-data&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/usr/share/nginx/html&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/rails-base&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shared-data&lt;/span&gt;
      &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then just use the 'naked' Nginx official image since the config will be passed with another volume, the &lt;strong&gt;ConfigMap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will use a separate pod for Nginx in front of Rails.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configs"&gt;
  &lt;/a&gt;
  Configs
&lt;/h4&gt;

&lt;p&gt;All environment variables and configs will be set by Kubernetes, thus &lt;a href="https://12factor.net/"&gt;externalised&lt;/a&gt;. Data is passed to the pods with volumes such as  &lt;strong&gt;ConfigMap&lt;/strong&gt; and &lt;strong&gt;Secret&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#readiness-and-liveness"&gt;
  &lt;/a&gt;
  Readiness and Liveness
&lt;/h4&gt;

&lt;p&gt;A pod may need a &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"&gt;readiness&lt;/a&gt; and/or &lt;code&gt;liveness&lt;/code&gt; probe. The first means that we have a signal when the pod is ready to accept traffic, and the second is when a pod is dead or alive. By default, everything is green.&lt;br&gt;
For example, the &lt;code&gt;readiness&lt;/code&gt; probe of the Rails pod sends an  HTTP request to an (internal) endpoint. The method &lt;code&gt;#ready&lt;/code&gt; is &lt;code&gt;render json: { status: 200 }&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/ready&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
    &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HTTP&lt;/span&gt;
  &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
  &lt;span class="na"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[K8s EVENT: Pod rails-dep-58b8b5b48b-7kxp7 (ns: test)] Readiness probe failed: 
Get "http://172.17.0.9:3000/ready": dial tcp 172.17.0.9:3000: connect: connection refused
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h4&gt;

&lt;p&gt;You can monitor the &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"&gt;resources&lt;/a&gt; with the &lt;a href="(https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)"&gt;Kubernetes dashboard&lt;/a&gt;. They  are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU consumption, measured in  vCPU/Core: 100m &amp;lt;=&amp;gt; 0.1%. &lt;/li&gt;
&lt;li&gt;memory, measured in mega-bytes. 
or use the command &lt;code&gt;kubectl describe node minikube&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VSCode Kubernetes extension parser complains (!) if you don't set up limits. You may find the correct values by retroaction. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;25Mi"&lt;/span&gt;
     &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;25m"&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;50m"&lt;/span&gt;
    &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;50Mi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scaling"&gt;
  &lt;/a&gt;
  Scaling
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://v1-18.docs.kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wish to modify the number of replicas of a process, you simply run &lt;code&gt;scale&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl scale deploy sidekiq-dep &lt;span class="nt"&gt;--replicas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
kubectl get rs &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you watch the ReplicaSet working.&lt;/p&gt;

&lt;p&gt;With these measures, but not only, Kubernetes can perform &lt;strong&gt;&lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/"&gt;horizontal autoscaling&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl autoscale deploy rails-dep &lt;span class="nt"&gt;--min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nt"&gt;--max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3 &lt;span class="nt"&gt;--cpu-percent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that Kubernetes can continuously determine if there is a need for more or fewer pods running.&lt;/p&gt;

&lt;p&gt;We can use external metrics;  a popular example is monitoring with Prometheus, and the usage of a Redis queue length to monitor processes like Sidekiq.&lt;/p&gt;

&lt;p&gt;No log collector is implemented here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rolling-update-and-back"&gt;
  &lt;/a&gt;
  Rolling update and back
&lt;/h4&gt;

&lt;p&gt;You can change for example the image used by a container (named  "backend" below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl &lt;span class="nb"&gt;set &lt;/span&gt;image deploy rails-dep &lt;span class="nv"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;usr/rails-base-2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then, check:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl rollout status deploy rails-dep
&lt;span class="c"&gt;#or&lt;/span&gt;
kubectl get rs &lt;span class="nt"&gt;-w&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in case of crash looping, for example, you can roll back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl rollout undo deploy rails-dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also make &lt;a href="https://v1-18.docs.kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments"&gt;canary deployments&lt;/a&gt;  by putting labels.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-local-kubernetes-cluster-with-persistent-volumes"&gt;
  &lt;/a&gt;
  3. Local Kubernetes cluster with persistent volumes
&lt;/h1&gt;

&lt;p&gt;We will use one image named "&lt;a href="#rails-base"&gt;usr/rails-base&lt;/a&gt;" here. For production deployment, we would use the URL of a repository in a container registry (e.g. ECR).&lt;br&gt;
This image is a two stage built image. It is used by Rails, Sidekiq and Cable, with different commands. The Nginx pod will also use it to extract the &lt;a href="#nginx-light"&gt;static assets&lt;/a&gt;, and the migration Job will use it too. It is run without root privileges. In the development mode, we won't tag it since Tilt will timestamp it.&lt;br&gt;
We will also use a "local" Role (i.e. not a ClusterRole) to access to the k8 API.&lt;br&gt;
All the env variables are passed with a ConfigMap or a Secret.&lt;br&gt;
We will set up local volumes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-postgres"&gt;
  &lt;/a&gt;
  3.1 Postgres &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;standard&lt;/code&gt; PV available on the cluster is returned by the command &lt;code&gt;kubectl get storageClass&lt;/code&gt; on the system. This is an important topic in real life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oem29i2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d5udmdbw9avkwx3wa7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oem29i2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d5udmdbw9avkwx3wa7l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will make two PVC:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T8AHxtm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eye296vtr1j6coo65tcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8AHxtm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eye296vtr1j6coo65tcn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and set two StatefulSet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Bb7qXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhl8ew21kgnzg6twaa66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Bb7qXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhl8ew21kgnzg6twaa66.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We bind a Persistent Volume (PV) ( admin role) with a Persistent Volume Claim (PVC) (dev role).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#pg-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-svc&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- must match with the pod&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5432&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- service port opened for Rails&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# the set of pods with the name 'pg' is targeted by this service&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# Deployment&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;StatefulSet&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# about the deployment itself. Gives a name of the DEPLOYMENT&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dep&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# of the deployment&lt;/span&gt;
  &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dep&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# the deployment must match all pods with the label "app: pg"&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# the label for the POD that the deployment is targeting&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt; &lt;span class="c1"&gt;# match spec.template.labels for the pod&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# blue print of a pod&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pod&lt;/span&gt;
      &lt;span class="c1"&gt;# label for the POD that the deployment is deploying&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt; &lt;span class="c1"&gt;# match spec.selector.matchlabels&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pv&lt;/span&gt; &lt;span class="c1"&gt;# must match PV&lt;/span&gt;
          &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pvc&lt;/span&gt; &lt;span class="c1"&gt;# must match PVC&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-container&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:13.3-alpine&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;IfNotPresent"&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;128Mi"&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;50m"&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5432&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(PGDATA)&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pv&lt;/span&gt; &lt;span class="c1"&gt;# must match pv&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
          &lt;span class="na"&gt;envFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configMapRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secretRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# we bind the resource PV to the pod&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pvc&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;#storageClassName: standard&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteMany&lt;/span&gt;
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;100Mi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#pg-db-pv.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-pv&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;storageClassName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;standard&lt;/span&gt;
  &lt;span class="na"&gt;capacity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;150Mi&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteMany&lt;/span&gt;
  &lt;span class="na"&gt;hostPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# for Minikube, emulate net. attached vol.&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/tmp/data"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-webserver-nginx"&gt;
  &lt;/a&gt;
  3.2 Webserver Nginx &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We use the web server image and set an &lt;em&gt;external service&lt;/em&gt; for the Nginx deployment since this is the entry-point of the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#nginx-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-dep&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
  &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;RollingUpdate&lt;/span&gt;
    &lt;span class="na"&gt;rollingUpdate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;maxUnavailable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;maxSurge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/nginx-ws&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Always"&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;frontend&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9000&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;32m"&lt;/span&gt;
              &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;16Mi"&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/etc/nginx/conf.d"&lt;/span&gt; &lt;span class="c1"&gt;# mount nginx-conf volume to /etc/nginx&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-conf&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-conf&lt;/span&gt;
          &lt;span class="na"&gt;configMap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-conf&lt;/span&gt; &lt;span class="c1"&gt;# place ConfigMap `nginx-conf` on /etc/nginx&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myconfig.conf&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default.conf&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-svc&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt; &lt;span class="c1"&gt;# NodePort # LoadBalancer # &amp;lt;- external service&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="c1"&gt;# port exposed by the container&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="c1"&gt;# the port the app is listening on targetPort&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9000&lt;/span&gt;
      &lt;span class="na"&gt;nodePort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;31000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This illustrates the use of a &lt;strong&gt;ConfigMap&lt;/strong&gt; volume to pass the Nginx config via a &lt;strong&gt;mountPath&lt;/strong&gt; into the pod  &lt;a href="(https://docs.nginx.com/nginx/admin-guide/web-server/)"&gt;source&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#nginx-conf.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-conf&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;myconfig.conf&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;upstream puma {&lt;/span&gt;
      &lt;span class="s"&gt;server rails-svc:3000;&lt;/span&gt;
      &lt;span class="s"&gt;keepalive 1024;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;

    &lt;span class="s"&gt;access_log  /dev/stdout main;&lt;/span&gt;
    &lt;span class="s"&gt;error_log   /dev/stdout info;&lt;/span&gt;

    &lt;span class="s"&gt;server {&lt;/span&gt;
      &lt;span class="s"&gt;listen 9000 default_server;&lt;/span&gt;
      &lt;span class="s"&gt;root /usr/share/nginx/html;&lt;/span&gt;
      &lt;span class="s"&gt;try_files  $uri @puma;&lt;/span&gt;
      &lt;span class="s"&gt;access_log  off;&lt;/span&gt;
      &lt;span class="s"&gt;gzip_static on; &lt;/span&gt;
      &lt;span class="s"&gt;expires     max;&lt;/span&gt;
      &lt;span class="s"&gt;add_header  Cache-Control public;&lt;/span&gt;
      &lt;span class="s"&gt;add_header  Last-Modified "";&lt;/span&gt;
      &lt;span class="s"&gt;add_header  Etag "";&lt;/span&gt;

      &lt;span class="s"&gt;location @puma {&lt;/span&gt;
        &lt;span class="s"&gt;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_set_header X-Forwarded-Host $http_host;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_set_header Host $http_host;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_pass_header   Set-Cookie;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_redirect off;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_pass http://puma;&lt;/span&gt;
      &lt;span class="s"&gt;}&lt;/span&gt;

      &lt;span class="s"&gt;location /cable {&lt;/span&gt;
        &lt;span class="s"&gt;proxy_http_version 1.1;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_set_header Upgrade $http_upgrade;&lt;/span&gt;
        &lt;span class="s"&gt;proxy_set_header Connection "Upgrade";&lt;/span&gt;
        &lt;span class="s"&gt;proxy_pass "http://cable-svc:28080";&lt;/span&gt;
      &lt;span class="s"&gt;}&lt;/span&gt;

      &lt;span class="s"&gt;error_page 500 502 503 504 /500.html;&lt;/span&gt;
      &lt;span class="s"&gt;error_page 404             /404.html;&lt;/span&gt;
      &lt;span class="s"&gt;location = /50x.html {&lt;/span&gt;
        &lt;span class="s"&gt;root /usr/share/nginx/html;&lt;/span&gt;
      &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-redis"&gt;
  &lt;/a&gt;
  3.3 Redis &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For the Redis store, we didn't pass a config here. We should have used a ConfigMap.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#redis-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-svc&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6379&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6379&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;client&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;StatefulSet&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-dep&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt; &lt;span class="c1"&gt;# match spec.template.labels&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt; 
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-pod&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt; &lt;span class="c1"&gt;# # match spec.selector.matchLabels&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:6.2.4-alpine&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;IfNotPresent"&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6379&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis-server"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;50m"&lt;/span&gt;
              &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;50Mi"&lt;/span&gt;
          &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis-cli&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ping&lt;/span&gt;
            &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
            &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
            &lt;span class="na"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/data"&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
  &lt;span class="na"&gt;volumeClaimTemplates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt;
      &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ReadWriteMany"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;storageClassName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;standard"&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;100Mi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the PersistentVolume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#redis-pv.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#   type: local&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;storageClassName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hostpath&lt;/span&gt;
  &lt;span class="na"&gt;capacity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;150Mi&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteMany&lt;/span&gt;
  &lt;span class="na"&gt;hostPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# for Minikube, to emulate net. attached vol.&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/data"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-rails"&gt;
  &lt;/a&gt;
  3.4 Rails &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Again, all ENV vars and credentials will be set within Kubernetes. We will use two volumes, a ConfigMap for the ENV vars and a Secret for credentials:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#config.yml&lt;/span&gt;
&lt;span class="c1"&gt;#rails-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pg-svc"&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- name of the service that exposes the Postgres pod&lt;/span&gt;
  &lt;span class="na"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;kubedb"&lt;/span&gt;
  &lt;span class="na"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;production"&lt;/span&gt;
  &lt;span class="na"&gt;RAILS_LOG_TO_STDOUT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;true"&lt;/span&gt;
  &lt;span class="na"&gt;RAILS_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;false"&lt;/span&gt;
  &lt;span class="na"&gt;REDIS_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis://redis-svc:6379/0"&lt;/span&gt;
  &lt;span class="na"&gt;REDIS_SIDEKIQ&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis://redis-svc:6379/1"&lt;/span&gt;
  &lt;span class="na"&gt;REDIS_CACHE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis://redis-svc:6379/2"&lt;/span&gt;
  &lt;span class="na"&gt;REDIS_CABLE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis://redis-svc:6379/3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The credentials need to be  converted  with &lt;code&gt;echo -n 'un-coded-value' | base64&lt;/code&gt;). This can be documented with a manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#secrets.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Secret&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Opaque&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cG9zdGdyZXM=&lt;/span&gt; &lt;span class="c1"&gt;# postgres&lt;/span&gt;
  &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ZG9ja2VycGFzc3dvcmQ=&lt;/span&gt; &lt;span class="c1"&gt;# dockerpassword&lt;/span&gt;
  &lt;span class="na"&gt;RAILS_MASTER_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NWE0YmU0MzVjNmViODdhMWE5NTA3M2Y0YTRjYWNjYTg=&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The manifest of the Rails deployment and its service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#rails-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails-dep&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# must match the service&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# which pods are we deploying&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
  &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;RollingUpdate&lt;/span&gt;
    &lt;span class="na"&gt;rollingUpdate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;maxUnavailable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;maxSurge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# must match service and replicaset matchlabel&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/rails-base&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Always"&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bundle"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;exec"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;rails"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;server"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-b"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0.0.0.0"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;150m"&lt;/span&gt;
              &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;256Mi"&lt;/span&gt;
          &lt;span class="na"&gt;envFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configMapRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secretRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
          &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/ready&lt;/span&gt;
              &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
              &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HTTP&lt;/span&gt;
            &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
            &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
            &lt;span class="na"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails-svc&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt; &lt;span class="c1"&gt;# default type&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="c1"&gt;# port exposed by the service&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="c1"&gt;# the port the app is listening on targetPort&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-cable-and-sidekiq"&gt;
  &lt;/a&gt;
  3.5 Cable and Sidekiq &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The deployment of the "cable" is identical except for the args for the command and port. It has its service to expose the cable pod.&lt;br&gt;
The "worker" deployment is also based on the same image, with its own "command" and "args" but no service is required for the worker since it communicates with Rails via a Redis queue.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#cable"&gt;
  &lt;/a&gt;
  Cable
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#cable-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/rails-base&lt;/span&gt;
      &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Always"&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bundle"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;exec"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;puma"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-p"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;28080"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./cable/config.ru"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28080&lt;/span&gt;
      &lt;span class="na"&gt;envFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configMapRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secretRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
      &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;150m"&lt;/span&gt;
          &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;256Mi"&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable-svc&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt; &lt;span class="c1"&gt;# default type&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="c1"&gt;# port exposed by the service&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28080&lt;/span&gt;
      &lt;span class="c1"&gt;# the port the app is listening on targetPort&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28080&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#sidekiq"&gt;
  &lt;/a&gt;
  Sidekiq:
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#sidekiq-dep.yml&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sidekiq&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/rails-base&lt;/span&gt;
      &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Always"&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bundle"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;exec"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sidekiq"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-C"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./config/sidekiq.yml"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;envFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configMapRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secretRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
      &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;150m"&lt;/span&gt;
          &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;256Mi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can add a &lt;code&gt;liveness&lt;/code&gt; probe by using the gem &lt;a href="https://github.com/arturictus/sidekiq_alive"&gt;sidekiq_alive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#36-calling-the-kubernetes-api"&gt;
  &lt;/a&gt;
  3.6 Calling the Kubernetes API &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As a normal user, we have an &lt;code&gt;admin-user&lt;/code&gt; Service Account and an associated Cluster Role Binding. Within a pod, by default everything is closed, so we need to set a &lt;code&gt;ServiceAccount&lt;/code&gt; credential with the &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;RBAC&lt;/a&gt; policy, with &lt;code&gt;Role&lt;/code&gt;, &lt;code&gt;RoleBinding&lt;/code&gt; and &lt;code&gt;ServiceAccount&lt;/code&gt; to the Sidekiq deployment.&lt;/p&gt;

&lt;p&gt;If we want to call the Kubernetes API (the endpoint of &lt;code&gt;kubectl get ...&lt;/code&gt;) to get data from the cluster within our app, we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;directly access to &lt;a href="https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/#without-using-a-proxy"&gt;the REST API&lt;/a&gt;. The credentials are present in each pod so that we can read them; within a thread or Sidekiq job, we execute a &lt;code&gt;CURL&lt;/code&gt; call to the &lt;code&gt;apiserver&lt;/code&gt;, whose result is parsed and filtered:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sb"&gt;`curl --cacert &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;cacert&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; -H "Authorization: Bearer &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;" https://kubernetes.default.svc/api/... `&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;cacert&lt;/code&gt; is at the TLS level, not at the HTTPS level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;do it &lt;a href="https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/#accessing-the-api-from-within-a-pod"&gt;from within a pod&lt;/a&gt; by tunnelling with &lt;code&gt;kubectl proxy&lt;/code&gt;. Since we need an endpoint, we need to run a side-car pod with a Kubernetes server.  This solution is "more expensive", a Kubernetes server is a 55 Mb &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/"&gt;image&lt;/a&gt; running &lt;code&gt;kubectl proxy --port 8001&lt;/code&gt;. You run a side-car k8 server with Sidekiq and call the endpoint from a Job:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="err"&gt;URI.open(http://localhost:8001/api/v1/namespaces/{namespace}/pods)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that you may take profit from using the &lt;a href="https://www.rubydoc.info/gems/oj/2.17.5"&gt;gem&lt;/a&gt; &lt;code&gt;Oj&lt;/code&gt; for speeding up the JSON parsing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now can run "async" Ruby code to fetch the data within a thread. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCQdzGk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eorgmbhy1zx0rgledxiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCQdzGk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eorgmbhy1zx0rgledxiq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Then to render in the browser, we broadcast the result through a web socket and the listener will mutate a state to render (with React).&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-run-this-with-tilt"&gt;
  &lt;/a&gt;
  4. Run this with TILT
&lt;/h1&gt;

&lt;p&gt;We have Docker, the Kubernetes CLI and Minikube installed. A normal workflow is to build and push images from Dockerfiles, and then let Kubernetes pull and run the manifests that use the images. We can let Tilt do all this for us and be reactive to changes in the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that as a Rails user, you may have the gem "tilt" present, so alias &lt;code&gt;tilt&lt;/code&gt; with "/usr/local/bin/tilt".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#launch-minikube"&gt;
  &lt;/a&gt;
  Launch Minikube
&lt;/h3&gt;

&lt;p&gt;We may want to &lt;strong&gt;namespace&lt;/strong&gt; the project so that you can isolate different versions or modes (staging, prod) and also clean everything easily. We used the utilities &lt;a href="https://github.com/ahmetb/kubectx"&gt;kubectx, kubens&lt;/a&gt; to set the namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl create namespace &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="c"&gt;# use the utility "kubens" from "kubectx" to assign a namespace&lt;/span&gt;
kubens stage-v1

&lt;span class="c"&gt;# check:&lt;/span&gt;
kubens &lt;span class="c"&gt;# =&amp;gt; "stage-v1" marked&lt;/span&gt;
kubectl config get-contexts &lt;span class="c"&gt;# =&amp;gt; Minikube marked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A good practice is to apply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stage-v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use &lt;code&gt;namespace: stage-v1&lt;/code&gt; in the  &lt;code&gt;metadata&lt;/code&gt; of each &lt;code&gt;kind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the project is isolated within a namespace, we can launch Minikube with &lt;code&gt;minikube start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#list-of-files"&gt;
  &lt;/a&gt;
  List of files
&lt;/h4&gt;

&lt;p&gt;Our files are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/app
/config
/public
...
/dckf
   |_  _builder.Dockerfile
   |_  _alpine.Dockerfile
   |_  _nginx.Dockefile
Tiltfile

/kube
  |_ config.yml
  |_ secrets.yml
  |_ nginx-config.yml

  |_ pg-pv.yml
  |_ postgres-dep.yml
  |_ redis-pv.yml
  |_ redis-dep.yml

  |_ rails-dep.yml
  |_ sidekiq-dep.yml
  |_ cable-dep.yml
  |_ nginx-dep.yml

  |_ migrate.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploy"&gt;
  &lt;/a&gt;
  Deploy &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To deploy on the Minikube cluster, once we have built and pulled the images, we run the following commands against all our manifests ❗ in an orderly manner: &lt;strong&gt;first run the configs (and secrets)&lt;/strong&gt; needed by the others processes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; ./kube/config.yml
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; ./kube/secrets.yml
...
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; ./kube/rails-dep.yml
...
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; ./kube/migrate.yml

minikube service nginx-svc &lt;span class="c"&gt;#&amp;lt;- our app entry point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will automate all this with &lt;strong&gt;Tilt&lt;/strong&gt;. The Tilt engine will read a &lt;code&gt;Tiltfile&lt;/code&gt; and build the full project. It only needs the code (the Dockerfiles and the Kubernetes manifests) and one command.&lt;/p&gt;

&lt;p&gt;In this Tiltfile, we describe all the actions we want Tilt and Kubernetes to perform: building images, running manifests and managing dependencies. The one below is a very basic image builder and runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Tilfile
# apply configs and create volumes
&lt;/span&gt;&lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'./kube/config.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'./kube/secrets.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'./kube/nginx-config.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'./kube/pg-db-pv.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# apply databases adapters
&lt;/span&gt;&lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'./kube/postgres-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'./kube/redis-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;- building images and live changes
&lt;/span&gt;&lt;span class="n"&gt;docker_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'builder'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- Bob
&lt;/span&gt;  &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./dckf/builder.Dockerfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;build_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s"&gt;"RUBY_VERSION"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"3.0.2-alpine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s"&gt;"NODE_ENV"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s"&gt;"BUNDLER_VERSION"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2.2.25"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="n"&gt;live_update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'/app/app/'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;docker_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'usr/rails-base'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;- uses Bob
&lt;/span&gt;   &lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;build_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s"&gt;"RUBY_VERSION"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"3.0.2-alpine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      
     &lt;span class="s"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
     &lt;span class="s"&gt;"RAILS_LOG_TO_STDOUT"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'./docker/rails.Dockerfile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;live_update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'/app/app/'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;docker_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usr/nginx-ws"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- uses Bob
&lt;/span&gt;   &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./dckf/nginx-split.Dockerfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;build_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"RUBY_VERSION"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"3.0.2-alpine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;live_update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'/app/app/'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -&amp;gt; end images
&lt;/span&gt;
&lt;span class="c1"&gt;# dependencies
&lt;/span&gt;&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sidekiq-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'redis-dep'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pg-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'redis-dep'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cable-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'redis-dep'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'nginx-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# apply processes
&lt;/span&gt;&lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'./kube/rails-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'./kube/sidekiq-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'./kube/cable-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./kube/nginx-dep.yml'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;- creates manual/auto action button in the Tilt GUI
# migration
&lt;/span&gt;&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'db-migrate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'pg-dep'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="n"&gt;trigger_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIGGER_MODE_MANUAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;auto_init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./kube-split/migrate.yml'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# auto (&amp;amp;manual) display pods in GUI
&lt;/span&gt;&lt;span class="n"&gt;local_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'All pods'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;'kubectl get pods'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'sidekiq-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'cable-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'nginx-dep'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# -&amp;gt; 
&lt;/span&gt;
&lt;span class="n"&gt;allow_k8s_contexts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'minikube'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'nginx-dep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port_forwards&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'31000'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the two stage build: the image is only build once even if reused four times. Notice also the &lt;code&gt;live_update&lt;/code&gt; to synchronise the code between the host and the container.&lt;/p&gt;

&lt;p&gt;To run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tilt up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or all in one (unless you need to create the Postgres database): run the Docker daemon (&lt;code&gt;open -a Docker&lt;/code&gt; on OSX)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;minikube start &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; kubectl create ns &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; kubens &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tilt up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to &lt;code&gt;migrate&lt;/code&gt; (see below), and with our settings, we can navigate to &lt;a href="http://localhost:31000"&gt;http://localhost:31000&lt;/a&gt; to visualise the app.&lt;/p&gt;

&lt;p&gt;For a quick clean up, run (as &lt;code&gt;docker-compose down&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tilt down
&lt;span class="c"&gt;#or&lt;/span&gt;
kubectl delete ns &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#dependencies-ordering"&gt;
  &lt;/a&gt;
  Dependencies ordering
&lt;/h5&gt;

&lt;p&gt;We specified resources dependencies with &lt;code&gt;k8s_resource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migration-job"&gt;
  &lt;/a&gt;
  Migration Job  &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The topic of performing safe migrations is a very important subject of its own (new migration on old code, old migration with new code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every time you stop Minikube and Tilt, you need to run a migration.  You can an &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;initContainer&lt;/a&gt; that &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#init-containers-in-use"&gt;waits for the db&lt;/a&gt;, or a &lt;strong&gt;Job&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#migrate.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;batch/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Job&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db-migrate&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db-migrate&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/rails-base&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IfNotPresent&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bundle"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;exec"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;rails"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;db:migrate"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;envFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secretRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configMapRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run &lt;code&gt;k8s_yaml('./kube/migrate.yml')&lt;/code&gt; to apply this.&lt;br&gt;
Alternatively, you can do this programatically with Tilt with &lt;code&gt;k8s_resource&lt;/code&gt; where you specify the needed dependencies, and then &lt;code&gt;apply&lt;/code&gt; with &lt;code&gt;k8s_yaml&lt;/code&gt;.&lt;br&gt;
Below is an example of the manual custom &lt;code&gt;db-migrate&lt;/code&gt; action. With the two last flags, we have an action button in the GUI to trigger this migration when ready.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;k8s_resource&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'db-migrate'&lt;/span&gt;, 
   &lt;span class="nv"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;'rails-dep'&lt;/span&gt;,&lt;span class="s1"&gt;'pg-dep'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
   &lt;span class="nv"&gt;trigger_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;TRIGGER_MODE_MANUAL,
   &lt;span class="nv"&gt;auto_init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False
&lt;span class="o"&gt;)&lt;/span&gt;
k8s_yaml&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./kube-split/migrate.yml'&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48p2tbwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvjfnif2y7pxqf9872uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48p2tbwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvjfnif2y7pxqf9872uj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[K8s EVENT: Pod db-migrate-vh459 (ns: test)] Successfully pulled image "/rails-base" in 1.481341763s
Migrating to CreateCounters (20210613160256)
== 20210613160256 CreateCounters: migrating ===================================
-- create_table(:counters)
   -&amp;gt; 0.4681s
== 20210613160256 CreateCounters: migrated (0.4694s) ==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If needed, run &lt;code&gt;kubectl delete job db-migrate&lt;/code&gt; to be able to run the job.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-raw-localresource-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;local_resource&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;If we want to list automatically the Rails pods, we add a "local_resource" in the Tiltfile. As such, it will be run automatically when Rails is ready. This will also add a button in the UI that we can rerun on demand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;local_resource&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Rails pods'&lt;/span&gt;,
   &lt;span class="s2"&gt;"kubectl get pods -l app=rails -o go-template --template '{{range .items}}{{.metadata.name}}{{&lt;/span&gt;&lt;span class="se"&gt;\"\n\"&lt;/span&gt;&lt;span class="s2"&gt;}}{{end}}' -o=name "&lt;/span&gt;,
   &lt;span class="nv"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;'rails-dep'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tilt-ui"&gt;
  &lt;/a&gt;
  Tilt UI &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The Tilt UI comes in two flavours:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a terminal, essentially an easy log collector
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0VQRsD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezauq0i6fa3u7f0ka1sc.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;a nice GUI at "&lt;a href="http://localhost:10350"&gt;http://localhost:10350&lt;/a&gt;" from which you can for example easily read the logs or trigger rebuilds. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dgor1uZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i64z6xkc61gz735aht06.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubernetes-dashboard"&gt;
  &lt;/a&gt;
  Kubernetes dashboard &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To enable the Kubernetes dashboard, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;minikube addons list
minikube addons &lt;span class="nb"&gt;enable &lt;/span&gt;dashboard
minikube addons &lt;span class="nb"&gt;enable &lt;/span&gt;metrics-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;minikube dashboard&lt;/code&gt; shows the full state of the cluster. Just select the namespace. We can see the logs for each pod, and the resource consumption, globally and per process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iy_WX6ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aldsrxgt664g3yayrvw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iy_WX6ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aldsrxgt664g3yayrvw9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5gQZS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7o79clp849ptdeerbwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5gQZS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7o79clp849ptdeerbwb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resources-with-raw-kubectl-endraw-"&gt;
  &lt;/a&gt;
  Resources with &lt;code&gt;kubectl&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl describe node minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;gives the details of the resource usage of the cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C89dylWr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucxgmlrnw9q0yyex3rog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C89dylWr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucxgmlrnw9q0yyex3rog.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hpa"&gt;
  &lt;/a&gt;
  HPA &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Once we have the measures, we can start to autopilot selected processes with &lt;strong&gt;HorizontalPodAutoscaler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can run the command &lt;code&gt;kubectl autoscale&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;local_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hpa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="s"&gt;'kubectl autoscale deployment rails-dep --cpu-percent=80 --min=1 --max=3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="n"&gt;trigger_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRIGGER_MODE_MANUAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;auto_init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or apply the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#rails-hpa.yml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails-hpa&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails-dep&lt;/span&gt;
  &lt;span class="na"&gt;minReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;maxReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="c1"&gt;#targetCPUUtilizationPercentage: 80&lt;/span&gt;
  &lt;span class="na"&gt;metrics&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resource&lt;/span&gt;
    &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cpu&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Utilization&lt;/span&gt;
        &lt;span class="na"&gt;averageUtilization&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;k8s_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./kube/rails-hpa.yml'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;k8s_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rails-hap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource_deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rails-dep'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use simple &lt;a href="#load-tests"&gt;load tests&lt;/a&gt; to check.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-misc-files"&gt;
  &lt;/a&gt;
  5. Misc files
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#cheat-sheet"&gt;
  &lt;/a&gt;
  &lt;a href="https://kubernetes.io/fr/docs/reference/kubectl/cheatsheet/"&gt;Cheat sheet&lt;/a&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# waiting pods checking&lt;/span&gt;
kubectl get pods &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; wide

&lt;span class="c"&gt;# follow the logs of a pod&lt;/span&gt;
kubectl logs rails-nginx-dep-1231313 &lt;span class="nt"&gt;-c&lt;/span&gt; rails &lt;span class="nt"&gt;-f&lt;/span&gt;

&lt;span class="c"&gt;# delete a deployment (pod+svc+replicaset) or job&lt;/span&gt;
kubectl delete deploy rails-dep
kubectl delete job db-migrate

&lt;span class="c"&gt;# launch a browser&lt;/span&gt;
minikube service rails-nginx-svc   &lt;span class="c"&gt;# !! OSX !!&lt;/span&gt;

&lt;span class="c"&gt;# launch the Kubernetes dashboard&lt;/span&gt;
minikube dashboard

&lt;span class="c"&gt;# ssh into the VM (user docker, private key)&lt;/span&gt;
minikube ssh

&lt;span class="c"&gt;# generate a token which grants admin permissions:&lt;/span&gt;
kubectl &lt;span class="nt"&gt;--namespace&lt;/span&gt; kubernetes-dashboard describe secret &lt;span class="si"&gt;$(&lt;/span&gt;kubectl &lt;span class="nt"&gt;-n&lt;/span&gt; kubernetes-dashboard get secret | &lt;span class="nb"&gt;grep &lt;/span&gt;admin-user | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $1}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# ssh&lt;/span&gt;
ssh &lt;span class="nt"&gt;-i&lt;/span&gt; ~/.minikube/machines/minikube/id_rsa docker@&lt;span class="si"&gt;$(&lt;/span&gt;minikube ip&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# get programmatically info&lt;/span&gt;
kubectl get service nginx-svc &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{.spec.ports[0].nodePort}'&lt;/span&gt;

&lt;span class="c"&gt;# execute a command in a pod with several containers (name it with "-c")&lt;/span&gt;
kubectl &lt;span class="nb"&gt;exec &lt;/span&gt;it &lt;span class="nt"&gt;-rails-nginx-dep-1234&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; rails &lt;span class="nt"&gt;--&lt;/span&gt; irb
  irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:001:0&amp;gt; require &lt;span class="s1"&gt;'socket'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Socket.gethostname
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"rails-nginx-dep-55bc5f77dc-48wg4"&lt;/span&gt;

&lt;span class="c"&gt;# execute a command in a pod &lt;/span&gt;
kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; pg-dep-0 &lt;span class="nt"&gt;--&lt;/span&gt; psql &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="nt"&gt;-U&lt;/span&gt; postgres
kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; redis-dep-0  &lt;span class="nt"&gt;--&lt;/span&gt; redis-cli

&lt;span class="c"&gt;# rolling update by setting a new image to a deployment&lt;/span&gt;
kubectl &lt;span class="nb"&gt;set &lt;/span&gt;image deployment/rails-dep usr/rails-base2

&lt;span class="c"&gt;# check&lt;/span&gt;
kubectl rollout status deployment/rails-dep

&lt;span class="c"&gt;# undo in case of a problem&lt;/span&gt;
kubectl rollout undo depoyment/rails-dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builder"&gt;
  &lt;/a&gt;
  Builder &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ARG &lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.0.2-alpine
FROM ruby:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.0.1-alpine&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; AS builder

ARG BUNDLER_VERSION
ARG NODE_ENV
ARG RAILS_ENV
RUN apk &lt;span class="nt"&gt;-U&lt;/span&gt; upgrade &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   postgresql-dev nodejs yarn build-base tzdata
ENV PATH /app/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
WORKDIR /app
COPY Gemfile Gemfile.lock package.json yarn.lock ./
ENV &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C.UTF-8 &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="nv"&gt;BUNDLE_JOBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4 &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="nv"&gt;BUNDLE_RETRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3 &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="nv"&gt;BUNDLE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'vendor/bundle'&lt;/span&gt; 
RUN gem &lt;span class="nb"&gt;install &lt;/span&gt;bundler:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUNDLER_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;--no-document&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle config &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;--without&lt;/span&gt; &lt;span class="s1"&gt;'development test'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--quiet&lt;/span&gt; 
RUN yarn &lt;span class="nt"&gt;--check-files&lt;/span&gt; &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn cache clean
COPY &lt;span class="nb"&gt;.&lt;/span&gt; ./
RUN bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails webpacker:compile assets:clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rails-dockerfile"&gt;
  &lt;/a&gt;
  Rails Dockerfile &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;FROM builder AS bob
FROM ruby:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.0.2-alpine&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

ARG RAILS_ENV
ARG NODE_ENV
ARG RAILS_LOG_TO_STDOUT

RUN apk &lt;span class="nt"&gt;-U&lt;/span&gt; upgrade &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  libpq tzdata netcat-openbsd &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# -disabled-password doesn't assign a password, so cannot login&lt;/span&gt;
RUN adduser &lt;span class="nt"&gt;--disabled-password&lt;/span&gt; app-user
USER app-user

COPY &lt;span class="nt"&gt;--from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bob &lt;span class="nt"&gt;--chown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app-user /app /app
&lt;span class="c"&gt;# COPY --from=builder  /app /app&lt;/span&gt;

ENV &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RAILS_ENV&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="nv"&gt;RAILS_LOG_TO_STDOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RAILS_LOG_TO_STDOUT&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="nv"&gt;BUNDLE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'vendor/bundle'&lt;/span&gt;

WORKDIR /app
RUN &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webserver-dockerfile"&gt;
  &lt;/a&gt;
  Web-server Dockerfile &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#_nginx-ws.Dockerfile&lt;/span&gt;
FROM ndrean/builder AS bob
FROM nginx:1.21.1-alpine

COPY &lt;span class="nt"&gt;--from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bob  ./app/public /usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-load-test"&gt;
  &lt;/a&gt;
  Simple load test &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can run a simple load test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;--tty&lt;/span&gt; load-generator &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;busybox &lt;span class="nt"&gt;--restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Never &lt;span class="nt"&gt;--&lt;/span&gt; /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"while sleep 0.01; do wget -q -O- http://localhost:31000; done"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have a domain, we can also use the "ab" Apache Bench: we test here how fast the app can handle 1000 requests, with a maximum of 50 requests running concurrently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-n&lt;/span&gt; 100 &lt;span class="nt"&gt;-c&lt;/span&gt; 10 https://my-domain.top/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href=""&gt;⬆️&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[sources]: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learndocker.online/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/user/Kamakazihoer"&gt;Youtube-Marcel-Dempers&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=X48VuDVv0do"&gt;Youtube-Techworld-with-Nana&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Introducing Slim 4</title>
      <author>Cherif BOUCHELAGHEM</author>
      <pubDate>Fri, 20 Aug 2021 20:45:52 +0000</pubDate>
      <link>https://dev.to/cherif_b/introducing-slim-4-55j9</link>
      <guid>https://dev.to/cherif_b/introducing-slim-4-55j9</guid>
      <description>&lt;p&gt;Slim framework is a PHP micro framework that could be used to write web applications and web services APIs, unlike other known frameworks like, Symfony, CakePHP or Laravel, Slim doesn’t have any opinion on what templating engine or what ORM should be used, all it provides is a routing system that takes a web request and returns a response depending on the application logic behind the route.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-initialization-using-composer"&gt;
  &lt;/a&gt;
  Application initialization using Composer
&lt;/h2&gt;

&lt;p&gt;The article assumes that composer is already installed and the reader knows how to use it in the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;slim-from-scratch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;slim-from-scratch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;composer init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is it possible to leave the default answers for the composer questions in the command line.&lt;br&gt;
A composer.json file should be created with the entered value from the command line.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-classes-autoloading-in-composerjson"&gt;
  &lt;/a&gt;
  Configure classes autoloading in composer.json
&lt;/h2&gt;

&lt;p&gt;Depending on the composer installed version, a &lt;code&gt;src&lt;/code&gt; folder can be created and the autoloading is configured, form me is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cherif/slim-from-scratch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"psr-4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Cherif\\SlimFromScratch\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"authors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Cherif BOUCHELAGHEM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cherif.bouchelaghem@gmail.com"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The autoloading should be added as above, if the autoloading was not generated automatically, just change &lt;code&gt;Cherif&lt;/code&gt; which is my vendor name by your vendor name.&lt;/p&gt;

&lt;p&gt;Once the autoload key in composer is configured the following command must be run in order to expose our code to compose autoloader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;composer dumpautoload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-slim-4"&gt;
  &lt;/a&gt;
  Install Slim 4
&lt;/h2&gt;

&lt;p&gt;Installing Slim framework 4 is easy as running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;composer require slim/slim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-first-request-handler"&gt;
  &lt;/a&gt;
  The first request handler
&lt;/h2&gt;

&lt;p&gt;In its heart Slim 4 is a &lt;code&gt;PSR-15&lt;/code&gt; middleware dispatcher, it takes a &lt;code&gt;PSR-7&lt;/code&gt; request message and returns a &lt;code&gt;PSR-7&lt;/code&gt; response message using a request handler.&lt;br&gt;
The request handler is just a callback function for a given route that could be in the following signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;RequestInterface&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ResponseInterface&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Do whatever we want with the request and return a response&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, &lt;code&gt;RequestInterface&lt;/code&gt; and &lt;code&gt;ResponseInterface&lt;/code&gt; are provided by the PSR package.&lt;/p&gt;

&lt;p&gt;To see this in action, create a &lt;code&gt;public&lt;/code&gt; folder in the project root and add an &lt;code&gt;index.php&lt;/code&gt; file that will act as the main file for the Slim application.&lt;br&gt;
For now the &lt;code&gt;index.php&lt;/code&gt; can have the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__DIR__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Psr\Http\Message\RequestInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Psr\Http\Message\ResponseInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Slim\Factory\AppFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AppFactory&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;RequestInterface&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ResponseInterface&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello from Slim 4 request handler'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above is short and self explanatory:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;use …&lt;/code&gt; is for the dependencies.&lt;br&gt;
&lt;code&gt;$app = AppFactory::create();&lt;/code&gt; is where the Slim application is instantiated&lt;br&gt;
&lt;code&gt;app-&amp;gt;get ...&lt;/code&gt; is to configure the routes, here we have just a one GET route.&lt;br&gt;
&lt;code&gt;$app-&amp;gt;run&lt;/code&gt; runs the application and returns a response.&lt;/p&gt;

&lt;p&gt;To run the application use your local web server of choice.&lt;br&gt;
I like to use the PHP built in static server like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ php -S localhost:8000 -t public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command line is executed from the root folder of the folder to point the server to the public folder.&lt;br&gt;
When visiting &lt;code&gt;http://localhost:8000/&lt;/code&gt; in the browser an exception should be throwing in the console saying:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Uncaught RuntimeException: Could not detect any PSR-17 ResponseFactory implementations. Please install a supported implementation in order to use `AppFactory::create()`.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The exception says that Slim could not be run without providing a &lt;code&gt;PSR-17&lt;/code&gt; implementation, let’s install one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-raw-laminaslaminasdiactoros-endraw-for-psr7-and-psr17-implementations"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;laminas/laminas-diactoros&lt;/code&gt; for PSR-7 and PSR-17 implementations
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;PSR-7&lt;/code&gt; and &lt;code&gt;PSR-17&lt;/code&gt; are PHP HTTP messages standards proposed by the community; we can find several implementations for them out there.&lt;br&gt;
&lt;code&gt;laminas/laminas-diactoros&lt;/code&gt; is one of the implementations that I usually use, it can be installed using composer as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;composer require laminas/laminas-diactoros
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when the browser page is refreshed, the application response &lt;code&gt;Hello from Slim 4 request handler&lt;/code&gt; should be printed.&lt;/p&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

</description>
      <category>php</category>
      <category>slim</category>
      <category>framework</category>
      <category>routing</category>
    </item>
    <item>
      <title>How to add Geo Location Search with AWS Amplify and ElasticSearch</title>
      <author>Matt Marks 🐣 </author>
      <pubDate>Fri, 20 Aug 2021 20:23:41 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-add-geo-location-search-with-aws-amplify-and-elasticsearch-22e7</link>
      <guid>https://dev.to/aws-builders/how-to-add-geo-location-search-with-aws-amplify-and-elasticsearch-22e7</guid>
      <description>&lt;p&gt;ElasticSearch is a powerful tool that allows flexible searches based on all kinds of parameters, which also happens to include geospatial data.&lt;/p&gt;

&lt;p&gt;It just so happens that AWS Amplify supports ElasticSearch with a few commands and with a little bit of tweaking, we can modify CloudFormation to integrate Geo Locations.&lt;/p&gt;

&lt;p&gt;I'll walk you throw how to use Amplify and GraphQL Api via AppSync to set up ElasticSearch for geo searches.&lt;/p&gt;

&lt;blockquote&gt;This tutorial assumes you have some familiarity with Amplify and have already initiated a project&lt;/blockquote&gt;



&lt;h2&gt;Step 1:&lt;/h2&gt;

&lt;h4&gt;Add an Establishment Type w/ @searchable directive and type GPS&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Establishment&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;searchable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;gps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GPS&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GPS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
  &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;Float&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;: amplify api push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(This usually takes about 15-20 minutes as its waiting for the deployment of the ElasticSearch instance)&lt;/p&gt;

&lt;p&gt;What happens here is Amplify creates resources for your ElasticSearch instance, including a lambda function (in python) that will process data from a DynamoDB stream and insert the data into ElasticSearch.&lt;/p&gt;

&lt;p&gt;If you're unfamiliar with DynamoDB streams, they're notifications/callbacks that occur when records are created, updated or deleted. These streams can trigger multiple AWS services, including Lambda&lt;/p&gt;

&lt;p&gt;If your curious about the python function Amplify creates in order to insert data in ElasticSearch, go unzip the file here : &lt;code&gt;amplify/api/your-api-name/build/functions/ElasticSearchStreamingLambdaFunction.zip&lt;/code&gt; &lt;/p&gt;

&lt;h2&gt;Step 2&lt;/h2&gt;

&lt;h4&gt;Update Access Policy for ElasticSearch / Kibana&lt;/h4&gt;

&lt;p&gt;Go to the ElasticSearch console in AWS and click Modify Access Policy&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-swNqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613329625887/wZuQ3y3AB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-swNqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613329625887/wZuQ3y3AB.png" alt="elasticsearch-accessplicy-add.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm3dJFF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613329721778/njDvRn8-p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm3dJFF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613329721778/njDvRn8-p.png" alt="elasticsearch-access-policy.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "es:*",
      "Resource": "arn:aws:es:us-east-1:&amp;lt;AWS-ACCOUNT-ID&amp;gt;:domain/amplify-elasti-fw023i2ikk3/*"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;🚨 WARNING 🚨&lt;/h4&gt;

&lt;p&gt;This will grant full access to ANYONE and this should only be used in the development process.  For this project, I'll scope these permission down to my auth/unauth roles from Cognito and IAM afterwards.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::&amp;lt;AWS-ACCOUNT-ID&amp;gt;:role/amplify-restaurantreviewapp-dev-000000-authRole"
      },
      "Action": "es:*",
      "Resource": "arn:aws:es:us-east-1:&amp;lt;AWS-ACCOUNT-ID&amp;gt;:domain/amplify-elasti-w023i2ikk3/*"
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Step 3:&lt;/h2&gt;

&lt;h4&gt;Create ElasticSearch mappings for Geo Coordinates&lt;/h4&gt;

&lt;p&gt;In order to search by coordinates in ElasticSearch, we have to tell it specifically which fields from our DB are considered &lt;code&gt;geo_point&lt;/code&gt;, so that it can index them to be queried by lat, lon.  &lt;/p&gt;

&lt;p&gt;There's a couple ways you can add this mapping to our ElasticSearch index, including directly from the Kibana Console.  The problem with adding our mapping directly in Kibana is that it can be overwritten after deployments, forcing us to manually add our &lt;code&gt;geo_point&lt;/code&gt; after each new build.  &lt;/p&gt;

&lt;p&gt;There's a 100% chance I would forget to do that some point 😳 &lt;/p&gt;

&lt;p&gt;Instead, we're going to add a post deployment lambda to our &lt;code&gt;amplify/backend/api/your-api-name/stacks/CustomResources.json&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Add the following to the Resources block: &lt;a href="https://gist.github.com/duwerq/3483dcbeadd2b7a38d1e488763547547"&gt;gist here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside that gist, you'll see an inline python function under &lt;code&gt;ConfigureES&lt;/code&gt;.  The important line to notice here is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;\&lt;span class="s"&gt;"mappings&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: {&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;doc&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: {&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;properties&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: {&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;gps&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: {&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;geo_point&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;}}}}}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a mapping for a field from DynamoDB called &lt;code&gt;gps&lt;/code&gt; that takes a &lt;code&gt;geo_point&lt;/code&gt; type value, which is lat, lon.&lt;/p&gt;

&lt;p&gt;Now it's time to deploy our new lambda function, so run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;: amplify api push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Before we go any further, I have to give a lot of credit to&lt;br&gt;
&lt;a href="https://twitter.com/ramonpostulart"&gt;Ramon Postulart&lt;/a&gt;  and his commentor  &lt;a href="https://twitter.com/williamsross"&gt;Ross Williams &lt;/a&gt;  in this  &lt;a href="https://dev.to/aws-builders/the-guide-to-implement-geo-search-in-your-react-native-app-with-aws-amplify-1m82"&gt;article on Geo Search with Amplify&lt;/a&gt;.  Ross's comment in this article was the inspiration and base for the code I shared in the gist, so thanks to the both of you 🙏🏻 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Step 4:&lt;/h2&gt;

&lt;h4&gt;Create Query findEstablishments and attach the ElasticSearch data source in CustomResources along with VTL templates&lt;/h4&gt;

&lt;p&gt;When we added the @searchable directive in Step 1, Amplify created a Query called searchEstablishments, which is awesome for keyword searching values or doing calculations or other search combinations.  It won't have the logic for searching by gps though, so we have to add it manually by creating a Query called &lt;code&gt;findEstablishments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the to your schema.graphql:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;findEstablishments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FindEstablishmentsInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SearchableEstablishmentConnection&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws_iam&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws_cognito_user_pools&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GPS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
  &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;GPSInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;GPSQueryInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GPSInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;FindEstablishmentsInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;byGPS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GPSQueryInput&lt;/span&gt;
  &lt;span class="nx"&gt;byPlaceID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
  &lt;span class="nx"&gt;nextToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SearchableEstablishmentConnection&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws_iam&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws_cognito_user_pools&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Establishment&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;nextToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to go back to our &lt;code&gt;CustomResources.json&lt;/code&gt; and add a resolver for findEstablishments that's attached to ElasticSearch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"FindEstablishmentsResolver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS::AppSync::Resolver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ApiId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"Ref"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AppSyncApiId"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"DataSourceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ElasticSearchDomain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"FieldName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"findEstablishments"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"TypeName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"RequestMappingTemplateS3Location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"Fn::Sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"s3://${S3DeploymentBucket}/${S3DeploymentRootKey}/resolvers/${ResolverFileName}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"S3DeploymentBucket"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Ref"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"S3DeploymentBucket"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"S3DeploymentRootKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Ref"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"S3DeploymentRootKey"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"ResolverFileName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Fn::Join"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"findEstablishments"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"req"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vtl"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ResponseMappingTemplateS3Location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"Fn::Sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"s3://${S3DeploymentBucket}/${S3DeploymentRootKey}/resolvers/${ResolverFileName}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"S3DeploymentBucket"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Ref"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"S3DeploymentBucket"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"S3DeploymentRootKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Ref"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"S3DeploymentRootKey"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"ResolverFileName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Fn::Join"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Query"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"searchEstablishments"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"res"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vtl"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ElasticSearch data source (&lt;code&gt;"DataSourceName": "ElasticSearchDomain"&lt;/code&gt;) was created for us by @searchable directive, so we're just referencing it by name.&lt;/p&gt;

&lt;p&gt;If you looked carefully, you'll see I used &lt;code&gt;["Query", "searchEstablishments", "res", "vtl"]&lt;/code&gt; for the response mapping template, instead of &lt;code&gt;["Query", "findEstablishments", "res", "vtl"]&lt;/code&gt;.  Amplify already generated an appropriate response template for ElasticSearch with &lt;code&gt;searchEstablishments&lt;/code&gt;, so instead of writing it again, we're pointing to the searchEstablishments response.&lt;/p&gt;

&lt;p&gt;Next up, we need to create our resolver template for findEstablishments.  Create a file at &lt;code&gt;amplify/api/&amp;lt;your-api-name&amp;gt;/resolvers/Query.findEstablishments.req.vtl&lt;/code&gt; and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;$indexPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/establishment/doc/_search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byGPS&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;must&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;match_all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}))&lt;/span&gt;
  &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;geo_distance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;distance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;${context.args.input.byGPS.radius}km&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byGPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gps&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_geo_distance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byGPS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;distance_type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultIfNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultIfNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2017-02-28&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;operation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$indexPath&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$from&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;size&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, let's give it a push&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;: amplify api push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Step 5:&lt;/h2&gt;

&lt;h4&gt;Searching Locations&lt;/h4&gt;

&lt;p&gt;Now that we have a Query called findEstablishments that's attached to ElasticSearch, let's test it out.  First, we need to create an Establishment with gps data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;createEstablishment(input:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;id:&lt;/span&gt;&lt;span class="s2"&gt;"test-restaurant"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Test Raustaurant"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;gps:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;lat:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;41.88337459649123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;lon:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-87.69204235097645&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;gps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;lat&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;lon&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to query byGPS (Radius is in kilometers):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;findEstablishments(input:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;byGPS:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;gps:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;lat:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;41.86260812331178&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;lon:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-87.79148237035405&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;radius:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;gps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;lat&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;lon&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And drumrollllllll please, the final results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"findEstablishments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cc7ea996-1568-4ef7-a640-bd4136eb88f9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"gps"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"lat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;41.88337459649123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"lon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-87.69204235097645&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Mbl0kpk4i9G2GCQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Mbl0kpk4i9G2GCQ/giphy.gif" alt="Party time!"&gt;&lt;/a&gt;&lt;br&gt;
That's right, we got ourselves a Geo Location search with AWS Amplify and ElasticSearch working y'all, give yourself a pat on the back!  &lt;/p&gt;

&lt;p&gt;Hope you enjoyed this tutorial and for more Amplify and Serverless content, follow me on twitter &lt;a href="//twitter.com/andthensumm"&gt;@andthensumm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>elasticsearch</category>
      <category>amplify</category>
      <category>graphql</category>
    </item>
    <item>
      <title>React Router &amp; multi-page apps</title>
      <author>IsaacCodes2021</author>
      <pubDate>Fri, 20 Aug 2021 20:21:28 +0000</pubDate>
      <link>https://dev.to/isaaccodes2021/react-router-multi-page-apps-3o41</link>
      <guid>https://dev.to/isaaccodes2021/react-router-multi-page-apps-3o41</guid>
      <description>&lt;p&gt;The main function of this blog is to help me remember the process of building a multi page react app &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react-router"&gt;
  &lt;/a&gt;
  What is react router
&lt;/h3&gt;

&lt;p&gt;React router is short hand for a NPM package react-router-dom that allows developers like yourself to build out multi page application through a practice called client side routing. Typically servers handle web routing, react router gives the illusion of a normal web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  getting started
&lt;/h3&gt;

&lt;p&gt;after you have created your app using npm create-react-app double check if react-router-dom is installed with:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm i react-router-dom&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;next you will need to import the following code into your index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after you have imported browser router some modification will need to be made to the body of the file&lt;br&gt;
the BrowserRouter tags need to wrap around the App component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="na"&gt;here&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="na"&gt;and&lt;/span&gt; &lt;span class="na"&gt;here&lt;/span&gt;
  &lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;React&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
  document.getElementById('root')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;note: browser router is a parent component and can only have one child&lt;/p&gt;

&lt;p&gt;This will also need to add this import to your App.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;next we will create the body of our app and for sake of ease we will only have two routes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/pathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;YourComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/anotherpathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;YourOtherComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the first thing thats happening in the code above is the implementation of the Browswer router tags, next we use the switch tags to which allows us to switch between different routes&lt;/li&gt;
&lt;li&gt;the routes are where we specify our path that will be differentiate the different pages in our app. Inside the rout you can store the component that you want to display on the path you specified in the Route tag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;now we will go over and build the components that we specified in App.js&lt;br&gt;
in all the components you will need to import the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The general structure of your these components are all the same and will&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome Home!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/pathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;your component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/annotherpathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;your other component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;YourComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome to YourComponent&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/pathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;other component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;YourOtherComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome to YourOtherComponent&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/annotherpathname"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;your other component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it, a basic functioning react app with multiple pages! you now have access to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/home&lt;/li&gt;
&lt;li&gt;/annotherpathname&lt;/li&gt;
&lt;li&gt;/pathname&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>One-Tap Deployments with Nginx and Docker: Configuring for Load Balancing ⚖</title>
      <author>Paula Fahmy</author>
      <pubDate>Fri, 20 Aug 2021 19:46:29 +0000</pubDate>
      <link>https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-configuring-for-load-balancing-56b</link>
      <guid>https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-configuring-for-load-balancing-56b</guid>
      <description>&lt;p&gt;Welcome back, in the &lt;a href="https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-introduction-to-reverse-proxies-156c"&gt;previous article&lt;/a&gt;, we briefly introduced reverse proxies, and how we could use some of them, namely &lt;strong&gt;Nginx&lt;/strong&gt;, to load balance our app, for an &lt;strong&gt;easier scale-out and serving&lt;/strong&gt;. We also concluded the final architecture we'll be after as our final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIrEGC2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za9stwfg77e0yvx51lf6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIrEGC2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za9stwfg77e0yvx51lf6.jpg" alt="Target Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we'll jump right into the basics of &lt;strong&gt;Nginx&lt;/strong&gt;, so first up, make sure you have it installed on your machine.&lt;/p&gt;

&lt;p&gt;Once you have it installed, we can navigate to the configuration folder where all the magic really happens. Start off by navigating to this path &lt;code&gt;/etc/nginx/&lt;/code&gt; (if you're on Linux), you should be able to see an &lt;code&gt;nginx.conf&lt;/code&gt; file, launch it using your favorite text editor, and let's have a look in there.&lt;br&gt;
The file is not empty, and it has some default configurations already set, lets delete everything and start from scratch.&lt;/p&gt;

&lt;p&gt;We will learn today &lt;strong&gt;3 basic setups&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Serving local files&lt;/li&gt;
&lt;li&gt;Serving a hosted URL&lt;/li&gt;
&lt;li&gt;Accessing multiple instances through &lt;strong&gt;Load Balancing&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#serving-local-files"&gt;
  &lt;/a&gt;
  Serving Local Files
&lt;/h2&gt;

&lt;p&gt;The basic skeleton of a &lt;code&gt;nginx.conf&lt;/code&gt; file should (in most scenarios) contain these two directives.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll leave &lt;code&gt;events&lt;/code&gt; empty for now and focus on the other directive, &lt;code&gt;http&lt;/code&gt; which is where we'll be configuring &lt;strong&gt;Nginx as an HTTP server&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we continue, note that we'll be stopping and starting Nginx multiple times whenever we apply changes to the &lt;code&gt;conf&lt;/code&gt; file, so if Nginx is not already running, run it using &lt;code&gt;nginx&lt;/code&gt; command. &lt;br&gt;
If it is already running and we need to restart it, we'll have to stop it using &lt;code&gt;nginx -s stop&lt;/code&gt; command, and then start it once again using &lt;code&gt;nginx&lt;/code&gt;. &lt;br&gt;
If you're on Linux make sure that you are running these commands in an elevated grant using &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's add an HTTP server, which listens on port &lt;strong&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file, restart Nginx and navigate to &lt;code&gt;localhost:8080&lt;/code&gt;, you should be able to see the following welcome screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXyNp-Kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ogwliss0r4sk90qvf7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXyNp-Kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ogwliss0r4sk90qvf7y.png" alt="Welcome screen of Nginx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nginx has pulled this static HTML file from a default path because we've not yet set any. We'll be setting one now, I created a simple HTML file called &lt;code&gt;index.html&lt;/code&gt; in a folder called &lt;code&gt;Nginx_Article&lt;/code&gt; on the Desktop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    CUSTOM NGINX PAGE, YAY!
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its full path should be &lt;strong&gt;&lt;code&gt;/home/{myusername}/Desktop/Nginx_Article/&lt;/code&gt;&lt;/strong&gt;, remember I'm using Linux, so this path might be a little bit different in your case, also don't forget to replace &lt;code&gt;{myusername}&lt;/code&gt; with your account's username (without the curly braces of course).&lt;br&gt;
Now let's configure Nginx to point to this web page when we hit port number &lt;code&gt;8080&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/home/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;myusername&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="n"&gt;/Desktop/Nginx_Article/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kn"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restart Nginx and reload &lt;code&gt;localhost:8080&lt;/code&gt;, and you should be able to see our &lt;code&gt;index.html&lt;/code&gt; nicely served.&lt;/p&gt;

&lt;p&gt;Now, let's go &lt;strong&gt;a level higher&lt;/strong&gt;, what if we've got multiple directories that need to be served, not just a single root?&lt;br&gt;
Easy,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/images&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/home/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;myusername&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="n"&gt;/Desktop/Nginx_Article_Another_Directory/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

               &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/videos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/another/root/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kn"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used the &lt;code&gt;root&lt;/code&gt; directive inside a &lt;code&gt;location&lt;/code&gt; directive, this setup will ask Nginx to serve this directory: &lt;code&gt;/home/{myusername}/Desktop/Nginx_Article_Another_Directory/images&lt;/code&gt; in case &lt;code&gt;localhost:8080/images&lt;/code&gt; was requested.&lt;/p&gt;

&lt;p&gt;Don't forget to create the directory on your machine, and maybe add some images to test requesting them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; The directory &lt;code&gt;/images&lt;/code&gt; should have an &lt;code&gt;index.html&lt;/code&gt; file to be served by default &lt;strong&gt;OR&lt;/strong&gt; you'll have to ask for a specific file, for example: &lt;code&gt;localhost:8080/images/cat.jpg&lt;/code&gt;, and if no files are saved in &lt;code&gt;/images&lt;/code&gt;, the previous request will return &lt;strong&gt;forbidden status&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another way of path mapping is using the &lt;strong&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/strong&gt; directive as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/documents&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;/home/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;myusername&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="n"&gt;/Desktop/Nginx_Article_Another_Directory/top_secret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kn"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;alias&lt;/strong&gt; directive will ask Nginx to serve this directory: &lt;code&gt;home/{myusername}/Desktop/Nginx_Article_Another_Directory/top_secret&lt;/code&gt; in case &lt;code&gt;localhost:8080/documents&lt;/code&gt; was requested.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-summarize"&gt;
  &lt;/a&gt;
  🧾 Let's Summarize
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;In case of &lt;code&gt;alias&lt;/code&gt; directory, we have to provide the full path to which Nginx was supposed to navigate, on the other hand, the &lt;code&gt;root&lt;/code&gt; directory just had the root path of the directory, and the location value is to be appended to that path.&lt;/li&gt;
&lt;li&gt;There is no actual directory named &lt;code&gt;/documents&lt;/code&gt; inside &lt;code&gt;Nginx_Article_Another_Directory&lt;/code&gt;, we are just creating an &lt;strong&gt;"alias"&lt;/strong&gt; for the directory &lt;code&gt;/top_secret&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#serving-a-hosted-url"&gt;
  &lt;/a&gt;
  Serving a hosted URL
&lt;/h2&gt;

&lt;p&gt;Let's say we're building a reverse proxy to &lt;strong&gt;&lt;a href="http://www.example.com"&gt;www.example.com&lt;/a&gt;&lt;/strong&gt;, we want users to view the site from our own domain, this could be done easily through the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://www.example.com/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try navigating to &lt;code&gt;localhost:8080&lt;/code&gt; after restarting Nginx, you should be able to see the exact same page as that of example.com.&lt;/p&gt;

&lt;p&gt;This could be used the same way when serving a locally hosted application (in our case, &lt;strong&gt;the backend application&lt;/strong&gt;) that's accessible through port &lt;strong&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/strong&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://127.0.0.1:5000/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-multiple-instances-through-load-balancing"&gt;
  &lt;/a&gt;
  Accessing multiple instances through load balancing
&lt;/h2&gt;

&lt;p&gt;For this use case, we are going to deploy a simple Hello World app, with minimal setup, all you'll need is a working Docker setup on your machine.&lt;br&gt;
Head down to your favorite terminal app, and spin up 3 instances of the same app, each on its &lt;strong&gt;own container&lt;/strong&gt;, we'll be using the &lt;strong&gt;"helloworld" Docker Image&lt;/strong&gt;, which is exposed internally on port &lt;code&gt;80&lt;/code&gt;, when requested, it will print the Id of the container for the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;foo@bar:~$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 1111:80 &lt;span class="nt"&gt;-d&lt;/span&gt; strm/helloworld-http
&lt;span class="go"&gt;478405720f2106d718edb1602812528ae53011cb196dc3731447c64d0bd8f2ff

&lt;/span&gt;&lt;span class="gp"&gt;foo@bar:~$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 1112:80 &lt;span class="nt"&gt;-d&lt;/span&gt; strm/helloworld-http
&lt;span class="go"&gt;a374ce45bf07b9747573e7feb1ae9742e72d2a31d74c2da3caa43abd5586a108

&lt;/span&gt;&lt;span class="gp"&gt;foo@bar:~$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 1113:80 &lt;span class="nt"&gt;-d&lt;/span&gt; strm/helloworld-http
&lt;span class="go"&gt;422efc18f418772cb96ea6088f2f801854ad4da21436da2c485f3ef80cca20ec
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt; that docker prints the ID of each container after each run command, also notice that we deployed 3 instances of the app, each accessible from outside its housing container through ports &lt;strong&gt;&lt;code&gt;:1111&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;:1112&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;:1113&lt;/code&gt;&lt;/strong&gt;. So for example, to navigate to the first instance of the app, you'll need to head to &lt;code&gt;localhost:1111&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;Now let's play with the &lt;code&gt;conf&lt;/code&gt; file to set it up to balance an incoming load over our 3 instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;allinstances&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1112&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1113&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://allinstances/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like we've added a new directive to our deck, &lt;code&gt;upstream&lt;/code&gt;, where our &lt;code&gt;proxy_pass&lt;/code&gt; now points at.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;upstream&lt;/code&gt; defines a cluster that you can proxy requests to. It's commonly used for defining a web server cluster for load balancing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, this tells Nginx to &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Round-robin_scheduling"&gt;Round-Robin&lt;/a&gt;&lt;/strong&gt; each incoming request so that each server serves an equal number of requests. Each time you hit the refresh button, you are going to be greeted with a different server.&lt;/p&gt;

&lt;p&gt;You could get creative with the location directive, maybe you'd want to split users down to two &lt;code&gt;proxy_passes&lt;/code&gt;, so &lt;code&gt;/odd&lt;/code&gt; would navigate to &lt;code&gt;1111&lt;/code&gt; or &lt;code&gt;1113&lt;/code&gt;, and &lt;code&gt;/even&lt;/code&gt; would navigate to port &lt;code&gt;1112&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What if your application is saving user data in memory? You'd then need to make a user's session "sticky" by hashing IP addresses of the users so that a given user is guaranteed to hit the same server as long as his IP address did not change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;allinstances&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;ip_hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;&amp;lt; Will hash the user's IP address and resolve to a single server&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1112&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1113&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the &lt;code&gt;ip_hash&lt;/code&gt; command, no matter how much you refresh the page, you'll always be served by the same server.&lt;/p&gt;

&lt;p&gt;I think you now have the basics that can get you up and going. In our &lt;a href="https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-serving-your-web-cluster-w-compose-29f6"&gt;next article&lt;/a&gt; we will be packaging the whole setup into containers (including Nginx) and deploying it through a single &lt;code&gt;docker-compose&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;I'd like to end this one with a small but powerful quote by Oscar Wilde, &lt;strong&gt;“Experience is the name everyone gives to their mistakes.”&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Keep up the good work 🚀. &lt;/p&gt;

</description>
      <category>nginx</category>
      <category>docker</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>One-Tap Deployments with Nginx and Docker: Introduction to Reverse Proxies</title>
      <author>Paula Fahmy</author>
      <pubDate>Fri, 20 Aug 2021 19:46:04 +0000</pubDate>
      <link>https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-introduction-to-reverse-proxies-156c</link>
      <guid>https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-introduction-to-reverse-proxies-156c</guid>
      <description>&lt;p&gt;Yes, you read the title right, and it is what you think. If you've got minimal knowledge about Docker, you've certainly spelled out the famous Docker command &lt;strong&gt;&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/strong&gt;, toss it with a &lt;code&gt;.yaml&lt;/code&gt; file, grouping an &lt;strong&gt;Nginx image&lt;/strong&gt; along with your &lt;strong&gt;application's image&lt;/strong&gt; and you've got yourself a running server.&lt;br&gt;
Of course, there would be some configurations left to do for the machine to start receiving requests from the outside world, but we'll focus more on how to get the engine running internally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-up-to"&gt;
  &lt;/a&gt;
  What we're up to?
&lt;/h2&gt;

&lt;p&gt;Ok, so here's what we're up to, we've got a web application, and we want to deploy and serve the whole setup, hassle-free with one click (&lt;em&gt;disclaimer: not including those to configure the setup&lt;/em&gt; 😄).&lt;br&gt;
As you might already know, to be able to access the app from the outside, we need a &lt;strong&gt;"webserver"&lt;/strong&gt;, these can be any of (but not limited to) the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Server&lt;/li&gt;
&lt;li&gt;IIS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nginx (we'll choose this one)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm going to start by giving you a brief introduction about &lt;strong&gt;Nginx&lt;/strong&gt; and what it can actually do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nginx"&gt;
  &lt;/a&gt;
  What is Nginx
&lt;/h2&gt;

&lt;p&gt;"Nginx is a web server that can also be used as a reverse proxy, load balancer, mail proxy, and HTTP cache." Igor Sysoev, the creator of the software, has publicly released it in 2004, and with its &lt;strong&gt;open-source license&lt;/strong&gt;, you can certainly use it for free.&lt;br&gt;
In the last paragraph, I introduced to this peaceful article a couple of new terminologies that you either have not heard about before or might have heard about them without knowing what they actually are. Let's discuss some of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proxies"&gt;
  &lt;/a&gt;
  Proxies
&lt;/h3&gt;

&lt;p&gt;A Proxy is basically a server that &lt;strong&gt;requests on behalf of the client (you)&lt;/strong&gt;, in other words, the destination server (for instance, google.com) would receive the request not from you, but from the proxy server you're using.&lt;br&gt;
I could think of multiple reasons why any network setup would benefit from this technology.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6y1xOH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzetrtztgh7vpgi8bik0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6y1xOH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzetrtztgh7vpgi8bik0.jpg" alt="Normal Setup vs Proxy Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what are the benefits of a Proxy?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the top of my head, a proxy would instantly &lt;strong&gt;hide your IP address&lt;/strong&gt;, keeping you anonymous to the receiving end.&lt;/li&gt;
&lt;li&gt;A proxy could also cache the results of your requests, so instead of traveling all the way to the destination server, a proxy in the middle would go: "Hmmm, I think you've requested the weather 5 mins ago, here you go, it is still burning hot at 42°, no need to ask Google again."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind, Nginx &lt;strong&gt;is not&lt;/strong&gt; a proxy, read on...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverse-proxies"&gt;
  &lt;/a&gt;
  Reverse Proxies
&lt;/h3&gt;

&lt;p&gt;A Reverse Proxy on the other hand is &lt;em&gt;the opposite&lt;/em&gt; of a proxy.&lt;br&gt;
In case of a Proxy, the Server doesn't know the client, but in case of a Reverse Proxy, the client doesn't know the server, it is basically the other way around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yMHQXya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3bd78213y0no489vxyw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yMHQXya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3bd78213y0no489vxyw.jpg" alt="Reverse Proxy Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what are the benefits of a Proxy?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Load Balancing&lt;/strong&gt;, which could be configured in multiple ways to ensure that running servers would distribute tasks in order to serve more users. In the previous example, Google had two servers, but only one responded, the other one could've been serving another user, or it might've been having a nap, it doesn't matter as long as the request has been served. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Caching&lt;/strong&gt; works the other way around too. Google's Reverse Proxy would go: "Hmmm, I think you've just asked about the weather, nope, still 42°." without even passing the request to the actual Google servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the main catch here is that (for most of the scenarios) a &lt;strong&gt;Proxy is installed and utilized by the Client&lt;/strong&gt; whereas a &lt;strong&gt;Reverse Proxy is installed and utilized by the Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before we continue, I want to point out that &lt;strong&gt;Hussein Nasser&lt;/strong&gt; made an &lt;a href="https://www.youtube.com/watch?v=SqqrOspasag"&gt;awesome video&lt;/a&gt; explaining the differences between Proxies and Reverse Proxies in an intuitive way, be sure to quickly watch it for an even better grasp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-final-architecture-were-after"&gt;
  &lt;/a&gt;
  The final architecture we're after
&lt;/h2&gt;

&lt;p&gt;After that brief intro, I think we are now aware that Nginx would be the server of choice, and what comes free with Nginx you ask? Yes, &lt;strong&gt;Load Balancing&lt;/strong&gt;. So let me try to capture the architecture we'll be going after in the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VF7JKhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s57z8ocbuvozxtzkuc1v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VF7JKhhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s57z8ocbuvozxtzkuc1v.jpg" alt="Target Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have figured out already, the architecture contains basically 3 main components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client (end-user)&lt;/li&gt;
&lt;li&gt;A Database (hosted somewhere we don't care about for our context)&lt;/li&gt;
&lt;li&gt;Our &lt;strong&gt;Backend Server&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;This will be running 3 docker containers, 

&lt;ul&gt;
&lt;li&gt;Each having an instance of our backend application

&lt;ul&gt;
&lt;li&gt;Each app is accessible through an internal port number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We'll also be running an &lt;strong&gt;Nginx Server&lt;/strong&gt; pointing at each of the 3 instances in an attempt to access them through a load-balanced behavior (we'll discuss multiple approaches) from outside the Linux machine. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/paulafahmy/one-tap-deployments-with-nginx-and-docker-configuring-for-load-balancing-56b"&gt;upcoming article&lt;/a&gt;, I'll talk in detail about Nginx, and how to correctly configure it to our needs. See you on the other side of the world 🚀😄.&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>docker</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>RoadMap to dive into the world of Machine Learning</title>
      <author>Mansi Saxena</author>
      <pubDate>Fri, 20 Aug 2021 19:23:11 +0000</pubDate>
      <link>https://dev.to/saxenamansi/roadmap-to-dive-into-the-world-of-machine-learning-5179</link>
      <guid>https://dev.to/saxenamansi/roadmap-to-dive-into-the-world-of-machine-learning-5179</guid>
      <description>&lt;p&gt;If you've been reading about the amazing advancements in the world of Artificial Intelligence and Machine Learning but feel overwhelmed by its complexity, this post is just for you! After reading this blog, you should have a clear understanding of how to embark on this journey of learning Machine Learning the right way, so stick with me till the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;First things first, what are the pre-requisites of learning Machine Learning? Just knowing the programming languages are not enough; you must know the mathematics behind each algorithm too. The important topics one must familiarize themselves with are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linear Algebra &lt;/li&gt;
&lt;li&gt;Calculus&lt;/li&gt;
&lt;li&gt;Statistics&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have a mathematical background, &lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; is a good place to get started on the basics. This Coursera Specialization, &lt;a href="https://www.coursera.org/specializations/mathematics-machine-learning"&gt;Mathematics for Machine Learning&lt;/a&gt; is also a good resource if you can devote long hours for MOOCs. Other resources are mentioned in these links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://analyticsindiamag.com/7-top-linear-algebra-resources-for-machine-learning-beginners/"&gt;For Linear Algebra&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.analyticsvidhya.com/resource-statitics/"&gt;For Statistics&lt;/a&gt;&lt;br&gt;
&lt;a href="https://machinelearningmastery.com/calculus-books-for-machine-learning/"&gt;For Calculus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with Calculus, I would recommend you to go through one of the books given in the link above and understand the basics of differentiation and integration as it is essential to the path to becoming a Machine Learning expert. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-fundamentals"&gt;
  &lt;/a&gt;
  Coding fundamentals
&lt;/h2&gt;

&lt;p&gt;Once you have gotten confident with your math, shift your focus to the coding part. Many languages are used for writing Machine Learning programs, like Python, R, Java and so on. However, python is the most recommended because of its several libraries and frameworks that have simplified the task of writing complex code. Another reason I would recommend Python is because there are far more Machine Learning tutorials written in python than there are in R. Thus, it is easier for a python programmer to get help from the data science community than an R programmer. However, R is also known for its various data visualization libraries. Thus, there is no harm in learning both languages and utilizing their best features. You can always learn one and move to the next. For a beginner, I would recommend python. &lt;/p&gt;

&lt;p&gt;There are several resources to learn basic python but my favorite one is this Coursera specialization, &lt;a href="https://www.coursera.org/specializations/python"&gt;Python for Everybody&lt;/a&gt; by Charles Russell Severance of University of Michigan. If this does not suit you, you may try other resources given in this &lt;a href="https://mikkegoes.com/learn-python-online-best-resources/"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voila, you finally have all the pre-requites you need to get started on your journey into the world of Machine Learning!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-the-first-step"&gt;
  &lt;/a&gt;
  Taking the first step
&lt;/h2&gt;

&lt;p&gt;The first step is to complete these two renowned courses. One will teach you about the Mathematics behind each Machine Learning algorithm by none other than the great Andrew NG, and the other one will focus on the programming part. You may choose to do them simultaneously. Take your time with them as this will lay the foundations for this field.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/machine-learning?"&gt;Machine Learning by Andrew NG&lt;/a&gt;, Stanford University. You do not have to buy the course; you may audit it too. Just focus on watching all the videos in this course. There is also a YouTube playlist with all the videos in this course which I will link &lt;a href="https://www.youtube.com/playlist?list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN"&gt;here&lt;/a&gt;. If you really are a ML-nerd, you'll be hooked on this course! (PS: if you do not know who Andrew NG is, google him RIGHT NOW, you won't regret it ;). &lt;/li&gt;
&lt;li&gt;The second course is &lt;a href="https://dev.toPython%20for%20Data%20Science%20and%20Machine%20Learning%20Bootcamp"&gt;Python for Data Science and Machine Learning Bootcamp&lt;/a&gt; by Jose Portilla. This course can be a little heavy as it is introduces you to all the major programming concepts used in Machine Learning. So take your time with it and keep trying out the codes and functions taught in the course yourself, just listening to videos will not help much until you get your hands dirty. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#getting-your-hands-dirty"&gt;
  &lt;/a&gt;
  Getting your hands dirty
&lt;/h2&gt;

&lt;p&gt;While coding, if you get stuck with an error and you are unable to solve it, search the error on &lt;a href="https://stackoverflow.com/"&gt;stack overflow&lt;/a&gt;. There would definitely be someone who has been in your shoes before and has suffered through the error that you are facing now. Read through the answers and solutions that others have suggested to solve the error. On the off chance that the error you are facing is not encountered by anyone else, post your own query. Don't be shy; you'd be surprised at how beginner-friendly and helpful the data science community is. After all - everyone was once a beginner. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-what-you-learnt-starting-with-some-baby-projects"&gt;
  &lt;/a&gt;
  Applying what you learnt - Starting with some baby projects
&lt;/h2&gt;

&lt;p&gt;After completing these courses, you can safely say that you now have a good understanding of the classical algorithms! You can now start working on some baby projects. Find datasets on Kaggle that interest you and put your newly learnt python skills to use. You may also try going through the code that other developers have written. However, some of it might be too complex - so do not be too hard on yourself if you are unable to understand all of it. With each dataset that you work with, you will learn new functions and concepts of data cleaning, data augmentation, preprocessing, data encoding and so on. &lt;/p&gt;

&lt;p&gt;The codes of some of the baby projects that I had made are on my GitHub. They should be easy to follow, not too complex. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saxenamansi/HR_Analytics_Employee_Retention"&gt;HR Analytics Employee Retention using Logistic Regression&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Breast_Cancer_DecisionTree_Classifier"&gt;Breast Cancer Classification using Decision Trees&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Data_Cleaning_Preprocessing/blob/main/DataCleaningPreprocessing.ipynb"&gt;Cleaning Student Profile Data&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Healthcare_dataset_pandas_preprocessing"&gt;Preprocessing and Cleaning Stroke Data&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Recognizing_Hand_Written_Digits"&gt;Recognizing Hand Written Digits using PCA and SVM techniques&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Credit_Card_Data_Clustering"&gt;Clustering Credit Card Data using Gaussian Mixtures and PCA&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/KMeans_Clustering_Of_GeoLocationsns"&gt;Clustering Geo-Locations using K-Means clustering&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/ImageProcessing_using_Numpy_Matplotlib"&gt;Using Numpy and Matplotlib for Image Processing&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Australian-fires%20(Visualisation).ipynb"&gt;Data Visualization of Australian Wildfires&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Mushroom%20classification%20-%20project.ipynb"&gt;Comparing the classification algorithms for Mushroom Classification&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/C4-projects/blob/master/CreditCard%20fraud%20-%20classification.ipynb"&gt;Comparing the classification algorithms for Credit Card Frauds&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/C4-projects/blob/master/Household%20-electricity-consumption.ipynb"&gt;Data Visualization and Comparing the classification algorithms for Household Electricity Consumption&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Math_Portugese_course.ipynb"&gt;Data Visualization and Comparing the classification algorithms for grades of Maths and Portuguese class students&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would urge you to first try them yourselves, and then check my codes for reference. Whenever you come across a new function, read the documentation and check what it does. Make sure you understand all of it. &lt;/p&gt;

&lt;p&gt;And that's it! &lt;/p&gt;

&lt;p&gt;With this, you should now have a concrete understanding of the Machine Learning algorithms and how to use them. You should also be fairly acquainted with some data cleaning, data preprocessing and data visualization techniques. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-learning-the-path-after-machine-learning"&gt;
  &lt;/a&gt;
  Deep Learning - the path after Machine Learning
&lt;/h2&gt;

&lt;p&gt;If you have found the journey up till now interesting, you may dive into the Deep Learning as well. The best way to do so is by getting started with this in-depth &lt;a href="https://www.coursera.org/specializations/deep-learning"&gt;Deep Learning specialization by Andrew NG&lt;/a&gt;. It will require some dedication as it consists of 5 courses, but it is very thorough and you will not need any material apart from this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-path-from-here-to-becoming-a-data-scientist"&gt;
  &lt;/a&gt;
  Your path from here to becoming a Data Scientist
&lt;/h2&gt;

&lt;p&gt;When you start on this path of Data Science, you must be aware that in this domain, learning never stops. Once you complete the above specialization you can continue on this path by - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Participating in Kaggle competitions.&lt;/li&gt;
&lt;li&gt;Reading the best research papers in the topics from your interest. &lt;/li&gt;
&lt;li&gt;Doing more MOOCs from Coursera. I would recommend the courses from the DeepLearning.ai foundation.&lt;/li&gt;
&lt;li&gt;Start working on your own projects. Try developing them into products for common users to use. You may also try publishing it in a reputed journal. &lt;/li&gt;
&lt;li&gt;Share your knowledge with the world - help other beginners on stack overflow and write blogs. &lt;/li&gt;
&lt;li&gt;Push your work to GitHub for others to learn from. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do like this post if it helped you. If you have any other suggestions or recommendations, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Happy Learning! &amp;lt;3 &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Running Containerized Microservices on AWS | AWS White Paper Summary
</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 20 Aug 2021 19:17:57 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/running-containerized-microservices-on-aws-aws-white-paper-summary-54o8</link>
      <guid>https://dev.to/awsmenacommunity/running-containerized-microservices-on-aws-aws-white-paper-summary-54o8</guid>
      <description>&lt;ul&gt;
&lt;li&gt;This whitepaper is intended for architects and developers who want to run containerized applications at scale in production on Amazon Web Services (AWS). &lt;/li&gt;
&lt;li&gt;&lt;p&gt;This document provides guidance for application lifecycle management, security, and architectural software design patterns for container-based applications on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also discusses architectural best practices for adoption of containers on AWS, and how traditional software design patterns evolve in the context of containers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It leverages Martin Fowler’s principles of microservices and map them to the twelve-factor app pattern and real-life considerations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After reading this paper, you will have a starting point for building microservices using best practices and software design patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microservices are an architectural and organizational approach to software development in which software is composed of small, independent services that communicate to each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are diﬀerent ways microservices can communicate, but the two commonly used protocols are HTTP request/response over well-deﬁned APIs, and lightweight asynchronous messaging.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microservices architectures make applications easier to scale and faster to develop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This enables innovation and accelerates time-to-market for new features. Containers also provide isolation and packaging for software, and help you achieve more deployment velocity and resource density.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As proposed by Martin Fowler, the characteristics of a microservices architecture include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Componentization via services&lt;/li&gt;
&lt;li&gt;Organized around business capabilities&lt;/li&gt;
&lt;li&gt;Products not projects&lt;/li&gt;
&lt;li&gt;Smart endpoints and dumb pipes&lt;/li&gt;
&lt;li&gt;Decentralized governance&lt;/li&gt;
&lt;li&gt;Decentralized data management&lt;/li&gt;
&lt;li&gt;Infrastructure automation&lt;/li&gt;
&lt;li&gt;Design for failure&lt;/li&gt;
&lt;li&gt;Evolutionary design&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The twelve factors are a set of best practices for building modern applications that are optimized for cloud computing. The twelve factors cover four key areas: deployment, scale, portability, and architecture:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Codebase - One codebase tracked in revision control, many deploys&lt;/li&gt;
&lt;li&gt;Dependencies - Explicitly declare and isolate dependencies&lt;/li&gt;
&lt;li&gt;Conﬁg - Store conﬁgurations in the environment&lt;/li&gt;
&lt;li&gt;Backing services - Treat backing services as attached resources&lt;/li&gt;
&lt;li&gt;Build, release, run - Strictly separate build and run stages&lt;/li&gt;
&lt;li&gt;Processes - Execute the app as one or more stateless processes&lt;/li&gt;
&lt;li&gt;Port binding - Export services via port binding&lt;/li&gt;
&lt;li&gt;Concurrency - Scale out via the process model&lt;/li&gt;
&lt;li&gt;Disposability - Maximize robustness with fast startup and graceful shutdown&lt;/li&gt;
&lt;li&gt;Dev/prod parity - Keep development, staging, and production as similar as possible&lt;/li&gt;
&lt;li&gt;Logs - Treat logs as event streams&lt;/li&gt;
&lt;li&gt;Admin processes - Run admin/management tasks as one-oﬀ processes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#componentization-via-services"&gt;
  &lt;/a&gt;
  Componentization Via Services
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In a microservices architecture, software is composed of small independent services that communicate over well-deﬁned APIs.&lt;/li&gt;
&lt;li&gt;An analogy can be drawn to the Walkman portable audio cassette players that were popular in the 1980s: batteries bring power, audio tapes are the medium, headphones deliver output, while the main tape player takes input through key presses. Using them together plays music.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly, microservices need to be decoupled, and each should focus on one functionality. Additionally, a microservices architecture allows for replacement or upgrade. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the Walkman analogy, if the headphones are worn out, you can replace them without replacing the tape player. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Through modularization, microservices oﬀer developers the freedom to design each feature as a black box. That is, microservices hide the details of their complexity from other components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any communication between services happens by using well-deﬁned APIs to prevent implicit and hidden dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container images allow for modularity in services. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They are constructed by building functionality onto a base image. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers, operations teams, and IT leaders should agree on base images that have the security and tooling proﬁle that they want. These images can then be shared throughout the organization as the initial building block. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replacing or upgrading these base images is as simple as updating the FROM ﬁeld in a Dockerﬁle and rebuilding, usually through a Continuous Integration/Continuous Delivery (CI/CD) pipeline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are the key factors from the twelve-factor app pattern methodology that play a role in componentization:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies (explicitly declare and isolate dependencies) – Dependencies are self-contained within the container and not shared with other services.&lt;/li&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – Disposability is leveraged and satisﬁed by containers that are easily pulled from a repository and discarded when they stop running.&lt;/li&gt;
&lt;li&gt;Concurrency (scale out via the process model) – Concurrency consists of tasks or pods (made of containers working together) that can be auto scaled in a memory- and CPU-eﬃcient manner.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#organized-around-business-capabilities"&gt;
  &lt;/a&gt;
  Organized Around Business Capabilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Before microservices, system architecture would be organized around technological capabilities such as user interface, database, and server-side logic. &lt;/li&gt;
&lt;li&gt;In a microservices-based approach, as a best practice, each development team owns the lifecycle of its service all the way to the customer. &lt;/li&gt;
&lt;li&gt;For example, a recommendations team might own development, deployment, production support, and collection of customer feedback.&lt;/li&gt;
&lt;li&gt;Organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations. "Conway's Law"&lt;/li&gt;
&lt;li&gt;When architecture and capabilities are organized around atomic business functions, dependencies between components are loosely coupled. As long as there is a communication contract between services and teams, each team can run at its own speed. &lt;/li&gt;
&lt;li&gt;With this approach, the stack can be polyglot, meaning that developers are free to use the programming languages that are optimal for their component.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, the user interface can be written in JavaScript or HTML5, the backend in Java, and data processing can be done in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are key factors from the twelve-factor app pattern methodology that play a role in organizing around capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Codebase (one codebase tracked in revision control, many deploys) –Each microservice owns its own codebase in a separate repository and throughout the lifecycle of the code change.&lt;/li&gt;
&lt;li&gt;Build, release, run (strictly separate build and run stages) – Each microservice has its own deployment pipeline and deployment frequency. This allows the development teams to run microservices at varying speeds so they can be responsive to customer needs.&lt;/li&gt;
&lt;li&gt;Processes (execute the app as one or more stateless processes) – Each microservice does one thing and does that one thing really well. The microservice is designed to solve the problem at hand in the best possible manner.&lt;/li&gt;
&lt;li&gt;Admin processes (run admin/management tasks as one-oﬀ processes) – Each microservice has its own administrative or management tasks so that it functions as designed. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To achieve a microservices architecture that is organized around business capabilities, use popular microservices design patterns. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A design pattern is a general, reusable solution to a commonly occurring problem within a giving context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Popular miscroservice design patterns include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggregator Pattern – A basic service which invokes other services to gather the required information or achieve the required functionality. This is beneﬁcial when you need an output by combining data from multiple microservices.&lt;/li&gt;
&lt;li&gt;API Gateway Design Pattern – API Gateway also acts as the entry point for all the microservices and creates ﬁne-grained APIs for diﬀerent types of clients. It can fan out the same request to multiple microservices and similarly aggregate the results from multiple microservices.&lt;/li&gt;
&lt;li&gt;Chained or Chain of Responsibility Pattern – Chained or Chain of Responsibility Design Patterns produces a single output which is a combination of multiple chained outputs. object.&lt;/li&gt;
&lt;li&gt;Asynchronous Messaging Design Pattern – In this type of microservices design pattern, all the services can communicate with each other, but they do not have to communicate with each other sequentially and they usually communicate asynchronously.&lt;/li&gt;
&lt;li&gt;Database or Shared Data Pattern – This design pattern will enable you to use a database per service and a shared database per service to solve various problems. These problems can include duplication of data and inconsistency, diﬀerent services have diﬀerent kinds of storage requirements, few business transactions can query the data, and with multiple services and de-normalization of data.&lt;/li&gt;
&lt;li&gt;Event Sourcing Design Pattern – This design pattern helps you to create events according to change of your application state.&lt;/li&gt;
&lt;li&gt;Command Query Responsibility Segregator (CQRS) Design Pattern – This design pattern enables you to divide the command and query. Using the common CQRS pattern, where the command part will handle all the requests related to CREATE, UPDATE, DELETE while the query part will take care of the materialized views.&lt;/li&gt;
&lt;li&gt;Circuit Breaker Pattern – This design pattern enables you to stop the process of the request and response when the service is not working. For example, when you need to redirect the request to a diﬀerent service after certain number of failed request intents.&lt;/li&gt;
&lt;li&gt;Decomposition Design Pattern – This design pattern enables you to decompose an application based on business capability or on based on the sub-domains.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#products-not-projects"&gt;
  &lt;/a&gt;
  Products Not Projects
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Companies that have mature applications with successful software adoption and who want to maintain and expand their user base will likely be more successful if they focus on the experience for their customers and end users.&lt;/li&gt;
&lt;li&gt;To stay healthy, simplify operations, and increase eﬃciency, your engineering organization should treat software components as products that can be iteratively improved and that are constantly evolving.&lt;/li&gt;
&lt;li&gt;When software architecture is broken into small microservices, it becomes possible for each microservice to be an individual product. &lt;/li&gt;
&lt;li&gt;For internal microservices, the end user of the product is another team or service. &lt;/li&gt;
&lt;li&gt;For an external microservice, the end user is the customer.&lt;/li&gt;
&lt;li&gt;The core beneﬁt of treating software as a product is improved end-user experience. &lt;/li&gt;
&lt;li&gt;When your organization treats its software as an always-improving product rather than a one-oﬀ project, it will produce code that is better architected for future work.&lt;/li&gt;
&lt;li&gt;The following are key factors from the twelve-factor app pattern methodology that play a role in adopting a product mindset for delivering software:

&lt;ul&gt;
&lt;li&gt;Build, release, run – Engineers adopt a devops culture that allows them to optimize all three stages.&lt;/li&gt;
&lt;li&gt;Conﬁg – Engineers build better conﬁguration management for software due to their involvement with how that software is used by the customer.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Software treated as a product can be iteratively developed in smaller pieces that take less time to complete and deploy than long-running projects, which enables development and production to be closer in parity.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#smart-endpoints-and-dumb-pipes"&gt;
  &lt;/a&gt;
  Smart Endpoints and Dumb Pipes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two primary forms of communication between services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request/Response – One service explicitly invokes another service by making a request to either store data in it or retrieve data from it. For example, when a new user creates an account, the user service makes a request to the billing service to pass oﬀ the billing address from the user’s proﬁle so that that billing service can store it.&lt;/li&gt;
&lt;li&gt;Publish/Subscribe – Event-based architecture where one service implicitly invokes another service that was watching for an event. For example, when a new user creates an account, the user service publishes this new user signup event and the email service that was watching for it is triggered to email the user asking them to verify their email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The core beneﬁt of building smart endpoints and dumb pipes is the ability to decentralize the architecture, particularly when it comes to how endpoints are maintained, updated, and extended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One goal of microservices is to enable parallel work on diﬀerent edges of the architecture that will not conﬂict with each other. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building dumb pipes enables each microservice to encapsulate its own logic for formatting its outgoing responses or supplementing its incoming requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in building smart endpoints and dumb pipes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Port Binding – Services bind to a port to watch for incoming requests and send requests to the port of another service. The pipe in between is just a dumb network protocol such as HTTP.&lt;/li&gt;
&lt;li&gt;Backing services – Dumb pipes allow a background microservice to be attached to another microservice in the same way that you attach a database.&lt;/li&gt;
&lt;li&gt;Concurrency – A properly designed communication pipeline between microservices allows multiple microservices to work concurrently. For example, several observer microservices may respond and begin work in parallel in response to a single event produced by another microservice.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decentralized-governance"&gt;
  &lt;/a&gt;
  Decentralized Governance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Decentralized governance is an approach that works well alongside microservices to enable engineering organizations to tackle this challenge. &lt;/li&gt;
&lt;li&gt;Traﬃc lights are a great example of decentralized governance. &lt;/li&gt;
&lt;li&gt;City traﬃc lights may be timed individually or in small groups, or they may react to sensors in the pavement.&lt;/li&gt;
&lt;li&gt;Decentralized governance helps remove potential bottlenecks that would prevent engineers from being able to develop the best code to solve business problems.&lt;/li&gt;
&lt;li&gt;Decentralized governance means that each team can use its expertise to choose the best tools to solve their speciﬁc problem. &lt;/li&gt;
&lt;li&gt;Forcing all teams to use the same database, or the same runtime language, isn’t reasonable because the problems they’re solving aren’t uniform.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in enabling decentralized governance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies – Decentralized governance allows teams to choose their own dependencies, so dependency isolation is critical to make this work properly.&lt;/li&gt;
&lt;li&gt;Build, release, run – Decentralized governance should allow teams with diﬀerent build processes to use their own toolchains, yet should allow releasing and running the code to be seamless, even with diﬀering underlying build tools.&lt;/li&gt;
&lt;li&gt;Backing services – If each consumed resource is treated as if it was a third-party service, then decentralized governance allows the microservice resources to be refactored or developed in diﬀerent ways, as long as they obey an external contract for communication with other services.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decentralized-data-management"&gt;
  &lt;/a&gt;
  Decentralized Data Management
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All data-bound communication should be enabled via services that encompass the data. As a result, each service team chooses the most optimal data store type and schema for their application.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decentralized data management enhances application design by allowing the best data store for the job to be used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in organizing around capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – The services should be robust and not dependent on externalities. This principle further allows for the services to run in a limited capacity if one or more components fail.&lt;/li&gt;
&lt;li&gt;Backing services (treat backing services as attached resources) – A backing service is any service that the app consumes over the network such as data stores, messaging systems, etc. Typically, backing services are managed by operations. The app should make no distinction between a local and an external service.&lt;/li&gt;
&lt;li&gt;Admin processes (run admin/management tasks as one-oﬀ processes) – The processes required to do the app’s regular business, for example, running database migrations. Admin processes should be run in a similar manner, irrespective of environments.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;To achieve a microservices architecture with decoupled data management, the following software design patterns can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controller – Helps direct the request to the appropriate data store using the appropriate mechanism.&lt;/li&gt;
&lt;li&gt;Proxy – Helps provide a surrogate or placeholder for another object to control access to it.&lt;/li&gt;
&lt;li&gt;Visitor – Helps represent an operation to be performed on the elements of an object structure.&lt;/li&gt;
&lt;li&gt;Interpreter – Helps map a service to data store semantics.&lt;/li&gt;
&lt;li&gt;Observer – Helps deﬁne a one-to-many dependency between objects so that when one object changes state, all of its dependents are notiﬁed and updated automatically.&lt;/li&gt;
&lt;li&gt;Decorator – Helps attach additional responsibilities to an object dynamically. Decorators provide a ﬂexible alternative to sub-classing for extending functionality.&lt;/li&gt;
&lt;li&gt;Memento – Helps capture and externalize an object's internal state so that the object can be returned to this state later.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-automation"&gt;
  &lt;/a&gt;
  Infrastructure Automation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in evolutionary design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Codebase (one codebase tracked in revision control, many deploys) – Because the infrastructure can be described as code, treat all code similarly and keep it in the service repository.&lt;/li&gt;
&lt;li&gt;Conﬁg (store conﬁgurations in the environment) – The environment should hold and share its ow speciﬁcities.&lt;/li&gt;
&lt;li&gt;Build, release, run (strictly separate build and run stages) – One environment for each purpose.&lt;/li&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – This factor transcends the process layer and bleeds into such downstream layers as containers, virtual machines, and virtual private cloud.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Keep development, staging, and production as similar as possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ultimately, the goal is to enable developers to push code updates and have the updated application sent to multiple environments in minutes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are many ways to successfully deploy in phases, including the blue/green and canary methods. With the blue/green deployment, two environments live side by side, with one of them running a newer version of the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traﬃc is sent to the older version until a switch happens that routes all traﬃc to the new environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this case, we use a switch of target groups behind a load balancer in order to redirect traﬃc from the old to the new resources. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another way to achieve this is to use services fronted by two load balancers and operate the switch at the DNS level.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBteOWMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130197899-91a39937-5abb-4024-b795-fd0a434edfea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBteOWMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130197899-91a39937-5abb-4024-b795-fd0a434edfea.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-for-failure"&gt;
  &lt;/a&gt;
  Design for Failure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Everything fails all the time&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are the key factors from the twelve-factor app pattern methodology that play a role in designing for failure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – Produce lean container images and strive for processes that can start and stop in a matter of seconds.&lt;/li&gt;
&lt;li&gt;Logs (treat logs as event streams) – If part of a system fails, troubleshooting is necessary. Ensure that material for forensics exists.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Keep development, staging, and production as similar as possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modern container management services allow developers to retrieve near real-time, event-driven updates on the state of containers. Docker supports multiple logging drivers. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Ho6yKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248108-20e52ba1-76e3-4fb1-a2e1-adcd57534097.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Ho6yKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248108-20e52ba1-76e3-4fb1-a2e1-adcd57534097.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container monitoring solutions use metric capture, analytics, transaction tracing and visualization.&lt;/li&gt;
&lt;li&gt;Container monitoring covers basic metrics like memory utilization, CPU usage, CPU limit and memory limit. &lt;/li&gt;
&lt;li&gt;Container monitoring also oﬀers the real-time streaming logs, tracing and observability that containers need.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#evolutionary-design"&gt;
  &lt;/a&gt;
  Evolutionary Design
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in evolutionary design:&lt;br&gt;
• Codebase (one codebase tracked in revision control, many deploys) – Helps evolve features faster since new feedback can be quickly incorporated.&lt;br&gt;
• Dependencies (explicitly declare and isolate dependencies) – Enables quick iterations of the design since features are tightly coupled with externalities.&lt;br&gt;
• Conﬁguration (store conﬁgurations in the environment) – Everything that is likely to vary between deploys (staging, production, developer environments, etc.). Conﬁg varies substantially across deploys, code does not. With conﬁgurations stored outside code, the design can evolve irrespective of the environment.&lt;br&gt;
• Build, release, run (strictly separate build and run stages) – Help roll out new features using various deployment techniques. Each release has a speciﬁc ID and can be used to gain design eﬃciency and user feedback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following software design patterns can be used to achieve an evolutionary design:&lt;br&gt;
• Sidecar extends and enhances the main service.&lt;br&gt;
• Ambassador creates helper services that send network requests on behalf of a consumer service or application.&lt;br&gt;
• Chain provides a deﬁned order of starting and stopping containers.&lt;br&gt;
• Proxy provides a surrogate or placeholder for another object to control access to it.&lt;br&gt;
• Strategy deﬁnes a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from the clients that use it.&lt;br&gt;
• Iterator provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.&lt;br&gt;
• Service Mesh is a dedicated infrastructure layer for facilitating service-to-service communications between microservices, using a proxy. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment strategies such as a Canary release provide added agility to evolve design based on user feedback. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Canary release is a technique that’s used to reduce the risk inherent in a new software version release. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a canary release, the new software is slowly rolled out to a small subset of users before it’s rolled out to the entire infrastructure and made available to everybody. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the diagram that follows, a canary release can easily be implemented with containers using AWS primitives. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a container announces its health via a health check API, the canary directs more traﬃc to it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The state of the canary and the execution is maintained -using Amazon DynamoDB, Amazon Route 53 , Amazon CloudWatch, Amazon Elastic Container Service (Amazon ECS), and AWS Step Functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuWoGAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248884-5e1cda6e-134c-4871-aec7-83f00a90c31e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuWoGAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248884-5e1cda6e-134c-4871-aec7-83f00a90c31e.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microservices can be designed using the twelve-factor app pattern methodology and software design patterns enable you to achieve this easily. These software design patterns are well known. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If applied in the right context, they can enable the design beneﬁts of microservices. AWS provides a wide range of primitives that can be used to enable containerized microservices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/running-containerized-microservices/running-containerized-microservices.pdf#welcome"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>microservices</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Is HTML a programming language? I finally get to the bottom of it. </title>
      <author>John Halsey</author>
      <pubDate>Fri, 20 Aug 2021 18:56:32 +0000</pubDate>
      <link>https://dev.to/johnhalsey/is-html-a-programming-language-i-finally-get-to-the-bottom-of-it-2i9f</link>
      <guid>https://dev.to/johnhalsey/is-html-a-programming-language-i-finally-get-to-the-bottom-of-it-2i9f</guid>
      <description>&lt;p&gt;Can you write a programme with it. No. You cannot. Move on.  &lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>What do you want to know about how Facebook builds software? Answer to be featured on our podcast 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 20 Aug 2021 18:39:03 +0000</pubDate>
      <link>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</link>
      <guid>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-do-you-want-to-know-about-how-facebook-builds-software"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do you want to know about how Facebook builds software?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, August 25th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. A new season launched just a few weeks ago 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>facebook</category>
    </item>
    <item>
      <title>How to setup a headless Raspberry Pi - clearly explained  (beginner's friendly)</title>
      <author>Cecília Coelho </author>
      <pubDate>Fri, 20 Aug 2021 18:34:05 +0000</pubDate>
      <link>https://dev.to/ceciliacoelho/how-to-setup-a-headless-raspberry-pi-clearly-explained-beginner-s-friendly-4aph</link>
      <guid>https://dev.to/ceciliacoelho/how-to-setup-a-headless-raspberry-pi-clearly-explained-beginner-s-friendly-4aph</guid>
      <description>&lt;p&gt;In this beginner's friendly tutorial we will be setting up a Raspberry Pi (aka Pi) without an external monitor and keyboard (some of us just have a laptop 🤷‍♀️) in 4 simple steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1-getting an OS into the microSD card; &lt;/li&gt;
&lt;li&gt;2-allowing remote access in a local network; &lt;/li&gt;
&lt;li&gt;3-discovering the address and connecting in terminal; &lt;/li&gt;
&lt;li&gt;4-viewing the desktop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, a small discussion on how to choose an Operating System (OS) for a headless setup is also given, so you can later play around if you wish too 😉. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-we-will-be-using"&gt;
  &lt;/a&gt;
  📝 What we will be using:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Laptop&lt;/li&gt;
&lt;li&gt;Raspberry Pi 4 &lt;/li&gt;
&lt;li&gt;MicroSD card (whatever size you want, bigger is better)&lt;/li&gt;
&lt;li&gt;Power supply&lt;/li&gt;
&lt;li&gt;Ethernet cable (optional but recommended)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#step-1-getting-an-os-in-the-microsd-card"&gt;
  &lt;/a&gt;
  Step 1: Getting an OS in the microSD card
&lt;/h3&gt;

&lt;p&gt;Install an imaging utility that will get an OS into our microSD card. The easiest, and thanks to the Raspberry Pi Foundation team, is to use the official Raspberry Pi Imager (get it here: &lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/"&gt;https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/&lt;/a&gt;). &lt;br&gt;
After installing, insert your microSD card into your laptop and open the Raspberry Pi Imager, you will be greeted by the screen in Figure 1 (a). &lt;br&gt;
To see the given OS options click the "choose OS" button (Figure 1 (b)), the most straightforward option is to go with the recommended Raspberry Pi OS (32-bit). That's us! 🙋‍♀️🙋‍♂️&lt;br&gt;
Choose the microSD as storage, click the write button and wait till a pop-up message appears stating to remove the card. &lt;br&gt;
Note that the Imager has a whole lot of options including: two more versions of the Raspberry OS (Figure 1 (c)); other general OS (Figure 1 (d)) and several focused OS that we will skip (for now at least).&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPv4_c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awfs5oex6hit9y585wdl.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 1.&lt;/strong&gt;  Raspberry Pi Imager interface: (a) main window; (b) choose OS options; (c) Raspberry Pi OS options; (d) other general OS options.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you are feeling adventurous you can go ahead and pick other OS, the steps will be identical, you just need to pay attention to some details:&lt;/p&gt;

&lt;p&gt;❗ &lt;strong&gt;You can jump to step 2 if you don't want details about OS choices&lt;/strong&gt; ❗&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Headless friendly&lt;/strong&gt; - Since we are doing a headless setup (no monitor), we need to make sure the OS supports it or you won't be able to access your Pi, in the first boot up, using your laptop. I learned this the hard way after some experimentation (and a lot of headaches) 😓.  The only OS option you need to be careful with is the Manjaro-ARM Linux. If you want to try it make sure to choose the minimal version since all others will require a monitor to do the initial setup. (To check if an OS has headless setup you can check the documentation of the release);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Different distributions&lt;/strong&gt; - All OS available in the Imager are Debian except Manjaro, which is Arch based. The commands used with Debian won't work when using Manjaro;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt; - If you are running low on resources (4GB microSD card) or you are "The Scrooge McDuck" 🤑 of storage, you may have noticed that  there are options that take roughly half the space of others! The Raspberry Pi OS has three versions: Lite, that doesn't include a Graphical User Interface (GUI) so you can only use the terminal (hacker style!); the recommended includes a GUI; Full includes a GUI and some pre-installed software. If you are a beginner and want to try a no-GUI version but are not sure if you will regret it, don't worry, you can always install a GUI using the terminal (coming soon); 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; - Are you a beginner that wants to discover Linux or have a specific project in mind? If you want to use you Raspberry Pi to host a Git server, a cloud storage or something similar, you won't be needing a GUI, and doing so will just waste resources, so you can choose a version without a desktop environment (like Raspberry Pi OS Lite or Manjaro ARM Minimal).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-2-allowing-remote-access-in-a-local-network"&gt;
  &lt;/a&gt;
  Step 2: Allowing remote access in a local network
&lt;/h3&gt;

&lt;p&gt;Insert the microSD card into your laptop so we can modify it to tell our Pi we are going to access remotely, using what is called SSH. &lt;br&gt;
Open the file explorer, you will see a bunch of folders and files, create a new file without extension called "ssh", you should see something like Figure 2.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVe_hm-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgoyia830cj92nf5h6gc.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 2.&lt;/strong&gt;  The created SSH file should look like this.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This file will make the Pi enable SSH when it turns on, and thus making it possible for us to access it using our laptop's terminal when both are on the same network.&lt;br&gt;&lt;br&gt;
To connect the Pi to the same network as your laptop you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ethernet cable: Plug the cable onto the Pi and your internet router and you're ready to go!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wifi: Just like the ssh file, create a file named "wpa_supplicant.conf". This will store your wifi's name and password so the Pi will read this file when starting and connect to your wifi. Open the created file and copy/paste the following and substitute the "WIFI_NAME" and "WIFI_PASSWORD" fields with the login details:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev

 update_config=1

country=US

network={

    ssid="WIFI_NAME"

    psk="WIFI_PASSWORD"

    scan_ssid=1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-discovering-the-address-and-connecting-in-terminal"&gt;
  &lt;/a&gt;
  Step 3: Discovering the address and connecting in terminal
&lt;/h3&gt;

&lt;p&gt;Remove the microSD card from your laptop, plug it into your Raspberry Pi and connect a power supply. You will see a green light turning on, this means our Pi is now alive! 🤗&lt;br&gt;
Now, go to your laptop and open the terminal (in Windows it's called Command Prompt). &lt;br&gt;
Now we are going to check if the Pi was able to connect to our network, use the command &lt;code&gt;ping raspberrypi&lt;/code&gt; and you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pinging raspberrypi.local [192.168.50.166] with 32 bytes of data:
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64

Ping statistics for 192.168.50.166:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is like the Pi shouting "I'm alive!" 🎉 and it tells where its home is in case we want to go over and say hi (don't forget the 🥧), mine lives at 192.168.50.166. &lt;br&gt;
You now know your Pi's address so let's access it using &lt;code&gt;ssh pi@192.168.50.166&lt;/code&gt;.  It will ask you for a password, since it's the first login then it has to be the default one, use &lt;code&gt;raspberry&lt;/code&gt; (the prompt won't move, it's normal). If you were successful the location on your terminal should have changed to &lt;code&gt;pi@raspberrypi:~ $&lt;/code&gt;, this means we are now working in the Raspberry Pi!&lt;/p&gt;

&lt;p&gt;❗ Note that if you choose an OS other than Raspberry Pi OS (also referred as Raspbian), the default user (pi) and password (raspberry) may be different, you know who to ask 🧐. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-viewing-the-desktop"&gt;
  &lt;/a&gt;
  Step 4:  Viewing the desktop
&lt;/h3&gt;

&lt;p&gt;The terminal is great but we want to see the Graphical User Interface to play around with Linux in a more friendly way. To do this we need a software that allows to control a remote desktop, we are going to use VNC Server. &lt;br&gt;
First let's make sure our Pi has the latest updates, on the terminal do,&lt;br&gt;
&lt;code&gt;pi@raspberrypi:~ $ sudo apt-get update&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pi@raspberrypi:~ $ sudo apt-get upgrade&lt;/code&gt;&lt;br&gt;
and wait (quick, run and grab some coffee 🏃‍♂️☕).&lt;br&gt;
Now we need to install the VNC Server using &lt;code&gt;sudo apt–get install realvnc–vnc–server realvnc–vnc–viewer&lt;/code&gt; (if it gives an error and you copy/paste the command try rewriting the dashes, sometimes it pastes a double dash 🙄).&lt;br&gt;
When the installation finishes we need to enable it, do,&lt;br&gt;
&lt;code&gt;sudo raspi-config&lt;/code&gt;&lt;br&gt;
a pop-up window will appear, Figure 3. Use the arrows and return button to go to "3: Interface Options" -&amp;gt; "P3 VNC" and select "Yes".&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeOWSXrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5idpldpi0qjyq24gv9ec.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 3.&lt;/strong&gt; Configuration options pop-up window.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Almost done! Now we have to install the VNC Viewer in our laptop, I use RealVNC (find it here: &lt;a href="https://www.realvnc.com/en/connect/download/viewer/"&gt;https://www.realvnc.com/en/connect/download/viewer/&lt;/a&gt;).&lt;br&gt;
After installing, launch the software and write your Pi address on the top bar and hit enter, Figure 4. A pop-up window will ask for your credentials to access, after that you will be able to see your Raspberry Pi's desktop! &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBxB_87l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a26i17n9t0wu3zs1y61y.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 4.&lt;/strong&gt; Accessing the Raspberry Pi desktop with VNC Viewer by entering its address. After doing this the first time, an icon will appear to ease future accesses.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;p&gt;❗❗ If all you can see is a black screen go back to the Pi's terminal and do &lt;code&gt;sudo raspi-config&lt;/code&gt;. Navigate to "Display Options" -&amp;gt; "Resolution" and choose an option other than "default". Reboot you Pi &lt;code&gt;sudo reboot&lt;/code&gt; and try accessing again on the VNC Viewer. It should work now!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#thats-it-now-its-play-time"&gt;
  &lt;/a&gt;
  That's it! Now it's play time! 🥳🥳🥳🥳
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#dont-worry-if-you-mess-up-something-you-can-always-redo-all-this-steps-and-youll-have-a-fresh-os-to-destroy-again"&gt;
  &lt;/a&gt;
  Don't worry, if you mess up something you can always redo all this steps and you'll have a fresh OS to destroy again! 😈🔪
&lt;/h2&gt;

</description>
      <category>linux</category>
      <category>raspberrypi</category>
      <category>beginners</category>
      <category>ssh</category>
    </item>
  </channel>
</rss>
