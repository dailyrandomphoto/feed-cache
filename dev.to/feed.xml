<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>FrontEnd Developer Roadmap</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 23 Nov 2021 14:54:24 +0000</pubDate>
      <link>https://dev.to/thenerdydev/frontend-developer-roadmap-1h84</link>
      <guid>https://dev.to/thenerdydev/frontend-developer-roadmap-1h84</guid>
      <description>&lt;p&gt;Hey guys üëãüèª,&lt;br&gt;
In this article, let us understand the roadmap that will help you in becoming a &lt;strong&gt;Frontend Developer in 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXpVrAsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ribfruq6t3ogxw3r36tm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXpVrAsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ribfruq6t3ogxw3r36tm.png" alt="Image description" width="846" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;

&lt;p&gt;First learn &lt;strong&gt;HTML, CSS and JavaScript&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLLXYgyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lk9qqe78qvbgetbtjpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLLXYgyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lk9qqe78qvbgetbtjpc.png" alt="Image description" width="836" height="340"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h2&gt;

&lt;p&gt;Work on your own projects to &lt;em&gt;build&lt;/em&gt; skills and then work on &lt;strong&gt;LIVE&lt;/strong&gt; projects. Go grab some internship to get some working experience on various technologies. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCWDxjri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84fxb52b3w8hw1vvp18x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCWDxjri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84fxb52b3w8hw1vvp18x.png" alt="Image description" width="852" height="356"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h2&gt;

&lt;p&gt;Pick and learn one frontend framework of your choice. Again go back to &lt;strong&gt;Step 2&lt;/strong&gt;. After &lt;strong&gt;Step 2&lt;/strong&gt;, proceed to &lt;strong&gt;Step 4&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDq0OVUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhavby3xand0zftm9xkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDq0OVUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhavby3xand0zftm9xkm.png" alt="Image description" width="854" height="281"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h2&gt;

&lt;p&gt;Start applying for &lt;strong&gt;Frontend Developer&lt;/strong&gt; jobs or become a &lt;strong&gt;Freelancer&lt;/strong&gt; once you start to feel confident of your skills. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;‚ö°Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A-in-depth look at my Confession app</title>
      <author>Animesh Sharma</author>
      <pubDate>Tue, 23 Nov 2021 14:49:45 +0000</pubDate>
      <link>https://dev.to/animesharma3/a-in-depth-look-of-my-confession-app-4l1d</link>
      <guid>https://dev.to/animesharma3/a-in-depth-look-of-my-confession-app-4l1d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Finished Product Link&lt;/strong&gt; -&lt;a href="https://conphession.netlify.app/"&gt;https://conphession.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code&lt;/strong&gt; - &lt;a href="https://bit.ly/3xjyYJ9"&gt;https://bit.ly/3xjyYJ9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To contribute join our &lt;a href="https://join.slack.com/t/confessions-talk/shared_invite/zt-y5rcmvd1-LuE8~NligOm1WKELGlNlKQ"&gt;SLACK Workspace&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-confession-app"&gt;
  &lt;/a&gt;
  What is Confession App?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Confession&lt;/strong&gt; is a fully functional social media cum dating app which we developed for our fellow college mates so that they can post whatever they want to confess. They can confess publicly, privately and anonymously. Earlier our college mates were using an &lt;a href="https://www.instagram.com/svvv_secrets_and_confessions/"&gt;Instagram page&lt;/a&gt; to do the same, which we believe is a less democratic way as its up to the admin of the page to selectively post the confessions. This triggered us to create an app which does the same in a more democratic fashion and with better minimalistic UI and even more features like chat app, therapy room, toxic comment detector etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectives"&gt;
  &lt;/a&gt;
  Objectives
&lt;/h2&gt;

&lt;p&gt;We intend to achieve the following objectives by developing this app -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an online dating cum social media platform that replaces the existing dependence on an Instagram page.&lt;/li&gt;
&lt;li&gt;Provide a safe place for our college mates to post confessions where they can confess publicly, privately, and anonymously in a more democratic way.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intended-audiences"&gt;
  &lt;/a&gt;
  Intended Audiences
&lt;/h2&gt;

&lt;p&gt;Though we created this app for our college mates but its for anyone who -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;wants to confess to their college crush.&lt;/li&gt;
&lt;li&gt;wants a democratic platform to share his/her opinion publicly or anonymously.&lt;/li&gt;
&lt;li&gt;wants a safe place for confessing privately while keeping their details confidential.&lt;/li&gt;
&lt;li&gt;wants a platform where they can chat with their mates&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#features-and-functionalities"&gt;
  &lt;/a&gt;
  Features and Functionalities
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Realtime Update&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This feature is made possible by technologies like React and Firebase Real-time Database.&lt;/li&gt;
&lt;li&gt;Any changes made to the database will be reflected real-time on the web page.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Anonymous Confession&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One doesn't need to authenticate to confess anonymously. If someone wish to confess anonymously, we have created a separate account for that. So when someone confess anonymously, it gets posted under the name of that account and not under name of user's account. So we have no way to know who have posted that confession.
b. There is also a downside to confessing anonymously, user can't update and delete their anonymous confession. For now we decided to keep it that way.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Although you can anonymously confess on our platform, but in order to publicly confess and access some features one needs to authenticate. &lt;/li&gt;
&lt;li&gt;Confession provides you two ways to authenticate - google authentication and email authentication&lt;/li&gt;
&lt;li&gt;Even after authentication, one can easily confess anonymously.&lt;/li&gt;
&lt;li&gt;To make the authentication possible we have used Firebase Authentication.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;User Profile and Profile Engagement&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When user authenticate, a profile gets created with their chosen username.&lt;/li&gt;
&lt;li&gt;One can share their profile and also other's profile on other social media platforms.&lt;/li&gt;
&lt;li&gt;One can make changes to his/her profile, they can change their username, avatar etc&lt;/li&gt;
&lt;li&gt;One can also follow and unfollow other's profile. They follow their profile by default. So every user have at least one follower and following by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Confessions CRUD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated user can create, read, update and delete their confessions publicly. Though that's not the case with anonymous confessions.&lt;/li&gt;
&lt;li&gt;Users can also confess privately in the therapy room. This feature is under development though. Nobody will be able to see the private confessions except for the website admin and the user and the admin will make sure to keep those confessions confidential.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Confessions Engagement&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One can like and unlike the confession.&lt;/li&gt;
&lt;li&gt;One can share the confession.&lt;/li&gt;
&lt;li&gt;One can comment on the confession.&lt;/li&gt;
&lt;li&gt;One can report the confession. (&lt;em&gt;Under development&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Comment CRUD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated users can comment on each other's confessions.&lt;/li&gt;
&lt;li&gt;User can perform CRUD operation on their own confessions.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Nested Comments&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated user can comment on each others comment.&lt;/li&gt;
&lt;li&gt;We are keeping the comment reply thread to one level only for now.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Responsive and Masonry UI&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The web app is completely responsive. The UI is compatible with all the device. To make the website responsive we used Bootstrap with React.&lt;/li&gt;
&lt;li&gt;All the confessions are arranged in masonry fashion. For masonry look we have used an NPM package, react-masonry-css to do the job.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Infinite Scroll&lt;/strong&gt; &lt;em&gt;(Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One should be able to see 30 confessions at a time in masonry pattern.&lt;/li&gt;
&lt;li&gt;Instead of doing it paginated way, we are using infinite scroll.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Toxic confession and comment detector&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another problem we are anticipating with Confession App is &lt;strong&gt;Content Moderation.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Instead of using man-power for moderating the content, we are planning to deploy an ML Algorithm to filter the toxic confessions and comments and hide them.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Integrated Chat App&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Confession also has an integrated chat app.&lt;/li&gt;
&lt;li&gt;For this purpose we are using an &lt;strong&gt;React Chat Engine API.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Integrated Therapy Room for private confessions&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One can confess privately to the site admin in the therapy room.&lt;/li&gt;
&lt;li&gt;The private confessions will be kept confidential at all times.&lt;/li&gt;
&lt;li&gt;Private confessions can also be posted anonymously.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Update and Delete Problem with Anonymous Confessions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned, Anonymous Confession doesn't goes under any user's account, it goes under a anonymous user's account which I have created for this purpose. So we have no way of knowing who created that anonymous confession. Since a user can only delete their own confessions and not others, therefore there is no way of updating and deleting anonymous' confessions.&lt;/p&gt;

&lt;p&gt;Though we can make changes to Database schema and associate that anonymous confession to the user's account, but then the site admin would know who created the confession which contradicts what anonymous confession stands for. So we decided to keep it that way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Moderation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An advantage that &lt;a href="https://www.instagram.com/svvv_secrets_and_confessions/"&gt;that Instagram Page&lt;/a&gt; has over our app is content moderation. All the confessions goes through the page admin, and the admin choose which confessions to post and which not. Though that's not the most democratic way of posting confessions, but they have advantage of filtering the abusive and toxic once, which we don't have.&lt;/p&gt;

&lt;p&gt;To tackle this issue, we are creating a TOXIC confessions and comment detector. We are letting the algorithm decide which confessions to keep and which to hide. But there's another catch here, since we don't have enough data of the confessions now, we can't exactly train the model on our data, we have to rely on data from some other source, hence the model will be prepared accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3rd party dependency for Chat App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we mentioned, Confessions App has an integrated chat app for which we are using React Chat Engine. One limitations it poses to us, that it deletes the chats in a few days, therefore the users won't be able to see their chats after few days.&lt;/p&gt;

&lt;p&gt;To overcome this issue we are planning to create a custom chat app from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SEO (Search Engine Optimizations)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are using React library to build the user interface and it's not good with pre-rendering the page, hence our app suffers with SEO because search engines and web crawlers won't be able to see the content of the page as its not pre-rendered on server.&lt;/p&gt;

&lt;p&gt;To overcome this issue, we are planning to change the entire codebase of our project from React.js to Next.js, which is a react based framework and is good at Server Side Rendering and hence SEO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Get lazy with lazygit</title>
      <author>Tahsin</author>
      <pubDate>Tue, 23 Nov 2021 14:32:04 +0000</pubDate>
      <link>https://dev.to/tahsinature/get-lazy-with-lazygit-4h37</link>
      <guid>https://dev.to/tahsinature/get-lazy-with-lazygit-4h37</guid>
      <description>&lt;p&gt;As a developer, my assumption is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are working with Git literally every hour.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But I wonder, how many times you felt the necessity of a tool that makes the repetitive commands/steps a bit more convenient for the things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeing the diff&lt;/li&gt;
&lt;li&gt;Quickly stage/unstage files&lt;/li&gt;
&lt;li&gt;Seeing the logs&lt;/li&gt;
&lt;li&gt;A tool to quickly open PR regardless of your SCM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, that's when &lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; comes to the rescue. It's a terminal UI for git commands written in &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just install it following the instruction from the official repository. Then optionally you can set an alias in your shell configuration to quickly open lazygit. In my case, it's &lt;code&gt;lg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_okYtbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9g5yblnmf4lebbz0pa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_okYtbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9g5yblnmf4lebbz0pa.png" width="880" height="931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here are the features I use most of the time from this tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stage/unstage like bullet&lt;/li&gt;
&lt;li&gt;Open a PR with a single keypress&lt;/li&gt;
&lt;li&gt;Search through commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#stageunstage-like-bullet"&gt;
  &lt;/a&gt;
  Stage/unstage like bullet
&lt;/h3&gt;

&lt;p&gt;Every time performing these type of commands is really a bit painful when a tool like lazygit exists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add foo.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add bar.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git logs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git diff foo.go&lt;/code&gt;
With &lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; you can quickly see through the changed files and stage/unstage them accordingly. As well as, you can see the changes on each file very easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-a-pr-with-a-single-keypress"&gt;
  &lt;/a&gt;
  Open a PR with a single keypress
&lt;/h3&gt;

&lt;p&gt;This is my favorite feature of this tool. Because every time I commit something and want to create PR/MR, I have to do a bunch of repetitive clicks here and there. On top of that, sometimes I have to work with GitHub, sometimes GitLab. So even if I wanna use the GitHub CLI tool &lt;a href="https://github.com/github/hub"&gt;&lt;code&gt;hub&lt;/code&gt;&lt;/a&gt; or GitLab CLI tool &lt;a href="https://glab.readthedocs.io/en/latest/"&gt;&lt;code&gt;glab&lt;/code&gt;&lt;/a&gt;, I am ending up using two different tools. So it's nice when I can open PR/MR just by a shortcut within a second or two regardless of what SCM I am on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-through-commits"&gt;
  &lt;/a&gt;
  Search through commits
&lt;/h3&gt;

&lt;p&gt;When I have to search through a bunch of commits, lazygit comes very handily. Altho there are other tools that exist as well. But I end up utilizing this tool a lot in this case it's I don't have to open another tool or even VS Code for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; is open-source. And easy to download and install, so definitely give it a go!&lt;/p&gt;

</description>
      <category>git</category>
      <category>productivity</category>
      <category>terminal</category>
      <category>cli</category>
    </item>
    <item>
      <title>JUT | Read Notebooks in the Terminal</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 23 Nov 2021 14:27:20 +0000</pubDate>
      <link>https://dev.to/waylonwalker/jut-read-notebooks-in-the-terminal-40hp</link>
      <guid>https://dev.to/waylonwalker/jut-read-notebooks-in-the-terminal-40hp</guid>
      <description>&lt;p&gt;Trying to read a .ipynb file without starting a jupyter server?  jut has you covered.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t8AvImnwor0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;watch the video version of this post on &lt;a href="https://youtu.be/t8AvImnwor0"&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  install
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jut&lt;/code&gt; is packaged and available on pypi so installing is as easy as pip installing it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;jut
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb
jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--head&lt;/span&gt; 3
jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--tail&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#what-are-all-the-commands-available-for-jut"&gt;
  &lt;/a&gt;
  what are all the commands available for jut?
&lt;/h2&gt;

&lt;p&gt;Take a look at the help of the &lt;code&gt;jut&lt;/code&gt; cli to explore all the options that it offers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jut &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is some good information on the projects &lt;a href="https://github.com/kracekumar/jut"&gt;readme&lt;/a&gt; as well.&lt;/p&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#without-installing"&gt;
  &lt;/a&gt;
  without installing
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;using pipx&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't want jut cluttering up your venv, or want to save yourself from making a new one, &lt;a href="https://github.com/pypa/pipx"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; can manage a separate virual environment for you.  This is one of the biggest selling points for me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipx run jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--head&lt;/span&gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#nbconvert"&gt;
  &lt;/a&gt;
  nbconvert
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jut&lt;/code&gt; is the lightweight option that I think will fit the bill often for me, but it just doesn't always cut it.  Mostly if there are images in the notebook or  large output that is hard to read, its time to pull out the medium guns that sit between fulling running jupyter and &lt;code&gt;jut&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;nbconvert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;nbconvert does not have its own cli, instead it sits under the jupyter command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#converting-to-html"&gt;
  &lt;/a&gt;
  converting to html
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Need to see images, go here!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb
jupyter nbconvert flame_temperature.ipynb &lt;span class="nt"&gt;--to&lt;/span&gt; html
python &lt;span class="nt"&gt;-m&lt;/span&gt; http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note, nb convert does not work with a url, you will need to have the notebook locally.&lt;/p&gt;
&lt;/blockquote&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#what-other-options-does-nbconvert-offer"&gt;
  &lt;/a&gt;
  what other options does nbconvert offer?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;nbconvert&lt;/code&gt; also offers a standard help flag that you can access by passing in&lt;br&gt;
the &lt;code&gt;--help&lt;/code&gt; flag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jupyter nbconvert &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#converting-to-markdown"&gt;
  &lt;/a&gt;
  converting to markdown
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nbconvert&lt;/code&gt; also supports converting to many other formats, one option that is quite interesting for use in the terminal is markdown.  We could simply convert the notebook to markdown and cat it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jupyter nbconvert flame_temperature.ipynb &lt;span class="nt"&gt;--to&lt;/span&gt; maarkdown
&lt;span class="nb"&gt;cat &lt;/span&gt;flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-with-glow"&gt;
  &lt;/a&gt;
  viewing markdown with glow
&lt;/h3&gt;

&lt;p&gt;Glow is a terminal markdown viewer that looks really good.  These days I use &lt;code&gt;bat&lt;/code&gt; as &lt;code&gt;cat&lt;/code&gt; so I don't get quite as much benefit from &lt;code&gt;glow&lt;/code&gt;, but it still looks pretty good.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;glow flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-as-slides-with-lookatme"&gt;
  &lt;/a&gt;
  viewing markdown as slides with lookatme
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/d0c-s4vage/lookatme"&gt;lookatme&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lookatme is my slideshow tool of choice.  Creating slides in markdown is such a fantasic user experience,  It realy lets you go from outline to finished slide deck fluidly.  Refactoring the whole thing is also so much easier than with gui tools.  Once you have your idea fleshed out it does make the process of making slides in powerpoint much easier if thats what you need.&lt;/p&gt;

&lt;p&gt;On to nbconvert, without even changing the notebook we can look at the notebook as a slideshow in the terminal.  The only thing that it needs is some markdown headers to start new slides from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;lookatme flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-with-rich"&gt;
  &lt;/a&gt;
  viewing markdown with rich
&lt;/h3&gt;

&lt;p&gt;Bringing this full circle, lets take a look at the converted markdown with rich.  Here you will notice a surprising similarity to what we saw with &lt;code&gt;jut&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;rich
python &lt;span class="nt"&gt;-m&lt;/span&gt; rich.markdown flame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rich still cannot pull directly from a url or display markdown with out being installed and managed by yourself.  Unlike how &lt;code&gt;jut&lt;/code&gt; can leverage &lt;a href="https://github.com/pypa/pipx"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; to manage the installation sandbox for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kracekumar/jut"&gt;jut&lt;/a&gt; - View notebooks in the terminal&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nbconvert.readthedocs.io/en/latest/usage.html"&gt;nbconvert&lt;/a&gt; - convert notebooks to other formats&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb"&gt;flame-temperature notebook&lt;/a&gt; - The sample notebook I used&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/charmbracelet/glow"&gt;glow&lt;/a&gt; - Terminal Markdown viewer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/d0c-s4vage/lookatme"&gt;lookatme&lt;/a&gt; - Terminal Markdown slideshow tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; - Run python cli's without maintianing a virtual environment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/willmcgugan/rich"&gt;rich&lt;/a&gt; - Beautiful python terminal formatter&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Changelog 0002 ‚Äî üóÇÔ∏è Tabs</title>
      <author>Cl√°udia Delgado</author>
      <pubDate>Tue, 23 Nov 2021 14:20:08 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0002-tabs-456o</link>
      <guid>https://dev.to/pie/changelog-0002-tabs-456o</guid>
      <description>&lt;p&gt;It‚Äôs Friday again, and it‚Äôs our second week of changelogs. Check out what‚Äôs new this week üëá&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;p&gt;Our mission is nothing smaller than to provide the best experience to anyone working with APIs. With the initial milestone of the &lt;a href="https://httpie.io/beta"&gt;private beta&lt;/a&gt; reached‚Äîfeature parity with the &lt;a href="https://httpie.io/cli"&gt;terminal version&lt;/a&gt;‚Äîwe‚Äôre moving on to the next items on the roadmap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tabs"&gt;
  &lt;/a&gt;
  üóÇÔ∏è Tabs
&lt;/h3&gt;

&lt;p&gt;Tabs have been around almost since GUIs became a thing. For a good reason, they‚Äôre great for organization and for juggling multiple things at once. And HTTPie now has them too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiqIiMQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0002/tabs-SRBFFGAS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiqIiMQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0002/tabs-SRBFFGAS.png" alt="tabs" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use them to create several requests in a single window. You can then compare them or just save them for later, up to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persistency"&gt;
  &lt;/a&gt;
  ü™® Persistency
&lt;/h3&gt;

&lt;p&gt;About saving requests for later, we‚Äôve taken a big step towards this goal: HTTPie now persists your data in local storage. The chances are that you‚Äôll close the app by mistake or need to refresh it somehow, some-when. It would be best if you didn‚Äôt lose the requests you‚Äôve spent time crafting when that happens. And now you won‚Äôt!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ‚ú® Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We‚Äôve listened to your feedback and made the preview hidden by default. It‚Äôs still there, just a click away.&lt;/li&gt;
&lt;li&gt;Remember the &lt;em&gt;dirty&lt;/em&gt; badge on the preview we told you about &lt;a href="https://httpie.io/blog/changelog-0001"&gt;last time&lt;/a&gt;? We found a better place for it: it is now in the title of the tab.&lt;/li&gt;
&lt;li&gt;The basic auth fields now expand to multi-line. Go ahead and use event the longest username and password; they won‚Äôt get out of sight.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  ü™≤ Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTTP Start-Line color highlight was all over the place. Now it‚Äôs nice and uniform.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;We‚Äôve improved the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt; of &lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt; as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We now preserve individual headers with the same name included in responses. They don‚Äôt get converted into a comma-separated list anymore. (&lt;a href="https://github.com/httpie/httpie/pull/1208"&gt;#1208&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;üíÅüèª‚Äç‚ôÄÔ∏è If you‚Äôre not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üëâ You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0002"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devtools</category>
      <category>api</category>
      <category>testing</category>
      <category>httpie</category>
    </item>
    <item>
      <title>Use Git for Effective Communication </title>
      <author>Ant(on) Weiss</author>
      <pubDate>Tue, 23 Nov 2021 13:51:16 +0000</pubDate>
      <link>https://dev.to/otomato_io/use-git-for-effective-communication-3f9b</link>
      <guid>https://dev.to/otomato_io/use-git-for-effective-communication-3f9b</guid>
      <description>&lt;p&gt;Here's a situation I've encountered numerous times: &lt;/p&gt;

&lt;p&gt;We're interviewing an engineering candidate. Say they've finished a course, a bootcamp or even worked for 1-2 years. I give them a home assignment to check their coding abilities. Now - we always ask to submit the assignments as Github pull requests - this both makes it easier to review and provides a simulation of an actual collaborative workflow.&lt;/p&gt;

&lt;p&gt;They submit their work - and that's when I suddenly realize - they don't know how to work with git!!!&lt;/p&gt;

&lt;p&gt;I've stumbled upon this time after time and finally decided it's time to summarize my expectations in a post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#git-is-a-communication-tool-not-just-code-storage"&gt;
  &lt;/a&gt;
  Git is a Communication Tool, not just Code Storage
&lt;/h1&gt;

&lt;p&gt;IMHO - this is the most profound realization. Source control isn't just there to store and backup versions of code. It's also the medium to communicate the decisions and actions we take while coding. To our future selves as much as to others.&lt;/p&gt;

&lt;p&gt;And we want this communication to be effective of course.&lt;/p&gt;

&lt;p&gt;So here are some rules of effective Git communication:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-explain-yourself"&gt;
  &lt;/a&gt;
  1. Explain yourself
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-with-commit-messages"&gt;
  &lt;/a&gt;
  Start with commit messages
&lt;/h3&gt;

&lt;p&gt;Tons of posts have been written on the importance of good commit messages and still - most commit messages out there lack clarity and detail. For some tips on how to make your own commit messages great - check out posts here on dev.to - here's a good &lt;a href="https://dev.to/thelogeshwaran/how-to-write-good-commit-messages-714"&gt;example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-with-pr-description-and-comments"&gt;
  &lt;/a&gt;
  Continue with PR description and comments
&lt;/h3&gt;

&lt;p&gt;Often your pull request (further abbreviated as PR) will have a number of commits in it. Sometimes this makes sense, sometimes not - more on that later. An important thing to remember is you can name the PR  and provide a description for it - summarizing the work you've done and pointing the reader at whatever you feel is important in your work.&lt;/p&gt;

&lt;p&gt;Further on - you can provide &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request"&gt;comments&lt;/a&gt; and tag other users both in description and comments using the '@' sign.&lt;/p&gt;

&lt;p&gt;(More on this in section 2 - the one about Markdown.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assign-reviewers"&gt;
  &lt;/a&gt;
  Assign reviewers
&lt;/h3&gt;

&lt;p&gt;This looks obvious except it clearly isn't. Many folks create a PR and then send me the link to it - in email or Whatsapp. &lt;/p&gt;

&lt;p&gt;You don't need to do that! &lt;/p&gt;

&lt;p&gt;Just make me a PR reviewer and Github will make sure to notify me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-use-markdown"&gt;
  &lt;/a&gt;
  2. Use Markdown
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#structure-your-pr-comments"&gt;
  &lt;/a&gt;
  Structure your PR comments
&lt;/h3&gt;

&lt;p&gt;Your PR description and comments aren't limited to plain text (as commit messages are). You can structure text with #headings, make it &lt;strong&gt;bold&lt;/strong&gt; or &lt;em&gt;italic&lt;/em&gt;, tag folks (&lt;a class="mentioned-user" href="https://dev.to/otomato"&gt;@otomato&lt;/a&gt;
) provide &lt;a href="https://otomato.io"&gt;hyperlinks&lt;/a&gt; and even include images. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxuOFhCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://placekitten.com/408/287" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxuOFhCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://placekitten.com/408/287" alt="cat" width="408" height="287"&gt;&lt;/a&gt; All that with the power of Markdown. Github provides a nice &lt;a href="https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax"&gt;guide&lt;/a&gt; on how to use Markdown on their platform effectively. And if you need more - here's the ultimate Markdown &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-readmes"&gt;
  &lt;/a&gt;
  Add READMEs
&lt;/h3&gt;

&lt;p&gt;If you feel like your work needs more documentation (user guide style) - it's always a great idea to accompany your code with an *.md file - all Markdown and now also version controlled (as opposed to PR comments)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-reduce-noise"&gt;
  &lt;/a&gt;
  3. Reduce Noise
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#squash-your-commits"&gt;
  &lt;/a&gt;
  Squash your commits
&lt;/h3&gt;

&lt;p&gt;It's clear that any serious coding work requires a lot of trial and error. It's also only natural to commit on every change - this way we iterate fast and check ourselves continuously. But! When we submit our work for review - the multitude of our attempts isn't of any interest. It's a distraction! &lt;br&gt;
Even though Github now allows to &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests"&gt;automatically squash commits when merging a PR&lt;/a&gt; - it's a good etiquette to learn working with &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History"&gt;interactive rebase&lt;/a&gt; and squash your commits &lt;strong&gt;before&lt;/strong&gt; submitting code for review. &lt;br&gt;
This is how you show respect for your own work and for the reviewers attention - by providing a clean history with only the stuff that matters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-comment-out-just-delete"&gt;
  &lt;/a&gt;
  Don't comment out - just delete!
&lt;/h3&gt;

&lt;p&gt;This is also a pattern we see a lot. Folks are somewhat afraid to remove code entirely. So they just comment stuff out and submit it like that. But this makes reading code so much harder. Comments are there for a reason - they exist to provide additional information. Not to store old code "just in case". You have git history for that!&lt;br&gt;
So before submitting a PR - please make sure you've removed all code commented out while debugging and coming up with a working solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-provide-feedback"&gt;
  &lt;/a&gt;
  4. Provide feedback
&lt;/h2&gt;

&lt;p&gt;And finally - if your reviewer left comments - they will appreciate feedback. Don't just fix everything as you find fit and then submit the results for re-review. Reply to each comment with a few words - explaining what and how you fixed - keep the conversation flowing.&lt;/p&gt;

&lt;p&gt;These are my tips for effective Git communication.&lt;br&gt;
Did I miss anything? What else would you add? &lt;/p&gt;

&lt;p&gt;Leave your feedback - and I promise to reply - after all (as you could tell) I value effective communication above all else.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by Andrea Piacquadio from Pexels.com&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Javascript flaws you should know</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Tue, 23 Nov 2021 13:44:33 +0000</pubDate>
      <link>https://dev.to/mcube25/javascript-flaws-you-should-know-44i2</link>
      <guid>https://dev.to/mcube25/javascript-flaws-you-should-know-44i2</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;We all know and everybody does agree that javascript is awesome. It is a language that by any metrics is growing faster than anything else. There is a lot of reasons for this. There is a lot of goodness in this. This are some core javascript traits.&lt;br&gt;
‚Ä¢ Built-in memory management&lt;br&gt;
‚Ä¢ Native serialization (JSON)&lt;br&gt;
‚Ä¢ Naturally scalable (via Eventloop)&lt;br&gt;
‚Ä¢ Frequent template /encoding use&lt;br&gt;
‚Ä¢ Flourishing npm package ecosystem&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-capabilities"&gt;
  &lt;/a&gt;
  Javascript capabilities
&lt;/h4&gt;

&lt;p&gt;These are amazing capabilities. They are core allowing the building of amazing things. But sometimes the same capabilities that make it awesome also make it vulnerable. So you look at this various different capabilities and what you can see as Built- in memory management one can look at the flaws and see buffer objects and leaking memory from servers.  If you talk about native serialization  hackers can look at it and do some type manipulation because types a decided in runtime and those kind of changes can be manipulated. A lot of our talk today is going to center on how javascript capabilities can be manipulated and abused.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Built-in memory management : Buffer vulnerabilities&lt;br&gt;
‚Ä¢ Native serialization (JSON) : Type manipulation&lt;br&gt;
‚Ä¢ Naturally scalable (via Eventloop): Regex Dos&lt;br&gt;
‚Ä¢ Frequent template /encoding use: Sandbox Escaping&lt;br&gt;
‚Ä¢ Flourishing npm package ecosystem: Vulnerable packages&lt;/p&gt;

&lt;p&gt;Another thing to remember is that this vulnurebalities  don‚Äôt just happen in your code. Part of the core part of the javascript ecosystems are libraries . Npm, node, jquery. Much of the codes are open source codes. A typical application has thousands of dependencies which leads to a situation where your app is very large but your code is so small. It is slightly frightening from a security perspective. Most of your apps code come from npm which makes most of your apps vulnerabilities to come from npm.  This is not a theoretical problem, it is practically what happens when we use npm packages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#risk-frontend-apps"&gt;
  &lt;/a&gt;
  Risk front-end Apps
&lt;/h4&gt;

&lt;p&gt;Packages use packages that use other packages and within that ecosystem is vulnerabilities. Pretty every node shop has these and this risk node apps and front-end app has vulnerabilities in front-end apps like angular, react and node apps with all the packages we pull in from npm. Also there is the internet of things, we hear about Ddos and other massive attacks that take down the internet. Many of these devices run node apps and light weight apps and these can have vulnerabilities. We are going to look at &lt;br&gt;
‚Ä¢ Explain and exploit real world javascript vulnerabilities using npm&lt;br&gt;
‚Ä¢ Discuss remediation and solutions for vulnerable code and packages&lt;br&gt;
We will discuss this in our next write up&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>websecurity</category>
    </item>
    <item>
      <title>Demystifying Closures in JavaScript</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 23 Nov 2021 13:42:54 +0000</pubDate>
      <link>https://dev.to/thenerdydev/demystifying-closures-in-javascript-222j</link>
      <guid>https://dev.to/thenerdydev/demystifying-closures-in-javascript-222j</guid>
      <description>&lt;p&gt;Hey guys üëãüèª,&lt;br&gt;
In this article, let us talk about Closures in Javascript.&lt;/p&gt;

&lt;p&gt;In this article, we will understand&lt;br&gt;
‚úî What are Closures ?&lt;br&gt;
‚úî Code Example with explanation.&lt;br&gt;
‚úî Conclusion&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-closures-"&gt;
  &lt;/a&gt;
  What are Closures ?
&lt;/h2&gt;

&lt;p&gt;Before understanding what a closure is, let us revisit the concept of &lt;strong&gt;functions&lt;/strong&gt;. From what we know about functions in JavaScript is that every function in JavaScript has a &lt;em&gt;reference&lt;/em&gt; to its outer &lt;em&gt;lexical environment&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;This means that it registers the outer &lt;em&gt;lexical environment&lt;/em&gt; and the variables present in there and it remembers the values of these variables. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;=&amp;gt; This also means that the reference that gets setup enables the code inside the inner function to see variables declared outside the inner function, regardless of when and where the function was called.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let us see an example, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUWEQNyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkdx49jr04jfvpf1pmkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUWEQNyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkdx49jr04jfvpf1pmkg.png" alt="Image description" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;In the above code, we have a &lt;code&gt;calculateSimpleInterest&lt;/code&gt; function that takes on a &lt;code&gt;principal&lt;/code&gt; value inside which we have &lt;em&gt;function&lt;/em&gt; &lt;code&gt;useRateAndTime&lt;/code&gt; that takes on &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt; and computes the simple interest for us. At the bottom of the &lt;code&gt;calculateSimpleInterest&lt;/code&gt; function, we return the &lt;code&gt;useRateAndTime&lt;/code&gt; function.  &lt;/p&gt;

&lt;p&gt;So for our &lt;code&gt;calculateSimpleInterest&lt;/code&gt; function, &lt;code&gt;useRateAndTime&lt;/code&gt; forms a closure with the &lt;em&gt;lexical environment&lt;/em&gt; of the &lt;em&gt;execution context&lt;/em&gt; which gets created when &lt;code&gt;calculateSimpleInterest&lt;/code&gt; function is invoked, closing over the variables defined inside the outer function (if any).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#let-us-see-the-usage"&gt;
  &lt;/a&gt;
  Let us see the usage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tm_4WEiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9mnmzjya95x4sq3w21z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tm_4WEiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9mnmzjya95x4sq3w21z.png" alt="Image description" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the invocation of &lt;code&gt;calculateSimpleInterest&lt;/code&gt; function using a value of 10000 as &lt;code&gt;principal&lt;/code&gt;, a new function &lt;code&gt;useRateAndTime&lt;/code&gt; gets created and in it the value of &lt;code&gt;principal&lt;/code&gt; gets &lt;strong&gt;locked&lt;/strong&gt; and is returned. Now we have the &lt;code&gt;useRateAndTimeFn&lt;/code&gt; constant in which we have the returned function having the &lt;code&gt;principal&lt;/code&gt; locked in. So we call the inner function now by passing the value of &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt;. Lastly we store the returned value in a variable with the name of &lt;code&gt;result&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;‚úî Use closures if you want a function to always have access to a &lt;strong&gt;private&lt;/strong&gt; piece of state. &lt;br&gt;
‚úî In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible even after returning from the outer function.&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;‚ö°Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Beeping out portions of an audio file using ffmpeg</title>
      <author>Nathan</author>
      <pubDate>Tue, 23 Nov 2021 13:37:42 +0000</pubDate>
      <link>https://dev.to/tonystark/beeping-out-portions-of-an-audio-file-using-ffmpeg-3gd4</link>
      <guid>https://dev.to/tonystark/beeping-out-portions-of-an-audio-file-using-ffmpeg-3gd4</guid>
      <description>&lt;p&gt;I'm trying to use ffmpeg to beep out sections of an audio file (say 10-15 and 20-30). However only the first portion(10-20) gets beeped, whilst the next portion gets muted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ffmpeg -i input.mp3 -filter_complex "[0]volume=0:enable='between(t,10,15)+between(t,20,30)'[main];sine=d=5:f=800,adelay=10s,pan=stereo|FL=c0|FR=c0[beep];[main][beep]amix=inputs=2" output.wav
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;a href="https://stackoverflow.com/a/59937864/13639008"&gt;this&lt;/a&gt; as my reference, but not able to make much progress.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>ffmpeg</category>
    </item>
    <item>
      <title>Python FastAPI crash course Part 2</title>
      <author>Eric The Coder</author>
      <pubDate>Tue, 23 Nov 2021 13:34:05 +0000</pubDate>
      <link>https://dev.to/ericchapman/python-fastapi-crash-course-part-2-1bnk</link>
      <guid>https://dev.to/ericchapman/python-fastapi-crash-course-part-2-1bnk</guid>
      <description>&lt;p&gt;Here is a crash course (series of articles) that will allow you to create an API in Python with FastAPI.&lt;/p&gt;

&lt;p&gt;I will publish a new article about every two days and little by little you will learn everything there is to know about FastAPI&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#create-a-crud-api"&gt;
  &lt;/a&gt;
  Create a CRUD API
&lt;/h2&gt;

&lt;p&gt;Now we are going to create an API that will be closer to what you will need to create in a real project.&lt;/p&gt;

&lt;p&gt;CRUD is an acronym that stands for Create, Read, Update, and Delete. These actions are the actions most often used when manipulating data.&lt;/p&gt;

&lt;p&gt;Here is a concrete example. Consider a data table containing products:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iWatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you might have URL paths to perform CRUD actions on this product board.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;p&gt;Create a new product&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;POST¬†www.example.com/products 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read all products&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET¬†www.example.com/products
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read a particular product (e.g. with id = 2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET¬†www.example.com/products/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify a specific product (e.g. with id = 2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;PUT¬†www.example.com/products/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delete a specific product (e.g. with id = 2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;DELETE¬†www.example.com/products/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the name and structure of URL paths are not random. It is a convention that is used in the creation of APIs.&lt;/p&gt;

&lt;p&gt;This is why to retrieve a particular product you must specify its id directly in the path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET¬†www.example.com/products/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FastAPI allows you to read this path and extract the relevant information. We will see this concept shortly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-step"&gt;
  &lt;/a&gt;
  First step
&lt;/h3&gt;

&lt;p&gt;In your file first-api.py replace the current content with this one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iWatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the server and test your API, type in the terminal (if you haven't already done so).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you can then visit: http: //127.0.0.1: 8000/products&lt;/p&gt;

&lt;p&gt;The list of all products will be displayed in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iWatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we created the READ of our CRUD API. Now let's see the other URL paths&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extract-the-id-from-the-url-path"&gt;
  &lt;/a&gt;
  Extract the "id" from the URL path
&lt;/h3&gt;

&lt;p&gt;To read all a particular product we need to extract the id from the url path. For example with the path "/products/2" how to extract the 2?&lt;/p&gt;

&lt;p&gt;FastAPI allows to automatically send part of the path in a variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not found"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the @app.get() the part represented by {id} will be sent in the variable "id" of the function index(id: int)&lt;/p&gt;

&lt;p&gt;It is then possible to use this "id" variable to find the right product.&lt;/p&gt;

&lt;p&gt;Note that the "id" parameter is completed with ":int" This addition allows you to specify the type of the variable, in this case an integer.&lt;/p&gt;

&lt;p&gt;Why use a type in the parameter? This allows FastAPI to validate the incoming data.&lt;/p&gt;

&lt;p&gt;For example the path "/products/abc" would return an error because "abc" is not an integer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-code"&gt;
  &lt;/a&gt;
  Status Code
&lt;/h3&gt;

&lt;p&gt;When the HTTP server returns a response, it always returns a status code with the response.&lt;/p&gt;

&lt;p&gt;All HTTP response status codes are separated into five classes or categories. The first digit of the status code defines the response class, while the last two digits have no ranking or categorization role. There are five classes defined by the standard:&lt;/p&gt;

&lt;p&gt;1xx information response - request has been received, process in progress&lt;/p&gt;

&lt;p&gt;2xx successful - the request was received, understood and accepted successfully&lt;/p&gt;

&lt;p&gt;3xx redirect - additional steps must be taken in order to complete the request&lt;/p&gt;

&lt;p&gt;Client error 4xx - request contains bad syntax or cannot be fulfilled&lt;/p&gt;

&lt;p&gt;Server error 5xx - the server failed to respond to an apparently valid request&lt;/p&gt;

&lt;p&gt;Here are some examples of status code&lt;/p&gt;

&lt;p&gt;200 OK&lt;/p&gt;

&lt;p&gt;201 Created&lt;/p&gt;

&lt;p&gt;403 Forbidden&lt;/p&gt;

&lt;p&gt;404 Not Found&lt;/p&gt;

&lt;p&gt;500 Internal Server Error&lt;/p&gt;

&lt;p&gt;In our last FastAPI example, if the product is not found the path will return "Not found" however the status code returned will always be "200 OK"&lt;/p&gt;

&lt;p&gt;By convention when a resource is not found it is necessary to return a status "404 Not Found"&lt;/p&gt;

&lt;p&gt;FastAPI allows us to modify the status code of the response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Product Not found"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To do this we must add 3 lines to our code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we need to import the Response object&lt;/li&gt;
&lt;li&gt;Then add the "response: Response" parameter to our function&lt;/li&gt;
&lt;li&gt;And finally change the status to 404 if the product is not found&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the "response: Response" parameter may seem strange to you, indeed how is it possible that the "response" variable contains an instance of the "Response" object without even having created this instance?&lt;/p&gt;

&lt;p&gt;This is possible because FastAPI creates the instance for us in the background. This technique is called "Dependency Injection".&lt;/p&gt;

&lt;p&gt;No need to understand this concept, just using it is enough for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extract-the-query-parameters"&gt;
  &lt;/a&gt;
  Extract the "Query Parameters"
&lt;/h3&gt;

&lt;p&gt;Take for example the following path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iPhone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This path requests the list of all products which contain the word "iPhone"&lt;/p&gt;

&lt;p&gt;The "?Search=iPhone" is a Query Parameter.&lt;/p&gt;

&lt;p&gt;FastAPI allows us to extract this variable from the URL path.&lt;/p&gt;

&lt;p&gt;After the existing code, enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/search"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"No Products Found"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just add the name of the variable as a parameter to the index() function. FastAPI will automatically associate Query Parameters with variables of the same name. So "?Name=iPhone" will end up in the parameter/variable "name"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#path-declaration-order"&gt;
  &lt;/a&gt;
  Path declaration order
&lt;/h3&gt;

&lt;p&gt;If you launch your server and try to visit the following URL path&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iPhone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will probably get this error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"detail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"loc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"id"&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"value is not a valid integer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"type_error.integer"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why ? The error message states that the value is not of type integer? Yet if we look at our function, no value is of type integer? We only have a "name" parameter&lt;/p&gt;

&lt;p&gt;In fact, the message speaks the truth. Here is all our code so far&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iWatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Product Not found"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/search"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"No Products Found"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a route "/products/{id}" which is declared before the last route. The dynamic part of route "{id}" means that all routes that match "/products/*" will be executed with this code.&lt;/p&gt;

&lt;p&gt;So when we ask for "/products/search/?Name=iPhone" FastAPI sends us to the second route because it matches "/products/*". The last function is never performed and never will be.&lt;/p&gt;

&lt;p&gt;The solution? Reverse the routes, the order of the routes is essential for FastAPI. it is therefore important to place dynamic routes like "/products/{id}" last&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iWatch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;699&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/search"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"No Products Found"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;founded_products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/products/{id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Product Not found"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code in that order, if you revisit "/products/search?Name=iphone". You will have the following answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>python</category>
      <category>fastapi</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Levelling as a Developer with Content Creation and Community Building #DevRel</title>
      <author>Saurabh Rai</author>
      <pubDate>Tue, 23 Nov 2021 13:33:21 +0000</pubDate>
      <link>https://dev.to/srbhr/levelling-as-a-developer-with-content-creation-and-community-building-devrel-17a9</link>
      <guid>https://dev.to/srbhr/levelling-as-a-developer-with-content-creation-and-community-building-devrel-17a9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#join-developer-relations-expert-at-new-relic-pachi-parra-for-her-amazing-talk-on-content-creation-and-community-building-join-git-commit-show-season03"&gt;
  &lt;/a&gt;
  Join Developer Relations Expert at New Relic Pachi Parra for her amazing talk on Content Creation and Community Building! Join &lt;a href="https://gitcommit.show"&gt;Git Commit Show&lt;/a&gt; #season03
&lt;/h1&gt;

&lt;p&gt;Get your &lt;strong&gt;FREE Tickets&lt;/strong&gt; &lt;a href="http://push.gitcommit.show/"&gt;here&lt;/a&gt; &lt;em&gt;Fill the form&lt;/em&gt; üëà&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Building a strong community is important?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Community is pretty much a group of people having similar interests coming together, either be it for creating ideas, working together, or personal growth. Why is it important? Because when people come together they bring in ideas together, collaborate and create amazing possibilities. Coming to collaborate together can lead to better ideas, and what not? How many creative ideas, upon which companies have been created formed in such communities when people/friends together came in to form ideas and learn! &lt;/p&gt;

&lt;p&gt;We're inviting you people to our Community of Developers, "Git Commit Show" so that we can learn, collaborate and participate together so that we all can learn and create more opportunities for everyone of us! &lt;/p&gt;

&lt;p&gt;About Pachi:-&lt;/p&gt;

&lt;p&gt;Pachi works as Developer Relations Engineer at New Relic and is a Streamer and Co-Founder of Feministech, an online community for Brazilian women and non-binary people who share and learn tech with live coding. Her passions include community building, hyping her friends and live coding on Twitch.&lt;/p&gt;

&lt;p&gt;Join Git Commit Show &lt;a href="https://gitcommit.show/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join our &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;Discord&lt;/a&gt; for more information! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_bRE7z23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73wopj8r03xvw1of2ox6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_bRE7z23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73wopj8r03xvw1of2ox6.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>career</category>
      <category>discuss</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to easily get started with ThreeJS - Part 1</title>
      <author>Davide Mandelli</author>
      <pubDate>Tue, 23 Nov 2021 13:21:58 +0000</pubDate>
      <link>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-1-go7</link>
      <guid>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-1-go7</guid>
      <description>&lt;p&gt;Hi guys, hope you are fine! :)&lt;/p&gt;

&lt;p&gt;Recently I came across a teaser video on &lt;a href="https://twitter.com/Th3Wall25"&gt;my Twitter&lt;/a&gt; feed: it was a &lt;a class="mentioned-user" href="https://dev.to/prismicio"&gt;@prismicio&lt;/a&gt;
 post of an interview with the great &lt;a class="mentioned-user" href="https://dev.to/brunosimon"&gt;@brunosimon&lt;/a&gt;
. During the interview he explains how to use ThreeJS to enhance a website with 3D elements.&lt;/p&gt;

&lt;p&gt;Here's a reference to that tweet:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55yvoMNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1454078456707403776/pu/img/PQU65J2ISrl6NOLv.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmOkC4qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1013754225917034497/wNvNaz0p_normal.jpg" alt="Prismic profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Prismic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prismicio"&gt;@prismicio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In this tutorial, &lt;a href="https://twitter.com/bruno_simon"&gt;@bruno_simon&lt;/a&gt; explains how to use &lt;a href="https://twitter.com/hashtag/threejs"&gt;#threejs&lt;/a&gt; to enhance a website with 3D elements.&lt;br&gt;&lt;br&gt;He takes a standard header section from basic to &lt;a href="https://twitter.com/hashtag/dynamic"&gt;#dynamic&lt;/a&gt; by swapping out the image for a cool shape with a matcap.&lt;br&gt;&lt;br&gt;Watch the full interview üëâ &lt;a href="https://t.co/Gbf2e4r2wC"&gt;youtu.be/tVr89249gwM&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:32 PM - 29 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This interview and the passion with which Bruno explains ThreeJS concepts inspired me A LOT so I've decided to start digging into this new virtual world.&lt;/p&gt;

&lt;p&gt;I'll try to recap and explain in the easiest and clearer way possible.&lt;br&gt;
&lt;em&gt;I promise you that in around 30 lines of code you will create your first working 3D element (recap at the end of the article).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;
&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;The first step is to create a new &lt;em&gt;index.html&lt;/em&gt; file that should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0, maximum-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/styles.css"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My first ThreeJS demo app&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"js/script.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we should add the two external files 'linked' inside our &lt;em&gt;index.html&lt;/em&gt; file: we create the &lt;em&gt;styles.css&lt;/em&gt; and &lt;em&gt;script.js&lt;/em&gt; files and we put them respectively inside &lt;em&gt;css&lt;/em&gt; and &lt;em&gt;js&lt;/em&gt; folders.&lt;/p&gt;

&lt;p&gt;Now it's time to initialize our package manager for the configuration of our project so we launch a&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My default package manager is NPM but you can obviously use Yarn instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#threejs-installation-and-setup"&gt;
  &lt;/a&gt;
  Three.js installation and setup
&lt;/h2&gt;

&lt;p&gt;In order to start playing with Three.js, we should install it. We can do it by opening the terminal and launching:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm install three&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, inside the &lt;em&gt;script.js&lt;/em&gt; we can import Three with the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have imported it, we can start using it.&lt;/p&gt;

&lt;p&gt;The first thing to know is that once Three is installed, we have access to one very specific variable which is 'THREE'. By logging it we can already see that we have access to a lot of things that this library supports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgR-zKwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0qy7vvgv0a8urr7bz37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgR-zKwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0qy7vvgv0a8urr7bz37.png" alt="Screenshot of console.log(THREE)" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-a-scene-a-camera-and-aspect-ratio"&gt;
  &lt;/a&gt;
  How to add a scene, a camera and aspect ratio
&lt;/h2&gt;

&lt;p&gt;We need three things to start with: the first one is a &lt;strong&gt;scene&lt;/strong&gt;, just like a movie set. On the scene you will add &lt;strong&gt;objects&lt;/strong&gt; (that might be characters) and a &lt;strong&gt;camera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First of all we create the empty &lt;strong&gt;scene&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the scene we said that we need to add a &lt;strong&gt;camera&lt;/strong&gt;.&lt;br&gt;
Here it's necessary to know that in Three.js exists various types of camera (have a look &lt;a href="https://threejs.org/docs/index.html?q=camera"&gt;here in the docs&lt;/a&gt; for further info).&lt;br&gt;
The one we will use is the &lt;strong&gt;PerspectiveCamera&lt;/strong&gt;, which mimics the way the human eye sees, it's like a real-life camera: the nearer you are, the bigger you will see.&lt;/p&gt;

&lt;p&gt;To create the camera we need to add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The camera needs some options as parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the first option is the &lt;strong&gt;FOV (Field Of View)&lt;/strong&gt; and is intended as degrees. We might choose an open angle of 180 degrees or a very close angle of 30 degrees, like photo lenses.&lt;br&gt;
As Bruno experience, he recommends to stay in a range that goes from 40 degrees to a maximum of 70 degrees, so we will use an angle of 55 degrees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the second required option is the &lt;strong&gt;aspect ratio&lt;/strong&gt;: since we want to cover the whole background of our page, we will insert the width and the height of our viewport, and in JS we can retrieve these sizes with &lt;em&gt;window.innerWidth&lt;/em&gt; and &lt;em&gt;window.innerHeight&lt;/em&gt;.&lt;br&gt;
TL/DR: The aspect ratio is just the width divided by the height.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things to understand with Three.js is that whatever object we want to include, we have to add it to the scene, and at this stage we can already add our camera by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#add-a-mesh-to-the-scene"&gt;
  &lt;/a&gt;
  Add a mesh to the scene
&lt;/h2&gt;

&lt;p&gt;With this first article (&lt;strong&gt;yes, it will be a small series&lt;/strong&gt; üòâ), we will add a cube to the scene.&lt;br&gt;
A cube is an object that we will be able to see, and in Three.js an object that we will be able to see is called &lt;strong&gt;mesh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A mesh is composed of two things: its &lt;strong&gt;geometry&lt;/strong&gt; (the &lt;em&gt;points&lt;/em&gt; that composes a geometry, like the number of vertices of a cube) and a &lt;strong&gt;material&lt;/strong&gt;, that is how the geometry will look when it will be rendered in the scene.&lt;/p&gt;

&lt;p&gt;We need to create first our geometry and since we want a cube, we will use its related class, the "BoxGeometry":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This class automatically knows that it should create the cubes points once it receives its required parameters, which are the &lt;em&gt;width&lt;/em&gt;, the &lt;em&gt;height&lt;/em&gt; and the &lt;em&gt;depth&lt;/em&gt; (&lt;a href="https://threejs.org/docs/index.html#api/en/geometries/BoxGeometry"&gt;reference to the docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now it's time to add the material that our cube will use when it renders. For this first experiment we want our cube to be completely red. So we add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "MeshBasicMaterial" class and all the available mesh and geometry classes are available in the documentation with a lot of examples. As a parameter we are passing in a color.&lt;/p&gt;

&lt;p&gt;The color parameter can be specified in many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as a string ('red');&lt;/li&gt;
&lt;li&gt;as a hexadecimal (#FF0000);&lt;/li&gt;
&lt;li&gt;as hexadecimal in base 16 (0xff0000).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we have our geometry and our material, so we can proceed to mix them in a mesh and add it to the scene:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#rendering-the-scene"&gt;
  &lt;/a&gt;
  Rendering the scene
&lt;/h2&gt;

&lt;p&gt;It's finally time to see our cube!&lt;/p&gt;

&lt;p&gt;We declare a renderer using the most common WebGL renderer, the "WebGLRenderer":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our renderer needs to know a size, and as we said before, we want our scene to take the full viewport width. So we can tell it to the renderer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see our scene, we now need to draw inside a &lt;em&gt;canvas&lt;/em&gt; üé®.&lt;br&gt;
Looking at our renderer variable we can notice that our canvas is contained inside the &lt;strong&gt;domElement&lt;/strong&gt; property.&lt;br&gt;
If we log it we can see our canvas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOVDVk13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnvg8fpttbcvnvtl4o32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOVDVk13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnvg8fpttbcvnvtl4o32.png" alt="Screenshot of renderer.domElement property" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point we will let ThreeJS create our canvas and append it inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page; we can do it by adding the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspecting our DOM we should now see our &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element added inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a last step for our renderer, we now have to tell it to render the canvas inside the page. It requires the &lt;em&gt;scene&lt;/em&gt; (in which we should have &lt;strong&gt;added&lt;/strong&gt; all the necessary elements) and the &lt;em&gt;camera&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait a minute.&lt;br&gt;
Why can't we see the cube yet?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/hEc4k5pN17GZq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hEc4k5pN17GZq/giphy.gif" alt="John Travolta wondering" width="426" height="213"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;
&lt;h2&gt;
  &lt;a href="#fixing-the-camera-and-rotating-the-cube"&gt;
  &lt;/a&gt;
  Fixing the camera and rotating the cube
&lt;/h2&gt;

&lt;p&gt;The answer of the previous question is related to the &lt;strong&gt;camera position&lt;/strong&gt;.&lt;br&gt;
We still can't see the cube because we are &lt;strong&gt;inside the cube&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You may be wondering now: shouldn't I see everything red around me since the cube is red?&lt;br&gt;
The answer is no: by default we cannot see the "inside" of the geometry. We can see the face, but not its reverse side.&lt;/p&gt;

&lt;p&gt;So, now that we know the above, we should move the camera position &lt;em&gt;outside&lt;/em&gt; of the cube. Moving up where we defined the camera variable, we add the following below that line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to move the camera &lt;em&gt;back&lt;/em&gt;, we need to work on the &lt;em&gt;Z&lt;/em&gt; axis.&lt;br&gt;
Once done, we can finally see our cube:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUBWXSMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqnniduebjln3q5xwocv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUBWXSMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqnniduebjln3q5xwocv.png" alt="First cube screenshot" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We might also move the camera position to the left/right or to top/bottom by editing the position on the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; axis (ie: for our final demo we will move our object a little bit to the right so we can reserve a space on the left for the heading, a paragraph and maybe a CTA).&lt;/p&gt;

&lt;p&gt;Since with these settings our object is flat, it doesn't seems to be a real cube. We can rotate the cube in order to see some angles.&lt;/p&gt;

&lt;p&gt;To do a rotation, we just need to work on our mesh object.&lt;br&gt;
As Bruno says, in order to move it horizontally, we have to think about putting something a spike on the y axis, so under our mesh declaration line we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Smxoj2-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15dhph57vz2y5pgcy2qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Smxoj2-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15dhph57vz2y5pgcy2qo.png" alt="Rotated cube screenshot" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind that the unit of measure is in radiants, not degrees. So math here can be our best friend with some concepts like the &lt;em&gt;PI&lt;/em&gt;, that is half of a circle.&lt;br&gt;
If you think with PI in mind, you can think like "1/8 of a circle" and things like that, just dividing or multiplying the &lt;strong&gt;Math.PI&lt;/strong&gt; value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
  ¬†
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;I leave down here the full &lt;em&gt;script.js&lt;/em&gt; code block so you can have a better look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally see our 3D cube on the page and we can play around with its position, its rotation, and its color.&lt;/p&gt;

&lt;p&gt;In the next articles (coming shortly in the next days), we will &lt;strong&gt;animate&lt;/strong&gt; the cube, we will see how we can change its geometry and material and we will also see how to make the canvas &lt;strong&gt;responsive&lt;/strong&gt;.&lt;br&gt;
We will also throw in some smooth animations and some cool little interactions with our object.&lt;/p&gt;

&lt;p&gt;The final result that we will achieve is already visible at this demo link:&lt;br&gt;
üëâüèº ¬†&lt;a href="https://th3wall-threejs.netlify.app"&gt;https://th3wall-threejs.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have already learned something and I hope you find this article interesting.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/Th3Wall25"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/Th3Wall"&gt;GitHub&lt;/a&gt; &amp;amp; &lt;a href="https://hashnode.com/@th3wall"&gt;Hashnode&lt;/a&gt;.&lt;br&gt;
Let me know if you liked it!&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br&gt;
Th3Wall&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>threejs</category>
      <category>webgl</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
