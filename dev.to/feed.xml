<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to install VS Code in an Android Phone?</title>
      <author>Archit Sharma</author>
      <pubDate>Tue, 10 Aug 2021 09:54:58 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/how-to-install-vs-code-in-an-android-phone-cbh</link>
      <guid>https://dev.to/iarchitsharma/how-to-install-vs-code-in-an-android-phone-cbh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before starting this post I want to say that there are lot of blogs already present on how to install VS Code on your Android phone but most of them are outdated and are not well written.&lt;br&gt;
So my aim is to right a beginner friendly blog, All you need to do is Download Termux which is an Android terminal emulator and copy paste the commands.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article I will tell you how to install VS Code in your Android Phone with the use of Termux emulator.&lt;/p&gt;

&lt;p&gt;Although I do not recommend anyone to do all the coding in the phone but still having familiar interface would make things useful.&lt;br&gt;
This was all possible due to the package: &lt;em&gt;&lt;a href="https://github.com/cdr/code-server"&gt;Code Server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#termux"&gt;
  &lt;/a&gt;
  Termux
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://termux.com/"&gt;Termux&lt;/a&gt; is a Android terminal emulator which doesn't require root, You can download it either from the &lt;a href="https://play.google.com/store/apps/details?id=com.termux&amp;amp;hl=en&amp;amp;gl=US"&gt;Google Play store&lt;/a&gt; or &lt;a href="https://f-droid.org/repository/browse/?fdid=com.termux"&gt;F-Droid&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE: Since November 2, 2020 Termux in Google Play Store is no longer able to publish updates of Termux application and add-ons because they are not ready for changes upcoming with SDK level 29 (Android 10).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#update-termux"&gt;
  &lt;/a&gt;
  Update Termux
&lt;/h1&gt;

&lt;p&gt;Now that we have installed Termux we need to update the system.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#to-upgrade-termux-run"&gt;
  &lt;/a&gt;
  To upgrade Termux run:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#install-required-packages"&gt;
  &lt;/a&gt;
  Install required packages
&lt;/h1&gt;

&lt;p&gt;Now we have to install some keyfiles or required packages which will help us to install and run code-server(VS Code).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#to-install-the-required-packages"&gt;
  &lt;/a&gt;
  To install the required packages:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install build-essential python git nodejs yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After running this command Termux will ask:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Do you want to continue? [y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to press &lt;code&gt;y&lt;/code&gt; and the Installation will begin.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h1&gt;

&lt;p&gt;Now that all the packages has been installed, its time to install VS Code on your Android phone which is approx. 70 MB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-install-vscode-run"&gt;
  &lt;/a&gt;
  To install VSCode, run:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add code-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take some time to install, so be patient. After install is complete move to the next step.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-url-and-password"&gt;
  &lt;/a&gt;
  Get URL and Password
&lt;/h1&gt;

&lt;p&gt;Now before we can start using VS Code we need to get two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Local host address&lt;/li&gt;
&lt;li&gt;Password for login&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#we-can-get-both-the-address-and-password-by-running-this-command"&gt;
  &lt;/a&gt;
  We can get both the address and Password by running this command:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail ~/.config/code-server/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command you will get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-addr: 127.0.0.1:8080
auth: password
password: 8921384c6e1f8ff4nn630h1v
cert: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in my case local address is : &lt;code&gt;127.0.0.1:8080&lt;/code&gt; and password is : &lt;code&gt;8921384c6e1f8ff4nn630h1v&lt;/code&gt;.&lt;br&gt;
Make sure to copy both the address and password from your terminal and move to final step.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#run-vs-code"&gt;
  &lt;/a&gt;
  Run VS Code
&lt;/h1&gt;

&lt;p&gt;It's time to run and use the VS Code in you phone.&lt;br&gt;
To run VS Code type this in termux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;code-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#now-the-vs-code-is-running"&gt;
  &lt;/a&gt;
  Now the VS Code is running,
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrf6L2MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txji8zgl7wwtzt0uu2p6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrf6L2MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txji8zgl7wwtzt0uu2p6.jpg" alt="Code Server VS Code running on Termux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#go-to-your-browser-and-paste-the-address-that-you-copied"&gt;
  &lt;/a&gt;
  Go to your browser and paste the address that you copied
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwB8Sm0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxeugodf4y9b1bbrqb6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwB8Sm0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxeugodf4y9b1bbrqb6.jpg" alt="Paste Local address"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#your-browser-will-ask-for-password-paste-the-password-that-you-have-copied-from-your-terminal-and-click-on-submit"&gt;
  &lt;/a&gt;
  Your browser will ask for password, paste the password that you have copied from your terminal and click on submit.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqHeDaqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1douwi72k9yx7wh05pek.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqHeDaqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1douwi72k9yx7wh05pek.jpg" alt="Enter code-server password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#congratulation-vs-code-is-now-running-on-your-browser"&gt;
  &lt;/a&gt;
  Congratulation VS Code is now running on your browser.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5awHzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dydu4c3sy1mhbcgmq34e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5awHzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dydu4c3sy1mhbcgmq34e.jpg" alt="VS Code on Android by iArchitSharma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope you are having fun using VS Code in your Android Device&lt;br&gt;
You can also install VS Code in your other devices too using &lt;a href="https://github.com/cdr/code-server"&gt;Code Server&lt;/a&gt; repository.&lt;br&gt;
Do follow me as I will write more articles on how to install VS Code like this in your other devices. - Archit Sharma&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Adding 100 underline/overlay animations | The impressive CSS collection ⭐️</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 10 Aug 2021 09:50:07 +0000</pubDate>
      <link>https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93</link>
      <guid>https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93</guid>
      <description>&lt;p&gt;After the &lt;a href="https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje"&gt;CSS loaders&lt;/a&gt;, it's time for this collection to reach 500 animations as well. Yes, &lt;strong&gt;500 CSS underline/overlay animations!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted to reach that milestone without using pseudo elements but it was a bit tough 😅 so for this one I will introduce pseudo elements. &lt;/p&gt;

&lt;p&gt;As usual: No SVG, No JS, No keyframes, only one HTML element and CSS transitions.&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-cloned"&gt;The Cloned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-irregular-iii"&gt;The Irregular III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-colorful-ii"&gt;The Colorful II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides-iv"&gt;The All Sides IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unexpected-iv"&gt;The Unexpected IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy-v"&gt;The Fancy V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-broken-iii"&gt;The Broken III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-stroke"&gt;The Stroke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-transformed-ii"&gt;The Transformed II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multicolor-iii"&gt;The Multicolor III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted-v"&gt;The Inverted V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multi-steps-ii"&gt;The Multi-Steps II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-strange"&gt;The Strange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-abstract"&gt;The Abstract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-cloned"&gt;
  &lt;/a&gt;
  The Cloned
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWvzQzY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-irregular-iii"&gt;
  &lt;/a&gt;
  The Irregular III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYyMQqW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-colorful-ii"&gt;
  &lt;/a&gt;
  The Colorful II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmZQxg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides-iv"&gt;
  &lt;/a&gt;
  The All Sides IV
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWRoZQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-unexpected-iv"&gt;
  &lt;/a&gt;
  The Unexpected IV
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmZQdW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy-v"&gt;
  &lt;/a&gt;
  The Fancy V
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYyMQKy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-broken-iii"&gt;
  &lt;/a&gt;
  The Broken III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYwyRgq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-stroke"&gt;
  &lt;/a&gt;
  The Stroke
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BaRvYXq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-transformed-ii"&gt;
  &lt;/a&gt;
  The Transformed II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVEMbM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multicolor-iii"&gt;
  &lt;/a&gt;
  The Multicolor III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRmPxRG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-inverted-v"&gt;
  &lt;/a&gt;
  The Inverted V
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/dyWwmPV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multisteps-ii"&gt;
  &lt;/a&gt;
  The Multi-Steps II
&lt;/h3&gt;

&lt;p&gt;all the below will not work on Firefox due to the lack of support of &lt;code&gt;@property&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abWPYOp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-strange"&gt;
  &lt;/a&gt;
  The Strange
&lt;/h3&gt;

&lt;p&gt;#1,#2,#3 and #4 will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/jOmXzPg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-abstract"&gt;
  &lt;/a&gt;
  The Abstract
&lt;/h3&gt;

&lt;p&gt;Tell me what do you see and I will tell you who you are&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVEMWy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;If I count the CSS loaders, you have now more than &lt;strong&gt;1000&lt;/strong&gt; single div animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Zt3c5K3nBhU2LG8/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Zt3c5K3nBhU2LG8/giphy-downsized.gif" alt="one thousand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you missed the last CSS loaders collection&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/adding-100-css-loaders-to-the-collection-of-500-css-loaders-2a3p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Adding 100 CSS loaders to the collection of — 500 CSS loaders 🏆&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Jun 29 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;A special thanks to &lt;a class="mentioned-user" href="https://dev.to/adriantwarog"&gt;@adriantwarog&lt;/a&gt;
 who made a video about my first collection. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cDXUPkcw8HM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Our new colour scheme and design base + accessibility considerations [feedback wanted!...you don't have to be kind 😨]</title>
      <author>InHuOfficial</author>
      <pubDate>Tue, 10 Aug 2021 09:48:33 +0000</pubDate>
      <link>https://dev.to/inhuofficial/our-new-colour-scheme-and-design-base-feedback-wanted-go7</link>
      <guid>https://dev.to/inhuofficial/our-new-colour-scheme-and-design-base-feedback-wanted-go7</guid>
      <description>&lt;p&gt;Super short and positive (for once...I seem to have been on a bit of a naughty streak!) post. &lt;/p&gt;

&lt;p&gt;Finally at the stage of building the front end for Inclusivity Hub (InHu). After much deliberation and fiddling we have settled on the colour scheme and have a rough idea of the branding!&lt;/p&gt;

&lt;p&gt;So I thought I would share the design for feedback (negative feedback and constructive feedback is more than welcomed!).&lt;/p&gt;

&lt;p&gt;At the same time, I thought I would show how little adjustments / thought processes mean that you can create an accessible colour palette that is (hopefully) appealing and share a little bit of the thought process behind it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-the-final-design"&gt;
  &lt;/a&gt;
  Let's start with the final design!
&lt;/h2&gt;

&lt;p&gt;Start at the end and work backwards!&lt;/p&gt;

&lt;p&gt;I won't bore you with the thought process too much as to why we chose the "stripes", I will just share the inspiration behind the design, which bits we liked and then the final product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h3&gt;

&lt;p&gt;I liked the following two images:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0Yz5xHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/070/759/large_2x/creative-abstract-dynamic-geometric-elements-pattern-design-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0Yz5xHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/070/759/large_2x/creative-abstract-dynamic-geometric-elements-pattern-design-vector.jpg" alt="geometric background with diagonal rounded rectangles, circles with lines through them, dots and dashes in a pink, purple and dark blue colour scheme with yellow highlights"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.vecteezy.com/vector-art/2070759-creative-abstract-dynamic-geometric-elements-pattern-design"&gt;https://www.vecteezy.com/vector-art/2070759-creative-abstract-dynamic-geometric-elements-pattern-design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVZV_QnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/001/936/591/large_2x/abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVZV_QnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/001/936/591/large_2x/abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background-vector.jpg" alt="vector background with uniform rectangles at 45 degree angle, fully rounded ends, evenly spaced in a "&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.vecteezy.com/vector-art/1936591-abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background"&gt;https://www.vecteezy.com/vector-art/1936591-abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first one was too busy though and the second one was too uniform. We wanted something in between and I, in particular wanted to see a more friendly colour scheme with a bit more variance in colours!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-anchor-design"&gt;
  &lt;/a&gt;
  The anchor design
&lt;/h3&gt;

&lt;p&gt;After a bit of fiddling I finalised an idea and got to work designing. &lt;/p&gt;

&lt;p&gt;And here is the "anchor design" around which our branding will be built:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6gpfDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l62yq3zhgzw7y5d8d2rb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6gpfDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l62yq3zhgzw7y5d8d2rb.jpg" alt="Dark purple background with 45 degree rounded rectangles, hollow circles with thick outlines and filled circles with multiple colours that are bright and vibrant."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bright, colourful and I could tell you a whole story about why we chose certain things but, in the end, this is what we ended up with.&lt;/p&gt;

&lt;p&gt;Needs some minor spacing tweaks but it is 95% of the way there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-always-like-to-do-the-business-cards-next"&gt;
  &lt;/a&gt;
  I always like to do the business cards next
&lt;/h3&gt;

&lt;p&gt;To see if a design "works in the real world" I think business cards are a great place to start.&lt;/p&gt;

&lt;p&gt;They are easy to make (so if you hate the design you can scrap it without wasting too much time) and they have two sides so you can try a light theme and a dark theme on one product.&lt;/p&gt;

&lt;p&gt;Yet again, without all the design fluff, here are the rough designs for the cards:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#front"&gt;
  &lt;/a&gt;
  Front
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpcZTVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrf6fxpoe25el8ql0pqo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpcZTVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrf6fxpoe25el8ql0pqo.jpg" alt='The InHu logo sat on top of the background with a drop shadow to make it look like it is floating. The InHu logo is a pink thick outline with a slight gap containing the text InHu split dark purple for "In" and pink for "Hu" with a little curve at the bottom. Due to weighting on the "I" and the "U" being stronger it looks like a smiling face. The background is dark purple with 45 degree rounded rectangles, hollow circles with thick outlines and filled circles with multiple colours that are bright and vibrant.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much different, just the company logo on top (with slightly adjusted colours to match new colour scheme)! "Floating" the logo with a drop shadow was the best way to make it stand out and remove some of the flatness from the design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#back"&gt;
  &lt;/a&gt;
  Back
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---woFHN19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qxz13586oghsflxv5l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---woFHN19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qxz13586oghsflxv5l.jpg" alt="White background with the same colourful circles, rounded rectangles and outlined shapes. The shapes are located at the top and bottom of the card to allow space in the middle for text. There is placeholder text for person name and position to the left and to the right there are 3 rounded rectangles stacked vertically, each with an icon to the left of them to represent their contents. The 3 rounded rectangles contain placeholder text for a phone number, email address and the web address"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carrying the lines over to the top and bottom while leaving a decent amount of white space in the middle gives the basis for printed things such as invoices, letters etc.&lt;/p&gt;

&lt;p&gt;I am still not quite happy with it but it is close to the end product! &lt;/p&gt;

&lt;p&gt;So, yet again, what do you think?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-considerations"&gt;
  &lt;/a&gt;
  Accessibility considerations
&lt;/h2&gt;

&lt;p&gt;Now that you have seen the design, let's talk a little bit about accessibility.&lt;/p&gt;

&lt;p&gt;The design is not just a background / visual interest. It is the basis of the colour palette for the company for all other printed and digital media.&lt;/p&gt;

&lt;p&gt;So we had to make sure that contrast was good.&lt;/p&gt;

&lt;p&gt;If you want to know the exact details of colour contrast requirements then the &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;colour contrast checker from WebAim&lt;/a&gt; is a great tool to play with that has explanations below.&lt;/p&gt;

&lt;p&gt;I will just give the cliff notes:&lt;br&gt;
For text we want a minimum of 3:1 for cases where we can use large text or for controls (to be used sparingly though!). For most text we want at least 4.5:1 contrast so we can use normal sized text.&lt;/p&gt;

&lt;p&gt;For the main body text we want at least 7:1 contrast so that it is easy to read.&lt;/p&gt;

&lt;p&gt;That is basically it!&lt;/p&gt;

&lt;p&gt;But that does get quite complicated when designing a colour palette. &lt;/p&gt;

&lt;p&gt;For example, orange is a low contrast colour with white. So to make an orange that meets the minimum standards of 3:1 you have to make it quite dark.&lt;/p&gt;

&lt;p&gt;Yellow is out of the question with white, so that is for use on / with dark colours and as decoration.&lt;/p&gt;

&lt;p&gt;Why am I picking out those colours in particular? Because we as developers use them for warnings, statuses etc. as they are the expected colours. We need to have at least one colour between "red" and "green" so we decided to make a dark orange as part of the colour scheme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-there-a-method-you-can-use-to-get-it-right"&gt;
  &lt;/a&gt;
  Is there a method you can use to get it right?
&lt;/h3&gt;

&lt;p&gt;There are a lot of &lt;a href="https://dev.to/5t3ph/generate-accessible-button-colors-with-buttonbuddy-41mg"&gt;tools you can use&lt;/a&gt; that will help you generate an accessible colour scheme and &lt;a href="https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o"&gt;check contrast&lt;/a&gt;. The problem is that they end up avoiding colours that you may want to use.&lt;/p&gt;

&lt;p&gt;The trick is to get a colour scheme you like without thinking about accessibility. &lt;/p&gt;

&lt;p&gt;Then you adjust the darkness / lightness / hue on colours with low contrast and see if the scheme still works. &lt;/p&gt;

&lt;p&gt;If there are colours that you want to use but you cannot get the contrast high enough, mark them as decorative colours.&lt;/p&gt;

&lt;p&gt;I find the best way to do it is to lay the colour palette out in blocks and then add the contrast ratios on top of them. Then you can easily see which ones you can use in which situations.&lt;/p&gt;

&lt;p&gt;An example of this is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlCY2Pfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbhcldgpsy2o2tc74xwe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlCY2Pfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbhcldgpsy2o2tc74xwe.jpg" alt="Described immediately below due to too much information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description of colours&lt;/strong&gt;: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Colour&lt;/th&gt;
&lt;th&gt;Hex Colour Background&lt;/th&gt;
&lt;th&gt;Hex Colour Text&lt;/th&gt;
&lt;th&gt;Contrast Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Primary background&lt;/td&gt;
&lt;td&gt;#522876&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;10.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Primary logo&lt;/td&gt;
&lt;td&gt;#7E4998&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;6.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Secondary logo&lt;/td&gt;
&lt;td&gt;#A55A9F&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pink (danger)&lt;/td&gt;
&lt;td&gt;#E02367&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orange (warning)&lt;/td&gt;
&lt;td&gt;#EA5A1F&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Amber (decorative)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;#F49955&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2.2 (too low)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Purp 2 (Primary)&lt;/td&gt;
&lt;td&gt;#694F9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark Blue (info)&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;7.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Light Blue (widgets)&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Primary Text&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deselect text&lt;/td&gt;
&lt;td&gt;#E1E1E4&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;7.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disabled text&lt;/td&gt;
&lt;td&gt;#B1B1B1&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark theme 1&lt;/td&gt;
&lt;td&gt;#757575&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark theme 2&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Purple ancillary&lt;/td&gt;
&lt;td&gt;#F5F0F8&lt;/td&gt;
&lt;td&gt;#423262&lt;/td&gt;
&lt;td&gt;5.84&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blue ancillary&lt;/td&gt;
&lt;td&gt;#DDEDFB&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;6.61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green ancillary&lt;/td&gt;
&lt;td&gt;#E3F1E5&lt;/td&gt;
&lt;td&gt;#26602E&lt;/td&gt;
&lt;td&gt;6.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Red ancillary&lt;/td&gt;
&lt;td&gt;#FDF2F6&lt;/td&gt;
&lt;td&gt;#B21F59&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orange ancillary&lt;/td&gt;
&lt;td&gt;#FEF2EA&lt;/td&gt;
&lt;td&gt;#BD421C&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grey 1 ancillary&lt;/td&gt;
&lt;td&gt;#E1E1E4&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;7.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grey 2 ancillary&lt;/td&gt;
&lt;td&gt;#B1B1B1&lt;/td&gt;
&lt;td&gt;#333333&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;By doing it this way it makes it easy to pick out which colours can be used for what!&lt;/p&gt;

&lt;p&gt;Oh and if you like the colour scheme &lt;strong&gt;feel free to use it&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shouldnt-you-be-going-for-wcag-aaa-colour-contrast-as-an-accessibility-advocate"&gt;
  &lt;/a&gt;
  Shouldn't you be going for WCAG AAA colour contrast as an accessibility advocate?
&lt;/h3&gt;

&lt;p&gt;Good point, you obviously know accessibility, can we be friends? 😋&lt;/p&gt;

&lt;p&gt;The answer is no, we are geared up to produce high contrast versions of our printed media.&lt;/p&gt;

&lt;p&gt;Our digital products (that we control) will all have options to turn on a high contrast mode (and turn on automatically with media queries) under a prominent custom build accessibility settings section.&lt;/p&gt;

&lt;p&gt;The people who say your site should be &lt;a href="https://www.w3.org/WAI/WCAG2AAA-Conformance"&gt;WCAG AAA compliant&lt;/a&gt; from the beginning are just a little too militant. (there are 3 levels, A, AA and AAA, with AAA being "superstar" or "above and beyond" status). &lt;/p&gt;

&lt;p&gt;WCAG AA is a standard that about 1% of companies manage to achieve (about &lt;a href="https://webaim.org/projects/million/#wcag"&gt;97.4% of websites have automatically detectable errors on their home pages!&lt;/a&gt; and we can only &lt;a href="https://accessibility.blog.gov.uk/2017/02/24/what-we-found-when-we-tested-tools-on-the-worlds-least-accessible-webpage/"&gt;capture about 40% of accessibility errors automatically&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;So I am more than happy to say that is our yard stick for "when digital products load" if we can then provide controls to make things AAA rated...we will join a handful of companies in the world that have ever achieved that, so I think that is a fair compromise!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-next"&gt;
  &lt;/a&gt;
  So what is next?
&lt;/h2&gt;

&lt;p&gt;So now we have the base design (and after feedback from you!) we will finalise the base design and design outwards from there.&lt;/p&gt;

&lt;p&gt;The next thing I would normally design is a "style tile". If you haven't heard of it, it is essentially a single page branding guidelines with core principles demonstrated. There is a &lt;a href="http://styletil.es/"&gt;great site about style tiles&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Hsgskf</author>
      <pubDate>Tue, 10 Aug 2021 09:44:24 +0000</pubDate>
      <link>https://dev.to/hsgskf/10-magical-javascript-tips-for-every-web-developer-1fbo</link>
      <guid>https://dev.to/hsgskf/10-magical-javascript-tips-for-every-web-developer-1fbo</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Hsgskf</author>
      <pubDate>Tue, 10 Aug 2021 09:31:57 +0000</pubDate>
      <link>https://dev.to/hsgskf/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-4i5k</link>
      <guid>https://dev.to/hsgskf/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-4i5k</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>🚀20 Best CSS3 Library For Developers.</title>
      <author>Hsgskf</author>
      <pubDate>Tue, 10 Aug 2021 09:31:04 +0000</pubDate>
      <link>https://dev.to/hsgskf/20-best-css3-library-for-developers-526l</link>
      <guid>https://dev.to/hsgskf/20-best-css3-library-for-developers-526l</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>6 Magical Python Tips For Developer</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 09:29:25 +0000</pubDate>
      <link>https://dev.to/codeifys/6-magical-python-tips-for-developer-18ki</link>
      <guid>https://dev.to/codeifys/6-magical-python-tips-for-developer-18ki</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;6 magical Python Tips And Tricks For Programmers&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.codelivly.com/what-is-python-basis-of-python-explained/"&gt;Python&lt;/a&gt; is one of the most preferred languages out there. Its brevity and high readability makes it so popular among all programmers.&lt;br&gt;So here are few of the tips and tricks you can use to bring up your Python programming game.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. In-Place Swapping Of Two Numbers.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;x, y &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;10&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;20&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(x, y) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;x, y &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;y, x &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(x, y) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt;10 20&lt;br&gt;&lt;br&gt;
20 10&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Reversing a string in Python&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;a &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;"codelivly"&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;"Reverse is"&lt;/code&gt;&lt;code&gt;, a[::&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;1&lt;/code&gt;&lt;code&gt;]) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt; Reverse is ylviledoc&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Create a single string from all the elements in list&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;a &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;[&lt;/code&gt;&lt;code&gt;"Coding"&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;"is"&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;"life"&lt;/code&gt;&lt;code&gt;] &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;" "&lt;/code&gt;&lt;code&gt;.join(a)) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt;Coding is life&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Chaining Of Comparison Operators.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;n &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;10&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;result &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;&amp;lt; n &amp;lt; &lt;/code&gt;&lt;code&gt;20&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(result) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;result &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;&amp;gt; n &amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;9&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(result) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt;True&lt;br&gt;&lt;br&gt;
False&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Print The File Path Of Imported Modules.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;import&lt;/code&gt; &lt;code&gt;os &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;import&lt;/code&gt; &lt;code&gt;socket &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(os) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(socket) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt;&amp;lt;module 'os' from '/usr/lib/python3.5/os.py'&amp;gt;&lt;br&gt;&lt;br&gt;
&amp;lt;module 'socket' from '/usr/lib/python3.5/socket.py'&amp;gt;&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5. Use Of Enums In Python.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;class&lt;/code&gt; &lt;code&gt;MyName: &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;    &lt;/code&gt;&lt;code&gt;Coding, is, life &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;range&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;3&lt;/code&gt;&lt;code&gt;) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(MyName.Coding) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(MyName.is) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(MyName.life) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;br&gt;&lt;pre&gt;2&lt;br&gt;&lt;br&gt;
1&lt;br&gt;&lt;br&gt;
2&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6. Return Multiple Values From Functions.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;def&lt;/code&gt; &lt;code&gt;x(): &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;    &lt;/code&gt;&lt;code&gt;return&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;2&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;3&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;4&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;a, b, c, d &lt;/code&gt;&lt;code&gt;=&lt;/code&gt; &lt;code&gt;x() &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;br&gt;&lt;br&gt;
&lt;code&gt;print&lt;/code&gt;&lt;code&gt;(a, b, c, d) &lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;b&gt;Output:&lt;/b&gt;&lt;pre&gt;&lt;span&gt;1 2 3 4&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;Article Was Originally Published to : &lt;/pre&gt;
&lt;pre&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/10-magical-python-tips-for-every-developer/"&gt;10 Magical Python Tips For Every Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>SvelteKit Blog SEO: Climb the Search Results Page</title>
      <author>Rodney Lab</author>
      <pubDate>Tue, 10 Aug 2021 09:00:02 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-blog-seo-climb-the-search-results-page-o3p</link>
      <guid>https://dev.to/askrodney/sveltekit-blog-seo-climb-the-search-results-page-o3p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo"&gt;
  &lt;/a&gt;
  ✨ SvelteKit Blog SEO
&lt;/h2&gt;

&lt;p&gt;Today we'll look at the updated SvelteKit starter to nail your SvelteKit Blog SEO.  We &lt;a href="https://rodneylab.com/sveltekit-blog-starter/"&gt;looked at the MDsveX Blog starter itself&lt;/a&gt; in an earlier post and saw how to fire it up, what files the starter includes and so on.  Since then I &lt;a href="https://rodneylab.com/sveltekit-pwa/"&gt;added Progressive Web App (PWA) functionality &lt;/a&gt;  to it.  In between the two we had a series of posts on SvelteKit Search Engine Optimisation (SEO). The series covered a &lt;a href="https://rodneylab.com/sveltekit-seo/"&gt;range of topics from why SEO is important to getting nice images in the Tweet&lt;/a&gt; when a visitor shares a link to your site on Twitter.  We also looked at &lt;a href="https://rodneylab.com/open-graph-seo-sveltekit/"&gt;how to get preview cards to show up in messaging apps using Open Graph&lt;/a&gt;.  The series ended with a &lt;a href="https://rodneylab.com/adding-schema-org-markup-to-sveltekit-site/"&gt;look at Schema.org and how to get the search engines to understand what you site is about&lt;/a&gt;, and make it more likely that search engines will feature your site.&lt;/p&gt;

&lt;p&gt;The first post in the series included a poll on whether to include SEO components in the MDsveX starter.  Thanks if you voted!  The people spoke and asked me to include the components. I have set about updating the starter.  This post takes a look at how you can customise the starter to include the SEO meta you want on your blog site pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mdsvex-sveltekit-blog-starter-seo"&gt;
  &lt;/a&gt;
  🔌 MDsveX SvelteKit Blog Starter SEO
&lt;/h2&gt;

&lt;p&gt;MDsveX just means you can write blog posts in markdown with Svelte code included.  It is a similar idea to MDX (JSX in Markdown).  The starter includes some placeholder blog posts.  You add your own blog posts by creating a directory under &lt;code&gt;src/routes/my-blog-post-slug/&lt;/code&gt; and adding content to a &lt;code&gt;index.md&lt;/code&gt; file within that new folder.  If we open up &lt;code&gt;src/routes/twin-lens-reflex-camera/index.md&lt;/code&gt; we see one of the placeholder blog posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
postTitle: 'Twin Lens Reflex Camera'
focusKeyphrase: 'Twin Lens Reflex love'
datePublished: '2021-04-06T10:31:48.000+0100'
lastUpdated: '2021-04-14T10:17:52.000+0100'
seoMetaDescription: 'TLR or Twin Lens Reflex Cameras have the benefit of you being able to hold the camera at waist level to take a picture and get a more engaging camera angle.'
featuredImage: 'twin-lens-reflex-camera.jpg'
featuredImageAlt: 'Photograph of a Rolleicord twin Lens reflex camera'
ogImage: 'twin-lens-reflex-camera-open-graph.jpg'
ogSquareImage: 'twin-lens-reflex-camera-open-graph-square.jpg'
twitterImage: 'twin-lens-reflex-camera-twitter.jpg'
categories: ''
&lt;span class="gh"&gt;tags: ''
--------
&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  import ExternalLink from '$lib/components/ExternalLink.svelte';
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="gu"&gt;## What is a Twin Lens Reflex Camera?&lt;/span&gt;

Traditionally, the most common type of camera was a Single Lens Reflex camera. Today digital mirrorless cameras are becoming more prevalent. These cameras have an electronic viewfinder which lets you see exactly what will appear in the capture. Things weren't that easy with earlier film cameras. The image needs to be captured on light sensitive film, which must be kept in alight-sealed compartment until you press the shutter release. Since the lens is aligned for capturing your image on the film, you need another way to preview and line up your shot. Single Lens Reflex cameras have view finder, normally at the top of the camera. A mirror inside the camera reflects the image into the viewfinder, deflecting from the film, while you line up your shot. When you fire the shutter, the camera automatically lifts the mirror out of the way before opening the shutter, so that the image can be captured.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From line &lt;code&gt;20&lt;/code&gt; down the file is mostly markdown.  Lines &lt;code&gt;16&lt;/code&gt;–&lt;code&gt;18&lt;/code&gt; use Svelte to include a Svelte component which the post later uses.  The first section (lines &lt;code&gt;1&lt;/code&gt;–&lt;code&gt;14&lt;/code&gt;) is most important as regards SEO.  This is the frontmatter and includes post metadata.  Some fields here are used in the starter's SEO component.  Namely: &lt;code&gt;postTitle&lt;/code&gt;, the dates, &lt;code&gt;seoMetaDescription&lt;/code&gt; and the images.  The fields' data populate the SEO meta tags which Twitter, Facebook and Search engines check for.  So, for each new post you write, it is important to include these, customised for that post's images and data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-images"&gt;
  &lt;/a&gt;
  Social Images
&lt;/h3&gt;

&lt;p&gt;Let's look a bit closer at the images.  These are the images which will appear when the post is shared on various social platforms.  As we saw in the SEO series, they are used widely in apps and platforms beyond Facebook and Twitter.  The starter is setup to use Imgix for image hosting and to generate Next-Gen image formats compatible with the user's browser. You can use another source and we will look at what you need to change for other image sources in a moment.  Anyway for now, all you need to know is that the values defined here for images are just the filename in our Imgix storage folder.&lt;/p&gt;

&lt;p&gt;Besides, frontmatter, the other main source of data for the SEO component is the &lt;code&gt;src/lib/config/website.js&lt;/code&gt; file.  You will see some components import data from here.  In turn that data is sourced from the &lt;code&gt;.env&lt;/code&gt; file.  This saves committing potentially private data to your site's repo.  Before you fire up your site, copy the &lt;code&gt;.env.EXAMPLE&lt;/code&gt; file in the project root folder to &lt;code&gt;.env&lt;/code&gt; and customise for your own site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%8B-blogpost-component"&gt;
  &lt;/a&gt;
  🖋 BlogPost Component
&lt;/h2&gt;

&lt;p&gt;Within the BlogPost component (&lt;code&gt;src/lib/components/BlogPost.svelte&lt;/code&gt;), the filenames used in the posts themselves for social images are converted into URLs.  Here is an example for the featured image.  The &lt;code&gt;featuredImage&lt;/code&gt; variable is the same as the one defined in the post's markdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  const featuredImageUrl = client.buildURL(featuredImage, { w: 672, h: 448 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the Imgix plugin to generate the URL.  If you do not want to use Imgix to host your images, just assign the URL for the image source to &lt;code&gt;featuredImageUrl&lt;/code&gt; here.  You can do similarly for the Twitter and Open Graph images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo-meta-tags"&gt;
  &lt;/a&gt;
  🤖 SEO Meta Tags
&lt;/h2&gt;

&lt;p&gt;The SEO meta tags are generated by components in the &lt;code&gt;src/lib/components/SEO&lt;/code&gt; folder.  Take a look in here if you want to include more or fewer meta tags.  Here is the Twitter component as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;twitterUsername&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeToRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/*
   * When there is an equivalent og tag present, Twitter takes that so check OpenGraph before
   * adding additional tags, unless you want to override OpenGraph.
   */&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svelte:head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {#if image}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{image.url}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
  {#if twitterUsername}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:creator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{`@${twitterUsername}`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:site"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{`@${twitterUsername}`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:label1"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Written by"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:data1"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{author}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {#if article &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; timeToRead &amp;gt; 0}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:label2"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Est. reading time"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:data2"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{timeToRead&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;`${&lt;/span&gt;&lt;span class="na"&gt;timeToRead&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;minutes&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'1&lt;/span&gt; &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="err"&gt;'}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/svelte:head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to check your work once you have finished tinkering!  There are links to testing tools in the SEO posts mentioned above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo-wrapup"&gt;
  &lt;/a&gt;
  🙌🏽 SvelteKit Blog SEO: Wrapup
&lt;/h2&gt;

&lt;p&gt;In this post we took a look at how to customise the SEO meta generated by the MDsveX starter.  It might seem a little abstract until you customise it for your own projects, so I would definitely say try using it as a next step.  As always I am keen to get feedback and to hear how you have used it.  You can &lt;a href="https://github.com/rodneylab/sveltekit-blog-mdx"&gt;clone the entire repo from the Rodney Lab Git Page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 SvelteKit Blog SEO: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Would you like to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a couple of dollars, rupees, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>seo</category>
    </item>
    <item>
      <title>App Developer Roadmap 2021</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 07:51:35 +0000</pubDate>
      <link>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</link>
      <guid>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</guid>
      <description>&lt;h2&gt;What is App Development?&lt;/h2&gt;
&lt;p&gt;App Development refers to the creation of computer applications for use on mobile devices such as tablets, smartphones and smart watches. Mobile device features such as cameras, motion and location awareness can be used to create unique and inventive mobile-only applications for things such as taxi and bike sharing.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mobile devices typically have popular apps for searching, browsing and social media preinstalled and users can download and install additional apps from Google Play (Android) and the Apple App Store (iOS). Mobile applications are designed and built for different operating systems and developers will want to learn how to build for both the Android operating system and Apple’s iOS.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To learn android development from starting to become pro. You can follow these steps:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Learn Kotlin (atleast basics) ( If you have no experience in Java programming or starting from scratch. else, You can continue with Java). My suggestion is to choose Kotlin as programming language for native android app development because Kotlin is official language since 2017 and all industries are shifting from Java to Kotlin for android development point of view.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, Time to install Android Studio. It is official IDE( Integrated Development Environment) for native android app development.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Get familiar with all Android Studio menus, controls and file structure. (Use 20–80 rules to starting you journey as a android developer)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about all basic views in XML and how to use them with best practices. How to modify and change the property of view at run time using Java and Kotlin program. (Learn about TextView, EditText, Button, LinearLayout)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about some more advance view and concepts like ListView, RecyclerView, ImageView and their implementations.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about Cursor, SQlite Database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, It's time to check your learning. Develop some basic apps like todo app, note taking app using SQLite database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about third party libraries for making life easier and saving your time.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn implementations of retrofit, volley or okhttp to consume rest api for building networking app like social media, online note taking app, weather app etc.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn, how to play video and audio and view PDFs.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn advance concept like architecture pattern, costum view&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Congratulations, You are now a pro android developer.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;These steps you can learn any time, you wish:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;How to build and generate apk and app bundle&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;How to deploy on google play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn debugging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn automated testing of android app&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Publish app on play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Build some cool and innovative projects and publish it.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;Make sure to use Git / GitHub for version controlling, collaborating and remote working.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Note: It is my personal experience in android development. If you find anything wrong in this you can connect and message on discussion box .&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can visit Originally Published for More queries: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/app-developer-roadmap/"&gt;App development roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>kotlin</category>
      <category>java</category>
    </item>
    <item>
      <title>Making Horizontal Mouse Scrolling With HTML, CSS, and JavaScript</title>
      <author>Ismaili Simba</author>
      <pubDate>Tue, 10 Aug 2021 07:50:12 +0000</pubDate>
      <link>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</link>
      <guid>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</guid>
      <description>&lt;p&gt;I recently came across a beautiful html5 template featuring horizontal mouse scrolling &lt;a href="https://html5up.net/ethereal"&gt;here&lt;/a&gt;. I'm not sure how they do it, so instead of trying to find that out, like any self-respecting coder I decided to come up with my own "better way".&lt;/p&gt;

&lt;p&gt;You can judge the results for yourself &lt;a href="https://github.com/ismailisimba/afrika1"&gt;here!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now with the inspirational story out of the way, here's how I did it. View the sample &lt;a href="https://ismailisimba.github.io/horizontalmousescrolling/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, the HTML. You'll need an outer container element, an inner container element and then your items will go in this inner container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outercontainer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="na"&gt;scrl1&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"innercontainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Used&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;To&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rule&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;World&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Seas&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Would&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rise&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;When&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, the CSS. The important thing to note here is if the viewport is scrollable, then by default whenever the wheel is scrolled, the page will scroll vertically. To prevent this, just make sure all content fits within the viewport vertically. Then, we make the outer container scrollable and the inner container non scrollable. We also hide the scrollbar so you can't scroll manually unless its a touch device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;scrollbar-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="nl"&gt;-ms-overflow-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

    &lt;span class="nc"&gt;.innercontainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;269px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.69%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;large&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the Javascript. We bundle all our functions inside &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event"&gt;window.onload&lt;/a&gt; to ensure our HTML is loaded before the script starts. We then assign the document's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel"&gt;onwheel&lt;/a&gt; event to our customScrollFunction. Every time the event happens (a wheel scroll), our function is called. Then we read the event's deltaY value. If this value is negative the wheel is going down and if its positive then the wheel is going up. We use a simple if to scroll our container left or right accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-client-side"&gt;
  &lt;/a&gt;
  JavaScript Code - Client Side
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onwheel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaYSign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaYSign&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>design</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to WebRTC</title>
      <author>Ponikar</author>
      <pubDate>Tue, 10 Aug 2021 07:23:25 +0000</pubDate>
      <link>https://dev.to/ponikar/introduction-to-webrtc-3kn8</link>
      <guid>https://dev.to/ponikar/introduction-to-webrtc-3kn8</guid>
      <description>&lt;p&gt;Hey there, I hope you are safe. So today we are going to talk about WebRTC. (Web Real Time Communication)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebRTC allows you to perform Peer to Peer real-time communication without bothering the Server.&lt;/strong&gt; Yes, You read it right, You can perform &lt;strong&gt;Peer to Peer communication&lt;/strong&gt; and &lt;strong&gt;share media stream like Audio, Video and arbitrary data&lt;/strong&gt; in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" alt="Introduction to WebRTC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-do-that"&gt;
  &lt;/a&gt;
  How do we do that?
&lt;/h2&gt;

&lt;p&gt;So before we can move forward to WebRTC. Let's talk about Socket Connections. &lt;strong&gt;Web Sockets allows us to send/receive real-time event at client side&lt;/strong&gt; that we know that. We established socket connection with Socket Server and then we can broadcast/receive events from/to Server.&lt;/p&gt;

&lt;p&gt;We are connected with server. Let's say 2 Clients(Peers) are connected with Server. So, the communication is happening through Server. &lt;strong&gt;Server is responsible for that Socket Connection.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;because of this reason, peers may sometimes experience of &lt;strong&gt;connectivity issue, Message lost and Message delay.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-that-something-like-magic"&gt;
  &lt;/a&gt;
  Is that something like Magic?
&lt;/h3&gt;

&lt;p&gt;Hold on, before we send any data to our peer, &lt;strong&gt;we need to make a connection&lt;/strong&gt; and that is a challenging task for developers to &lt;strong&gt;established WebRTC connection between two peer.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signalling"&gt;
  &lt;/a&gt;
  Signalling
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Signalling is the way to exchange information between peers in order to establish connection.&lt;/strong&gt; This information contains SDP, ICE candidates, User Information etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signalling can be done via Sockets, Real time Database like Firestore etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can always &lt;strong&gt;make your signalling Logic&lt;/strong&gt; to make connection across peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-connection-negotiation"&gt;
  &lt;/a&gt;
  How to make Connection? Negotiation
&lt;/h3&gt;

&lt;p&gt;The process start with Making an Offer. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;Peer A create an Offer&lt;/strong&gt; in order to communicate with Peer B. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Peer B need to accept the offer&lt;/strong&gt; and send back to the Answer of the Offer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer A accept the Answer.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;This process is known as Negotiation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Negotiation is process in which Peers negotiate about which kind of data they want to exchange (i.e Media Streams, Arbitrary Data) and the best way to exchange that data between two devices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In general Negotiation &lt;strong&gt;let Peers decide what type of Data they want to exchange,&lt;/strong&gt; before the connection establish between Peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdp-session-description-protocol"&gt;
  &lt;/a&gt;
  SDP (Session Description Protocol)
&lt;/h3&gt;

&lt;p&gt;Offer/Answer is known as &lt;strong&gt;SDP (Session Description Protocol).&lt;/strong&gt; SDP is a format that describe multimedia connections and Sessions across peers. &lt;strong&gt;You can assume SDP as ordinary Browser based Sessions.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output of below code SDP Offer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sdp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v=0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;o=- 6306366628372337755 2 IN IP4 127.0.0.1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;s=-&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;t=0 0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=extmap-allow-mixed&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=msid-semantic: WMS&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Once the negotiations has been done, Peers can now communicate with each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#okay-show-some-codes-now"&gt;
  &lt;/a&gt;
  Okay! Show some codes now.
&lt;/h3&gt;

&lt;p&gt;It's time to write some codes. &lt;strong&gt;We are going to make WebRTC Connection between Peer A and Peer B.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am assuming that We are having &lt;strong&gt;socket connection between two peer.&lt;/strong&gt; We are going to use this &lt;strong&gt;Sockets as Signalling server.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creating a &lt;strong&gt;global connection object&lt;/strong&gt; so we can use it later in functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting up &lt;strong&gt;ICE candidate Listeners&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onicecandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling ICE candidates to Peer B whenever we get it.&lt;/span&gt;
   &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adding Ice Candidates&lt;/strong&gt; to the connection &lt;strong&gt;whenever we get over Signalling.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 1: &lt;strong&gt;Peer A Creating and Signalling the Offer&lt;/strong&gt; for Peer B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// creating offer &lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// setting up offer as Peer's Local Description&lt;/span&gt;
      &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// signalling offer with Sockets&lt;/span&gt;
      &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer-created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: &lt;strong&gt;Peer B Accepting Offer and Signalling the Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acceptOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// setting up offer as Remote Description&lt;/span&gt;
     &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// creating answer &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnswer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// setting up answer as Local Description.&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling the answer&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;answer-added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: &lt;strong&gt;Peer A Saving an Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savingAnswer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// lastly, setting up Remote Description of Peer A&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, You have created Peer to Peer Connection. Now both peer can exchange data with each other.&lt;/p&gt;

&lt;p&gt;Throughout this process &lt;strong&gt;both connections have shared ICE candidates with each other.&lt;/strong&gt; That's why we have added Listeners and Signalling whenever we get an ICE candidates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exchange-arbitrary-data-between-two-peers"&gt;
  &lt;/a&gt;
  Exchange Arbitrary data between two peers.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We can create a data channel of connection&lt;/strong&gt; and then we can send and receive data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peer A can create Data Channel.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meeting-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Peer B can listen for that Data Channel&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondatachannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Send and Receive Messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// listening for message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I got message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// sending message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey Peer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: we need to &lt;strong&gt;create data channel before peers start communication with each other.&lt;/strong&gt; Otherwise both &lt;strong&gt;peers need to renegotiate.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If peers need to renegotiate, we can listen for that event&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this method can be called anytime if Peers need to &lt;/span&gt;
&lt;span class="c1"&gt;// perform negotiations again.&lt;/span&gt;
&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onnegotiationneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please start the negotiation process again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sending Media Streaming&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendStream&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// browser navigator API to fetch media stream&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="c1"&gt;// sending media tracks to peers&lt;/span&gt;
     &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Receiving Media Streams&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ontrack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you can use this media stream with &amp;lt;video&amp;gt; tag&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey I got Media Streams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;If you are &lt;strong&gt;stuck somewhere and want to debug&lt;/strong&gt; your WebRTC connection, you can debug with in your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;brave://webrtc-internals
chrome://webrtc-internals
about:webrtc &lt;span class="c"&gt;&amp;lt;!-- For Firefox --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That was &lt;strong&gt;basic implementation WebRTC connections.&lt;/strong&gt; Still If you &lt;strong&gt;want to know more about WebRTC and How does it works under the hood,&lt;/strong&gt; You need to understand the &lt;strong&gt;network terminologies.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-terminologies"&gt;
  &lt;/a&gt;
  Network Terminologies
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;NAT (Network Address Translation)&lt;/a&gt; &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT"&gt;TURN (Traversal Using Relays Around NAT)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment"&gt;ICE Candidates&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Session_Description_Protocol"&gt;SDP (Session Description Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this blog would help you to understand How can you use WebRTC in your next Project.&lt;/p&gt;

&lt;p&gt;If you want to add on something, &lt;strong&gt;please feel free to leave comment.&lt;/strong&gt; Also Tell me in the comment section which part did you like most.&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br&gt;
Darshan Ponikar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" alt="WebRTC Introduction"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploy a free, open-source Pusher alternative 📡</title>
      <author>Alex Renoki 🇷🇴 🏳️‍🌈</author>
      <pubDate>Tue, 10 Aug 2021 07:19:52 +0000</pubDate>
      <link>https://dev.to/rennokki/deploy-a-free-open-source-pusher-alternative-1i2o</link>
      <guid>https://dev.to/rennokki/deploy-a-free-open-source-pusher-alternative-1i2o</guid>
      <description>&lt;p&gt;I’ve been many times in a situation where I needed Pusher to broadcast messages from Laravel events to the frontend applications. This can be a bummer when you don’t have enough money to pay for a Pusher plan once you reach a specific threshold or you want to manage the Pusher instance yourself and scale it yourself, as an alternative.&lt;/p&gt;

&lt;p&gt;pWS is a free, open-source alternative for the Pusher service. 📡&lt;/p&gt;

&lt;p&gt;The server is built on top of &lt;a href="https://github.com/uNetworking/uWebSockets.js"&gt;uWebSockets.js&lt;/a&gt; — a C application ported to Node.js, that claims to be running &lt;a href="https://alexhultman.medium.com/serving-100k-requests-second-from-a-fanless-raspberry-pi-4-over-ethernet-fdd2c2e05a1e"&gt;8.5x that of Fastify&lt;/a&gt; and at least &lt;a href="https://medium.com/swlh/100k-secure-websockets-with-raspberry-pi-4-1ba5d2127a23"&gt;10x that of Socket.IO&lt;/a&gt;. (&lt;a href="https://github.com/uNetworking/uWebSockets.js"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The difference between pWS and Socket.IO is in terms of speed. pWS is supported by Pusher-maintained clients, bringing portability and plug-and-play functionality with already frontend apps that already use Pusher clients.&lt;br&gt;
The server is entirely compatible with the &lt;a href="https://pusher.com/docs/channels/library_auth_reference/pusher-websockets-protocol#version-7-2017-11"&gt;Pusher Protocol v7&lt;/a&gt; and tries to keep up with the &lt;a href="https://pusher.com/docs/channels/library_auth_reference/rest-api/"&gt;HTTP REST API reference&lt;/a&gt; as fast as possible.&lt;/p&gt;

&lt;p&gt;Contrary to Pusher, you do not need Pusher credentials or a Pusher plan to make it work. The application is a standalone, plug-and-play alternative to Pusher.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  🚀 Installation
&lt;/h2&gt;

&lt;p&gt;pWS is available as CLI or as a Docker container, bringing full flexibility to run in the environment you wish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @soketi/pws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn global add @soketi/pws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the sample server, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pws-server start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When running with Docker, all you have to do is to find the right image you want to install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 6001:6001 soketi/pws:1.0.0-14-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, a Pusher server is available at port 6001:&lt;br&gt;
Pusher clients are fully compatible with the WebSocket protocol implemented in this project. You just have to point the client to the server address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PusherJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pusher-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PusherJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wsHost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;wsPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;forceTLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disableStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;enabledTransports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ws&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chat-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#app-management"&gt;
  &lt;/a&gt;
  👨‍🔬 App Management
&lt;/h2&gt;

&lt;p&gt;Apps can be defined at the configuration level or can be pulled from a third-party API, such as MySQL or PostgreSQL for better management of who can access the WebSockets server and who can publish the events.&lt;/p&gt;

&lt;p&gt;pWS has support for &lt;a href="https://pws.soketi.app/app-management/sql-drivers"&gt;SQL-based databases&lt;/a&gt; and even &lt;a href="https://pws.soketi.app/app-management/dynamodb"&gt;DynamoDB&lt;/a&gt; and can be easily configured via environment variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%86%94-horizontal-scaling"&gt;
  &lt;/a&gt;
  ↔ Horizontal Scaling
&lt;/h2&gt;

&lt;p&gt;pWS is optimized to work in multi-node or multi-process environments, like Kubernetes or PM2, where horizontal scalability is one of the main core features that can be built upon. The main concern when scaling horizontally is how can I make the nodes communicate between them?&lt;br&gt;
To be able to scale it horizontally and efficiently enable node-to-node or process-to-process communication, pWS leverages a Redis connection.&lt;br&gt;
You can configure pWS to run with Redis as a primary adapter for the local-persistent data with an environment variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;ADAPTER_DRIVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redis pws-server start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extensive-documentation"&gt;
  &lt;/a&gt;
  📃 Extensive documentation
&lt;/h2&gt;

&lt;p&gt;pWS has many other supported features, like rate limiting, graceful shutdowns for servers that still have active connections, Prometheus support for scaling, and even compatibility for Pusher Webhooks to send frontend events to your backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pws.soketi.app/app-management/dynamodb"&gt;Read the extensive documentation on https://pws.soketi.app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  🙌 Contributing
&lt;/h2&gt;

&lt;p&gt;Please open issues or feature requests within the &lt;a href="https://github.com/soketi/pws/issues"&gt;Issues&lt;/a&gt; board on Github or if you think there are some improvements needed, submit a &lt;a href="https://github.com/soketi/pws/pulls"&gt;Pull Request&lt;/a&gt; and we will discuss it there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supporting-our-work"&gt;
  &lt;/a&gt;
  🎉 Supporting our work
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article or you are using one or more &lt;a href="https://github.com/renoki-co"&gt;Renoki Co. open-source packages&lt;/a&gt; in your production apps, in presentation demos, hobby projects, school projects or so, spread some kind words about our work or &lt;a href="https://www.patreon.com/bePatron?u=10965171"&gt;sponsor our work via Patreon&lt;/a&gt; for some exclusive articles full of Laravel tips and best practices. 📦&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>news</category>
    </item>
  </channel>
</rss>
