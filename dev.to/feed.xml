<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Coder</author>
      <pubDate>Fri, 17 Sep 2021 07:01:49 +0000</pubDate>
      <link>https://dev.to/zcode/7-best-tools-for-developers-they-can-t-live-without-it-35a2</link>
      <guid>https://dev.to/zcode/7-best-tools-for-developers-they-can-t-live-without-it-35a2</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/&amp;amp;ved=2ahUKEwi9yYbrt4XzAhXWyjgGHXYQDk4QFnoECAMQAQ&amp;amp;usg=AOvVaw1PUPii-XosNgl1ZTInOseb"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>Php Backend Developers Roadmap 2021</title>
      <author>Coder</author>
      <pubDate>Fri, 17 Sep 2021 06:59:03 +0000</pubDate>
      <link>https://dev.to/zcode/php-backend-developers-roadmap-2021-38n</link>
      <guid>https://dev.to/zcode/php-backend-developers-roadmap-2021-38n</guid>
      <description>&lt;p&gt;There are tons of tools in IT to ease programmers' workflow and make a product more efficient. But in the very beginning of honing PHP that might be such a puzzle to pick the right direction and instruments to learn first. A common solution for such problems now – roadmaps – visual sequences which answer the question "what to learn next?". Subject I'd like to discuss in the article – where to invest your time and efforts to learn PHP faster and become an in-demand backend programmer.&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/php-backend-developers-roadmap-2021/&amp;amp;ved=2ahUKEwjbnv7oxIDzAhWE4jgGHVIDAg0QFnoECDIQAQ&amp;amp;usg=AOvVaw0dn8u5bvsze8-D3BFmW66h"&gt;Php Backend Developers Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Debugging in Production-How to move fast without breaking things</title>
      <author>Shai Almog</author>
      <pubDate>Fri, 17 Sep 2021 06:56:17 +0000</pubDate>
      <link>https://dev.to/codename_one/debugging-in-production-how-to-move-fast-without-breaking-things-3hnl</link>
      <guid>https://dev.to/codename_one/debugging-in-production-how-to-move-fast-without-breaking-things-3hnl</guid>
      <description>&lt;p&gt;Mark Zuckerberg famously quipped that Facebook works under the "Move fast and break things" motto. We can write all the unit tests in the world, have the largest QA pipeline but still bugs slither into production. That's just a fact of life which he chose to celebrate. &lt;/p&gt;

&lt;p&gt;When dealing with an incredibly complex system like we have in &lt;a href="https://www.codenameone.com"&gt;Codename One&lt;/a&gt; this can be the difference between releasing an update and doing nothing. &lt;/p&gt;

&lt;p&gt;If you are a visual learner check out the following video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X92BW_v3ZhE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disaster-strikes"&gt;
  &lt;/a&gt;
  Disaster Strikes
&lt;/h2&gt;

&lt;p&gt;The problem with this approach becomes apparent when we have a bug in production. Normally, a bug that would go through staging, QA and tests wouldn't be too horrible... But since it's a production only bug you're often faced with two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revert - That might not be an option for all cases&lt;/li&gt;
&lt;li&gt;Find/Implement a Fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that I left out "reproduce it locally". This is often not an option for production bugs which work on a separate DB in "real world" conditions. In our case local debugging is very difficult due to the multiple separate servers that hand off tasks to one another.&lt;br&gt;
The second option is usually best but it includes a huge risk: what if the fix fails?&lt;/p&gt;

&lt;p&gt;Since production deployment is often a slow process that requires a QA cycle this compounds the problem. You make a fix then have to wait for hours only to find out that you got it wrong... This used to be us.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enter-lightrun"&gt;
  &lt;/a&gt;
  Enter Lightrun
&lt;/h2&gt;

&lt;p&gt;So a couple of years ago I met two young founders who had an idea on how to solve this problem. Essentially, it's a new kind of debugger that works very differently from a regular debugger. &lt;br&gt;
The gist of this is that your app constantly runs in a production debugging mode, the overhead is barely noticeable. A secure agent connects the app to the cloud and lets you debug in a special way. &lt;br&gt;
E.g. instead of breakpoints you have snapshots. They don't "break". They provide you with a stack trace of the thread and the variable state at the given time. You can also inject log statements, count executions and even do simple profiling on methods or blocks of code.&lt;/p&gt;

&lt;p&gt;I was so impressed by this idea that I decided to join the team and now hold two jobs (at &lt;a href="https://www.codenameone.com/"&gt;Codename One&lt;/a&gt; and at &lt;a href="https://www.lightrun.com"&gt;Lightrun&lt;/a&gt;). The cool thing is that my job at Codename One is now much easier thanks to Lightrun.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bugs-in-production"&gt;
  &lt;/a&gt;
  Bugs in Production...
&lt;/h2&gt;

&lt;p&gt;90% of my work at Codename One is putting out fires. A subscriber writes to our support complaining about a failure of a build or push servers etc. This used to be very hard to debug. We would spend hours reading huge logs and guessing&lt;br&gt;
Then we'd deploy additional logs, ask the user to send a new build and then reread the logs to figure out what the hell went wrong. Some of the guessing is always there but with Lightrun the whole process is practically instant.&lt;br&gt;
With Lightrun we can just set a conditional snapshot e.g.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4u1vPWeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ik4ha6b8cxbzhfpyno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4u1vPWeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ik4ha6b8cxbzhfpyno.png" alt="Debugging a failure in push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case above I can grab a snapshot when a specific user sends a push. This is a conditional breakpoint, that's a useful tool when debugging locally. It's an indispensable tool when debugging in production. We only want to see the information related to a specific user and not all users...&lt;/p&gt;

&lt;p&gt;When the snapshot hits we end up with a stack trace similar to this one (I blacked out private information in the image).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgraXoih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w29e7l9922xohoj7q5gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgraXoih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w29e7l9922xohoj7q5gm.png" alt="Snapshot Stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that a Snapshot looks just like a regular breakpoint. It's missing the threads and you can't step over. But you can walk the stack and inspect the values of fields/variables etc. when the application is still running... &lt;br&gt;
Pretty darn useful!&lt;br&gt;
Instead of stepping over you can just add multiple snapshots or even inject logs to print information when hitting a specific line. Including simple expressions such as: &lt;code&gt;"The value is {obj.getValue()}"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My immediate thought was "won't this be expensive?". &lt;br&gt;
It isn't. If we have a very complex/expensive expressions that prints too much per second or uses problematic (e.g. recursive) logic,  Lightrun is smart enough to limit itself so the expression won't take too much CPU. It protects you from shooting yourself in the foot... &lt;br&gt;
As a result of that there's no noticeable performance overhead and you can work without worrying. But I digress, lets go back to the push server example above.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#unexpected-bug"&gt;
  &lt;/a&gt;
  Unexpected Bug
&lt;/h2&gt;

&lt;p&gt;When I started this post I wanted to reproduce a debugging session for a user problem but as I was grabbing the screenshots for the session I noticed something weird in the stack. The value of &lt;code&gt;subscriptionLevel&lt;/code&gt; was gibberish. It was way too large.&lt;/p&gt;

&lt;p&gt;Turns out we had a bug in reading the user subscription level when sending push messages. That meant that quotas and rate limits weren't applied at all in our push server!&lt;br&gt;
I'm sure we lost income because of this bug, users whose subscription elapsed could still send push messages at volume without a problem. Ugh!&lt;br&gt;
This is one of the coolest benefits of Lightrun, it lets you see clearly into the running system and verify your expectations. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#expected-user%C2%A0problem"&gt;
  &lt;/a&gt;
  Expected User Problem
&lt;/h2&gt;

&lt;p&gt;The real problem I debugged relates to that line above. A user stopped getting iOS push messages. I just placed a Snapshot (AKA breakpoint) with his token, then inspected the values sent to the push server.&lt;br&gt;
I could then see the URL of the push certificate and could instantly verify that it expired. This was easier to do than debugging locally!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-deeper%C2%A0pipeline"&gt;
  &lt;/a&gt;
  The Deeper Pipeline
&lt;/h2&gt;

&lt;p&gt;User issues are very important but issues that no one is aware of are possibly even more important...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qx1MiW0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n0f8mwsfdz0nl36uv00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qx1MiW0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n0f8mwsfdz0nl36uv00.png" alt="Exception Monitoring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lightrun also provides a way to detect exceptions (caught or uncaught). We can review the stack traces periodically to see if there are errors that we didn't detect. This isn't a unique feature to Lightrun, but it fits perfectly as you can easily trace a problem you saw in the stack traces.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h2&gt;

&lt;p&gt;Lightrun also includes metrics such as counters, tictocs and method duration measurements. This is super useful for micro-benchmarks in production but we don't need this as much in Codename One. Our backend is relatively simple and these never came up.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-lightrun%C2%A0"&gt;
  &lt;/a&gt;
  Installing Lightrun 
&lt;/h2&gt;

&lt;p&gt;So, there has to be a downside right?&lt;/p&gt;

&lt;p&gt;Installing the plugin in the IDE and signing up is very easy... But agent setup is still challenging. I spent a lot of time trying to get it to work on all our servers. Admittedly the Codename One architecture is pretty complex filled with a lot of legacy and pre-docker deployment choices. Prepare yourself for a bit of work. It might be trivial but you might need some help from the web chat support channel (which is super responsive)...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewR_hL20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3ud1agmx6ve69acifel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewR_hL20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3ud1agmx6ve69acifel.png" alt="Signup Page on app.lightrun.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you sign up at &lt;a href="https://app.lightrun.com/"&gt;https://app.lightrun.com/&lt;/a&gt; you get a wizard that verifies you performed the steps correctly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Og6cBuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9kitutrdqb1dkxk33q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Og6cBuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9kitutrdqb1dkxk33q1.png" alt="Install the Plugin and Login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To pass the first step you need to install the IntelliJ plugin from the marketplace &lt;a href="https://plugins.jetbrains.com/plugin/16477-lightrun"&gt;https://plugins.jetbrains.com/plugin/16477-lightrun&lt;/a&gt;. You then need to restart the IDE, open the Lightrun tool window on the right hand side and press the login button.&lt;br&gt;
Once logged in, the Next button in the wizard will become enabled and you could move on to the agent installation step. This is the hard part...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIH1Rz94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptpd7riteorb5quzisn3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIH1Rz94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptpd7riteorb5quzisn3.jpeg" alt="Agent Install instructions, notice I erased private information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The agent is typically installed on your server and not on your local machine. So when I reached this page "Mac" was selected. I had to explicitly select the Linux page and copy the script that installs the agent on Linux machines.&lt;br&gt;
 &lt;br&gt;
The next step is to SSH to the machine and run the script. It creates an "agent" directory which we'll use when binding the agent. The gist of this is that we need to add the &lt;code&gt;-agentpath&lt;/code&gt; argument to the JVM. That's very simple if your deployment has a "java" command invocation at some point but if your running as a service or within a container that might not be so simple.&lt;/p&gt;

&lt;p&gt;Once you do that the "Next" option will be enabled and you would be able to use Lightrun. &lt;br&gt;
But there are more complex cases, I would recommend reviewing the list &lt;a href="https://docs.lightrun.com/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One example is our older Tomcat server used for push. I had to edit &lt;code&gt;catalina.sh&lt;/code&gt; and add something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -agentpath:/home/username/agent/lightrun_agent.so= - lightrun_extra_class_path=/home/username/apache-tomcat/webapps/myapp.war"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the extra option of &lt;code&gt;--lightrun_extra_class_path&lt;/code&gt; (that's 2 minus signs) which we use to explicitly state the classpath. You might need that if things aren't auto-detected properly.&lt;br&gt;
This let the agent run but I got no variables in my stack traces... Turns out I had to recompile the code with full debug options turned on (&lt;code&gt;-g&lt;/code&gt;). This was a bit of a challenge in Maven. The solution was to add these properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
 ...
 &lt;span class="nt"&gt;&amp;lt;maven.compiler.debug&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/maven.compiler.debug&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;debug&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/debug&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;debugLevel&amp;gt;&lt;/span&gt;lines,vars,source&lt;span class="nt"&gt;&amp;lt;/debugLevel&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;maven.compiler.debuglevel&amp;gt;&lt;/span&gt;lines,vars,source&lt;span class="nt"&gt;&amp;lt;/maven.compiler.debuglevel&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test that &lt;code&gt;-g&lt;/code&gt; is missing using code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;javap &lt;span class="nt"&gt;-classpath&lt;/span&gt; Project/target/classes &lt;span class="nt"&gt;-v&lt;/span&gt; pkg.ClassName | &lt;span class="nb"&gt;grep &lt;/span&gt;LocalVariableTable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this prints nothing then the class doesn't contain debug information.&lt;br&gt;
Again, this is an involved process. I strongly suggest engaging support while going through it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;The reason we don't rush to production is the tedious and slow process of fixing production issues. But this creates an overly complex multi-branch support structure that ends up making matters worse. &lt;br&gt;
If we can debug quickly in the production and fix right away our overall stability increases while keeping a low overhead. IMO Deploying a server today without debugging tools is akin to coding without an IDE. You can do that but you're missing out on modern advancements in our field.&lt;br&gt;
At &lt;a href="https://www.codenameone.com/"&gt;Codename One&lt;/a&gt; our user support tasks are resolved much faster and more effectively thanks to &lt;a href="https://www.lightrun.com/"&gt;Lightrun&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>java</category>
      <category>cloud</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Layered Gradient Playground</title>
      <author>Mads Stoumann</author>
      <pubDate>Fri, 17 Sep 2021 06:43:20 +0000</pubDate>
      <link>https://dev.to/madsstoumann/layered-gradient-playground-102j</link>
      <guid>https://dev.to/madsstoumann/layered-gradient-playground-102j</guid>
      <description>&lt;p&gt;A while ago, I saw &lt;a href="https://twitter.com/argyleink/status/1233406753892515847"&gt;this tweet&lt;/a&gt; by Adam Argyle. It's a clever way of layering gradients, using CSS &lt;code&gt;mask-image&lt;/code&gt;. For a new project I'm working on, I want a timeline, where layered background-gradients will change the site’s “look and feel” during the day.&lt;/p&gt;

&lt;p&gt;To help me create all these gradients, I built a small tool, based on Adam’s idea:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/eYRyqXY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it's as useful for you, as it's been for me!&lt;br&gt;
The CSS code is rendered at the bottom.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introduction to Git: Part 2</title>
      <author>Aaron McCollum</author>
      <pubDate>Fri, 17 Sep 2021 06:28:56 +0000</pubDate>
      <link>https://dev.to/aaronmccollum/introduction-to-git-part-2-50me</link>
      <guid>https://dev.to/aaronmccollum/introduction-to-git-part-2-50me</guid>
      <description>&lt;p&gt;This is part 2 of the introduction to Git. You can &lt;a href="https://codingwithaaron.wordpress.com/2021/08/31/an-introduction-to-git-part-1/"&gt;check out Part 1 of the Introduction to Git here&lt;/a&gt;, which goes over the history of Git and the theoretical way it works. In this post, it will be more brief with a step-by-step process on using Git.&lt;/p&gt;

&lt;p&gt;As a quick note: anything inside these symbols (&amp;lt; and &amp;gt;) is meant to convey unique inputs, and the &amp;lt; and &amp;gt; symbols are not to be actually typed in the terminal.&lt;/p&gt;

&lt;p&gt;Git’s main syntax is as follows: &lt;strong&gt;program | action | destination&lt;/strong&gt; (&lt;code&gt;git add &amp;lt;FILE NAME&amp;gt;&lt;/code&gt; as an example). You will see below this syntax play out in real time. &lt;code&gt;Git&lt;/code&gt; is the program, &lt;code&gt;add&lt;/code&gt; is the action, and the destination of the action is on the &lt;code&gt;&amp;lt;FILE NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-on-a-project"&gt;
  &lt;/a&gt;
  Getting Started on a project
&lt;/h3&gt;

&lt;p&gt;When you create a new repository in Github, it will provide the SSH key for you to link to your local disk’s Git program. You can copy the link, then use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git clone &amp;lt;URL Link&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will clone your program onto your local computer for you to work on. You can then use the &lt;code&gt;cd&lt;/code&gt; command to change to the project’s directory and start adding files, and then you can use the code command to open the files up in VS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;cd &amp;lt;REPO NAME&amp;gt;
&amp;gt;touch index.html
&amp;gt;touch style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-changes-and-committing"&gt;
  &lt;/a&gt;
  Making Changes and Committing
&lt;/h3&gt;

&lt;p&gt;Once files are added to your project in Git, they are either staged or not staged. Not staged means they will not be committed when you start your next commit push, while staged means they are ready to be committed. If a file is not staged, it will by default show up as red in your console, and files that are staged will show up as green. You can check the status of each file by typing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If a file is not staged but is ready to be staged, you can type the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;FILE NAME&amp;gt;&lt;/code&gt; (you can list multiple file names separated by spaces)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you are ready to commit your staged files, you can use the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git commit -m "COMMIT MESSAGE"&lt;/code&gt; (the -m flag is a message flag for note-taking)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At any point, if you would like to see a record of what you did, you can use the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-few-other-odds-and-ends"&gt;
  &lt;/a&gt;
  A Few Other Odds and Ends
&lt;/h3&gt;

&lt;p&gt;When you change a file you are working on that is part of your local project in Git, it will automatically change to the “modified” status when you use the git status command, since it’s being tracked by Git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;FILE&amp;gt;&lt;/code&gt; will stage the individual file&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt; will stage everything in the current directory&lt;br&gt;
&lt;code&gt;git add -A&lt;/code&gt; will stage everything that’s unstaged in the entire project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pushing-to-github"&gt;
  &lt;/a&gt;
  Pushing to Github
&lt;/h3&gt;

&lt;p&gt;When you are ready to push your changes and commits to Github, you can use the following command. This one is a little slower since you are connecting with a remote server:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#source-of-learning"&gt;
  &lt;/a&gt;
  Source of Learning
&lt;/h3&gt;

&lt;p&gt;I have been learning &lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/git-basics"&gt;Git on The Odin Project&lt;/a&gt; and have really enjoyed it. Their explanations are far better than mine and that’s a great resource if you are like me and starting out.&lt;/p&gt;

&lt;p&gt;Also the Git website features a &lt;a href="https://git-scm.com/book/en/v2"&gt;full version of the book “Pro Git”&lt;/a&gt; by Scott Chacon and Ben Straub, which I found very useful for a lot of information.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>learning</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Responsive Restaurant Website 🍔.</title>
      <author>Aman Singh</author>
      <pubDate>Fri, 17 Sep 2021 06:26:23 +0000</pubDate>
      <link>https://dev.to/aman2221/responsive-restaurant-website-26mf</link>
      <guid>https://dev.to/aman2221/responsive-restaurant-website-26mf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#responsive-restaurant-website-built-using-html-css-react"&gt;
  &lt;/a&gt;
  Responsive Restaurant Website built using html, css, react.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#features-"&gt;
  &lt;/a&gt;
  Features :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Color customization.&lt;/li&gt;
&lt;li&gt;Developed first with the Mobile First methodology, then for desktop.&lt;/li&gt;
&lt;li&gt;Compatible with all mobile devices and with a beautiful and pleasant user interface.&lt;/li&gt;
&lt;li&gt;Optimized SEO.&lt;/li&gt;
&lt;li&gt;Search Items.&lt;/li&gt;
&lt;li&gt;Categorize items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6XBAOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw746q22dz0r1cb9hr6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6XBAOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw746q22dz0r1cb9hr6w.png" alt="restro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository-"&gt;
  &lt;/a&gt;
  GitHub Repository :
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Aman2221"&gt;
        Aman2221
      &lt;/a&gt; / &lt;a href="https://github.com/Aman2221/RESTAURANT_APP"&gt;
        RESTAURANT_APP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Responsive Restaurant Website built using html, css, react.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Getting Started with Create React App&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/33525ea4d61eb73986276b48579de1aba040020c4af52285a1dc57fd0d57d78f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f7677373436713232647a307231636239687236772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/33525ea4d61eb73986276b48579de1aba040020c4af52285a1dc57fd0d57d78f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f7677373436713232647a307231636239687236772e706e67" alt="Landing page"&gt;&lt;/a&gt;&lt;/p&gt;
This project was bootstrapped with [Create React App](&lt;a href="https://github.com/facebook/create-react-app"&gt;https://github.com/facebook/create-react-app&lt;/a&gt;)
&lt;h2&gt;
Available Scripts&lt;/h2&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm test&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt;
See the section about &lt;a href="https://facebook.github.io/create-react-app/docs/running-tests" rel="nofollow"&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;
&lt;p&gt;See the section about &lt;a href="https://facebook.github.io/create-react-app/docs/deployment" rel="nofollow"&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run eject&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can’t go back!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Aman2221/RESTAURANT_APP"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thank-you-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Thank you ❤️️
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Using WordPress as a headless CMS</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 17 Sep 2021 05:26:45 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/using-wordpress-as-a-headless-cms-2fi1</link>
      <guid>https://dev.to/dailydevtips1/using-wordpress-as-a-headless-cms-2fi1</guid>
      <description>&lt;p&gt;WordPress is still a widely used system, and it works for many clients since they are so used to it.&lt;/p&gt;

&lt;p&gt;And to be quite honest, there is something about the admin panel that just makes sense.&lt;br&gt;
It's visual, easy to grasp, and well known.&lt;/p&gt;

&lt;p&gt;However, what comes out of it, is somewhat of a nightmare sometimes.&lt;br&gt;
It's bloated, slow, and just not speed optimized.&lt;br&gt;
Sure we could opt to add yet another 20 plugins to make it quick, but is that a good approach?&lt;/p&gt;

&lt;p&gt;Luckily WordPress comes as a headless CMS out of the box. Yes you heard me. It's already built-in (talk about bloated).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-wordpress-headless-cms-mean"&gt;
  &lt;/a&gt;
  What does WordPress Headless CMS mean?
&lt;/h2&gt;

&lt;p&gt;As plain as it gets, it means you are still using the WordPress backend to create your content but use REST API endpoints to retrieve the data in an external system.&lt;/p&gt;

&lt;p&gt;You do lose your theme and plugin functionality, but let's take static site generators as our "front-end" they are blazing fast, secured, and might not even need all these plugins.&lt;/p&gt;

&lt;p&gt;That will be my proof of concept to see how quickly we can make a WordPress headless CMS website.&lt;/p&gt;

&lt;p&gt;But before diving into building something, let's take a good look at the API and what kind of data we can get out of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trying-out-the-wordpress-headless-cms"&gt;
  &lt;/a&gt;
  Trying out the WordPress Headless CMS
&lt;/h2&gt;

&lt;p&gt;Before we start, the are two ways of calling the API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have set up canonical pretty URL's&lt;/li&gt;
&lt;li&gt;You did not set this up&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For option one, which will be the most common and advised use case, we get an API on the &lt;code&gt;http://yoursite.com/wp-json/&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;For the second option, we would have to query the API like this: &lt;code&gt;http://yoursite.com/?rest_route=/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, I would recommend going with option one. You can enable this by going to the backend and visit the &lt;code&gt;Settings/Permalinks&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;In there, click any of the structures, but not the plain one!&lt;/p&gt;

&lt;p&gt;Time to try it out!&lt;br&gt;
I'll be using &lt;code&gt;Insomnia&lt;/code&gt; to query the API, but you can use any &lt;a href="https://daily-dev-tips.com/posts/testing-api-calls-in-insomnia/"&gt;API client tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKrCo8cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631171830279/JkzLgia0X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKrCo8cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631171830279/JkzLgia0X.png" alt="Calling the WordPress headless CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This basic call will give us all the available options we have.&lt;br&gt;
But we are more interested in retrieving pages and posts.&lt;/p&gt;

&lt;p&gt;Let's have a look at the &lt;a href="https://developer.wordpress.org/rest-api/reference/"&gt;WordPress API reference&lt;/a&gt; to see what's available.&lt;/p&gt;

&lt;p&gt;You can see we can call the &lt;code&gt;posts&lt;/code&gt; through: &lt;code&gt;/wp/v2/posts&lt;/code&gt;.&lt;br&gt;
Let's give that a try.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBzeDL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631171988075/XN9JkoFeB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBzeDL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631171988075/XN9JkoFeB.png" alt="WordPress API for posts results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool, right! This endpoint returns all our posts in nice JSON format.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;pages&lt;/code&gt; we see the &lt;code&gt;/wp/v2/pages&lt;/code&gt; endpoint. Let's also try that one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FO08TdbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631172060593/kWXU-SAst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FO08TdbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631172060593/kWXU-SAst.png" alt="WordPress page API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool to see how extended the API is and what kind of data we can extract.&lt;br&gt;
And even if data is missing, we can add our endpoints for it.&lt;/p&gt;

&lt;p&gt;In another article, I'll write about including this headless CMS as the data source for an Astro website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ultimate Guide To Create WordPress Site</title>
      <author>Jamesbrown93</author>
      <pubDate>Fri, 17 Sep 2021 05:14:09 +0000</pubDate>
      <link>https://dev.to/jamesbrown93/ultimate-guide-to-create-wordpress-site-5gg5</link>
      <guid>https://dev.to/jamesbrown93/ultimate-guide-to-create-wordpress-site-5gg5</guid>
      <description>&lt;p&gt;Are you looking to create WordPress site? Creating a site from scratch can be a terrifying thought especially when you’re not technically sound or if you are not from a group of people with hands-on experience in Web designing and development.&lt;br&gt;
But…. hold on, there is good news for you, there’s software out there that’s so easy to use, virtually guides you to successfully create a unique and professional-looking website.&lt;br&gt;&lt;br&gt;
You might be wondering, how’s it possible for anyone to create a site without any technical knowledge, but trust us, it is true. WordPress made it possible!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is WordPress?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;WordPress is a free and open-source content management system (CMS) platform that allows you to host and build websites. WordPress is a very easy-to-use platform that provides a huge library of plugins and templates, so you can customize any website exactly in the way it fits your business, blog, portfolio, or online store needs.&lt;/p&gt;

&lt;p&gt;This ultimate guide on “&lt;a href="https://www.janbaskdigitaldesign.com/blogs/create-professional-website/"&gt;how to create a wordpress site&lt;/a&gt;” will guide you through all the basic steps required to create a wordpress site also help you with special tips and tricks to make your WordPress website unique.&lt;/p&gt;

&lt;p&gt;So let’s get starters, take a closer look at steps of how we are going to create wordpess site.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Steps To Create WordPress Site&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; Step1: Select a WordPress plan.&lt;br&gt;
=&amp;gt; Step2: Set up your domain name and hosting.&lt;br&gt;
=&amp;gt; Step3: Install WordPress.&lt;br&gt;
=&amp;gt; Step4: Choose your theme.&lt;br&gt;
=&amp;gt; Step5: Install Required plugins.&lt;br&gt;
=&amp;gt; Step6: Customize your website and optimize it to increase page speed&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step1: Select a WordPress plan&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;First, you have to select a WordPress plan from WordPress.com, here you might have wondered why we are recommending WordPress.com but not WordPress.org even when it is free to use. &lt;/p&gt;

&lt;p&gt;So here let me clear you that,&lt;/p&gt;

&lt;p&gt;Although Wordpress.org is free to use you have to pay for everything else that goes into having a website including domain name, plugins, themes and it also add a lot more responsibility like edit your website’s code and manages your website’s security, and many more that you have to handle your own.&lt;/p&gt;

&lt;p&gt;Whereas WordPress.com has made things easy for you. You don’t need to manage your server, hosting, or domain.&lt;br&gt;
So, hope you get why WordPress.com is the best choice for you.&lt;/p&gt;

&lt;p&gt;When you go to wordPress.com, you will have to choose between five different plans that are:- &lt;/p&gt;

&lt;p&gt;=&amp;gt; Free plan&lt;br&gt;
=&amp;gt; Personal plan&lt;br&gt;
=&amp;gt; Premium plan&lt;br&gt;
=&amp;gt; Business plan&lt;br&gt;
=&amp;gt; eCommerce plan&lt;/p&gt;

&lt;p&gt;The main differences between these plans are the monthly charges, types of site, customization features, and marketing tools they provide. You can go for any of them that suits your requirements.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step2: Set Up Your Domain Name and Hosting&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Now it’s time to choose a domain name and hosting services. Since there are various options available in the market, you might be wondering how to choose the best domain name and hosting service.&lt;/p&gt;

&lt;p&gt;Domain Name: When it comes to the domain name, WordPress.com allows you to custom domain depending on your chosen plan, but it takes care of the hosting for you. You can search and purchase the domain name of your choice with domain registrar .  domain registrar is a company that provides domain name registrations and maps domain names to IP addresses. &lt;/p&gt;

&lt;p&gt;Hosting Services: Since there are hundreds of hosting providers and everyone claims to be the best. It is important for you to choose to host services carefully because it going to impacts your website’s speed, security, and reliability. &lt;/p&gt;

&lt;p&gt;So, when you going to choose the hosting service make sure it meets WordPress’ three basic hosting requirements:&lt;/p&gt;

&lt;p&gt;=&amp;gt; PHP version 7.4 or greater&lt;br&gt;
=&amp;gt; MySQL version 5.6 or greater OR MariaDB version 10.1 or greater.&lt;br&gt;
=&amp;gt; HTTPS support&lt;/p&gt;

&lt;p&gt;Here are some best hosting services providers, you can go for when going to create a WordPress site:&lt;/p&gt;

&lt;p&gt;=&amp;gt; Bluehost &lt;br&gt;
=&amp;gt; HostGator &lt;br&gt;
=&amp;gt; Hostinger &lt;br&gt;
=&amp;gt; SiteGround &lt;br&gt;
=&amp;gt; A2 Hosting &lt;br&gt;
=&amp;gt; GreenGeeks &lt;br&gt;
=&amp;gt; InMotion Hosting &lt;br&gt;
=&amp;gt; Site5 &lt;/p&gt;

&lt;p&gt;Forsake an example let us assume, you have purchased hosting from Bluehost. Now let’s see how to create WordPress site with Bluehost.&lt;/p&gt;

&lt;p&gt;Step1: First, go to Bluehost’s website and click on Get Started.&lt;/p&gt;

&lt;p&gt;Step2: Next, you have to choose the pricing plan that you want to go for.&lt;/p&gt;

&lt;p&gt;Here you will see four different plans that are BASIC, PLUS, CHOICE PLUS, and PRO. Once you choose your plan and click Select, you’ll be directed to sign up with a domain name.&lt;/p&gt;

&lt;p&gt;Step3: Next you have to set up your domain name, here you will get the option of creating a new domain name or you can use a domain you own.&lt;/p&gt;

&lt;p&gt;Step 4: Next, you will be directed to the account and billing page, complete your account and billing information for your purchase.&lt;/p&gt;

&lt;p&gt;Once you are done with billing, you will get access to your hosting dashboard where you’ll be able to install the WordPress CMS.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step 3: Install WordPress&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now, you have to install WordPress, here are the steps to Install WordPress- &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log in to your Bluehost cPanel account.&lt;/li&gt;
&lt;li&gt;Find the Website section and select Install WordPress.&lt;/li&gt;
&lt;li&gt;Click the “Install” button.&lt;/li&gt;
&lt;li&gt;Then, choose the domain name to install it to. &lt;/li&gt;
&lt;li&gt;If required, you can edit your email address, username, and password for the new WordPress installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you are done with WordPress installation. So now it’s time to make website looks nice by choosing a perfect theme.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step4: Choose Your Suitable Theme&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;WordPress automatically applies a default theme to your website but it may not be so impressive. WordPress provides reach customization features with hundreds of themes and templates to choose from.&lt;/p&gt;

&lt;p&gt;Even after choosing a suitable theme, you can further customize your pages with a page builder tool like Elementor. Elementer is again a plugin, that you can install from WordPress plugin library for free.&lt;/p&gt;

&lt;p&gt;To find a theme that works best for your website and meets your end purpose, go to your admin dashboard. Go to Appearance, then select “Themes”. &lt;/p&gt;

&lt;p&gt;You'll be directed to another screen where you can browse available themes or you can search for a specific one, as per your website need.&lt;/p&gt;

&lt;p&gt;Once you find the perfect theme, simply install it and customize it as per your requirements.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step5: Install Required plugins&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;WordPress offers a huge number of plugins, that can add functionality to your WordPress website and enhance the user experience. &lt;br&gt;
For plugin installation, go to the plugin section, on the WordPress dashboard, This will show you all the plugins currently or by default installed on your site. Depending on your host, you might get several plugins installed already. &lt;/p&gt;

&lt;p&gt;After installing any plugin, don’t forget to activate it, to make it functional.&lt;/p&gt;

&lt;p&gt;To add a new plugin, click on the “Add New” button that you can see at the top of the page. &lt;/p&gt;

&lt;p&gt;Then make a search for the desired plugin, if you find that one then clicks on “Install Now”. When the plugin gets installed, then click on the “Activate” button. This way you can install the plugins. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step6: Customize Your Website And Optimize It to Increase Page Speed&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now when you are done with the installation and set up process, you can Customize your website and optimize for the best user experience.&lt;/p&gt;

&lt;p&gt;Go to the admin dashboard, select Settings &amp;gt; General. From here you can add your website title and tagline and can change other basic site information like your URL, email, time zone, and more.&lt;br&gt;
You can customize, reading setting, navigation, and all.&lt;br&gt;
Moreover, you can enable your browser caching by installing and activating a caching plugin as discussed above.&lt;br&gt;
Add all essential pages, advanced functionality to deliver the best user experience at your site.&lt;/p&gt;

&lt;p&gt;And what left is….. Nothing!&lt;/p&gt;

&lt;p&gt;Congratulations you have successfully created a WordPress website!!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Final Thought On How To Create WordPress Site&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now hope you agreed to the fact that creating your own website is not a daunting process as much it is generally considered…at least not with WordPress.&lt;/p&gt;

&lt;p&gt;With WordPress, anyone can start building their own site with no prior knowledge of wordpress web design and development. The best part about a WordPress website is you can customize it the way you want and can be used for your business, blog, portfolio, or online store immediately.&lt;/p&gt;

&lt;p&gt;Hope this comprehensive guide on how to create WordPress site, helps you in creating your own &lt;a href="https://www.janbaskdigitaldesign.com/wordpress-website-design-and-development"&gt;custom wordpress website design&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>webdesign</category>
      <category>websitedevelopment</category>
    </item>
    <item>
      <title>Secure API Keys on the Frontend - Vue JS
</title>
      <author>Rodrigo</author>
      <pubDate>Fri, 17 Sep 2021 04:08:27 +0000</pubDate>
      <link>https://dev.to/korconnect/secure-api-keys-on-the-frontend-vue-js-1l21</link>
      <guid>https://dev.to/korconnect/secure-api-keys-on-the-frontend-vue-js-1l21</guid>
      <description>&lt;p&gt;Why are we going to use KOR Connect?&lt;/p&gt;

&lt;p&gt;APIs keys / secrets have been traditionally stored in an application’s backend but this requires control of your own server as well as specialized infrastructure knowledge to set up properly. On CDN hosted, or serverless client side applications it is often not possible to gain access to the server that is hosting the project. If the developer hardcodes the API keys to their frontend anyone is able to access the keys and steal them. When API keys are stolen the malicious agent is able to do whatever they want with the APIs. This could rack up costs for the developer, use all of the allowed calls, or if the APIs are used against the TOS the dev’s credentials may be revoked. The other route that is often suggested to hide API keys for client side applications is to set up serverless functions to store the API keys and act as a proxy for the frontend. The developer could also use CORS to identify the header origin to make sure that only the allowed domains are calling the proxy (so that not anyone is able to call the proxy url from anywhere). This may seem secure but CORS only verifies browser calls and can be easily spoofed or can be called from outside of the browser. A malicious agent could easily run up costs with a bot or have the endpoint shut down as well. KOR Connect has a system that automatically protects against these vulnerabilities as well as allows the developer to integrate any API in the simplest and quickest possible way. &lt;/p&gt;

&lt;p&gt;Now let me walk you through an example!&lt;/p&gt;

&lt;p&gt;I have wanted to create a COVID-19 tracker for sometime; I wanted to create the app in a way where I consume an API but without a backend. In order to do this, I had a couple of options.The approach that initially came to mind was to use public APIs on a static site, but during my planning phase I came across &lt;a href="https://rapidapi.com"&gt;https://rapidapi.com&lt;/a&gt;. Here I found an array of different options for Covid data APIs, the caveat was that the APIs required authentication.&lt;/p&gt;

&lt;p&gt;I could have spun up a small backend and dealt with authentication there but a simple COVID-19 tracker webapp didn’t warrant such efforts.&lt;/p&gt;

&lt;p&gt;In the end I ended up using &lt;a href="https://korconnect.io/"&gt;https://korconnect.io/&lt;/a&gt;, a connection middleware that allows you to connect APIs without a backend. This is how I did it:&lt;/p&gt;

&lt;p&gt;I created an account on &lt;a href="https://korconnect.io/"&gt;https://korconnect.io/&lt;/a&gt;&lt;br&gt;
Also created an account on &lt;a href="https://rapidapi.com/"&gt;https://rapidapi.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, I needed to choose an API to consume. I decided on this one which uses Johns Hopkins public data:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXz17GHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz2fmsarb10bb8a3zvpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXz17GHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz2fmsarb10bb8a3zvpz.png" alt="https://rapidapi.com/axisbits-axisbits-default/api/covid-19-statistics/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started by creating an API connection on KOR Connect by clicking on the “+ Connect API” button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L24CCx0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oks4n7ozo0b0bf3yihle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L24CCx0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oks4n7ozo0b0bf3yihle.png" alt="Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added the connection details, all of this information was copied directly from RapidAPI. More information about that here: &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html"&gt;https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5W2AyHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhuwytwk08zgfo7agplz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5W2AyHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhuwytwk08zgfo7agplz.png" alt="Connection Details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done! After making the connection I went to the code snippets to see how I would consume the API in my frontend. In my case I wanted to use VueJS to create my tracker so I went to the VueJS snippets section and retrieved the information I needed for the framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiehC6-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7xkwmpzt5cgl8jwwbfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiehC6-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7xkwmpzt5cgl8jwwbfv.png" alt="VueJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, all good! Now, the tricky part…making the site. I don’t have much experience coding on React or Vue but I found a great video tutorial that walked me through building a COVID-19 tracker.&lt;/p&gt;

&lt;p&gt;Check this excellent tutorial by Traversy Media: &lt;a href="https://www.youtube.com/watch?v=m-MAIpnH9ag"&gt;https://www.youtube.com/watch?v=m-MAIpnH9ag&lt;/a&gt; (Here is the code for his COVID-19 tracker &lt;a href="https://github.com/bradtraversy/vue-c.."&gt;https://github.com/bradtraversy/vue-c..&lt;/a&gt;.).&lt;/p&gt;

&lt;p&gt;One thing of note, in that tutorial he uses a public API. So I had to figure out how to use the Kor Connect snippet in my code. Thankfully, it was very easy!&lt;/p&gt;

&lt;p&gt;First, let’s take a look at how Kor Connect provides the snippet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3aWTvPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs4w5di5xj14wb2eyf6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3aWTvPt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs4w5di5xj14wb2eyf6l.png" alt="Kor Connect Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how I integrated it into my project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxsTaXbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwowxpojt5ulbsdnbrit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxsTaXbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwowxpojt5ulbsdnbrit.png" alt="Code Implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something to note is how I modified the KOR Connect URL with the paths I received from RapidAPI. For example, to get the summary report I needed to add this to the end of my URL:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/reports/total
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Pay attention to the paths that your API provider gives you and put them at the end of your KOR Connect URL.&lt;/p&gt;

&lt;p&gt;Now, all the calls can be made to the link that KOR Connect provides, KOR Connect will act as a proxy to authenticate as well as send back the API information. Furthermore, thanks to reCaptcha enterprise’s (which is implemented automatically) layers of security several malicious attack vectors are blocked, this enhances KOR Connects security.&lt;/p&gt;

&lt;p&gt;What does the final project look like?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-evIk-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2cphqumvaob6kbk30ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-evIk-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2cphqumvaob6kbk30ge.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best of all, for this quick and safe API consumption I don’t need to expose my API token to the public nor do I have to spin up a backend.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>security</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>React Native Mobile Apps, Working With React Navigation Authentication And Supabase Login  Pt 1</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 17 Sep 2021 03:50:15 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/react-native-mobile-apps-working-with-react-navigation-authentication-and-supabase-login-pt-1-1hce</link>
      <guid>https://dev.to/aaronksaunders/react-native-mobile-apps-working-with-react-navigation-authentication-and-supabase-login-pt-1-1hce</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aBuB-Q6vHDE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video we build upon the last and add &lt;a href="//supabase.io"&gt;Supabase&lt;/a&gt; to the project. We implement an authentication check for the application when it first starts up and redirects to the un protected pages if there is no session and then to the protected pages if there is a session.&lt;/p&gt;

&lt;p&gt;We also added the Supabase signOut function to show the app redirecting back to the unprotected AuthenticationSack once the session was gone.&lt;/p&gt;

&lt;p&gt;Join with me on my journey of refreshing my memory with React Native and building mobile applications&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://supabase.io/"&gt;https://supabase.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/docs/getting-started"&gt;https://reactnavigation.org/docs/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.expo.dev/get-started/create-a-new-app/"&gt;https://docs.expo.dev/get-started/create-a-new-app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>reactnative</category>
      <category>supabase</category>
      <category>video</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Collaborating with others in open-source</title>
      <author>Luke Nguyen</author>
      <pubDate>Fri, 17 Sep 2021 03:49:43 +0000</pubDate>
      <link>https://dev.to/mqnguyen/collaborating-with-others-in-open-source-n8o</link>
      <guid>https://dev.to/mqnguyen/collaborating-with-others-in-open-source-n8o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This week I had a chance to work with &lt;a href="https://github.com/lyu4321"&gt;Leyang Yu&lt;/a&gt;, a fellow student from my open-source course. Our task is to review each other's implementation of the static site generator and file any issues we find on GitHub. &lt;/p&gt;

&lt;p&gt;For a socially awkward person and introverted person like me, the thought of having to take a look at someone else code was horrifying. Will I be able to examine the code as thoroughly as I can? How should my wordings be when filling the issue? Should I make any recommendations? These were all the questions and pressure that I put onto myself before trying it out. &lt;/p&gt;

&lt;p&gt;And, to my surprise, the experience was actually pretty enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-in-touch-and-first-impressions"&gt;
  &lt;/a&gt;
  Getting in touch and first impressions
&lt;/h2&gt;

&lt;p&gt;First, I reached out to my partner on Slack was excited to find out that Leyang was also a web developer like myself, and we both share an interest in JavaScript. Because of this, I was able to learn a lot just from watching my partner code alone. I was amazed to see how they insert HTML contents using only a simple template HTML file and a few &lt;code&gt;replace()&lt;/code&gt; functions instead of using an &lt;code&gt;npm&lt;/code&gt; package like I did. &lt;/p&gt;

&lt;p&gt;In addition, the way Leyang organized the code made the experience of navigating through the code less challenging. It is something that I could learn from as I struggle many times trying to understand what I wrote.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-and-debugging-ones-code"&gt;
  &lt;/a&gt;
  Reviewing and debugging one's code
&lt;/h2&gt;

&lt;p&gt;After cloning the project to my computer and ran it through a couple of tests, I was able to spot out some problems. The program had no trouble accepting files in a given directory and convert them into HTML. However, when generating links for the converted files, &lt;a href="https://github.com/lyu4321/jellybean/issues/4"&gt;the behavior was not as expected&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Given a `folder` directory with the following files:
2efgt.bin  'a text file.txt'   abcd.txt   jkjkjk.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expected output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./a text file.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A text file&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./abcd.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Abcd&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actual output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./2efgt.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2efgt&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./a text file.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A text file&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./abcd.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Abcd&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./jkjkjk.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Jkjkjk&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leyang and I had a long discussion on how to solve this, with myself suggesting the use of a &lt;code&gt;.filter()&lt;/code&gt; to sort out any non-text files. In the end, we decided to add an extra check for the files' extension in one of the &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;In addition, I also gave my partner some &lt;a href="https://github.com/lyu4321/jellybean/issues/2"&gt;suggestions on the README.md&lt;/a&gt;, mainly to include an installation guide and some extra examples/demos for other developers.&lt;/p&gt;

&lt;p&gt;As for my part, Leyang discovered that my program had trouble &lt;a href="https://github.com/mqnguyen5/mini-ssg/issues/2"&gt;accepting input with spaces&lt;/a&gt;. I noticed that this behaviour was because of how &lt;code&gt;yargs&lt;/code&gt; - a package I used to make my CLI - parse arguments. By default, arguments are separated by spaces. Thus, only the first word of the file/folder was registered, which resulted in an error saying the specified path doesn't exist. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/[some-path]/a file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be registered as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/[some-path]/a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After some time, I was finally able to figure it out by changing the input type and adding an extra step to process the user-provided input.&lt;/p&gt;

&lt;p&gt;Another issue that I had was the content when calling -v was &lt;a href="https://github.com/mqnguyen5/mini-ssg/issues/1"&gt;missing the program name&lt;/a&gt;. It was not difficult to fix as I only needed to change the function displaying the version to include both the name and the version number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The experience of working on the code in a community was still pretty new to me, but it is something that I am willing to do again in the future. As the annual &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; is getting closer, I cannot wait to meet up with new people and see which project I will be contributing to.&lt;/p&gt;

&lt;p&gt;Cheers 🍻!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Photo by &lt;a href="https://unsplash.com/@jstrippa?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;James Harrison&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Read, Parse and Write CSV Files with Python.</title>
      <author>Collins</author>
      <pubDate>Fri, 17 Sep 2021 02:48:40 +0000</pubDate>
      <link>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</link>
      <guid>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-csv-files-anyway"&gt;
  &lt;/a&gt;
  What are CSV files anyway?🤷‍♂️
&lt;/h2&gt;

&lt;p&gt;CSV files, the &lt;strong&gt;CSV&lt;/strong&gt; meaning &lt;strong&gt;Comma Separated Values&lt;/strong&gt;, are text files used to store data.&lt;br&gt;&lt;br&gt;
CSV files emulate tabular data, except that each field is separated by a &lt;em&gt;comma&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" alt="csv_file"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;CSV files can be manipulated with Python in either of these ways:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;traditional read/write methods&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;csv&lt;/code&gt; module
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#what-would-be-covered"&gt;
  &lt;/a&gt;
  What would be covered-
&lt;/h2&gt;

&lt;p&gt;In this article, the focus would be manipulating CSV files using &lt;em&gt;Python's&lt;/em&gt; &lt;code&gt;csv&lt;/code&gt; module, why it is preferred over the usual read/write method would become apparent in a bit.&lt;br&gt;&lt;br&gt;
This article covers the concepts and code (in Python 🐍) used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#reading-csv-files"&gt;reading CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#field-names"&gt;accessing field names/headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-to-csv-files"&gt;writing CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-dictionary-readers-and-writers"&gt;leveraging dictionary readers and writers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reading-csv-files"&gt;
  &lt;/a&gt;
  Reading CSV files
&lt;/h2&gt;

&lt;p&gt;Without wasting any more time, let's get straight to reading CSV files 🚀.&lt;br&gt;&lt;br&gt;
The CSV file used in this article can be found &lt;a href=""&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import csv module
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="c1"&gt;# open the csv file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# using the csv reader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through the csv_reader iterable object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the reader object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ['first_name', 'last_name', 'email']
    ['John', 'Doe', 'john-doe@bogusemail.com']
    ['Mary', 'Smith-Robinson', 'maryjacobs@bogusemail.com']
    ['Dave', 'Smith', 'davesmith@bogusemail.com']
    ['Jane', 'Stuart', 'janestuart@bogusemail.com']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above prints each line in the CSV file.&lt;br&gt;&lt;br&gt;
This was achieved first by importing the &lt;code&gt;csv&lt;/code&gt; module, then a &lt;em&gt;context manager&lt;/em&gt; is used to open the CSV file, the CSV file is read into a file object referenced &lt;code&gt;csv_file&lt;/code&gt;, using the &lt;code&gt;open()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
Using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; function, each line in the CSV file is parsed into a &lt;strong&gt;reader&lt;/strong&gt; object, &lt;code&gt;csv_reader&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is &lt;em&gt;iterable&lt;/em&gt;, it returns &lt;em&gt;each line&lt;/em&gt; in the CSV file &lt;em&gt;as lists&lt;/em&gt; when subjected to iteration. &lt;br&gt;
A quick &lt;code&gt;for&lt;/code&gt; loop and a &lt;code&gt;print()&lt;/code&gt; function would return each line in the CSV file 😊.  &lt;/p&gt;

&lt;p&gt;It is important to note, that the &lt;em&gt;reader&lt;/em&gt; object iterable when iterated, returns each line of the CSV file in a &lt;code&gt;list&lt;/code&gt; object where each &lt;em&gt;comma-separated field&lt;/em&gt; is a &lt;em&gt;list item&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
This could be helpful to determine what field values would be returned, by &lt;em&gt;indexing&lt;/em&gt; the &lt;em&gt;list&lt;/em&gt; that is returned for every line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through reader object csv_reader
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print the field values under the field header email
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    email
    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above prints the last &lt;em&gt;field value&lt;/em&gt; for every line in the CSV file.&lt;br&gt;&lt;br&gt;
First, the file is read as before, by a context manager, into a file object.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is created next, it gets iterated through with a &lt;code&gt;for&lt;/code&gt; loop, and within the &lt;code&gt;print()&lt;/code&gt; function, is where the &lt;em&gt;indexing&lt;/em&gt; of each list item (line in CSV file) is done.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#field-names"&gt;
  &lt;/a&gt;
  Field names
&lt;/h2&gt;

&lt;p&gt;Just as most &lt;em&gt;tables&lt;/em&gt; have &lt;em&gt;headers&lt;/em&gt;, so do most CSV files also contain &lt;strong&gt;field names&lt;/strong&gt;, the &lt;em&gt;field names&lt;/em&gt; of a csv file can be obtained also if present, using the &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through the csv_reader once
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Field names: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Field names: ['first_name', 'last_name', 'email']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the concept of &lt;em&gt;iterators&lt;/em&gt; or &lt;em&gt;generators&lt;/em&gt; (which are iterators) is not strange, it shouldn't be new to know that when a loop is used to iterate through an &lt;em&gt;iterator&lt;/em&gt;, it's the &lt;code&gt;next()&lt;/code&gt; function that keeps getting called on the &lt;em&gt;iterator&lt;/em&gt; each time.  &lt;/p&gt;

&lt;p&gt;Here the &lt;code&gt;next()&lt;/code&gt; function is called once, which could be seen as looping or iterating through the &lt;em&gt;reader&lt;/em&gt; object once, this returns the first line in the CSV file, which would most of the time be the &lt;em&gt;field names&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;It shouldn't be confusing that the &lt;em&gt;reader&lt;/em&gt; object was called an &lt;em&gt;iterable&lt;/em&gt; previously and an &lt;em&gt;iterator&lt;/em&gt; here, because all &lt;em&gt;iterators&lt;/em&gt; are actually &lt;em&gt;iterable&lt;/em&gt;. &lt;br&gt;
If there's any confusion about the difference between an &lt;em&gt;iterator&lt;/em&gt; and an &lt;em&gt;iterable&lt;/em&gt;, this &lt;a href="https://www.geeksforgeeks.org/python-difference-iterable-iterator/#:~:text=Iterable%20is%20an%20object%2C%20which%20one%20can%20iterate%20over.&amp;amp;text=Iterator%20is%20an%20object%2C%20which,every%20iterable%20is%20an%20iterator."&gt;article&lt;/a&gt; from geeksforgeeks should help.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-to-csv-files"&gt;
  &lt;/a&gt;
  Writing to CSV files
&lt;/h2&gt;

&lt;p&gt;Just as it is possible to read CSV files in Python, it is also possible to write comma-separated values or fields into CSV files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to read or get comma separated values or data from
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open/create the file to write comma separated values to
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# create writer object
&lt;/span&gt;    &lt;span class="n"&gt;csv_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the comma separated values of the initially opened file through the reader object
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;csv_lines&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write these values to the new file
&lt;/span&gt;      &lt;span class="n"&gt;csv_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above would successfully read or copy &lt;em&gt;comma-separated values&lt;/em&gt; from a CSV file (&lt;em&gt;records.csv&lt;/em&gt;) into another (&lt;em&gt;new_records.csv&lt;/em&gt;).  &lt;/p&gt;

&lt;p&gt;As repeated in previous code blocks, the CSV file is opened within a context manager, two CSV files were opened in the block of code above, the initial CSV file was opened to read comma-separated values out of it, into a &lt;code&gt;csv&lt;/code&gt; module's reader object.  &lt;/p&gt;

&lt;p&gt;The next CSV file is also opened within a context manager, although in this case it was opened so comma-separated values could be &lt;em&gt;written&lt;/em&gt; into it.  &lt;/p&gt;

&lt;p&gt;Next, a &lt;strong&gt;writer&lt;/strong&gt; object was created using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, which takes as argument the CSV file object.  &lt;/p&gt;

&lt;p&gt;The next section in the code block contains a loop that iterates through the &lt;em&gt;reader&lt;/em&gt; object, to return each line copied from the &lt;em&gt;first file&lt;/em&gt; (&lt;em&gt;records.csv&lt;/em&gt;) that was opened into the &lt;code&gt;csv_lines&lt;/code&gt; variable, this variable, is passed to the &lt;em&gt;writer&lt;/em&gt; object's method &lt;code&gt;writerow()&lt;/code&gt;, which writes these values into the &lt;em&gt;last opened file&lt;/em&gt; (&lt;em&gt;new_records.csv&lt;/em&gt;).&lt;br&gt;&lt;br&gt;
Within the &lt;code&gt;csv.writer()&lt;/code&gt; function in the previous code block, a second argument was included - &lt;code&gt;delimiter='-'&lt;/code&gt;, which would write the values from the previously opened file into the newly opened file, but each field value would be separated by a hyphen (-) instead of a comma (,).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" alt="records"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-csv-file-commaseparated-values-were-copiedread-from-it"&gt;
  &lt;/a&gt;
  First CSV file (comma-separated values were copied/read from it).
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" alt="new_records_LI"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#second-csv-file-commaseparated-values-were-written-to-it"&gt;
  &lt;/a&gt;
  Second CSV file (comma-separated values were written to it).
&lt;/h4&gt;

&lt;p&gt;The second CSV file looks very hard to read and could be problematic if the field values contain the delimiting character (the hyphen, "-"), looking again at the second image, the &lt;em&gt;email field&lt;/em&gt; of the second entry (&lt;a href="mailto:john-doe@bogusemail.com"&gt;john-doe@bogusemail.com&lt;/a&gt;), and the &lt;em&gt;last_name&lt;/em&gt; field of the third entry (Smith-Robinson) have hyphens, which is the delimiting character.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSV files values are not always separated by a comma, as seen in the second file above, the &lt;em&gt;delimiting&lt;/em&gt; character could be arbitrary, &lt;em&gt;commas&lt;/em&gt; are mostly used as a convention, and in some cases to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, knew to place field values that contained the delimiting character in double quotes, as seen in the image above. This would have otherwise made the file hard to read or use in a program.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-dictionary-readers-and-writers"&gt;
  &lt;/a&gt;
  Using Dictionary readers and writers
&lt;/h2&gt;

&lt;p&gt;Although using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; and &lt;code&gt;writer()&lt;/code&gt; functions seems like the standard way to handle CSV files, there's a better way to read from and write to CSV files, that improves code readability, and helps explicitly manipulate and parse comma-separated-values, the way to achieve this would be using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; and &lt;code&gt;DictWriter()&lt;/code&gt; functions for reading from and writing to CSV files respectively.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reading-csv-files-with-the-raw-dictreader-endraw-"&gt;
  &lt;/a&gt;
  Reading CSV files with the &lt;code&gt;DictReader()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The next code block would show how to read from a CSV file using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to be read in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the CSV file as an OrderedDict object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    OrderedDict([('first_name', 'John'), ('last_name', 'Doe'), ('email', 'john-doe@bogusemail.com')])
    OrderedDict([('first_name', 'Mary'), ('last_name', 'Smith-Robinson'), ('email', 'maryjacobs@bogusemail.com')])
    OrderedDict([('first_name', 'Dave'), ('last_name', 'Smith'), ('email', 'davesmith@bogusemail.com')])
    OrderedDict([('first_name', 'Jane'), ('last_name', 'Stuart'), ('email', 'janestuart@bogusemail.com')])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reading from a CSV file using the &lt;code&gt;DictReader()&lt;/code&gt; function is very similar to using the &lt;code&gt;reader()&lt;/code&gt; function as shown in the code block above.&lt;br&gt;&lt;br&gt;
The first and obvious difference is that the &lt;code&gt;DictReader()&lt;/code&gt; function is used in place of the &lt;code&gt;reader()&lt;/code&gt; function, thereby returning a &lt;code&gt;DictReader&lt;/code&gt; object, as opposed to the &lt;code&gt;reader&lt;/code&gt; object of the &lt;code&gt;reader()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
The second difference would be iterating through the &lt;code&gt;DictReader&lt;/code&gt; object an &lt;code&gt;OrderedDict&lt;/code&gt; object is returned for each line in the CSV file, as opposed to a &lt;code&gt;list&lt;/code&gt; object from a &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;&lt;br&gt;
Due to the &lt;code&gt;OrderedDict&lt;/code&gt; object returned for each line in the CSV file, it makes it easy to index field values, as it would be indexed by the field headers rather than ambiguous index numbers.&lt;br&gt;&lt;br&gt;
A use-case is illustrated in the code block below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# get field values for the email field only
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code block prints only the field values under the &lt;em&gt;email&lt;/em&gt; header, by indexing with the field header - &lt;em&gt;'email'&lt;/em&gt;. This substantially improves code readability, due to how explicit it is.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-csv-files-using-the-raw-dictwriter-endraw-"&gt;
  &lt;/a&gt;
  Writing to CSV files using the &lt;code&gt;DictWriter()&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file to read comma separated values from it
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open new CSV file to write comma separated values into it
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# create a list of the field names or headers of the field values that would be written to the file
&lt;/span&gt;    &lt;span class="n"&gt;field_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'first_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# create a DictWriter object using the DictWriter() function.
&lt;/span&gt;    &lt;span class="c1"&gt;# assign the field_names list above to the fieldnames parameter of the function
&lt;/span&gt;    &lt;span class="c1"&gt;# pass a tab character as the delimiting character
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# write the field header into the CSV file
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the values read from the previous file
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write the comma separated values to the new CSV file
&lt;/span&gt;      &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-file"&gt;
  &lt;/a&gt;
  Output file:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" alt="new_records_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The code block above would read comma-separated values from one CSV file, and write these values into another CSV file, separating each field value in the new CSV file by a tab character. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;DictWriter()&lt;/code&gt; function is very similar to using the &lt;code&gt;writer()&lt;/code&gt; function, significant differences to be noted would be explained.&lt;/p&gt;

&lt;p&gt;Firstly, after opening the second CSV file for writing (within the second context manager), a list referenced by variable name field_names was created, the list items are the field headers or field names of the comma-separated values that would be written into the new CSV file, this explains why it is passed as an argument to the &lt;code&gt;DictWriter()&lt;/code&gt; function, by assigning it to the &lt;code&gt;fieldnames=&lt;/code&gt; parameter.  &lt;/p&gt;

&lt;p&gt;Secondly, after calling the &lt;code&gt;DictWriter()&lt;/code&gt; function, the next line contains a method of the &lt;code&gt;DictWriter&lt;/code&gt; object created in the previous line, the &lt;code&gt;writeheader()&lt;/code&gt; method, this just makes sure that the field headers or field names are included when the comma-separated values are written, field headers are written to the top of the CSV file.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, the article has been able to put into perspective how easy it is to handle CSV files in Python, thanks to the &lt;code&gt;csv&lt;/code&gt; module, and further usage of concepts and methods explained should be a walk in the park.  &lt;/p&gt;

&lt;p&gt;If the CSV files would be worked with in a data-science-focused setting, using the &lt;code&gt;csv&lt;/code&gt; module is not advisable, the &lt;code&gt;pandas&lt;/code&gt; library should come in handy in such situations, as it contains functions and objects that are better suited for such tasks.&lt;br&gt;&lt;br&gt;
Although the objects that are very much compatible with pandas functions may be difficult to handle in a traditional Python program.&lt;br&gt;&lt;br&gt;
It should also be clear at this point why the traditional &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt; methods would not be feasible when handling CSV files.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hopefully-youve-learnt-how-to"&gt;
  &lt;/a&gt;
  Hopefully, you've learnt how to-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read data from CSV files&lt;/li&gt;
&lt;li&gt;write to CSV files&lt;/li&gt;
&lt;li&gt;use dictionary readers to intuitively manipulate CSV files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/csv.html"&gt;Python documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YYXdXT2l-Gg&amp;amp;list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU"&gt;Corey Schafer Series&lt;/a&gt; on youtube.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, connect with me on &lt;a href="https://twitter.com/__0th__"&gt;Twitter&lt;/a&gt; and &lt;a href="https://linkedin.com/in/0th"&gt;LinkedIn&lt;/a&gt;, let's vibe ✌🏽.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
