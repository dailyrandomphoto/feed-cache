<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 CSS Tricks &amp; Tips That You Should Know 🚀 + Giveaway </title>
      <author>Garvit Motwani</author>
      <pubDate>Tue, 20 Apr 2021 00:35:14 +0000</pubDate>
      <link>https://dev.to/garvitmotwani/5-css-tricks-tips-that-you-should-know-giveaway-4d0d</link>
      <guid>https://dev.to/garvitmotwani/5-css-tricks-tips-that-you-should-know-giveaway-4d0d</guid>
      <description>&lt;p&gt;CSS plays a major part in the field of web development and can be easy and at a point, it can also be advanced and tough, throughout CSS's history, numerous tricks have been discovered by the developer community. Today I will tell you a few of them.&lt;/p&gt;

&lt;p&gt;So let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset"&gt;
  &lt;/a&gt;
  Reset
&lt;/h2&gt;

&lt;p&gt;This one is pretty simple, it basically means to reset the whole document's default styling which is given by the browser itself. Most developers make a reset when they want nothing to get in their project's way or maybe for some specific project that needs one! Every developer has their own preference for using which reset as I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Some developers use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;applet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;abbr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;acronym&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;big&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;cite&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;del&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dfn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ins&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;kbd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;q&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;samp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;small&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;strike&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;u&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;caption&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;tfoot&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;hgroup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nt"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;output&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* HTML5 display-role reset for older browsers */&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;hgroup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;q&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;q&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;q&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above reset is &lt;a href="https://meyerweb.com/"&gt;meyerweb.com&lt;/a&gt; and for more, you can just search reset CSS on google to find your own preference.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#capitalization"&gt;
  &lt;/a&gt;
  Capitalization
&lt;/h2&gt;

&lt;p&gt;This is a common trick but it is sometimes not taught in the CSS tutorials or course, so many developers still don't know this trick. It basically capitalizes the first letter of every word in a particular tag. Look at this for example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codewithgarvit/embed/KKaBWKK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see I have not capitalized any letter manually in the HTML, instead, I wrote &lt;code&gt;text-transform: capitalize;&lt;/code&gt; and it did it dynamically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#centering"&gt;
  &lt;/a&gt;
  Centering
&lt;/h2&gt;

&lt;p&gt;Centering is easy but, in my case, I usually don't remember the code to center text or content. So I use some short code snippets for that which I stored in my notes 😅.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;text-align: center;&lt;/code&gt; to &lt;strong&gt;center the text&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;vertically center text in a &lt;code&gt;div&lt;/code&gt;&lt;/strong&gt;, you can use &lt;code&gt;margin: auto;&lt;/code&gt;, but to give you a proper example you should take a look at this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codewithgarvit/embed/KKaxgBd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;and then you can also add `text-align: center to center it both, horizontally and vertically.&lt;/p&gt;

&lt;p&gt;To center an &lt;strong&gt;image&lt;/strong&gt;, you should first of all turn it into a &lt;code&gt;block&lt;/code&gt; element and do a &lt;code&gt;margin: auto&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#drop-caps"&gt;
  &lt;/a&gt;
  Drop Caps
&lt;/h2&gt;

&lt;p&gt;Remember that 1st big letter in every chapter of your literature book or the start of a novel or a book. You can do that by using this snippet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jcOJUO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8n29r8t47opdfrvhvrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jcOJUO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8n29r8t47opdfrvhvrc.png" alt="snippet"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prevent-highlighting"&gt;
  &lt;/a&gt;
  Prevent Highlighting
&lt;/h2&gt;

&lt;p&gt;If you don't want the user to select or highlight anything on your website to prevent copying content, or maybe for some personal or any reasons, you can just use this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0GCLBZ9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pmq36d9sb561ft2seq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GCLBZ9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pmq36d9sb561ft2seq1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-giveaway-%EF%B8%8F"&gt;
  &lt;/a&gt;
  ⚡️ Giveaway ⚡️
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; Subscribe to our &lt;a href="https://worldindev.ck.page/"&gt;Newsletter&lt;/a&gt; &amp;lt;-- Very important&lt;br&gt;
--&amp;gt; Follow me on &lt;a href="https://twitter.com/garvitmotwani"&gt;Twitter&lt;/a&gt; &amp;lt;-- x2 Chances of winning&lt;/p&gt;

&lt;p&gt;The winner will be announced on May 1, Via Twitter&lt;/p&gt;



&lt;p&gt;Thank you very much for reading this article.&lt;/p&gt;

&lt;p&gt;Comment any tricks &amp;amp; tips you know!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE LIKE, SHARE, AND COMMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://dev.to/garvitmotwani"&gt;Dev&lt;/a&gt; and &lt;a href="https://twitter.com/GarvitMotwani"&gt;Twitter&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You Should also check &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Projects ideas to become a javascript master 🚀 Resource compilation 💥 + Giveaway⚡&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Apr 10 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;by my friend &lt;a class="mentioned-user" href="https://dev.to/devlorenzo"&gt;@devlorenzo&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;Subscribe to our &lt;a href="https://chipper-motivator-3112.ck.page/05710ea3d3"&gt;newsletter&lt;/a&gt; to receive our weekly recap directly on your email!&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/aWS2YKk6"&gt;Discord&lt;/a&gt; to participate in hackathons with us / participate in our giveaways!&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Secure Your Azure DevOps Organization NOW!</title>
      <author>Davide Benvegnù</author>
      <pubDate>Mon, 19 Apr 2021 23:17:52 +0000</pubDate>
      <link>https://dev.to/n3wt0n/secure-your-azure-devops-organization-now-42l2</link>
      <guid>https://dev.to/n3wt0n/secure-your-azure-devops-organization-now-42l2</guid>
      <description>&lt;p&gt;Securing on Organization in Azure DevOps is a &lt;strong&gt;pretty important&lt;/strong&gt; thing to do. &lt;/p&gt;

&lt;p&gt;Today I'm gonna show you exactly how you can do it using tools like security policies, multi-factor authentication, and much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;I've decided to make this post because working with many companies and organizations I've noticed that often the security of development tools and environments is not the priority.&lt;/p&gt;

&lt;p&gt;But the question is: &lt;strong&gt;&lt;em&gt;how can you keep safe your production if you don't take care of all the previous stages and environments&lt;/em&gt;&lt;/strong&gt;? And anyway often tools like Azure DevOps and Azure Pipelines are accessing production in some form, especially for deployment... so, better keep everything safe and secure, right?&lt;/p&gt;

&lt;p&gt;There are many tools we can use to &lt;strong&gt;secure our Azure DevOps organization&lt;/strong&gt;. I will try to cover most of them here but let me know in the comment section below if you have any other use case or scenario you would like me to cover, or if you are using a tool or technique I haven't mentioned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nrYSu_046cw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/nrYSu_046cw"&gt;Link to the video: https://youtu.be/nrYSu_046cw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-aad"&gt;
  &lt;/a&gt;
  Connect to AAD
&lt;/h3&gt;

&lt;p&gt;First thing you want to do  in your Azure DevOps organization is &lt;strong&gt;connecting your Azure DevOps organization with your Azure AD tenant&lt;/strong&gt;. This, as we will see, brings so many advantages to the table. Benefits like strong &lt;strong&gt;&lt;em&gt;identity governance&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;MFA&lt;/em&gt;&lt;/strong&gt; (Multi Factor Authentication), &lt;strong&gt;&lt;em&gt;access policies&lt;/em&gt;&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch the &lt;a href="https://youtu.be/nrYSu_046cw"&gt;video&lt;/a&gt; to see how to connect AzDO to AAD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k75qAmh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62fst8im0fx8w1p0bfe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k75qAmh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62fst8im0fx8w1p0bfe2.png" alt="Connect AAD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that you need to do that with an account that has the &lt;strong&gt;proper permissions&lt;/strong&gt; in your Azure AD. &lt;/p&gt;

&lt;p&gt;Also, if you have already other users in your Azure DevOps organization that don't belong to the Azure AD tenant you have chosen, they will temporarily loose access to the organization. You can eventually &lt;strong&gt;map them back&lt;/strong&gt; to other users or &lt;strong&gt;invite them&lt;/strong&gt; to your Azure AD.&lt;/p&gt;

&lt;p&gt;Alright, now that your Azure DevOps organization is connected to Azure AD, let's see what we can do with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-user-access"&gt;
  &lt;/a&gt;
  Dynamic User Access
&lt;/h3&gt;

&lt;p&gt;First cool thing is the Dynamic User Access. Let's say you have some groups in Azure AD where all your developers are. You can &lt;strong&gt;dynamically add access&lt;/strong&gt; for azure DevOps project using the Azure AD group rule.&lt;/p&gt;

&lt;p&gt;Just go to &lt;em&gt;Users&lt;/em&gt; under your organization settings, then click on &lt;em&gt;Group Rules&lt;/em&gt;, and &lt;em&gt;Add a group rule&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7a_7-Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8r2w9o5n591x7gups88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7a_7-Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8r2w9o5n591x7gups88.png" alt="Group Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search for the group you have in Azure AD, select the Access Level you want to Grant, and the projects you want to grant it to.&lt;/p&gt;

&lt;p&gt;That's it, now &lt;strong&gt;every AD user in that group will be able to access&lt;/strong&gt; the projects you've selected, with the access level you've set.&lt;/p&gt;

&lt;p&gt;You can always add or remove projects, and the AD administrators can manage these accesses without using the Azure DevOps settings, directly from Azure AD.&lt;/p&gt;

&lt;p&gt;There is more to say about this, we are just scratching the surface here, so let me know in the comments section below if you want to see this explored more in depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditional-access-policies"&gt;
  &lt;/a&gt;
  Conditional Access Policies
&lt;/h3&gt;

&lt;p&gt;Probably the most useful thing you can do thanks to Azure Active Directory, and I promise that after this one we will move to something that doesn't require AAD, aside from a bonus one at the end, is enabling the &lt;strong&gt;Conditional Access Policy Validation&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;You can find this setting under the "&lt;em&gt;Policies&lt;/em&gt;" menu inside "&lt;em&gt;Organization Settings&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;When you enable it, you'll be able to enforce all the policies you have in AAD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWhlgzWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivahd1s9qxrxyetoss3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWhlgzWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivahd1s9qxrxyetoss3v.png" alt="AAD access policies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things like allowing the connection to Azure DevOps only from &lt;strong&gt;specific IP Addresses&lt;/strong&gt;, or &lt;strong&gt;authorized computers&lt;/strong&gt;, and so forth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-policies"&gt;
  &lt;/a&gt;
  More Policies
&lt;/h3&gt;

&lt;p&gt;We've just seen the Policies page when enabling the conditional access from AAD, but there's more to it. As you can see, the &lt;strong&gt;available policies you can enable vary&lt;/strong&gt; whether you have your organization connected to AAD or not, but there are some common ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBLPI-sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz8xntx4r2mp7jwuwtlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBLPI-sS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz8xntx4r2mp7jwuwtlo.png" alt="Policies AAD vs No AAD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first one, the &lt;strong&gt;Alternate Credentials&lt;/strong&gt; for authentication, shouldn't be actually there anymore. Will go away very soon, so disable it straight away and &lt;strong&gt;use Personal Access Tokens instead.&lt;/strong&gt; If you want to know how to create a PAT in Azure DevOps, I have &lt;a href="https://dev.to/n3wt0n/how-to-create-a-personal-access-token-azure-devops-2fm7"&gt;a post&lt;/a&gt; and &lt;a href="https://youtu.be/o1rrrVKzc-o"&gt;a video that explains just that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second policy is to enable 3rd party Apps to connect to Azure DevOps using &lt;strong&gt;OAuth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0G-i-x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hq3be8tuyn8gtnem4fc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0G-i-x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hq3be8tuyn8gtnem4fc.png" alt="OAuth Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's enabled by default, but you can turn it off if you don't plan to use any third-party application. &lt;strong&gt;I wouldn't recommend it&lt;/strong&gt; though, because most like you will use applications that need OAuth.&lt;/p&gt;

&lt;p&gt;Next one is similar, but it cover &lt;strong&gt;SSH authentication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0j6ypcrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ytdr1bokamnwwqv3hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0j6ypcrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ytdr1bokamnwwqv3hq.png" alt="SSH Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again this is enabled by default, and as the name says it enables Azure DevOps to &lt;strong&gt;generate encryption keys&lt;/strong&gt; for using with Linux, macOS, and Windows running Git for Windows. I would not recommend turning this off either.&lt;/p&gt;

&lt;p&gt;Finally, here we have the &lt;strong&gt;Allow public projects&lt;/strong&gt; policy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgN_Gc4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xipone2qvf2wmxkaqnex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgN_Gc4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xipone2qvf2wmxkaqnex.png" alt="Public Projects Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name says, when enabled it give the possibility to the users to &lt;strong&gt;create public projects&lt;/strong&gt;. It is disabled by default, because &lt;strong&gt;&lt;em&gt;public projects are visible to anyone&lt;/em&gt;&lt;/strong&gt; who has a link to them. Enable this only if you want to have your code publicly available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organization-permissions"&gt;
  &lt;/a&gt;
  Organization Permissions
&lt;/h3&gt;

&lt;p&gt;Final topic I want to talk about today is fine tuning your Organization permissions. Azure DevOps has &lt;strong&gt;great and rich permission management system&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch the &lt;a href="https://youtu.be/nrYSu_046cw"&gt;video&lt;/a&gt; to see this in action&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going to the "&lt;em&gt;Permissions&lt;/em&gt;" menu in the &lt;em&gt;Organization settings&lt;/em&gt;, you can &lt;strong&gt;fine tune all the permissions&lt;/strong&gt; if they don't meet your company policies or they don't suit your needs. In here you can manage the policies for &lt;strong&gt;Groups and Users separately&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Working on &lt;strong&gt;Groups&lt;/strong&gt;, you can set the permissions for each part of the service. For example, the Group that is supposed to work only on CI\CD won't need access to the creation of Processes for Azure Boards, so you can remove that. You can add members to a group, and change its &lt;strong&gt;general settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When working on &lt;strong&gt;Users&lt;/strong&gt;, instead, you can really fine tune all their permissions. Let's say you have a user that needs to be able to &lt;strong&gt;perform some additional operations&lt;/strong&gt;, either extemporary or as part of his duty. You can easily access their profile and enable them on the permissions needed. This will &lt;strong&gt;override&lt;/strong&gt; the permissions the user has as part of the groups they are in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-organization-creation"&gt;
  &lt;/a&gt;
  Disable Organization Creation
&lt;/h3&gt;

&lt;p&gt;Ok, almost done. But as promised, a &lt;strong&gt;bonus policy&lt;/strong&gt; for you.&lt;/p&gt;

&lt;p&gt;Working with a lot of clients, I've noticed that there is a tendency where &lt;strong&gt;all the company departments create new organizations&lt;/strong&gt; in Azure DevOps, and IT department can’t control the security settings and who has rights to access the source code.&lt;/p&gt;

&lt;p&gt;Thanks to the Azure AD integration, however, &lt;strong&gt;we have a solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Azure Active Directory&lt;/em&gt; page under &lt;em&gt;Organization Settings&lt;/em&gt;, in fact, we have this &lt;strong&gt;Restricting organization creation toggle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljruo5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq655y5ly6vzi7su639c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljruo5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq655y5ly6vzi7su639c.png" alt="Org Creation Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Enabled, creation of new Organizations for users in your AAD will be disabled. Only users in the &lt;strong&gt;&lt;em&gt;Azure DevOps Administrator&lt;/em&gt;&lt;/strong&gt; group and users you add to the "&lt;em&gt;Allow list&lt;/em&gt;" will be able to create new orgs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't see the toggle in your settings, make sure the user you have logged in into Azure DevOps with is added to the "&lt;em&gt;Azure DevOps administrators group&lt;/em&gt;" in your Azure AD. By default no user is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Alright, that's it for today.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you've found this guide useful, if you use any other technique to secure Azure DevOps, and if there is any area you would like for me to go deeper into.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/o1rrrVKzc-o"&gt;this video here&lt;/a&gt;, where I explain how to create the Personal Access Tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nrYSu_046cw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>devops</category>
      <category>security</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Does flexbox do exactly what you don't want?</title>
      <author>masuggs515</author>
      <pubDate>Mon, 19 Apr 2021 23:16:31 +0000</pubDate>
      <link>https://dev.to/msuggs_coding/does-flexbox-do-exactly-what-you-don-t-want-5edp</link>
      <guid>https://dev.to/msuggs_coding/does-flexbox-do-exactly-what-you-don-t-want-5edp</guid>
      <description>&lt;p&gt;I know we've all been there. Creating a simple section of a webpage and wanting to line up three columns in perfect harmony. It should be extremely simple as we all know how to use flexbox. So we have our simple HTML. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dBxijouo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvgvebvcozwgge2w01d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBxijouo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvgvebvcozwgge2w01d8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice, now all we need is to set up display as flex in our CSS right? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sRJ4cdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1m3pn0ne82teeukiuv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sRJ4cdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1m3pn0ne82teeukiuv6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We refresh the page and expect everything to be perfect and... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4Y7kNwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp5z24cbs8f1ndjn7q1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4Y7kNwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp5z24cbs8f1ndjn7q1g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WHAT IS THIS?&lt;/p&gt;

&lt;p&gt;So it seems like a slight over reaction, but using flexbox can have some very odd behaviors, one of which is the sizing of all columns when they have a different amount of content within. Why does it do this?&lt;/p&gt;

&lt;p&gt;Flexbox uses two settings that control the actual width of the columns. One is flex-shrink. We can alter this, but good luck getting everything lined up evenly. And then once you do, please don't attempt editing or adding/removing anything in any of the columns. The second setting is how flexbox decides things behind the scenes. Flexbox actually looks at the amount of content within a given column and compares it to the other columns. &lt;br&gt;
As an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the three columns have 20px, 30px, and 50px respectively, the width of each column will be 20%, 30%, and 50%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common fix in the beginning is to create a class for each column(like I have above), and set the width to 33.33%. I have seen this done on more than one occasion and honestly it works! Until we add or remove a column. The example below is what happens when we remove a column. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgLiHcJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvuy56ahbto9698tzg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgLiHcJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvuy56ahbto9698tzg6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Each column stays at 33% of the parent div, but with only 2 columns this will only span across 66% of the section.&lt;/p&gt;

&lt;p&gt;The next option is also acceptable and much better than using divided percentages and that is to set each column's width to 100%. Since flexbox still uses it's flex-shrink, It will shrink all columns to an equal width. And... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r121TPOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rjqa3mfnj2ouay2tzdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r121TPOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rjqa3mfnj2ouay2tzdl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works! Yes this works exactly how we want, but it can be better and cleaner. If we add a new column and don't add the column class everything goes right back to square one. The below example I added a card to make it obvious that this was just new material.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-tcM2Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0mka52ehnx5o5asvcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-tcM2Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0mka52ehnx5o5asvcc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we have two options, the first is to add the class of column to each and everything that we add in to the columns div, but the easiest and cleanest option is to pass the style in to anything that is added as a child in to the .columns section with the * selector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DkpMWRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47bleev1o4d3m07moh4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DkpMWRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47bleev1o4d3m07moh4c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will make any element added, that is an immediate child of the .columns div, have a width of 100% without having to add a class in each child. This simple change to the CSS will clean up all code and make it simpler when adding any columns. Also, you could use these classes and styles in multiple places with no concern of uneven column widths. The final output without adding the class of column to the card, and with the only extra styling being to add a small gap, looks something like ... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IW6jrYFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky4cchq51tqobebe4t2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IW6jrYFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky4cchq51tqobebe4t2m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahh... Much better! This not only is helpful for styling easy evenly spaced columns, but I also think it's more important to know what was happening behind the scenes to know why these methods work. Flexbox can be very useful when we understand a few of the things it's doing behind the scenes.&lt;/p&gt;

</description>
      <category>design</category>
      <category>css</category>
      <category>flexbox</category>
    </item>
    <item>
      <title>Every Arch Linux User Ever - Satire </title>
      <author>Michael Crump</author>
      <pubDate>Mon, 19 Apr 2021 23:03:32 +0000</pubDate>
      <link>https://dev.to/mbcrump/every-arch-linux-user-ever-satire-18g0</link>
      <guid>https://dev.to/mbcrump/every-arch-linux-user-ever-satire-18g0</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;Do you love Arch Linux? Are you someone who digs setting up Arch from scratch or spending hours getting Wifi to work? If so, then I have a funny video for you!  &lt;/p&gt;

&lt;p&gt;[This is a parody - just meant for a quick laugh]&lt;/p&gt;

&lt;p&gt;Video (3 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a9MzPAY2UP0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;future Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Signs that you're a Senior Software Engineer</title>
      <author>Jordi Enric</author>
      <pubDate>Mon, 19 Apr 2021 22:32:42 +0000</pubDate>
      <link>https://dev.to/jordienr/signs-that-you-re-a-senior-software-engineer-3nj5</link>
      <guid>https://dev.to/jordienr/signs-that-you-re-a-senior-software-engineer-3nj5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@elsbethcat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Beth Macdonald&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/philosopher?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-asked-to-review-and-merge-pull-requests"&gt;
  &lt;/a&gt;
  You're asked to review and merge pull requests
&lt;/h2&gt;

&lt;p&gt;Half your day will be writing comments in PRs.&lt;/p&gt;

&lt;p&gt;Sometimes you get a call from someone to clarify a comment, it becomes a 45-minute session where you open 12 Chrome Tabs, MS Paint and start drawing boxes and arrows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-spending-more-time-in-meetings-than-programming"&gt;
  &lt;/a&gt;
  You're spending more time in meetings than programming
&lt;/h2&gt;

&lt;p&gt;The other half of your day will be participating in meetings. Sometimes you wonder if it's even necessary that you're there. Then a PM has an idea for a new feature, and you're glad you were there to advise them about it before they ignored you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-bald"&gt;
  &lt;/a&gt;
  You're bald
&lt;/h2&gt;

&lt;p&gt;Your body has decided to drop your hair to keep your brain cooled to do all the processing it has to do on a daily basis. You've received a letter from the world's bald association asking you to join their monthly meetings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-asked-for-your-opinion-when-the-team-is-making-design-decisions"&gt;
  &lt;/a&gt;
  You're asked for your opinion when the team is making design decisions
&lt;/h2&gt;

&lt;p&gt;You spend years learning and working hard to become someone who other people look up to. Now you are that person. It means more meetings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-get-called-in-the-middle-of-the-day-randomly-to-give-your-input-or-answer-questions-no-one-else-knows"&gt;
  &lt;/a&gt;
  You get called in the middle of the day randomly to give your input or answer questions no one else knows
&lt;/h2&gt;

&lt;p&gt;They say "It will be 2 minutes" in their message. It becomes a 30-min call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-writing-more-documentation-than-coding"&gt;
  &lt;/a&gt;
  You're writing more documentation than coding
&lt;/h2&gt;

&lt;p&gt;There was a time when you didn't even think where those docs came from. They were there from the beginning. You never stopped to think who wrote that. Now it's on you.&lt;/p&gt;

&lt;p&gt;You realize that no one teaches you how to write docs. Docs are one of the most important aspects of great codebases. Yet nobody really teaches you or prepares you to write good docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-still-feel-like-a-newbie"&gt;
  &lt;/a&gt;
  You still feel like a newbie
&lt;/h2&gt;

&lt;p&gt;Your feeling of knowledge oscillates between "I know everything" and "I don't know shit"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OiGG4azv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzXLj9-VIAc9ivL%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OiGG4azv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzXLj9-VIAc9ivL%3Fformat%3Djpg%26name%3Dmedium" alt="meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-asked-to-do-presentations"&gt;
  &lt;/a&gt;
  You're asked to do presentations
&lt;/h2&gt;

&lt;p&gt;Sometimes you think using Comic Sans is fun because it pisses off the designers.&lt;/p&gt;

&lt;p&gt;You have a stash of memes from the internet to add to your presentations. You only do the presentation to show the memes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-realize-coding-skills-are-not-everything"&gt;
  &lt;/a&gt;
  You realize coding skills are not everything
&lt;/h2&gt;

&lt;p&gt;Helping other teammates, devs or not. Sharing what you know. Trying to create a good environment for everyone to work in. Being a good person. Those things are more important than knowing how to implement an A* Algorithm&lt;/p&gt;

&lt;p&gt;I'm sure I'm missing a lot of things. If you can come up with one please share in the comments 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter-for-more"&gt;
  &lt;/a&gt;
  Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more
&lt;/h2&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Some ideas on how to implement DTOs in Python</title>
      <author>Izabela Kowal</author>
      <pubDate>Mon, 19 Apr 2021 21:54:44 +0000</pubDate>
      <link>https://dev.to/izabelakowal/some-ideas-on-how-to-implement-dtos-in-python-be3</link>
      <guid>https://dev.to/izabelakowal/some-ideas-on-how-to-implement-dtos-in-python-be3</guid>
      <description>&lt;p&gt;Data Transfer Objects are simply data structures typically used to pass data between application layers or between services. &lt;/p&gt;

&lt;p&gt;The simplest form of DTO in Python can be just a dictionary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Potion"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Various"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Recover 20 HP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Issues (among others): mutable, lack of typing, lack of specificity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will use here the &lt;code&gt;Location&lt;/code&gt; class, which might be a model class managed by an ORM in the real-life scenario:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Location(name=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to set the attributes of a DTO more precisely, we can define a separate class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we can use &lt;code&gt;kwargs&lt;/code&gt; and a &lt;code&gt;.get()&lt;/code&gt; method for optional parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Super Potion"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Various"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Recover 70 HP"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well defined DTOs can give us more benefits, such as making it easier to perform serialization or validation. Here are a few examples of using different features of Python standard library and 3rd party packages to create better DTOs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stdlib-solutions"&gt;
  &lt;/a&gt;
  stdlib solutions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dataclasses"&gt;
  &lt;/a&gt;
  dataclasses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;added to Python 3.7 (and later backported to Python 3.6)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;created using a &lt;code&gt;@dataclass&lt;/code&gt; decorator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;by default add automatically generated dunder methods &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt; method takes all fields as method parameters and sets their values to instance attributes with the same names:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;


&lt;span class="c1"&gt;# support both positional and keyword args
&lt;/span&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Old Rod"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Vermillion City"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Fish for low-level Pokemon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;generated &lt;code&gt;__repr__&lt;/code&gt; method returns a string containing class name, field names and field representation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Old Rod'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Vermillion&lt;/span&gt; &lt;span class="n"&gt;City&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Fish for low-level Pokemon'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;generated &lt;code&gt;__eq__&lt;/code&gt; method compares the class tuples containing field values of the current and the other instance
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;itemdto2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Old Rod"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Vermillion City"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Fish for low-level Pokemon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;itemdto2&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;__eq__&lt;/code&gt; method works the same as if we would explicitly declare it this way:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NotImplemented&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;it might be a good idea to make DTO instances immutable. It is possible by setting the argument &lt;code&gt;frozen&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;not iterable
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itemdto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...:&lt;/span&gt; 
&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'ItemDto'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on dataclasses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.python.org/3/library/dataclasses.html#module-dataclasses"&gt;https://docs.python.org/3/library/dataclasses.html#module-dataclasses&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-data-classes/"&gt;https://realpython.com/python-data-classes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#namedtuples"&gt;
  &lt;/a&gt;
  NamedTuples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NamedTuple&lt;/code&gt; is a subclass of regular tuple&lt;/li&gt;
&lt;li&gt;introduced in Python 3.0 as a factory method in the collections module:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;ItemDto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ItemDto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;added to Python 3.5 as a typed version in typed module and later enhanced with variable annotations syntax in Python 3.6:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;


&lt;span class="c1"&gt;# supports both positional and keyword args
&lt;/span&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"X Speed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Temporarily raise Speed in battle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Celadon Dept. Store"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'X Speed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Temporarily raise Speed in battle'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Celadon Dept. Store'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt; handled&lt;/li&gt;
&lt;li&gt;iterable
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itemdto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...:&lt;/span&gt; 
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;Speed&lt;/span&gt;
&lt;span class="n"&gt;Temporarily&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Speed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;battle&lt;/span&gt;
&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Celadon&lt;/span&gt; &lt;span class="n"&gt;Dept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;disadvantage: fields with a default value must come after any fields without a default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on NamedTuples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple"&gt;https://docs.python.org/3/library/typing.html#typing.NamedTuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#typeddicts"&gt;
  &lt;/a&gt;
  TypedDicts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;available since Python 3.8:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypedDict&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypedDict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;


&lt;span class="n"&gt;itemdto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Escape Rope,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Various"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Teleport to last visited Pokemon Center"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemdto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Escape Rope,'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'location'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Various&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Teleport to last visited Pokemon Center'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;mutable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt; handled&lt;/li&gt;
&lt;li&gt;iterable in &lt;em&gt;dict&lt;/em&gt; kind of way&lt;/li&gt;
&lt;li&gt;don't support default values&lt;/li&gt;
&lt;li&gt;can provide typing for existing dictionaries&lt;/li&gt;
&lt;li&gt;since those are still dictionaries, after all, they can be directly serialized to JSON data structures &lt;em&gt;(although in this example, we should provide a custom encoder for the &lt;code&gt;Location&lt;/code&gt; class).&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on TypedDicts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0589/"&gt;https://www.python.org/dev/peps/pep-0589/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3rd-party-packages"&gt;
  &lt;/a&gt;
  3rd party packages
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#attrs"&gt;
  &lt;/a&gt;
  attrs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a dependency for pytest, so there's a chance you might already have it in your project&lt;/li&gt;
&lt;li&gt;similar to the dataclasses, in fact, the attrs library was the basis for designing the dataclasses:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;attr&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# also, the dataclasses syntax!
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;attrs provide some extra functionality on top of those that the dataclasses offer, like runtime validation and memory optimization (slotted classes).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of runtime validation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"Water"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"Electric"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"Poison"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# ...
&lt;/span&gt;            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Charmander"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Charmander'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Fire'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Charmander"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Gyarados"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'type'&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Fire'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Water'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Electric'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Poison'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="s"&gt;'Gyarados'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whether to choose attrs or dataclasses - it ultimately depends on your specific use case and if you are able to use 3rd party packages in your project. &lt;/p&gt;

&lt;p&gt;More on attrs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.attrs.org/en/stable/"&gt;https://www.attrs.org/en/stable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.revsys.com/tidbits/dataclasses-and-attrs-when-and-why/"&gt;here's a great comparison of dataclasses and attrs&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pydantic"&gt;
  &lt;/a&gt;
  pydantic
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FastAPI uses pydantic for schema definition and data validation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pydantic enforces type hints at runtime&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the recommended way for creating pydantic models is to subclass &lt;code&gt;pydantic.BaseModel&lt;/code&gt;, therefore all models inherit some methods:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;allow_mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="c1"&gt;# enforced keyword arguments in case of BaseModel subclass
&lt;/span&gt;&lt;span class="n"&gt;pokemondto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;like attrs, pydantic also supports vanilla python dataclasses:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pydantic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataclasses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="c1"&gt;# in this case positional args are allowed
&lt;/span&gt;&lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;enables (recursive) data validation:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fire"&lt;/span&gt;
    &lt;span class="n"&gt;water&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Water"&lt;/span&gt;
    &lt;span class="n"&gt;electric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Electric"&lt;/span&gt;
    &lt;span class="n"&gt;poison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Poison"&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pydantic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeEnum&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;allow_mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Charizard'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Fire'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Charmeleon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;validation&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;enumeration&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;permitted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Fire'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Water'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Electric'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Poison'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;type_error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;enum_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Fire'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;water&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Water'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;electric&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Electric'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poison&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Poison'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;enables JSON (de)serialization:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PokemonDto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;'{"name": "Charizard", "type": "Fire"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on pydantic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;https://pydantic-docs.helpmanual.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: recently, pydantic seems to be having some problems related to the postponed evaluation of annotations - you can check a Github issue &lt;a href="https://github.com/samuelcolvin/pydantic/issues/2678"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Your choice on how to implement the DTOs depend on multiple circumstances - whether you need, among others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;immutability&lt;/li&gt;
&lt;li&gt;default values support&lt;/li&gt;
&lt;li&gt;iterability&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;li&gt;runtime type checking&lt;/li&gt;
&lt;li&gt;performance optimization&lt;/li&gt;
&lt;li&gt;other, more advanced configurability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Post initially inspired by &lt;a href="https://www.reddit.com/r/Python/comments/ecw5gq/dtos_in_python/"&gt;this&lt;/a&gt; Reddit thread.&lt;/p&gt;

</description>
      <category>python</category>
      <category>5days5blogposts</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>12 Chrome Extensions I Actually Found Useful</title>
      <author>Seif El Deen Khaled</author>
      <pubDate>Mon, 19 Apr 2021 21:40:15 +0000</pubDate>
      <link>https://dev.to/seifeldeen92/12-chrome-extensions-i-actually-found-useful-5d5n</link>
      <guid>https://dev.to/seifeldeen92/12-chrome-extensions-i-actually-found-useful-5d5n</guid>
      <description>&lt;p&gt;Hello devs, I'm Seif. I have been a frontend developer for well over 5 years now and throughout my journey I came across a lot of chrome extensions that claimes to be useful but they are actually &lt;strong&gt;not&lt;/strong&gt; or you won't use for your day-to-day tasks. &lt;/p&gt;

&lt;p&gt;In this article, I'll be sharing &lt;strong&gt;12 of my favorite chrome extensions&lt;/strong&gt; that I actually use and find very helpful to keep me productive, not waste time and help me with my development as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grepper"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/grepper/amaaokahonnfjjemodnpmeenfpnnbkco"&gt;Grepper&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Grepper is my favorite extension of them all. Whenever I google search for a problem all the correct code answers come up at the top of my google search. It's incredible. It's a must-have.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EARQIY2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7q8169avj9eud66m4ro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EARQIY2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7q8169avj9eud66m4ro.png" alt="grepper example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amino-live-css-editor"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/amino-live-css-editor/pbcpfbcibpcbfbmddogfhcijfpboeaaf"&gt;Amino Live CSS Editor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Animo is a step ahead of CSSViewer. It allows you to write custom CSS for &lt;strong&gt;ANY&lt;/strong&gt; website and see your changes in real-time. You can customize everything colors, fonts, layouts. You name it. Incredible!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWqJ5va7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq5pckmzwz8bm0cp3tuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWqJ5va7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq5pckmzwz8bm0cp3tuj.png" alt="Amino"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#octotree"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc"&gt;Octotree&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension is exactly like how it is marketed! It is &lt;strong&gt;GitHub on steroids&lt;/strong&gt;. Helps you with code review and folder navigation in a fast, efficient, and customizable manner. It adds a sidebar on your left and surprisingly it integrates seamlessly with Github. I mainly use it for project navigation, to be honest. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OW6st5Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y2bmo40hi99oks7tjp9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OW6st5Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y2bmo40hi99oks7tjp9.jpeg" alt="Octotree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talend-api-tester"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/talend-api-tester-free-ed/aejoelaoggembcahagimdiliamlcdmfm?hl=en"&gt;Talend API Tester&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Just like Postman, it's used to check communication with REST, HTTP, and SOAP APIs. Since Postman extension is deprecated this is a very nice alternative to Postman if you don't want to install Postman Desktop app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXy7FuTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8blvwy75ilwcpsxaslds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXy7FuTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8blvwy75ilwcpsxaslds.png" alt="Talend API Tester"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-viewer"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"&gt;JSON Viewer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The only reason I use JSON Viewer over JSON Formatter is because of the customization capabilities that JSON Viewer offers from themes, fonts, font size, etc. you can customize your JSON however you want.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hF6AbKEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbkjozxicyj4xp3nvyxo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF6AbKEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbkjozxicyj4xp3nvyxo.jpeg" alt="JSON Viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-dev-tools"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl"&gt;React Dev Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a React developer, you must have this extension. It allows you to inspect the React component hierarchies in the Chrome Developer Tools. my favorite two features are &lt;em&gt;Highlight updates when components render&lt;/em&gt; in the Components tab and &lt;em&gt;Profiler&lt;/em&gt; for performance monitoring.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYx5-0Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tt421ic412ps6n0s0jf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYx5-0Up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tt421ic412ps6n0s0jf.jpeg" alt="React Dev Tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-dev-tools"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd"&gt;Redux Dev Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Similar to React Dev Tools. If you use Redux then &lt;strong&gt;Redux Dev Tools&lt;/strong&gt; is a must-have. It helps you debug your application's state changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yue41alL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8txgs0q2pczapgfehd6e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yue41alL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8txgs0q2pczapgfehd6e.jpeg" alt="Redux Dev Tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorzilla"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?"&gt;ColorZilla&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;ColorZilla is very useful If you want to read a color code from any website or if you want to generate a quick gradient color. you can do that easily in ColorZilla. ColorZilla has a lot more capabilities like Color History, Keyboard shortcuts, etc. Awesome tool! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lKFDF3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2zpkmgg3zpj9a1zopy5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lKFDF3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2zpkmgg3zpj9a1zopy5.jpeg" alt="ColorZilla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lastpass"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd"&gt;LastPass&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;LastPass is a password manager, saves your passwords and gives you secure access from any computer and mobile device. I love it since I have a memory of a fish this is a lifesaver! and it has a Desktop app that integrates with the extension. Highly recommended.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTVwtjS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqfj9g1robbk3kkv5flk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTVwtjS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqfj9g1robbk3kkv5flk.jpeg" alt="LastPass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grammarly"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen?hl=en"&gt;Grammarly&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Grammarly helps you eliminate writing errors and spelling mistakes in real-time in nearly every platform you'll find yourself writing in. Grammarly offers you specific suggestions to help you improve your writing overall. If you struggle with your grammar (like I do), this is a very useful tool to have.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zSTbCqVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/besw840b4dh4hjljz9ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zSTbCqVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/besw840b4dh4hjljz9ca.png" alt="Grammarly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#momentum"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=en"&gt;Momentum&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Momentum replaces your new tab page with a personal dashboard featuring to-do, images, and inspirational quotes. It inspires you to be more productive. I find it way better than your average bland new tab page!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVTUpwIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j67jwa7zdyxkv8yvnaov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVTUpwIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j67jwa7zdyxkv8yvnaov.png" alt="Momentum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toggl"&gt;
  &lt;/a&gt;
  &lt;a href="https://chrome.google.com/webstore/detail/toggl-track-productivity/oejgccbfbmkkpaidnkphaiaecficdnfn"&gt;Toggl&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Toggl is a time tracker that adds a timer into any web tool and allows quick real-time productivity tracking with all the data stored on your Toggl account on the cloud. very useful if you want to keep track of the time you spend on certain activities or tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5nt7byJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/968p8qcwl9yg2x3jbfl6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5nt7byJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/968p8qcwl9yg2x3jbfl6.jpeg" alt="Toggl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the end of my list. I hope you enjoyed this article. I'm always open to feedback so let's share thoughts in the comment section. &lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/seifeldeen92"&gt;@seifeldeen92&lt;/a&gt; and Instagram &lt;a href="https://www.instagram.com/sman92"&gt;@sman92&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Golang, Vuejs, Tailwinds classified ads models and database</title>
      <author>Bajro</author>
      <pubDate>Mon, 19 Apr 2021 21:24:20 +0000</pubDate>
      <link>https://dev.to/bajro17/golang-vuejs-tailwinds-classified-ads-models-and-database-25ib</link>
      <guid>https://dev.to/bajro17/golang-vuejs-tailwinds-classified-ads-models-and-database-25ib</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-back"&gt;
  &lt;/a&gt;
  Welcome back
&lt;/h2&gt;

&lt;p&gt;I'm sorry because I was not able to continue my series earlier. I was also thinking of the best way how to make it. &lt;/p&gt;

&lt;p&gt;Let's start with a simple Image struct it will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// Image struct
type Image struct {
    gorm.Model
    URL       string `gorm:"not null" json:"url"`
        ProductID uint `gorm:"not null" json:"product_id"`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I need to mention each of the structs I made will be saved in the file with the same name, the previous struct is in image.go and all will exist in the model folder.&lt;/p&gt;

&lt;p&gt;For Image struct, we can also without gorm.Model but I decide to put it in every model.&lt;br&gt;
We need only the URL field because we will just save our image and URL to it.&lt;/p&gt;

&lt;p&gt;Our next model will be the product model, it is the most complicated and probably this is not a final form I guess I will add few more fields to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// Product struct
type Product struct {
    gorm.Model
    Title           string `gorm:"not null" json:"title"`
    Description     string `gorm:"not null" json:"description"`
    Quantity    uint `gorm:"not null" json:"quantity"`
    Price           int `gorm:"not null" json:"price"`
    Used        bool `gorm:"not null" json:"Used"`
    Sold        bool `gorm:"default:false" json:"sold"`
    UserID      uint `gorm:"not null" json:"user_id"`
    CategoryID      uint `gorm:"not null" json:"category_id"`
    Images      []Image
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here Title, Description, Quantity, Price I guess you already know for what it will be used. The used field is to tell if the product is 'used' or 'new'.&lt;br&gt;
The sold field we use to know if the item is sold we can also do soft delete and avoid this field but to make it clear I will use it.&lt;br&gt;
UserID and CategoryID fields are used to refer to the id of the user and category id gorm know automatically what we want and it makes reference for us.&lt;/p&gt;

&lt;p&gt;I make also some changes in the User struct and now it looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// User struct
type User struct {
    gorm.Model
    Username    string `gorm:"unique_index;not null" json:"username"`
    Email       string `gorm:"unique_index;not null" json:"email"`
    Password    string `gorm:"not null" json:"password"`
    FirstName   string `gorm:"null" json:"first_name"`
    LastName    string `gorm:"null" json:"last_name"`
    CityID      uint `gorm:"null" json:"city_id"`
    PostalCode  string `gorm:"null" json:"postal_code"`
    Address     string `gorm:"null" json:"address"`
    IsShop      bool `gorm:"default:false" json:"is_shop"`
    IsActive    bool `gorm:"default:false" json:"is_active"`
    Image       string `gorm:"null" json:"image"`
    Points      int `gorm:"default:0" json:"points"`
    Products    []Product

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the fields are self-explanatory except IsShop, Image, Points.&lt;br&gt;
IsShop field will be used to check if a user buys a premium account only premium accounts can open shop and extra features.&lt;br&gt;
The image doesn't refer to Image struct because the user needs only one image and we will just save the URL to the user table.&lt;br&gt;
Points are just some points that user will earn by buying and selling stuff and with it get some discounts.&lt;/p&gt;

&lt;p&gt;We made also a category struct all of our products will belong to one of them. The category is self-referencing all is described in gorm documentation we will later check if parent_id is null and see the children categories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// Category struct
type Category struct {
    gorm.Model
    Name        string `gorm:"not null" json:"Name"`
    Icon        string `gorm:"null" json:"Icon"`
    Price       uint `gorm:"default:0" json:"Price"`
    Expire      uint `gorm:"default:30" json:"Expire"`
    ParentID    *uint `gorm:"null" json:"parent_id"`
    Parent      []Category `gorm:"foreignkey:ParentID"`
        Products    []Product 

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the other structs we made city and state. &lt;br&gt;
I will just paste them here because they are not something special.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// State struct
type State struct {
    gorm.Model
    Name        uint `gorm:"not null" json:"Name"`
    Cities      []City
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package model

import "gorm.io/gorm"

// City struct
type City struct {
    gorm.Model
    Name       string `gorm:"not null" json:"Name"`
    StateID  uint  `gorm:"not null" json:"StateID"`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, don't forget to change in database/connect.go line 28 from&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB.AutoMigrate(&amp;amp;model.Product{}, &amp;amp;model.User{})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB.AutoMigrate(&amp;amp;model.Category{},&amp;amp;model.Product{}, &amp;amp;model.User{}, &amp;amp;model.State{},&amp;amp;model.City{},&amp;amp;model.Image{})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have any question or suggestions feel free to write them in the comments also my English is a little broken if there are some grammar mistakes please tell me so I can fix them.&lt;br&gt;
I will write some logic in the next tutorial and maybe start with VueJS and Tailwind after this.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tailwindcss</category>
      <category>vue</category>
      <category>shop</category>
    </item>
    <item>
      <title>Everyone writes a blog</title>
      <author>Artur</author>
      <pubDate>Mon, 19 Apr 2021 21:07:23 +0000</pubDate>
      <link>https://dev.to/kubacky/everyone-writes-a-blog-3b2e</link>
      <guid>https://dev.to/kubacky/everyone-writes-a-blog-3b2e</guid>
      <description>&lt;p&gt;There are more blogs than you can imagine. About programming, about cooking, about cars, about travel. Give me some random topic and I'll find at least five blogs on it. People write about everything and nothing, several posts a day or one a month, with or without meaning, more or less, but they write. Since practically all topics in practically all fields are exhausted, why do I also decide to write another one among a million others, a blog about programming? &lt;/p&gt;

&lt;p&gt;My goal for this year is to become a Ruby on Rails programmer, with this blog I want to document my progress with learning Rails. &lt;/p&gt;

&lt;p&gt;What's so special about it? In the learning itself probably nothing, while what I do outside of learning I think is not an everyday occurrence. I'm a construction worker, I'm a paving and laying pipes every day, I work in trenches several meters long and with excavators several tons long (we dig those bitcoins, but we haven't found anything yet). &lt;/p&gt;

&lt;p&gt;Will working in IT be something new for me? No. In Poland I worked for a few years, mainly as an administrator and as a freelancer I managed to write a few smaller or bigger applications, mainly in php + angular stack. So I have some experience as a programmer, but I have never worked in a team. I have an irresistible impression that I am stuck in so-called noobville from the beginning. I have superficial knowledge in a few areas, but I'm an expert in none. &lt;/p&gt;

&lt;p&gt;The first post is just a hello and it won't be anything special, starting tomorrow I'll be adding more and more technical content. &lt;/p&gt;

&lt;p&gt;PS. Cover photo: meet also Luna, who will accompany me (and you) in learning Rails. She probably already knows more than I do&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>How to add unique meta tags in Django?</title>
      <author>Magda Rosłaniec</author>
      <pubDate>Mon, 19 Apr 2021 21:03:48 +0000</pubDate>
      <link>https://dev.to/makneta/how-to-add-unique-meta-tags-in-django-328i</link>
      <guid>https://dev.to/makneta/how-to-add-unique-meta-tags-in-django-328i</guid>
      <description>&lt;p&gt;&lt;em&gt;Today I'm going to continue the subject of meta tags.&lt;/em&gt; &lt;em&gt;I'll be talking about two things:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. what meta tags we need to create Twitter Cards&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. how to make meta tags unique for each article in Django&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my last article, I was writing about adding Open Graph to our meta tags to create Social Media Cards. &lt;a href="http://makneta.herokuapp.com/post/what-are-metadata-and-meta-tags/"&gt;http://makneta.herokuapp.com/post/what-are-metadata-and-meta-tags/&lt;/a&gt; But to make sure that it will work on Twitter too, we should add a few more meta tags. &lt;/p&gt;

&lt;p&gt;The tags that are required are &lt;strong&gt;twitter:card&lt;/strong&gt; and &lt;strong&gt;twitter:title&lt;/strong&gt; (or &lt;strong&gt;og:title&lt;/strong&gt;).&lt;br&gt;
If we want to display a big image with a title and description, we should set the content of &lt;strong&gt;twitter:card&lt;/strong&gt; to &lt;strong&gt;“summary_large_image”&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta name="twitter:card" content="summary_large_image" /&amp;gt;

&amp;lt;meta name="twitter:title" content="Your title" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we set content of twitter:card to “summary”, we will display the thumbnail image. &lt;br&gt;
&lt;/p&gt;

&lt;p&gt;We can also add twitter:creator with our Twitter handle in content and twitter:site with the site’s Twitter handle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta name="twitter:creator" content="@your_handle" /&amp;gt;

&amp;lt;meta name="twitter:site" content="@your_site_handle" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those two are not required but specific for Twitter cards.&lt;/p&gt;

&lt;p&gt;If we have Open Graph tags such as og:description, og:title, og:image, og:url, we don’t have to add them separately for Twitter. &lt;/p&gt;

&lt;p&gt;If we want to make our meta tags work for SEO purposes, each article on our website should have a unique title, description, image and URL. &lt;/p&gt;

&lt;p&gt;Because I learn the best in practice (and because I had wanted to have nice Social Media cards for ages), now it’s time to add open graph tags and Twitter tags to my Django blog. &lt;/p&gt;

&lt;p&gt;First, let’s look at my Post model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Post(models.Model):

   author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
   title = models.CharField(max_length=250)
   slug = models.SlugField(max_length=250, unique=True, default='', editable=False)
   header_image = models.ImageField(upload_to='blog', blank=True, null=True)
   image_alt = models.CharField(max_length=250, default="cover image", null=True)
   text = RichTextUploadingField(max_length=50000, blank=True, null=True)
   summary = models.TextField(blank=True, null=True)

   created_on = models.DateTimeField(auto_now_add=True)
   updated = models.DateTimeField(auto_now=True)
   status = models.IntegerField(choices=STATUS, default=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’m showing the Post model because in order to create unique cards for each blog post we need to use fields from the Post model. &lt;/p&gt;

&lt;p&gt;In my meta tags, I’m using such fields as title, slug, header_image and summary. For most of them, it’s enough to use&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;{{object.field_name}}&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{object.title}}&amp;lt;/title&amp;gt;
&amp;lt;meta property="og:title" content="{{object.title}}"&amp;gt;
&amp;lt;meta property="og:url" content="http://yourwebsite.com/{{object.slug}}" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because my header_image field, as well as the summary field, are not mandatory, in order to avoid crashing the website I’m using some conditions.&lt;br&gt;
If there is a summary, it should be used by meta tag description but if there isn’t a post summary (truncated to 160characters), it should take 160 characters from the blog article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property="og:description" content="{% if object.summary %}{{object.summary|striptags|truncatechars:160}}{% else %}
   {{object.text|safe|striptags|truncatechars:160}}{% endif %}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don’t always add header images, sometimes I display my “universal” picture and I need to add the URL to an appropriate pic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property="og:image" content="{% if post.header_image %}http://yourwebsite.com{{ post.header_image.url }}
{% else %}http://yourwebsite.com{% static 'images/home-office.jpg' %}{% endif %}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all those tags together&lt;br&gt;
We can forget about twitter:card tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta name="twitter:card" content="summary_large_image" /&amp;gt;
&amp;lt;title&amp;gt;{{object.title}}&amp;lt;/title&amp;gt;
&amp;lt;meta property="og:title" content="{{object.title}}"&amp;gt;
&amp;lt;meta property="og:url" content="http://yourwebsite.com/{{object.slug}}" &amp;gt;

&amp;lt;meta property="og:description" content="{% if object.summary %}{{object.summary|striptags|truncatechars:160}}{% else %}
   {{object.text|safe|striptags|truncatechars:160}}{% endif %}"&amp;gt;

 &amp;lt;meta property="og:image" content="{% if post.header_image %}http://yourwebsite.com{{ post.header_image.url }}
   {% else %}http://yourwebsite.com{% static 'images/home-office.jpg' %}{% endif %}"&amp;gt;

&amp;lt;meta name="twitter:card" content="summary_large_image" /&amp;gt;
&amp;lt;title&amp;gt;{{object.title}}&amp;lt;/title&amp;gt;

&amp;lt;meta name="twitter:creator" content="@your_handle" /&amp;gt;

&amp;lt;meta name="twitter:site" content="@your_site_handle" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more thing. If we leave meta tags like here, the description, title and image won’t work on the home page or the about page. &lt;br&gt;
That’s why we need to wrap it in a condition like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% if object.slug in request.path %}
&amp;lt;meta property="og:title" content="{{object.title}}"&amp;gt;
&amp;lt;meta property="og:url" content="http://yourwebsite.com/{{object.slug}}" &amp;gt;

&amp;lt;meta property="og:description" content="{% if object.summary %}{{object.summary|striptags|truncatechars:160}}{% else %}
   {{object.text|safe|striptags|truncatechars:160}}{% endif %}"&amp;gt;

 &amp;lt;meta property="og:image" content="{% if post.header_image %}{{ post.header_image.url }}
   {% else %}http://yourwebsite.com{% static 'images/home-office.jpg' %}{% endif %}"&amp;gt;

&amp;lt;meta name="twitter:card" content="summary_large_image" /&amp;gt;
&amp;lt;title&amp;gt;{{object.title}}&amp;lt;/title&amp;gt;
{% else %}
&amp;lt;title&amp;gt;Your title&amp;lt;/title&amp;gt;
   &amp;lt;meta property="og:title" content="Your title"&amp;gt;
   &amp;lt;meta property="og:description" content="Description up to 160 characters"&amp;gt;
   &amp;lt;meta property="og:image" content="http://image-url.png"&amp;gt;
   &amp;lt;meta property="og:url" content="http://yourwebsite.com" &amp;gt;

   &amp;lt;meta name="twitter:card" content="summary_large_image" /&amp;gt;   

{% endif %}
&amp;lt;meta name="twtter:site" content="@website_handle" /&amp;gt;
&amp;lt;meta name="twtter:creator" content="@your_handle" /&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way my Twitter card from the previous post looks like that:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKWhYn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2cm1jtxd95phv6kso1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKWhYn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2cm1jtxd95phv6kso1z.png" alt="twitter card with laptop on a desk"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>django</category>
    </item>
    <item>
      <title>CSS Inheritance in more detail</title>
      <author>Mehmed Duhovic</author>
      <pubDate>Mon, 19 Apr 2021 20:36:48 +0000</pubDate>
      <link>https://dev.to/bracikaa/css-inheritance-in-more-detail-2ak</link>
      <guid>https://dev.to/bracikaa/css-inheritance-in-more-detail-2ak</guid>
      <description>&lt;p&gt;Let's take a look at the pen in the last article &lt;a href="https://dev.to/bracikaa/how-do-css-cascades-work-d44"&gt;here&lt;/a&gt;. We notice that we set the &lt;code&gt;font-family&lt;/code&gt;  property to the Google Font we imported in our stylesheet, and we set it using the &lt;code&gt; *&lt;/code&gt; (Asterix) selector, which basically selects all elements in our stylesheet. What would happen if instead of the &lt;code&gt; *&lt;/code&gt; selector, we would use the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; selector?&lt;/p&gt;

&lt;p&gt;Let's look at the result:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Lato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* this is a property that will be applied to all the child elements in the DOM */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1R1nmim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zcxxfof47ga3hc8hhz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1R1nmim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zcxxfof47ga3hc8hhz0.png" alt="List of my favorite Pokemon"&gt;&lt;/a&gt;List of my favorite Pokemon&lt;/p&gt;

&lt;p&gt;Nothing changes! Although the procedure in which the &lt;code&gt;font-family&lt;/code&gt; property is applied to the document is different when using &lt;code&gt; *&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;, we notice something more interesting. All of our ancestor elements within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; will inherit this font; there is no need to apply it explicitly to each child element inside our stylesheet.&lt;/p&gt;

&lt;p&gt;The image below shows how properties are passed down through the DOM to their child elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0FsM87x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thedukh.com/wp-content/uploads/2021/04/0957921829_sp0957921829-CHP-3-SECT-3_image01.jpeg%3Fw%3D768%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0FsM87x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thedukh.com/wp-content/uploads/2021/04/0957921829_sp0957921829-CHP-3-SECT-3_image01.jpeg%3Fw%3D768%26ssl%3D1" alt="Inherited properties passing down the DOM"&gt;&lt;/a&gt;Inherited properties passing down the DOM&lt;/p&gt;

&lt;p&gt;An important notion to keep in mind though is that not all properties can be inherited. Some of the most common properties that can be inheritable are &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;font&lt;/code&gt;, &lt;code&gt;font-family&lt;/code&gt;, &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;font-weight&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt;, &lt;code&gt;letter-spacing&lt;/code&gt;, &lt;code&gt;text-align&lt;/code&gt;, &lt;code&gt;white-space&lt;/code&gt;, and more text-related properties. List properties also inherit, and some of the most common inheritable list properties are &lt;code&gt;list-style&lt;/code&gt;, &lt;code&gt;list-style-type&lt;/code&gt;, &lt;code&gt;list-style-position&lt;/code&gt;, and &lt;code&gt;list-style-image&lt;/code&gt;. You can see a full list &lt;a href="https://gist.github.com/dcneiner/1137601"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-the-special-values"&gt;
  &lt;/a&gt;
  Using the special values
&lt;/h1&gt;

&lt;p&gt;Inheritance can be manipulated further using two special values: &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;inherit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Inherit&lt;/code&gt; can force inheritance in places where the cascade is preventing it. This will cause the element to inherit any value from the parent element. How we can test this? If you remember we set the text color of our anchor to be black, and we removed the underline which is the original style. What if we move those two rulesets to the parent element (&lt;code&gt;#main-list&lt;/code&gt;). We will break our styles!&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#main-list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we moved these two lines here */&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#main-list&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*color: black;
  text-decoration: none; */&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSaX83I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thedukh.com/wp-content/uploads/2021/04/myfavpokemon.png%3Fresize%3D1024%252C196%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSaX83I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thedukh.com/wp-content/uploads/2021/04/myfavpokemon.png%3Fresize%3D1024%252C196%26ssl%3D1" alt="Pokemon List"&gt;&lt;/a&gt;Pokemon list. Notice how the CSS ‘broke’ (the anchor links have the default styling)&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;In order to inherit the rulesets for &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;text-decoration&lt;/code&gt; from our parent element, we will use the value of &lt;code&gt;inherit&lt;/code&gt; for both properties. This is beneficial because now we can edit the parent ruleset (for example using JavaScript) and the anchor should apply these newly changed rules. We can also use the &lt;code&gt;inherit&lt;/code&gt; keyword to force the inheritance of a property which is not normally inherited, such as border or padding. With the changes below the script should look as before (having black text and no underline decoration):&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#main-list&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;&lt;code&gt;Initial&lt;/code&gt; keyword on the other hand is used when we already have styles applied that we want to undo. Every CSS property by default, has an initial value, and by using the &lt;code&gt;initial&lt;/code&gt; keyword we actually reset the rule to that default value. (a warning if you want to use initial in your styles though, it is not supported in IE or Opera Mini).&lt;/p&gt;





&lt;p&gt;In the listing below we have the CSS in which the color has been set to red inside the anchor, but inside the rare class we set the color to initial. Because the color property is by default black (&lt;code&gt;color: black&lt;/code&gt;) , the rare element will be black.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#main-list&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#main-list&lt;/span&gt; &lt;span class="nc"&gt;.rare&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;salmon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3cSQawy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thedukh.com/wp-content/uploads/2021/04/initial.png%3Fresize%3D1024%252C196%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3cSQawy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thedukh.com/wp-content/uploads/2021/04/initial.png%3Fresize%3D1024%252C196%26ssl%3D1" alt="Pokemon List"&gt;&lt;/a&gt;Result of using the listing above&lt;/p&gt;

&lt;p&gt;And that is it regarding inheritance. As you probably noticed the concept is tightly coupled with the idea behind cascades and as a matter of fact many starters kinda mix these two concepts up! Hope that this article cleared a bit of the fog regarding inheritance and cascades!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h1&gt;

&lt;p&gt;Here we have our codepen for this article:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/brachika/embed/bGgKLvY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you liked this article maybe you'll like more stuff on &lt;a href="https://thedukh.com"&gt;thedukh.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Mantener activo tu bot de Discord.js en Replit</title>
      <author>Alexander G</author>
      <pubDate>Mon, 19 Apr 2021 20:26:34 +0000</pubDate>
      <link>https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-js-en-replit-1mgi</link>
      <guid>https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-js-en-replit-1mgi</guid>
      <description>&lt;p&gt;Hace un tiempo, hice un post sobre &lt;a href="https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-py-en-replit-1o29"&gt;Como mantener activo tu bot de discord.py en replit&lt;/a&gt;, hoy toca uno pero para discord.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Qué fue lo que hice?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este método es muy parecido al de flask (de hecho el método de flask me dio esta idea), solo que como sabrán, flask simplemente no esta en JavaScript, pero como sabemos existe Express, que en este caso , haría lo mismo que flask, crear un servidor, luego con una página llamada &lt;a href="https://uptimerobot.com/"&gt;UpTimeRobot&lt;/a&gt; configurar la dirección creada por Express, para que  UptimeRobot vea constantemente la página, y así está activo tu bot las 24hrs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cabe destacar que debes tener una cuenta en &lt;a href="//replit.com"&gt;replit&lt;/a&gt;, y tener tu código del bot en un repls, en este post no te enseñaré a crear un bot, solo a mantenerlo activo, pero a futuro espero hacer un post sobre, crear bot en discord.py usar replit, instalar paquetes y demás.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sin más rodeos, comencemos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cabe destacar, que domino más python, por lo tanto lo que hice en este caso fue, en el mismo archivo principal de tu bot (comúnmente, main.js), importamos express (no lo instalamos porque el replit lo instala por sí solo) y iniciamos Express&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const app = express()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego Creamos la función como tal, para crear nuestro servidor y que UptimeRobot haga lo suyo,&lt;br&gt;
en cualquier parte de nuestro archivo principal, ponemos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//EXPRESS



app.get('/', (req,res)=&amp;gt;{
  res.end("My bot is online")
})

function live(){
  app.listen(3000, function(){
  console.log("bot is online")
})}
live();

//END EXPRESS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego en nuestro archivo principal, en la parte final de nuestro código, justo antes del TOKEN, colocamos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;live()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si ejecutamos nuestro bot encontraremos, con que ahora hay una ventana en el replit, que contiene una página o algo así, simplemente con el texto: Bot is online, si buscamos, encontramos un dirección, un enlace, ese enlace lo usaremos en UptimerRobot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imagen uno&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3rs4rVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh7gvay42080u8lk6etz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3rs4rVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh7gvay42080u8lk6etz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos ahora vamos a &lt;a href="https://uptimerobot.com/"&gt;UpTimeRobot&lt;/a&gt;, si no tienes una cuenta, crearte una es simple, luego de tener una cuenta nos vamos a la parte de monitores &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94CwV0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drsg65l3qvy1ad1p6sq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94CwV0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drsg65l3qvy1ad1p6sq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aquí tengo uno porque ya he usado el servicio, a ustedes no les debe salir nada&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luego le damos a Add new Monitor,y seleccionamos las siguientes opciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;En Monitor Type: HTTP(s)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En Friendly Name: El nombre de tu bot o el que quieras&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En URL (or IP): Aquí deben poner la URL que les da replit, (Imagen 1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La constancia la dejamos igual en 5 minutos, y si gustan activan las notificaciones &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviando el Friendly Name y la URL(La url es importante que pongas la que te da replit correctamente) les debería quedar así:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwCCPRrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w2ke9gmqe2nicjh9x3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwCCPRrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w2ke9gmqe2nicjh9x3e.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luego de darle Create Monitor, nuestro monitor ya debe estar listo, ahora la próxima vez que ejecutemos nuestro bot, el monitor estará realizando peticiones GETT y lo mantendrán activo.&lt;/p&gt;

&lt;p&gt;Como dije en el post de &lt;a href="https://dev.to/alexanderg/mantener-activo-tu-bot-de-discord-py-en-replit-1o29"&gt;discord.py&lt;/a&gt; existe Heroku y otros servicios hechos específicamente para esta ocasión, pero no está de más que sepas estos métodos &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Espero que el post se les haga fácil de seguir, si tienen una duda, si no les funciona o alguna cosa, puedes decírmelo por los comentarios&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>discordjs</category>
      <category>replit</category>
      <category>express</category>
      <category>discordbot</category>
    </item>
  </channel>
</rss>
