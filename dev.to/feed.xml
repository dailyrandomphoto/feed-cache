<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Unicode mood selector (star rating system)</title>
      <author>Andrew Bone</author>
      <pubDate>Thu, 08 Jul 2021 15:56:45 +0000</pubDate>
      <link>https://dev.to/link2twenty/unicode-mood-selector-star-rating-system-8g</link>
      <guid>https://dev.to/link2twenty/unicode-mood-selector-star-rating-system-8g</guid>
      <description>&lt;p&gt;There have been several posts written this week about star ratings, as part of the "Star (rating) Wars". I've written a couple of articles first how to make an accessible star rating system and then a follow up about how to make it a little more interesting with animations.&lt;/p&gt;

&lt;p&gt;In this article I'll be doing something a little different. I'll take the lessons we've learnt from the past two articles and making an animated mood selector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-star-rating-wars"&gt;
  &lt;/a&gt;
  the Star (rating) wars
&lt;/h2&gt;

&lt;p&gt;If you're interested, and I think you will be, there are a few posts from different authors worth reading. Check out posts by &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/lapstjup"&gt;@lapstjup&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/madsstoumann"&gt;@madsstoumann&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/siddharthshyniben"&gt;@siddharthshyniben&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/lionelrowe"&gt;@lionelrowe&lt;/a&gt;
.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I'm going to briefly touch on each part of the component and how it's built but I won't be going into too much depth, that being said if you have any questions, suggestions or want clarification feel free to leave a comment and I'll do my best to answer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;The HTML will be a little different to my last two posts in that it will be segregated into three sections. The whole things will still be wrapped in a &lt;code&gt;fieldset&lt;/code&gt; but within that there will be a block of &lt;code&gt;input&lt;/code&gt;s (radio buttons specifically), a block of &lt;code&gt;label&lt;/code&gt;s inside a &lt;code&gt;div&lt;/code&gt; and a block of &lt;code&gt;div&lt;/code&gt;s that we'll call tooltips as we're going to have a tooltip to show which mood we have selected.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h4&gt;

&lt;p&gt;Inputs will be easy just a set of inputs with their type set to radio and a shared name, they will also need a unique id so our labels can reference them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"rating1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h4&gt;

&lt;p&gt;Labels will be described by their tooltip, which means we know our tooltips will need ids, I've added a title so we can see what each mood is meant to be on mouse over.&lt;/p&gt;

&lt;p&gt;We also have a span inside the label that contains the unicode character we want to display I've chosen 5 emojis but you could use whatever you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Sad"&lt;/span&gt; &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;"SadTooltip"&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"rating1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;😞&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#tooltips"&gt;
  &lt;/a&gt;
  Tooltips
&lt;/h4&gt;

&lt;p&gt;Our tooltips are divs that contain some text to be displayed. We know we're linking them to the labels with aria-describeby so we've added a unique id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SadTooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;😞 Sad&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Most of the magic happens in the CSS, there are a few simple animations so I'll try and go over anything interesting but the full code will be at the end of the post.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-label"&gt;
  &lt;/a&gt;
  Default label
&lt;/h4&gt;

&lt;p&gt;Each label has some default styles, which aren't that interesting, the only only ones of note are &lt;code&gt;color: transparent;&lt;/code&gt; which means our unicode characters will be invisible and &lt;code&gt;transform: scale(0.2);&lt;/code&gt; which mean the label will appear tiny.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;350ms&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.97&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F08080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#label-hover"&gt;
  &lt;/a&gt;
  Label hover
&lt;/h4&gt;

&lt;p&gt;When we hover over a label we increase the size a little and stop hiding the emoji. We also increase the z index just incase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#default-tooltip"&gt;
  &lt;/a&gt;
  Default tooltip
&lt;/h4&gt;

&lt;p&gt;We have a bunch of boring styles in here but we also have the opacity and height set to 0 meaning, by default, the tooltip won't take up any space in the dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.97&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#changes-based-on-checked"&gt;
  &lt;/a&gt;
  Changes based on checked
&lt;/h4&gt;

&lt;p&gt;I've added some very basic labels for the CSS below. With an approach like this, where everything is manual, you gain performance (because there is no JS to wait for) but it does mean you have to write a lot of extra code. There is a block like this for every input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* label for input before currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* emoji for input before currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* label for input currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* label for input after currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* emoji for input after currently checked */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* tooltip related to checked input */&lt;/span&gt;
&lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nf"&gt;#NeutralTooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4em&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#F08080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#prefers-reduced-motion"&gt;
  &lt;/a&gt;
  Prefers Reduced Motion
&lt;/h4&gt;

&lt;p&gt;There is a lot of motion in this component and because of that add a &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query is super important.&lt;/p&gt;

&lt;p&gt;I've taken out all the animations times that involve moving or growing/shrinking and change the style of the labels to make a little more sense without the motion. I don't think it's worth going through this code but if you have any question leave a comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.emotion-rating&lt;/span&gt; &lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating1&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating2&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating3&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating4&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#rating5&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nc"&gt;.labels&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;rating5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h2&gt;

&lt;p&gt;Well wasn't that a lot of code, almost 300 lines of CSS, but I think it shows you what is possible without needing JS and also what sort of interactions you can have without sacrificing accessibility.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/stdc51v9//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h2&gt;

&lt;p&gt;Thank you all for reading, I think this was probably my last entry into the Star (rating) wars. Though do let me know if group posts exploring the same topic are useful and I'll have a chat with the other to see if we want to do this more often (no promises).&lt;/p&gt;

&lt;p&gt;Thanks again ❤️👾🧠🤖👾🦄🤖&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Jamstack Hosting Solutions: Challengers to the Throne</title>
      <author>Raymond Camden</author>
      <pubDate>Thu, 08 Jul 2021 15:49:58 +0000</pubDate>
      <link>https://dev.to/raymondcamden/jamstack-hosting-solutions-challengers-to-the-throne-52hp</link>
      <guid>https://dev.to/raymondcamden/jamstack-hosting-solutions-challengers-to-the-throne-52hp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;New to the Jamstack? &lt;a href="https://snipcart.com/blog/jamstack"&gt;Read this&lt;/a&gt; first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to Jamstack hosting, two names typically come to mind - &lt;a href="https://snipcart.com/blog/vercel-vs-netlify"&gt;Netlify and Vercel&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Both companies have made a name for themselves in the Jamstack community for providing amazing features and services tailored to developers working in the space. But of course, they are not the only option, and as end-users of these services, the more options we have, the better it is for the community as a whole. &lt;/p&gt;

&lt;p&gt;So here I am to help you have a look at 3 such "challengers to the throne" and hopefully give you more options to consider when deciding on the next host for your latest Jamstack site. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--noCkSox6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205913/challengers-throne.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--noCkSox6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205913/challengers-throne.gif" alt="Jamstack Hosting Throne Challenger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm going to host an incredibly simple &lt;a href="https://snipcart.com/blog/11ty-tutorial"&gt;Eleventy blog&lt;/a&gt; for each solution. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the repository &lt;a href="https://github.com/cfjedimaster/snipcart_hosting_article"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'll be looking into how easy it is to use each option, pricing, and available features.&lt;/p&gt;

&lt;p&gt;Our options will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt; from Cloudflare, of course 😉&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.digitalocean.com/products/app-platform/"&gt;App Platform&lt;/a&gt; by Digital Ocean&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt; from that little startup called Microsoft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started and explore those alternatives!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-quick-aside"&gt;
  &lt;/a&gt;
  &lt;em&gt;A Quick Aside&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Before we start looking at our options, a quick terminology check.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When talking about hosting options, you may hear such terms as CI and CD. These are short for continuous integration and continuous deployment. RedHat has a &lt;a href="https://www.redhat.com/en/topics/devops/what-is-ci-cd"&gt;good description&lt;/a&gt; of CI and CD, but you can essentially think of it as a way to automate the deployment of projects tied to source control systems. So typically, this comes out as: I commit a file to my Jamstack site, and a process kicks off to build it and deploy the HTML. It gets more complex, but that's essential.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lastly, CDN is short for **c&lt;/em&gt;&lt;em&gt;ontent **d&lt;/em&gt;&lt;em&gt;elivery **n&lt;/em&gt;&lt;em&gt;etwork. This, too, is a fairly complex topic, but you can practically boil it down to the deployment of your site (HTML, media, etc.) in a geographically performant way for your visitors.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cloudflare-pages"&gt;
  &lt;/a&gt;
  Cloudflare Pages
&lt;/h2&gt;

&lt;p&gt;To be honest, my only real knowledge of Cloudflare was as a company that does &lt;em&gt;stuff&lt;/em&gt; with networking, CDNs, and so forth. I knew they did more, but they're not a company I've used directly in the past. &lt;a href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt; aims to be a "developer-focused" platform that makes use of Cloudflare's network to provide superior performance. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqhOlEvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205895/cf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqhOlEvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205895/cf1.png" alt="Cloudflare Page's homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the time of publication, their &lt;a href="https://pages.cloudflare.com/#pricing"&gt;free tier plan&lt;/a&gt; supports unlimited sites, requests, and bandwidth. Pretty compelling! &lt;/p&gt;

&lt;p&gt;The primary differentiator between their free and commercial tiers is the number of builds per month and the max number of concurrent builds. 1 build at a time and 500 builds per month on the free tier vs. 20 builds at a time and 20,000 builds per month on the commercial tier.&lt;/p&gt;

&lt;p&gt;To start using Cloudfare Page's, you'll need to log in–not too surprising! But when I tested it, I did something... wrong. I'm not even sure what I did exactly, but I ended up in the wrong part of the dashboard and tried going through the wrong process. I guess that's my fault, but be careful. If you end up here, do &lt;em&gt;not&lt;/em&gt; click Add Site, but rather &lt;u&gt;&lt;strong&gt;&lt;em&gt;Pages&lt;/em&gt;&lt;/strong&gt;&lt;/u&gt; on the right:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIS7X6et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205924/cf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIS7X6et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205924/cf2.png" alt="Cloudfare Page's Dashboard"&gt;&lt;/a&gt;&lt;br&gt;
I tested this a few times, and I'm not sure why I sometimes got directed to the right place to start Pages and sometimes directly went to the dashboard. Your experience may differ, but you want to be here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm57L8BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205897/cf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm57L8BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205897/cf3.png" alt="Cloudfare's Pages Create Project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start a project, and you'll be prompted to connect to GitHub. Once you select a repository, Cloudflare will ask you for various settings. What's nice is that they have a &lt;em&gt;large&lt;/em&gt; amount of presets. I selected Eleventy, and it correctly configured everything. (Cloudflare also has a large set of &lt;a href="https://developers.cloudflare.com/pages/framework-guides"&gt;framework specific&lt;/a&gt; docs for more information.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-mIJpaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205898/cf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-mIJpaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205898/cf4.png" alt="Project settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit "Save and Deploy" and the process and build for your site will begin. You get a pretty detailed display that updates in real-time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQiIOM-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205899/cf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQiIOM-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205899/cf5.png" alt="Project building log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done, you'll most likely want to test it. Your site's temporary domain name is found under "Custom domains". This is where you would also set up your real URL when you decide to go live, but the assigned URL is enough to check things out. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find my blog &lt;a href="https://snipcart-hosting-article.pages.dev"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the site is connected to GitHub, I could update it by simply pushing new content to my repository. I added a post, and a new build was fired off. It felt a bit slow to me for such a small site, taking three minutes to complete the process, but on the other hand, three minutes isn't even enough time to grab a cup of coffee. 😉&lt;/p&gt;

&lt;p&gt;Cloudflare Pages support two interesting features for your projects–Cloudflare Access and Web Analytics. &lt;a href="https://www.cloudflare.com/teams/access/"&gt;Cloudflare Access&lt;/a&gt; is a pretty deep set of access control policies focused on access to your deployments. &lt;a href="https://www.cloudflare.com/web-analytics/"&gt;Web Analytics&lt;/a&gt; is–well, analytics, obviously. But crucially, this feature is free for Cloudflare Pages users. If you use Cloudflare Pages, this data is collected with no change to your code. &lt;/p&gt;

&lt;p&gt;The cool thing about this feature is that it's completely separate from Pages, so you can sign up for it and use it on your own site hosted elsewhere. While not documented, one of the first things I checked was the date range of the analytics. Netlify limits its analytics to the past thirty days. However, from what I could see (and again, this wasn't officially documented), Cloudflare's solution provides 90 days of analytics. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8I9SDj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205900/cf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8I9SDj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205900/cf6.png" alt="Analytics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The stats are also more detailed than Netlify's solution, including important page performance metrics. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsBiY6cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205901/cf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsBiY6cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205901/cf7.png" alt="Web page metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One aspect not covered by Cloudflare Pages is serverless. Cloudflare has a nice solution for this, &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;. Their free tier is very generous (one hundred &lt;em&gt;thousand&lt;/em&gt; calls per day, that's three million a month!) but oddly limits you to thirty workers total, even on the paid tier. If you have a few workers supporting a site, let's say five, it feels like you can quickly hit the limit on the max number of workers. &lt;/p&gt;

&lt;p&gt;Another issue is that your workers are separate from your main site project. So, for example, in both Netlify and Vercel, my serverless functions are bundled with the same repo hosting my Jamstack site. I like having everything together like that, but you'll need to have it in another repository with Cloudflare Workers. &lt;/p&gt;

&lt;p&gt;All in all, it feels like Cloudflare Pages' biggest strength is in its generous free tier and its use of their CDN networks. While not as feature-complete as Netlify, it definitely feels compelling. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#app-platform"&gt;
  &lt;/a&gt;
  App Platform
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.digitalocean.com/products/app-platform/"&gt;App Platform by Digital Ocean&lt;/a&gt; is a PaaS (platform as a service) that supports automatic deployment from Git repositories. In comparison to Cloudflare, they aren't limited to just GitHub repositories. Their docs call out-static site support and containers as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.digitalocean.com/products/app-platform/#plans-and-pricing"&gt;Their pricing&lt;/a&gt; is not quite as generous as other options. At this time, you can only deploy three sites on their free tier. Yes, three. I suppose that gives you enough support to kick the tires and see if it makes sense for you, but it probably would not be an option for hobbyists looking to host many small sites. &lt;/p&gt;

&lt;p&gt;Signing up requires a payment method. I'm not too fond of this as a developer, and it's (usually) enough to make me walk away. They support both credit cards and PayPal, but if you use PayPal, they charge you five dollars. To be clear, that goes to your usage, but it means you can't use PayPal for a free test. Reluctantly, I went ahead and used my credit card. &lt;/p&gt;

&lt;p&gt;Once you signed up, you're dropped in a dashboard that's probably one of the prettiest I've seen. Not that it matters, but it was impressive enough for me to snag a screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lvXxpED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205902/do1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lvXxpED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205902/do1.png" alt="Digital Ocean dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I selected "Host a website or static site" to get started. The next page had a variety of server-based options, like WordPress. I almost missed App Platform as it was beneath the fold. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Csqmg-vR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205903/do2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Csqmg-vR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205903/do2.png" alt="Digital Ocean App Platform options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I selected GitHub as a source and my repository containing my Eleventy blog. And then it "broke"–I somehow ended up back in the first step asking me where to get my source. I selected GitHub &lt;em&gt;again&lt;/em&gt;, and I figured out what the problem was. The first time you select GitHub, it walks you through the authorization process. &lt;/p&gt;

&lt;p&gt;Once done, it brings you back to where you were. I honestly thought it was broken here. Their dashboard should (from my point of view) recognize the "return from authorization" flow and bring you into the GitHub process automatically. Just keep that in mind if you give it a test. &lt;/p&gt;

&lt;p&gt;The next step asks you to configure the project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1--NF-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205904/do3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1--NF-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205904/do3.png" alt="Digital Ocean Project configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you need to tweak is "Type". Change it from "Web Services" to "Static Site". For the build command, I use &lt;code&gt;npx @11ty/eleventy&lt;/code&gt;. Finally, I set the output directory to &lt;code&gt;_site&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The next step prompts you for a name and gives you a default domain. I left everything as is and hit Next to continue. The final step asks you to select a pricing plan and default to Starter, the free tier. Finally, you can start the build process. The first build seemed to take a little while, perhaps five minutes or so. I say "five minutes or so" because while I could find a log of my deployments, I didn't see a firm record of how long it took. (There are logs, of course, and you could look at the first and last to figure it out manually. From what I can see, my second build was significantly faster, which is good to know.) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfRG5QAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205905/do4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfRG5QAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205905/do4.png" alt="Digital Ocean Deployment report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see the live site &lt;a href="https://snipcart-hosting-article-tjzfk.ondigitalocean.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as far as I can tell... that's pretty much it. To be clear, Digital Ocean has a large set of features, but in terms of &lt;em&gt;Jamstack&lt;/em&gt; specific features, I do not see anything in particular. Of course, you get things like automatic deployment when updating from GitHub and HTTPS. Still, all-in-all, this particular option feels more like it would be useful for people already using Digital Ocean for other more intensive projects with containers databases and storage. In that case, I could see having one particular vendor to cover all your deployment needs being pretty handy. &lt;/p&gt;

&lt;p&gt;If my &lt;em&gt;only&lt;/em&gt; need was Jamstack hosting, this option wouldn't be my first pick.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#azure-static-web-apps"&gt;
  &lt;/a&gt;
  Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;Microsoft's foray into the Jamstack world went live on May 21, 2021 (after a public beta period). &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt; is part of the greater Azure platform, making it a great addition to developers already in that ecosystem. Their &lt;a href="https://azure.microsoft.com/en-us/pricing/details/app-service/static/"&gt;pricing tiers&lt;/a&gt; include a free and paid tier, with the free tier looking pretty extensive. You get one hundred gigs of bandwidth per month and a half gig of storage. &lt;/p&gt;

&lt;p&gt;Their &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/#documentation"&gt;docs&lt;/a&gt; take the approach of asking you which framework you're using:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4-Bnk3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205906/ms1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4-Bnk3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205906/ms1.png" alt="Getting started with Azure Static Web Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right away, you'll notice Eleventy isn't there. It does mean we'll have to figure things out a bit on our own. I started with the generic Web option. The &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript"&gt;Getting Started&lt;/a&gt; doc detail the requirements, which include GitHub, Azure, and Visual Studio Code, specifically an &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps"&gt;extension&lt;/a&gt; for Visual Studio Code. The guide kind of assumes you are starting from scratch and not using an existing site. You can skip to the &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript#create-a-static-web-app"&gt;"Create a static web app"&lt;/a&gt; part where you start working with the Visual Studio Code extension. &lt;em&gt;Note that while Microsoft's solution is out of beta, the extension is marked as "Preview".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With my Eleventy site open in Visual Studio Code, I used the Azure icon to start the process of creating my app. As stated above, you will need a valid Azure account and be prompted to sign in when you begin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4xJY3he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205907/ms2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4xJY3he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205907/ms2.png" alt="Azure extension in Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure offers a free trial. I had signed up for one some time ago, so I had to set up a new "Pay As You Go" subscription. I found Visual Studio Code to be a bit–quirky with this process. It realized I didn't have any subscriptions but didn't update after I recreated my "Pay As You Go" service. The refresh icon didn't seem to do anything. I had to close Code and re-open it, and even then, it acted a bit weird. (See my &lt;a href="https://twitter.com/raymondcamden/status/1408854909722714115"&gt;tweet&lt;/a&gt; for an example.) I got it "connected" properly, but be prepared to restart. Even after selecting my subscription, things seemed a bit off. It got locked into a verification process. I will admit, I clicked the button a few times and ended up with this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpZXMNJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205908/ms3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpZXMNJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205908/ms3.png" alt="Code issues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess all of this comes back to the fact that the extension is marked Preview, but with the feature itself being marked GA and with the extension seemingly being the only documented way to use it, this seems like an oddly broken process. &lt;/p&gt;

&lt;p&gt;I closed Code a second time, tried again, and was able to continue with the process. After specifying a name, it then prompted for a project preset:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mR10W2za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205909/ms4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mR10W2za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205909/ms4.png" alt="Static Web Apps presets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I selected custom. When prompted for where my application code was, I selected &lt;code&gt;/&lt;/code&gt; (in cases your GitHub repo has Eleventy in a subdirectory, this is where you would care to change the default). The next step asked for the output directory (&lt;code&gt;_site&lt;/code&gt;). At this point, Code started doing... stuff. I got updates in the bottom right corner letting me know things were executing, but it was mostly a waiting game. I knew that I had never entered an Eleventy specific command, but I assumed I'd be left with a bad build. Instead, I never got past this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7OMYbZU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205910/ms5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7OMYbZU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205910/ms5.png" alt="Code extension failing - again"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was no way a Git pull on my source repo could take that long, so obviously, something else was up. On a whim, I expanded the Azure icons in the left-hand panel, and here is where I saw what I had expected, namely a failed build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFdRSgGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205911/ms6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFdRSgGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205911/ms6.png" alt="Code showing the failed build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My guess is–the build failing was never communicated to other parts of the extension; hence, the progress meter "stuck" at the Git pull. It turns out the problem was incredibly easy to fix. To clue in Azure on how to build the site, I simply needed to add a &lt;code&gt;build&lt;/code&gt; script to my package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"eleventy"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As soon as I committed, Azure began the process again, and I was able to see it in the panel. By right-clicking on my site name, I was able to open &lt;a href="https://icy-coast-017993010.azurestaticapps.net/"&gt;the site&lt;/a&gt; in a new tab.&lt;/p&gt;

&lt;p&gt;While the process was a bit rough via the extension, Azure does let you go through the same process via their portal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1zzW-lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205912/ms7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1zzW-lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205912/ms7.png" alt="Azure portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the portal, things worked much easier. It's possible the docs mentioned this as an option, but it's definitely clear Microsoft wants you to use Code. Generally, I'm totally behind that, but, personally, I would have rather used the portal. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see the live site &lt;a href="https://icy-coast-017993010.azurestaticapps.net/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As much as I had trouble with the extension, by adding the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions"&gt;Azure Functions extension&lt;/a&gt;, you can add a serverless endpoint to your site in seconds. I was stunned by how well that worked. Even better, it becomes part of your repository (you can see it in my &lt;a href="https://github.com/cfjedimaster/snipcart_hosting_article/tree/main/api"&gt;/api&lt;/a&gt; and lets you quickly work on both your static assets and serverless functions together. &lt;/p&gt;

&lt;p&gt;In the end, as with Digital Ocean, I think the biggest attraction for this option will be developers already making use of the Azure platform. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-waittheres-more"&gt;
  &lt;/a&gt;
  But Wait–There's More...
&lt;/h3&gt;

&lt;p&gt;As the Jamstack continues to grow in popularity, you will see more options become available and greater differentiation between the options. Jamstack hosting for existing platforms (like Azure) is a sensible iteration. It appeals to existing users and offers a compelling upsell to newcomers. We should also see more "Jamstack first" options (like Netlify and Vercel) over time. &lt;/p&gt;

&lt;p&gt;For another great look at hosting options, see &lt;a href="https://bejamas.io/blog/jamstack-hosting-deployment/"&gt;this article&lt;/a&gt; from the Bejamas blog. I also &lt;em&gt;strongly&lt;/em&gt; recommend signing up for the &lt;a href="https://join.slack.com/t/thenewdynamic/shared_invite/enQtMjkwNjYwNTY0NjkxLTFkNGQ1YjMwZGNjNjY0YzY4MmM2YTBhZTY0YjkyOTBmYmE4NjMwY2M3ODMzZDIwNzg2ZTBkZjdjYjVlM2Q2ZDA"&gt;New Dynamic&lt;/a&gt; on Slack. It's the premier Slack organization for Jamstack and a great way to get honest opinions and help from engineers working on the Jamstack ecosystem.&lt;/p&gt;

&lt;p&gt;Have you tried other hosting solutions for your Jamstack websites? Let us know in the comment below!&lt;/p&gt;

</description>
      <category>jamstack</category>
    </item>
    <item>
      <title>Scrape the latest stock prices with node.js and puppeteer!</title>
      <author>Code_Jedi</author>
      <pubDate>Thu, 08 Jul 2021 15:22:23 +0000</pubDate>
      <link>https://dev.to/code_jedi/scrape-the-latest-stock-prices-with-node-js-and-puppeteer-4p2g</link>
      <guid>https://dev.to/code_jedi/scrape-the-latest-stock-prices-with-node-js-and-puppeteer-4p2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-fellow-devs"&gt;
  &lt;/a&gt;
  Hey, fellow devs 👋
&lt;/h2&gt;

&lt;p&gt;If you're looking into web-scraping with javascript, then I've got a great, simple project to start you off, because in this tutorial, I will be showing you guys how to scrape the latest Tesla stock prices using Node.js and puppeteer.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;p&gt;First of all, you will need to install puppeteer using "npm i puppeteer". Now if you don't have npm and node_modules setup, here's a great tutorial on how to do so: &lt;a href="https://www.sitepoint.com/npm-guide/"&gt;https://www.sitepoint.com/npm-guide/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you've installed puppeteer, create a new javascript file and require puppeteer on the first line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create the async function in which we are going to write our main code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

async function start() {

}
start();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#now-were-ready-to-start-scraping"&gt;
  &lt;/a&gt;
  Now we're ready to start scraping.
&lt;/h4&gt;

&lt;p&gt;First of all, you need to initiate a new browser instance, as well as define the url which your web-scraper is going to be visiting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

async function start() {
  const url = 'https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch';
  const browser = await puppeteer.launch({
    headless: false
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to call the "newPage()" function to open a new page in the browser, and go to the url that we defined using the "goto()" function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

async function start() {
  const url = 'https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch';
  const browser = await puppeteer.launch({
    headless: false
  });
  const page = await browser.newPage();
  await page.goto(url);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this next step, you will have to go to &lt;a href="https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch"&gt;https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch&lt;/a&gt;, right click on the current stock price and click on inspect:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pPDZzU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnur2qmf8lq4lftd06p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pPDZzU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vnur2qmf8lq4lftd06p.png" alt="tesla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pop-up will appear on the right of your window, you will need to find the stock price element: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jChUrnpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2m63rzeuv2ez73r1iw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jChUrnpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2m63rzeuv2ez73r1iw9.png" alt="tesinspect2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Next, you will need to right click on the stock price element and click on "copy full Xpath".&lt;br&gt;
This will give us a way of accessing the stock price element:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BAOXhnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ompr2ky6msysedvc59fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BAOXhnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ompr2ky6msysedvc59fy.png" alt="tes3"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Once we have the Xpath of the stock price element, we can add these 3 lines of code into our function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  var element = await page.waitForXPath("put the stock price Xpath here")
  var price = await page.evaluate(element =&amp;gt; element.textContent, element);
  console.log(price);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "page.waitForXPath()" function will locate the stock price element.&lt;br&gt;
Next, the "page.evaluate" function will get the text contents of the stock price element which would then be printed by the "console.log()" function.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#at-this-point-our-code-would-look-something-like-this"&gt;
  &lt;/a&gt;
  At this point, our code would look something like this:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

async function start() {
  const url = 'https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch';
  const browser = await puppeteer.launch({
    headless: false
  });
  const page = await browser.newPage();
  await page.goto(url);
  var element = await page.waitForXPath("/html/body/div[1]/div/div/div[1]/div/div[2]/div/div/div[5]/div/div/div/div[3]/div[1]/div[1]/span[1]")
  var price = await page.evaluate(element =&amp;gt; element.textContent, element);
  console.log(price);
}
start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#if-you-were-to-execute-your-current-code-you-will-find-that-when-going-to-the-url-that-you-defined-earlier-a-popup-will-appear"&gt;
  &lt;/a&gt;
  If you were to execute your current code, you will find that when going to the url that you defined earlier, a pop-up will appear:
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zw67gbb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt5lz5p9v42aitk32pmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zw67gbb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt5lz5p9v42aitk32pmm.png" alt="pop-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get around this, plug these 2 lines of code into your function before defining the "element" variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var accept = ("#consent-page &amp;gt; div &amp;gt; div &amp;gt; div &amp;gt; form &amp;gt; div.wizard-body &amp;gt; div.actions.couple &amp;gt; button");
await page.click(accept)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will locate the "Accept All" button and click it to make the popup go away.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-you-will-have-a-working-function-which-goes-to-your-defined-url-scrapes-the-latest-tesla-stock-price-and-prints-it-in-your-terminal"&gt;
  &lt;/a&gt;
  Now you will have a working function which goes to your defined url, scrapes the latest Tesla stock price and prints it in your terminal.
&lt;/h4&gt;




&lt;p&gt;To go one step further, you can put these lines of code in a for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for(var k = 1; k &amp;lt; 2000; k++){
      var element = await page.waitForXPath("/html/body/div[1]/div/div/div[1]/div/div[2]/div/div/div[5]/div/div/div/div[3]/div[1]/div[1]/span[1]")
      var price = await page.evaluate(element =&amp;gt; element.textContent, element);
      console.log(price);
      await page.waitForTimeout(1000);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "page.waitForTimeout(1000)" function will wait 1000 milliseconds(1 second) before repeating the for loop.&lt;/p&gt;

&lt;p&gt;And finally add a "browser.close()" function after the for loop to close the browser and finish your code execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

async function start() {
    const url = 'https://finance.yahoo.com/quote/TSLA?p=TSLA&amp;amp;.tsrc=fin-srch';
    const browser = await puppeteer.launch({
      headless: false
    });  
    const page = await browser.newPage();
    await page.goto(url);
    var accept = ("#consent-page &amp;gt; div &amp;gt; div &amp;gt; div &amp;gt; form &amp;gt; div.wizard-body &amp;gt; div.actions.couple &amp;gt; button");
    await page.click(accept);
    for(var k = 1; k &amp;lt; 2000; k++){
      var element = await page.waitForXPath("/html/body/div[1]/div/div/div[1]/div/div[2]/div/div/div[5]/div/div/div/div[3]/div[1]/div[1]/span[1]");
      var price = await page.evaluate(element =&amp;gt; element.textContent, element);
      console.log(price);
      await page.waitForTimeout(1000);
    }
    browser.close();
}
start();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thats-it-for-this-webscraping-tutorial"&gt;
  &lt;/a&gt;
  That's it for this web-scraping tutorial!
&lt;/h2&gt;

&lt;p&gt;If you're having problems with the code, leave a comment and I'll see how I can help.&lt;/p&gt;

&lt;p&gt;Byeeeeeee 👋&lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
      <category>javascript</category>
      <category>puppeteer</category>
    </item>
    <item>
      <title>Introduction to React Hooks</title>
      <author>Pratik Bhagat</author>
      <pubDate>Thu, 08 Jul 2021 14:53:26 +0000</pubDate>
      <link>https://dev.to/bhagatpratik07/introduction-to-react-hooks-3h02</link>
      <guid>https://dev.to/bhagatpratik07/introduction-to-react-hooks-3h02</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-are-hooks"&gt;
  &lt;/a&gt;
  What are Hooks?
&lt;/h3&gt;

&lt;p&gt;Hooks allow us to use state and lifecycle features in function components that were specific to class components before React 16.8 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-react-hooks"&gt;
  &lt;/a&gt;
  Benefits of React Hooks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Less Code&lt;/li&gt;
&lt;li&gt;Easily Readable&lt;/li&gt;
&lt;li&gt;Easier to decouple logic from UI&lt;/li&gt;
&lt;li&gt;Performance boost with functional components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#usestate-hook"&gt;
  &lt;/a&gt;
  useState Hook
&lt;/h3&gt;

&lt;p&gt;The first hook we will look at is the useState hook. The useState hook allows us to add state to a functional component.&lt;/p&gt;

&lt;p&gt;Syntax: The first element is the initial state and the second one is a function that is used for updating the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [count, setCount] = React.useState(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we declare a  variable count which holds the value 0 and setCount is the function to update the count. Executing this function re-renders the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's make a counter using the useState hook&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

export default function Counter() {
  const [count, setCount] = useState(0);

  const incrementCount = () =&amp;gt; {
    setCount(count + 1);
  };
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt;
      &amp;lt;button onClick={incrementCount}&amp;gt;increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we initialize our count to 0, and then we created a function incrementCount which uses setCount to increase our count by 1. We display our count and a button which on click calls the incrementCount function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect-hook"&gt;
  &lt;/a&gt;
  useEffect Hook
&lt;/h3&gt;

&lt;p&gt;In class components,  you may be familiar with lifecycle methods. The lifecycle methods, componentDidMount, componentDidUpdate, and componentWillUnmount, are all handled by the useEffect hook in functional components. The Effect Hook lets you perform side effects in function components. Examples of side effects are fetching data, changing the DOM. Fetching data is one of the most common uses of the useState hook. The useEffect hook needs at least one argument or a function to execute. You can also add a cleanup function inside the useEffect hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(()=&amp;gt;{
    // will be called on initial render and every single re-render
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The useEffect hook also takes an array after the function which is called the dependency array. Where we can pass dependencies on which our effect depends on. Let's take a look at an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
    console.log("count")
}, [count])

useEffect(()=&amp;gt;{
    console.log("render")
},[])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, count is our dependency so console.log("count") will only execute when the count changes. If we leave our dependency array empty console.log(" &lt;br&gt;
render") will only execute on the initial render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect( ()  =&amp;gt;  {
    effect
    return () =&amp;gt; {
        cleanup
    }
}, [value])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside useEffect, we can add a return statement at the end of the function call which returns a function. This return function does all the cleanup work. It's similar to componentWillUnmount in class component. Note that adding a return statement is optional in useEffect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#if-you-found-this-useful-drop-a-like-"&gt;
  &lt;/a&gt;
  If you found this useful drop a like :)
&lt;/h3&gt;

&lt;p&gt;Read more about hooks 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Docs&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/6-reasons-to-use-react-hooks-instead-of-classes-7e3ee745fe04"&gt;Classes vs Hooks&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@vcarl/everything-you-need-to-know-about-react-hooks-8f680dfd4349"&gt;Hooks explained&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to move up in your org </title>
      <author>Chris Noring</author>
      <pubDate>Thu, 08 Jul 2021 14:51:42 +0000</pubDate>
      <link>https://dev.to/softchris/a-career-in-devrel-2m75</link>
      <guid>https://dev.to/softchris/a-career-in-devrel-2m75</guid>
      <description>&lt;p&gt;So, you have a career in DevRel? You've done one or more of the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created written content.&lt;/li&gt;
&lt;li&gt;Created video content.&lt;/li&gt;
&lt;li&gt;Spoken at meetups or conferences, virtually or in person&lt;/li&gt;
&lt;li&gt;Worked with the product teams to advocate for users' feedback and why certain changes are important to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#you-wonder-whats-next-for-me"&gt;
  &lt;/a&gt;
  You wonder, what's next for me?
&lt;/h2&gt;

&lt;p&gt;Do more of the list above or move up? Here's the thing though, it might not be clear what 'up' looks like. Well, you usually have two choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Management&lt;/strong&gt;. In the management track you are looking at managing functions or teams of people. That's a science all to itself. You should have a genuine interest for people and want to see them grow, to go down this path. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Individual Contributor&lt;/strong&gt;. What if you are happy doing what you do but you still want to advance? At this point, it's all about impact and using your time wisely. You need to realize that your time is a finite resource, and you need to make it count.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-time-count-though"&gt;
  &lt;/a&gt;
  How do I make time count though?
&lt;/h2&gt;

&lt;p&gt;First realize it's about leveraging yourself and what you do in such a way that you have more impact. At this point it's good to ask yourself questions like. &lt;/p&gt;

&lt;p&gt;Based on what I just did, did it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improve the product&lt;/strong&gt;. At the end of the day, your company hired you to improve the products they have and increase its usage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Did I change the way we work?&lt;/strong&gt;. A very impactful thing to do is realizing that the way you and your colleagues do things is not the most efficient way. can you suggest a better way and can you prove it's better?
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Are other folks aware of the work I do?&lt;/strong&gt;. DevRel is a lot about impact, impact on the user communities you work with but it's also about making folks internally, in your company, know what you do. The more people see you as someone that brings about changes and comes with valuable input, the more people will trust you and want to work with you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Measure, do it and get good at it&lt;/strong&gt;. You should aim to measure the impact of what you do as much as possible. Is it worth doing if it can't be measured? That last is a bit of hot take but it's to ensure to push you to at least try to measure the activities you do. It's hard to argue with numbers that says you influenced a sale; you drove X more users to a service. What if you can't measure things that exactly? Then you need to be good at storytelling, that can even be the most efficient thing to do at times, but as stated before, numbers are hard to argue with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-there"&gt;
  &lt;/a&gt;
  How do I get there?
&lt;/h2&gt;

&lt;p&gt;You need to grow more skills. You might be a great content creator currently but don't know how to strategize or talk to management, also referred to as 'managing up'. &lt;/p&gt;

&lt;p&gt;There are plenty of resources out there but learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Write a strategy doc&lt;/strong&gt;. People won't take your word for it. Write it down in a doc, mission, vision, what you want the impact to be and show it to people. Be prepared though that your doc might stay buried in a desk for 2 years, so write many docs. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Put yourself in a manager's position&lt;/strong&gt;. The position you are aiming for, try to imagine being them, how would you do their job, responsible for 100+ people, you most likely would need to formulate high-level strategies and care less about a specific tech. A thing you can do is to look at how they communicate via email, try to emulate that style. Look also how they carry out larger meetings, how they set the context, how they drive the meeting, and how they NOT get stuck in petty arguments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be brave&lt;/strong&gt;. When opportunity knocks, take it, if someone wants you to handle something, go at it with the fury and passion of a thousand stars. Yes, there will be some things that are outside of your comfort zone, but you need to adopt a growth mindset.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Laugh in the face of hardship&lt;/strong&gt;. No really, it's sometimes very hard to navigate being a manager or manage things at a high-level cause it's all about politics. Sometimes you need to circle the problem and listen and just live to fight another day. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a mentor&lt;/strong&gt;. Someone has done this journey before you. Even though their journey might not be your journey, listen, there's something to be learnt about human behavior.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tell people you want up&lt;/strong&gt;. This might not be obvious to a lot of folks, especially if you like me come from a culture where you shouldn't make too many waves, let the work speak for you etc. The moment you say you want 'up', people look at you differently cause &lt;em&gt;moving up&lt;/em&gt; is to commit yourself to the company in a whole new way. It's not just about you anymore, what you do, but realize you are unimportant, it's about the mission of the company. - Align yourself to the mission.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a manager that believes in you&lt;/strong&gt;. Having a manager that believes in you will make you deliver above your ability as you will do a ton of growing in the process. Of all the things in this list, this is the most important one. It doesn't matter if you work with tech X or tech Y, having that support is &lt;em&gt;E V E R Y T H I N G&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this is helpful and it will make you realize that promotions don't just happen by hard work, it's a mental shift, it's a promotional campaign and it's a ton of work. But for the right company for the right mission, it will be worth it.&lt;/p&gt;

</description>
      <category>career</category>
      <category>devrel</category>
    </item>
    <item>
      <title>Debugging with Dashbird: AWS Lambda Process Exited Before Completing Request</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Thu, 08 Jul 2021 14:51:10 +0000</pubDate>
      <link>https://dev.to/dashbird/debugging-with-dashbird-aws-lambda-process-exited-before-completing-request-575l</link>
      <guid>https://dev.to/dashbird/debugging-with-dashbird-aws-lambda-process-exited-before-completing-request-575l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Another generic error message&lt;/strong&gt; from our favorite FaaS provider AWS Lambda. &lt;/p&gt;

&lt;p&gt;And again, there are multiple reasons why this issue could arise. Let's first look at the &lt;a href="https://dashbird.io/knowledge-base/aws-lambda/introduction-to-aws-lambda/"&gt;basics of AWS Lambda&lt;/a&gt; to get a better intuition for when things go wrong later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda-is-asynchronous"&gt;
  &lt;/a&gt;
  AWS Lambda is Asynchronous
&lt;/h2&gt;

&lt;p&gt;Lambda is an &lt;strong&gt;asynchronous event-based service&lt;/strong&gt; at heart. The Lambda service asynchronously calls your functions---this doesn't mean that all events are handled asynchronously, but &lt;strong&gt;relates mainly to the programming model&lt;/strong&gt; you have to use inside your function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This shouldn't be confused with the event handling&lt;/strong&gt; of Lambda, which can be synchronous and asynchronous.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In synchronous event handling&lt;/strong&gt;, for example, when your function handles an &lt;a href="https://dashbird.io/knowledge-base/api-gateway/what-is-aws-api-gateway/"&gt;API Gateway&lt;/a&gt; event, the event provider waits until you handled the event so that it can supply its own client with your results.&lt;/p&gt;

&lt;p&gt;A browser sends a request to API Gateway, and API Gateway, in turn, sends the request as an event to a Lambda function. The browser will now wait for a response, and API Gateway will wait to handle the event. The longer your function takes, the longer both the browser and API Gateway will wait. &lt;strong&gt;Until a maximum of 30 seconds, API Gateway will call it a day and tell the browser your function timed out&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In asynchronous event handling&lt;/strong&gt;, the event provider will just give the event to Lambda and call it a day. &lt;strong&gt;It will not wait for an answer&lt;/strong&gt; from your Lambda function, whether it takes three seconds or ten minutes.&lt;/p&gt;

&lt;p&gt;If you &lt;a href="https://dashbird.io/blog/what-are-aws-lambda-triggers/"&gt;trigger a Lambda function&lt;/a&gt; from an S3 upload, the S3 service will never notice if the Lambda function failed or succeeded in handling the event. It will just trigger the function and then march on to other tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-event-handling"&gt;
  &lt;/a&gt;
  Asynchronous Event Handling
&lt;/h3&gt;

&lt;p&gt;Inside your Lambda function, you have to write asynchronous code. &lt;strong&gt;You can't simply take some arguments and return your calculations directly&lt;/strong&gt;, like in the following example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports.handler = (event, context) =&amp;gt;  {&lt;br&gt;
const result = event.data.x  * event.data.x;&lt;br&gt;
return  { statusCode: 200, body: result };&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You have to use some asynchronous computing constructs&lt;/strong&gt; to handle the results. In the currently supported versions of the Node.js runtime for AWS Lambda, you have to use promises or asynchronous functions to handle your return values. &lt;/p&gt;

&lt;p&gt;A promise version would look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports.handler =(event, context) =&amp;gt;  new  Promise((resolve, reject) =&amp;gt;  {&lt;br&gt;
const result = event.data.x  * event.data.x;&lt;br&gt;
resolve({ statusCode: 200, body: result });&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your handler function would directly return a new promise object that would be resolved in the future. You would call resolve if all went well or reject if you encountered an error.&lt;/p&gt;

&lt;p&gt;And the corresponding asynchronous function looks like that:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports.handler = async  (event, context) =&amp;gt;  {&lt;br&gt;
const result = event.data.x  * event.data.x;&lt;br&gt;
return  { statusCode: 200, body: result };&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An asynchronous function is a regular function marked with async at the beginning. This keyword wraps the whole function in a promise, so you don't have to do it manually. If you return, the promise will be resolved. If you throw an error, the promise will be rejected. This way, &lt;strong&gt;you can write code that looks synchronous but behaves asynchronously&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using an asynchronous function is a "de facto" standard of writing Lambda handlers&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-legacy-way"&gt;
  &lt;/a&gt;
  The Legacy Way
&lt;/h3&gt;

&lt;p&gt;When Node.js version 11 was still supported, you had to use the context or a callback for your returns.&lt;/p&gt;

&lt;p&gt;The context version looked like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports.handler = (event, context) =&amp;gt;  {&lt;br&gt;
const result = event.data.x  * event.data.x;&lt;br&gt;
context.done(null, { statusCode: 200, body: result });&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here the first argument to context.done is an error object; if none exist, we can use null.&lt;/p&gt;

&lt;p&gt;The callback version looked like that:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports.handler = (event, context, callback) =&amp;gt;  {&lt;br&gt;
const result = event.data.x  * event.data.x;&lt;br&gt;
callback({ statusCode: 200, body: result });&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the asynchronous event handling got streamlined within &lt;a href="https://dashbird.io/blog/aws-lambda-nodejs-10-vs-14/"&gt;new Node.js versions&lt;/a&gt;, so you only have to return from an asynchronous function, and Node.js will take care of the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-completing-a-request-mean"&gt;
  &lt;/a&gt;
  What Does Completing a Request Mean?
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of how AWS Lambda works let's look at our error.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AWS Lambda process exited before completing request&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the above code examples, we saw how it looks when we complete a request, so you might know what will cause the error to happen.&lt;/p&gt;

&lt;p&gt;In the legacy code that uses &lt;code&gt;context.done&lt;/code&gt; or the &lt;code&gt;callback&lt;/code&gt;,&lt;strong&gt; this error will happen when your code doesn't reach one of these calls&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the current versions that use promises or asynchronous functions, &lt;strong&gt;this error will happen if the promise didn't resolve or the function didn't return&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, your function code did all of its work but never reached one of these four end states.&lt;/p&gt;

&lt;p&gt;An asynchronous function implicitly returns if no code is left to work on, so even if you don't write a return statement, it will still "complete" just without any returned values. The other three versions of completing require you to call something explicitly, be it &lt;code&gt;context.done&lt;/code&gt;, &lt;code&gt;callback&lt;/code&gt;, or &lt;code&gt;resolve&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-leads-to-this-error"&gt;
  &lt;/a&gt;
  What Leads to This Error?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This error is mostly related to legacy behavior&lt;/strong&gt;. These days other errors trigger instead of this one. So, this error is mostly a "catch what's left" kind of error.&lt;/p&gt;

&lt;p&gt;There are multiple reasons why you didn't call the explicit return functions before your function exited, but &lt;strong&gt;most of them will lead to a timeout or exceeding memory limit&lt;/strong&gt; kind of error.&lt;/p&gt;

&lt;p&gt;The chances of you writing code that falls in a niche not covered by other errors are quite good. This can happen if you call upstream services, like DynamoDB, for example, and they fail silently for some reason.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-this-error"&gt;
  &lt;/a&gt;
  How to Solve This Error?
&lt;/h2&gt;

&lt;p&gt;Using a standalone Lambda function doesn't make much sense---usually, you use one to connect other services with some transformation and business logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your best course of action here is to look into the &lt;a href="https://dashbird.io/blog/exploring-lambda-limitations/"&gt;limits&lt;/a&gt;&lt;/strong&gt; of these services and all the places where you call them with the AWS SDK. If you sent too much data at once or forgot some attributes in the SDK call, things can fail without any explicit error message.&lt;/p&gt;

&lt;p&gt;If you use the asynchronous function style to signal that your function has completed, you can't forget to call the right functions at the end anymore.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>debug</category>
      <category>apigateway</category>
    </item>
    <item>
      <title>Incremental Versioned Datasets in Kedro</title>
      <author>Waylon Walker</author>
      <pubDate>Thu, 08 Jul 2021 14:50:23 +0000</pubDate>
      <link>https://dev.to/waylonwalker/incremental-versioned-datasets-in-kedro-3ajn</link>
      <guid>https://dev.to/waylonwalker/incremental-versioned-datasets-in-kedro-3ajn</guid>
      <description>&lt;p&gt;Kedro versioned datasets can be mixed with incremental and partitioned datasets to do some timeseries analysis on how our dataset changes over time.  Kedro is a very extensible and composible framework, that allows us to build solutions&lt;br&gt;
from the individual components that it provides.  This article is a great example of how you can combine these components in unique ways to achieve some powerful results with very little work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-our-dataset-change-over-time"&gt;
  &lt;/a&gt;
  How does our dataset change over time??
&lt;/h2&gt;

&lt;p&gt;This was a question presented to me at work.  We had some plots being produces as the output of our pipeline and the user wanted the ability to compare results over time.  Luckily this was asked early in the project so we were able&lt;br&gt;
to proactively setup versioning on the right datasets.&lt;/p&gt;

&lt;p&gt;To enable this all we needed to do now was to add &lt;code&gt;versioned: true&lt;/code&gt; and we will be able to compare results over time.  Yes kedro makes it that easy to setup.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/what-is-kedro-lob" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤷‍♀️ What is Kedro (The Parts)&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Feb 24 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#data&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dataengineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#set-up-a-project"&gt;
  &lt;/a&gt;
  set up a project
&lt;/h2&gt;

&lt;p&gt;Set up a new project just as usual.  &lt;strong&gt;note&lt;/strong&gt; I like using pipx for global cli packages.  You can pick a specific version of kedro or opt for the latest while simply globally installing kedro and running kedro new is purely dependent on the last time you chose to update kedro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pipx
pipx run kedro new

&lt;span class="nb"&gt;cd &lt;/span&gt;versioned-partitioned-kedro-example
conda create &lt;span class="nt"&gt;-n&lt;/span&gt; versioned-partitioned-kedro-example &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.8  &lt;span class="nt"&gt;-y&lt;/span&gt;
conda activate versioned-partitioned-kedro-example

pip &lt;span class="nb"&gt;install &lt;/span&gt;kedro
kedro &lt;span class="nb"&gt;install

&lt;/span&gt;git init
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"init project from pipx run kedro new"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I called my project versioned-partitioned-kedro-example. You can call your project whatever you like.  If you try to use some special characters where they don't belong, kedro will catch you.  Under the hood, kedro is using a&lt;br&gt;
library called &lt;code&gt;cookiecutter&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Please do not skip out on using a virtual environment. You may use whichever virtual environment tool you prefer, but please do not skip out. Wrecking a running project for learning is not fun.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#update-dependencies"&gt;
  &lt;/a&gt;
  update dependencies
&lt;/h2&gt;

&lt;p&gt;I popped open my dependencies, added &lt;code&gt;kedro[pandas]&lt;/code&gt; and &lt;code&gt;find-kedro&lt;/code&gt;. Since those are extra packages our example will require.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aiohttp
black==21.5b1
find-kedro
flake8&amp;gt;=3.7.9, &amp;lt;4.0
ipython
isort~=5.0
jupyter_client&amp;gt;=5.1, &amp;lt;7.0
jupyterlab~=3.0
jupyter~=1.0
kedro-telemetry~=0.1.0
kedro==0.17.4
kedro[pandas]
nbstripout~=0.4
pytest-cov~=2.5
pytest-mock&amp;gt;=1.7.1, &amp;lt;2.0
pytest~=6.2
requests
wheel&amp;gt;=0.35, &amp;lt;0.37
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; I created &lt;code&gt;find-kedro&lt;/code&gt;, and I like using it to create my pipeline object.  Think of how pytest automatically picks up everything named &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;find-kedro&lt;/code&gt; does the same thing for kedro.  It picks up everything with &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;pipeline&lt;/code&gt; in the name and creates pipelines out of it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-new-dependencies"&gt;
  &lt;/a&gt;
  Install new dependencies
&lt;/h2&gt;

&lt;p&gt;After adding our additional dependencies to the &lt;code&gt;requirements.in&lt;/code&gt;, we can tell kedro to install everything and compile the dependencies.  Behind the scenes &lt;code&gt;--build-reqs&lt;/code&gt; uses a library called &lt;code&gt;pip-compile&lt;/code&gt; to create a &lt;code&gt;requirements.txt&lt;/code&gt; file with hard pinned dependencies, which is ideal for creating reproducible projects.  You and your future colleagues may not thank you for this, but they sure as heck won't be cursing your name when they can't&lt;br&gt;
get the project to run.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--build-reqs&lt;/span&gt;

git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"added additional dependencies"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-node"&gt;
  &lt;/a&gt;
  create a node
&lt;/h2&gt;

&lt;p&gt;For this example, we need a node to do much.  This node will&lt;br&gt;
pass the &lt;code&gt;cars.csv&lt;/code&gt; from a URL to a &lt;code&gt;parquet&lt;/code&gt; file.  I am going to use a lambda to build my identity function inline.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pipelines/cars_nodes.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kedro.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'raw_cars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'int_cars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'create_int_cars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🗒️ &lt;strong&gt;note&lt;/strong&gt;&lt;code&gt;find-kedro' will automatically pick up these nodes for us after we set up our&lt;/code&gt;pipeline_registry.py`.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
git add .&lt;br&gt;
git commit -m "add create_int_cars node"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implement-findkedro"&gt;
  &lt;/a&gt;
  implement find-kedro
&lt;/h2&gt;

&lt;p&gt;Next, we need to tell kedro where our nodes are.  This is where &lt;code&gt;find-kedro&lt;/code&gt; comes in.  Once we point to the directory where our modules of nodes/pipelines are, it creates the pipelines dictionary for us automatically.  It will even separate each module into a pipeline and stitch them all into one default pipeline.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;` python&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#pipelineregistrypy"&gt;
  &lt;/a&gt;
  pipeline_registry.py
&lt;/h1&gt;

&lt;p&gt;"""Project pipelines."""&lt;br&gt;
from typing import Dict&lt;br&gt;
from pathlib import Path&lt;/p&gt;

&lt;p&gt;from kedro.pipeline import Pipeline&lt;/p&gt;

&lt;p&gt;from find_kedro import find_kedro&lt;/p&gt;

&lt;p&gt;def register_pipelines() -&amp;gt; Dict[str, Pipeline]:&lt;br&gt;
    """Register the project's pipelines.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Returns:
    A mapping from a pipeline name to a "Pipeline "object.
"""
pipeline_dir = Path(__file__).parent / 'pipelines'
return find_kedro(directory= pipeline_dir)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🗒️ This is very similar to the default ` pipeline_registry'except the last two&lt;br&gt;
lines.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"implement find-kedro"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-baseline-catalog"&gt;
  &lt;/a&gt;
  create a baseline catalog
&lt;/h2&gt;

&lt;p&gt;Once we have a pipeline setup, the kedro cli can automatically fill in missing catalog entries with  &lt;code&gt;MemoryDataSet&lt;/code&gt;'s. Thus, using the cli helps consistently scaffold the catalog and ensure we don't end up with a typo in our dataset name.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; cars_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Kedro will kick out the following catalog file to &lt;code&gt;base/catalog/cars_nodes.yml&lt;/code&gt;&lt;br&gt;
for us to get started with.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;raw_cars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;span class="na"&gt;int_cars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🔥 use the kedro cli to fill in any missing datasets from the automatically catalog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#make-a-versioned-dataset"&gt;
  &lt;/a&gt;
  make a versioned dataset
&lt;/h2&gt;

&lt;p&gt;Kedro has scaffolded &lt;code&gt;MemoryDataSet&lt;/code&gt; 's for us.  We will convert them to the appropriate dataset type and turn on versioning for our &lt;code&gt;int&lt;/code&gt; layer, which is the first point we save in our environment.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;raw_cars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://waylonwalker.com/cars.csv&lt;/span&gt;
&lt;span class="na"&gt;int_cars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.ParquetDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/int_cars.parquet&lt;/span&gt;
  &lt;span class="na"&gt;versioned&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Commit your changes to the catalog.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"create catalog"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#run-the-pipeline"&gt;
  &lt;/a&gt;
  run the pipeline
&lt;/h2&gt;

&lt;p&gt;Once we have the nodes and catalog setup, we can run the pipeline a few times to get some versioned data.  Each time we run, it will save a new version inside the &lt;code&gt;int_cars.parquet&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro run
kedro run
kedro run
kedro run
kedro run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🗒️ we put our data in the data directory. By default, this directory is included in the &lt;code&gt;.gitignore&lt;/code&gt; and will not be picked up by git.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#inspect-the-data"&gt;
  &lt;/a&gt;
  inspect the data
&lt;/h2&gt;

&lt;p&gt;Listing the files in &lt;code&gt;data/int_cars.parquet&lt;/code&gt; shows that I now have five different datasets available.  I can load old ones, but by default, kedro will load the latest one.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;data/int_cars.parquet

2021-07-05T15.24.53.164Z
2021-07-05T15.29.56.144Z
2021-07-05T15.30.23.101Z
2021-07-05T15.30.26.555Z
2021-07-05T15.31.12.688Z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🗒️ kedro sets the version at the timestamp that the session starts.  All datasets created within the same run will have the same version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#stack-on-an-incremental-dataset"&gt;
  &lt;/a&gt;
  stack on an incremental dataset
&lt;/h2&gt;

&lt;p&gt;This is where things get interesting. Kedro comes with an incremental dataset that will load all of the files from a particular directory into a dictionary where the keys are the filename of the dataset.  To load up all datasets into&lt;br&gt;
this dictionary all we need to do is add a new catalog entry that is a  &lt;code&gt;type: PartitionedDataSet&lt;/code&gt;, with a &lt;code&gt;path&lt;/code&gt; pointing to the same place as the original, and a &lt;code&gt;dataset&lt;/code&gt; type the same as the original.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;int_cars_partitioned&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PartitionedDataSet&lt;/span&gt;
  &lt;span class="na"&gt;dataset&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.ParquetDataSet&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/int_cars.parquet&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#catalog-list"&gt;
  &lt;/a&gt;
  catalog list
&lt;/h2&gt;

&lt;p&gt;Listing the catalog entries confirms that we have successfully added our new &lt;code&gt;PartitionedDataSet&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'raw_cars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'int_cars'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'int_cars_partitioned'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'parameters'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#loading-an-incremental-dataset"&gt;
  &lt;/a&gt;
  loading an incremental dataset
&lt;/h2&gt;

&lt;p&gt;Now we can easily load the datasets from every run we just did into a single dictionary, simply by running &lt;code&gt;context.catalog.load('int_cars_incremental')&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'int_cars_incremental'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;534&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_catalog&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Loading&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="sb"&gt;`int_cars_incremental`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IncrementalDataSet&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'2021-07-05T15.29.56.144Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;Unnamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;mpg&lt;/span&gt;  &lt;span class="n"&gt;cyl&lt;/span&gt;   &lt;span class="n"&gt;disp&lt;/span&gt;   &lt;span class="n"&gt;hp&lt;/span&gt;  &lt;span class="n"&gt;drat&lt;/span&gt;     &lt;span class="n"&gt;wt&lt;/span&gt;   &lt;span class="n"&gt;qsec&lt;/span&gt;  &lt;span class="n"&gt;vs&lt;/span&gt;  &lt;span class="n"&gt;am&lt;/span&gt;  &lt;span class="n"&gt;gear&lt;/span&gt;  &lt;span class="n"&gt;carb&lt;/span&gt;
 &lt;span class="mi"&gt;0&lt;/span&gt;             &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.620&lt;/span&gt;  &lt;span class="mf"&gt;16.46&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt; &lt;span class="n"&gt;Wag&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.875&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="n"&gt;Datsun&lt;/span&gt; &lt;span class="mi"&gt;710&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;108.0&lt;/span&gt;   &lt;span class="mi"&gt;93&lt;/span&gt;  &lt;span class="mf"&gt;3.85&lt;/span&gt;  &lt;span class="mf"&gt;2.320&lt;/span&gt;  &lt;span class="mf"&gt;18.61&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;        &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;258.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.215&lt;/span&gt;  &lt;span class="mf"&gt;19.44&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="n"&gt;Sportabout&lt;/span&gt;  &lt;span class="mf"&gt;18.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;               &lt;span class="n"&gt;Valiant&lt;/span&gt;  &lt;span class="mf"&gt;18.1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;225.0&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.460&lt;/span&gt;  &lt;span class="mf"&gt;20.22&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt;            &lt;span class="n"&gt;Duster&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;  &lt;span class="mf"&gt;14.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.21&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;15.84&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt;             &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="mf"&gt;24.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;146.7&lt;/span&gt;   &lt;span class="mi"&gt;62&lt;/span&gt;  &lt;span class="mf"&gt;3.69&lt;/span&gt;  &lt;span class="mf"&gt;3.190&lt;/span&gt;  &lt;span class="mf"&gt;20.00&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;140.8&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.150&lt;/span&gt;  &lt;span class="mf"&gt;22.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.30&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;10&lt;/span&gt;            &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="mf"&gt;17.8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;11&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;  &lt;span class="mf"&gt;16.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;4.070&lt;/span&gt;  &lt;span class="mf"&gt;17.40&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;12&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SL&lt;/span&gt;  &lt;span class="mf"&gt;17.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.730&lt;/span&gt;  &lt;span class="mf"&gt;17.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;13&lt;/span&gt;          &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SLC&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.780&lt;/span&gt;  &lt;span class="mf"&gt;18.00&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="n"&gt;Cadillac&lt;/span&gt; &lt;span class="n"&gt;Fleetwood&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;472.0&lt;/span&gt;  &lt;span class="mi"&gt;205&lt;/span&gt;  &lt;span class="mf"&gt;2.93&lt;/span&gt;  &lt;span class="mf"&gt;5.250&lt;/span&gt;  &lt;span class="mf"&gt;17.98&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="n"&gt;Lincoln&lt;/span&gt; &lt;span class="n"&gt;Continental&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;460.0&lt;/span&gt;  &lt;span class="mi"&gt;215&lt;/span&gt;  &lt;span class="mf"&gt;3.00&lt;/span&gt;  &lt;span class="mf"&gt;5.424&lt;/span&gt;  &lt;span class="mf"&gt;17.82&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="n"&gt;Chrysler&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;  &lt;span class="mf"&gt;14.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;440.0&lt;/span&gt;  &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;3.23&lt;/span&gt;  &lt;span class="mf"&gt;5.345&lt;/span&gt;  &lt;span class="mf"&gt;17.42&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;17&lt;/span&gt;             &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="mf"&gt;32.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;78.7&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;2.200&lt;/span&gt;  &lt;span class="mf"&gt;19.47&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;18&lt;/span&gt;          &lt;span class="n"&gt;Honda&lt;/span&gt; &lt;span class="n"&gt;Civic&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;75.7&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;  &lt;span class="mf"&gt;4.93&lt;/span&gt;  &lt;span class="mf"&gt;1.615&lt;/span&gt;  &lt;span class="mf"&gt;18.52&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;19&lt;/span&gt;       &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corolla&lt;/span&gt;  &lt;span class="mf"&gt;33.9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;71.1&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;1.835&lt;/span&gt;  &lt;span class="mf"&gt;19.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;20&lt;/span&gt;        &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corona&lt;/span&gt;  &lt;span class="mf"&gt;21.5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.1&lt;/span&gt;   &lt;span class="mi"&gt;97&lt;/span&gt;  &lt;span class="mf"&gt;3.70&lt;/span&gt;  &lt;span class="mf"&gt;2.465&lt;/span&gt;  &lt;span class="mf"&gt;20.01&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;21&lt;/span&gt;     &lt;span class="n"&gt;Dodge&lt;/span&gt; &lt;span class="n"&gt;Challenger&lt;/span&gt;  &lt;span class="mf"&gt;15.5&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;318.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.520&lt;/span&gt;  &lt;span class="mf"&gt;16.87&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="n"&gt;AMC&lt;/span&gt; &lt;span class="n"&gt;Javelin&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;304.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.435&lt;/span&gt;  &lt;span class="mf"&gt;17.30&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;23&lt;/span&gt;           &lt;span class="n"&gt;Camaro&lt;/span&gt; &lt;span class="n"&gt;Z28&lt;/span&gt;  &lt;span class="mf"&gt;13.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;350.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.73&lt;/span&gt;  &lt;span class="mf"&gt;3.840&lt;/span&gt;  &lt;span class="mf"&gt;15.41&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;24&lt;/span&gt;     &lt;span class="n"&gt;Pontiac&lt;/span&gt; &lt;span class="n"&gt;Firebird&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;400.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.845&lt;/span&gt;  &lt;span class="mf"&gt;17.05&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;25&lt;/span&gt;            &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mf"&gt;27.3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;79.0&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;1.935&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;26&lt;/span&gt;        &lt;span class="n"&gt;Porsche&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.3&lt;/span&gt;   &lt;span class="mi"&gt;91&lt;/span&gt;  &lt;span class="mf"&gt;4.43&lt;/span&gt;  &lt;span class="mf"&gt;2.140&lt;/span&gt;  &lt;span class="mf"&gt;16.70&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;27&lt;/span&gt;         &lt;span class="n"&gt;Lotus&lt;/span&gt; &lt;span class="n"&gt;Europa&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;95.1&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;  &lt;span class="mf"&gt;3.77&lt;/span&gt;  &lt;span class="mf"&gt;1.513&lt;/span&gt;  &lt;span class="mf"&gt;16.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;28&lt;/span&gt;       &lt;span class="n"&gt;Ford&lt;/span&gt; &lt;span class="n"&gt;Pantera&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="mf"&gt;15.8&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;351.0&lt;/span&gt;  &lt;span class="mi"&gt;264&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;3.170&lt;/span&gt;  &lt;span class="mf"&gt;14.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;29&lt;/span&gt;         &lt;span class="n"&gt;Ferrari&lt;/span&gt; &lt;span class="n"&gt;Dino&lt;/span&gt;  &lt;span class="mf"&gt;19.7&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;145.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.62&lt;/span&gt;  &lt;span class="mf"&gt;2.770&lt;/span&gt;  &lt;span class="mf"&gt;15.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
 &lt;span class="mi"&gt;30&lt;/span&gt;        &lt;span class="n"&gt;Maserati&lt;/span&gt; &lt;span class="n"&gt;Bora&lt;/span&gt;  &lt;span class="mf"&gt;15.0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;301.0&lt;/span&gt;  &lt;span class="mi"&gt;335&lt;/span&gt;  &lt;span class="mf"&gt;3.54&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;14.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
 &lt;span class="mi"&gt;31&lt;/span&gt;           &lt;span class="n"&gt;Volvo&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;121.0&lt;/span&gt;  &lt;span class="mi"&gt;109&lt;/span&gt;  &lt;span class="mf"&gt;4.11&lt;/span&gt;  &lt;span class="mf"&gt;2.780&lt;/span&gt;  &lt;span class="mf"&gt;18.60&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.23.101Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;Unnamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;mpg&lt;/span&gt;  &lt;span class="n"&gt;cyl&lt;/span&gt;   &lt;span class="n"&gt;disp&lt;/span&gt;   &lt;span class="n"&gt;hp&lt;/span&gt;  &lt;span class="n"&gt;drat&lt;/span&gt;     &lt;span class="n"&gt;wt&lt;/span&gt;   &lt;span class="n"&gt;qsec&lt;/span&gt;  &lt;span class="n"&gt;vs&lt;/span&gt;  &lt;span class="n"&gt;am&lt;/span&gt;  &lt;span class="n"&gt;gear&lt;/span&gt;  &lt;span class="n"&gt;carb&lt;/span&gt;
 &lt;span class="mi"&gt;0&lt;/span&gt;             &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.620&lt;/span&gt;  &lt;span class="mf"&gt;16.46&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt; &lt;span class="n"&gt;Wag&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.875&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="n"&gt;Datsun&lt;/span&gt; &lt;span class="mi"&gt;710&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;108.0&lt;/span&gt;   &lt;span class="mi"&gt;93&lt;/span&gt;  &lt;span class="mf"&gt;3.85&lt;/span&gt;  &lt;span class="mf"&gt;2.320&lt;/span&gt;  &lt;span class="mf"&gt;18.61&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;        &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;258.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.215&lt;/span&gt;  &lt;span class="mf"&gt;19.44&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="n"&gt;Sportabout&lt;/span&gt;  &lt;span class="mf"&gt;18.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;               &lt;span class="n"&gt;Valiant&lt;/span&gt;  &lt;span class="mf"&gt;18.1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;225.0&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.460&lt;/span&gt;  &lt;span class="mf"&gt;20.22&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt;            &lt;span class="n"&gt;Duster&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;  &lt;span class="mf"&gt;14.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.21&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;15.84&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt;             &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="mf"&gt;24.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;146.7&lt;/span&gt;   &lt;span class="mi"&gt;62&lt;/span&gt;  &lt;span class="mf"&gt;3.69&lt;/span&gt;  &lt;span class="mf"&gt;3.190&lt;/span&gt;  &lt;span class="mf"&gt;20.00&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;140.8&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.150&lt;/span&gt;  &lt;span class="mf"&gt;22.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.30&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;10&lt;/span&gt;            &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="mf"&gt;17.8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;11&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;  &lt;span class="mf"&gt;16.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;4.070&lt;/span&gt;  &lt;span class="mf"&gt;17.40&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;12&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SL&lt;/span&gt;  &lt;span class="mf"&gt;17.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.730&lt;/span&gt;  &lt;span class="mf"&gt;17.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;13&lt;/span&gt;          &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SLC&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.780&lt;/span&gt;  &lt;span class="mf"&gt;18.00&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="n"&gt;Cadillac&lt;/span&gt; &lt;span class="n"&gt;Fleetwood&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;472.0&lt;/span&gt;  &lt;span class="mi"&gt;205&lt;/span&gt;  &lt;span class="mf"&gt;2.93&lt;/span&gt;  &lt;span class="mf"&gt;5.250&lt;/span&gt;  &lt;span class="mf"&gt;17.98&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="n"&gt;Lincoln&lt;/span&gt; &lt;span class="n"&gt;Continental&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;460.0&lt;/span&gt;  &lt;span class="mi"&gt;215&lt;/span&gt;  &lt;span class="mf"&gt;3.00&lt;/span&gt;  &lt;span class="mf"&gt;5.424&lt;/span&gt;  &lt;span class="mf"&gt;17.82&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="n"&gt;Chrysler&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;  &lt;span class="mf"&gt;14.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;440.0&lt;/span&gt;  &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;3.23&lt;/span&gt;  &lt;span class="mf"&gt;5.345&lt;/span&gt;  &lt;span class="mf"&gt;17.42&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;17&lt;/span&gt;             &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="mf"&gt;32.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;78.7&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;2.200&lt;/span&gt;  &lt;span class="mf"&gt;19.47&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;18&lt;/span&gt;          &lt;span class="n"&gt;Honda&lt;/span&gt; &lt;span class="n"&gt;Civic&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;75.7&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;  &lt;span class="mf"&gt;4.93&lt;/span&gt;  &lt;span class="mf"&gt;1.615&lt;/span&gt;  &lt;span class="mf"&gt;18.52&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;19&lt;/span&gt;       &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corolla&lt;/span&gt;  &lt;span class="mf"&gt;33.9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;71.1&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;1.835&lt;/span&gt;  &lt;span class="mf"&gt;19.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;20&lt;/span&gt;        &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corona&lt;/span&gt;  &lt;span class="mf"&gt;21.5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.1&lt;/span&gt;   &lt;span class="mi"&gt;97&lt;/span&gt;  &lt;span class="mf"&gt;3.70&lt;/span&gt;  &lt;span class="mf"&gt;2.465&lt;/span&gt;  &lt;span class="mf"&gt;20.01&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;21&lt;/span&gt;     &lt;span class="n"&gt;Dodge&lt;/span&gt; &lt;span class="n"&gt;Challenger&lt;/span&gt;  &lt;span class="mf"&gt;15.5&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;318.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.520&lt;/span&gt;  &lt;span class="mf"&gt;16.87&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="n"&gt;AMC&lt;/span&gt; &lt;span class="n"&gt;Javelin&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;304.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.435&lt;/span&gt;  &lt;span class="mf"&gt;17.30&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;23&lt;/span&gt;           &lt;span class="n"&gt;Camaro&lt;/span&gt; &lt;span class="n"&gt;Z28&lt;/span&gt;  &lt;span class="mf"&gt;13.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;350.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.73&lt;/span&gt;  &lt;span class="mf"&gt;3.840&lt;/span&gt;  &lt;span class="mf"&gt;15.41&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;24&lt;/span&gt;     &lt;span class="n"&gt;Pontiac&lt;/span&gt; &lt;span class="n"&gt;Firebird&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;400.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.845&lt;/span&gt;  &lt;span class="mf"&gt;17.05&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;25&lt;/span&gt;            &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mf"&gt;27.3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;79.0&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;1.935&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;26&lt;/span&gt;        &lt;span class="n"&gt;Porsche&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.3&lt;/span&gt;   &lt;span class="mi"&gt;91&lt;/span&gt;  &lt;span class="mf"&gt;4.43&lt;/span&gt;  &lt;span class="mf"&gt;2.140&lt;/span&gt;  &lt;span class="mf"&gt;16.70&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;27&lt;/span&gt;         &lt;span class="n"&gt;Lotus&lt;/span&gt; &lt;span class="n"&gt;Europa&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;95.1&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;  &lt;span class="mf"&gt;3.77&lt;/span&gt;  &lt;span class="mf"&gt;1.513&lt;/span&gt;  &lt;span class="mf"&gt;16.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;28&lt;/span&gt;       &lt;span class="n"&gt;Ford&lt;/span&gt; &lt;span class="n"&gt;Pantera&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="mf"&gt;15.8&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;351.0&lt;/span&gt;  &lt;span class="mi"&gt;264&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;3.170&lt;/span&gt;  &lt;span class="mf"&gt;14.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;29&lt;/span&gt;         &lt;span class="n"&gt;Ferrari&lt;/span&gt; &lt;span class="n"&gt;Dino&lt;/span&gt;  &lt;span class="mf"&gt;19.7&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;145.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.62&lt;/span&gt;  &lt;span class="mf"&gt;2.770&lt;/span&gt;  &lt;span class="mf"&gt;15.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
 &lt;span class="mi"&gt;30&lt;/span&gt;        &lt;span class="n"&gt;Maserati&lt;/span&gt; &lt;span class="n"&gt;Bora&lt;/span&gt;  &lt;span class="mf"&gt;15.0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;301.0&lt;/span&gt;  &lt;span class="mi"&gt;335&lt;/span&gt;  &lt;span class="mf"&gt;3.54&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;14.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
 &lt;span class="mi"&gt;31&lt;/span&gt;           &lt;span class="n"&gt;Volvo&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;121.0&lt;/span&gt;  &lt;span class="mi"&gt;109&lt;/span&gt;  &lt;span class="mf"&gt;4.11&lt;/span&gt;  &lt;span class="mf"&gt;2.780&lt;/span&gt;  &lt;span class="mf"&gt;18.60&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.26.555Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;Unnamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;mpg&lt;/span&gt;  &lt;span class="n"&gt;cyl&lt;/span&gt;   &lt;span class="n"&gt;disp&lt;/span&gt;   &lt;span class="n"&gt;hp&lt;/span&gt;  &lt;span class="n"&gt;drat&lt;/span&gt;     &lt;span class="n"&gt;wt&lt;/span&gt;   &lt;span class="n"&gt;qsec&lt;/span&gt;  &lt;span class="n"&gt;vs&lt;/span&gt;  &lt;span class="n"&gt;am&lt;/span&gt;  &lt;span class="n"&gt;gear&lt;/span&gt;  &lt;span class="n"&gt;carb&lt;/span&gt;
 &lt;span class="mi"&gt;0&lt;/span&gt;             &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.620&lt;/span&gt;  &lt;span class="mf"&gt;16.46&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt; &lt;span class="n"&gt;Wag&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.875&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="n"&gt;Datsun&lt;/span&gt; &lt;span class="mi"&gt;710&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;108.0&lt;/span&gt;   &lt;span class="mi"&gt;93&lt;/span&gt;  &lt;span class="mf"&gt;3.85&lt;/span&gt;  &lt;span class="mf"&gt;2.320&lt;/span&gt;  &lt;span class="mf"&gt;18.61&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;        &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;258.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.215&lt;/span&gt;  &lt;span class="mf"&gt;19.44&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="n"&gt;Sportabout&lt;/span&gt;  &lt;span class="mf"&gt;18.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;               &lt;span class="n"&gt;Valiant&lt;/span&gt;  &lt;span class="mf"&gt;18.1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;225.0&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.460&lt;/span&gt;  &lt;span class="mf"&gt;20.22&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt;            &lt;span class="n"&gt;Duster&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;  &lt;span class="mf"&gt;14.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.21&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;15.84&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt;             &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="mf"&gt;24.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;146.7&lt;/span&gt;   &lt;span class="mi"&gt;62&lt;/span&gt;  &lt;span class="mf"&gt;3.69&lt;/span&gt;  &lt;span class="mf"&gt;3.190&lt;/span&gt;  &lt;span class="mf"&gt;20.00&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;140.8&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.150&lt;/span&gt;  &lt;span class="mf"&gt;22.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.30&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;10&lt;/span&gt;            &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="mf"&gt;17.8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;11&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;  &lt;span class="mf"&gt;16.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;4.070&lt;/span&gt;  &lt;span class="mf"&gt;17.40&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;12&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SL&lt;/span&gt;  &lt;span class="mf"&gt;17.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.730&lt;/span&gt;  &lt;span class="mf"&gt;17.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;13&lt;/span&gt;          &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SLC&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.780&lt;/span&gt;  &lt;span class="mf"&gt;18.00&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="n"&gt;Cadillac&lt;/span&gt; &lt;span class="n"&gt;Fleetwood&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;472.0&lt;/span&gt;  &lt;span class="mi"&gt;205&lt;/span&gt;  &lt;span class="mf"&gt;2.93&lt;/span&gt;  &lt;span class="mf"&gt;5.250&lt;/span&gt;  &lt;span class="mf"&gt;17.98&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="n"&gt;Lincoln&lt;/span&gt; &lt;span class="n"&gt;Continental&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;460.0&lt;/span&gt;  &lt;span class="mi"&gt;215&lt;/span&gt;  &lt;span class="mf"&gt;3.00&lt;/span&gt;  &lt;span class="mf"&gt;5.424&lt;/span&gt;  &lt;span class="mf"&gt;17.82&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="n"&gt;Chrysler&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;  &lt;span class="mf"&gt;14.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;440.0&lt;/span&gt;  &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;3.23&lt;/span&gt;  &lt;span class="mf"&gt;5.345&lt;/span&gt;  &lt;span class="mf"&gt;17.42&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;17&lt;/span&gt;             &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="mf"&gt;32.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;78.7&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;2.200&lt;/span&gt;  &lt;span class="mf"&gt;19.47&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;18&lt;/span&gt;          &lt;span class="n"&gt;Honda&lt;/span&gt; &lt;span class="n"&gt;Civic&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;75.7&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;  &lt;span class="mf"&gt;4.93&lt;/span&gt;  &lt;span class="mf"&gt;1.615&lt;/span&gt;  &lt;span class="mf"&gt;18.52&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;19&lt;/span&gt;       &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corolla&lt;/span&gt;  &lt;span class="mf"&gt;33.9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;71.1&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;1.835&lt;/span&gt;  &lt;span class="mf"&gt;19.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;20&lt;/span&gt;        &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corona&lt;/span&gt;  &lt;span class="mf"&gt;21.5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.1&lt;/span&gt;   &lt;span class="mi"&gt;97&lt;/span&gt;  &lt;span class="mf"&gt;3.70&lt;/span&gt;  &lt;span class="mf"&gt;2.465&lt;/span&gt;  &lt;span class="mf"&gt;20.01&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;21&lt;/span&gt;     &lt;span class="n"&gt;Dodge&lt;/span&gt; &lt;span class="n"&gt;Challenger&lt;/span&gt;  &lt;span class="mf"&gt;15.5&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;318.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.520&lt;/span&gt;  &lt;span class="mf"&gt;16.87&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="n"&gt;AMC&lt;/span&gt; &lt;span class="n"&gt;Javelin&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;304.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.435&lt;/span&gt;  &lt;span class="mf"&gt;17.30&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;23&lt;/span&gt;           &lt;span class="n"&gt;Camaro&lt;/span&gt; &lt;span class="n"&gt;Z28&lt;/span&gt;  &lt;span class="mf"&gt;13.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;350.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.73&lt;/span&gt;  &lt;span class="mf"&gt;3.840&lt;/span&gt;  &lt;span class="mf"&gt;15.41&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;24&lt;/span&gt;     &lt;span class="n"&gt;Pontiac&lt;/span&gt; &lt;span class="n"&gt;Firebird&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;400.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.845&lt;/span&gt;  &lt;span class="mf"&gt;17.05&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;25&lt;/span&gt;            &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mf"&gt;27.3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;79.0&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;1.935&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;26&lt;/span&gt;        &lt;span class="n"&gt;Porsche&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.3&lt;/span&gt;   &lt;span class="mi"&gt;91&lt;/span&gt;  &lt;span class="mf"&gt;4.43&lt;/span&gt;  &lt;span class="mf"&gt;2.140&lt;/span&gt;  &lt;span class="mf"&gt;16.70&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;27&lt;/span&gt;         &lt;span class="n"&gt;Lotus&lt;/span&gt; &lt;span class="n"&gt;Europa&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;95.1&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;  &lt;span class="mf"&gt;3.77&lt;/span&gt;  &lt;span class="mf"&gt;1.513&lt;/span&gt;  &lt;span class="mf"&gt;16.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;28&lt;/span&gt;       &lt;span class="n"&gt;Ford&lt;/span&gt; &lt;span class="n"&gt;Pantera&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="mf"&gt;15.8&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;351.0&lt;/span&gt;  &lt;span class="mi"&gt;264&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;3.170&lt;/span&gt;  &lt;span class="mf"&gt;14.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;29&lt;/span&gt;         &lt;span class="n"&gt;Ferrari&lt;/span&gt; &lt;span class="n"&gt;Dino&lt;/span&gt;  &lt;span class="mf"&gt;19.7&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;145.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.62&lt;/span&gt;  &lt;span class="mf"&gt;2.770&lt;/span&gt;  &lt;span class="mf"&gt;15.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
 &lt;span class="mi"&gt;30&lt;/span&gt;        &lt;span class="n"&gt;Maserati&lt;/span&gt; &lt;span class="n"&gt;Bora&lt;/span&gt;  &lt;span class="mf"&gt;15.0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;301.0&lt;/span&gt;  &lt;span class="mi"&gt;335&lt;/span&gt;  &lt;span class="mf"&gt;3.54&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;14.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
 &lt;span class="mi"&gt;31&lt;/span&gt;           &lt;span class="n"&gt;Volvo&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;121.0&lt;/span&gt;  &lt;span class="mi"&gt;109&lt;/span&gt;  &lt;span class="mf"&gt;4.11&lt;/span&gt;  &lt;span class="mf"&gt;2.780&lt;/span&gt;  &lt;span class="mf"&gt;18.60&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.31.12.688Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="n"&gt;Unnamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="n"&gt;mpg&lt;/span&gt;  &lt;span class="n"&gt;cyl&lt;/span&gt;   &lt;span class="n"&gt;disp&lt;/span&gt;   &lt;span class="n"&gt;hp&lt;/span&gt;  &lt;span class="n"&gt;drat&lt;/span&gt;     &lt;span class="n"&gt;wt&lt;/span&gt;   &lt;span class="n"&gt;qsec&lt;/span&gt;  &lt;span class="n"&gt;vs&lt;/span&gt;  &lt;span class="n"&gt;am&lt;/span&gt;  &lt;span class="n"&gt;gear&lt;/span&gt;  &lt;span class="n"&gt;carb&lt;/span&gt;
 &lt;span class="mi"&gt;0&lt;/span&gt;             &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.620&lt;/span&gt;  &lt;span class="mf"&gt;16.46&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;Mazda&lt;/span&gt; &lt;span class="n"&gt;RX4&lt;/span&gt; &lt;span class="n"&gt;Wag&lt;/span&gt;  &lt;span class="mf"&gt;21.0&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;160.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.90&lt;/span&gt;  &lt;span class="mf"&gt;2.875&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="n"&gt;Datsun&lt;/span&gt; &lt;span class="mi"&gt;710&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;108.0&lt;/span&gt;   &lt;span class="mi"&gt;93&lt;/span&gt;  &lt;span class="mf"&gt;3.85&lt;/span&gt;  &lt;span class="mf"&gt;2.320&lt;/span&gt;  &lt;span class="mf"&gt;18.61&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;        &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;258.0&lt;/span&gt;  &lt;span class="mi"&gt;110&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.215&lt;/span&gt;  &lt;span class="mf"&gt;19.44&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;Hornet&lt;/span&gt; &lt;span class="n"&gt;Sportabout&lt;/span&gt;  &lt;span class="mf"&gt;18.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;17.02&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;               &lt;span class="n"&gt;Valiant&lt;/span&gt;  &lt;span class="mf"&gt;18.1&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;225.0&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.460&lt;/span&gt;  &lt;span class="mf"&gt;20.22&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt;            &lt;span class="n"&gt;Duster&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;  &lt;span class="mf"&gt;14.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;360.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.21&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;15.84&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt;             &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="mf"&gt;24.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;146.7&lt;/span&gt;   &lt;span class="mi"&gt;62&lt;/span&gt;  &lt;span class="mf"&gt;3.69&lt;/span&gt;  &lt;span class="mf"&gt;3.190&lt;/span&gt;  &lt;span class="mf"&gt;20.00&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;22.8&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;140.8&lt;/span&gt;   &lt;span class="mi"&gt;95&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.150&lt;/span&gt;  &lt;span class="mf"&gt;22.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;              &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.30&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;10&lt;/span&gt;            &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="mf"&gt;17.8&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;167.6&lt;/span&gt;  &lt;span class="mi"&gt;123&lt;/span&gt;  &lt;span class="mf"&gt;3.92&lt;/span&gt;  &lt;span class="mf"&gt;3.440&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;11&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;  &lt;span class="mf"&gt;16.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;4.070&lt;/span&gt;  &lt;span class="mf"&gt;17.40&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;12&lt;/span&gt;           &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SL&lt;/span&gt;  &lt;span class="mf"&gt;17.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.730&lt;/span&gt;  &lt;span class="mf"&gt;17.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;13&lt;/span&gt;          &lt;span class="n"&gt;Merc&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="n"&gt;SLC&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;275.8&lt;/span&gt;  &lt;span class="mi"&gt;180&lt;/span&gt;  &lt;span class="mf"&gt;3.07&lt;/span&gt;  &lt;span class="mf"&gt;3.780&lt;/span&gt;  &lt;span class="mf"&gt;18.00&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="mi"&gt;14&lt;/span&gt;   &lt;span class="n"&gt;Cadillac&lt;/span&gt; &lt;span class="n"&gt;Fleetwood&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;472.0&lt;/span&gt;  &lt;span class="mi"&gt;205&lt;/span&gt;  &lt;span class="mf"&gt;2.93&lt;/span&gt;  &lt;span class="mf"&gt;5.250&lt;/span&gt;  &lt;span class="mf"&gt;17.98&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="n"&gt;Lincoln&lt;/span&gt; &lt;span class="n"&gt;Continental&lt;/span&gt;  &lt;span class="mf"&gt;10.4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;460.0&lt;/span&gt;  &lt;span class="mi"&gt;215&lt;/span&gt;  &lt;span class="mf"&gt;3.00&lt;/span&gt;  &lt;span class="mf"&gt;5.424&lt;/span&gt;  &lt;span class="mf"&gt;17.82&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;16&lt;/span&gt;    &lt;span class="n"&gt;Chrysler&lt;/span&gt; &lt;span class="n"&gt;Imperial&lt;/span&gt;  &lt;span class="mf"&gt;14.7&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;440.0&lt;/span&gt;  &lt;span class="mi"&gt;230&lt;/span&gt;  &lt;span class="mf"&gt;3.23&lt;/span&gt;  &lt;span class="mf"&gt;5.345&lt;/span&gt;  &lt;span class="mf"&gt;17.42&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;17&lt;/span&gt;             &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  &lt;span class="mf"&gt;32.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;78.7&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;2.200&lt;/span&gt;  &lt;span class="mf"&gt;19.47&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;18&lt;/span&gt;          &lt;span class="n"&gt;Honda&lt;/span&gt; &lt;span class="n"&gt;Civic&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;75.7&lt;/span&gt;   &lt;span class="mi"&gt;52&lt;/span&gt;  &lt;span class="mf"&gt;4.93&lt;/span&gt;  &lt;span class="mf"&gt;1.615&lt;/span&gt;  &lt;span class="mf"&gt;18.52&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;19&lt;/span&gt;       &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corolla&lt;/span&gt;  &lt;span class="mf"&gt;33.9&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;71.1&lt;/span&gt;   &lt;span class="mi"&gt;65&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;1.835&lt;/span&gt;  &lt;span class="mf"&gt;19.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;20&lt;/span&gt;        &lt;span class="n"&gt;Toyota&lt;/span&gt; &lt;span class="n"&gt;Corona&lt;/span&gt;  &lt;span class="mf"&gt;21.5&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.1&lt;/span&gt;   &lt;span class="mi"&gt;97&lt;/span&gt;  &lt;span class="mf"&gt;3.70&lt;/span&gt;  &lt;span class="mf"&gt;2.465&lt;/span&gt;  &lt;span class="mf"&gt;20.01&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;21&lt;/span&gt;     &lt;span class="n"&gt;Dodge&lt;/span&gt; &lt;span class="n"&gt;Challenger&lt;/span&gt;  &lt;span class="mf"&gt;15.5&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;318.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;2.76&lt;/span&gt;  &lt;span class="mf"&gt;3.520&lt;/span&gt;  &lt;span class="mf"&gt;16.87&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="n"&gt;AMC&lt;/span&gt; &lt;span class="n"&gt;Javelin&lt;/span&gt;  &lt;span class="mf"&gt;15.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;304.0&lt;/span&gt;  &lt;span class="mi"&gt;150&lt;/span&gt;  &lt;span class="mf"&gt;3.15&lt;/span&gt;  &lt;span class="mf"&gt;3.435&lt;/span&gt;  &lt;span class="mf"&gt;17.30&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;23&lt;/span&gt;           &lt;span class="n"&gt;Camaro&lt;/span&gt; &lt;span class="n"&gt;Z28&lt;/span&gt;  &lt;span class="mf"&gt;13.3&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;350.0&lt;/span&gt;  &lt;span class="mi"&gt;245&lt;/span&gt;  &lt;span class="mf"&gt;3.73&lt;/span&gt;  &lt;span class="mf"&gt;3.840&lt;/span&gt;  &lt;span class="mf"&gt;15.41&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;24&lt;/span&gt;     &lt;span class="n"&gt;Pontiac&lt;/span&gt; &lt;span class="n"&gt;Firebird&lt;/span&gt;  &lt;span class="mf"&gt;19.2&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;400.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.08&lt;/span&gt;  &lt;span class="mf"&gt;3.845&lt;/span&gt;  &lt;span class="mf"&gt;17.05&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;25&lt;/span&gt;            &lt;span class="n"&gt;Fiat&lt;/span&gt; &lt;span class="n"&gt;X1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mf"&gt;27.3&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;79.0&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mf"&gt;4.08&lt;/span&gt;  &lt;span class="mf"&gt;1.935&lt;/span&gt;  &lt;span class="mf"&gt;18.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="mi"&gt;26&lt;/span&gt;        &lt;span class="n"&gt;Porsche&lt;/span&gt; &lt;span class="mi"&gt;914&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;120.3&lt;/span&gt;   &lt;span class="mi"&gt;91&lt;/span&gt;  &lt;span class="mf"&gt;4.43&lt;/span&gt;  &lt;span class="mf"&gt;2.140&lt;/span&gt;  &lt;span class="mf"&gt;16.70&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;27&lt;/span&gt;         &lt;span class="n"&gt;Lotus&lt;/span&gt; &lt;span class="n"&gt;Europa&lt;/span&gt;  &lt;span class="mf"&gt;30.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;95.1&lt;/span&gt;  &lt;span class="mi"&gt;113&lt;/span&gt;  &lt;span class="mf"&gt;3.77&lt;/span&gt;  &lt;span class="mf"&gt;1.513&lt;/span&gt;  &lt;span class="mf"&gt;16.90&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="mi"&gt;28&lt;/span&gt;       &lt;span class="n"&gt;Ford&lt;/span&gt; &lt;span class="n"&gt;Pantera&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;  &lt;span class="mf"&gt;15.8&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;351.0&lt;/span&gt;  &lt;span class="mi"&gt;264&lt;/span&gt;  &lt;span class="mf"&gt;4.22&lt;/span&gt;  &lt;span class="mf"&gt;3.170&lt;/span&gt;  &lt;span class="mf"&gt;14.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="mi"&gt;29&lt;/span&gt;         &lt;span class="n"&gt;Ferrari&lt;/span&gt; &lt;span class="n"&gt;Dino&lt;/span&gt;  &lt;span class="mf"&gt;19.7&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mf"&gt;145.0&lt;/span&gt;  &lt;span class="mi"&gt;175&lt;/span&gt;  &lt;span class="mf"&gt;3.62&lt;/span&gt;  &lt;span class="mf"&gt;2.770&lt;/span&gt;  &lt;span class="mf"&gt;15.50&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
 &lt;span class="mi"&gt;30&lt;/span&gt;        &lt;span class="n"&gt;Maserati&lt;/span&gt; &lt;span class="n"&gt;Bora&lt;/span&gt;  &lt;span class="mf"&gt;15.0&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mf"&gt;301.0&lt;/span&gt;  &lt;span class="mi"&gt;335&lt;/span&gt;  &lt;span class="mf"&gt;3.54&lt;/span&gt;  &lt;span class="mf"&gt;3.570&lt;/span&gt;  &lt;span class="mf"&gt;14.60&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
 &lt;span class="mi"&gt;31&lt;/span&gt;           &lt;span class="n"&gt;Volvo&lt;/span&gt; &lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="mf"&gt;21.4&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mf"&gt;121.0&lt;/span&gt;  &lt;span class="mi"&gt;109&lt;/span&gt;  &lt;span class="mf"&gt;4.11&lt;/span&gt;  &lt;span class="mf"&gt;2.780&lt;/span&gt;  &lt;span class="mf"&gt;18.60&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;👆 notice that incremental datasets are all loaded for you, its a dict of &lt;code&gt;filepath:dataset&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#stack-on-a-partitioned-dataset"&gt;
  &lt;/a&gt;
  stack on a partitioned dataset
&lt;/h2&gt;

&lt;p&gt;Let's take a look at a similar type of dataset called &lt;code&gt;PartitionedDataSet&lt;/code&gt;.  We can add it to the catalog in a very similar way to how we added the &lt;code&gt;IncrementalDataSet&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;int_cars_incremental&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IncrementalDataSet&lt;/span&gt;
  &lt;span class="na"&gt;dataset&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.ParquetDataSet&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/int_cars.parquet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#loading-a-partitioned-dataset"&gt;
  &lt;/a&gt;
  loading a partitioned dataset
&lt;/h2&gt;

&lt;p&gt;Note that we get a dict with the same keys as before, but this time the values are a load function rather than loaded data.  Partitioned datasets can be helpful if you are operating on datasets that take up more memory than you have available. In our case of coupling this with versioned datasets, its likely to grow quite large, so &lt;code&gt;PartitionedDataSet&lt;/code&gt; 's are likely a better option for this use.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'int_cars_partitioned'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;253&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_catalog&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Loading&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="sb"&gt;`int_cars_partitioned`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionedDataSet&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'2021-07-05T15.29.56.144Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;AbstractVersionedDataSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parquet_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParquetDataSet&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f4bb1570820&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.23.101Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;AbstractVersionedDataSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parquet_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParquetDataSet&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f4bb1570850&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.26.555Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;AbstractVersionedDataSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parquet_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParquetDataSet&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f4bb1570910&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.31.12.688Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;AbstractVersionedDataSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parquet_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParquetDataSet&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f4bb15709a0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#incremental-vs-partitioned"&gt;
  &lt;/a&gt;
  incremental vs. partitioned
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;IncrementalDataSet&lt;/code&gt; 's and &lt;code&gt;PartitionedDataSet&lt;/code&gt; 's are very similar as they give you access to a whole directory of data that uses the same underlying dataset loader.  The significant difference is whether you want your data pre-loaded or if you want to load and dispose of it as you iterate over it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;incremental loads the data&lt;/li&gt;
&lt;li&gt;partitioned give a load function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#creating-nodes-with-partitioned-datasets"&gt;
  &lt;/a&gt;
  creating nodes with partitioned datasets
&lt;/h2&gt;

&lt;p&gt;Let's create a node with this &lt;code&gt;PartitionedDataSet&lt;/code&gt; to collect stats on our dataset over time.  This node does a dict comprehension to get the length of each version that we pulled.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timeseries_partitioned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timeseries_partitioned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'int_cars_partitioned'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'int_cars_timeseries_partitioned'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'create_int_cars_timeseries_partitioned'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🗒️ note that inside of the dict comprehension car is a load function that we need to call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-nodes-with-incremental-datasets"&gt;
  &lt;/a&gt;
  creating nodes with incremental datasets
&lt;/h2&gt;

&lt;p&gt;Doing the same node with our &lt;code&gt;IncrementalDataSet&lt;/code&gt; looks very similar, except this time car is loaded data inside of the dict comprehension, not a function that we need to call.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timeseries_incremental&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timeseries_incremental&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'int_cars_incremental'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'int_cars_timeseries_incremental'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'create_int_cars_timeseries_incremental'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#more-catalog-entries"&gt;
  &lt;/a&gt;
  More catalog entries
&lt;/h2&gt;

&lt;p&gt;After adding those nodes, we can add the catalog entries again with the command line.  This will not overwrite any of the datasets we just created. It will only add to it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; cars_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;int_cars_timeseries_partitioned&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;span class="na"&gt;int_cars_timeseries_incremental&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;int_cars_timeseries_partitioned&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pickle.PickleDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/int_cars_timeseries_partitioned.parquet&lt;/span&gt;
&lt;span class="na"&gt;int_cars_timeseries_incremental&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pickle.PickleDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/int_cars_timeseries_incremental.parquet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#loading-the-new-datasets"&gt;
  &lt;/a&gt;
  Loading the new datasets
&lt;/h2&gt;

&lt;p&gt;Loading the two dtasets that we just created show that we have the ended up with the same result using both incremental and partitioned datasets.  This result is a dictionary of filepaths mapped to the size of the dataset.  Since the default filepaths are timestamps we could start doing some time series analysis to see how our dataset is changing over time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'int_cars_timeseries_incremental'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;014&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_catalog&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Loading&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="sb"&gt;`int_cars_timeseries_incremental`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PickleDataSet&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'2021-07-05T15.29.56.144Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.23.101Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.26.555Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.31.12.688Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T16.43.43.088Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'int_cars_timeseries_partitioned'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;223&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;kedro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_catalog&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Loading&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="sb"&gt;`int_cars_timeseries_partitioned`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PickleDataSet&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'2021-07-05T15.29.56.144Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.23.101Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.30.26.555Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T15.31.12.688Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T16.43.43.088Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'2021-07-05T16.50.46.686Z/int_cars.parquet'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/kedro-my-data-is-not-a-table-2kdi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;📄 Kedro - My Data Is Not A Table&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Jan 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#data&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ I have a full article on creating datasets that are not tabular datasets using pickle.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;This post was primarily built live on &lt;a href="https://twitch.tv/waylonwalker"&gt;https://twitch.tv/waylonwalker&lt;/a&gt;, give me a follow and join in the live show if that is something that interests you.&lt;/p&gt;

</description>
      <category>kedro</category>
      <category>python</category>
    </item>
    <item>
      <title>Variables</title>
      <author>Eduardo Julião</author>
      <pubDate>Thu, 08 Jul 2021 14:49:47 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/variables-3bb1</link>
      <guid>https://dev.to/eduardojuliao/variables-3bb1</guid>
      <description>&lt;p&gt;A variable is a value that can change in your program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-variable"&gt;
  &lt;/a&gt;
  Creating a variable
&lt;/h2&gt;

&lt;p&gt;The structure to create a variable consists of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-type"&gt;
  &lt;/a&gt;
  Data Type
&lt;/h3&gt;

&lt;p&gt;Tells the program what type of variable it is, these can be &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt; and others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name"&gt;
  &lt;/a&gt;
  Name
&lt;/h3&gt;

&lt;p&gt;A unique name to identify it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#value"&gt;
  &lt;/a&gt;
  Value
&lt;/h3&gt;

&lt;p&gt;The value of the variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5.67&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7.90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1.23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that a string is defined by using doble quotes &lt;code&gt;"&lt;/code&gt;, while a char is defined by using single quotes &lt;code&gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#array-variables"&gt;
  &lt;/a&gt;
  Array variables
&lt;/h2&gt;

&lt;p&gt;We can also create a variable type that is the &lt;code&gt;array&lt;/code&gt; type, these variables are a list of values of a certain type.&lt;/p&gt;

&lt;p&gt;Once an array is created, you can update its values, re-assign, but not extend its size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-array"&gt;
  &lt;/a&gt;
  Creating an array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;or&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrays are defined by adding &lt;code&gt;[]&lt;/code&gt; after the data type, and can be assigned using one of the two forms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form-1"&gt;
  &lt;/a&gt;
  Form 1
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[]&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]{&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valiue2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you create an array, that has a length of 3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int[] arrayOfIntegers = new []{ 1, 2, 3 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this form, you don't need to specify the&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form-2"&gt;
  &lt;/a&gt;
  Form 2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[]&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you create an array, that has a length of 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int[] arrayOfIntegers = new int[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When creating an array in this form, the array will have 4 entries and all set to its default value, which in this case is 0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assigning-values"&gt;
  &lt;/a&gt;
  Assigning values
&lt;/h3&gt;

&lt;p&gt;You can assign values to an array by using its index, which starts at 0 and ends with its length - 1;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;arrayOfIntegers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;arrayOfIntegers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;arrayOfIntegers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;arrayOfIntegers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;You can create variables that cannot change after being initialized. These types of variables are called constants.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;constantIntegerValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Running Jaeger Locally: How to Get Started</title>
      <author>Amir Blum</author>
      <pubDate>Thu, 08 Jul 2021 14:33:22 +0000</pubDate>
      <link>https://dev.to/aspecto/running-jaeger-locally-how-to-get-started-51g3</link>
      <guid>https://dev.to/aspecto/running-jaeger-locally-how-to-get-started-51g3</guid>
      <description>&lt;p&gt;In this article, you’ll learn how to run Jaeger locally, why and when you should do it, as well as what are Jaeger’s limitations when running locally.&lt;/p&gt;

&lt;p&gt;Let’s start with the basics: a distributed tracing system is generally composed of client and backend components.&lt;/p&gt;

&lt;p&gt;I will touch briefly on client components, though most of this post is about backend components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-components"&gt;
  &lt;/a&gt;
  Client Components
&lt;/h2&gt;

&lt;p&gt;The client part is usually a set of libraries installed inside an application which “instrument” it — generating a “span” object for each interesting event happening in runtime inside the service.&lt;/p&gt;

&lt;p&gt;A modern and recommended open-source client SDK that does that is &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spans on the client alone are meaningless — they need to be accessible to a person who consumes them. Consumers are usually dev-ops teams monitoring a system or developers maintaining the system and adding new features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trace-usages"&gt;
  &lt;/a&gt;
  Trace Usages
&lt;/h3&gt;

&lt;p&gt;There are many ways in which collected trace data can be used and provide value. These are the common ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggregate spans to trace — group all spans (events) which are part of the same trace (logical operation) arriving from different distributed services, into a single entity&lt;/li&gt;
&lt;li&gt;Query the collected data (show me all traces in the last hour starting at endpoint &lt;code&gt;GET /users&lt;/code&gt; in service X)&lt;/li&gt;
&lt;li&gt;Visualize the data — usually in a graph, or timeline&lt;/li&gt;
&lt;li&gt;Find errors (exceptions, 500s, etc) and investigate their root-cause&lt;/li&gt;
&lt;li&gt;Investigate performance bottlenecks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backend-components"&gt;
  &lt;/a&gt;
  Backend Components
&lt;/h2&gt;

&lt;p&gt;To fulfill the requirements above, we need to set up backend components.&lt;/p&gt;

&lt;p&gt;They are used to collect spans from client components, process them, store them in a database, expose an API for the data and UI to view traces and perform queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; (a &lt;a href="https://www.cncf.io/"&gt;CNCF&lt;/a&gt; graduated project) is a popular open-source project with backend components that does that and is easy to set up.&lt;/p&gt;

&lt;p&gt;To use Jaeger in production, it is recommended to install it in a cloud environment with load-balancing, auto-scaling, replications, and all that jazz.&lt;/p&gt;

&lt;p&gt;However, it is sometimes enough to just run it locally in a lightweight and simple setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-locally"&gt;
  &lt;/a&gt;
  Running Locally
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/docs/1.23/getting-started/"&gt;The recommended&lt;/a&gt; approach for running Jaeger backend locally is to use docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -d --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -p 5775:5775/udp \
  -p 6831:6831/udp \
  -p 6832:6832/udp \
  -p 5778:5778 \
  -p 16686:16686 \
  -p 14268:14268 \
  -p 14250:14250 \
  -p 9411:9411 \
  jaegertracing/all-in-one:1.23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And access the UI in &lt;a href="http://localhost:16686"&gt;http://localhost:16686&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can then configure an Opentelemetry Client SDK installation or &lt;a href="https://github.com/open-telemetry/opentelemetry-collector"&gt;OpenTelemetry Collector&lt;/a&gt; to use Jaeger exporter and send trace data to this local Jaeger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NodeTracerProvider } from "@opentelemetry/node";
import { SimpleSpanProcessor } from "@opentelemetry/tracing";
import { JaegerExporter } from "@opentelemetry/exporter-jaeger";

const provider = new NodeTracerProvider();
provider.addSpanProcessor(new SimpleSpanProcessor(new JaegerExporter()));
provider.register();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(This is how exporting data to local jaeger looks like in nodejs).&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-local-jaeger-benefits"&gt;
  &lt;/a&gt;
  Running Local Jaeger: Benefits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-faster-debugging"&gt;
  &lt;/a&gt;
  1. Faster Debugging
&lt;/h3&gt;

&lt;p&gt;If you work on a service codebase (e.g., fixing a bug, developing a new feature, or implementing integration to other services/databases/messaging systems, etc.), most likely that this is what you do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You start an instance of the service on your local dev station&lt;/li&gt;
&lt;li&gt;Send traffic to it to test your changes&lt;/li&gt;
&lt;li&gt;Validate the behavior you were expecting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By instrumenting it locally, you can debug development issues faster.&lt;/p&gt;

&lt;p&gt;For example: find the point in your app where an error occurred with less logging to console, breakpoints, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIvEULSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mbq1ax2y0mfkt887g2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIvEULSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mbq1ax2y0mfkt887g2t.png" alt="An example of a trace in Jaeger showing error while accessing Redis key as a list"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;An example of a trace in Jaeger showing error while accessing Redis key as a list (the red underlines are not part of the Jaeger UI)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-running-tests"&gt;
  &lt;/a&gt;
  2. Running Tests
&lt;/h3&gt;

&lt;p&gt;When running your integration test suite locally — if a test fails, it can sometimes be easier to understand what went wrong by examining it in Jaeger UI, where you can view highlighted errors and events organized into a hierarchical structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-instrumentation-development"&gt;
  &lt;/a&gt;
  3. Instrumentation Development
&lt;/h3&gt;

&lt;p&gt;If you are writing a new instrumentation library, observing the tracing output in a UI can be much easier than browsing through textual logs. You can browse the &lt;a href="https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-instrumentation"&gt;JS instrumentation package&lt;/a&gt; for more info and examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-local-jager-limitations"&gt;
  &lt;/a&gt;
  Running Local Jager: Limitations
&lt;/h2&gt;

&lt;p&gt;Jaeger is free, relatively easy to set up, and will do a good job for most basic setups and tracing needs.&lt;/p&gt;

&lt;p&gt;The UI and features set are quite basic and you may quickly find yourself in the need of &lt;a href="https://www.aspecto.io/compare-jaeger-aspecto/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;more advanced features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/compare-jaeger-aspecto/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;Other alternatives&lt;/a&gt; can give value and increase development productivity in the following cases:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lack-of-end-to-end-visibility-in-async-messaging"&gt;
  &lt;/a&gt;
  1. Lack of End to End Visibility in Async Messaging
&lt;/h3&gt;

&lt;p&gt;When using async messaging systems, generally, there are two cases for traces.&lt;/p&gt;

&lt;p&gt;The first one is when the message broker generates one trace. Jaeger does a great job of displaying us with that one trace. &lt;/p&gt;

&lt;p&gt;The second case, common in batch processing scenarios, is when the senders and receivers in message brokers like Kafka and AWS SQS generate multiple traces (for example, each receive starts a new trace). In this case, Jaeger will display these traces separately. That makes it more complicated to track and debug complex transactions.&lt;/p&gt;

&lt;p&gt;More advanced backends might have an out-of-the-box solution for that and will &lt;a href="https://www.aspecto.io/product/production-troubleshooting/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;detect it and merge those traces into a single logical flow&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cross-environment-traces"&gt;
  &lt;/a&gt;
  2. Cross Environment Traces
&lt;/h3&gt;

&lt;p&gt;If your organization works with Jaeger in production, and let’s say you want to use Jaeger to do your tests, sending your local traces to the production Jaeger is highly suboptimal.&lt;/p&gt;

&lt;p&gt;Not only can it pollute the production environment, but it makes it difficult to find your traces within this trace jungle. By running Jaeger locally, you get an isolated playground for your tests and development.&lt;/p&gt;

&lt;p&gt;However, one major pitfall in this scenario is that your local Jaeger will show only the part of the trace generated from your local dev station. It means you lose the context of how your traces communicate and affect downstream and upstream services (i.e., production and staging).&lt;/p&gt;

&lt;p&gt;In this case, &lt;em&gt;you won’t have an isolated and local development session while seeing the full effect of your changes&lt;/em&gt; across the different environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-advanced-search"&gt;
  &lt;/a&gt;
  3. Advanced Search
&lt;/h3&gt;

&lt;p&gt;Free text search on all data or based on trace attributes. For example, if you want to search a token in the payload within specific traces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-trace-data-processing-and-insights"&gt;
  &lt;/a&gt;
  4. Trace Data Processing and Insights
&lt;/h3&gt;

&lt;p&gt;Jaeger presents raw traces and highlights errors, however, generating insights based only on that data isn’t trivial and quite complex.&lt;/p&gt;

&lt;p&gt;Examples for such insights can be API breaking change detection, aggregation of traces based on structure, parameter journey in a trace, dependency analysis, comparison to baseline from production or staging, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-enhanced-ui"&gt;
  &lt;/a&gt;
  5. Enhanced UI
&lt;/h3&gt;

&lt;p&gt;Jaeger UI enumerates all attributes for a span in a long list. It does not group or organizes related data, show JSON content in a tree, highlight common data like HTTP status code, and other good stuff that makes our life easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bottom-line"&gt;
  &lt;/a&gt;
  The Bottom Line
&lt;/h2&gt;

&lt;p&gt;Running local Jaeger offers great benefits. It is easy to set up, and when it comes to faster debug and running tests, you get this extra confidence you might want when working locally.&lt;/p&gt;

&lt;p&gt;Jaeger is a great tool and does an awesome job answering your basic tracing needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, when your work with services gets a bit more complex, or when you want to take your productivity to the next level when working locally, you might want to &lt;a href="https://www.aspecto.io/compare-jaeger-aspecto/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;consider other alternatives&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the limitations I mentioned above are a deal-breaker for you (if not now, they might be in the future), there are several vendors in the market, supplying various solutions which enhance your tracing-based workflow. One that can help you overcome all these issues is Aspecto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;Aspecto&lt;/a&gt; gives you everything you get with Jaeger but with enhanced UI, search, and troubleshooting capabilities for &lt;a href="https://www.aspecto.io/product/local-debugging/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally"&gt;local development and debugging&lt;/a&gt;. It takes 2 minutes to &lt;a href="(https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=why-and-how-to-run-jaeger-locally)"&gt;get started&lt;/a&gt; with, it’s free and OpenTelemetry-based. Think of it as Jaeger and Chrome DevTools fusion for your distributed applications.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microservices</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Typeclasses in Python</title>
      <author>Nikita Sobolev</author>
      <pubDate>Thu, 08 Jul 2021 14:17:23 +0000</pubDate>
      <link>https://dev.to/wemake-services/typeclasses-in-python-3ma6</link>
      <guid>https://dev.to/wemake-services/typeclasses-in-python-3ma6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally published in my blog&lt;/strong&gt;: &lt;a href="https://sobolevn.me/2021/06/typeclasses-in-python"&gt;https://sobolevn.me/2021/06/typeclasses-in-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I am going to introduce a new concept for Python developers: typeclasses.&lt;br&gt;
It is a concept behind our new &lt;code&gt;dry-python&lt;/code&gt; library called &lt;a href="https://github.com/dry-python/classes/"&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will tell you in advance, that it will look very familiar to what you already know and possibly even use. Moreover, we reuse a lot of existing code from Python's standard library. So, you can call this approach "native" and "pythonic". And it is still going to be interesting: I am showing examples in 4 different languages!&lt;/p&gt;

&lt;p&gt;But, before discussing typeclasses themselves, let's discuss what problem they do solve.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-functions-must-behave-differently"&gt;
  &lt;/a&gt;
  Some functions must behave differently
&lt;/h2&gt;

&lt;p&gt;Ok, this one is a familiar problem to all of the devs out there.&lt;br&gt;
How can we write a function that will behave differently for different types?&lt;/p&gt;

&lt;p&gt;Let's create an example. We want to &lt;code&gt;greet&lt;/code&gt; different types differently (yes, "hello world" examples, here we go).&lt;br&gt;
We want to &lt;code&gt;greet&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;str&lt;/code&gt; instances as &lt;code&gt;Hello, {string_content}!&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;MyUser&lt;/code&gt; instances as &lt;code&gt;Hello again, {username}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, that &lt;code&gt;greet&lt;/code&gt; as a simple example does not really make much "business" sense, but more complicated things like &lt;code&gt;to_json&lt;/code&gt;, &lt;code&gt;from_json&lt;/code&gt;, &lt;code&gt;to_sql&lt;/code&gt;, &lt;code&gt;from_sql&lt;/code&gt;, and &lt;code&gt;to_binary&lt;/code&gt; do make a lot of sense and can be found in almost any project.&lt;br&gt;
But, for the sake of implementation simplicity, I'm going to stick to our &lt;code&gt;greet&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;The first approach that comes to our minds is to use &lt;code&gt;isinstance()&lt;/code&gt; checks inside the function itself.&lt;br&gt;
And it can work in some cases! The only requirement is that we &lt;strong&gt;must&lt;/strong&gt; know all the types we will work with in advance.&lt;/p&gt;

&lt;p&gt;Here's how it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, "{0}"!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'Cannot greet "{0}" type'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main limitation is that we cannot extend this function for other type easily (we can use wrapper function, but I consiser this a redefinition).&lt;/p&gt;

&lt;p&gt;But, in some cases - &lt;code&gt;isinstance&lt;/code&gt; won't be enough, because we need extendability. We need to support other types, which are unknown in advance.&lt;br&gt;
Our users might need to &lt;code&gt;greet&lt;/code&gt; their custom types.&lt;/p&gt;

&lt;p&gt;And that's the part where things begin to get interesting.&lt;/p&gt;

&lt;p&gt;All programming languages address this problem differently.&lt;br&gt;
Let's start with Python's traditional OOP approach.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#oop-extendability-and-overabstraction-problems"&gt;
  &lt;/a&gt;
  OOP extendability and over-abstraction problems
&lt;/h2&gt;

&lt;p&gt;So, how does Python solve this problem?&lt;/p&gt;

&lt;p&gt;We all know that Python has magic methods for some builtin functions like &lt;code&gt;len()&lt;/code&gt; and &lt;code&gt;__len__&lt;/code&gt;, it solves exactly the same problem.&lt;/p&gt;

&lt;p&gt;Let's say we want to greet a user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this method directly or you can create a helper with &lt;a href="https://www.python.org/dev/peps/pep-0544/"&gt;&lt;code&gt;typing.Protocol&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing_extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CanGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        It will match any object that has the ``greet`` method.

        Mypy will also check that ``greet`` must return ``str``.
        """&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CanGreet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, it works? &lt;em&gt;Not really&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are several problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, some classes do not want to know some details about themselves to maintain abstraction integrity.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;become_friends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_friend_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Pet'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does this &lt;code&gt;Person&lt;/code&gt; (pun intended) deserve to know that some &lt;code&gt;to_json&lt;/code&gt; conversion exists that can turn this poor &lt;code&gt;Person&lt;/code&gt; into textual data? What about binary pickling?&lt;br&gt;
Of course not, these details should not be added to a business-level abstraction, this is called a &lt;a href="https://en.wikipedia.org/wiki/Leaky_abstraction"&gt;leaky abstraction&lt;/a&gt; when you do otherwise.&lt;/p&gt;

&lt;p&gt;Moreover, I think that mixing structure and behavior into a single abstraction is bad. Why? Because you cannot tell in advance what behavior you would need from a given structure.&lt;/p&gt;

&lt;p&gt;For abstractions on this level, it is way easier to have behavior near the structure, not inside it. Mixing these two only makes sense when we work on a higher level like &lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture"&gt;services&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Open_Telecom_Platform"&gt;processes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, it only works for custom types. &lt;a href="https://en.wikipedia.org/wiki/Expression_problem"&gt;Existing types are hard to extend&lt;/a&gt;.&lt;br&gt;
For example, how would you add the &lt;code&gt;greet&lt;/code&gt; method to the &lt;code&gt;str&lt;/code&gt; type?&lt;/p&gt;

&lt;p&gt;You can create &lt;code&gt;str&lt;/code&gt; subtype with &lt;code&gt;greet&lt;/code&gt; method in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, this would require a change in our usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# fails with TypeError
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#monkeypatching"&gt;
  &lt;/a&gt;
  Monkey-patching
&lt;/h3&gt;

&lt;p&gt;Some might suggest that we can just insert the needed methods directly into an object / type.&lt;br&gt;
Some dynamically typed languages went on this path: &lt;code&gt;JavaScript&lt;/code&gt; (in 2000s and early 2010s, mostly popularized by &lt;code&gt;jQuery&lt;/code&gt; plugins) and &lt;code&gt;Ruby&lt;/code&gt; (&lt;a href="https://guides.rubyonrails.org/active_support_core_extensions.html"&gt;still happening right now&lt;/a&gt;). Here's how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is quite obvious, that it is not going to work for anything complex. &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls"&gt;Why&lt;/a&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different parts of your program might use monkey-patching of methods with the same name, but with different functionality. And nothing will work&lt;/li&gt;
&lt;li&gt;It is hard to read because the original source does not contain the patched method and the patching location might be hidden deeply in other files&lt;/li&gt;
&lt;li&gt;It is hard to type, for example, &lt;code&gt;mypy&lt;/code&gt; does not support it at all&lt;/li&gt;
&lt;li&gt;Python community is not used to this style, it would be rather hard to persuade them to write their code like this (and that's a good thing!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that it is clear: we won't fall into this trap. Let's consider another alternative.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extra-abstractions"&gt;
  &lt;/a&gt;
  Extra abstractions
&lt;/h3&gt;

&lt;p&gt;People familiar with things like &lt;code&gt;django-rest-framework&lt;/code&gt; might recommend to add &lt;a href="https://www.django-rest-framework.org/api-guide/serializers/"&gt;special abstractions&lt;/a&gt; to &lt;code&gt;greet&lt;/code&gt; different types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="n"&gt;_Wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'_Wrapped'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_Wrapped&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="s"&gt;"""Abstract class of all other """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_Wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StrGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="s"&gt;"""Wrapped instance of built-in type ``str``."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Our custom type:
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUserGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can use it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyStrGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUserGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, now we have a different problem: we have a gap between real types and their wrappers. There's no easy way to wrap a type into its wrapper. How can we match them? We have to do it either by hand or use some kind of registry like &lt;code&gt;Dict[type, Type[BaseGreet]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And it is still not enough, there will be runtime errors! In practice, it ends up like &lt;code&gt;&amp;lt;X&amp;gt; is not json-serializable&lt;/code&gt; as many of us might have seen it with &lt;code&gt;drf&lt;/code&gt;'s serializers when trying to serialize a custom unregistered type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typeclasses-and-similar-concepts"&gt;
  &lt;/a&gt;
  Typeclasses and similar concepts
&lt;/h2&gt;

&lt;p&gt;Let's look at how functional languages (and &lt;code&gt;Rust&lt;/code&gt;, people still &lt;a href="https://www.fpcomplete.com/blog/2018/10/is-rust-functional/"&gt;argue&lt;/a&gt; whether it is functional or not) handle this problem.&lt;/p&gt;

&lt;p&gt;Some common knowledge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All these languages don't have &lt;code&gt;class&lt;/code&gt; concept as we know it in Python and, of course, there's no subclassing&lt;/li&gt;
&lt;li&gt;All the languages below don't have &lt;code&gt;object&lt;/code&gt;s as we do in Python, they don't mix behavior and structure (however, &lt;code&gt;Elixir&lt;/code&gt; has Alan Kay's &lt;a href="https://www.quora.com/What-does-Alan-Kay-think-about-Joe-Armstrong-claiming-that-Erlang-might-be-the-only-object-oriented-language-and-also-his-thesis-supervisor-s-claim-that-Erlang-is-extremely-object-oriented"&gt;real objects&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Instead, these languages use &lt;a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism"&gt;ad-hoc polymorphism&lt;/a&gt; to make functions behave differently for different types via overloading&lt;/li&gt;
&lt;li&gt;And, of course, you don't have to know any of the languages below to understand what is going on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#elixir"&gt;
  &lt;/a&gt;
  Elixir
&lt;/h3&gt;

&lt;p&gt;Let's start with one of my favorites.&lt;br&gt;
&lt;code&gt;Elixir&lt;/code&gt; has &lt;a href="https://elixir-lang.org/getting-started/protocols.html"&gt;&lt;code&gt;Protocol&lt;/code&gt;s&lt;/a&gt; to achieve what we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Our custom protocol"&lt;/span&gt;
&lt;span class="k"&gt;defprotocol&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is an abstract function,&lt;/span&gt;
  &lt;span class="c1"&gt;# that will behave differently for each type.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Enhancing built-in type"&lt;/span&gt;
&lt;span class="k"&gt;defimpl&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;for:&lt;/span&gt; &lt;span class="no"&gt;BitString&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Custom data type"&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyUser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Enhancing our own type"&lt;/span&gt;
&lt;span class="k"&gt;defimpl&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;for:&lt;/span&gt; &lt;span class="no"&gt;MyUser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Hello again, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am pretty sure that my readers were able to read and understand &lt;code&gt;Elixir&lt;/code&gt; even if they are not familiar with this language. That's what I call beauty!&lt;/p&gt;

&lt;p&gt;Usage of the code above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using our `Greet.greet` function with both our data types:&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="s2"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing with &lt;code&gt;Elixir&lt;/code&gt;'s &lt;code&gt;Protocol&lt;/code&gt;s is that it is &lt;a href="https://github.com/elixir-lang/elixir/issues/7541"&gt;not currently possible&lt;/a&gt; to express that some type does support our &lt;code&gt;Greet.greet&lt;/code&gt; for &lt;code&gt;Elixir&lt;/code&gt;'s &lt;a href="https://github.com/jeremyjh/dialyxir"&gt;type checker&lt;/a&gt;.&lt;br&gt;
But, this is not a big deal for &lt;code&gt;Elixir&lt;/code&gt;, which is 100% dynamically typed.&lt;/p&gt;

&lt;p&gt;Protocols are very widely used, they power lots of the language's features.&lt;br&gt;
Here are some real-life examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hexdocs.pm/elixir/1.11.0/Enumerable.html"&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; allows to work with collections: counting elements, finding members, reducing, and slicing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexdocs.pm/elixir/1.11.0/String.Chars.html"&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; is something like &lt;code&gt;__str__&lt;/code&gt; in Python, it converts structures to human-readable format&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Rust&lt;/code&gt; has &lt;a href="https://doc.rust-lang.org/book/ch10-02-traits.html"&gt;&lt;code&gt;Trait&lt;/code&gt;s&lt;/a&gt;. The concept is pretty similar to &lt;code&gt;Protocol&lt;/code&gt;s in &lt;code&gt;Elixir&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Our custom trait&lt;/span&gt;
&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Enhancing built-in type&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, {}!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Defining our own type&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Enhancing it&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello again, {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And of course, due to &lt;code&gt;Rust&lt;/code&gt;'s static typing, we can express that some function's argument supports the trait we have just defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// We can express that `greet` function only accepts types&lt;/span&gt;
&lt;span class="c"&gt;// that implement `Greet` trait:&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="nf"&gt;.greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Using our `greet` function with both our data types:&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="c"&gt;// Hello, world!&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="c"&gt;// Hello again, example&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? The idea is so similar, that it uses almost the same syntax as &lt;code&gt;Elixir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notable real-life examples of how &lt;code&gt;Rust&lt;/code&gt; uses its &lt;code&gt;Trait&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html"&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; - duplicating objects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/fmt/trait.Debug.html"&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt; to show better &lt;code&gt;repr&lt;/code&gt; of an object, again like &lt;code&gt;__str__&lt;/code&gt; in Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, &lt;code&gt;Trait&lt;/code&gt;s are the core of this language, it is widely used in cases when you need to define any shared behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#haskell"&gt;
  &lt;/a&gt;
  Haskell
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Haskell&lt;/code&gt; has &lt;a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses"&gt;typeclasses&lt;/a&gt; to do almost the same thing.&lt;/p&gt;

&lt;p&gt;So, what's a typeclass?&lt;br&gt;
Typeclass is a group of types, all of which satisfy some common contract.&lt;br&gt;
It is also a form of ad-hoc polymorphism that is mostly used for overloading.&lt;/p&gt;

&lt;p&gt;I am a bit sorry for the &lt;code&gt;Haskell&lt;/code&gt; syntax below, it might be not very pleasant and clear to read, especially for people who are not familiar with this brilliant language, but we have what we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="cp"&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;

&lt;span class="c1"&gt;-- Our custom typeclass&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="c1"&gt;-- Enhancing built-in type with it&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;

&lt;span class="c1"&gt;-- Defining our own type&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- Enhancing it&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello again, "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we do the same thing as we have already done for &lt;code&gt;Rust&lt;/code&gt; and &lt;code&gt;Elixir&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We define a &lt;code&gt;Greet&lt;/code&gt; typeclass that has a single function to implement: &lt;code&gt;greet&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then we define instance implementation for &lt;code&gt;String&lt;/code&gt; type, which is a built-in (alias for &lt;code&gt;[Char]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then we define custom &lt;code&gt;MyUser&lt;/code&gt; type with &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;String&lt;/code&gt; type&lt;/li&gt;
&lt;li&gt;Implementing the &lt;code&gt;Greet&lt;/code&gt; typeclass for &lt;code&gt;MyUser&lt;/code&gt; is the last thing we do&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we can use our new &lt;code&gt;greet&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Here you can see that we can use `Greet` typeclass to annotate our types.&lt;/span&gt;
&lt;span class="c1"&gt;-- I have made this alias entirely for this annotation demo,&lt;/span&gt;
&lt;span class="c1"&gt;-- in real life we would just use `greet` directly:&lt;/span&gt;
&lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;
  &lt;span class="c1"&gt;-- Hello, world!&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;-- Hello again, example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some real-life examples of typeclasses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Text-Show.html#t:Show"&gt;&lt;code&gt;Show&lt;/code&gt;&lt;/a&gt; to convert things into user-readable representations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wiki.haskell.org/Functor"&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Applicative.html#t:Applicative"&gt;&lt;code&gt;Applicate&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://wiki.haskell.org/Monad"&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt; are all typeclasses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would say that among our three examples, &lt;code&gt;Haskell&lt;/code&gt; relies on its typeclasses the heaviest.&lt;/p&gt;

&lt;p&gt;It is important to note that typeclasses from &lt;code&gt;Haskell&lt;/code&gt; and traits from &lt;code&gt;Rust&lt;/code&gt; &lt;a href="https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell"&gt;are a bit different&lt;/a&gt;, but we won't go into these details to keep this article rather short.&lt;/p&gt;

&lt;p&gt;But, what about Python?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drypythonclasses"&gt;
  &lt;/a&gt;
  dry-python/classes
&lt;/h2&gt;

&lt;p&gt;There's an awesome function in the Python standard library called &lt;a href="https://docs.python.org/3/library/functools.html#functools.singledispatch"&gt;&lt;code&gt;singledispatch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It does exactly what we need. Do you still remember that we are finding a way to change the function's behavior based on the input type?&lt;/p&gt;

&lt;p&gt;Let's have a look!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singledispatch&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Default case."""&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Custom type
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_myuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks cool, moreover, it is in standard lib, you even don't have to install anything!&lt;/p&gt;

&lt;p&gt;And we can use it like a normal function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what's the point in writing a completely different library like we did with &lt;code&gt;dry-python/classes&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;We even reuse some parts of &lt;code&gt;singledispatch&lt;/code&gt; implementation,&lt;br&gt;
but there are several key differences.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#better-typing"&gt;
  &lt;/a&gt;
  Better typing
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;singledispatch&lt;/code&gt; you cannot be sure that everything will work, because it is not supported by &lt;code&gt;mypy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, you can pass unsupported types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# mypy is ok with that :(
# runtime will raise `NotImplementedError`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;dry-python/classes&lt;/code&gt; we have fixed that.&lt;br&gt;
You can only pass types that are supported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;

&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Argument 1 to "greet" has incompatible type "int"; expected "str"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can break the &lt;code&gt;@singledispatch&lt;/code&gt; signature contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# still no mypy error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, not with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Instance callback is incompatible
# "def (instance: builtins.dict[Any, Any], key: builtins.str) -&amp;gt; builtins.int";
# expected
# "def (instance: builtins.dict[Any, Any]) -&amp;gt; builtins.str"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@singledispatch&lt;/code&gt; also does not allow defining generic functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Default case."""&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_copy_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="c1"&gt;# Argument 1 to "register" of "_SingleDispatchCallable"
# has incompatible type "Callable[[int], int]";
# expected "Callable[..., X]"
&lt;/span&gt;
&lt;span class="n"&gt;reveal_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Revealed type is "X`-1"
# Should be: `int`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is, again, possible with &lt;code&gt;dry-python/classes&lt;/code&gt;, we fully support &lt;a href="https://classes.readthedocs.io/en/latest/pages/generics.html"&gt;generic functions&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_copy_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# ok
&lt;/span&gt;
&lt;span class="n"&gt;reveal_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you cannot &lt;a href="https://classes.readthedocs.io/en/latest/pages/concept.html#type-restrictions"&gt;restrict&lt;/a&gt; &lt;code&gt;@singledispatch&lt;/code&gt; to work with only subtypes of specific types, even if you want to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protocols-are-unsupported"&gt;
  &lt;/a&gt;
  Protocols are unsupported
&lt;/h3&gt;

&lt;p&gt;Protocols are an important part of Python. Sadly, they are not supported by &lt;code&gt;@singledispatch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;
&lt;span class="c1"&gt;# TypeError: Invalid annotation for 'instance'.
# typing.Iterable is not a class
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://classes.readthedocs.io/en/latest/pages/concept.html#protocols"&gt;Protocols&lt;/a&gt; support is also solved with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;# Iterable!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#no-way-to-annotate-types"&gt;
  &lt;/a&gt;
  No way to annotate types
&lt;/h3&gt;

&lt;p&gt;Let's say you want to write a function and annotate one of its arguments that it must support the &lt;code&gt;greet&lt;/code&gt; function. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'???'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is impossible with &lt;code&gt;@singledispatch&lt;/code&gt;.&lt;br&gt;
But, you can do it with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AssociatedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Supports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AssociatedType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Special type to represent that some instance can `greet`."""&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""No implementation needed."""&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Supports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ok
&lt;/span&gt;&lt;span class="n"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# type error with mypy, exception in runtime
# Argument 1 to "greet_and_print" has incompatible type "int";
# expected "Supports[Greet]"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have come a long way, from basic stacked &lt;code&gt;isinstance()&lt;/code&gt; conditions - through OOP - to typeclasses.&lt;/p&gt;

&lt;p&gt;I have shown, that this native and pythonic idea deserves wider recognition and usage. And our extra features in &lt;code&gt;dry-python/classes&lt;/code&gt; can save you from lots of mistakes and help to write more expressive and safe business logic.&lt;/p&gt;

&lt;p&gt;As a result of using typeclasses, you will untangle your structures from behavior, which will allow you to get rid of useless and complex abstractions and write dead-simple typesafe code. You will have your behavior near the structures, not inside them. This will also solve the extendability problem of OOP.&lt;/p&gt;

&lt;p&gt;Combine it with other &lt;code&gt;dry-python&lt;/code&gt; libraries for extra effect!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future work
&lt;/h2&gt;

&lt;p&gt;What do we plan for the future?&lt;/p&gt;

&lt;p&gt;There are several key aspects to improve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our &lt;code&gt;Supports&lt;/code&gt; should take any amount of type arguments: &lt;code&gt;Supports[A, B, C]&lt;/code&gt;. This type will represent a type that supports all three typeclasses &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; &lt;a href="https://github.com/dry-python/classes/issues/206"&gt;at the same time&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We don't &lt;a href="https://github.com/dry-python/classes/issues/24"&gt;support concrete generics&lt;/a&gt; just yet. So, for example, it is impossible to define different cases for &lt;code&gt;List[int]&lt;/code&gt; and &lt;code&gt;List[str]&lt;/code&gt;. This might require adding runtime typecheker to &lt;code&gt;dry-python/classes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I am planning &lt;a href="https://sobolevn.me/2021/02/make-tests-a-part-of-your-app"&gt;to make tests a part of this app&lt;/a&gt; as well! We will ship a &lt;a href="https://github.com/dry-python/classes/issues/234"&gt;hypothesis plugin&lt;/a&gt; to test users' typeclasses in a single line of code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;p&gt;If you like this article you can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Donate to future &lt;code&gt;dry-python&lt;/code&gt; development on &lt;a href="https://github.com/sponsors/dry-python"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dry-python/classes/stargazers"&gt;Star our &lt;code&gt;classes&lt;/code&gt; repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sobolevn.me/subscribe/"&gt;Subscribe&lt;/a&gt; to my blog for more content!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>python</category>
      <category>rust</category>
      <category>elixir</category>
      <category>haskell</category>
    </item>
    <item>
      <title>Empty List placeholder. SwiftUI</title>
      <author>Anton Paliakou</author>
      <pubDate>Thu, 08 Jul 2021 14:15:32 +0000</pubDate>
      <link>https://dev.to/toni777772/empty-list-placeholder-swiftui-4b7e</link>
      <guid>https://dev.to/toni777772/empty-list-placeholder-swiftui-4b7e</guid>
      <description>&lt;p&gt;Year twenty twenty-one. Almost a month has passed since the WWDC. As usual Apple presented many amazing features/updates 😍. As expected updated SwiftUI framework. But did not add placeholder for &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; view 😭. It's not big deal, but it was one of my expectations from conference. Okay let's do it ourselves 💪&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; is one of the most used view in apps.&lt;br&gt;
When using the &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;, devs also must handle the state of an empty data range and show a placeholder. &lt;/p&gt;

&lt;p&gt;As an example, consider a simple list of countries. Show placeholder when data is empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bd3NvI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3s18nmf1lbowhm38q9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bd3NvI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3s18nmf1lbowhm38q9z.png" alt="Countries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q281u_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r21n4v592v6rb7yl7gza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q281u_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r21n4v592v6rb7yl7gza.png" alt="Placeholder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Country model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Identifiable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, have any ideas on how to implement a placeholder? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-idea-raw-if-else-endraw-"&gt;
  &lt;/a&gt;
  First idea &lt;code&gt;If else&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The first thing that comes to mind it's &lt;a href="https://docs.swift.org/swift-book/ReferenceManual/Statements.html"&gt;&lt;code&gt;if else&lt;/code&gt;&lt;/a&gt; conditional statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;largeTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// List countires&lt;/span&gt;
                &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the most simple and clear way&lt;/li&gt;
&lt;li&gt;easy to modify &lt;/li&gt;
&lt;li&gt;it works and shows the placeholder when needed&lt;/li&gt;
&lt;li&gt;easy to use any view for placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the code looks cumbersome&lt;/li&gt;
&lt;li&gt;not reusable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works and sometimes it's enough. But in production, it would be nice to have a component that implements the logic of displaying a placeholder inside the component. So, goes to the next idea. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-idea-raw-emptylist-endraw-"&gt;
  &lt;/a&gt;
  Second idea &lt;code&gt;EmptyList&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Improve &lt;code&gt;if else&lt;/code&gt; idea and move logic show/hide placeholder to custom view, call it &lt;code&gt;EmptyList&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;EmptyList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;RandomAccessCollection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Identifiable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;

    &lt;span class="c1"&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class="c1"&gt;///   - items: Source data for List. Item must implement Identifiable protocol&lt;/span&gt;
    &lt;span class="c1"&gt;///   - listRowView: View displayed for each source Item&lt;/span&gt;
    &lt;span class="c1"&gt;///   - placeholderView: Placeholder. View displayed when the items collection isEmpty&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt; &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listRowView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listRowView&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholderView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholderView&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// List countires&lt;/span&gt;
                &lt;span class="kt"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;EmptyList&lt;/code&gt; is very easy. First parameter - data source, second parameter -  list row view, and finally third parameter - placeholder view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;EmptyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Data items &lt;/span&gt;
        &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// List row view&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;largeTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code looks clean and clear 😍&lt;/li&gt;
&lt;li&gt;easy to modify custom view&lt;/li&gt;
&lt;li&gt;reusable in project&lt;/li&gt;
&lt;li&gt;use any view for placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list is embedded in &lt;code&gt;EmptyList&lt;/code&gt; view, and if want to add some ViewModifier-s to the list, need for more efforts and modify code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, I would have to say that this is all and say goodbye but is not all 😎. I want to share an idea of how I cook placeholder for lists in my projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preferred-idea-raw-viewmodifier-endraw-"&gt;
  &lt;/a&gt;
  Preferred idea &lt;code&gt;ViewModifier&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create custom &lt;a href="https://developer.apple.com/documentation/swiftui/viewmodifier"&gt;&lt;code&gt;ViewModifier&lt;/code&gt;&lt;/a&gt; to manage placeholder, call it &lt;code&gt;EmptyDataModifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ViewModifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Placeholder&lt;/span&gt;

    &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;placeholder&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uses  &lt;code&gt;EmptyDataModifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Also via extension can little bit improve the solution and limited apply &lt;code&gt;EmptyDataModifier&lt;/code&gt; only for &lt;code&gt;List&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;emptyListPlaceholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;emptyListPlaceholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kt"&gt;AnyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ListPlaceholderView&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder &lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code look clean and clear 😍 😍 😍&lt;/li&gt;
&lt;li&gt;no need to create a custom &lt;code&gt;List&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;easy to modify&lt;/li&gt;
&lt;li&gt;reusable in project&lt;/li&gt;
&lt;li&gt;use any view for placeholder &lt;/li&gt;
&lt;li&gt;this way for can be used for any view placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no  (subjective opinion)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#instead-of-summary"&gt;
  &lt;/a&gt;
  Instead of summary
&lt;/h3&gt;

&lt;p&gt;In my opinion, the most suitable way to implement a placeholder is to use a custom &lt;a href="https://developer.apple.com/documentation/swiftui/viewmodifier"&gt;&lt;code&gt;ViewModifier&lt;/code&gt;&lt;/a&gt;. &lt;br&gt;
I'm sure sooner or later the Apple will add a placeholder for the List view. Maybe this article will be as a request for this feature for Apple. Who knows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Toni77777/ListPlaceholderSample"&gt;Source code&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon. &lt;/p&gt;

</description>
      <category>swift</category>
      <category>swiftui</category>
      <category>ios</category>
      <category>placeholder</category>
    </item>
    <item>
      <title>Diving Into DevSecOps (Part 2) w/ John Willis</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 08 Jul 2021 14:11:19 +0000</pubDate>
      <link>https://dev.to/linearb/diving-into-devsecops-part-2-w-john-willis-4ig3</link>
      <guid>https://dev.to/linearb/diving-into-devsecops-part-2-w-john-willis-4ig3</guid>
      <description>&lt;p&gt;The second and final interview with John Willis on the &lt;a href="https://devinterrupted.com/podcast/what-is-devsecops-part2/"&gt;Dev Interrupted podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;John Willis is a legendary DevOps speaker, mentor and author of &lt;a href="https://www.google.com/search?q=the+devops+handbook&amp;amp;rlz=1C1CHBF_enUS949US949&amp;amp;sxsrf=ALeKk029-roPGTB6J_bWkBb9WvzA5-1z8g:1624995751185&amp;amp;ei=p3fbYI7wCs6m-wSwn7fIBA&amp;amp;start=0&amp;amp;sa=N&amp;amp;ved=2ahUKEwjO34r0zL3xAhVO054KHbDPDUk4ChDy0wN6BQgBEJkB&amp;amp;biw=1920&amp;amp;bih=937"&gt;The DevOps Handbook&lt;/a&gt;. In this special 2-part DevSecOps series, John takes us on a DevSecOps journey from the origin of the term all the way to how software developers at the team level can implement the practice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0O2dPW1cXOTIraSmGwV1wk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What DevSecOps means at the team-level&lt;/li&gt;
&lt;li&gt;First steps for implementing DevSecOps strategies at your organization&lt;/li&gt;
&lt;li&gt;Why it’s critical to start thinking about security more holistically&lt;/li&gt;
&lt;li&gt;The difference between Security, Compliance, Governance &amp;amp; Risk&lt;/li&gt;
&lt;li&gt;What is coming next for software development security&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devsecops</category>
      <category>security</category>
      <category>devteam</category>
    </item>
  </channel>
</rss>
