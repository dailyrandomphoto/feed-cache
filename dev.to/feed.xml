<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GitHub Issues to Wechat</title>
      <author>Hollow Man</author>
      <pubDate>Tue, 30 Nov 2021 15:09:56 +0000</pubDate>
      <link>https://dev.to/hollowman6/github-issues-to-wechat-4klk</link>
      <guid>https://dev.to/hollowman6/github-issues-to-wechat-4klk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HollowMan6"&gt;
        HollowMan6
      &lt;/a&gt; / &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;
        GitHub-Issues-to-Wechat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Send GitHub Issues, PRs or Discussions Updates to Wechat.(将 GitHub Issues, PRs 或者 Discussions 更新消息发送到微信)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Send timed message to Wechat&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/graphs/commit-activity"&gt;&lt;img src="https://camo.githubusercontent.com/94649b494ef7a3e3e5116f1ab2d07001f62754f0a791d6de77711246587cc332/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d576563686174" alt="last-commit"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/releases"&gt;&lt;img src="https://camo.githubusercontent.com/23e8cf1328573ad53b2f48faf0ce27e7cc7e5c893f0ded412bec934ea6ac0ce8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d576563686174" alt="release-date"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/workflows/Python%20package/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TI_r00A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/HollowMan6/GitHub-Issues-to-Wechat/workflows/Python%2520package/badge.svg" alt="Python package"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6?tab=followers"&gt;&lt;img src="https://camo.githubusercontent.com/8441e22aa4e54675be52375e55951f0aaa6d809964cf71479073768aec57bfd4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f486f6c6c6f774d616e363f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/watchers"&gt;&lt;img src="https://camo.githubusercontent.com/964870ec6ba3da671b3fe6d84f5191651bc8094535f85078b810522131538aa1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="watchers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/61f30ab1fcd5b6c9931871565b04be13e7f988316b17b064c9d625557eb6eb8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="stars"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/91f9af66ea68d3446b322dca93c6271f0ff3d73b9e1510171b67f0471c2e6492/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="forks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hollowman6.github.io/fund.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b527a02f3970d48aa1570c5757c89e88d995616c74259938691a86d0ca26aad0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541342532304f70656e253230536f757263652d477265656e3f7374796c653d666c61742d737175617265266c6f676f3d476974687562266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f686f6c6c6f776d616e362e6769746875622e696f2f66756e642e68746d6c" alt="Open Source Love"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/GPL-3.0/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2f706a3275e4a48dc85ec930933303f3417d3b91d20943e25c8b66acdd223d53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c2d626c7565" alt="GPL Licence"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/archive/master.zip"&gt;&lt;img src="https://camo.githubusercontent.com/2992a9308444d1405df6e2a3a7ebb935e1357f68664b78846563bc7fa1eb66e0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e737667" alt="Repo-Size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lgtm.com/projects/g/HollowMan6/GitHub-Issues-to-Wechat/alerts/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be9ed6343ad5ff0ae14313fd773c65cb324f901d430db197cd41a42c3f6cc99d/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Total alerts"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/HollowMan6/GitHub-Issues-to-Wechat/context:python" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4c817969c62ba911dafd3d3aa03597423b9fbf97140431ff6b4c24a60fc77a6f/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: Python"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(中文版本在下方)&lt;/p&gt;
&lt;p&gt;Send GitHub Issues, PRs or Discussions Updates to Wechat&lt;/p&gt;
&lt;p&gt;Source Github Repository Link: &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Please &lt;strong&gt;★Star&lt;/strong&gt; if you think it's great!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/network/dependencies"&gt;Python library dependency&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-WechatGitHub-Issues-to-Wechat.py"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Example &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat.github/workflows/message.yml"&gt;Workflow&lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;you can fork this repository first, and then create Actions Secrets and set related settings in your forked repository (click in the order of 1, 2 and 3 as shown in the figure below).&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/HollowMan6/Wechat-Timed-Message/raw/main/img/secrets.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sP15Gwr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/HollowMan6/Wechat-Timed-Message/raw/main/img/secrets.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can choose one or more of the following three push platforms to receive pushed messages:&lt;/p&gt;
&lt;h3&gt;
PushPlus(Recommended)&lt;/h3&gt;
&lt;p&gt;First &lt;a href="https://www.pushplus.plus/push1.html" rel="nofollow"&gt;log into pushplus&lt;/a&gt;, and then find your token in pushplus website, create a actions secret with the name of &lt;code&gt;PPTOKEN&lt;/code&gt; and the value of your token value, and then one-to-one push the related information results.&lt;/p&gt;
&lt;p&gt;If you need to push the related information to multiple Wechat accounts, that is, one-to-many push, you need to create a group, write down the group code…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/.github/workflows/message.yml"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/.github/workflows/message.yml&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-blog-post-about-the-project"&gt;
  &lt;/a&gt;
  The Blog Post About the Project
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://dev.to/hollowman6/a-workflow-for-sending-github-issues-prs-or-discussions-updates-to-wechat-1b7d"&gt;https://dev.to/hollowman6/a-workflow-for-sending-github-issues-prs-or-discussions-updates-to-wechat-1b7d&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#source-code-for-wechat-message-pushing"&gt;
  &lt;/a&gt;
  Source Code for WeChat Message pushing
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/GitHub-Issues-to-Wechat.py"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/GitHub-Issues-to-Wechat.py&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docker-file"&gt;
  &lt;/a&gt;
  Docker File
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/Dockerfile"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docker-file"&gt;
  &lt;/a&gt;
  Docker File
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/Dockerfile"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-on-github-marketplace"&gt;
  &lt;/a&gt;
  View on GitHub Marketplace
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/github-issues-to-wechat"&gt;https://github.com/marketplace/actions/github-issues-to-wechat&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Fun feature update</title>
      <author>typical pawel</author>
      <pubDate>Tue, 30 Nov 2021 14:59:47 +0000</pubDate>
      <link>https://dev.to/paweldotio/fun-feature-update-4pc3</link>
      <guid>https://dev.to/paweldotio/fun-feature-update-4pc3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oyN4o4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qou6f9c5ojzxvx5nd0t9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oyN4o4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qou6f9c5ojzxvx5nd0t9.gif" alt="Image description" width="480" height="480"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Had too much coffee this morning and added a fun animated gesture feature to &lt;a href="https://flat.social"&gt;flat.social&lt;/a&gt;. The GIF with demo might load for a minute or two!&lt;/p&gt;

&lt;p&gt;This work was done quite quickly - fortunately I found &lt;a href="https://github.com/davidfig/pixi-ease"&gt;davidfig/pixi-ease&lt;/a&gt; on Github which made it much easier. &lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User selected a gesture on the keyboard (each key from 1-&amp;gt;7 is bound to a different gesture).&lt;/li&gt;
&lt;li&gt;App picks it up and sends an event via socket.io to the server. The server picks it up, figures out who sent it and informs everyone in the same room that a gesture has been emitted.&lt;/li&gt;
&lt;li&gt;Gesture event with associated playerId comes back to all of the clients connected to the room.&lt;/li&gt;
&lt;li&gt;Particular animation is triggered on the body of the player using pixi-ease.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Would love to know what you think!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>buildinpublic</category>
      <category>webdev</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>A Workflow for Sending GitHub Issues, PRs, or Discussions Updates to WeChat</title>
      <author>Hollow Man</author>
      <pubDate>Tue, 30 Nov 2021 14:55:22 +0000</pubDate>
      <link>https://dev.to/hollowman6/a-workflow-for-sending-github-issues-prs-or-discussions-updates-to-wechat-1b7d</link>
      <guid>https://dev.to/hollowman6/a-workflow-for-sending-github-issues-prs-or-discussions-updates-to-wechat-1b7d</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HollowMan6"&gt;
        HollowMan6
      &lt;/a&gt; / &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;
        GitHub-Issues-to-Wechat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Send GitHub Issues, PRs or Discussions Updates to Wechat.(将 GitHub Issues, PRs 或者 Discussions 更新消息发送到微信)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Send timed message to Wechat&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/graphs/commit-activity"&gt;&lt;img src="https://camo.githubusercontent.com/94649b494ef7a3e3e5116f1ab2d07001f62754f0a791d6de77711246587cc332/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d576563686174" alt="last-commit"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/releases"&gt;&lt;img src="https://camo.githubusercontent.com/23e8cf1328573ad53b2f48faf0ce27e7cc7e5c893f0ded412bec934ea6ac0ce8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d576563686174" alt="release-date"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/workflows/Python%20package/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TI_r00A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/HollowMan6/GitHub-Issues-to-Wechat/workflows/Python%2520package/badge.svg" alt="Python package"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6?tab=followers"&gt;&lt;img src="https://camo.githubusercontent.com/8441e22aa4e54675be52375e55951f0aaa6d809964cf71479073768aec57bfd4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f486f6c6c6f774d616e363f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/watchers"&gt;&lt;img src="https://camo.githubusercontent.com/964870ec6ba3da671b3fe6d84f5191651bc8094535f85078b810522131538aa1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="watchers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/61f30ab1fcd5b6c9931871565b04be13e7f988316b17b064c9d625557eb6eb8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="stars"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/91f9af66ea68d3446b322dca93c6271f0ff3d73b9e1510171b67f0471c2e6492/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861743f7374796c653d736f6369616c" alt="forks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hollowman6.github.io/fund.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b527a02f3970d48aa1570c5757c89e88d995616c74259938691a86d0ca26aad0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541342532304f70656e253230536f757263652d477265656e3f7374796c653d666c61742d737175617265266c6f676f3d476974687562266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f686f6c6c6f776d616e362e6769746875622e696f2f66756e642e68746d6c" alt="Open Source Love"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/GPL-3.0/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2f706a3275e4a48dc85ec930933303f3417d3b91d20943e25c8b66acdd223d53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c2d626c7565" alt="GPL Licence"&gt;&lt;/a&gt;
&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/archive/master.zip"&gt;&lt;img src="https://camo.githubusercontent.com/2992a9308444d1405df6e2a3a7ebb935e1357f68664b78846563bc7fa1eb66e0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e737667" alt="Repo-Size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lgtm.com/projects/g/HollowMan6/GitHub-Issues-to-Wechat/alerts/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be9ed6343ad5ff0ae14313fd773c65cb324f901d430db197cd41a42c3f6cc99d/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Total alerts"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/HollowMan6/GitHub-Issues-to-Wechat/context:python" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4c817969c62ba911dafd3d3aa03597423b9fbf97140431ff6b4c24a60fc77a6f/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f486f6c6c6f774d616e362f4769744875622d4973737565732d746f2d5765636861742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: Python"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(中文版本在下方)&lt;/p&gt;
&lt;p&gt;Send GitHub Issues, PRs or Discussions Updates to Wechat&lt;/p&gt;
&lt;p&gt;Source Github Repository Link: &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;https://github.com/HollowMan6/GitHub-Issues-to-Wechat&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Please &lt;strong&gt;★Star&lt;/strong&gt; if you think it's great!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/network/dependencies"&gt;Python library dependency&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-WechatGitHub-Issues-to-Wechat.py"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Example &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat.github/workflows/message.yml"&gt;Workflow&lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;you can fork this repository first, and then create Actions Secrets and set related settings in your forked repository (click in the order of 1, 2 and 3 as shown in the figure below).&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/HollowMan6/Wechat-Timed-Message/raw/main/img/secrets.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sP15Gwr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/HollowMan6/Wechat-Timed-Message/raw/main/img/secrets.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can choose one or more of the following three push platforms to receive pushed messages:&lt;/p&gt;
&lt;h3&gt;
PushPlus(Recommended)&lt;/h3&gt;
&lt;p&gt;First &lt;a href="https://www.pushplus.plus/push1.html" rel="nofollow"&gt;log into pushplus&lt;/a&gt;, and then find your token in pushplus website, create a actions secret with the name of &lt;code&gt;PPTOKEN&lt;/code&gt; and the value of your token value, and then one-to-one push the related information results.&lt;/p&gt;
&lt;p&gt;If you need to push the related information to multiple Wechat accounts, that is, one-to-many push, you need to create a group, write down the group code…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h1&gt;

&lt;p&gt;Many Chinese developers prefer to use &lt;a href="https://en.wikipedia.org/wiki/WeChat"&gt;WeChat&lt;/a&gt; when they are at work, so they seldom check their emails. While GitHub only provides notifications for issues, PRs, or discussions by email, many Chinese developers may delay their response to those updates. As a result, setting up a Workflow for sending GitHub issues, PRs, or discussions updates to WeChat will bring great convenience for Chinese developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;p&gt;Send GitHub issues, PRs, or discussions updates to WeChat, just like those updates sent by GitHub through emails.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#realization"&gt;
  &lt;/a&gt;
  Realization
&lt;/h1&gt;

&lt;p&gt;This workflow is realized through several WeChat message push platforms, such as &lt;a href="https://www.pushplus.plus/"&gt;PushPlus&lt;/a&gt; and &lt;a href="https://sct.ftqq.com/"&gt;ServerChan&lt;/a&gt;, as well as the native Enterprise version of WeChat (WeCom) message push API.&lt;/p&gt;

&lt;p&gt;The workflow uses python requests library for coding, and Docker for packaging to be used in the GitHub Actions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;You can choose a realization for pushing the messages to WeChat, and set the needed GitHub Actions secrets &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat#usage"&gt;as the instructions here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example use for this workflow is &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/.github/workflows/message.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can set at what event the notifications will be sent through Wechat by modifying &lt;a href="https://github.com/HollowMan6/GitHub-Issues-to-Wechat/blob/main/.github/workflows/message.yml#L2-L12"&gt;these headers&lt;/a&gt; and using them in your workflow.&lt;/p&gt;

&lt;p&gt;Then, append the following line in the steps of your workflow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Send&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Message&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Wechat'&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HollowMan6/GitHub-Issues-to-Wechat@v1&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DELAYS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DELAYS }}&lt;/span&gt;
    &lt;span class="na"&gt;SERVERCHANSCKEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SERVERCHANSCKEY }}&lt;/span&gt;
    &lt;span class="na"&gt;PPTOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PPTOKEN }}&lt;/span&gt;
    &lt;span class="na"&gt;PPTOPIC&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PPTOPIC }}&lt;/span&gt;
    &lt;span class="na"&gt;CORPID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.CORPID }}&lt;/span&gt;
    &lt;span class="na"&gt;CORPSECRET&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.CORPSECRET }}&lt;/span&gt;
    &lt;span class="na"&gt;AGENTID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AGENTID }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, enjoy it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyo4gh44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/HollowMan6/GitHub-Issues-to-Wechat/main/img/wecom.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyo4gh44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/HollowMan6/GitHub-Issues-to-Wechat/main/img/wecom.jpg" alt="" width="880" height="1956"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Learn to use StorybookJS in your React Project</title>
      <author>Esther Agbaje</author>
      <pubDate>Tue, 30 Nov 2021 14:53:49 +0000</pubDate>
      <link>https://dev.to/estheragbaje/learn-to-use-storybookjs-in-your-react-project-4nf2</link>
      <guid>https://dev.to/estheragbaje/learn-to-use-storybookjs-in-your-react-project-4nf2</guid>
      <description>&lt;p&gt;&lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt; is a UI development environment that allows developers interact with components in isolation because it runs outside the app. It is like a playground for UI components.&lt;/p&gt;

&lt;p&gt;To understand this better, imagine you have a couple of components in your project and need to interact with them. The 'normal' workflow is to run the app locally in your browser and then interact with or test the components. &lt;/p&gt;

&lt;p&gt;However, doing this every time for a large app with numerous components can be daunting. This is where storybook comes in. It allows you test out and interact with components without needing to run the actual app in local. &lt;/p&gt;

&lt;p&gt;The best part of storybook is that it is a JavaScript tool, so it can be used with almost any JavaScript framework. In this article, we'll focus on using Storybook in a &lt;em&gt;ReactJS&lt;/em&gt; project.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step1-install-the-required-packages"&gt;
  &lt;/a&gt;
  Step1: Install the required packages
&lt;/h2&gt;

&lt;p&gt;Before diving deep into learning Storybook, you want to make sure you have the required packages in your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-a-create-react-app"&gt;
  &lt;/a&gt;
  Bootstrap a Create React App
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(Skip this step if you already have a React project set up)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you don't already have a React project, the first thing you'd need to do is to bootstrap a CRA project.&lt;br&gt;
To do this use the command:&lt;br&gt;
&lt;code&gt;npx create-react-app storybook-project&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;storybook-project&lt;/code&gt; will be the name of our directory, but you can replace yours with whatever name you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-storybookjs"&gt;
  &lt;/a&gt;
  Install StorybookJS
&lt;/h3&gt;

&lt;p&gt;cd into your project directory, in this case &lt;code&gt;storybook-project&lt;/code&gt; and run the command:&lt;br&gt;
&lt;code&gt;npx sb init&lt;/code&gt;&lt;br&gt;
This will completely install storybook in your React project&lt;/p&gt;

&lt;p&gt;Once installation is complete, run &lt;code&gt;yarn storybook&lt;/code&gt; to get storybook running locally.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you encounter challenges getting storybook to run, delete the &lt;code&gt;yarn.lock&lt;/code&gt; and node modules of your project then run &lt;code&gt;yarn&lt;/code&gt; again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Still facing issues? check their &lt;a href="https://storybook.js.org/docs/react/get-started/introduction"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step2-navigating-storybook-interface"&gt;
  &lt;/a&gt;
  Step2: Navigating Storybook interface
&lt;/h2&gt;

&lt;p&gt;After running &lt;code&gt;yarn storybook&lt;/code&gt;, you'll see the Storybook interface show up in your browser. &lt;/p&gt;

&lt;p&gt;The left panel has a search bar to search for different components&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6n2-mCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ursbrjqqjj1h8n8ncy53.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6n2-mCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ursbrjqqjj1h8n8ncy53.gif" alt="Search Storybook" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'd also notice a grouping, with a title named Example. And then a button, header and page components. Each of these components have their own stories which we'll explore shortly. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step3-understanding-the-code-structure"&gt;
  &lt;/a&gt;
  Step3: Understanding the code structure
&lt;/h2&gt;

&lt;p&gt;In code, there are two things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;.storybook&lt;/code&gt; folder with some settings. &lt;br&gt;
For now, we don't need to make edits to this folder. The main thing to take note of is that for components to show up in storybook, you need a &lt;code&gt;.stories.js&lt;/code&gt; file extension. You can equally have a &lt;code&gt;.jsx, .ts, .tsx&lt;/code&gt; file extension.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All stories are in the stories folder in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#exploring-the-raw-stories-endraw-files"&gt;
  &lt;/a&gt;
  Exploring the &lt;code&gt;stories&lt;/code&gt; files
&lt;/h3&gt;

&lt;p&gt;Check out the &lt;code&gt;Button, Header and Page. stories files&lt;/code&gt;. You'd notice a pattern, each of these files have an export default with a Title and Component. &lt;/p&gt;

&lt;p&gt;For storybook to work, every stories file must have an export default with a Title and component property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDp6w74n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqqp3fzmqb8ve5dxdgoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDp6w74n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqqp3fzmqb8ve5dxdgoi.png" alt="Export Default Storybook" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The title as: &lt;code&gt;'Example/Page'&lt;/code&gt; is what groups each of these components under the Example group that we saw earlier.&lt;/p&gt;

&lt;p&gt;The component property is the name of the component as it shows up in storybook. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--avQCxqK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qo313aor4ifgw61l2g4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--avQCxqK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qo313aor4ifgw61l2g4.png" alt="Storybook structure" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#understanding-what-a-story-is"&gt;
  &lt;/a&gt;
  Understanding what a story is
&lt;/h3&gt;

&lt;p&gt;A component can have multiple states or use cases. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These multiple states of a single component are what we define as a story.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, the same button component can have a primary, secondary and large story. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kU6gifgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4niu1wc4xmvz62wy8v4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kU6gifgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4niu1wc4xmvz62wy8v4.gif" alt="Understanding story" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In code, a story is a function that returns a component’s state given a set of arguments. It is a named exports at the bottom of the stories file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvG77y8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agqar8bf13n7ahjz72nc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvG77y8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agqar8bf13n7ahjz72nc.png" alt="Story" width="764" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step4-build-stories-for-a-button-component"&gt;
  &lt;/a&gt;
  Step4: Build stories for a Button Component
&lt;/h2&gt;

&lt;p&gt;To have a good grasp of how to create stories, let's create two new stories for the &lt;code&gt;Button&lt;/code&gt; component- A default story and a disabled story.&lt;/p&gt;

&lt;p&gt;First, delete the stories folder that came with the installation and create a new one. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#build-out-the-button-component"&gt;
  &lt;/a&gt;
  Build out the Button component
&lt;/h3&gt;

&lt;p&gt;Build out the Button component with some styles in a &lt;code&gt;Button.jsx&lt;/code&gt; file within the stories directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
      &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lightgray&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gray&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#build-the-stories"&gt;
  &lt;/a&gt;
  Build the stories
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;Button.stories.jsx&lt;/code&gt; file to build the 2 stories- default story and disabled story. Don't forget to export default and specify the title and the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Components / Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Don't click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYqO4UwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyd4uhd0401wkbjv2hjt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYqO4UwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyd4uhd0401wkbjv2hjt.gif" alt="Button stories" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-argtypes"&gt;
  &lt;/a&gt;
  Defining ArgTypes
&lt;/h3&gt;

&lt;p&gt;ArgTypes is a way to control each story. Think of it like a way to modify the props within your components.&lt;/p&gt;

&lt;p&gt;For our button, we'd add a &lt;code&gt;disabled&lt;/code&gt; argType and specify the control as a boolean (since this is going to be either true or false).&lt;/p&gt;

&lt;p&gt;Also, since the children prop is a text, set the argTypes control to &lt;code&gt;text&lt;/code&gt;. See code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Components / Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;argTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Disabled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't click me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can tweak each story component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJDpJNa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a7gac4qfdb9cfm19jbz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJDpJNa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a7gac4qfdb9cfm19jbz.gif" alt="Storybook Argtypes" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congrats-youve-just-learned-how-to-create-stories-for-your-react-project"&gt;
  &lt;/a&gt;
  Congrats! You've just learned how to create stories for your React project.
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a more video tutorial, watch &lt;a href="https://youtu.be/U7lW6qAsvrg"&gt;learn Storybook in 8mins&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Storybook offers you many more features like performing unit tests on stories to confirm functionality, accessibility checks and more. Best of all, you can publish your storybook online using &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;, and other hosting platforms.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>uiweekly</category>
      <category>react</category>
    </item>
    <item>
      <title>how to prepare for flatiron school // resources i used</title>
      <author>Eleni Papanicolas</author>
      <pubDate>Tue, 30 Nov 2021 14:32:04 +0000</pubDate>
      <link>https://dev.to/e_papanicolas/how-to-prepare-for-flatiron-school-resources-i-used-3ela</link>
      <guid>https://dev.to/e_papanicolas/how-to-prepare-for-flatiron-school-resources-i-used-3ela</guid>
      <description>&lt;p&gt;Looking over the Flatiron School &lt;a href="https://flatironschool.com/campus-and-online-coding-bootcamp/"&gt;website&lt;/a&gt; and reading about the Software Engineering Live program, I felt a sense of excitement alongside a sense of dread. Questions swirled around my head for days as I pondered my decision to do this. Is it right for me? Is it wrong for me? Am I smart enough? Will I be able to absorb all of this information? But the one question that was above all other questions: &lt;em&gt;Am I prepared enough?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I wouldn't be able to answer this question though, until I had begun the program. As I pored over the pre-work, I felt a sense of relief. I seemed to have a grasp on what was being asked of me. And as I power through Phase-1, that feeling, albeit unsteady, persists. &lt;/p&gt;

&lt;p&gt;That being said, I wanted to share some of the resources I used in my journey &lt;strong&gt;towards&lt;/strong&gt; Flatiron School.&lt;/p&gt;

&lt;p&gt;Years ago, a friend had made a career change into tech by teaching herself and using &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;. So this year, when I decided myself to make a similar leap, this seemed like a natural starting point. After taking a few free lessons on the Codecademy website, I decided to upgrade to the Pro version. The options were simple: $40/month on a monthly subscription, or $20/month for a full year subscription. I immediately sprung for the yearly subscription and it was 100% worth the purchase. Codecademy has seemingly endless courses, ranging from Intro level, Skill Paths and even Career Paths. &lt;/p&gt;

&lt;p&gt;The courses I dabbled in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build A Website with HTML, CSS, and Github Pages&lt;/li&gt;
&lt;li&gt;Learn Javascript&lt;/li&gt;
&lt;li&gt;Front-End Engineer Career Path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these were only a few of the possibilities and options available. Subjects such as Data Science, Machine Learning, Game Development and Cyber Security are offered as Career and Skill Paths. Python, JavaScript, SQL, Ruby, PHP and Swift are among the many languages they also offer courses in. Learning on Codecademy certainly set me up for success in my continuing education and I plan to keep my subscription for further learning in the future.&lt;/p&gt;

&lt;p&gt;As I got more and more into the development community, I began listening to a few coding podcasts to hear from others in the coding community and try and understand how to relate the information to my own path forward. The &lt;a href="https://www.codenewbie.org/podcast"&gt;Code Newbie Podcast&lt;/a&gt; quickly became a favorite of mine. I loved listening to the host Saron interview her guests about their own journeys into tech, discuss the subject of the day, and then relate it to code newbies like myself. Listening to this podcast gave me different bits of information on various aspects of breaking into the tech world, and also led me to my next learning resource. &lt;/p&gt;

&lt;p&gt;One guest on the Code Newbie podcast, was someone I had previously read about and heard talk on another podcast, so when Wes Bos was featured on my favorite podcast I knew it was time to check his stuff out. They discussed a popular free mini-course that he had released called JavaScript 30, a 30 day code challenge making projects using vanilla JavaScript. That seemed a little daunting to me, but then I discovered he had released a Beginner Javascript course on &lt;a href="https://wesbos.com/"&gt;wesbos.com&lt;/a&gt;. It seemed like a no brainer for me, as I was trying to find ways to level up. And I am so so glad I went for it. His course includes 88 video files or the option to stream the course, as well as a full Github repo containig starter files and solutions. The videos are separated by distinct subject for ease of use when re-watching or trying to find certain information. What I liked was the ability to pause the videos or code along with him. He is a fantastic teacher, and projects sprinkled in throughout the course really help show how much you are learning. I took the premium Beginner JavaScript course, but he also offers free courses on CSS Grid and Flexbox, CLI, Markdown and Redux. Some of his premium courses include Learn Node, React for Beginners, Advanced React and GraphQL, and Master Gatsby. This course left me hungry for even more learning. Which led me to... you guessed it! &lt;strong&gt;FLATIRON!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By this time in my personal journey, I was really feeling like I had a precarious grasp on the fundamentals, but no idea how to tie it all together. Upon a recommendation from a friend who had been through Flatiron's Software Engineering Live, I decided to pursue the Full Stack route, with hopes that I could utilize everything I'd learned and once again, &lt;em&gt;level up&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some other great resources that I have found helpful along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;W3 Schools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can't wait to share more with you about my Flatiron coding journey. &lt;em&gt;Stay tuned.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Make A Custom Map App with Redwood</title>
      <author>Milecia</author>
      <pubDate>Tue, 30 Nov 2021 14:31:48 +0000</pubDate>
      <link>https://dev.to/flippedcoding/make-a-custom-map-app-with-redwood-2gj3</link>
      <guid>https://dev.to/flippedcoding/make-a-custom-map-app-with-redwood-2gj3</guid>
      <description>&lt;p&gt;Having locations marked on a map is something that a lot of us depend on. Whether it's figuring out where a restaurant is or trying to find the nearest metro, we use maps quite a bit. Knowing how to work with maps as a developer is a niche skill with plenty of demand.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll make a map app that lets users choose the location for the pin. It will save this location and upload a snapshot of the map to Cloudinary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-initial-things"&gt;
  &lt;/a&gt;
  Some initial things
&lt;/h2&gt;

&lt;p&gt;There are a couple of tools we need to set up before we start writing any code. We'll be using a local PostgreSQL database. If you don't have a local instance installed, you can &lt;a href="https://www.postgresql.org/download/"&gt;download it for free here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll also need a Cloudinary account to host your map snapshots. You can &lt;a href="https://cloudinary.com/users/register/free"&gt;sign up for a free one here&lt;/a&gt;. Since we'll be uploading images from the front-end directly to Cloudinary, we need to &lt;a href="https://cloudinary.com/console/settings/upload"&gt;set up an upload preset&lt;/a&gt; in our account settings. On this page, click the "Add upload preset" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jl-XnxyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137620/e-603fc55d218a650069f5228b/s76i6knunxmxxdhiuy6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jl-XnxyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137620/e-603fc55d218a650069f5228b/s76i6knunxmxxdhiuy6v.png" alt="add upload preset button" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will bring us to a new page where we can define specific values for our preset. There are only a couple of things we'll change here.&lt;/p&gt;

&lt;p&gt;Update the "Signing Mode" to "Unsigned". This is how we'll handle the uploads from our client app. Then add a "Folder" value of "map-shots". This will put all of our uploaded map snapshots into one folder. Your settings should look similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvj7c1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137647/e-603fc55d218a650069f5228b/efz4ykalgxzh50uciz1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvj7c1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137647/e-603fc55d218a650069f5228b/efz4ykalgxzh50uciz1c.png" alt="upload preset setting value" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a quick note of the "Upload preset name". You'll need this when it's time to upload images from the user. Now we can write some code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-app"&gt;
  &lt;/a&gt;
  Creating the app
&lt;/h2&gt;

&lt;p&gt;We're going to make this app using &lt;a href="https://redwoodjs.com/"&gt;Redwood&lt;/a&gt;. Open a terminal and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create redwood-app map-shot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new Redwood app that has a fully functioning React front-end and GraphQL back-end. The front-end code is stored in the &lt;code&gt;web&lt;/code&gt; directory and the back-end code is in the &lt;code&gt;api&lt;/code&gt; directory. These are the two main folders we'll be working with.&lt;/p&gt;

&lt;p&gt;Let's start by setting up a quick environment variable. You should have a &lt;code&gt;.env&lt;/code&gt; file at the root of your project. Open that and add the connection string for your local Postgres instance. That might look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=postgres://admin:postgres@localhost:5432/map_shots
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start writing the schema for our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-the-database-schema"&gt;
  &lt;/a&gt;
  Defining the database schema
&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;api &amp;gt; db&lt;/code&gt;, open the &lt;code&gt;schema.prisma&lt;/code&gt; file. This is where we define our database connection and table schema using &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;. We first need to update the &lt;code&gt;provider&lt;/code&gt; value to &lt;code&gt;postgresql&lt;/code&gt; from &lt;code&gt;sqlite&lt;/code&gt;. We set the &lt;code&gt;DATABASE_URL&lt;/code&gt; value in the &lt;code&gt;.env&lt;/code&gt; file so that's ready for us.&lt;/p&gt;

&lt;p&gt;Now we can delete the example model and replace it with a schema for our map snapshots. Add the following code to replace the example model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;        &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;xPosition&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
  &lt;span class="nx"&gt;yPosition&lt;/span&gt; &lt;span class="nx"&gt;Float&lt;/span&gt;
  &lt;span class="nx"&gt;imageUrl&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the values that will be taken from the user and stored in our database. This is the only table we'll have for now so we can save these changes and run a database migration to persist them to Postgres. To do that, open your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw prisma migrate dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the new database and this table we've defined. With all of this in place, we're done with the database work. Let's turn our attention to the GraphQL server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-the-graphql-server"&gt;
  &lt;/a&gt;
  Generating the GraphQL server
&lt;/h2&gt;

&lt;p&gt;One of the best things about working with Redwood is how much work it does for you. We need to define the types and resolvers to make updates to the rows in our database. Normally we would make those files and write the code ourselves, but there's a command in Redwood that does this for us based on the schema we just wrote.&lt;/p&gt;

&lt;p&gt;In your terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g sdl snapshot &lt;span class="nt"&gt;--crud&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now take a look in the &lt;code&gt;api &amp;gt; src&lt;/code&gt; directory. You'll see some updates to the &lt;code&gt;graphql&lt;/code&gt; and &lt;code&gt;services&lt;/code&gt; directories. The command we just ran generated both the GraphQL types and all of the CRUD mutations and queries for us.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;code&gt;api &amp;gt; src &amp;gt; graphql &amp;gt; snapshots.sdl.js&lt;/code&gt; to see the types. Then look through &lt;code&gt;api &amp;gt; src &amp;gt; services &amp;gt; snapshots&lt;/code&gt; to see the queries, mutations, and test files that have been created for us.&lt;/p&gt;

&lt;p&gt;We just created our entire GraphQL server with one command. You can modify any of the code in these files if you ever need more complex types or resolvers, but this gives you a way to quickly set up the basics.&lt;/p&gt;

&lt;p&gt;Since we have the back-end ready to go, let's switch over to the front-end and set things up for our users to interact with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-user-interface"&gt;
  &lt;/a&gt;
  Making the user interface
&lt;/h2&gt;

&lt;p&gt;We'll need to add three packages in order to make our map. In a terminal, go to the &lt;code&gt;web&lt;/code&gt; directory and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add leaflet react-leaflet html-to-image
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us access to &lt;a href="https://react-leaflet.js.org/"&gt;react-leaflet&lt;/a&gt; which lets us do a lot of cool things with maps.&lt;/p&gt;

&lt;p&gt;We need to use &lt;code&gt;leaflet&lt;/code&gt;'s stylesheet so that the map components render correctly. That means we need to add this code to &lt;code&gt;index.html&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="&lt;/span&gt;
&lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this package installed and configured, we can start working on the page for this map.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-new-page"&gt;
  &lt;/a&gt;
  Add a new page
&lt;/h3&gt;

&lt;p&gt;We'll use another Redwood command to generate the page and route for where the map will be rendered. In a terminal go to the root of your project and run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g page map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to &lt;code&gt;web &amp;gt; src &amp;gt; pages&lt;/code&gt;, you'll see a newly created folder called &lt;code&gt;MapPage&lt;/code&gt;. This has several files to help enforce coding best practices, but the main one we'll work with is &lt;code&gt;MapPage.js&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-core-functionality-to-the-page"&gt;
  &lt;/a&gt;
  Add the core functionality to the page
&lt;/h3&gt;

&lt;p&gt;We can delete all of the imports and clear out the code in the component to start fresh. Then we'll add the following packages we'll be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MapContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TileLayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Popup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-leaflet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toPng&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html-to-image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are all of the methods and components we need to make this map app stored values in the database and images in Cloudinary.&lt;/p&gt;

&lt;p&gt;Next we'll define the GraphQL mutation we need to add a new snapshot to the database. Right below the imports, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CREATE_SNAPSHOT_MUTATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation CreateSnapshotMutation($input: CreateSnapshotInput!) {
    createSnapshot(input: $input) {
      id
    }
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to start adding functionality inside the &lt;code&gt;MapPage&lt;/code&gt; component. We'll start by setting up some variables. Your component should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MapPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;createSnapshot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CREATE_SNAPSHOT_MUTATION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;36.49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The pit of the Midwest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can write one of the functions that will let us handle our user changes. First, we'll write the function that will get called when a user submits the form we create a bit later. This will handle setting some states and it will call the method that uploads the image and adds the record to the database.&lt;/p&gt;

&lt;p&gt;Below the initial variables, add the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatePin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;xPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;

  &lt;span class="nx"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;xPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;onCapture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to handle the event from our form submission so that the page doesn't refresh. It gets the form values from the inputs and then updates the respective states. Then it calls the &lt;code&gt;onCapture&lt;/code&gt; method, which is where some interesting things happen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-a-snapshot-of-the-map-to-cloudinary-and-the-database"&gt;
  &lt;/a&gt;
  Save a snapshot of the map to Cloudinary and the database
&lt;/h3&gt;

&lt;p&gt;Let's go ahead and make this &lt;code&gt;onCapture&lt;/code&gt; method. Add the following code to your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onCapture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;toPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cacheBust&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.cloudinary.com/v1_1/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/image/upload`&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upload_preset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uploadPresetName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploadApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;xPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="na"&gt;yPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="na"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createSnapshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mapRef&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;lt;--&lt;br&gt;&lt;br&gt;
 createSnapshot({&lt;br&gt;
      variables: { input },&lt;br&gt;
    }, [mapRef])&lt;br&gt;
--&amp;gt;&lt;/p&gt;

&lt;p&gt;Quite a few things are happening here. First, we're checking to make sure our referenced component is loaded. Then we're using the &lt;code&gt;toPng&lt;/code&gt; method from &lt;code&gt;html-to-image&lt;/code&gt; to create a png data URL based on the elements inside our &lt;code&gt;mapRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, add the API string for Cloudinary. This is where you'll need to use the cloud name from your account. Then we create a new &lt;code&gt;FormData&lt;/code&gt; variable and add the data URL for the snapshot and the upload preset we created earlier.&lt;/p&gt;

&lt;p&gt;Then we do a POST request to the API and upload the snapshot. We wait for the response to come back because it will have a Cloudinary URL we can use as the source for images in HTML elements. This is what we'll be saving to the database.&lt;/p&gt;

&lt;p&gt;The last thing we do is make an input variable for our GraphQL call and then add this record to the database. All that's left is to write the elements that need to show to the user.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-the-elements-to-the-page"&gt;
  &lt;/a&gt;
  Adding the elements to the page
&lt;/h2&gt;

&lt;p&gt;We need a return statement to render these elements. So add this code to your file and we'll talk through what's happening.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mapRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MapContainer&lt;/span&gt;
        &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;scrollWheelZoom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;550px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;750px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TileLayer&lt;/span&gt;
          &lt;span class="nx"&gt;attribution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;copy; &amp;lt;a href="http://osm.org/copyright"&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt; contributors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;armpit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Oklahoma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Popup&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;.
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Marker&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MapContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updatePin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xPosition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nx"&gt;pin&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xPosition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yPosition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nx"&gt;pin&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yPosition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a containing element with a flex style applied. This will show the map on the left of the screen and the form to its right. Then we'll have the container with our &lt;code&gt;ref&lt;/code&gt; prop to capture the screenshot.&lt;/p&gt;

&lt;p&gt;Inside of this, we have a title for the map and the map itself. The &lt;code&gt;&amp;lt;MapContainer&amp;gt;&lt;/code&gt; component has a few props defined that tell the map where to be centered when a user first views the page.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;&amp;lt;MapContainer&amp;gt;&lt;/code&gt; component, the &lt;code&gt;&amp;lt;TileLayer&amp;gt;&lt;/code&gt; component is used to make up the map sections. You can check out the react-leaflet documentation for more information. The &lt;code&gt;&amp;lt;Marker&amp;gt;&lt;/code&gt; component lets us set the little pinpoint you see on most maps.&lt;/p&gt;

&lt;p&gt;Lastly, we have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that calls the &lt;code&gt;updatePin&lt;/code&gt; method whenever it is submitted. This is what triggers all of the functionality we wrote out earlier.&lt;/p&gt;

&lt;p&gt;It's time to run the app and see all of this in action. At the root of your project, run this in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;lt;!— Please mention user may have to [yarn —force] then after run [yarn rw dev] .. user may come into frustrating error .prisma client not found - this will resolve it. —&amp;gt;&lt;/p&gt;

&lt;p&gt;This starts up the local development server for both the GraphQL server and the front-end. When the app opens in the browser, you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKb8bvcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137750/e-603fc55d218a650069f5228b/oohnxnvisfslimqwynd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKb8bvcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137750/e-603fc55d218a650069f5228b/oohnxnvisfslimqwynd0.png" alt="a map with a pin in the armpit of Oklahoma" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can update the map with the fields to the right. Keep in mind that the map won't auto-focus on the new point, so you might need to zoom out to see where you land. Here's an example of an update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSR-S5hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137763/e-603fc55d218a650069f5228b/g6fuaenb87s8hapz9wtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSR-S5hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1636137763/e-603fc55d218a650069f5228b/g6fuaenb87s8hapz9wtx.png" alt="moved the pin to New York instead of Oklahoma" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at your Postgres instance, you'll see new records in your table and if you look on Cloudinary you'll see a new "map-shots" folder.&lt;/p&gt;

&lt;p&gt;That's it! We're finally finished with the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finished-code"&gt;
  &lt;/a&gt;
  Finished code
&lt;/h2&gt;

&lt;p&gt;If you want to take a look at the complete code, check out the &lt;a href="https://github.com/flippedcoder/blog-examples/tree/main/map-shot"&gt;&lt;code&gt;map-shot&lt;/code&gt; folder of this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the front-end in &lt;a href="https://codesandbox.io/s/eager-bassi-yz0hf"&gt;this Code Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can expand this app to do many interesting things like making paths to special locations or pointing out obscure landmarks. One of the tricky things is making sure you stay on land! Hopefully, you see how you can bring together a lot of different technologies quickly to make a sophisticated app.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make your own blog site with GatsbyJS</title>
      <author>Simran Makhija</author>
      <pubDate>Tue, 30 Nov 2021 14:25:24 +0000</pubDate>
      <link>https://dev.to/justdev_sim/make-your-own-blog-site-with-gatsbyjs-5em6</link>
      <guid>https://dev.to/justdev_sim/make-your-own-blog-site-with-gatsbyjs-5em6</guid>
      <description>&lt;p&gt;As a part of the #100DaysOfCode challenge, I decided to create a blog to document my journey with the challenge.&lt;/p&gt;

&lt;p&gt;This blog is built using GatsbyJS, and I learned the basics of Gatsby in a couple of days. If you know ReactJS, Gatsby is easy to catch on to.&lt;/p&gt;

&lt;p&gt;Without further ado, let's dive into how you can develop a blog just like this for sharing your own thoughts and journeys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#WhatisGatsbyJS?"&gt;What is GatsbyJS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#starters"&gt;What are starters in Gatsby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prereq"&gt;System Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#develop"&gt;Developing the site&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-gatsbyjs"&gt;
  &lt;/a&gt;
  What is GatsbyJS?
&lt;/h3&gt;

&lt;p&gt;Gatsby is a React-based open-source framework for creating websites and apps.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-starters-in-gatsby"&gt;
  &lt;/a&gt;
  What are starters in Gatsby?
&lt;/h3&gt;

&lt;p&gt;To develop our blog we will be using the &lt;a href="https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog"&gt;gatsby-starter-blog starter&lt;/a&gt;, but what is a starter?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a boilerplate Gatsby site that helps jump-start the development process.&lt;/li&gt;
&lt;li&gt;Starters are maintained by the community, for the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#system-prerequisites"&gt;
  &lt;/a&gt;
  System Prerequisites
&lt;/h3&gt;

&lt;p&gt;You need to perform the following installations on your system before you begin with the development:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt;: preferably the LTS version.&lt;/li&gt;
&lt;li&gt;After you install Node.js, open your terminal or command prompt and install gatsby-cli using npm with the command&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To facilitate deployment and to make your repository on GitHub, you need to download and install &lt;a href="https://git-scm.com/downloads"&gt;git&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  OR
&lt;/h4&gt;

&lt;p&gt;Use &lt;a href="https://codesandbox.io"&gt;CodeSandbox&lt;/a&gt; to develop right from your browser! Creating and setting up the project is significantly easier and hassle-free in a sandbox. [Will not be using this method in this blog.]&lt;/p&gt;

&lt;p&gt;We're all set to begin development!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-the-site"&gt;
  &lt;/a&gt;
  Developing the site
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#steps-to-develop"&gt;
  &lt;/a&gt;
  Steps to develop
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;Create a new gatsby project and install the starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Run the website locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Create a GitHub repository and push the code to the repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Change author details in &lt;code&gt;gatsby-config.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Create your first blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#create-a-new-gatsby-project-and-install-the-starter"&gt;
  &lt;/a&gt;
  Create a new gatsby project and install the starter
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Using your terminal, navigate to the directory where you want to create the project.&lt;/li&gt;
&lt;li&gt;To create a new project, we use the &lt;code&gt;gatsby new&lt;/code&gt; command, we can install the starter in 2 ways:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gatsby new {project-name} {starter-repo-link}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gatsby new {project-name} {GithHub_username/repo_name}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, I want to call my project 'my-blog':&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt; &lt;code&gt;gatsby new my-blog https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt;gatsby new my-blog gatsbyjs/gatsby-starter-blog&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#run-the-website-locally"&gt;
  &lt;/a&gt;
  Run the website locally
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to your project directory in the terminal.
&amp;gt; &lt;code&gt;cd my-blog&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install all dependencies using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\my-blog&amp;gt; npm install&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\my-blog&amp;gt; yarn&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;gatsby develop&lt;/code&gt;. The terminal output will look like this.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt; &lt;span class="nx"&gt;gatsby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;7.188&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;6.805&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="nx"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.107&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.041&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mf"&gt;24.10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="err"&gt;⠀&lt;/span&gt;
&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;⠀&lt;/span&gt;
  &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:8000/&lt;/span&gt;
&lt;span class="err"&gt;⠀&lt;/span&gt;
&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;GraphiQL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="nx"&gt;IDE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;explore&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s data and schema
⠀
  http://localhost:8000/___graphql
⠀
Note that the development build is not optimized.
To create a production build, use gatsby build
⠀
success Building development bundle - 18.418s
success Writing page-data.json files to public directory - 1.640s - 2/3 1.83/s


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The website will now be accessible at &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;. As long as the development server is running, you can view your website here. It automatically recompiles every time you save changes as long as 'gatsby develop' is running.&lt;/p&gt;

&lt;p&gt;The GraphiQL interface at &lt;a href="http://localhost:8000/___graphql"&gt;http://localhost:8000/___graphql&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is okay if you don't have experience working with GraphQL, I have yet to learn it and it is not needed to build this blog thanks to the starter!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#create-a-github-repository-and-push-the-code-to-the-repository"&gt;
  &lt;/a&gt;
  Create a GitHub repository and push the code to the repository
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the project directory in the terminal.&lt;/li&gt;
&lt;li&gt;Run the command &lt;code&gt;git init&lt;/code&gt; to initialise a local git repository.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git add -all&lt;/code&gt; to add all files to git.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git commit -m "create initial commit"&lt;/code&gt; to commit these files to the repository.&lt;/li&gt;
&lt;li&gt;Now, sign in to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and &lt;a href="https://docs.github.com/en/get-started/quickstart/create-a-repo"&gt;create a new empty repository&lt;/a&gt;. Copy the link to the repo. For example: &lt;em&gt;&lt;a href="https://github.com/SimranMakhija7/blog"&gt;https://github.com/SimranMakhija7/blog&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;In your terminal, in your local repository, run the following command to link to GitHub repo:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git remote add origin {repo-link}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, replace the {repo-link} with the link copied in the previous step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push the initial commit to GitHub using the command &lt;code&gt;git push -u origin main&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our repository is now on GitHub! Now let's make some changes so that the blog is ours!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#change-author-details-in-raw-gatsbyconfigjs-endraw-"&gt;
  &lt;/a&gt;
  Change author details in &lt;code&gt;gatsby-config.js&lt;/code&gt;
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Open the file '/my-blog/gatsby-config.js' in your favorite editor. I use VSCode.&lt;/li&gt;
&lt;li&gt;The file contains a &lt;code&gt;module.exports&lt;/code&gt; object, within which the &lt;code&gt;siteMetadata&lt;/code&gt; is there. It should look like this:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siteMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Gatsby Starter Blog`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Kyle Mathews`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`who lives and works in San Francisco building useful things.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`A starter blog demonstrating what Gatsby can do.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://gatsbystarterblogsource.gatsbyjs.io/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;social&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`kylemathews`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace with your details, except for &lt;code&gt;siteUrl&lt;/code&gt; for now, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siteMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Simran's Blog`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Simran Makhija`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`who lives and studies Computer Science in Indore, India.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`My blog for sharing all things tech and community, built with GatsbyJS as a part of #100DaysOfCode`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://gatsbystarterblogsource.gatsbyjs.io/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;social&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`justdev_sim`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Replace &lt;code&gt;src/images/profile-pic.png&lt;/code&gt; with your own picture. Make sure the name of the image is &lt;code&gt;profile-pic.png&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, the blog has your name, title info and image!&lt;br&gt;
The site will now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOQ9VJy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt1fwfs6wrdvswcrluk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOQ9VJy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt1fwfs6wrdvswcrluk8.png" alt="Blog with your details" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#create-your-first-blog-post"&gt;
  &lt;/a&gt;
  Create your first blog post
&lt;/h5&gt;

&lt;p&gt;Now, let's take a look at how our blogs are stored and organised.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;content\blog&lt;/code&gt; directory stores all your blog posts.&lt;/li&gt;
&lt;li&gt;Each blog post has its own subdirectory. The name of this subdirectory corresponds to the route at which the blog will be rendered.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example: The blog within the &lt;code&gt;hello-world&lt;/code&gt; folder can be found at &lt;em&gt;{base-url}/hello-world&lt;/em&gt; (&lt;a href="http://localhost:8000/hello-world"&gt;http://localhost:8000/hello-world&lt;/a&gt; on our local server)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;index.md&lt;/code&gt; file contains the markdown source for your blog. The default &lt;code&gt;hello-world&lt;/code&gt; contains a markdown cheatsheet of sorts that I have stored in a separate file and refer to for syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let's go ahead and write our own first blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete all folders within &lt;code&gt;content/blog&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new folder &lt;code&gt;hello-world&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Within this folder, create a new file &lt;code&gt;index.md&lt;/code&gt;. This is where we'll write our markdown source.&lt;/li&gt;
&lt;li&gt;In the file, add the frontmatter:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World"&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2021-11-26T22:00:32.169Z"&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hi!&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;I&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;am&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;student&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;developer.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Nice&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;meet&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;you!"&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This front matter corresponds to the name, date and blog description we see on the home page like so:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DyNwW_yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp1ttibwoz7cf8uneqoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DyNwW_yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp1ttibwoz7cf8uneqoq.png" alt="Blog description on home page" width="542" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Below the frontmatter, you can include the entire content of your blog.
Here's how my &lt;code&gt;content/blog/hello-world/index.md&lt;/code&gt; looks:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
title: Hello World
date: "2021-11-26T22:00:32.169Z"
&lt;span class="gh"&gt;description: "Hi! I am a student developer. Nice to meet you!"
--------
&lt;/span&gt;
Hi! I am &lt;span class="gs"&gt;**Simran Makhija**&lt;/span&gt; 🙋🏻‍♀️ Nice to meet you 🤝
I am a final year &lt;span class="gs"&gt;**Computer Science &amp;amp; Engineering**&lt;/span&gt; student from Indore, India.👩‍💻
....
Thank you for dropping by!🌸
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Save all changes and push them to your GitHub repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is it on developing the blog site. Hope it was easy to follow and helpful.&lt;/p&gt;

&lt;p&gt;In my next blog, I will be writing about deploying this site to the internet.&lt;/p&gt;

&lt;p&gt;Thank you for reading! See you then :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A sample e-commerce web app built with ReactJS, ExpressJS and MongoDB</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Tue, 30 Nov 2021 14:12:04 +0000</pubDate>
      <link>https://dev.to/linhtch90/a-sample-e-commerce-web-app-built-with-reactjs-expressjs-and-mongodb-4dp3</link>
      <guid>https://dev.to/linhtch90/a-sample-e-commerce-web-app-built-with-reactjs-expressjs-and-mongodb-4dp3</guid>
      <description>&lt;p&gt;MERN stack which stands for MongoDB, ExpressJS, ReactJS and NodeJS has become a popular choice for fullstack Javascript web developer.&lt;/p&gt;

&lt;p&gt;As a personal project for education purpose, I developed a basic bookstore web app with MERN stack.&lt;/p&gt;

&lt;p&gt;Through this project, beginners could have a useful resource to understand how to implement ReactJS, Redux, React Router and others related libraries in React ecosystem to build up a functional front-end solution.&lt;/p&gt;

&lt;p&gt;In addition, the back-end developed with ExpressJS and MongoDB is also an example for building a web api with Javascript.&lt;/p&gt;

&lt;p&gt;Further detail information is available on Homepage of the live demo at:&lt;br&gt;
&lt;a href="https://bn-bookstore.herokuapp.com/#/"&gt;https://bn-bookstore.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code is available at:&lt;br&gt;
&lt;a href="https://github.com/linhtch90/bn_bookstore_public_source"&gt;https://github.com/linhtch90/bn_bookstore_public_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please give me a Github star ⭐ as a compliment if my effort is useful for you! Thanks! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Analyze and Improve your 'Create React App' Production Build</title>
      <author>Alex E</author>
      <pubDate>Tue, 30 Nov 2021 14:04:24 +0000</pubDate>
      <link>https://dev.to/alexeagleson/how-to-analyze-and-improve-your-create-react-app-production-build-4f34</link>
      <guid>https://dev.to/alexeagleson/how-to-analyze-and-improve-your-create-react-app-production-build-4f34</guid>
      <description>&lt;p&gt;If you are interested in a video version of this tutorial, check out the link below. You can follow along with the code in this blog.  &lt;em&gt;(The video is entirely optional, every step and instruction is covered in the blog post.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/gJxgjyhbGHQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fFAWH9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638284142/blogs/create-react-app-bundle-analyze/CRA_Youtube_Preview_xaqskf.png" alt="Create React App Analyze Tutorial" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we're gonna take a step-by-step look at how to analyze and optimize your &lt;em&gt;Create React App&lt;/em&gt; project using a custom webpack configuration that is extremely easy to set up.&lt;/p&gt;

&lt;p&gt;We will be using examples that make small adjustments and try different ways of importing modules and splitting your code to see the direct impacts it has on your bundle sizes and performance.  &lt;/p&gt;

&lt;p&gt;The goal here is to help you get a better understanding of what &lt;em&gt;webpack&lt;/em&gt; is actually doing by seeing the exact changes that occur to a production build when you make small changes to your application.&lt;/p&gt;

&lt;p&gt;To begin, we'll create a brand new React app called &lt;code&gt;something-big-and-bloated&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app something-big-and-bloated &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll install the dependencies we need to analyze the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @craco/craco webpack-bundle-analyzer &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;craco&lt;/strong&gt;: A tool to use a custom webpack configuration with &lt;em&gt;Create React App&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;webpack-bundle-analyzer&lt;/strong&gt;: A webpack plugin for analyzing bundle size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to create a configuration file for &lt;code&gt;craco&lt;/code&gt; in the root of our project to include our webpack plugin:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;craco.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BundleAnalyzerPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-bundle-analyzer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;BundleAnalyzerPlugin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BundleAnalyzerPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;analyzerMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the usual &lt;code&gt;npm run build&lt;/code&gt; script for a production build, it will use the standard &lt;code&gt;react-scripts&lt;/code&gt; method.  &lt;/p&gt;

&lt;p&gt;However if we run &lt;code&gt;craco build&lt;/code&gt; it will still run the same process, but inject in any webpack configuration you have included in your &lt;code&gt;craco.config.js&lt;/code&gt; file.  Pretty sweet.  &lt;/p&gt;

&lt;p&gt;Let's give it a try.  We'll create a new entry called &lt;strong&gt;analyze&lt;/strong&gt; in &lt;code&gt;package.json&lt;/code&gt; scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"analyze"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"craco build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we set the &lt;code&gt;analyzerMode&lt;/code&gt; to &lt;code&gt;"server"&lt;/code&gt; in our craco config, we will automatically get our browser open with the results served as a webpage &lt;em&gt;(you can use the &lt;code&gt;"json"&lt;/code&gt; option if you want the output without involving the browser)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4h_J-UqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638238643/blogs/create-react-app-bundle-analyze/initial-size_ynrhea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h_J-UqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638238643/blogs/create-react-app-bundle-analyze/initial-size_ynrhea.png" alt="Initial Size" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can hover over each module within the chunks or your can use the little arrow at the upper left which pops out a drawer.  You'll get three different values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;stat&lt;/strong&gt;: The size of the original source code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;parsed&lt;/strong&gt;: the size of the same code as compiled bundles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gzipped&lt;/strong&gt;: the size of the compiled bundles after being gzipped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for most deployments you can look at the gzipped value as how much network usage you will need, and the parsed size as how much code the browser is going to handle once unzipping is complete.  Be aware that this value can be just as problematic on users with less powerful CPUs as the gzip size can be for those on slow networks.  Both are important to consider.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;create-react-app&lt;/code&gt; v4.0.3 for this tutorial the values I get are 205kb / 135kb / 44kb for stat / parsed / gzipped respectively.  You can see right out of the box we get a bit of overhead (though for most users that's a small price to pay for convenience).  &lt;/p&gt;

&lt;p&gt;Now let's try adding some libraries and look at how this value changes.  We'll consider the way that we do our imports and see how we might be able to better control our bundle size by only importing what we need.  &lt;/p&gt;

&lt;p&gt;I'm gonna pick a fairly popular UI library called MUI (Material UI).  It's a good example of a large package that significantly weigh down your app if not bundled properly.  It will make a good example for our tutorial.&lt;/p&gt;

&lt;p&gt;We will need the following packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mui.com/"&gt;@mui/material&lt;/a&gt; - A React component library designed to give you some useful pre-styled components out of the box&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mui.com/components/material-icons/"&gt;@mui/icons-material&lt;/a&gt;: An icon package for MUI based on &lt;a href="https://fonts.google.com/icons"&gt;material icons&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@emotion/react"&gt;@emotion/react&lt;/a&gt;: Required for &lt;code&gt;@mui/material&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@emotion/styled"&gt;@emotion/styled&lt;/a&gt;: Required for &lt;code&gt;@mui/material&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @mui/material @mui/icons-material @emotion/react @emotion/styled &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we even do anything let's run our analyzer again.  Remember we've added these libraries, but we aren't actually &lt;em&gt;using&lt;/em&gt; any of them yet.  Do you think our bundle size will increase?  Let's find out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;205kb / 135kb / 44kb again.  Exact same result.  That's great!  That means that webpack is not including any libraries we don't actually use.  It's doing its job well.&lt;/p&gt;

&lt;p&gt;Now we'll import a component from MUI.  We'll grab a relatively complex one, something more than a button.  Let's use the &lt;a href="https://mui.com/components/speed-dial/"&gt;Speed Dial&lt;/a&gt;!  Create a new component file in &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/CustomSpeedDial.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDial&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDialIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDialIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDialAction&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDialAction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FileCopyIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/FileCopyOutlined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SaveIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Save&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PrintIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ShareIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileCopyIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SaveIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Save&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrintIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShareIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CustomSpeedDial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateZ(0px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flexGrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDial&lt;/span&gt;
        &lt;span class="na"&gt;ariaLabel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"SpeedDial basic example"&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDialIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDialAction&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;tooltipTitle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the contents of your &lt;code&gt;App.tsx&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomSpeedDial&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CustomSpeedDial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomSpeedDial&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the development server to check it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bc59LkEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638242651/blogs/create-react-app-bundle-analyze/speeddial_ugf7ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bc59LkEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638242651/blogs/create-react-app-bundle-analyze/speeddial_ugf7ue.png" alt="MUI Speed Dial" width="78" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything looks good.  Let's see how much that impacted our build.  Run our analyze command again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQ75b-I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638242899/blogs/create-react-app-bundle-analyze/mui-size_dntazk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQ75b-I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638242899/blogs/create-react-app-bundle-analyze/mui-size_dntazk.png" alt="BUndle With Speed Dial" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our bundle size is now up to 660kb / 270kb / 88kb.  That's a significant increase for one component!  Of course bear in mind that it's fairly complex, and as soon as you use one you need to include all the other dependencies that make MUI function.  &lt;/p&gt;

&lt;p&gt;I'd bet if you added a second component you wouldn't get such a big jump.  In fact we can try now.  Add the following to your SpeedDial component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/CustomSpeedDial.tsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDial&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDialIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDialIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeedDialAction&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/SpeedDialAction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FileCopyIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/FileCopyOutlined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SaveIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Save&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PrintIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ShareIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/icons-material/Share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// NEW&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileCopyIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SaveIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Save&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrintIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShareIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Share&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CustomSpeedDial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateZ(0px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flexGrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* NEW */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"contained"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDial&lt;/span&gt;
        &lt;span class="na"&gt;ariaLabel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"SpeedDial basic example"&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDialIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SpeedDialAction&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;tooltipTitle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SpeedDial&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've imported a button above and included it with our speed dial &lt;em&gt;(two new lines marked with "NEW" comments.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;npm run analyze&lt;/code&gt; again we get.... almost the same!  677kb / 278kb / 89kb.  We can see that the button extremely little to the bundle size since most of the building blocks for it were already included with the Speed Dial.  &lt;/p&gt;

&lt;p&gt;But now let's compare when using the traditional commonJS import.  &lt;/p&gt;

&lt;p&gt;Add the following line to the very top of your &lt;code&gt;CustomSpeedDial&lt;/code&gt; component &lt;em&gt;(if ESLint complains about import order, place the line after all your imports statements)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/CustomSpeedDial.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analyze again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV2INp2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638243852/blogs/create-react-app-bundle-analyze/mui-everything_vgh01j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV2INp2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638243852/blogs/create-react-app-bundle-analyze/mui-everything_vgh01j.png" alt="MUI Everything Bundled" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Holy moly!  1.97*&lt;em&gt;MB&lt;/em&gt;* / 697kb / 194kb.  &lt;/p&gt;

&lt;p&gt;What happened?  Looks like we're bundling the &lt;strong&gt;entire&lt;/strong&gt; MUI library.  Popper?  Tooltip.js?  We're not using any of those, but they're taking up a ton of space in our chunk.&lt;/p&gt;

&lt;p&gt;It turns out that when we are using ES6 modules webpack is very good at figuring out which pieces of code we are actually using based on what we import and export.  &lt;/p&gt;

&lt;p&gt;This process is called &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;tree shaking&lt;/a&gt; and it requires you to use ES6 modules in order to work.  You can see that doing so can have a very dramatic effect on our final bundle.  &lt;/p&gt;

&lt;p&gt;Our current program is exactly the same functionally as our previous one, but thanks to a single commonJS import it's a whopping 3x the size.  Yikes!&lt;/p&gt;

&lt;p&gt;Here's what we're going to do though.  Instead of removing that &lt;code&gt;require&lt;/code&gt; in our &lt;code&gt;CustomSpeedDial&lt;/code&gt; we're going to leave it there, and introduce something called &lt;a href="https://create-react-app.dev/docs/code-splitting/"&gt;code spltting&lt;/a&gt; as another option available to you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code splitting&lt;/strong&gt; is effective when you have a certain component or page or general part of your application that isn't necessary required for every visitor.  It might be a datepicker that only appears when a user makes a booking, or it might be a "help" page that only a small percentage of users will need.&lt;/p&gt;

&lt;p&gt;We can use React's &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;lazy and suspense&lt;/a&gt; features to break these pieces into separate bundle chunks, and only load them when necessary.  &lt;/p&gt;

&lt;p&gt;Let's update &lt;code&gt;App.tsx&lt;/code&gt;.  There's a lot to unpack here, so we'll just show the code first and break it down:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CircularProgress&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/CircularProgress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomSpeedDial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CustomSpeedDial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 2&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpeedDial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpeedDial&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// 4&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showSpeedDial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;// 5&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircularProgress&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomSpeedDial&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// 3&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"contained"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowSpeedDial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Click to load speed dial
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The numbers are a little out of order, but that's intentional.  You'll see it follows the actual flow of the component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We "lazy" import the &lt;code&gt;CustomSpeedDial&lt;/code&gt; module.  Remember that's the one that uses &lt;code&gt;require&lt;/code&gt; for the entire MUI package and comes in at 1-2MB.  By using the lazy import, what happens is that the import only occurs when our primary component here (CustomSpeedDial) actually tries to render it.  We'll see that it doesn't by default.
&lt;/li&gt;
&lt;li&gt;A boolean React state value to keep track of whether which component we want to render.  The default &lt;code&gt;false&lt;/code&gt; value means we will not be rendering &lt;code&gt;CustomSpeedDial&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Our default component is a basic &lt;code&gt;Button&lt;/code&gt; imported directly from MUI.  When this button is pressed it sets the value of &lt;code&gt;showSpeedDial&lt;/code&gt; to &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;showSpeedDial&lt;/code&gt; is &lt;em&gt;true&lt;/em&gt; we take this branch at the next render.  The reason we get a re-render is because we  updated a stateful React value (showSpeedDial).&lt;/li&gt;
&lt;li&gt;The purpose of the &lt;code&gt;Suspense&lt;/code&gt; component is to tells React what to render while waiting for the module to import.  Depending on the size it could take a second or more.  For our example we are using MUI's &lt;code&gt;CircularProgress&lt;/code&gt; to imply a loading state while the module is loading.  Once it loads it switches to render the children of the Suspense component.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now it's time to try it out!  We'll begin with an &lt;em&gt;analyze&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kShgquYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638248309/blogs/create-react-app-bundle-analyze/mui-code-splitting_u7lju6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kShgquYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638248309/blogs/create-react-app-bundle-analyze/mui-code-splitting_u7lju6.png" alt="MUI Code Splitting" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gets really interesting.  Webpack has created new separate chunks.  You'll notice there are more &lt;code&gt;.js&lt;/code&gt; chunks when you toggle the drawer on the left.&lt;/p&gt;

&lt;p&gt;In fact this largest chunk on the left &lt;code&gt;3.5d1a4e88.chunk.js&lt;/code&gt; (1.52mb / 475kb / 122kb) isn't even used on the default load of our app.  Based on our learnings earlier, we can see that huge chunk is definitely our &lt;code&gt;CustomSpeedDial.tsx&lt;/code&gt; component that imports all of MUI with &lt;code&gt;require&lt;/code&gt; commonJS import.  &lt;/p&gt;

&lt;p&gt;On the right we have the much smaller bundle &lt;code&gt;2.c5828938.chunk.js&lt;/code&gt; that includes things like &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;ButtonBase&lt;/code&gt;.  This is the chunk that will load on every page load.  We can look at the size (451 / 214 / 69) and validate that in a moment.  &lt;/p&gt;

&lt;p&gt;Since our ultimate goal is to make sure our production app is running as efficiently as possible, we want to run our tests on the production version of the app.  Use the following command to build a production version of the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bpm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll need to serve that &lt;code&gt;build&lt;/code&gt; directory that was created.  If you have your own local serve you prefer to use, use it!  If not just add the &lt;a href="https://www.npmjs.com/package/serve"&gt;serve&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;serve &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it to serve the &lt;code&gt;build&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx serve build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the page at &lt;a href=""&gt;http://localhost:3000/&lt;/a&gt; &lt;em&gt;(or whatever port serve specifies on the command line)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Press F12 to open your browser's &lt;em&gt;Developer Tools&lt;/em&gt; and click the &lt;em&gt;Network&lt;/em&gt; tab.  THis process should be roughly the same in both Chrome, Edge and Firefox.&lt;/p&gt;

&lt;p&gt;I am using Firefox so the screenshots should match your experience.  If you are using another browser the options will still be there, just potentially in a different location.&lt;/p&gt;

&lt;p&gt;Click the &lt;em&gt;Disable Cache&lt;/em&gt; checkbox so that we are loading the JS files on every refresh and not a cached version from the browser.  We want to be able to see the load times and sizes.&lt;/p&gt;

&lt;p&gt;Now hit the refresh button (F5).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDcbLiCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638249023/blogs/create-react-app-bundle-analyze/code-split-first-load_d7rat4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDcbLiCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638249023/blogs/create-react-app-bundle-analyze/code-split-first-load_d7rat4.png" alt="Code Splitting First Load" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we predicted, our total transfer is 82KB with 69KB of that being the highlighted smaller &lt;code&gt;c5828938&lt;/code&gt; chunk we identified &lt;em&gt;(remember this is a served production build, so we are working with GZIP sizes just like your real app would for real users)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;There is no sign of the 122KB gzipped chunk.  Let's click the "load speed dial" button on our app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7NSu9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638249424/blogs/create-react-app-bundle-analyze/code-split-second-load_nt4mlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7NSu9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1638249424/blogs/create-react-app-bundle-analyze/code-split-second-load_nt4mlo.png" alt="Code SPlitting Second Load" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's that 122KB chunk with our &lt;code&gt;CustomSpeedDial&lt;/code&gt; component inside of it.  &lt;/p&gt;

&lt;p&gt;How cool is it that it only loaded the code on demand?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I hope you can start brainstorming ways to reduce the bundle size of your app and potentially introduce code splitting to improve initial load times.  &lt;/p&gt;

&lt;p&gt;Also worth noting: these tips are not exclusive to &lt;em&gt;Create React App&lt;/em&gt;.  All we did was introduce a special tool called &lt;code&gt;craco&lt;/code&gt; to allow us to configure webpack.  Any application running webpack can potentially benefit from these tips!&lt;/p&gt;

&lt;p&gt;It would be irresponsible to me not to mention that &lt;em&gt;Create React App&lt;/em&gt; does recommend a similar tool that doesn't require &lt;code&gt;craco&lt;/code&gt; &lt;em&gt;(although personally I feel it's not as intuitive to read the data)&lt;/em&gt; it still gets the job done well.  Read about it &lt;a href="https://create-react-app.dev/docs/analyzing-the-bundle-size/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continue-learning"&gt;
  &lt;/a&gt;
  Continue Learning
&lt;/h2&gt;

&lt;p&gt;Please check some of my other learning tutorials.  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe"&gt;How to Create and Publish a React Component Library&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Running a Local Web Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-use-indexeddb-to-store-data-for-your-web-application-in-the-browser-1o90"&gt;How to use IndexedDB&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;ESLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j"&gt;Prettier&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Babel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-react-with-and-without-jsx-31c7"&gt;React &amp;amp; JSX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Webpack: The Basics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Webpack: Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b"&gt;Webpack: DevServer, React &amp;amp; Typescript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;For more tutorials like this, follow me &lt;a href="https://twitter.com/eagleson_alex?ref_src=twsrc%5Etfw"&gt;@eagleson_alex&lt;/a&gt; on Twitter&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 76/100 The Book</title>
      <author>Rio Cantre</author>
      <pubDate>Tue, 30 Nov 2021 13:34:00 +0000</pubDate>
      <link>https://dev.to/riocantre/day-76100-the-book-29dp</link>
      <guid>https://dev.to/riocantre/day-76100-the-book-29dp</guid>
      <description>&lt;p&gt;Learning is a continuous process with resources widely used with people who acknowledge the challenging journey of accomplishing a successful goal. Though it can be daunting at first, once you grasp the flow and understand the definitions of each detail, one would be grateful for their fruit of labor. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQutQpYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7j4g2b4slwcwpqtdadw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQutQpYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7j4g2b4slwcwpqtdadw.png" alt="The Book V3" width="300" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-chapters"&gt;
  &lt;/a&gt;
  The Chapters
&lt;/h2&gt;

&lt;p&gt;This book renders an excellent understanding of the history of JavaScript. It consists of twenty-one chapters with unique motivational quotes as an introduction to each section. Each part discusses the basics of the language, accessibility, and primary functions. It is curated to fully understand the whole concept and interactive approach of grasping information. Additionally, examples and exercises are uniquely designed to get the feel of the language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-code-example-shown-in-a-specific-part"&gt;
  &lt;/a&gt;
  A code example shown in a specific part:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let rabbit = {};
rabbit.speak = function(line) {
  console.log(`The rabbit says '${line}'`);
};

rabbit.speak("I'm alive.");
// → The rabbit says 'I'm alive.'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are the three parts with twenty-one chapters inside the book:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1: Language&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/01_values.html"&gt;Values, Types, and Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/02_program_structure.html"&gt;Program Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/03_functions.html"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/04_data.html"&gt;Data Structures: Objects and Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/05_higher_order.html"&gt;Higher-Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/06_object.html"&gt;The Secret Life of Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/07_robot.html"&gt;Project: A Robot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/08_error.html"&gt;Bugs and Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/09_regexp.html"&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/10_modules.html"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/11_async.html"&gt;Asynchronous Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/12_language.html"&gt;Project: A Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 2: The Browser&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/13_browser.html"&gt;JavaScript and the Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/14_dom.html"&gt;The Document Object Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/15_event.html"&gt;Handling Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/16_game.html"&gt;Project: A Platform Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/17_canvas.html"&gt;Drawing on Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/18_http.html"&gt;HTTP and Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/19_paint.html"&gt;Project: A Pixel Art Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 3: Node&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/20_node.html"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/21_skillsharing.html"&gt;Project: Skill-Sharing Website&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-exercises"&gt;
  &lt;/a&gt;
  The Exercises
&lt;/h2&gt;

&lt;p&gt;Some of the sections contain exercises that practice what you have learned. Most of them are three parts with different methods of showing how the particular element could be used. Each has instructions to follow and hints to give an idea of how to implement the code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#an-example-exercise"&gt;
  &lt;/a&gt;
  An example exercise:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Disk persistence&lt;/strong&gt;&lt;br&gt;
The skill-sharing server keeps its data purely in memory. This means that when it crashes or is restarted for any reason, all talks and comments are lost.&lt;/p&gt;

&lt;p&gt;Extend the server so that it stores the talk data to disk and automatically reloads the data when it is restarted. Do not worry about efficiency—do the simplest thing that works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The simplest solution I can come up with is to encode the whole talks object as JSON and dump it to a file with writeFile. There is already a method (updated) that is called every time the server’s data changes. It can be extended to write the new data to disk.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pick a filename, for example ./talks.json. When the server starts, it can try to read that file with readFile, and if that succeeds, the server can use the file’s contents as its starting data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Beware, though. The talks object started as a prototype-less object so that the in operator could reliably be used. JSON.parse will return regular objects with Object.prototype as their prototype. If you use JSON as your file format, you’ll have to copy the properties of the object returned by JSON.parse into a new, prototype-less object.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-sandbox"&gt;
  &lt;/a&gt;
  Code Sandbox
&lt;/h2&gt;

&lt;p&gt;Every exercise has an example solution where you can compare your code. It could be challenging to understand the instructions, but the hints would help you better solve the problem.&lt;br&gt;
&lt;a href="https://eloquentjavascript.net/code/"&gt;Code Sandbox Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Having read the book enlightened me of how tough it is to learn JavaScript. I would not say I remembered every detail and solved every exercise. It takes significant effort and time to master the language fully. Reading it alone would not make me one but instead, educate me on how great and brilliant the people are behind this book. It is the third edition, and I am pleased to stumble upon this book and have the time to feel all the sensation of being an expert on a specific skill.&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>motivation</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Day 3 - Applied Visual Design | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Tue, 30 Nov 2021 13:31:07 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-3-applied-visual-design-100daysofcode-2gdn</link>
      <guid>https://dev.to/jannatinnaim/day-3-applied-visual-design-100daysofcode-2gdn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvmwdCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04d8ag6hkymnk5u3h19c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvmwdCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04d8ag6hkymnk5u3h19c.jpg" alt="Coding Motivation Banner" width="880" height="1074"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;Well, I learnt a lot today about CSS and it's applied uses from the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-visual-design"&gt;Applied Visual Design&lt;/a&gt; course lesson from &lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;. I got the hang of things like text formatting, box shadows, opacities, transitions, animations, etc. It was mostly about how to modify elements and it's behaviors with CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;I actually faced quite a bit of issues today. The most notable of them is with animations, especially the &lt;code&gt;bezier-curve&lt;/code&gt;. It's a bit of a new topic for me and I couldn't get my head around it. The animations part is what I struggled with the most and there's a giant hole in my knowledge about CSS animations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'm going to take a look at these animations once again tomorrow as I still don't fully understand them. I want to also check out the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-accessibility"&gt;Applied Accessibility&lt;/a&gt; section of the course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;Today I struggled a lot unlike the previous days. Things seem to be getting interesting. If this is just the surface, I wonder what I'll find at the deep ends of web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web 3.0: A Developer Roadmap, Guide, and Resources to Get Started</title>
      <author>Olubisi Idris Ayinde💡</author>
      <pubDate>Tue, 30 Nov 2021 13:30:03 +0000</pubDate>
      <link>https://dev.to/olanetsoft/web-30-a-developer-roadmap-guide-and-resources-to-get-started-45oa</link>
      <guid>https://dev.to/olanetsoft/web-30-a-developer-roadmap-guide-and-resources-to-get-started-45oa</guid>
      <description>&lt;p&gt;Blockchains are still prominent, and the industry is in desperate need of engineers right now. It's not just a lucrative field to work in, but it's also a fascinating one.&lt;/p&gt;

&lt;p&gt;You'll need to be dedicated to your learning if you want to be a part of it and advance your career as a Web 3.0 developer.&lt;/p&gt;

&lt;p&gt;I'll provide a road map and some great online resources I found after studying how to get started. In this article, you'll go from having no programming experience to being a Solidity and Blockchain specialist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-learn-about-smart-contracts-and-solidity"&gt;
  &lt;/a&gt;
  1. Learn About Smart Contracts and Solidity
&lt;/h2&gt;

&lt;p&gt;Smart contracts are how the blockchain can be programmed. They are pieces of code that have been distributed to the blockchain and are written in a language that blockchain nodes can understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ipwxYa-F1uY"&gt;A Full Course on Ethereum, Blockchain Development, Smart Contracts, and the EVM&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/smarter-contracts"&gt;Smart Contracts - Zero to Hero&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/learn-solidity-blockchain-and-smart-contracts-in-a-free/"&gt;Learn Solidity, Blockchain, and Smart Contracts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=p3C7jljTXaA"&gt;Full Solidity Tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://solidity-by-example.org"&gt;Solidity By Exaxmple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.8.10/"&gt;Official Solidity Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-the-fundamentals-of-blockchain-technology"&gt;
  &lt;/a&gt;
  2. Learn the fundamentals of blockchain technology
&lt;/h2&gt;

&lt;p&gt;A blockchain is a digital log of duplicated transactions and distributed across the blockchain's complete network of computer systems. &lt;/p&gt;

&lt;p&gt;Blockchains are a fantastic piece of technology, but they aren't easy to understand. To comprehend what you'll subsequently build on, you'll need to devote some time to it.&lt;/p&gt;

&lt;p&gt;Learn what blockchain is, in a simpler term here 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/blockchain-and-bitcoin-fundamentals/"&gt;Blockchain and Bitcoin Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.edx.org/course/blockchain-technology"&gt;Blockchain Technology&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ci_AIMCF-HA"&gt;Blockchain Roadmap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1WZdH3kD1d8"&gt;Blockchain Test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-creating-zombies-is-a-great-way-to-learn-about-solidity"&gt;
  &lt;/a&gt;
  3. Creating Zombies is a great way to learn about solidity.
&lt;/h2&gt;

&lt;p&gt;A Gamified Programming course, where you'll learn how to develop Smart Contracts while creating a Zombie factory to start your world-conquering plan, turns out to be one of the best tools for learning about solidity.&lt;/p&gt;

&lt;p&gt;You learn by playing a game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cryptozombies.io/"&gt;Zoombies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-learn-web3js-and-ethersjs-to-connect-your-dapp"&gt;
  &lt;/a&gt;
  4. Learn Web3.js and Ethers.js to connect your dAPP
&lt;/h2&gt;

&lt;p&gt;You can use Web3.js to create clients that interface with the Etherem Blockchain. It's a collection of libraries that, among other things, allow you to transfer Ether from one account to another, read and write data from smart contracts, and build smart contracts.&lt;/p&gt;

&lt;p&gt;The ethers.js library intends to be a comprehensive and lightweight interface to the Ethereum Blockchain and its ecosystem. It was created with ethers.io in mind but has now evolved into a more general-purpose library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=itUrxH-rksc"&gt;Intro to ETH&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=a0osIaAOFSE"&gt;A guide by Nader Dabit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t3wM5903ty0"&gt;Web3.js Complete Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=h9PdvEDuZS8"&gt;Smart Contract w/React&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=swZRo6LFrCw"&gt;React + Ether.js + MetaMask&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.ethers.io/v5/"&gt;Official Ethers Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-develop-a-decentralize-app"&gt;
  &lt;/a&gt;
  5. Develop a Decentralize App
&lt;/h2&gt;

&lt;p&gt;To enhance your grasp of blockchain programming, start building your DApps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-join-communities"&gt;
  &lt;/a&gt;
  6. Join Communities
&lt;/h2&gt;

&lt;p&gt;When it comes to learning or working in the tech world, communities are essential. So far, the web3 community has been one of the most accommodating. It is pretty beneficial to have the impression that you are not alone, and guess what? I'll highlight a few of them that I found to be quite helpful, as well as working with great devs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/developer_dao"&gt;Developer DAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/_buildspace"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dacade.org/"&gt;Dacade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Pot_Heads_NFT/"&gt;Pot Heads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sigleapp"&gt;Explorer Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/web3community"&gt;Web3Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-create-a-portfolio-and-build-projects"&gt;
  &lt;/a&gt;
  7. Create a Portfolio and Build Projects
&lt;/h2&gt;

&lt;p&gt;In your job search, having a portfolio of projects can be beneficial. Build, build, build if you want to work in this profession.&lt;/p&gt;

&lt;p&gt;I hope you find this helpful 😊 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will also keep this article up to date; if you know of any additional resources that would be useful, please let me know in the comments section, and I will add them to the list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I intend to release several projects soon and create a blog post about them so that everyone can benefit.&lt;/p&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt; | &lt;a href="https://idrisolubisi.com/"&gt;Portfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>smart</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
