<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How does Treblle scale on AWS without breaking the bank?</title>
      <author>Vedran Cindrić</author>
      <pubDate>Sat, 25 Dec 2021 13:55:59 +0000</pubDate>
      <link>https://dev.to/cindreta/how-does-treblle-scale-on-aws-without-breaking-the-bank-2m2p</link>
      <guid>https://dev.to/cindreta/how-does-treblle-scale-on-aws-without-breaking-the-bank-2m2p</guid>
      <description>&lt;p&gt;This one has been a long time coming. Like really long. It's been in the back of my head for months on end. But the day is finally here. I'm super happy to share the details of &lt;strong&gt;how do we actually scale Treblle&lt;/strong&gt; without going bankrupt in the process.&lt;/p&gt;

&lt;p&gt;Just like with many of my other blogs I like to start off by setting the tone with some music. I chose a scene from the movie &lt;a href="https://www.imdb.com/title/tt0244244/"&gt;Swordfish&lt;/a&gt; because it accurately depicts how I worked on scaling Treblle with all of the ups and downs. Besides that it really is a good mix of two different songs.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/u1Ds9CeG-VY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So then, like the song says, let's play to the music.&lt;/p&gt;

&lt;p&gt;In case you missed my original blog post about the early days of developing Treblle you can find it &lt;a href="https://treblle.com/blog/a-leap-of-faith"&gt;here&lt;/a&gt;. In it I briefly mentioned that I dropped the entire project a few times because I couldn't get it to scale. Making sure we can scale at a cost without declaring bankruptcy in the first month was something I knew I had to solve before Treblle can exist. So I went ahead and set myself &lt;strong&gt;3 core requirements&lt;/strong&gt; for our infrastructure:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; it had to be as automated as possible&lt;/li&gt;
&lt;li&gt; it had to be globally scalable with top performance&lt;/li&gt;
&lt;li&gt; it had to be as cheap as possible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Did I set myself up for failure with such high requirements? - yes I did. Were there times I thought that hitting all 3 of those wouldn't be possible in my lifetime - yes sir. Did I give up - 3 times in 6 months. But, and there is a but. I never gave up completely. Whenever I failed I would leave it alone for a few weeks and then come back to it with a fresh pair of eyes. This is probably the most valuable thing I learned as a developer. &lt;strong&gt;When you're banging your head against a problem, step aside.&lt;/strong&gt; Let it cool down. Don't work on that work on something else. Take a few hours, days or weeks off. Just do anything else. After your mind is ready you'll find a solution. It works. Every single time. Trust me - I know 😃&lt;/p&gt;

&lt;p&gt;Here's how my path to scale looked like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-1-wishful-thinking"&gt;
  &lt;/a&gt;
  Attempt 1: Wishful thinking
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKEvaBiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70q6zzclccjjqsr26lye.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKEvaBiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70q6zzclccjjqsr26lye.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before every serious infrastructure expert on Twitter starts to judge me, I have to note that, I'm by far &lt;strong&gt;no expert in AWS&lt;/strong&gt;, infrastructure, DevOps and all that jazz...To use &lt;a href="https://youtu.be/8_eEyjj5Gz0"&gt;Johnny Ive'ss words&lt;/a&gt;, &lt;strong&gt;I'm just an unapologetically stubborn developer with a dream&lt;/strong&gt; 😎 That's how I started approaching scaling.&lt;/p&gt;

&lt;p&gt;Having seen many of my clients over pay for infrastructure to our beloved Jeff I wanted something better for myself and my project. A simple, elegant way of achieving the maximum with a minimum. Naturally the first thing I meaningfully started to explore was &lt;strong&gt;Load balancing and Auto scaling on AWS&lt;/strong&gt;. It took me ages to grasp the concepts given I'm this old school guy used to SSHing into servers and messing with Ubuntu commands. I figured out that I could use a Load Balancer and attach that to an Auto Scaling group on AWS. It all sounds super complicated and fancy but what actually happens is this: all requests hit a load balancing server which serves like a traffic cop and directs traffic to one of many EC2 instances that run within your auto scaling group. So you generally start with two EC2 instances and then as you need more the auto scaling service by AWS can add more and more of these instances. It started looking like a potential solution so I explored more.&lt;/p&gt;

&lt;p&gt;If you're in the AWS world you know at the end of your journey you just simply end up using ALL their services. The ones that you need and the ones that you didn't even know existed. That's what started happening here. As I started using load balancing in combination with auto scaling I needed to create Amazon Machine Images (AMIs) which essentially would have Ubuntu, Apache and PHP pre-installed so that every new EC2 instance has everything it needs. Then once I figured that out I needed a way to deploy the code to those instances. Then I started using Code Deploy and Github hooks. What happens there is when you push code on you Github repo Code Deploy would take that code and install it onto all EC2 instances that are in the autoscaling group. That was super tricky to set up, a lot of Ubuntu permissions, a lot of agony dealing with temporary files, local cache and Laravel peculiarities. But I somehow managed to get it up and running.&lt;/p&gt;

&lt;p&gt;I spent days researching efficient auto scaling policies and testing them out. I used an RDS database, a serverless one which was super expensive but totally worth it. I also started using AWS ElastiCache for Redis which would allow me to connect all the instances to a shared Redis cluster. &lt;strong&gt;This approach can scale but there were so many problems and the entire process was quite cumbersome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance the whole process was slow. I would deploy the code and it would take AGES for the code to show up on the EC2 instances. I was never even sure what code was actually running on a given instance. It got so bad I started using weird versioning policies to try to figure it out. Then half the time deployments would fail because of Ubuntu permissions, Laravel permissions, not being able to write to local cache, not being able to install composer packages and similar. Finally it still felt weird that I had to write these policies for launching EC2 instances that run Ubuntu, that need to be updated, patched, restarted and that can jam. &lt;strong&gt;I called it quits when I got into the logistics of running cron jobs and syncing them across X servers&lt;/strong&gt;. It became this nightmare of a concept I felt could get out of control very quickly.&lt;/p&gt;

&lt;p&gt;After working on this for a few months &lt;strong&gt;I concluded that this simply isn't what I'm looking for&lt;/strong&gt;. Both in terms of process and money. Because, keep in mind, you have to pay for every EC2 instance you run and you never know how much you'll need. So you can't reserve instances in order to save money. In any case this would probably be OK for the first few months but it would probably collapse with time. It was a good try but not it didn't tick almost any of the rules I set for myself. Most importantly it didn't seem as elegant and simple. I've found that the best things in life, especially in development, are in its nature very simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-2-short-but-sweet"&gt;
  &lt;/a&gt;
  Attempt 2: Short but sweet
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhOInLMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioo7mc0rnezmdn0g7a9t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhOInLMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ioo7mc0rnezmdn0g7a9t.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My second attempt didn't last long but it started by me learning more about AWS Lambda. It was the new hot trend. Serverless computing. You only pay for what you use. It's measured in milliseconds...It seemed great on paper but most people used it with Python or Node. Given I'm a PHP developer that turned out to be a no go.&lt;/p&gt;

&lt;p&gt;During my research on how to make PHP run on Lambda I stumbled upon Bref at that time which was supposed to make that happen. I spent probably a month trying to get Laravel or any kind of a PHP application running on Lambda using &lt;a href="https://bref.sh/"&gt;Bref&lt;/a&gt; but I simply couldn't do it. There was always something: it was super slow and janky, cold starts were killing me, there were bugs and issues...It wasn't something I wanted to bet at that time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This approach had promise but the tooling wasn't there yet&lt;/strong&gt;, at least for PHP developers. When I looked at this it was early 2019. Laravel Vapor didn't exist and people were still exploring Lambda. I did however like the idea that you can literally run your entire app as a code for a certain amount of time. It's like this beautiful concept where you basically get punished for writing bad code that executes long. &lt;strong&gt;I always strived to write very efficient, optimized code that is above all fast&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;I decided to wait and see&lt;/strong&gt; where AWS would take Lamda, when would some of the limitations be ironed out and finally when will the ecosystem catch up. It's very important that there is an ecosystem of developers around this because otherwise you can't learn how to use it, you can't read up on experiences of others and essentially you will be the one discovering all the early growing pains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempt-3-mysql-wins-the-war"&gt;
  &lt;/a&gt;
  Attempt 3: MYSQL wins the war
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLPrB6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa530ui9cgneacxtjvlu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLPrB6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa530ui9cgneacxtjvlu.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fast forward a few months from my last attempt Laravel Vapor gets released. It was still early days but it allowed you, as a Laravel developer, to literally deploy the entire Laravel application to a Lambda function without any setup or hassle. You develop your app as you normally would and once you're ready you type in vapor deploy production and within a few minutes your application is ready and live. Vapor would essentially package the entire application, ZIP it, upload it to S3, deploy it inside of a Lambda function, upload images to a Cloudfront distribution, create all the services you need and connect them into one working thing of beauty. This enabled me, a regular software developer, to essentially build my own super scalable infrastructure without the need to open aws.amazon.com.&lt;/p&gt;

&lt;p&gt;I loved it! I thought I finally cracked it and managed to solve my scaling issues. I started testing it out. It had a few problems but nothing I would deem as a blocker. It worked - magically. At the same time there were a lot of open questions about queues, performance, http support, cold starts and so one..The more I started getting into it the more I thought that &lt;strong&gt;this can't be my only solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My biggest fear was the database. Yes the entire infrastructure would be serverless, using various other services from AWS but at the end of day I would need to save the data somewhere. And trust me &lt;strong&gt;you can scale everything but scaling a MYSQL database is a whole different ball game&lt;/strong&gt;. I simply knew, I alone, would never be able to do it and the cost of scaling a MYSQL database is HUGE. So Vapor can be a solution if I find a replacement for MYSQL or use something else.&lt;/p&gt;

&lt;p&gt;Besides that I was also afraid to run everything off of the same code base. In case you didn't know, we have SDKs for various programming languages that send the log data from your API to our API. We take that log data, we have to read it, process it, do complicated computational stuff, analyze it and show it to you in near real time. With Laravel you can have a single application for both your web and API interfaces. Which is what we did, our entire stack was a majestic monolith that shared the same codebase - all the models, helper functions and business logic. So I was super afraid that if we messed something up on a completely unrelated part of the platform it could impact the intake process. Yes we could separate our code base into multiple different microservices running on Vapor and solve that problem. But in that case we have complications on scattered codebases and we still didn't solve the MYSQL problem.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;I gave up this path as well&lt;/strong&gt; because I was afraid to use MYSQL as the only source of storing log data. But this time I knew that we would use Laravel and Laravel Vapor for everything else except the intake process. I also knew that the best scenario would be to not use MYSQL for the intake process at all. So again I took a break and started learning up on various different things that would help me solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution-a-serverless-symphony"&gt;
  &lt;/a&gt;
  The solution: A serverless symphony
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_o4CslxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlaabopfcdczldscnwvw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_o4CslxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlaabopfcdczldscnwvw.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we get to the fun part&lt;/strong&gt;. I desperately wanted to use Laravel in combination with Laravel Vapor to run our entire website as a Lambda function. There are no servers to install, maintain, no code base plus Vapor got even better but given our use case it simply wasn't enough. On the other hand I needed a solution that could be decoupled from our entire code base, isn't MYSQL based and can run for pennies on the dollar.&lt;/p&gt;

&lt;p&gt;I started rampantly researching many different NoSQL databases, AWS solutions like DynamoDB, reading countless blog posts, spent weeks trying to figure things out but I simply couldn't find a solution that would fit my needs. At the same time I was developing multiple platforms for our agency clients and one of them processed more than &lt;strong&gt;10TB of images per year without breaking a sweat&lt;/strong&gt;. The reason why that was even possible was because we developed it, of course 😄, but beside that it was because it was using Amazon S3. The users would come to the website we built, they would select their local images and using the AWS PHP SDK and a little bit of Javascript they would upload the images DIRECTLY to AWS, in chunks if i might add. It was so beautiful and scalable that I started exploring if &lt;strong&gt;somehow we could use AWS S3&lt;/strong&gt; for our use case. I knew that you could upload directly to AWS S3 but you needed a signed request with a specific payload. So I started exploring how we can sign requests and maybe upload a log directly from the SDK by issuing some temporary permissions or credentials.&lt;/p&gt;

&lt;p&gt;My path led to many roadblocks while trying to do this but, one night, randomly watching AWS videos on Youtube and exploring how Lambda functions worked &lt;strong&gt;I actually managed to figure it out&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The premise of the idea was this: let's somehow send the data to a Lambda function directly from the SDK and then have the Lambda function store the file into AWS S3 as JSON.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first step in this process was to set up our domain on AWS Route 53. AWS wasn't our registrar so that took a few days but we finally got the domain under Jeff's control. Then I created a super simple AWS API Gateway v1 that connects to a Lambda function. It has only one endpoint with the POST method. It had to be Gateway v1 and not the 50% cheaper v2 because of one simple thing: usage plans. So I was actually able to connect our website with the API Gateway in terms of API keys and plans. So all the plans on our website also exist on the API gateway. When you make an account on our website in the background we essentially make a new API Gateway key as well and assign you to a plan. Why do we do this? &lt;strong&gt;Well because AWS takes care of all the API limits&lt;/strong&gt;, making sure you don't go overboard, making sure all the validation is done on their side. So no MYSQL queries to our database, no calls to our server - nothing. Pure AWS - all the way 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1IiI9fMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk47qhsqpkehu65bksn6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1IiI9fMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk47qhsqpkehu65bksn6.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I got the API Gateway to work very closely with our website I wanted to make sure that our SDKs were calling a more friendlier URI than what AWS gives you. So I connected a custom subdomain &lt;strong&gt;rocknrolla.treblle.com&lt;/strong&gt;. Yes, it's a reference to a Guy Ritchie movie with the same name &lt;a href="https://www.imdb.com/title/tt1032755/"&gt;RocknRolla&lt;/a&gt;. Great movie, great cast - you should watch it! Anyhow, once the custom domain was connected it was time to make our Lambda function.&lt;/p&gt;

&lt;p&gt;So the only purpose of the Lambda function would be to take the data it gets from our SDK, via the API Gateway, and dump it into Amazon S3, the most distributed and scalable system in the world. To do that &lt;strong&gt;I used NodeJS, and in 23 lines of code&lt;/strong&gt; I wrote a simple function that does exactly what it needs. Stores the RAW request data, which is your regular JSON, as a .json file into an S3 bucket.&lt;/p&gt;

&lt;p&gt;VOILA! &lt;strong&gt;Now I had a completely scalable intake solution that didn't require a database because all the data was stored on S3&lt;/strong&gt;. Infinitely scalable, distributed, cheap as f***, fast and more importantly totally maintained by AWS.&lt;/p&gt;

&lt;p&gt;That isn't exactly the end of the journey for our logs but it sure took care of the most complicated part. After the log is stored into the S3 bucket I have &lt;strong&gt;another Lambda function which simply notifies our processing pipeline&lt;/strong&gt;, developed in Laravel powered by Laravel Vapor. That processing pipeline loads the file from the S3 bucket and starts as a 5 step process of reading, transforming, enriching the data and then storing parts of that data into a database. This process is entirely based on Laravel Queued jobs and running inside another infinitely scalable and dirt chip service AWS has called SQS.&lt;/p&gt;

&lt;p&gt;Laravel Queues combined with AWS SQS allow us to background long lasting processes and not have to execute them straight away. It's basically like saying: "hey processing pipeline we have a new job in the queue when it's next in line and you have time please process it." Using that approach each log creates up to 5 different background jobs that are executed in sequence. But in order to have the real time feeling for you as a user we show you the log, in your Treblle dashboard, as soon as the the first job is finished processing. &lt;strong&gt;That part is a simple illusion&lt;/strong&gt; that I think even David Copperfield would be proud of. In the first job we literally do only what we need to show you the request on the dashboard. By the time you see the request we are already on job two. By the time you hover towards the request we are on job 3. By the time you click on it we are on job 4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyF9yzFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ouyipkz1t55ghflardg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyF9yzFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ouyipkz1t55ghflardg.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To process a request and one of it's jobs we need about 500ms.&lt;/strong&gt; So from your SDK to your Treblle dashboard in more or less 500ms. Given the amount of information we give you this is amazing. Just to give you a glimpse of what we have to understand or get: the location of the request, parse out the device information, server information. Map the request to an endpoint, check if the URL has dynamic parts in it, compile docs based on the request, compare the docs to multiple other previous versions...and finally store a lot of the data in MYSQL and show it you in a way that anyone on the team can read it. Of course we do a lot more but in broad strokes you now know what kind of trouble we go through to show you a single request. Also we don't stop and we are improving our processing pipeline every week, trying to push performance to the next level!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As you can see this approach ticks all the requirements I set at the beginning of my scaling journey.&lt;/strong&gt; Because we are using AWS API Gateway we are piggybacking on top of AWSes global infrastructure that helps reduce latency and brings our endpoint closer to you "free of charge". Next, we are using a Lambda function with just 23 lines of code that stores the RAW data into AWS S3. This allows us to reach almost infinite scalability without running any servers, any databases nor have to maintain anything. Finally our entire post processing is built using Laravel and Laravel Vapor which again runs everything without any servers in a Lambda function. To top it all of the entire process is spun off into multiple background jobs that get executed in sequence inside AWS SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For you as the user of Treblle this means our intake API never goes down, it has next to no impact on your API and we can handle as many requests as you can without breaking a sweat.&lt;/strong&gt; But optimization for us starts on our SDK level. We develop them with your API in mind. So we use a fire and forget approach when making asynchronous requests isn't possible. If the language supports it we even use queued and background jobs to push logs to us. All in an effort to literally reduce any impact on your API and make sure it's running 24/7. Even if our processing pipeline and/or our website are completely broken down, not working, kaput we will STILL be receiving logs from your API requests and as soon as we are back up we will process those logs and you'll see them. The second part hasn't yet happened, and we'll make sure it doesn't but just in case you were wondering.&lt;/p&gt;

&lt;p&gt;Now you're probably wondering about the cost of this near to infinite scale on AWS. I &lt;a href="https://twitter.com/cindreta/status/1473744091242545153"&gt;recently tweeted this screenshot&lt;/a&gt; from our Laravel Vapor dashboard. &lt;strong&gt;On it you can see that we processed over 7M queued jobs and handled over 1.3 million HTTP requests in the past 30 days.&lt;/strong&gt; On top of that you can see that the average queue duration is 500ms 🤯 You can also see that we ONLY paid 65 USD to handle all of that and around 100 USD more for the RDS database and AWS S3 fees. &lt;strong&gt;So we're able to run our entire stack for less than 200 USD per month at this scale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We've been running on this architecture for the past 6 months without any down time and we keep doubling the amount of API requests we process every month. I haven't spent one single night thinking about our infrastructure. It simply just works. &lt;strong&gt;It works because I've spent half a year trying to isolate myself, our code base, and our future employees from the entire process.&lt;/strong&gt; At its essence it's such a simple and pure idea of running completely on the AWS infrastructure, controlled by a countless army of DevOps pros that Jeff pays.&lt;/p&gt;

&lt;p&gt;So I'd like to ask for a &lt;strong&gt;round of applause&lt;/strong&gt; 👏 for all the &lt;strong&gt;DevOps teams working at AWS&lt;/strong&gt; that have actually made Treblle possible. Making sure the Lambda functions scale, making sure S3 scales, making sure API Gateway scales...&lt;/p&gt;

&lt;p&gt;Many of you have asked me how we scale, how am I not worried, how we can process as much data. Now you know. It's a symphony of multiple serverless processes that are as scalable as Amazon is. Will we stop there - no we won't : ) There is more room to improve and I'll share some more insights on what we are doing on top of all of this.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the read, I hope it can help you scale something you are working on but above all I hope it puts a little bit of more trust into Treblle as a product.&lt;/p&gt;

&lt;p&gt;As always you can follow me on &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt;, add me on &lt;a href="https://www.linkedin.com/in/vedrancindric/"&gt;LinkedIn&lt;/a&gt; or read more blog posts on our &lt;a href="https://treblle.com/blog"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChslhQyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak9tb14c5p1sykic21lr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChslhQyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak9tb14c5p1sykic21lr.jpg" alt="Image description" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh yeah, almost forgot - I just recently published a FREE E-book on how to build amazing, sclable APIs. If you're interested get it right here =&amp;gt; &lt;a href="https://treblle.com/ebooks/the-10-rest-commandments"&gt;https://treblle.com/ebooks/the-10-rest-commandments&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Useful JavaScript Code Snippets for Common Problems 😎</title>
      <author>Tabassum Khanum</author>
      <pubDate>Sat, 25 Dec 2021 13:31:16 +0000</pubDate>
      <link>https://dev.to/codewithtee/useful-javascript-code-snippets-for-common-problems-2lpc</link>
      <guid>https://dev.to/codewithtee/useful-javascript-code-snippets-for-common-problems-2lpc</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;
JavaScript is one of the widely used languages in Web Development.  A broad and vital ecosystem has evolved around JS, offering tons and tons of frameworks and libraries that help you develop applications faster. At the same time, it made our coding experience a little complicated. Sometimes it’s good to take a step back and try to understand how to do things without a library. In this article, we will be going through some JS snippets which will provide a little help with those repetitive, simple tasks that come up each day. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sort-an-array"&gt;
  &lt;/a&gt;
  1. Sort an array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//strings
const names = ["Seema", "Rekha", "Jaya"];
names.sort();
//['Jaya', 'Rekha', 'Seema' ]

//Numbers
const numbers = [101, 8, 87];
numbers.sort((a, b) =&amp;gt; {
  return a - b;
});
//[ 8, 87, 101 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-select-a-random-element"&gt;
  &lt;/a&gt;
  2.  Select a random element
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = ["Ball", "Bat", "Cup"]
const randomIndex = Math.floor(Math.random()*items.length)
items[randomIndex]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-reverse-a-string"&gt;
  &lt;/a&gt;
  3. Reverse a string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function reverseString(string) {
       return string.split(" ").reverse().join(" ")
}

revereseString("Random String")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-check-if-element-has-a-class"&gt;
  &lt;/a&gt;
  4. Check if element has a class
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = document.querySelector("#element")
element.classList.contains("active")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-string-interpolation"&gt;
  &lt;/a&gt;
  5. String interpolation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = "Jaya"
console.log(`Hi, ${name}. You have ${2 ** 3} new notifications.`}
//Hi, Jaya. You have 8 new notifications.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-loop-through-an-array"&gt;
  &lt;/a&gt;
  6. Loop through an array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cars = ["Ford", "BMW", "Audi" ]
for (let car of cars) {
      console.log(car)
}

/*
Ford
BMW
Audi
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-get-current-time"&gt;
  &lt;/a&gt;
  7.  Get current time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const date = new Date()
const currentTime = 
   `${date.getHours()}:${date.getMintues()}:${date.getSeconds()}`

console.log(currentTimes)
//example output: "22:16:41"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-replace-part-of-a-string"&gt;
  &lt;/a&gt;
  8. Replace part of a string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "You are awesome."
const replacedString = string.replace("You", "We")

console.log(replacedString) //Output: "We are awesome"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-destructing-variable-assignment"&gt;
  &lt;/a&gt;
  9.  Destructing variable assignment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let profile = ['bob', 34, 'carpenter'];
let [name, age, job] = profile;
console.log(name);
// bob
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-using-the-spread-operator"&gt;
  &lt;/a&gt;
  10. Using the spread operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let data = [1,2,3,4,5];
console.log(...data);
//  1 2 3 4 5
let data2 = [6,7,8,9,10];
let combined = [...data, ...data2];
console.log(...combined);
// 1 2 3 4 5 6 7 8 9 10
console.log(Math.max(...combined));
// 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-return-number-maximum-elements-from-an-array"&gt;
  &lt;/a&gt;
  11.  Return [Number] Maximum Elements From an Array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const maxElement = ( array, number = 1 ) =&amp;gt; [...array].sort(( x,y ) =&amp;gt; y - x).slice(0, number);

//Example 
maxElement ([ 1,2,3,4,5]);  // [5]
maxElement([ 6, 7, 8, 9 , 10, 10] , 2);   // [10,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tried and Tested Top 10 Video Calling API</title>
      <author>Stuti Nath</author>
      <pubDate>Sat, 25 Dec 2021 13:01:40 +0000</pubDate>
      <link>https://dev.to/stutinath/top-video-calling-api-and-conferencing-sdk-47g0</link>
      <guid>https://dev.to/stutinath/top-video-calling-api-and-conferencing-sdk-47g0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#want-to-integrate-the-secure-amp-fastest-video-calling-api-to-your-application-amp-website-here-is-the-top-video-calling-apis-that-will-drive-the-business-traffic"&gt;
  &lt;/a&gt;
  Want to integrate the secure &amp;amp; fastest Video calling API to your application &amp;amp; website? Here is the top Video calling APIs that will drive the business traffic!
&lt;/h3&gt;

&lt;p&gt;To improve productivity and connectivity, A video calling feature can be integrated  into any Web browser and mobile application with RTC via APIs . In this modernized world, Technology enhanced communication has already taken Place and will surely Upgrade in the Future. The use of mobile gadgets has surged at a rapid pace. The world is growing to step into the digital world where everything is accessible with just a few easy clicks through Video calling API. Behind the triumph of any company, there is a huge increase in digitalization. Now all of us prefer virtual communication not willingly but  rather than giving a physical appearance. After the Covid Booster shot , Virtual seems better.&lt;br&gt;
There are many prestigious organizations working on the aspect of virtual communication. The internet is flooded with so many video calling applications. These kits are developed by the software development kits that help us to communicate with the clients, corporates, and families. Because of these tools, Virtual meets becomes easy and efficient without any lags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-in-the-article-we-have-mentioned-some-effective-approaches-towards-the-top-10-video-calling-api"&gt;
  &lt;/a&gt;
  Here in the article, we have mentioned some effective approaches towards the Top 10 video calling API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why is the popularity of video calling API increasing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The entire world has started adopting virtual activities for distant communication. If you notice, you can clearly find how students choose virtual or digital classrooms and how the healthcare industry is choosing virtual patient care assistance. &lt;br&gt;
Overall, the whole market is looking to turn their business into digital hype. The video calling API has been experiencing a huge hike in Capitalism. Choosing the right method of communication depends on features of SDK. Here in the below section, we bring some of the best tools that help to leverage your business smartly with digital communication.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-best-top-10-video-calling-api-popular-in-the-market"&gt;
  &lt;/a&gt;
  The best top 10 video calling API popular in the market:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1video-sdk"&gt;
  &lt;/a&gt;
  1.&lt;a href="https://videosdk.live/"&gt;Video SDK&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Video SDK is the driving option that makes video conferencing efficient in every possible way to explore the world of digital communication. This tool allows you to explore how the video SDK creates an impact on engagement. This tool allows the video calls to be integrated within 10 minutes along with the VideoSDK pre-built feature like whiteboards, Q&amp;amp;A, and polls. This video conferencing API tool supports unlimited private channels by integrating with advanced video streaming possibilities. &lt;/p&gt;

&lt;p&gt;Video SDK provides you best API to embed video/chat in your applications. It offers Improve video engagement with reliable video conferencing running in minutes. Support of platforms like JavaScript , React JS, React native android, flutter ,iOS. It enables the opportunity to integrate real time communication SDK.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-video-sdk"&gt;
  &lt;/a&gt;
  Features of Video SDK
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy to integrate prebuilt  live streaming SDK with 5000 participant support.&lt;/li&gt;
&lt;li&gt;Real-time communication SDK with 10,000 minutes free every month.&lt;/li&gt;
&lt;li&gt;It just requires 10 minutes to integrate explicit code.&lt;/li&gt;
&lt;li&gt;A cost-effective tool with long term solution.&lt;/li&gt;
&lt;li&gt;Unlimited channels with enhanced video quality.&lt;/li&gt;
&lt;li&gt;UI support &amp;amp; auto-scalable parallel rooms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2agora"&gt;
  &lt;/a&gt;
  2.&lt;a href="https://www.agora.io/en/"&gt;Agora&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This tool works to build a new future with the help of a real-time communication channel. The company is based on real-time communication that develops SDKs and APIs. This tool works on the engagement for the users by delivering the video call service with real-time voice and messaging, live streaming products. The company is working towards building real-time connections in the virtual world. &lt;br&gt;
With Agora video conferencing API, anyone can engage by embedding the vivid voice and video application. It provides the SDKs along with the building blocks to enable the possibility of adopting the real-time engagement possibilities. The tool offers video call, voice call, interactive live streaming, recording.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-agoraio-apis"&gt;
  &lt;/a&gt;
  Features of Agora.io APIs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The tool offers an intelligent network that will help to 
connect automatically in real-time analysis. &lt;/li&gt;
&lt;li&gt;Select the efficient routing path with 200+ data centers.&lt;/li&gt;
&lt;li&gt;Enterprise support Platforms.&lt;/li&gt;
&lt;li&gt;Minimal Battery Consumption.&lt;/li&gt;
&lt;li&gt;It can withstand even the sudden spike in traffic.&lt;/li&gt;
&lt;li&gt;Extensive API selection with customizable UI extension.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3zujonow"&gt;
  &lt;/a&gt;
  3.&lt;a href="https://zujonow.com"&gt;ZujoNow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This company is developing its products on cutting-edge technologies. The company delivers the products to its clients based on the video conferencing tool with effective scalability. It delivers customizable SDKs to clients. The video conferencing API company is popularly dealing with the products like on-demand videos, live streaming, and real-time communication. &lt;br&gt;
This is a well-crafted platform that is helping educators and other related industries. The company delivers an end-to-end solution that enables easy integration with real-time communication, on-demand video, and a content delivery network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-zujo-now-apis"&gt;
  &lt;/a&gt;
  Features of zujo now APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Provide inbuilt support to the healthcare, edtech, and dating business.&lt;/li&gt;
&lt;li&gt;Deliver interacting experience with chatting, voice &amp;amp; video calling.&lt;/li&gt;
&lt;li&gt;Get zero lags while connecting.&lt;/li&gt;
&lt;li&gt;Low latency support with real-time video streaming encoding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4dailyco"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://www.daily.co/"&gt;Daily.co&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is the real-time video and audio SDK developer platform that focuses on the clients. Best scalable video conferencing API. The platform is developing the global infrastructure solution to deliver the people throughout the world. With Daily.co, anyone can add live audio and video experience to the products along with the prebuilt user interface &amp;amp; creating custom layouts. This tool helps to build calls for any device with the quality video feature of 1080p HD video and screen sharing. Daily.co also supports the flexible recording options with transcriptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-dailyco-apis"&gt;
  &lt;/a&gt;
  Features of Daily.co APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It leaves the video call UI entirely up to you.&lt;/li&gt;
&lt;li&gt;Automatic bandwidth and switching between group sessions.&lt;/li&gt;
&lt;li&gt;Easy to use options with pre-built API.&lt;/li&gt;
&lt;li&gt;Automatic tuning of video Quality.&lt;/li&gt;
&lt;li&gt;Global infrastructure with HD RTMP streaming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5enablexio"&gt;
  &lt;/a&gt;
  5.&lt;a href="https://www.enablex.io/"&gt;Enablex.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This video solution tool helps build the HD-enabled videos application on different platforms. The tool supports Web applications, iOS and android platforms. This tool supports amazing APIs and SDKs that deliver one-to-one video chats along with the option of group video calls. Here one can get an extensive video chat experience for the users. Get the live interactive broadcast feature to broadcast varieties of content through the devices directly on the social media platforms like YouTube, Facebook, and other channels. The tool works on developing communication APIs that focus on providing real-time solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-enablexio-apis"&gt;
  &lt;/a&gt;
  Features of Enablex.io APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get advanced features like Breakout channels (rooms), 
Background blurring features.&lt;/li&gt;
&lt;li&gt;One-time payment with upfront solution.&lt;/li&gt;
&lt;li&gt;Customizable functionality with endless features.&lt;/li&gt;
&lt;li&gt;Get end to end encryption.&lt;/li&gt;
&lt;li&gt;Get customizable UI with tangible layouts.&lt;/li&gt;
&lt;li&gt;Up to 100 for video meetings and 1000 for webinar mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6mirrorfly"&gt;
  &lt;/a&gt;
  6.&lt;a href="https://www.mirrorfly.com/"&gt;Mirrorfly&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;MirrorFly is another audio and video calling API and SDK provider that offers a solution to both large and small-scale organizations. This is the versatile messaging solution working as the market's prime product. The tool is highly customizable as compared to any other. It goes perfectly with iOS, Android, and Web Applications. With this, anyone can get the absolute chat-app solution that provides a design-enriched UI/UX. Here you can get the intuitive build with a plethora of other features. This is embedded with WebRTC that enables HD quality video interaction along with the VoIP feature that gives a dynamic voice experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-mirrorfly-apis"&gt;
  &lt;/a&gt;
  Features of Mirrorfly APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Real time language translation.&lt;/li&gt;
&lt;li&gt;Get a 100% customizable solution.&lt;/li&gt;
&lt;li&gt;Private 1 to 1 chat with offline messages.&lt;/li&gt;
&lt;li&gt;Interactive Live Broadcasting with SIP calling feature.&lt;/li&gt;
&lt;li&gt;Push to Talk feature with VoIP calling facility.&lt;/li&gt;
&lt;li&gt;A versatile messaging solution with endless feature.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7twilio"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The platforms develop video application tools that are fully customized and scalable. This is completely flexible for usage. This tool constructs the applications and the connectivity that builds up capitalism . It allows chats, video, and programmable chats based on real-time communication with scalability and video calling API. This is a perfect fit for enterprises from small to wide. This helps the organization to engage its users in every step of the journey. This is a flexible API for any channel which has built-in intelligence with global infrastructure support. This single platform comes with flexible APIs for any channel, global infrastructure, built-in intelligence, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-twilio-apis"&gt;
  &lt;/a&gt;
  Features of Twilio APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It gives free trial credits for video groups and video P2P .&lt;/li&gt;
&lt;li&gt;Cloud recording facility with workflow integration.&lt;/li&gt;
&lt;li&gt;24 hours support through the mail and chat.&lt;/li&gt;
&lt;li&gt;Get endless features with an intuitive interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8cometchat"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://www.cometchat.com/"&gt;Cometchat&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This platform is designed for providing the APIs and SDKs for the unlimited solution to a variety of industries. The platform supports a solution to various healthcare organizations, dating, the healthcare community, and social media integration. It also delivers the features like on-demand videos and live streaming and the complete authority to the users for customizing their Whitelabel. Cometchat, the video conferencing API, supports varieties of languages and solutions like voice and video calling, scalable in-app messaging, and cross-platform compatibility. This tool supports medium to large-scale organizations. The best part of the platform is It has WebRTC-enabled HD video and voice calling capabilities. They also offer the free-of-cost service that holds limited options to small-scale organizations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-cometchat-apis"&gt;
  &lt;/a&gt;
  Features of Cometchat APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One-on-one text chat along with group chat facility.&lt;/li&gt;
&lt;li&gt;Voice calling &amp;amp; video calling, conferencing tools.&lt;/li&gt;
&lt;li&gt;Type and Read indicators with online Presence Indicators.&lt;/li&gt;
&lt;li&gt;Drag &amp;amp; drop chat widgets.&lt;/li&gt;
&lt;li&gt;Build a completely custom UPI &amp;amp; workflow.&lt;/li&gt;
&lt;li&gt;Autoscaling &amp;amp; white label feature with message translation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9pubnub"&gt;
  &lt;/a&gt;
  9.&lt;a href="https://www.pubnub.com/"&gt;PubNub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is considered one of the best in-app chats that deliver the features of real-time chat engagement. The tool offers extensive functionality, full control, and customization without the time and expense of building in-house. With this, anyone can get complete outsourcing to the clients. It delivers the features and functionalities like custom chat, in-class integrations, functionality, and Chat UI support. This is specially built for conferences, virtual conversations, meetings, and enterprise entities. Get a one-stop platform &amp;amp; receive top-quality integration features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pubnub-apis"&gt;
  &lt;/a&gt;
  Features of PubNub APIs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get transfer the metadata pre-call facility.&lt;/li&gt;
&lt;li&gt;Receive extensive plugins in one platform.&lt;/li&gt;
&lt;li&gt;WebRTC signaling along with an end to end encryption.&lt;/li&gt;
&lt;li&gt;Get push notifications with complete messaging broadcasting solutions.&lt;/li&gt;
&lt;li&gt;Integrate, migrate &amp;amp; launch quickly.&lt;/li&gt;
&lt;li&gt;Open-source UI kit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10sinch"&gt;
  &lt;/a&gt;
  10.&lt;a href="https://www.sinch.com/"&gt;Sinch&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Sinch is another API that manages different APIs through messaging and calling facilities. Through this, anyone can receive the services like video calling, SMS verification, voice calls, and other engagement platforms. Varieties of industries receive an extensive solution from this, which includes health, telecommunications, retail, media and entertainment, and more. Through this, a lot of operators get opportunities for monetizing the wholesale and getting rid of the frauds and other activities. This video conferencing API offers an instant messaging SDK and API to the iOS, Android, and Web Applications. It gives complete freedom to the users for customization and supports SIP, VoIP, and PSTN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-sinch-apis-"&gt;
  &lt;/a&gt;
  Features of sinch APIs :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It offers high Quality video.&lt;/li&gt;
&lt;li&gt;Get Personalized Messaging with Voice Calling service.&lt;/li&gt;
&lt;li&gt;Live Broadcasting.&lt;/li&gt;
&lt;li&gt;Personalized communication with advanced setup.&lt;/li&gt;
&lt;li&gt;600+ operators connections globally.&lt;/li&gt;
&lt;li&gt;Amazing easy &amp;amp; intuitive interface with the endless possibilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;Even so, there are handful of good articles and video tutorials on internet. Most of the video conferencing API companies have effectively  made effective changes in their features and will definitely upgrade in future so that they can deal with clients all across the world.&lt;br&gt;
In this era, organizations need such video calling API platforms to drive their business with ease. This article will provide insight into the best video calling API platforms that support various industries with one click . &lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Advanced iOS development - Build Phases Part 1</title>
      <author>Omar Labib</author>
      <pubDate>Sat, 25 Dec 2021 12:16:01 +0000</pubDate>
      <link>https://dev.to/olabib/advanced-ios-development-build-phases-part-1-igk</link>
      <guid>https://dev.to/olabib/advanced-ios-development-build-phases-part-1-igk</guid>
      <description>&lt;p&gt;Have you ever come across this build error in Xcode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbMJA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5k09zer9bu4tlu9hyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbMJA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j5k09zer9bu4tlu9hyb.png" alt="Xcode build phase failure" width="702" height="120"&gt;&lt;/a&gt;&lt;br&gt;
I'm sure you have.&lt;br&gt;
During my first years of iOS development, this has been one of the most ambiauious errors for me, I can only see that I've messed up somewhere in the codebase and I have to go and see what I've done wrong, however, after I got to know build phases better in Xcode this couldn't make more sense..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-phases"&gt;
  &lt;/a&gt;
  Build Phases
&lt;/h2&gt;

&lt;p&gt;In Xcode build phases section is the scope where Xcode offers you the possibility to run custom scripts &lt;em&gt;- known as run scripts -&lt;/em&gt; as part of the build process, these script can be tailored for any behavior you can think of. The cool thing though is that you can control the build process through this powerful script of you..&lt;br&gt;
Let's better have an example..&lt;/p&gt;

&lt;p&gt;For Starter, How can we add those run scripts? &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ToFZJWIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1fjxulghozxue8lhrfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ToFZJWIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1fjxulghozxue8lhrfa.png" alt="Xcode build phase" width="880" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Head to you project file.&lt;/li&gt;
&lt;li&gt;Choose your app target.&lt;/li&gt;
&lt;li&gt;Navigate the build phases tab.&lt;/li&gt;
&lt;li&gt;Click the + button and choose &lt;code&gt;New Run Script Phase&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will add a run script template for you..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKcP5VRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffv0pyu9jzb5nj56h2hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKcP5VRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffv0pyu9jzb5nj56h2hw.png" alt="Xcode Run Script" width="880" height="845"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can give a cool name to your script.&lt;/li&gt;
&lt;li&gt;This is the path you shell on your machine.&lt;/li&gt;
&lt;li&gt;The Shell script that will be run during the building process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: All these run scripts will run serially, and you can change the order by grabbing the run script and moving it up or down.&lt;/em&gt; &lt;br&gt;
For our very first run script, we will be doing something very simple..&lt;br&gt;
Just printing some message to the user..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBPmERmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2x9ueij5gdtvkqh0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBPmERmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2x9ueij5gdtvkqh0z.png" alt="Xcode build phase" width="880" height="347"&gt;&lt;/a&gt;&lt;br&gt;
This message however won't be printed to the log. Instead, you can access it through the build report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olNrv79p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzrm5zuhifzyjgk78pjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olNrv79p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzrm5zuhifzyjgk78pjq.png" alt="Xcode Build Report" width="880" height="665"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the report navigator.&lt;/li&gt;
&lt;li&gt;Choose your build of interest.&lt;/li&gt;
&lt;li&gt;Choose all messages tab.&lt;/li&gt;
&lt;li&gt;You will find the message printed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's tweak this build a little, let's break the build for no reason..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNW6JPIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba3ucmg4icy9853s7aci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNW6JPIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba3ucmg4icy9853s7aci.png" alt="Image description" width="880" height="198"&gt;&lt;/a&gt;&lt;br&gt;
The key here is to exit the script with any value rather than zero, this will indeed fail the script and all the succeeding run scripts won't even run.&lt;/p&gt;

&lt;p&gt;This will result in our friendly message we now understand its meaning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNHFShiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxr5f2lc4zm5d2u15a7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNHFShiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxr5f2lc4zm5d2u15a7m.png" alt="Xcode Build Phase" width="846" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is it for our first part, in the next part we will build upon our knowledge and develop a very useful run script to use in you apps, so stay tuned 😉&lt;/p&gt;

</description>
      <category>ios</category>
      <category>xcode</category>
      <category>swift</category>
    </item>
    <item>
      <title>Implementing HTTP Polling</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sat, 25 Dec 2021 12:00:08 +0000</pubDate>
      <link>https://dev.to/abh1navv/implementing-http-polling-1dmi</link>
      <guid>https://dev.to/abh1navv/implementing-http-polling-1dmi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#polling"&gt;
  &lt;/a&gt;
  Polling
&lt;/h2&gt;

&lt;p&gt;Polling is a technique for making requests in a non-blocking manner. It is particularly useful for applications that need to make requests to services which take a long time to process the request.&lt;/p&gt;

&lt;p&gt;Let's say we have a client and a server. If the client makes a synchronous request, its thread will block until the server responds. For a long process at the server, this can be problematic. In a real-world application accessed by lots of users, this would lead to reduced ability of the application to serve new requests.&lt;/p&gt;

&lt;p&gt;For e.g. if the capacity of the client is to hold 100 requests at a time and the server takes a few minutes to process a single request, this can lead to a situation where the client is unable to serve new requests because there are no free threads.&lt;/p&gt;

&lt;p&gt;To solve this, we need to make the client asynchronous. Polling is one of the techniques which can be used to achieve this.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;how polling works in a nutshell&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client makes a request to the server just like a simple HTTP request.&lt;/li&gt;
&lt;li&gt;The server responds to the client but has not finished processing the request.&lt;/li&gt;
&lt;li&gt;The client polls the server after some interval to see if the request has been processed.&lt;/li&gt;
&lt;li&gt;If the request has been processed, the client receives the response.&lt;/li&gt;
&lt;li&gt;If not, the client polls again after some interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Keep in mind that the client here can be a server in itself, like in a microservice architecture. It can also be a frontend application. I will talk about this towards the end of this article.&lt;/p&gt;

&lt;p&gt;Now let's discuss some steps in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-initial-processing-and-response"&gt;
  &lt;/a&gt;
  The initial processing and response
&lt;/h3&gt;

&lt;p&gt;The server receives the request and does the bare minimum processing before sending the response back to the client.&lt;/p&gt;

&lt;p&gt;Minimum processing would look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if the request is &lt;strong&gt;authorized&lt;/strong&gt; - whichever authentication mechanism is used.&lt;/li&gt;
&lt;li&gt;Check if the request is &lt;strong&gt;valid&lt;/strong&gt; - contains all the required parameters. Additionally, the server can check if the request can be converted to a domain object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These checks make sure the request is "processable". Any &lt;strong&gt;client side errors&lt;/strong&gt; (4xx) like Bad request, unauthorized, etc. are returned to the client at this stage itself. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-the-response-contain"&gt;
  &lt;/a&gt;
  What should the response contain?
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The status of the request - Preferably &lt;strong&gt;202 Accepted&lt;/strong&gt;. This is to indicate that the request has been received and is being processed.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;status endpoint&lt;/strong&gt; to be used for polling.&lt;/li&gt;
&lt;li&gt;Any of the two urls will need to contain &lt;strong&gt;a unique identifier for the request&lt;/strong&gt;. We have a few options:

&lt;ul&gt;
&lt;li&gt;The id of the request - Assuming every request had a unique id.&lt;/li&gt;
&lt;li&gt;The id of the resource which is being created - if the request is a create request. For e.g. if the processing results in creating a new resource, the server needs to create a token corresponding to the resource and send it back to the client.&lt;/li&gt;
&lt;li&gt;Basically anything that uniquely identifies the request. This is open to implementation decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;polling interval&lt;/strong&gt; - The time interval between two successive polls. This is optional from the server end. The client can also choose the interval. However, it is recommended that the server chooses the interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the polling is done with the unique identifier, the status endpoint should be able to use the identifier to check the status of the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-status-endpoint"&gt;
  &lt;/a&gt;
  The status endpoint
&lt;/h3&gt;

&lt;p&gt;The status endpoint is a &lt;strong&gt;GET&lt;/strong&gt; request to the server. It is used to check the status of the request.&lt;br&gt;
It contains a unique identifier for the request usually appended to the path. E.g. &lt;em&gt;/status/{id}&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#status-calls"&gt;
  &lt;/a&gt;
  Status calls
&lt;/h4&gt;

&lt;p&gt;The status endpoint is called periodically by the client to check the status of the request.&lt;/p&gt;

&lt;p&gt;What happens when if the request passes, fails or is still in progress has a few different ways to be handled. I recommend always treating the status endpoint in a RESTful manner. Which means whether the request has passed, failed or is still in progress, the status endpoint should return a &lt;strong&gt;200 OK&lt;/strong&gt; status with the appropriate response in the body.&lt;/p&gt;

&lt;p&gt;Let's see an example of a status endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/status/{id}&lt;/span&gt;
      &lt;span class="s"&gt;get&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get the status of a request&lt;/span&gt;
         &lt;span class="na"&gt;operationId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;getStatus&lt;/span&gt;
         &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;200'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status of the request&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Status'&lt;/span&gt;
         &lt;span class="err"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;401'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status request is unauthorized&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Error'&lt;/span&gt;
         &lt;span class="err"&gt;   &lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;404'&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status request is not found&lt;/span&gt;
               &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                     &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                        &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Error'&lt;/span&gt;
&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;Status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The status of the request&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Passed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Failed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;InProgress&lt;/span&gt;
         &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The url of the final resource&lt;/span&gt;
         &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The message corresponding to the status&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request passed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request failed&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Request still in progress&lt;/span&gt;
         &lt;span class="na"&gt;nextPoll&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;integer&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The time in seconds to wait before polling again&lt;/span&gt;
            &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;int64&lt;/span&gt;
   &lt;span class="na"&gt;Error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
            &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The error message&lt;/span&gt;
            &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Invalid request&lt;/span&gt;
               &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Unauthorized request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're not familiar with OpenAPI, you can read more about it &lt;a href="https://swagger.io/docs/specification/open-api-specification/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In that case only focus on the status object. It contains: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the status of the request, &lt;/li&gt;
&lt;li&gt;the url of the final resource, &lt;/li&gt;
&lt;li&gt;the message corresponding to the status and &lt;/li&gt;
&lt;li&gt;the time in seconds to wait before polling again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-http-polling"&gt;
  &lt;/a&gt;
  When to use HTTP polling
&lt;/h3&gt;

&lt;p&gt;There can be a number of reasons to use HTTP polling and a number of reasons not to. &lt;br&gt;
It is an old way of doing things and it is not recommended when a superior way is available.&lt;/p&gt;

&lt;p&gt;Other popular ways of doing asynchronous requests are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebSockets or Webhooks for responses.&lt;/li&gt;
&lt;li&gt;Queue-based communication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But for both of these approaches, the client should be a backend server in itself. Moreover, the original server should be able to communicate with the client using the return protocol.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So naturally, for frontend applications (websites, apps, desktop clients, etc) , HTTP polling is a valid option.&lt;/li&gt;
&lt;li&gt;It is also a valid option when the server cannot fire back HTTP requests to its clients due to network/security restrictions. We cannot use webhooks in this scenario.&lt;/li&gt;
&lt;li&gt;Sometimes, the server runs legacy code and it cannot communicate with the client using the latest protocols.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-implement-a-simple-http-polling-example"&gt;
  &lt;/a&gt;
  Let's implement a simple HTTP polling example
&lt;/h2&gt;

&lt;p&gt;Imagine a use case where you have a frontend application that needs to make an HTTP request to a backend server. The server will take a long time to process the request so HTTP polling is a good option.&lt;br&gt;
The client is a javascript function running in a browser.&lt;/p&gt;

&lt;p&gt;The original request is to create a new user. If the request is successful, a 202 response is returned along with the status endpoint and the next polling time in response.&lt;/p&gt;

&lt;p&gt;Let's see the client code for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;password&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;statusUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's look at the server code in Spring Boot for this request. It sends an immediate response and executes the request in a separate thread. It also saves the request id in the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserService&lt;/span&gt; &lt;span class="n"&gt;userService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;RequestService&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="no"&gt;POLL_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Valid&lt;/span&gt; &lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;requestId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="no"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;randomUUID&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PENDING"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;userService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;createResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createStatusUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestId&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="no"&gt;POLL_INTERVAL&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACCEPTED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am not covering security and validation here. &lt;br&gt;
These concerns are handled by Spring boot before the request reaches the controller if &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spring Security is configured.&lt;/li&gt;
&lt;li&gt;Bean Validation is enabled. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The internal details of request service are also not important for this example. The important part is that the status url is created using the request id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@Async&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;@Async&lt;/code&gt; annotation is used to execute the request in a separate thread.&lt;/p&gt;

&lt;p&gt;Now let's look at the pollStatus function. It is a recursive function that polls the status endpoint and returns the response on completed, failed or error state is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;COMPLETED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FAILED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pollStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
               &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;nextPoll&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function need not be recursive. You can use a simple while loop to poll the status endpoint with a timeout.&lt;/p&gt;

&lt;p&gt;Now let's look at the server code for the status request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatusController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;RequestService&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/status"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StatusResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestParam&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;RequestStatus&lt;/span&gt; &lt;span class="n"&gt;requestStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestStatus&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StatusResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestStatus&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OK&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again not covering security here. If a request corresponding to the id is not found, a 404 response is returned otherwise a 200 response is returned along with the status.&lt;/p&gt;




&lt;p&gt;Thanks for reading! This should give you an idea about HTTP Polling. If you find any issues with the code, please let me know. Javascript is not my first language so please forgive me if I am not clear.&lt;br&gt;
If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #6 Stock Buy And Sell</title>
      <author>sachin26</author>
      <pubDate>Sat, 25 Dec 2021 11:27:13 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-6-stock-buy-and-sell-5d51</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-6-stock-buy-and-sell-5d51</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You are given an array prices where &lt;code&gt;prices[i]&lt;/code&gt; is the price of a given stock on the ith day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: prices = [7,1,5,3,6,4]
Output: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.&lt;br&gt;
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;by using 2 loops we can easily solve this problem. 1st loop buys the stock, the second loop sells the stock. by each selling, we maintain the max profit.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;lets understand this step by step,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialize a variable &lt;code&gt;maxProfit=0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=0&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;buyPrice = prices[i]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt;  run another loop from &lt;code&gt;j=i+1&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;sellPrice = prices[j]&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;sellPrice&lt;/code&gt; &amp;gt; &lt;code&gt;buyPrice&lt;/code&gt; then,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;calculate the profit.&lt;br&gt;
&lt;code&gt;profit = sellPrice - buyPrice&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;profit &amp;gt; maxProfit&lt;/code&gt; then,update the &lt;code&gt;maxProfit&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;maxProfit = profit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTAeJu1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdmibaoh2gtpmid7q3rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTAeJu1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdmibaoh2gtpmid7q3rg.png" alt="buy stock sell stock" width="880" height="1245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Java&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Time Complexity⏱️&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we are running two loops then,&lt;br&gt;
Time Complexity: &lt;strong&gt;O(n*n)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Space Complexity⛰️&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we are not using any extra space then,&lt;br&gt;
Space Complexity: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 2&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;this problem can be solve by using kadane's algorithm with &lt;strong&gt;O(n)&lt;/strong&gt; Time Complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialize three variables&lt;br&gt;
 &lt;code&gt;buyPrice = prices[0]&lt;/code&gt;,&lt;br&gt;
 &lt;code&gt;sellPrice&lt;/code&gt;,&lt;br&gt;
 &lt;code&gt;maxProfit = 0&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=1&lt;/code&gt; to &lt;code&gt;prices.length&lt;/code&gt; and then,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; initialize &lt;code&gt;sellPrice = prices[i]&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; if &lt;code&gt;sellPrice &amp;lt; buyPrice&lt;/code&gt; then update the &lt;code&gt;buyPrice&lt;/code&gt;,&lt;br&gt;
  &lt;code&gt;buyPrice = sellPrice&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; calculate the profit.&lt;br&gt;
&lt;code&gt;profit = sellPrice - buyPrice&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; if &lt;code&gt;profit &amp;gt; maxProfit&lt;/code&gt; then update the &lt;code&gt;maxProfit&lt;/code&gt;&lt;br&gt;
&lt;code&gt;maxProfit = profit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;

            &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;buyPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sellPrice&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;buyPrice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;maxProfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


        &lt;span class="o"&gt;}&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maxProfit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;thank you for reading this article. if you find any mistake let me know in the comment section.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>dsa</category>
      <category>java</category>
    </item>
    <item>
      <title>Does Github Copilot tell good programming jokes?</title>
      <author>Virej Dasani</author>
      <pubDate>Sat, 25 Dec 2021 11:16:44 +0000</pubDate>
      <link>https://dev.to/virejdasani/does-github-copilot-tell-good-programming-jokes-1mpo</link>
      <guid>https://dev.to/virejdasani/does-github-copilot-tell-good-programming-jokes-1mpo</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eHLEAK_R2fc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please help me get to 150 subs before 2022, Merry Christmas!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Django Formset: Submit two django forms at once.</title>
      <author>Shivam Rohilla</author>
      <pubDate>Sat, 25 Dec 2021 10:51:35 +0000</pubDate>
      <link>https://dev.to/shivamrohilla/django-formset-submit-two-django-forms-at-once-182a</link>
      <guid>https://dev.to/shivamrohilla/django-formset-submit-two-django-forms-at-once-182a</guid>
      <description>&lt;p&gt;Hello Devs, In this Post I'm gonna show you how can we submit two django forms at once and this is also called django inline forms, for example I have two forms one is for Question and another one is for Answers, and I want a inline form, like one question and that question have four answers, ok so let's see how can we do that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOWbzAYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrp0yonmd68gnvuv10l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOWbzAYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrp0yonmd68gnvuv10l.png" alt="Image description" width="744" height="460"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Source Code:- 
https://github.com/ShivamRohilllaa/django-formset
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Original Post:- https://www.webdevcodes.com/django/django-formset-submit-two-django-forms-at-once/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all create two tables in models.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Question(models.Model):
    text = models.CharField(max_length=200, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.text)

    #Reverse relationship
    def get_answers(self):
        return self.answers.all()   

class Answer(models.Model):
    text = models.CharField(max_length=200, verbose_name='Answer')
    correct = models.BooleanField()
    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='answers')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"question {self.question.text}, answer: {self.text}. correct: {self.correct}"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create modelforms in forms.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.forms.models import modelformset_factory


class QuestionsForm(forms.ModelForm):
    text = forms.CharField(label='Question', required=True)

    class Meta:
        model = Question
        fields = ['text']


AnswerFormset = modelformset_factory(
    Answer,
    fields=('text', 'correct'),
    extra=4,
    widgets={ 'text': forms.TextInput(attrs={ 'class': 'form-control','placeholder': 'Enter Answer here'}
            )
        }
)        


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;import modelformset_factory then use modelformset_factory this in that form in which you want to show extra fields. for example one question have multiple answers, so we modelformset_factory in answer form&lt;/p&gt;

&lt;p&gt;Now create views for that forms.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
def add_questions(request):
    ques= QuestionsForm()
    formset = AnswerFormset(queryset=Answer.objects.none())
    if request.method=='POST':
        ques= QuestionsForm(request.POST)
        formset = AnswerFormset(request.POST)
        if ques.is_valid() and formset.is_valid():
            ques = ques.save()
            for form in formset:
                answer = form.save(commit=False)
                answer.question = ques
                answer.save() 
            return redirect('home')
    return render(request, "add-ques.html", {'ques':ques, 'formset':formset})


def home(request):
    ques = Question.objects.all()
    context = {'ques':ques}
    return render(request, 'index.html', context)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now render that form in your template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="." method='post'&amp;gt;
        {% csrf_token %}
        {% for field in ques %}
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="text"&amp;gt;{{field.label}}:&amp;lt;/label&amp;gt;
            {{field}}
        &amp;lt;/div&amp;gt;
        {% endfor %}
        {% comment %} {{ques}}
        {{formset}} {% endcomment %}
        {{ formset.management_form }}
        {% for field in formset %}
        &amp;lt;div class="form-group mt-5 mb-5"&amp;gt;
          &amp;lt;label for="text"&amp;gt;{{field.label}}&amp;lt;/label&amp;gt;
          {{field.text}}
        &amp;lt;/div&amp;gt;
        {% endfor %}
        &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that's it and this is how your form look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXNh3gpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynq1poa13lr71xftruh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXNh3gpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynq1poa13lr71xftruh5.png" alt="Image description" width="744" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--McN2mEho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepokev6xjgghjnyy3z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--McN2mEho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepokev6xjgghjnyy3z8.png" alt="Image description" width="880" height="328"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Source Code:- 
https://github.com/ShivamRohilllaa/django-formset
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you&lt;br&gt;
Shivam Rohilla Python Developer&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Web Development</title>
      <author>Subha Rajagopal</author>
      <pubDate>Sat, 25 Dec 2021 10:23:45 +0000</pubDate>
      <link>https://dev.to/subha822/web-development-g38</link>
      <guid>https://dev.to/subha822/web-development-g38</guid>
      <description>&lt;p&gt;I having been started learning Web development.&lt;br&gt;
On Learning Web Development, I am understanding that &lt;br&gt;
only learning that doesn't means on the way we are implementing makes our learning easier.&lt;/p&gt;

&lt;p&gt;*To-Do-List web development by me &lt;/p&gt;

&lt;p&gt;1.HTML (Hyper Text Markup Language)&lt;br&gt;
2.CSS (Cascading Style Sheet)&lt;br&gt;
3.Git and GitHub&lt;br&gt;
4.SQL (Structured Query Language)&lt;br&gt;
*Journey Goes...&lt;/p&gt;

&lt;p&gt;Comment Below on Web Development Roadmap &lt;br&gt;
you are at which stage!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel Jetstream vs Laravel ui  vs Breeze</title>
      <author>Ashish Yadav</author>
      <pubDate>Sat, 25 Dec 2021 09:47:07 +0000</pubDate>
      <link>https://dev.to/expoashish/laravel-jetstream-vs-laravel-ui-vs-breeze-2h6d</link>
      <guid>https://dev.to/expoashish/laravel-jetstream-vs-laravel-ui-vs-breeze-2h6d</guid>
      <description>&lt;p&gt;In this blog we are going to see the main difference between Laravel Jetstream vs Laravel ui  vs Breeze. So Guys please like the post and visit my website&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Click Here to Read this Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankyou&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Meta Tag in HTML | SEO Important</title>
      <author>elinabey</author>
      <pubDate>Sat, 25 Dec 2021 09:46:48 +0000</pubDate>
      <link>https://dev.to/elinabey/meta-tag-in-html-seo-important-3416</link>
      <guid>https://dev.to/elinabey/meta-tag-in-html-seo-important-3416</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoPjk8mR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6mj7lpvlzg6q87pc20t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoPjk8mR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6mj7lpvlzg6q87pc20t.jpg" alt="Meta Tag in HTML" width="880" height="462"&gt;&lt;/a&gt;Meta Tag in HTML | SEO Important. A meta tag in HTML is used to represent data about your webpage. With the help of a meta tag, we can specify the description of the document, its author information when it was last updated, it uses to give detailed properties of the HTML document. The meta tag is enclosed within the HTML tag, which was added in part. It is most helpful to the web designers to show the actual display part of the web page. The whole viewport control will be done by them using meta tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meta-tag-in-html"&gt;
  &lt;/a&gt;
  Meta Tag in HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;&lt;/code&gt;:) is the best support for displaying any kind of language.&lt;br&gt;
&lt;code&gt;&amp;lt;meta name="viewport" content.........&amp;gt;&lt;/code&gt;:) used to manage the size of the viewport with all its page dimension value and page scrolling to fit our webpage perfectly in any kind of device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meta-tag-list"&gt;
  &lt;/a&gt;
  Meta Tag List
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tags&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta charset="UTF-8"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines Language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="description" content="150 words"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines Description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="copyright" content="company name"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Preserve  Copyrights&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="abstract" content=""&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abstract a Web Page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="author" content="name@hotmail.com"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines author&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="url" content="http://url.com"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Define URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="rating" content="General"&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manage Ratings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;meta name="keywords" content="your, tags"/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Web Keywords&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Meta tag details information here"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"robots"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Robotics"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hotmail:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, a Meta tag in Html is used to represent metadata about HTML documents. The code included in it is a machine-readable format that works well with a webpage but doesn’t show any content on the page to the visitors.&lt;/p&gt;

&lt;p&gt;I shared this post from &lt;a href="https://softcodeon.com/html/meta-tag-in-html.htm"&gt;Meta Tag in HTML | SEO Important&lt;/a&gt; you can read in detail from there.&lt;/p&gt;

&lt;p&gt;If you have any question please discuss below help to improve. Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
      <category>performance</category>
    </item>
    <item>
      <title>Deploy Microservices In Production</title>
      <author>Mehdi</author>
      <pubDate>Sat, 25 Dec 2021 09:45:18 +0000</pubDate>
      <link>https://dev.to/mehdichebbah/deploy-microservices-in-production-22f5</link>
      <guid>https://dev.to/mehdichebbah/deploy-microservices-in-production-22f5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article we will learn the difference between deploying a monolithic application and deploying a microservices application, we will discuss the different available options and the advantages and disadvantages of each of them. So lets get straight into it.&lt;/p&gt;

&lt;p&gt;Deploying a monolithic application means running multiple, identical copies of a single, usually large application. You typically provision N servers (physical or virtual) and run M instances of the application on each one. The deployment of a monolithic application is not always entirely straightforward, but it is much simpler than deploying a microservices application.&lt;/p&gt;

&lt;p&gt;A microservices application consists of tens -or even hundreds- of services. Services are written in a variety of languages and frameworks. Each one is a mini‑application with its own specific deployment, resources, scaling, and monitoring requirements. For example, you need to run a certain number of instances of each service based on the demand for that service. Also, each service instance must be provided with the appropriate CPU, memory, and I/O resources. What is even more challenging is that despite this complexity, deploying services must be fast, reliable and cost‑effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-techniques"&gt;
  &lt;/a&gt;
  Deployment techniques
&lt;/h2&gt;

&lt;p&gt;There are multiple ways of deploying a microservices based system, here they are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-service-instances-per-host"&gt;
  &lt;/a&gt;
  Multiple service instances per host
&lt;/h3&gt;

&lt;p&gt;The first way is to run multiple instances of different services on a host (Physical or Virtual machine). The deployed system looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzNeMx4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/159jb4nc3lzvyvq656lz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzNeMx4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/159jb4nc3lzvyvq656lz.png" alt="Image description" width="483" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of this pattern include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More efficient resource utilization than one service instance per host (The next pattern).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawbacks of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Risk of conflicting resource requirements;&lt;/li&gt;
&lt;li&gt;Risk of conflicting dependency versions;&lt;/li&gt;
&lt;li&gt;Difficult to limit the resources consumed by a service instance;&lt;/li&gt;
&lt;li&gt;If multiple services instances are deployed in the same process then its difficult to monitor the resource consumption of each service instance. Its also impossible to isolate each instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#single-service-instance-per-host"&gt;
  &lt;/a&gt;
  Single service instance per host
&lt;/h3&gt;

&lt;p&gt;The second option is to deploy each single service instance on its own host. An example of this deployment pattern is shown here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydqp6QQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0wfp7r1d2kb8tw9imbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ydqp6QQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0wfp7r1d2kb8tw9imbg.png" alt="Image description" width="516" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Services instances are isolated from one another;&lt;/li&gt;
&lt;li&gt;There is no possibility of conflicting resource requirements or dependency versions;&lt;/li&gt;
&lt;li&gt;A service instance can only consume at most the resources of a single host;&lt;/li&gt;
&lt;li&gt;Its straightforward to monitor, manage, and redeploy each service instance;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawbacks of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Potentially less efficient resource utilization compared to Multiple Services per Host because there are more hosts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#service-instance-per-vm"&gt;
  &lt;/a&gt;
  Service instance per VM
&lt;/h3&gt;

&lt;p&gt;Package the service as a virtual machine image and deploy each service instance as a separate VM. This means the system will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRUrhIsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baobos724zwrrywi8fsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRUrhIsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baobos724zwrrywi8fsv.png" alt="Image description" width="563" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Its straightforward to scale the service by increasing the number of instances;&lt;/li&gt;
&lt;li&gt;The VM encapsulates the details of the technology used to build the service;&lt;/li&gt;
&lt;li&gt;Each service instance is isolated;&lt;/li&gt;
&lt;li&gt;A VM imposes limits on the CPU and memory consumed by a service instance;&lt;/li&gt;
&lt;li&gt;IaaS solutions such as AWS provide a mature and feature rich infrastructure for deploying and managing virtual machines;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawbacks of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building a VM image is slow and time consuming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#service-instance-per-container"&gt;
  &lt;/a&gt;
  Service instance per Container
&lt;/h3&gt;

&lt;p&gt;Package the service as a container image and deploy each service instance as a container.  Docker could be used to create container images and these containers could be manipulated using a framework such us Docker Compose, Kubernetes, Marathon/Mesos, ...etc. This solution is presented in the following figure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qExorhwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7bj0fkyfbwuqgwu8ra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qExorhwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7bj0fkyfbwuqgwu8ra.png" alt="Image description" width="563" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is straightforward to scale up and down a service by changing the number of container instances;&lt;/li&gt;
&lt;li&gt;The container encapsulates the details of the technology used to build the service;&lt;/li&gt;
&lt;li&gt;Each service instance is isolated;&lt;/li&gt;
&lt;li&gt;A container imposes limits on the CPU and memory consumed by a service instance;&lt;/li&gt;
&lt;li&gt;Containers are extremely fast to build and start. For example, it’s 100x faster to package an application as a Docker container than it is to package it as a VM. Docker containers also start much faster than a VM since only the application process starts rather than an entire OS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The drawbacks of this approach include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The infrastructure for deploying containers is not as rich as the infrastructure for deploying virtual machines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can recap the pros and cons of the mentioned 4 strategies in the following table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Multiple instances per host&lt;/th&gt;
&lt;th&gt;Single instance per host&lt;/th&gt;
&lt;th&gt;Single instance per VM&lt;/th&gt;
&lt;th&gt;Single instance per container&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Isolation&lt;/td&gt;
&lt;td&gt;No isolation&lt;/td&gt;
&lt;td&gt;Isolated&lt;/td&gt;
&lt;td&gt;Isolated&lt;/td&gt;
&lt;td&gt;Isolated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Risk of conflicts&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resources management&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;third-party solutions&lt;/td&gt;
&lt;td&gt;No solutions&lt;/td&gt;
&lt;td&gt;Some solutions&lt;/td&gt;
&lt;td&gt;Multiple solutions&lt;/td&gt;
&lt;td&gt;A lot of solutions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resources efficiency&lt;/td&gt;
&lt;td&gt;Efficient&lt;/td&gt;
&lt;td&gt;Not efficient&lt;/td&gt;
&lt;td&gt;Efficient&lt;/td&gt;
&lt;td&gt;Very efficient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scaling&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;td&gt;Very easy&lt;/td&gt;
&lt;td&gt;Very easy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Build time&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Slow&lt;/td&gt;
&lt;td&gt;Fast&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Deploying Microservices: Choosing a Strategy&lt;/em&gt; (2016) &lt;em&gt;NGINX&lt;/em&gt;. Available at: &lt;a href="https://www.nginx.com/blog/deploying-microservices/"&gt;https://www.nginx.com/blog/deploying-microservices/&lt;/a&gt; (Accessed: 24 December 2021).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Deploying microservices&lt;/em&gt;. Available at: &lt;a href="https://microservices.io/articles/deployment.html"&gt;https://microservices.io/articles/deployment.html&lt;/a&gt; (Accessed: 24 December 2021).&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>microservices</category>
      <category>devops</category>
      <category>deploy</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
