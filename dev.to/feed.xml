<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating an Airbnb clone</title>
      <author>Kartik Grewal</author>
      <pubDate>Tue, 20 Jul 2021 10:42:36 +0000</pubDate>
      <link>https://dev.to/canonic/creating-an-airbnb-clone-5cia</link>
      <guid>https://dev.to/canonic/creating-an-airbnb-clone-5cia</guid>
      <description>&lt;p&gt;Airbnb is one of the most successful products and is widely used across the world. It fits under the marketplace category and therefore we decided to recreate it on Canonic. The goal was simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow users to sign up/log in&lt;/li&gt;
&lt;li&gt;Show a list of various Airbnb's available&lt;/li&gt;
&lt;li&gt;Show details of the listing&lt;/li&gt;
&lt;li&gt;Allow users to make a reservation&lt;/li&gt;
&lt;li&gt;Allow users to review a listing&lt;/li&gt;
&lt;li&gt;Allow hosts (users who make the listing) to review the guests (users who book the listing)&lt;/li&gt;
&lt;li&gt;Allow users to create a wishlist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll show how easy, fast and flexible it is to build your production-ready backend in less than 25 minutes. What are we waiting for then! Go to &lt;a href="http://app.canonic.dev"&gt;app.canonic.dev&lt;/a&gt; and Log In. If you don't have an account, Signup! It's free to use under very generous limits! After you log in, you'll come straight to the dashboard.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-a-project"&gt;
  &lt;/a&gt;
  Creating a Project
&lt;/h2&gt;

&lt;p&gt;Create a &lt;em&gt;New Project&lt;/em&gt; *&lt;strong&gt;&lt;em&gt;by clicking on the *&lt;/em&gt;+ Create New&lt;/strong&gt; button on the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6k_0kmK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6k_0kmK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-1.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you click, you'll be presented with the options to name your project, select which category it belongs to, etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rM9WbV5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rM9WbV5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-2.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After filling in the details, click &lt;strong&gt;Next.&lt;/strong&gt; It'll present you with 3 options for the &lt;strong&gt;Database Configurations.&lt;/strong&gt; Since we are making a new project from the start, we'll select the first option &lt;strong&gt;Create,&lt;/strong&gt; where canonic will automatically provision a database for your project!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPfKL2XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPfKL2XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-3.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Create&lt;/strong&gt;, and your new project is created! You can find more about creating a project &lt;a href="https://docs.canonic.dev/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-backend-involves-three-main-parts"&gt;
  &lt;/a&gt;
  Creating a backend involves three main parts:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Defining your Model&lt;/em&gt;&lt;/strong&gt;: How the data structure is gonna look like for your database, your schema! &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Feeding Data&lt;/em&gt;&lt;/strong&gt;: After you define the structure/model of your database, entering data into it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Fetching Data:&lt;/em&gt;&lt;/strong&gt; Getting the data over REST or GraphQL APIs for your frontend to consume and show!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Defining business logic:&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrating with 3rd party applications:&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#i-defining-your-model"&gt;
  &lt;/a&gt;
  I - Defining your Model
&lt;/h2&gt;

&lt;p&gt;Now as per our requirements, we have 5 main points of information that we need to make the backend for our Airbnb marketplace:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User: &lt;em&gt;Our frontend will need to fetch the information of the user who host or book&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Reservations: &lt;em&gt;Our frontend will need to fetch all the bookings made via Airbnb&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Listing:  &lt;em&gt;Our frontend will need to fetch all the various places available on Airbnb for users to book&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Listing Review: &lt;em&gt;Our frontend will need to fetch the review of the guest who made a reservation at a listing&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Guest Review: &lt;em&gt;Our frontend will need to fetch the review of the user who books their listing&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Wishlist - &lt;em&gt;Our frontend will need to fetch the Wishlist created by the users&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In database terms, we can think of them as &lt;strong&gt;tables&lt;/strong&gt; that will hold all the information related to them respectively. Let's start defining them! Once you fill in all the information, you'll see an option to &lt;strong&gt;create a table&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxJ4uPxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxJ4uPxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-4.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the name: &lt;strong&gt;User.&lt;/strong&gt; We'll choose the type of the table as &lt;strong&gt;Identity&lt;/strong&gt; since we want to allow users to login via Facebook, Google, etc, and store all user information in one place. Hit &lt;strong&gt;Create&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;+ Field&lt;/strong&gt; option to add attributes to our table. A panel will come up from below, where you can set, what type the field should be, its name, etc. Different types are available for different needs like: &lt;em&gt;&lt;a href="https://docs.canonic.dev/concepts/field-types/text"&gt;TEXT&lt;/a&gt;, &lt;a href="https://docs.canonic.dev/concepts/field-types/number"&gt;NUMBER&lt;/a&gt;, &lt;a href="https://docs.canonic.dev/concepts/field-types/date"&gt;DATE&lt;/a&gt;, &lt;a href="https://docs.canonic.dev/concepts/field-types/image"&gt;IMAGE&lt;/a&gt;, etc.&lt;/em&gt; You can see some system-generated fields automatically for you! &lt;strong&gt;+ Fieldset option&lt;/strong&gt; allows you to group certain fields for better structuring of the CMS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QeaVXuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QeaVXuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-5.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll define 4 additional attributes to our table, the rest are pre-created and available on Canonic as &lt;strong&gt;system fields&lt;/strong&gt;: You can also set default values for your fields, setup &lt;a href="https://docs.canonic.dev/concepts/field-validations"&gt;validations&lt;/a&gt; if you like, etc. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Phone Number&lt;/strong&gt; of the ticket - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Email Verification&lt;/strong&gt; of the user - FIELDSET&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Date&lt;/strong&gt; of email verification - DATE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Time&lt;/strong&gt; of email verification - TIME&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how to create a TEXT field type under the name &lt;strong&gt;Phone Number.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSDYBVUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSDYBVUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-6.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;strong&gt;Email Verification&lt;/strong&gt; as a FIELD SET and then add the &lt;strong&gt;Date&lt;/strong&gt; and &lt;strong&gt;Time&lt;/strong&gt; fields as DATE and TIME field types. Your graph should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c0hrJuy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c0hrJuy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-7.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can click on the &lt;strong&gt;+ Table&lt;/strong&gt; option and create a table called &lt;strong&gt;Listing&lt;/strong&gt; and set table type as a LIST&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIY4-Uhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIY4-Uhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-8.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Listed below are the attributes required apart from &lt;strong&gt;System Fields&lt;/strong&gt; pre available in the Listing Table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title&lt;/strong&gt; of the Listing. - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hosted By&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Type of Listing&lt;/strong&gt; - PICKER&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total Occupancy&lt;/strong&gt; possible at the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No. of bedrooms&lt;/strong&gt; available at the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No. of beds&lt;/strong&gt; available at the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No. of bathroom&lt;/strong&gt; available at the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Summary&lt;/strong&gt; about the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Location&lt;/strong&gt; of the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Address&lt;/strong&gt; of the Listing - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kitchen Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Wifi Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free Parking Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Air Conditioning Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Price&lt;/strong&gt; of the listing/night - TEXT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on the &lt;strong&gt;+ Field&lt;/strong&gt; option to add all the above-mentioned attributes to the &lt;strong&gt;Listing&lt;/strong&gt; table.  I'm sure you have an idea of how to create and choose field types by now.&lt;/p&gt;

&lt;p&gt;Here's how to create a PICKER field type for the &lt;strong&gt;Type&lt;/strong&gt; of Listing attribute. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PAEGEUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PAEGEUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-9.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;edit options&lt;/strong&gt; button on the bottom left to add types of listing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXT4U8az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXT4U8az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-10.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how to add a TOGGLE functionality to your table for some of the properties &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Kitchen Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Wifi Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free Parking Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Air Conditioning Availability&lt;/strong&gt; at the Listing - TOGGLE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CN-zPgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CN-zPgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-11.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what the final &lt;strong&gt;Listing&lt;/strong&gt; Table should look like. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTHL20_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTHL20_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-12.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-12.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Next, you can click on the &lt;strong&gt;+ Table&lt;/strong&gt; option and create a table called &lt;strong&gt;Reservation&lt;/strong&gt; and set table type as a LIST.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QF0VvxRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QF0VvxRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-13.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Listed below are the various field types you can define for &lt;br&gt;
 the &lt;strong&gt;Reservations&lt;/strong&gt; Table. You can also set default values for your fields, set up &lt;a href="https://docs.canonic.dev/concepts/field-validations"&gt;validations&lt;/a&gt; if you like, etc. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Listing&lt;/strong&gt; booked by a user. -  LINK (LISTING Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Booked by&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Start Date&lt;/strong&gt; of the Reservation - DATE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End Date&lt;/strong&gt; of the Reservation - DATE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Price&lt;/strong&gt; of the Reservation - TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total Price&lt;/strong&gt; of the Reservation - COMPUTED&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No. of Adults&lt;/strong&gt; staying - TEXT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how your graph will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sSxahyB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sSxahyB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-14.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-14.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Next, you can click on the &lt;strong&gt;+ Table&lt;/strong&gt; option and create a table called &lt;strong&gt;Listing Review&lt;/strong&gt; and set table type as a LIST&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7v85v4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7v85v4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-15.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-15.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Listed below are the attributes required apart from &lt;strong&gt;System Fields&lt;/strong&gt; pre available in the &lt;strong&gt;Listing&lt;/strong&gt; &lt;strong&gt;Review&lt;/strong&gt; Table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Listing&lt;/strong&gt; for which the review is provided - LINK (LISTING Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Written by&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rating&lt;/strong&gt; provided by the User - PICKER&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comments&lt;/strong&gt; added by the User - TEXT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how your graph will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqIX1Ehb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqIX1Ehb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-16.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-16.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can click on the &lt;strong&gt;+ Table&lt;/strong&gt; option and create a table called &lt;strong&gt;Guest Review&lt;/strong&gt; and set table type as a LIST. Listed below are the attributes required apart from &lt;strong&gt;System Fields&lt;/strong&gt; pre available in the &lt;strong&gt;Listing&lt;/strong&gt; &lt;strong&gt;Review&lt;/strong&gt; Table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Written for&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Written by&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rating&lt;/strong&gt; provided by the Host - PICKER&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comments&lt;/strong&gt; added by the User - TEXT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how your graph will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q7-s9zXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7-s9zXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-17.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-17.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can click on the &lt;strong&gt;+ Table&lt;/strong&gt; option and create a table called &lt;strong&gt;Wishlist&lt;/strong&gt; and set table type as a LIST. Listed below are the attributes required apart from &lt;strong&gt;System Fields&lt;/strong&gt; pre available in the &lt;strong&gt;Wishlist&lt;/strong&gt; Table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wishlist Owner&lt;/strong&gt; - LINK (USER Table)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Title&lt;/strong&gt; of the Wishlist- TEXT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Listings&lt;/strong&gt; inside the Wishlist - LINK (LISTING Table)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how your graph will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_UGEvZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_UGEvZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-18.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-18.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your graph is complete just go ahead and hit &lt;strong&gt;Deploy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Canonic will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy your project&lt;/li&gt;
&lt;li&gt;Give you a CMS (Content Management System) tailored for your project so that you can start adding data into your tables immediately!&lt;/li&gt;
&lt;li&gt;Spit out the CRUD (Create, Read, Update, Delete) APIs, both REST and GraphQL for all the tables you've defined to consume your data by your frontend.&lt;/li&gt;
&lt;li&gt;Generate documentation for your APIs for you to get started immediately!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more documentation on modeling your content &lt;a href="https://docs.canonic.dev/getting-started/modeling-your-content"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ii-feeding-data"&gt;
  &lt;/a&gt;
  II - Feeding Data
&lt;/h2&gt;

&lt;p&gt;Navigate to the CMS to start entering or managing the data! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4Cq0Pjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4Cq0Pjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/airbnb-19.png" alt="https://canonic.s3.amazonaws.com/public/devto/airbnb-19.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#iii-fetching-data"&gt;
  &lt;/a&gt;
  III - Fetching Data
&lt;/h2&gt;

&lt;p&gt;Once you deploy your project, all the CRUD APIs are also deployed and are there to use straight-up for you. If you head to the DOCS tab, you'll be able to see all necessary information needed to fetch your data over REST and GraphQL Endpoints. You'll be able to see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The endpoint you need to call to fetch the data&lt;/li&gt;
&lt;li&gt;The request and response parameters&lt;/li&gt;
&lt;li&gt;Example requests and responses for all of the available APIs&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide was helpful and we are excited to see you built your Airbnb App using Canonic. If you want you can also duplicate this project from Canonic's sample app and easily get started by customising it as per your experience. Check it out &lt;a href="http://app.canonic.dev"&gt;app.canonic.dev&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can also check out our other guides &lt;a href="https://dev.to/canonic"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on discord to discuss or share with our community. Write to us for any support requests at &lt;a href="mailto:support@canonic.dev"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="http://www.canonic.dev"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>lowcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Must have Vs Code extensions for beginners in 2021</title>
      <author>Dhruv Bansal</author>
      <pubDate>Tue, 20 Jul 2021 10:21:03 +0000</pubDate>
      <link>https://dev.to/thesmartdeveloper/must-have-vs-code-extensions-for-beginners-4hb7</link>
      <guid>https://dev.to/thesmartdeveloper/must-have-vs-code-extensions-for-beginners-4hb7</guid>
      <description>&lt;p&gt;Today there are dozens of code editors and IDEs available out there. But, there is absolutely no doubt that VsCode is the leading editor of choice by most developers. It is what most modern devs today recommend to a beginner to start with.&lt;br&gt;
It is a free to use, open source, and highly customizable code editor with IDE like features, and is backed by Microsoft.&lt;br&gt;
Also, it can be made even more powerful with the help of extensions(available from the VsCode marketplace) to improve our workflow as beginners.&lt;br&gt;
Here are the top 10 extensions which everyone should install with VsCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7R91GIbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhyvzb9rh0dsj88or0ng.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7R91GIbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhyvzb9rh0dsj88or0ng.gif" alt="Lets begin GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-prettier"&gt;
  &lt;/a&gt;
  1) Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PpwA946w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v24zmvzpzoetm0zzdsrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PpwA946w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v24zmvzpzoetm0zzdsrw.png" alt="Prettier"&gt;&lt;/a&gt;&lt;br&gt;
This is an awesome code formatter which automatically rearranges your code according to the best practices when you run it in a source file. You can also configure it to run when you save the file you are working on.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Check out Prettier on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-code-runner"&gt;
  &lt;/a&gt;
  2) Code Runner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FVeOhJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ke2201h427f756jqmqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FVeOhJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ke2201h427f756jqmqj.png" alt="Code Runner"&gt;&lt;/a&gt;&lt;br&gt;
This is a must have if you are using languages like C, C++, Java, NodeJs, Python, etc. It appears as a play button on the top right corner in your VsCode instance. You can run any file by clicking this button and it will run in the integrated terminal. Believe me, it will be super handy and you will regret not using it before. You can also run any file using the shortcut Ctrl+Alt+N on windows/linux and Ctrl+Option+N on mac devices.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Check out Code Runner on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-live-server"&gt;
  &lt;/a&gt;
  3) Live Server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kz1QMvQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/276jqms3gdb6t5bpi54n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz1QMvQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/276jqms3gdb6t5bpi54n.png" alt="Live Server"&gt;&lt;/a&gt;&lt;br&gt;
This extension, as the name suggests, create a temporary server right on your machine(at port 5500 by default), and you can run your HTML, CSS, etc directly without having the refresh again and again.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Check out Liver Server on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  4) Bracket Pair Colorizer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kz1QMvQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/276jqms3gdb6t5bpi54n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz1QMvQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/276jqms3gdb6t5bpi54n.png" alt="Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;br&gt;
Whatever the Programming language you are working on, this extension will make the matching brackets of the same color so you no longer have to focus on which bracket belongs to which function, etc and can focus more on coding better. It is a real life saver many times.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Check out Bracket Pair Colorizer on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-color-highlighter"&gt;
  &lt;/a&gt;
  5) Color Highlighter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HqSYUwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6iturawfut2ux8pvmq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HqSYUwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6iturawfut2ux8pvmq2.png" alt="Color Highlighter"&gt;&lt;/a&gt;&lt;br&gt;
This is a simple yet cool one, it just colors the entire hex code or the color name whenever it sees one. It is better than the VsCode's default color preview square and just feels way better.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight"&gt;Check out Color Highlighter on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-auto-rename-tag"&gt;
  &lt;/a&gt;
  6) Auto Rename Tag
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjSOdny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vx2hmft8j0r68z2ch0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRjSOdny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vx2hmft8j0r68z2ch0j.png" alt="Auto Rename Tag"&gt;&lt;/a&gt;&lt;br&gt;
Have you ever been in a state where you wrote like about 100 lines or more of html, and then have to change a lot of tags you have there. If so, this one is for you. With this extension installed, you just have to change the starting tag name and the closing tag will be automatically changed correctly. It is a big time saver and makes you more efficient at writing markup.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Check out Auto Rename Tag on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-css-peak"&gt;
  &lt;/a&gt;
  7) CSS Peak
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dOqr9Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9c41j27b5eiwxs8ys63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dOqr9Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9c41j27b5eiwxs8ys63.png" alt="CSS Peak"&gt;&lt;/a&gt;&lt;br&gt;
Another productivity based extension in the house. This will be helpful when you want to know what styles are being applied to a html element(or a tag), instead of going all the way to the css files, you can just use this and see the styles. Moreover, you can edit those styles as per your liking and it will be changed in the CSS as well, right from you HTML.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek"&gt;Check out CSS Peak on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-peacock"&gt;
  &lt;/a&gt;
  8) Peacock
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBNG5eKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h1t2j33bpyyjswprl2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBNG5eKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h1t2j33bpyyjswprl2b.png" alt="Peacock"&gt;&lt;/a&gt;&lt;br&gt;
This will allow you to change the color of your VsCode sidebar as well as menubar to whatever color you want. You can set it to any hex code you like, this is just a great way to change the look and feel of your editor as make it more personalized according to your needs and the workflows.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock"&gt;Check out Peacock on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-code-spell-checker"&gt;
  &lt;/a&gt;
  9) Code Spell Checker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZTGeeHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brycz2dfy95oi45vl3e5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZTGeeHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brycz2dfy95oi45vl3e5.png" alt="Code Spell Checker"&gt;&lt;/a&gt;&lt;br&gt;
This extension will save your life when you mistakingly write wrong spelling for a function or just make a type in some file. It works like a normal linter and underlines the wrong spelled code part which you can correct and save yourself countless hours of debugging.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Check out Code Spell Checker on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-git-lens"&gt;
  &lt;/a&gt;
  10) Git Lens
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9B26thu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n5lq7aee190g80tc4nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9B26thu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n5lq7aee190g80tc4nn.png" alt="Git Lens"&gt;&lt;/a&gt;&lt;br&gt;
This is a super duper powerful extension. If you are a git or Github user, you absolutely need this!!&lt;br&gt;
It shows the last changed in the file along with timestamp as well as author's name, it can also be used in several other ways to make yourself more productive.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Check out GitLens on VsCode marketplace.&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#so-finally-we-did-it-these-are-the-top-10-extensions-every-beginner-should-install-and-try-out"&gt;
  &lt;/a&gt;
  So, Finally we did it. These are the top 10 extensions every beginner should install and try out.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cxw8ZDUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gmrzs4j20jpqfl675yc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cxw8ZDUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gmrzs4j20jpqfl675yc.gif" alt="That's a wrap"&gt;&lt;/a&gt;&lt;br&gt;
Apart from these, there are thousands of VsCode extensions available freely on the marketplace and new ones are always being added. &lt;br&gt;
What are some of the extensions you guys recommend other than these? Comment down below and let everyone know...&lt;br&gt;
ThankYou.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extensions</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cloud DevJam Offer Free Google Cloud Certification for IT Professionals</title>
      <author>Sooraj S</author>
      <pubDate>Tue, 20 Jul 2021 09:58:19 +0000</pubDate>
      <link>https://dev.to/soorajs98/cloud-devjam-offer-free-google-cloud-certification-for-it-professionals-32n4</link>
      <guid>https://dev.to/soorajs98/cloud-devjam-offer-free-google-cloud-certification-for-it-professionals-32n4</guid>
      <description>&lt;p&gt;Cloud DevJam is a program exclusively designed for enterprise IT professionals to help kickstart your journey on the Google Cloud Platform. Choose the learning path based on your area of interest, and along the way, compete with your peers, showcase your skills and earn exciting prizes.&lt;/p&gt;

&lt;p&gt;link : &lt;a href="https://tinyurl.com/y589m6rf"&gt;https://tinyurl.com/y589m6rf&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>cloud</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>GDAL on Amazon Linux</title>
      <author>Ayrton</author>
      <pubDate>Tue, 20 Jul 2021 09:46:30 +0000</pubDate>
      <link>https://dev.to/simerca/gdal-on-amazon-linux-21e8</link>
      <guid>https://dev.to/simerca/gdal-on-amazon-linux-21e8</guid>
      <description>&lt;p&gt;Install GDAL on Amazon Linux (Centos)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;yum &lt;span class="nt"&gt;-y&lt;/span&gt; update
&lt;span class="nb"&gt;sudo &lt;/span&gt;yum-config-manager &lt;span class="nt"&gt;--enable&lt;/span&gt; epel
&lt;span class="nb"&gt;sudo &lt;/span&gt;yum &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nb"&gt;install &lt;/span&gt;make automake gcc gcc-c++ libcurl-devel proj-devel geos-devel
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
curl &lt;span class="nt"&gt;-L&lt;/span&gt; http://download.osgeo.org/gdal/2.0.0/gdal-2.0.0.tar.gz | &lt;span class="nb"&gt;tar &lt;/span&gt;zxf -
&lt;span class="nb"&gt;cd &lt;/span&gt;gdal-2.0.0/
./configure &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local &lt;span class="nt"&gt;--without-python&lt;/span&gt;
make &lt;span class="nt"&gt;-j4&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;make &lt;span class="nb"&gt;install
cd&lt;/span&gt; /usr/local
&lt;span class="nb"&gt;tar &lt;/span&gt;zcvf ~/gdal-2.0.0-amz1.tar.gz &lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>gdal</category>
      <category>weather</category>
    </item>
    <item>
      <title>CXXGraph Library</title>
      <author>ZigRazor</author>
      <pubDate>Tue, 20 Jul 2021 09:26:54 +0000</pubDate>
      <link>https://dev.to/zigrazor/cxxgraph-library-5fgp</link>
      <guid>https://dev.to/zigrazor/cxxgraph-library-5fgp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cxxgraph"&gt;
  &lt;/a&gt;
  CXXGraph
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ZigRazor"&gt;
        ZigRazor
      &lt;/a&gt; / &lt;a href="https://github.com/ZigRazor/CXXGraph"&gt;
        CXXGraph
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Header-Only C++ Library for Graph Representation and Algorithms
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ZigRazor/CXXGraph/blob/master/Icon.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--om3usTQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZigRazor/CXXGraph/raw/master/Icon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
CXXGraph&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/ZigRazor/CXXGraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e0b9841f69ef29cc485b3d302097010f2d296ed1dde60f3adac4ba71370dcd04/68747470733a2f2f636f6465636f762e696f2f67682f5a696752617a6f722f43585847726170682f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d37373341513248395251" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://www.codefactor.io/repository/github/zigrazor/cxxgraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c66e00601b49f804758f834a946e1329891101b719d307d83d5566b5701a982/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a696772617a6f722f63787867726170682f6261646765" alt="CodeFactor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a5f922a2d34eec75f084349c6c747c69d94eccd0935dc93e295a4a686d1c4564/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5a696752617a6f722f43585847726170682e737667" alt="GitHub license"&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/releases/"&gt;&lt;img src="https://camo.githubusercontent.com/e3a3bede7aca95abde3fcdbf4645750e7da6aa728bdbd9cd655771c9a244d670/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f5a696752617a6f722f43585847726170682e737667" alt="GitHub release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Alerts"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Grade"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57a85d2ce2ebfa08308aa0e27c14e3e668b0075ece44e2d030a4298c089c85e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d472b2b372e332e302d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d28ad01b651a380285f9c75dea25963780875fcea989db81cf85ef6a29adc048/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72657175697265642d432b2b31372d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e17b5a84de0de988ba21d8a70cd9bec1e3ef9c33bc75be3ec44c1cbff4b73604/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d434d616b65332e392d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae88698a90d8466f4372f695b517d9a65fc5b3f70cb781531c2074876047c846/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c642d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/35a3866fb1a06659337b8fe3e8bfb6ff6705c702e1fae78d400d47217b00b766/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f556e6974546573742d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#cxxgraph"&gt;CXXGraph&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#algorithm-explanation"&gt;Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#dijkstra"&gt;Dijkstra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#dial"&gt;Dial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#bfs"&gt;BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#dfs"&gt;DFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#cycle-detection"&gt;Cycle Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#partition-algorithm-explanation"&gt;Partition Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#vertex-cut"&gt;Vertex-Cut&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#greedy-vertex-cut"&gt;Greedy Vertex-Cut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#classes-explanation"&gt;Classes Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#unit-test-execution"&gt;Unit-Test Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#how-to-compile"&gt;How to Compile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#how-to-run"&gt;How to Run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#how-to-contribute"&gt;How to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#site"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#support"&gt;Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZigRazor/CXXGraph/master/#we-are-looking-for"&gt;We are Looking for...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CXXGraph&lt;/strong&gt; is a small library, header only, that manages the Graph and it's algorithms in &lt;strong&gt;C++&lt;/strong&gt;. In other words a "Comprehensive C++ Graph Library".&lt;/p&gt;
&lt;h2&gt;
Algorithm Explanation&lt;/h2&gt;
&lt;h4&gt;
Dijkstra&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow"&gt;Graph Dijkstras Shortest Path Algorithm(Dijkstra's Shortest Path)&lt;/a&gt;
&lt;strong&gt;Dijkstra's Algorithm&lt;/strong&gt; is used to find the shortest path from a source node to all other reachable nodes in the graph. The algorithm initially assumes all the nodes are unreachable from the given source node so we mark the distances of all nodes as infinity
(infinity) from source node (INF / infinity denotes unable to reach).&lt;/p&gt;
&lt;h4&gt;
Dial&lt;/h4&gt;
&lt;p&gt;Dial specialization of dijkstra’s algorithm.&lt;/p&gt;
&lt;p&gt;When edge…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ZigRazor/CXXGraph"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#cxxgraph"&gt;CXXGraph&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#algorithm-explanation"&gt;Algorithm Explanation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#dijkstra"&gt;Dijkstra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dial"&gt;Dial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bfs"&gt;BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dfs"&gt;DFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycle-detection"&gt;Cycle Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#partition-algorithm-explanation"&gt;Partition Algorithm Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#vertex-cut"&gt;Vertex-Cut&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#greedy-vertex-cut"&gt;Greedy Vertex-Cut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#classes-explanation"&gt;Classes Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#unit-test-execution"&gt;Unit-Test Execution&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-compile"&gt;How to Compile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-run"&gt;How to Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-contribute"&gt;How to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#site"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#support"&gt;Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#we-are-looking-for"&gt;We are Looking for...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CXXGraph&lt;/strong&gt; is a small library, header only, that manages the Graph and it's algorithms in &lt;strong&gt;C++&lt;/strong&gt;. In other words a "Comprehensive C++ Graph Library".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithm-explanation"&gt;
  &lt;/a&gt;
  Algorithm Explanation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dijkstra"&gt;
  &lt;/a&gt;
  Dijkstra
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Graph Dijkstras Shortest Path Algorithm(Dijkstra's Shortest Path)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Dijkstra's Algorithm&lt;/strong&gt; is used to find the shortest path from a source node to all other reachable nodes in the graph. The algorithm initially assumes all the nodes are unreachable from the given source node so we mark the distances of all nodes as infinity.&lt;br&gt;
(infinity) from source node (INF / infinity denotes unable to reach).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dial"&gt;
  &lt;/a&gt;
  Dial
&lt;/h3&gt;

&lt;p&gt;Dial specialization of dijkstra’s algorithm.&lt;/p&gt;

&lt;p&gt;When edge weights are small integers (bounded by a parameter &lt;em&gt;C&lt;/em&gt;), specialized queues which take advantage of this fact can be used to speed up Dijkstra's algorithm. The first algorithm of this type was Dial's algorithm (Dial 1969) for graphs with positive integer edge weights, which uses a bucket queue to obtain a running time&lt;br&gt;
&lt;em&gt;O(|E|+|V|C)&lt;/em&gt;.(&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Specialized_variants"&gt;source wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Below is complete algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintains some buckets, numbered 0, 1, 2,…,wV.&lt;/li&gt;
&lt;li&gt;Bucket k contains all temporarily labeled nodes with distance equal to k.&lt;/li&gt;
&lt;li&gt;Nodes in each bucket are represented by list of vertices.&lt;/li&gt;
&lt;li&gt;Buckets 0, 1, 2,..wV are checked sequentially until the first non-empty bucket is found. Each node contained in the first non-empty bucket has the minimum distance label by definition.&lt;/li&gt;
&lt;li&gt;One by one, these nodes with minimum distance label are permanently labeled and deleted from the bucket during the scanning process.&lt;/li&gt;
&lt;li&gt;Thus operations involving vertex include:

&lt;ul&gt;
&lt;li&gt;Checking if a bucket is empty&lt;/li&gt;
&lt;li&gt;Adding a vertex to a bucket&lt;/li&gt;
&lt;li&gt;Deleting a vertex from a bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The position of a temporarily labeled vertex in the buckets is updated accordingly when the distance label of a vertex changes.&lt;/li&gt;
&lt;li&gt;Process repeated until all vertices are permanently labeled (or distances of all vertices are finalized).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this &lt;a href="https://ocw.mit.edu/courses/sloan-school-of-management/15-082j-network-optimization-fall-2010/animations/MIT15_082JF10_av07.pdf"&gt;link&lt;/a&gt; you can find a step-by-step illustrations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bfs"&gt;
  &lt;/a&gt;
  BFS
&lt;/h3&gt;

&lt;p&gt;(Breadth First Search)&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;Breadth First Search Algorithm(Breadth First Search)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Breadth First Search&lt;/strong&gt;, also quoted as &lt;strong&gt;BFS&lt;/strong&gt;, is a Graph Traversal Algorithm. Time Complexity O(|V| + |E|) where V are the number of vertices and E are the number of edges in the graph.&lt;br&gt;
Applications of Breadth First Search are :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finding shortest path between two vertices say u and v, with path length measured by number of edges (an advantage over depth first search algorithm)&lt;/li&gt;
&lt;li&gt;Ford-Fulkerson Method for computing the maximum flow in a flow network.&lt;/li&gt;
&lt;li&gt;Testing bipartiteness of a graph.&lt;/li&gt;
&lt;li&gt;Cheney's Algorithm, Copying garbage collection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And there are many more...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dfs"&gt;
  &lt;/a&gt;
  DFS
&lt;/h3&gt;

&lt;p&gt;(Depth First Search)&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Depth-first_search"&gt;Depth First Search Algorithm (Depth First Search)&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Depth First Search&lt;/strong&gt;, also quoted as &lt;strong&gt;DFS&lt;/strong&gt;, is a Graph Traversal Algorithm. Time Complexity O(|V| + |E|) where V is number of vertices and E is number of edges in graph.&lt;br&gt;
Application of Depth First Search are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finding connected components&lt;/li&gt;
&lt;li&gt;Finding 2-(edge or vertex)-connected components.&lt;/li&gt;
&lt;li&gt;Finding 3-(edge or vertex)-connected components.&lt;/li&gt;
&lt;li&gt;Finding the bridges of a graph.&lt;/li&gt;
&lt;li&gt;Generating words in order to plot the limit set of a group.&lt;/li&gt;
&lt;li&gt;Finding strongly connected components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And there are many more...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cycle-detection"&gt;
  &lt;/a&gt;
  Cycle Detection
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Cycle_(graph_theory)"&gt;Cycle (graph theory)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The existence of a cycle in directed and undirected graphs can be determined by whether depth-first search (DFS) finds an edge that points to an ancestor of the current vertex (it contains a back edge). All the back edges which DFS skips over are part of cycles. In an undirected graph, the edge to the parent of a node should not be counted as a back edge, but finding any other already visited vertex will indicate a back edge. In the case of undirected graphs, only O(n) time is required to find a cycle in an n-vertex graph, since at most n − 1 edges can be tree edges.&lt;/p&gt;

&lt;p&gt;Many topological sorting algorithms will detect cycles too, since those are obstacles for topological order to exist. Also, if a directed graph has been divided into strongly connected components, cycles only exist within the components and not between them, since cycles are strongly connected.&lt;/p&gt;

&lt;p&gt;For directed graphs, distributed message based algorithms can be used. These algorithms rely on the idea that a message sent by a vertex in a cycle will come back to itself.    Distributed cycle detection algorithms are useful for processing large-scale graphs using a distributed graph processing system on a computer cluster (or supercomputer).&lt;/p&gt;

&lt;p&gt;Applications of cycle detection include the use of wait-for graphs to detect deadlocks in concurrent systems.&lt;/p&gt;

&lt;p&gt;WORK IN PROGRESS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#partition-algorithm-explanation"&gt;
  &lt;/a&gt;
  Partition Algorithm Explanation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vertexcut"&gt;
  &lt;/a&gt;
  Vertex-Cut
&lt;/h3&gt;

&lt;p&gt;A vertex-cut partitioning divides edges of a graph into equal size partitions. The vertices that hold the endpoints of an edge are also placed in the same partition as the edge itself. However, the vertices are not unique across partitions and might have to be replicated (cut), due to the distribution of their edge across different partitions.&lt;/p&gt;

&lt;p&gt;Replication factor quantifies how many vertexes are replicated over computers compared with the the number of vertexes of the original input graph.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#greedy-vertexcut"&gt;
  &lt;/a&gt;
  Greedy Vertex-Cut
&lt;/h4&gt;

&lt;p&gt;This Algorithm is a simple vertex-cut in Round-Robin fashion.&lt;br&gt;
It takes the original graph edges and assign them to the partitions, dividing it in equal(or similar) size. This algorithm does not take care of optimization in vertex replication ( Replication Factor) but only balance the edge in the partitions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classes-explanation"&gt;
  &lt;/a&gt;
  Classes Explanation
&lt;/h2&gt;

&lt;p&gt;The Classes Explanation can be found in the &lt;a href="https://rawcdn.githack.com/ZigRazor/CXXGraph/master/docs/html/index.html"&gt;Doxygen Documentation&lt;/a&gt;, in the &lt;a href="https://rawcdn.githack.com/ZigRazor/CXXGraph/master/docs/html/classes.html"&gt;Classes Section&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;The minimun C++ standard required is &lt;strong&gt;C++17&lt;/strong&gt; and a G++ compiler version greater than 7.3.0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;The use of the library is very simple, &lt;strong&gt;just put the header file where you need!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unittest-execution"&gt;
  &lt;/a&gt;
  Unit-Test Execution
&lt;/h2&gt;

&lt;p&gt;The Unit-Test required the CMake version greater than 3.9 and the &lt;strong&gt;google test&lt;/strong&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-compile"&gt;
  &lt;/a&gt;
  How to Compile
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  If not exist create a directory "build" under the base directory.&lt;/li&gt;
&lt;li&gt;  Enter the directory&lt;/li&gt;
&lt;li&gt;  execute command &lt;code&gt;cmake ..&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  if all is succesfull execute the command &lt;code&gt;make&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run"&gt;
  &lt;/a&gt;
  How to Run
&lt;/h2&gt;

&lt;p&gt;After the compilation, you can run the executable that is under the "build" directory with the name "test_exe", with the simple command &lt;code&gt;./test_exe&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Work in Progess&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-contribute"&gt;
  &lt;/a&gt;
  How to contribute
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://GitHub.com/ZigRazor/CXXGraph/graphs/contributors/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dq81RR9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/contributors/ZigRazor/CXXGraph.svg" alt="GitHub contributors"&gt;&lt;/a&gt;&lt;br&gt;
If you want give your support you can create a &lt;strong&gt;&lt;em&gt;pull request&lt;/em&gt;&lt;/strong&gt;   &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/pull/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RofOFRnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/issues-pr/ZigRazor/CXXGraph.svg" alt="GitHub pull-requests"&gt;&lt;/a&gt; or report an &lt;strong&gt;&lt;em&gt;issue&lt;/em&gt;&lt;/strong&gt;  &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/issues/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kaOmdxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/issues/ZigRazor/CXXGraph.svg" alt="GitHub issues"&gt;&lt;/a&gt;.&lt;br&gt;
If you want to change the code, or fix issue, or implement a new feature please read our &lt;a href="https://github.com/ZigRazor/CXXGraph/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#site"&gt;
  &lt;/a&gt;
  Site
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://zigrazor.github.io/CXXGraph/"&gt;CXXGraph Site&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h2&gt;

&lt;p&gt;E-Mail : &lt;a href="mailto:zigrazor@gmail.com"&gt;zigrazor@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ZigRazor"&gt;GitHub Profile&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnGVhfP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gpvc.arturio.dev/ZigRazor" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnGVhfP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gpvc.arturio.dev/ZigRazor" alt="Profile views"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgAgHXu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3DZigRazor%26show_icons%3Dtrue%26title_color%3Dfff%26icon_color%3D79ff97%26text_color%3D9f9f9f%26bg_color%3D151515" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgAgHXu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3DZigRazor%26show_icons%3Dtrue%26title_color%3Dfff%26icon_color%3D79ff97%26text_color%3D9f9f9f%26bg_color%3D151515" alt="ZigRazor's github stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;To support me just add &lt;strong&gt;&lt;em&gt;Star&lt;/em&gt;&lt;/strong&gt; the project  &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/stargazers/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_M7Fw9NB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/ZigRazor/CXXGraph.svg%3Fstyle%3Dsocial%26label%3DStar%26maxAge%3D2592000" alt="GitHub stars"&gt;&lt;/a&gt; or &lt;strong&gt;&lt;em&gt;follow me&lt;/em&gt;&lt;/strong&gt;  &lt;a href="https://github.com/ZigRazor?tab=followers"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGwNqcxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/followers/ZigRazor.svg%3Fstyle%3Dsocial%26label%3DFollow%26maxAge%3D2592000" alt="GitHub followers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get updated &lt;strong&gt;&lt;em&gt;watch&lt;/em&gt;&lt;/strong&gt; the project  &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/watchers/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z21lDkNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/watchers/ZigRazor/CXXGraph.svg%3Fstyle%3Dsocial%26label%3DWatch%26maxAge%3D2592000" alt="GitHub watchers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;We are referenced by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/p-ranav/awesome-hpp"&gt;awesome-hpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Thanks to the community of &lt;a href="https://github.com/TheAlgorithms"&gt;TheAlgorithms&lt;/a&gt; for some algorithms ispiration.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://www.geeksforgeeks.org/"&gt;GeeksForGeeks&lt;/a&gt; for some algorithms inspiration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-are-looking-for"&gt;
  &lt;/a&gt;
  We are Looking for...
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We are looking for developers and committer&lt;/strong&gt;, also at &lt;em&gt;first experience&lt;/em&gt;, we will guide you step by step to the open-source world!&lt;br&gt;
If you are interested, please contact us at &lt;a href="mailto:zigrazor@gmail.com"&gt;zigrazor@gmail.com&lt;/a&gt; or contribute to this project. We are waiting for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2AxIriTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfl8aikkpzvs29v1kuhh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2AxIriTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfl8aikkpzvs29v1kuhh.png" alt="CXXGraph"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>contributorswanted</category>
      <category>githunt</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Learn the useReducer hook in 5 minutes with simple example [video]</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 20 Jul 2021 08:49:42 +0000</pubDate>
      <link>https://dev.to/thenerdydev/learn-the-usereducer-hook-in-5-minutes-with-simple-example-video-4hjn</link>
      <guid>https://dev.to/thenerdydev/learn-the-usereducer-hook-in-5-minutes-with-simple-example-video-4hjn</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us understand the &lt;strong&gt;useReducer hook in React.js&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8F-code-for-the-video"&gt;
  &lt;/a&gt;
  ✏ &lt;strong&gt;CODE&lt;/strong&gt; for the video:
&lt;/h1&gt;

&lt;p&gt;Let us understand the first code down below. Here we are using the &lt;strong&gt;useReducer&lt;/strong&gt; hook to setup a state for our counter with a default initial value of 0 to begin with. Also we have our &lt;strong&gt;counterReducer&lt;/strong&gt; function, which by default gets the state implicitly passed to it by React and the second argument is the value, so something that we dispatch from our two buttons. &lt;/p&gt;

&lt;p&gt;So we have two buttons, one for &lt;strong&gt;INCREMENT&lt;/strong&gt; and other one for &lt;strong&gt;DECREMENT&lt;/strong&gt;. So the first button &lt;em&gt;increments&lt;/em&gt; the value of counter by 1 whereas the second button &lt;em&gt;decrements&lt;/em&gt; the value of counter by 1.&lt;br&gt;
Now we can improve this by write a more &lt;strong&gt;declarative&lt;/strong&gt; code to achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decrement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here is the second code snippet. Here instead of &lt;em&gt;dispatching a value we are dispatching an action with the type property&lt;/em&gt;. So we are just declaring and hence &lt;strong&gt;decoupling&lt;/strong&gt; our state updating logic from the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decrement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReducerCounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So for &lt;strong&gt;detailed&lt;/strong&gt; understanding, please check the complete video that explains the above example. &lt;/p&gt;

&lt;p&gt;📺 &lt;strong&gt;VIDEO&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AAfZjoE2eCk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading !&lt;/p&gt;

&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
👉🏻 Follow me on Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt; &lt;br&gt;
👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A First Look at How To Set Up React 18 Alpha with Snowpack and Vercel</title>
      <author>deji adesoga</author>
      <pubDate>Tue, 20 Jul 2021 08:01:19 +0000</pubDate>
      <link>https://dev.to/desoga/a-first-look-at-how-to-set-up-react-18-alpha-with-snowpack-and-vercel-3fd5</link>
      <guid>https://dev.to/desoga/a-first-look-at-how-to-set-up-react-18-alpha-with-snowpack-and-vercel-3fd5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#if-you-prefer-watching-a-video"&gt;
  &lt;/a&gt;
  If you prefer watching a video...
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#be-sure-to-subscribe-to-the-official-code-angle-youtube-channel-for-more-videos"&gt;
  &lt;/a&gt;
  Be sure to Subscribe to the Official &lt;a href="https://www.youtube.com/c/TheCodeAngle/videos"&gt;Code Angle&lt;/a&gt; Youtube Channel for more videos.
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=enqRAjGox2Q" title="How to setup and Deploy React 18 Alpha using Snowpack and Vercel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-X7nJ0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626749625/react18.png" alt="Alternate Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Talk is cheap. Show me the code&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;― Linus Torvalds&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Installation and Setup of React using Snowpack&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Folder Restructure&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;code overview&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Running the app&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Deployment Process Using Vercel&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Earlier this month the React Team released some updates concerning the release of React 18. These updates include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Work has begun on the React 18 release, which will be the next major version.&lt;/li&gt;
&lt;li&gt;  A working group has been created to prepare the community for the gradual adoption of new features.&lt;/li&gt;
&lt;li&gt;  An Alpha version has already been published for library authors to try and provide valuable feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purpose of this tutorial is to set up the React 18 Alpha version using SnowPack, a lightning-fast frontend build tool, designed for the modern web. Then we deploy on &lt;strong&gt;Vercel&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-and-setup-of-react-18-alpha-using-snowpack"&gt;
  &lt;/a&gt;
  Installation and Setup of React 18 Alpha using Snowpack
&lt;/h2&gt;

&lt;p&gt;First, you need to have &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; installed, once that is done then you can now install &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;. You can use the command below to install Snowpack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install snowpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is installed, then you can head to a directory where you want to put your new project.&lt;/p&gt;

&lt;p&gt;Now run the following command in your terminal to create a new directory called &lt;strong&gt;&lt;em&gt;react-snowpack.&lt;/em&gt;&lt;/strong&gt; This will automatically generate a minimal boilerplate template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-snowpack-app react-snowpack --template @snowpack/app-template-minimal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now head to the new directory with the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-snowpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once inside this directory, we can finally install the React 18 Alpha version by running the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react@alpha react-dom@alpha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, you can check your package.json file to confirm &lt;strong&gt;&lt;em&gt;React 18 Alpha&lt;/em&gt;&lt;/strong&gt; has been installed. It should look something like what we have below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.0.0-alpha-cb8afda18-20210708"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.0.0-alpha-cb8afda18-20210708"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#folder-restructure"&gt;
  &lt;/a&gt;
  Folder Restructure
&lt;/h2&gt;

&lt;p&gt;React makes use of a templating language called &lt;strong&gt;JSX&lt;/strong&gt;. &lt;strong&gt;JSX&lt;/strong&gt; stands for JavaScript XML. It is an inline markup that looks like &lt;strong&gt;HTML&lt;/strong&gt; that gets transformed to &lt;strong&gt;JavaScript&lt;/strong&gt; at runtime*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;The First step towards the folder restructure is to rename the &lt;strong&gt;&lt;em&gt;index.js&lt;/em&gt;&lt;/strong&gt; file with a &lt;strong&gt;jsx&lt;/strong&gt; extension like so, &lt;strong&gt;&lt;em&gt;index.jsx.&lt;/em&gt;&lt;/strong&gt; Doing this will allow &lt;strong&gt;&lt;em&gt;Snowpack&lt;/em&gt;&lt;/strong&gt; to know that we are running a React project.&lt;/p&gt;

&lt;p&gt;Next up we create an &lt;strong&gt;src&lt;/strong&gt; and &lt;strong&gt;public&lt;/strong&gt; folder. Once this is done, we move the &lt;strong&gt;&lt;em&gt;index.jsx&lt;/em&gt;&lt;/strong&gt; file inside the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder, still inside the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder, we will create a new file called &lt;strong&gt;&lt;em&gt;app.jsx&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
Both the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;index.css&lt;/em&gt;&lt;/strong&gt; file will also be moved into the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;In the end, we should have the folder structure below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; public
  &amp;gt; index.css
  &amp;gt; index.html
&amp;gt; src
  &amp;gt; App.jsx
  &amp;gt; index.jsx
.gitignore
 package-lock.json
 package.json
 snowpack.config.mjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-overview"&gt;
  &lt;/a&gt;
  Code Overview
&lt;/h2&gt;

&lt;p&gt;We are going to have code modification in four files(&lt;strong&gt;&lt;em&gt;index.html, App.jsx, index.jsx and snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt;) before we start up the app and deploy it on Vercel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Starter Snowpack App"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Starter Snowpack App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index.html code, three things have to be noted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt; which we will refer to in the index.jsx file.&lt;/li&gt;
&lt;li&gt;  In the script tag, we have a type called module to enable snowpack to know we will be making use of ES6 syntax.&lt;/li&gt;
&lt;li&gt;  Also in the script tag, we have an src attribute to signify the path of our deployment directory which will be configured in the &lt;strong&gt;&lt;em&gt;snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#appjsx"&gt;
  &lt;/a&gt;
  App.jsx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
          &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://res.cloudinary.com/dz4tt9omp/image/upload/v1625528354/react.png"&lt;/span&gt;
          &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React 18 Alpha Setup Deployed on Vercel with SnowPack&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above in the &lt;strong&gt;&lt;em&gt;app.jsx&lt;/em&gt;&lt;/strong&gt; file, we generate a simple &lt;strong&gt;&lt;em&gt;React&lt;/em&gt;&lt;/strong&gt; boilerplate template using a functional component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjsx"&gt;
  &lt;/a&gt;
  index.jsx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;index.jsx&lt;/em&gt;&lt;/strong&gt; file, we did three things to enable us startup the app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, we import &lt;strong&gt;React, ReactDOM&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;App.jsx&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Then we created a variable to get the id in the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Finally we made use of the new createRoot API in &lt;strong&gt;React 18&lt;/strong&gt; to render the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#snowpackconfigmjs"&gt;
  &lt;/a&gt;
  snowpack.config.mjs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;snowpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;SnowpackUserConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;    &lt;span class="na"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt; ... &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;
  &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt; Enable an SPA Fallback in development: &lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;
    &lt;span class="c1"&gt;// {"match": "routes", "src": ".\*", "dest": "/index.html"},&lt;/span&gt;
  &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="na"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bundle&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;// "bundle": true,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;packageOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;devOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buildOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every Snowpack app makes use of the &lt;strong&gt;&lt;em&gt;snowpack.config.mjs&lt;/em&gt;&lt;/strong&gt; file for any configurations like the deployment process. In this project, we will only edit the mount object by adding the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; key.&lt;/p&gt;

&lt;p&gt;These serve as a pointer to the path where our deployment folder will be built when we run the build command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-application"&gt;
  &lt;/a&gt;
  Running the Application
&lt;/h2&gt;

&lt;p&gt;Now with all our files saved, we can head back to our terminal and run the start command &lt;code&gt;npm run start&lt;/code&gt;, which will produce the page below in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" alt="page preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our &lt;strong&gt;&lt;em&gt;React 18 alpha&lt;/em&gt;&lt;/strong&gt; app is successfully up and running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-process-using-vercel"&gt;
  &lt;/a&gt;
  Deployment Process using Vercel
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vercel enables developers to host websites and web services that deploy instantly and scale automatically all without any configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-Vercel&lt;/strong&gt; Documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first step to take towards deployment is to run the command below at the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a &lt;strong&gt;build&lt;/strong&gt; directory. Inside the &lt;strong&gt;build&lt;/strong&gt; directory is a &lt;strong&gt;&lt;em&gt;dist&lt;/em&gt;&lt;/strong&gt; folder that contains the code we will push to &lt;strong&gt;Vercel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next up we do the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1). Install Vercel &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do this we run the command&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm i -g vercel&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2). Login into Vercel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After installing Vercel globally on your machine. Type &lt;code&gt;vercel&lt;/code&gt; in the terminal. This will prompt you to log into your account if you are not already logged in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3).  Project Setup and Deployment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpyDmCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626647529/react-snoww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpyDmCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626647529/react-snoww.png" alt="prompt terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize the prompt question in the image above, the following questions will be asked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Set up and deploy — &lt;strong&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;(It's a new application).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  Which scope do you want to deploy to? &lt;em&gt;- Select the name of your account.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  Found project "desoga10/snowpack-react". Link to it? - &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; (Because we want to deploy as a different project).*&lt;/li&gt;
&lt;li&gt;  Link to a different existing project? - &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;(Because we are creating a new project).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  What’s your project's name? &lt;em&gt;(react-snoww).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  In which directory is your code created? ./build (It's in the build folder we generated with the &lt;strong&gt;&lt;em&gt;npm run build&lt;/em&gt;&lt;/strong&gt; command).&lt;/li&gt;
&lt;li&gt;   Want to override the settings? &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;(To prevent Vercel from making changes to or default settings ).&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vercel will now build the application, installing all dependencies in the process. When the installation is done, an inspect link will be available in the terminal. With this link, we can access the Vercel dashboard to see our deployed app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MC-GKSna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626648623/vercel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MC-GKSna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626648623/vercel.png" alt="project dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4).  Open the Deployed Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now visit the newly deployed project by clicking on the “visit” button on your dashboard shown in the image above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otrCzH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dz4tt9omp/image/upload/v1626625210/snow.png" alt="live project image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can find the deployed code in my &lt;a href="https://github.com/desoga10/react-snow"&gt;GitHub&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;I create &lt;a href="https://www.youtube.com/TheCodeAngle"&gt;Youtube&lt;/a&gt; tutorials too, make sure to subscribe, thank you.&lt;/p&gt;

</description>
      <category>react</category>
      <category>vercel</category>
      <category>snowpack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I developed my first fullstack (MERN) project!</title>
      <author>Ajithmadhan</author>
      <pubDate>Tue, 20 Jul 2021 08:00:28 +0000</pubDate>
      <link>https://dev.to/ajithmadhan11/how-i-developed-my-first-fullstack-mern-project-39ic</link>
      <guid>https://dev.to/ajithmadhan11/how-i-developed-my-first-fullstack-mern-project-39ic</guid>
      <description>&lt;p&gt;Learning a new Technology is not only watching tutorials and cloning the templates from the tutor's repository, always try to built your own project without sticking to the tutorials &lt;strong&gt;explore and read documentations&lt;/strong&gt;,&lt;strong&gt;Design you own Schemas&lt;/strong&gt;,&lt;strong&gt;Write custom Apis&lt;/strong&gt;,etc... In this blog I will walkthrough my step by step process in developing my first MERN stack project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-amp-design"&gt;
  &lt;/a&gt;
  Plan &amp;amp; Design
&lt;/h2&gt;

&lt;p&gt;Always have a design/plan of the architecture that you have planned to build.In this project I have adopted the MVC architecture and done a initial design of &lt;strong&gt;Models&lt;/strong&gt; , &lt;strong&gt;Controllers&lt;/strong&gt; and even &lt;strong&gt;Routes&lt;/strong&gt; and &lt;strong&gt;middlewares&lt;/strong&gt; for backend. Below is the screenshot of my initial backend design.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adnIr2I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhgei4jguass8wxap1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adnIr2I1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwhgei4jguass8wxap1h.png" alt="MVC design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For frontend,design your VIEW part of the application using any tools like figma ,adobe xd etc...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdQPryd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhcmki2oz9lw3ms8ue6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdQPryd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhcmki2oz9lw3ms8ue6.png" alt="Figma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execute"&gt;
  &lt;/a&gt;
  Execute
&lt;/h3&gt;

&lt;p&gt;I started with writing my schemas for database I used the &lt;strong&gt;Nosql&lt;/strong&gt; db &lt;strong&gt;Mongo&lt;/strong&gt; and I had 4 &lt;strong&gt;MODELS&lt;/strong&gt; in my application.&lt;br&gt;
After that I started an &lt;strong&gt;EXPRESS SERVER&lt;/strong&gt; in localhost and connected my Db with it and once my app is up and running I started with my backend controllers and wrote APIs for my application corresponding to the routes that I designed initially.&lt;br&gt;
My backend File Structure,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBVL6O0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdkv0mpnr9mauule9p0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBVL6O0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdkv0mpnr9mauule9p0n.png" alt="File Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h2&gt;

&lt;p&gt;Side by Side while writing Apis make sure you test them, so that it won't be any problem at last.&lt;br&gt;
I prefer using &lt;strong&gt;Postman&lt;/strong&gt; for testing my Apis&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Pf1uTXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur2wvcvufxxlyfkel1a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Pf1uTXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur2wvcvufxxlyfkel1a4.png" alt="Post man"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-frontend"&gt;
  &lt;/a&gt;
  Designing frontend
&lt;/h2&gt;

&lt;p&gt;Once all backend stuffs are done and tested I moved to frontend.&lt;br&gt;
By referring my figma design I stated to design my frontend using REACT (jsx).For a fresher like me it is not a easy task to design the frontend.I used my &lt;strong&gt;local server&lt;/strong&gt; for my backend and used my custom Apis for the frontend and for state management I used &lt;strong&gt;REDUX&lt;/strong&gt; for checking the Auth status of a user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKKh1N-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmgfc51b896c4h815hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKKh1N-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmgfc51b896c4h815hg.png" alt="frontend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-and-technologies-that-i-used-in-this-project"&gt;
  &lt;/a&gt;
  Tools and Technologies that I used in this project
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt; - Reactjs,Material Ui Redux(state management)&lt;br&gt;
&lt;strong&gt;Backend&lt;/strong&gt; - Nodejs,Expressjs&lt;br&gt;
&lt;strong&gt;Database&lt;/strong&gt; - Mongodb&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt; - Coggle.it , Figma ,Postman ,Robo3T&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Repository link&lt;/strong&gt; - &lt;a href="https://github.com/ajithMadhan11/hashfeed-frontend"&gt;Hashfeed-Frontend&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Backend Repository link&lt;/strong&gt; - &lt;a href="https://github.com/ajithMadhan11/Hashfeed-backend"&gt;Hashfeed-Backend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that's how I developed my first MVP of my app and will be still engaged in this project and will be adding more features to it&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stop-sticking-to-tutorials-and-start-your-own-project-your-learning-curve-will-grow-exponentially"&gt;
  &lt;/a&gt;
  Stop sticking to tutorials and start your own project, your learning curve will grow exponentially
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>mongodb</category>
      <category>express</category>
    </item>
    <item>
      <title>How to debug Node.js using the builtin debugger</title>
      <author>Siddharth</author>
      <pubDate>Tue, 20 Jul 2021 07:35:41 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/debug-nodejs-natively-35ba</link>
      <guid>https://dev.to/siddharthshyniben/debug-nodejs-natively-35ba</guid>
      <description>&lt;p&gt;It's about time you stop &lt;code&gt;console.log&lt;/code&gt;ing to debug code.&lt;br&gt;
Here, I'll show you how to use the builtin Node.js debugger.&lt;/p&gt;

&lt;p&gt;Most of you might be using your IDEs debugger to debug code, but did you know that &lt;strong&gt;Node.js has a built in debugger&lt;/strong&gt;? It's simple, but extremely powerful. Here, I'll show you how to use the builtin debugger.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need to have Node.js installed, obviously. You also need to know JavaScript because you can't debug without writing code.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;p&gt;For this example, we will be debugging this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; NaN&lt;/span&gt;
&lt;span class="c1"&gt;// Why?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been coding for a while, I'm pretty sure you already have spotted the mistake, but just assume that you haven't&lt;/p&gt;

&lt;p&gt;You can copy and paste this code to a new file if you want to follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-with-nodejs"&gt;
  &lt;/a&gt;
  Debugging with Node.js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;You can run the debugger by running &lt;code&gt;node --inspect file.js&lt;/code&gt;. This opens a WebSocket connection to something like &lt;code&gt;ws://127.0.0.1:9229/uuid-here&lt;/code&gt;. Now, clients can connect to this debugger and debug code. You can even build your own clients!&lt;/p&gt;

&lt;p&gt;Node.js has a built in client which we can use by running &lt;br&gt;
&lt;code&gt;node inspect file.js&lt;/code&gt; (notice it's a &lt;em&gt;command&lt;/em&gt;, not an &lt;em&gt;option&lt;/em&gt; now). You can install the latest standalone version of this command by installing &lt;a href="https://github.com/nodejs/node-inspect"&gt;node-inspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;node inspect file.js&lt;/code&gt;, you should get some output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;inspect&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Debugger&lt;/span&gt; &lt;span class="nx"&gt;listening&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:9229/d7d8aec2-819b-411a-abdd-900b6b90dbfc&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;help&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//nodejs.org/en/docs/inspector&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Debugger&lt;/span&gt; &lt;span class="nx"&gt;attached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Break&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get a special debug prompt which is used to run commands. You can check out the &lt;a href="https://nodejs.org/api/debugger.html"&gt;reference&lt;/a&gt;, but I'll show you some commands here.&lt;/p&gt;

&lt;p&gt;These commands are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cont&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;: Continue execution&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;next&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;: Step next&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;step&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;: Step in&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;out&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;: Step out&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pause&lt;/code&gt;: Pause running code (like pause button in Developer Tools)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we can now jump to the next line by typing &lt;code&gt;n&lt;/code&gt; and hitting enter. We'll then get output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1123, 435, 8712, 843&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the debugger has jumped to the next line. If your terminal supports colors, you will see the &lt;code&gt;0&lt;/code&gt; has been highlighted as it is the next step.&lt;/p&gt;

&lt;p&gt;Hit next again. You'll get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;debugging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; 
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the debugger skipped an empty line for us.&lt;/p&gt;

&lt;p&gt;Now, we're reaching the important parts. Let's &lt;code&gt;watch&lt;/code&gt; our important variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;res&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this is an important line, we can &lt;code&gt;step&lt;/code&gt; instead of going to the next line. So type &lt;code&gt;s&lt;/code&gt; and hit enter, and you'll get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nx"&gt;Watchers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;importantNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; 
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see watched variables at the top. &lt;code&gt;res&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; is &lt;code&gt;'1123'&lt;/code&gt;. We can easily understand that &lt;code&gt;number + string = NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That was a pretty basic introduction to debugging Node.js. There's much more to learn. You can check out the &lt;a href="https://nodejs.org/api/debugger.html"&gt;docs&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;See you soon 👋!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>debugging</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CSS + BEM Methodology = 🤘 </title>
      <author>Mohit Tanwani⚡</author>
      <pubDate>Tue, 20 Jul 2021 07:33:24 +0000</pubDate>
      <link>https://dev.to/tanwanimohit/css-bem-methodology-690</link>
      <guid>https://dev.to/tanwanimohit/css-bem-methodology-690</guid>
      <description>&lt;p&gt;We all follow naming conventions in programming languages, don't we? Now, what about CSS? Is there any need of naming convention in that? Of course! Maybe not in a small project, but when you start working on large projects you should organize your code properly so that anyone can easily get the gist of the functionality by just looking into the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Great codebases don't need comments. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bem"&gt;
  &lt;/a&gt;
  What is BEM?
&lt;/h2&gt;

&lt;p&gt;BEM stands for Block Element Modifier. It is a Methodology that every web developer should follow. This makes development easy and enforces re-usability.&lt;br&gt;
Enough of the theory Let's understand this by an example 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kVp4Tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerr6bcmhu28kmbgzqii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kVp4Tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gerr6bcmhu28kmbgzqii.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here We can say,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Form = Block(An Independent meaningful entity)&lt;/li&gt;
&lt;li&gt;Input, Link, Button = Element(Part of Black, Which has no standalone meaning)&lt;/li&gt;
&lt;li&gt;Button types (primary/secondary) = Modifier(Represent state of Block or Element.) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#bem-methodology"&gt;
  &lt;/a&gt;
  BEM Methodology
&lt;/h2&gt;

&lt;p&gt;Let's continue with the above example. This is how you will name your CCS classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#for-block"&gt;
  &lt;/a&gt;
  For Block:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form {
   // Your CSS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for-element"&gt;
  &lt;/a&gt;
  For Element:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form__input {
   // Your CSS
}
.form__button {
   // Your CSS
}
.form__link {
   // Your CSS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for-modifier"&gt;
  &lt;/a&gt;
  For Modifier:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form__button--primary {
   background: "blue";
}
.form__button--secondary {
   background: "green";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE: When using modifiers you will put all the common styles in &lt;code&gt;form__button&lt;/code&gt; so that you don't repeat them again&lt;/strong&gt;&lt;br&gt;
And here is how your HTML will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form class="form"&amp;gt;
   &amp;lt;input type="email" class="form__input" placeholder="Email"&amp;gt;
   &amp;lt;input type="email" class="form__input" placeholder="Email"&amp;gt;
   &amp;lt;button class="form__button form__button--primary"&amp;gt;Login&amp;lt;/button&amp;gt;
   &amp;lt;button class="form__button form__button--secondary"&amp;gt;Signup&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! I know it looks like an overhead but trusts me it will help you a lot in many different ways.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Host your images on Google Drive for free [Step By Step].</title>
      <author>Narottam04</author>
      <pubDate>Tue, 20 Jul 2021 07:25:03 +0000</pubDate>
      <link>https://dev.to/narottam04/host-your-images-on-google-drive-for-free-step-by-step-25m1</link>
      <guid>https://dev.to/narottam04/host-your-images-on-google-drive-for-free-step-by-step-25m1</guid>
      <description>&lt;p&gt;When you want to share a photo or gallery with friends, family, or even on the entire internet, an image hosting site is the best way to upload, store, and share your files. However, there are many image hosting sites, all with different features, some are free and some are paid, with free ones there is a risk of security and with paid ones, the problem is you have to pay money monthly. In this article, we will be hosting our images on good old trustable Google Drive.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif" alt="https://media.giphy.com/media/5wWf7GMbT1ZUGTDdTqM/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-1-open-google-drive-and-get-the-link-of-the-image"&gt;
  &lt;/a&gt;
  Step 1: Open Google drive and get the link of the image.
&lt;/h2&gt;



&lt;p&gt;First, log into your Google account and open Google Drive. Navigate to the image you want to host&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgXwvKjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1xKUD3LuvNQfQ89E1VqpDh9-qVUSmHDoy" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgXwvKjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1xKUD3LuvNQfQ89E1VqpDh9-qVUSmHDoy" alt="google drive" title="google drive"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;As an eg. I will be hosting my Instagram post 2.png which is stored on my google drive.&lt;/p&gt;



&lt;p&gt;PS: if you want to learn more about web development consider following my Instagram @_webdrip&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-2-get-the-sharable-link"&gt;
  &lt;/a&gt;
  Step 2: Get the sharable link
&lt;/h2&gt;



&lt;p&gt;Right-click on the image you want to host, and click on &lt;strong&gt;'Get Link'&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfbiBvCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZJkm9liESDRwlpRDCh7Xg0spseTS7Nx8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfbiBvCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZJkm9liESDRwlpRDCh7Xg0spseTS7Nx8" alt="drive" title="drive"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Change the &lt;strong&gt;'Restricted'&lt;/strong&gt; option to &lt;strong&gt;'Anyone with link'.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j62CXLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1rH5_jwOz3qdoLTX8dkzTTmeaLPcU6yJn" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j62CXLBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1rH5_jwOz3qdoLTX8dkzTTmeaLPcU6yJn" alt="link" title="link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-3-copy-the-link"&gt;
  &lt;/a&gt;
  Step 3: Copy the link
&lt;/h2&gt;



&lt;p&gt;Copy the link by clicking &lt;strong&gt;'Copy Link&lt;/strong&gt;' button or by selecting the link and pressing &lt;strong&gt;'CTRL + C'&lt;/strong&gt; on your keyboard&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--50h5_bmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1nzH17fhEPk9r0Rd4u7w8rpmra-HZeKS_" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--50h5_bmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1nzH17fhEPk9r0Rd4u7w8rpmra-HZeKS_" alt="copy link" title="copy link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-4-go-to%C2%A0hostdriveimagepagesdev"&gt;
  &lt;/a&gt;
  Step 4: Go to &lt;a href="https://hostdriveimage.pages.dev/"&gt;hostdriveimage.pages.dev&lt;/a&gt;
&lt;/h2&gt;



&lt;p&gt;Now go to this website &lt;a href="https://hostdriveimage.pages.dev/"&gt;https://hostdriveimage.pages.dev/&lt;/a&gt; and paste the image link that you have copied from the drive and click on the 'generate' button.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3-ZGRm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DStz-HiSiTA2YlLVelcDpJxwwcIdTdnA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3-ZGRm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DStz-HiSiTA2YlLVelcDpJxwwcIdTdnA" alt="website" title="website"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-check-if-it-is-working"&gt;
  &lt;/a&gt;
  Step 5: Check if it is working
&lt;/h2&gt;



&lt;p&gt;Voila! if you have followed the steps properly your image will be hosted and will be live to be shared on the internet or with your friends.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eI0CBbBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DYxzoxX8vsWonFmu7rsLlMXaivB1vqSI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eI0CBbBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1DYxzoxX8vsWonFmu7rsLlMXaivB1vqSI" alt="final link" title="final link"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;To check the image I have hosted click on this link: &lt;a href="https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa"&gt;&lt;/a&gt;&lt;a href="https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa"&gt;https://drive.google.com/uc?id=1MVHhp5WBHwhR1k-S0V52lajFs3Q4GPaa&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTIRCC_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1f04-CXNoX3kXMU4LmH7pBn9LTqnKk3M9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTIRCC_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1f04-CXNoX3kXMU4LmH7pBn9LTqnKk3M9" alt="hosted image" title="hosted image"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you any doubts feel free to comment down below, would love to help you.&lt;/p&gt;



&lt;p&gt;PS: All the images on my blog website &lt;a href="https://blog.webdrip.in/"&gt;https://blog.webdrip.in/&lt;/a&gt; are hosted on google drive, Do give a visit!&lt;/p&gt;

</description>
      <category>tutorial</category>
    </item>
    <item>
      <title>How do we browse on internet? </title>
      <author>Narottam04</author>
      <pubDate>Tue, 20 Jul 2021 07:20:11 +0000</pubDate>
      <link>https://dev.to/narottam04/how-do-we-browse-on-internet-1234</link>
      <guid>https://dev.to/narottam04/how-do-we-browse-on-internet-1234</guid>
      <description>&lt;p&gt;When you type &lt;a href="http://youtube.com/"&gt;youtube.com&lt;/a&gt; into your browser (Chrome, Internet Explorer, Firefox, etc.), the browser makes an HTTP request. HTTP stands for HyperText Transfer Protocol, it is responsible for communication between web servers and clients.&lt;/p&gt;



&lt;p&gt;HTTP is a protocol( a set of rules or procedures for transmitting data between electronic devices) for browsers and servers to talk to each other. Humans, too, have protocols for talking to each other. Consider that when you meet someone, you often greet him or her with a handshake. Browsers and servers also greet and acknowledge each other according to HTTP.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" alt="https://media.giphy.com/media/2HtWpp60NQ9CU/giphy.gif" title="Shake Hands"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Whenever you submit a form or click a button on the website you are using HTTP and going through the request and response cycle. Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages sent by the client, usually a Web browser, are called requests, and the messages sent by the server as an answer are called responses.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVajEO4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1Vy4KDMqoGd_Dn8X2087JFOxNDqhJJQaq" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVajEO4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1Vy4KDMqoGd_Dn8X2087JFOxNDqhJJQaq" alt="how we search on internet" title="browser search"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;HTTP is stateless, which means that every request is completely independent eg. when you reload the page on the website or navigate to different pages on the website it doesn't remember anything about previous requests/response cycle, you can visualize this as transactions.&lt;/p&gt;



&lt;p&gt;We can use local storage, cookies, sessions to enhances user experiences but HTTP at its core is stateless.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" alt="https://media.giphy.com/media/3o6Mb9TkJc357aDUo8/giphy.gif" title="I don't remember"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#https"&gt;
  &lt;/a&gt;
  HTTPS
&lt;/h2&gt;



&lt;p&gt;HTTPS stands for Hyper Text Transfer Protocol Secure. Data sent back and forth through HTTPS is encrypted with SSL/TLS (SSL stands for Secure Sockets Layer, TLS stands for Transport Security Layer). Anytime the user is sending sensitive information it should be always through HTTPS eg. contact information/contact form, credit card detail, social security number. You can add HTTPS&lt;/p&gt;



&lt;p&gt;by installing an SSL certificate on your web host.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmdnxP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1MrSjryRACaoDjCC6svmKE84CwqyQecy-" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmdnxP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1MrSjryRACaoDjCC6svmKE84CwqyQecy-" alt="https" title="https"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-request-methods"&gt;
  &lt;/a&gt;
  HTTP Request Methods
&lt;/h2&gt;



&lt;p&gt;So when you type &lt;a href="https://www.youtube.com/"&gt;https://www.youtube.com/&lt;/a&gt; on the browser, you are sending a message from the client (your browser) to the server, the server receives the message and responds by sending the webpage to us.&lt;/p&gt;



&lt;p&gt;The request sent by the browser looks like something as shown below&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Host:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;www.youtube.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;When a request is made to a server, it has some method attached to it, like GET in the above example. We are going to see 4 such methods but you can find more on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;MDN Docs&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h2&gt;



&lt;p&gt;A get request is used when you need to fetch data from the server. eg. loading a HTML page, loading assets like CSS, JS, XML page etc.&lt;/p&gt;



&lt;p&gt;When you visit a webpage you make a GET request to a server by HTTP.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#post"&gt;
  &lt;/a&gt;
  POST
&lt;/h2&gt;



&lt;p&gt;A POST request is used when you are adding data to the server. eg. When you submit a contact form on the website or when you post a blog, You are sending data to the server and it will store data in your database.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#put"&gt;
  &lt;/a&gt;
  PUT
&lt;/h2&gt;



&lt;p&gt;A PUT request is used when you want to update data that is already on the server. eg. change the text, image of the blog post.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h2&gt;



&lt;p&gt;A DELETE request delete data from the server.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-status-code"&gt;
  &lt;/a&gt;
  HTTP Status Code
&lt;/h2&gt;



&lt;p&gt;The response sent by the server when you request for youtube.com is shown below.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;OK&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application/binary&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;These unusual numbers send by the server are called as status code which tells the status of the request as it is 200 OK you will get &lt;a href="http://youtube.com/"&gt;the youtube.com&lt;/a&gt; homepage. Other common status codes are as follows.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZilognMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1dZVkp3BwKeSiB8z4m5l3wxSL3-utrodQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZilognMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1dZVkp3BwKeSiB8z4m5l3wxSL3-utrodQ" alt="status code" title="status code"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#common-status-codes"&gt;
  &lt;/a&gt;
  Common Status Codes
&lt;/h2&gt;



&lt;p&gt;200 - OK&lt;/p&gt;

&lt;p&gt;201 - OK created&lt;/p&gt;

&lt;p&gt;301 - Moved to new URL&lt;/p&gt;

&lt;p&gt;304 - Not modified(Cached version)&lt;/p&gt;

&lt;p&gt;400 - Bad Request&lt;/p&gt;

&lt;p&gt;401 - Unauthorized&lt;/p&gt;

&lt;p&gt;404 - Not found&lt;/p&gt;

&lt;p&gt;418 - I'm a teapot (April fools joke in 1998)&lt;/p&gt;

&lt;p&gt;500 - Internal Server Error&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#http-header-files"&gt;
  &lt;/a&gt;
  HTTP Header Files
&lt;/h2&gt;



&lt;p&gt;The response given by the server is in two parts i.e. header and a body.&lt;/p&gt;



&lt;p&gt;The header gives a status of the request, server name on which it is running, with detail about the content that has been requested as shown below.&lt;/p&gt;



&lt;p&gt;The body is a response that is gonna be an HTML page that you are trying to load, data that is sent from the server to the website, etc.&lt;/p&gt;



&lt;p&gt;There are three types of header, general, response, request.&lt;/p&gt;



&lt;p&gt;You can read more about HTTP header files on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#ip"&gt;
  &lt;/a&gt;
  IP
&lt;/h2&gt;



&lt;p&gt;So we learned, how the server and client respond to each other through HTTP but how the message sent by the client will be sent to the browser and vice versa. It is done through IP (internet protocol), every phone, laptop, and desktop in the world has a unique address and that unique address is called an IP address. In the real world, you can think of it as an address of a famous place or shop in your city, it will be always unique.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxR__2Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1La1YhOQEtEf-kTR3pPAhGUTbZda4u82u" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxR__2Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1La1YhOQEtEf-kTR3pPAhGUTbZda4u82u" alt="IP" title="IP"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;An IP address is a set of numbers and has 4 parts, and each part can take a value from 0 to 255(8bit).&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mf"&gt;255.255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#dhcp"&gt;
  &lt;/a&gt;
  DHCP
&lt;/h2&gt;



&lt;p&gt;Back in the day, to get internet on your computer, your internet service provider had to provide you IP address manually. This was not scalable as it requires extra work. So we have a protocol called DHCP (Dynamic Host Configuration Protocol) so when you boot your laptop or mobile phone, if it has support for that protocol it will automatically assign IP addresses and other communication parameters to devices connected to the network using a client-server architecture.&lt;/p&gt;



&lt;p&gt;You can read more about DHCP on &lt;a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoblmPLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1GR1OSuiJNELcciAzBI5UzjnJt8OBxNPn" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoblmPLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1GR1OSuiJNELcciAzBI5UzjnJt8OBxNPn" alt="dhcp" title="dhcp"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#dns"&gt;
  &lt;/a&gt;
  DNS
&lt;/h2&gt;



&lt;p&gt;DNS (Domain Name System) will convert the domain name of the website to an IP address, it is necessary because we know the website by their name but the internet knows from their IP addresses.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGKolzsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1LQNF0wSbd_H-aN7dT9hThqpo0FK09ZB6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGKolzsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1LQNF0wSbd_H-aN7dT9hThqpo0FK09ZB6" alt="dns" title="dns"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you want to look up the IP addresses of a website you can do that by opening the command prompt and typing as shown below&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;nslookup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;google.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can copy that address and on your browser type http://[ip address] you will be redirected to &lt;a href="http://google.com/"&gt;google.com&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You can read more about it on &lt;a href="https://en.wikipedia.org/wiki/Domain_Name_System"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#router"&gt;
  &lt;/a&gt;
  Router
&lt;/h2&gt;



&lt;p&gt;Let's say you type &lt;a href="http://google.com"&gt;google.com&lt;/a&gt; on the browser you are sending an envelope i.e. a request with ip address of the server in this case it will be google.com and your own ip address so that server can send the response to you. But how this request will get to google datacenter which might be far away from your home. The answer is it is done through millions of router around the globe.&lt;/p&gt;



&lt;p&gt;If you are using the internet in your house you might have one too, its sole purpose is to take data from your house to the internet and to send the response from the server back to your laptop, mobile or desktop, etc.&lt;/p&gt;



&lt;p&gt;You can check the route of the website from your command prompt by typing as shown below.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;traceroute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;google.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;if that doesn't work type 'tracert' instead of traceroute.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#tcp"&gt;
  &lt;/a&gt;
  TCP
&lt;/h2&gt;



&lt;p&gt;Now we have figured out how we can get the IP address of the server and the client and how we send them using routers all across the world. But how does the server know which data to send back to you? The data you have requested might be a webpage, voicemail, image, video, etc. For this, We need another protocol on our request envelope which we send to the server, it is called TCP (Transmission Control Protocol). TCP is a number that corresponds to a number which is a service that you want to send or access on your computer.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#22-ssh"&gt;
  &lt;/a&gt;
  22 SSH
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#53-dns"&gt;
  &lt;/a&gt;
  53 DNS
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#80-http"&gt;
  &lt;/a&gt;
  80 HTTP
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#443-https"&gt;
  &lt;/a&gt;
  443 HTTPS
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#587-smtp"&gt;
  &lt;/a&gt;
  587 SMTP
&lt;/h3&gt;



&lt;p&gt;when we access the webpage we use 80 or 443 TCP protocol.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can test this by typing &lt;a href="http://google.com/"&gt;http://google.com:80/&lt;/a&gt; or &lt;a href="https://google.com/"&gt;https://google.com:443/&lt;/a&gt; it will redirect you to &lt;a href="http://google.com/"&gt;google.com&lt;/a&gt; page.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can also test it on the command line as shown below&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;https://www.google.com:443/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
It should return with 200 OK Status code and with content type as text/html and with other stuff.&lt;/p&gt;



&lt;p&gt;You can read more about TCP on &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#tcpip"&gt;
  &lt;/a&gt;
  TCP/IP
&lt;/h2&gt;



&lt;p&gt;When you request a video or a high-quality image from the internet, it will not send you a whole image or video at once but with pieces of information using TCP/IP protocol. IP ensures every computer on the internet that speaks this protocol has an address, TCP ensures delivery of the data to the users.&lt;/p&gt;



&lt;p&gt;You can read more about TCP/IP in &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;HTTP/1.1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Host:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;www.youtube.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more such insights, checkout my blog website blog.webdrip.in&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mf"&gt;255.255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;255&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
