<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Awesome 🎧 Music Player + tutorial</title>
      <author>Roden</author>
      <pubDate>Fri, 09 Jul 2021 18:04:47 +0000</pubDate>
      <link>https://dev.to/kerthin/awesome-music-player-g81</link>
      <guid>https://dev.to/kerthin/awesome-music-player-g81</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Last week I posted my calculator made in the style of Neomorphism. Today I decided to continue posting my similar works. Therefore, I want to present to you my music player, also made in the style of neomorphism.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Calculator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/beautiful-neomorphic-calculator-dark-mode-6jm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Neomorphic Calculator 🧮 + Dark Mode 🖤&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jul 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h1&gt;Music Player&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/JjNKQVB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kerthin.github.io/musicPlayer-templateSait/"&gt;&lt;h1&gt;Full Page Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Functional&lt;/h2&gt;

&lt;h3&gt;01. Switching tracks&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lJbn4bUGj0Y0iMKlij/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lJbn4bUGj0Y0iMKlij/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is possible to switch your tracks. If you switch a track while playing music, the next track will start by clicking on the "Play" button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;02. Switching tracks&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/oKQTrdWlog9x1adXZI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/oKQTrdWlog9x1adXZI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;While the music is playing, the animation of scrolling the image of the song will be started.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;03. Rewind the song time&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wl7ZtMykFiyGi0BRwc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wl7ZtMykFiyGi0BRwc/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can also rewind the song. The song can be rewound manually using the timeline or using the buttons that scroll the song forward or backward for 5 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;04. Random launch of a track&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/PSMeyymgM6T4UNGWx4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PSMeyymgM6T4UNGWx4/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you click the lower right button, the tracks will start in random order, and not in order as specified in the array.

&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This only works if the track ended on its own, and you didn't switch it.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;05. Repeat an album or track&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/4pqwXuuFjyEZiM6v72/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4pqwXuuFjyEZiM6v72/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is a number 1 in the button, it means that the track will be played again at the end (&lt;code&gt;Repeat&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If the button is highlighted, but there are no numbers in it, it means that when the last track is played, the album will automatically start playing again from the first track.&lt;/li&gt;
&lt;li&gt;If the button is pale, it means that after playing the last track, the first one will not start.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Responsive&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/X8nWIy4uweQ8bWMKZD/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/X8nWIy4uweQ8bWMKZD/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The site is adapted for screen resolutions such as:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@media 414px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 375px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 320px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/AzLe0fp2wtW0rwuQX4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AzLe0fp2wtW0rwuQX4/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I also decided to adapt the site to different screen heights so that there would be no problems with the display.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/51qP2B2ZHFGY8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/51qP2B2ZHFGY8/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Code&lt;/h1&gt;

&lt;p&gt;You can add your own tracks through the array.&lt;br&gt;
Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jerryHerman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/JerryHerman_PutOnYourSundayClothes.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jerry Herman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Put On Your Sunday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elvisPresley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/ElvisPresley_CantHelpFallingInLove.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elvis Presley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Can't Falling In Love&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;royOrbison&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/RoyOrbison_OhPrettyWoman.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Roy Orbison&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oh, Pretty Woman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankSinatra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/FrankSinatra_ThatsLife.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frank Sinatra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;That's Life&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jimCroce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/JimCroce_TimeInABottle.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jim Croce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Time In A Bottle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redHotChiliPeppers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/RedHotChiliPeppers_DarkNecessities.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red Hot Chili Peppers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark Necessities&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stephaneGrappelli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/StephaneGrappelli_laMer.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stephane Grappelli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;La Mer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;evanKing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/EvanKing_Overwatch.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Evan King&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Overwatch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/JR_SouthSac.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SouthSac&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theDeli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;music/TheDeli_Sun.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Deli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It displays information about the track, changes the class for changing the image, and adds the track. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To add an image, you need to create a line in the mixin. The image class must be the same as in the array specified above.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mixin&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$albumBgName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$bgPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$albumBgName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;album&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$bgPath&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jerryHerman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/jerryHerman.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elvisPresley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/elvisPresley.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;royOrbison&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/royOrbison.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankSinatra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/frankSinatra.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jimCroce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/jimCroce.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redHotChiliPeppers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/redHotChiliPeppers.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stephaneGrappelli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/stephaneGrappelli.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;evanKing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/evanKing.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/JR.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;include&lt;/span&gt; &lt;span class="nx"&gt;albumBgMix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theDeli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://rawcdn.githack.com/Kerthin/musicPlayer-templateSait/4df6444e97123a39d036f1f9b57973858f70bae5/docs/image/albumBg/theDeli.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h1&gt;GitHub&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also download this project from the GitHub repository.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/musicPlayer-templateSait"&gt;
        musicPlayer-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A music player made in the style of neomorphism.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1xqdQ9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/9131d6ef04409049c328ce7a6f6a175e64f1374adac1f18ffaf89a8f2889e366/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d706c6574696f6e2d32302532352d6f72616e67652e737667" alt="completion Status"&gt;&lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/0ef94bb3d6bdf5fec0c3f5452111c9dd1b2d4c82518f871f6da0dd27fce5910d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e31342e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/e2c7bcf456840ac212cd09701b26b6d86ed89b7780dde7ef35aa3d5c2312af9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d7631302e31362e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/0f65d45420ca4ebd6b698cfb148c8afe07b9171f58927bc05dbebabec24d8948/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d302e372532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/dcc0fe2b2da3287aa7d01b012f6a8892fba7af66d73a68fd0b24e7f412094aad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76312d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;The project is a working music player made in the style of neomorphism.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the player it is possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to switch tracks;&lt;/li&gt;
&lt;li&gt;rewind a track for 5 seconds forward and back;&lt;/li&gt;
&lt;li&gt;use the music bar to scroll the track in more detail;&lt;/li&gt;
&lt;li&gt;to enable repeat track;&lt;/li&gt;
&lt;li&gt;to enable repeat playlist;&lt;/li&gt;
&lt;li&gt;you can enable random track launch mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://kerthin.github.io/musicPlayer-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Task-Manager&lt;/h3&gt;
&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dz68nBz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/gulp.svg"&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bAX22hE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/nodejs-1.svg"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Preprocessors&lt;/h3&gt;

&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTkL5PIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/pug.svg"&gt;
    &lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHNTxVjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/sass-1.svg"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwxO8f3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/npm.svg"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Languages&lt;/h3&gt;

&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5iqWZju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/html-5.svg"&gt;
    &lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgKpW7fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/css-3.svg"&gt;
    &lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/#"&gt;
        &lt;img width="124px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMmm5d37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/musicPlayer-templateSait/master/READMEimage/javascript.svg"&gt;
    &lt;/a&gt;
&lt;/p&gt;


&lt;h2&gt;
Plugins&lt;/h2&gt;
&lt;p&gt;To develop the project through gulp, I used the following types of NPM plugins:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;gulp-sourcemaps&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/528a1ebd364b693bb3d0101b0673c41e655019ffd2f9bdc0d1d6ee92e2641899/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e342d626c75652e737667" alt="gulp-sourcemaps-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Intended for generation of &lt;code&gt;css source maps&lt;/code&gt; which will be necessary at debugging of a code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;gulp-imagemin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/711705519071329822e444430727735680a0559653d21c428730d5f74dacef31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e312e302d626c75652e737667" alt="gulp-imagemin-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; and &lt;code&gt;SVG&lt;/code&gt; images with &lt;code&gt;imagemin&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;gulp-autoprefixer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="gulp-autoprefixer-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prefix &lt;code&gt;CSS&lt;/code&gt; with &lt;code&gt;Autoprefixer&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;imagemin-pngquant&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="imagemin-pngquant-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Pngquant imagemin&lt;/code&gt; plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;gulp-uglify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2b4a07c63198d7e5f42f3b13e24079c5ffbc9c3527a41f9179a171d7f0e4f0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e302e312d626c75652e737667" alt="gulp-uglify-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;JavaScript&lt;/code&gt; with &lt;code&gt;UglifyJS3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;gulp-rigger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/503c5942f276fc051f3b969da0dbaaf76a0aa9bb080825ceafda298f5fb986fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76302e352e382d626c75652e737667" alt="gulp-rigger-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Rigger&lt;/code&gt; is a build time include engine for &lt;code&gt;Javascript&lt;/code&gt;, &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/musicPlayer-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://kerthin.github.io/musicPlayer-templateSait/"&gt;&lt;h1&gt;Full Page Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for giving your precious time to my post. See you soon.&lt;br&gt;
I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my work there.&lt;br&gt;
&lt;br&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/1iTQdNvyJyja66fS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1iTQdNvyJyja66fS/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codepen</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Moving from HEY to Fastmail</title>
      <author>Franco Correa</author>
      <pubDate>Fri, 09 Jul 2021 17:06:05 +0000</pubDate>
      <link>https://dev.to/francocorreasosa/moving-from-hey-to-fastmail-2b8n</link>
      <guid>https://dev.to/francocorreasosa/moving-from-hey-to-fastmail-2b8n</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This post reflects my personal experience with the mentioned services and does not claim any of them is better than the other. Your mileage may vary ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've been trying out &lt;a href="https://hey.com"&gt;HEY&lt;/a&gt; (the e-mail service from the team at Basecamp) for almost a year now and I quite liked it. I loved the &lt;strong&gt;Screener&lt;/strong&gt; feature, which lets me decide who I want to receive e-mails from and who I want to block from emailing me again, forever. I also found &lt;strong&gt;Imbox&lt;/strong&gt; (used for real person-to-person talk), &lt;strong&gt;The Feed&lt;/strong&gt; (used for newsletter and related stuff), and &lt;strong&gt;Paper Trail&lt;/strong&gt; (used for receipts and confirmations) concepts pretty useful.&lt;/p&gt;

&lt;p&gt;Even though the way HEY organizes my email is pretty comfortable for my needs, I'm not fully satisfied with the experience. I don't really like the fact that I can't use my personal domains (&lt;a href="https://francocorrea.com"&gt;francocorrea.com&lt;/a&gt; and &lt;a href="https://francocorrea.com.uy"&gt;francocorrea.com.uy&lt;/a&gt;) with the personal plan, but I'd have to pay an extra 20 USD a year for the feature. Also, apart from the provided groups (Imbox, The Feed, and Paper Trail), it is not flexible on any subgroups that I may want to have, for example, one group for the hundreds of emails that Github sends every day on pull requests, issues, and related topics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deciding-on-moving-on"&gt;
  &lt;/a&gt;
  Deciding on moving on
&lt;/h2&gt;

&lt;p&gt;I've decided that while HEY was not the optimal experience for me, I liked the idea of paying for e-mail instead of letting my personal data pay for it. I researched several different services that could provide a good enough service for a reasonable price and ended up settling on &lt;a href="https://ref.fm/u26512456"&gt;Fastmail.com&lt;/a&gt;. I'm not going to try to sell the service to you in this post, but the reasons I chose it were because of their &lt;strong&gt;fair pricing&lt;/strong&gt;, &lt;strong&gt;multi-domain support&lt;/strong&gt;, &lt;strong&gt;extreme flexibility, and customizability&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-my-data-out-of-hey"&gt;
  &lt;/a&gt;
  Getting my data out of HEY
&lt;/h2&gt;

&lt;p&gt;Once I decided to move, the first thing I had to do was exporting my emails from HEY and importing them on Fastmail, this is pretty easy and you can do it by going to &lt;strong&gt;Account Setup &amp;gt; Export your data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkTDQvMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/17-hey-account.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkTDQvMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/17-hey-account.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You get a huge &lt;code&gt;.mbox&lt;/code&gt; file containing all your emails and attachments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signing-up-for-fastmail"&gt;
  &lt;/a&gt;
  Signing up for Fastmail
&lt;/h2&gt;

&lt;p&gt;After getting that file on my computer I proceeded to sign up for Fastmail and set up my domains, they have a nice onboarding where they guide you on the details about setting up your DNS the right way.&lt;/p&gt;

&lt;p&gt;If you are planning on using Fastmail, you can use &lt;a href="https://ref.fm/u26512456"&gt;this link&lt;/a&gt; to get 10% off your first year after the 30-day free trial. I am not affiliated with them, but if you try and end up liking the service, you and I benefit from that :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-the-mbox-file-into-fastmail"&gt;
  &lt;/a&gt;
  Importing the MBOX file into Fastmail
&lt;/h3&gt;

&lt;p&gt;Fastmail does not have a built-in tool to import a &lt;code&gt;.mbox&lt;/code&gt; file, so you're going to need to use an external tool like &lt;a href="https://www.thunderbird.net/"&gt;Thunderbird&lt;/a&gt;. They have a &lt;a href="https://www.fastmail.help/hc/en-us/articles/360058753594-Import-your-mail#importfiles"&gt;small guide to tell you how it should be done&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-everything-to-a-single-place"&gt;
  &lt;/a&gt;
  Routing everything to a single place
&lt;/h3&gt;

&lt;p&gt;When I was using HEY, I had a forwarding rule setup in Gmail and Zoho (where I was hosting my custom domains email service) making every new email to be forwarded to my HEY address. This worked fine but I could not respond from either my Gmail or custom domains, every response from me would be from my HEY address.&lt;/p&gt;

&lt;p&gt;Now, with Fastmail, I set up my domains so no forwarding from Zoho would be required (I also deleted my Zoho accounts). I still need to forward my Gmail messages to my Fastmail account, and this can be easily done by just changing where the emails were being forwarded to. Fastmail also lets you set up Gmail as an &lt;em&gt;additional identity&lt;/em&gt;, which means they will use Gmail's SMTP server to send messages such as responses to emails received from your Gmail account.&lt;/p&gt;

&lt;p&gt;On the HEY side, after terminating my account, they are generous enough to let me keep my address and allow forwarding all future emails to my new account. This can be set up by going to &lt;strong&gt;Account Setup &amp;gt; Forwarding &amp;amp; SMTP Setup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After all the settings were applied, my routing schema would look like something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wOn4POC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/16-excalidraw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wOn4POC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/16-excalidraw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-hey-rules-to-fastmail"&gt;
  &lt;/a&gt;
  Applying the HEY rules to Fastmail
&lt;/h2&gt;

&lt;p&gt;As I mentioned at the beginning of the post, the HEY way of organizing my email was something I really appreciated. So I figured I would replicate that experience as much as possible using the flexibility that the new service provides.&lt;/p&gt;

&lt;p&gt;To achieve this I need three things: &lt;strong&gt;contact groups&lt;/strong&gt;, &lt;strong&gt;message folders&lt;/strong&gt;, and &lt;strong&gt;sorting rules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's start with the &lt;em&gt;Groups&lt;/em&gt;, these would serve as a way for me to tell Fastmail which class of contact I have so anytime a new email arrives it would use a &lt;em&gt;Rule&lt;/em&gt; to categorize that message into a specific &lt;em&gt;Folder&lt;/em&gt;. I created two groups, &lt;strong&gt;"The Feed"&lt;/strong&gt; and &lt;strong&gt;"Paper Trail"&lt;/strong&gt;, what are these for? you guessed it, to put emails in the &lt;strong&gt;"The Feed"&lt;/strong&gt; and &lt;strong&gt;"Paper Trail"&lt;/strong&gt; folders, which I also created.&lt;/p&gt;

&lt;p&gt;Why no &lt;strong&gt;"Imbox"&lt;/strong&gt; group? I've decided to use the &lt;strong&gt;VIPs&lt;/strong&gt; flag on contacts to route their emails directly to the Imbox, which is another folder we'll need to create. And lastly, let's create a folder named &lt;strong&gt;"To Screen"&lt;/strong&gt;, which will serve as a temporal inbound message parking.&lt;/p&gt;

&lt;p&gt;Now that we have our two groups and three folders created, let's create the Filters &amp;amp; Rules to let the magic happen.&lt;/p&gt;

&lt;p&gt;First, we need the most important rule, let's send any message from someone who is not on our contact list to the &lt;em&gt;"To Screen"&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eaStij2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/11-rule-to-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eaStij2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/11-rule-to-screen.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to click on "Show advanced preferences" and select "Hide if empty" to make sure the "To Screen" folder does not show when you have nothing to screen!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KrirjDwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/15-to-screen-hidden.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KrirjDwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/15-to-screen-hidden.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we need to route anyone who is on our contact list and is marked as a VIP to the "Imbox" folder and make Fastmail send us a notification. There is a rule for that™&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZNZlI_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/12-rule-to-imbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZNZlI_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/12-rule-to-imbox.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to honor our contact groups by routing everyone from the "The Feed" group to the "The Feed" folder, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMOHbk3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/13-rule-the-feed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMOHbk3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/13-rule-the-feed.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the same applies to our "Paper Trail" group and folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYkUjHTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/14-rule-paper-trail.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYkUjHTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.francocorrea.com/assets/blog/moving-from-hey-to-fastmail/14-rule-paper-trail.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Even though the pricing was not the main reason to make the switch, I can say that I am saving approx 75 USD a year by using this workflow, and I am getting a much more flexible system in exchange.&lt;/p&gt;

&lt;p&gt;I totally get this workflow is not for anyone, but I had fun setting it up and think others will have as well.&lt;/p&gt;

&lt;p&gt;This is the tip of the iceberg on how we can customize Fastmail and I will myself be exploring more ways of adapting it to my workflow. For instance, I've created a subfolder inside Paper Trail where I route all my Github emails and make the server delete the ones older than 60 days (this is similar to the HEY "Recycling Center" feature).&lt;/p&gt;

&lt;p&gt;Let me know what you think by sending me an email at &lt;a href="mailto:devto@francocorrea.com"&gt;devto@francocorrea.com&lt;/a&gt;, I promise your message won't be lost in the mail 😉&lt;/p&gt;

</description>
      <category>tooling</category>
    </item>
    <item>
      <title>bitsize #1: What is an asynchronous operation?</title>
      <author>Juan Barahona</author>
      <pubDate>Fri, 09 Jul 2021 17:05:54 +0000</pubDate>
      <link>https://dev.to/huunab/bitsize-1-what-is-an-asynchronous-operation-4m4a</link>
      <guid>https://dev.to/huunab/bitsize-1-what-is-an-asynchronous-operation-4m4a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofbd5Wvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o66nqmv533m1kmkr735v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofbd5Wvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o66nqmv533m1kmkr735v.png" alt="Asynchronous Programming #1 - Facebook@3x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is already tons of articles and guides explaining asynchronous programming, one more is just going to contribute to the possible mess, instead the image above gives you a bitsized explanation that might be a good starting point to fully understand other in deep guides, or probably a good finalizer that makes everything you already know fit harmoniously 🤞&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-recommendations"&gt;
  &lt;/a&gt;
  Personal Recommendations
&lt;/h2&gt;

&lt;p&gt;If you want continue your exploration of asynchronous programming, these are the related posts (of tons I have read) that I personally liked a lot, in order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.internalpointers.com/post/gentle-introduction-multithreading"&gt;A gentle introduction to multithreading — Internal Pointers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/"&gt;Asynchronous programming in C# | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts"&gt;General asynchronous programming concepts — Learn web development | MDN (mozilla.org)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke"&gt;⭐️🎀 JavaScript Visualized: Promises &amp;amp; Async/Await — DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/swift-india/concurrency-parallelism-threads-processes-async-and-sync-related-39fd951bc61d"&gt;Concurrency, Parallelism, Threads, Processes, Async, and Sync — Related? 🤔 | by G. Abhisek | Swift India | Medium&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;If you liked this post and what to show you support to build more on these, follow me at Juan Barahona (&lt;a class="mentioned-user" href="https://dev.to/huunab"&gt;@huunab&lt;/a&gt;
) / Twitter, thanks! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>async</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dependency Injection /Services pattern for React (inspired by Angular)</title>
      <author>Daniel Sollie Hansen</author>
      <pubDate>Fri, 09 Jul 2021 17:01:36 +0000</pubDate>
      <link>https://dev.to/dansolhan/simple-dependency-injection-functionality-for-react-518j</link>
      <guid>https://dev.to/dansolhan/simple-dependency-injection-functionality-for-react-518j</guid>
      <description>&lt;p&gt;Having worked in an Angular-development team for several years, it was exciting for me to learn React and it's more lightweight approach to web-development.&lt;/p&gt;

&lt;p&gt;I quickly took to most of the ways that React 'does things', but after three years of working with Angulars very loose coupled development, it was hard to wrap my mind around the fact that React did not provide a proper Dependency Injection functionality out of the box.&lt;/p&gt;

&lt;p&gt;Here I detail a technique to get a certain degree of Dependency Injection with React by providing services through the Context API and making them accessible through hooks. It's a very simple solution, so much so that I'm wondering if it's either blatantly obvious or not a very good design. I am presenting this as both a source of inspiration to new React-developers (of which I am a part of) and as a case study for critique and feedback for the more experienced React-developers out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angularlike-services"&gt;
  &lt;/a&gt;
  Angular-like Services
&lt;/h2&gt;

&lt;p&gt;In apps with a certain size and complexity, it's handy to abstract away certain functionality and isolate concerns away into individual and independent parts. These parts - called services - can serve as a single point of entry for a particular responsibility in your app, such as accessing a particular API, storing data in local storage or maintain some form of state (a few examples in a sea of possibilities).&lt;/p&gt;

&lt;p&gt;A service should have limited - if any - knowledge of the world outside itself. It should have only a few methods. This makes it easy to test both the service and the components that use the service in isolation, possibly reducing the need for integration testing in favor of more surgical unit tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-usecase"&gt;
  &lt;/a&gt;
  A Use-Case
&lt;/h2&gt;

&lt;p&gt;Let's envision an absurdly simple page. This page should display a list of all employees through an Employee-component. The employee data is received from an external API.&lt;/p&gt;

&lt;p&gt;The data-object for the employee looks like this (note that I'm using Typescript, so for all you purists out there, feel free to look away from any and all strong typing)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GB5QbZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz125i6z1my9wmw2ufqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GB5QbZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz125i6z1my9wmw2ufqh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our component looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqrnvn1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndtn8je6bqa5f51zhl7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqrnvn1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndtn8je6bqa5f51zhl7g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a while to take in the stunning and complex code that is our employee-display component. As is the usual case for React apps, our component takes in the employee-objects as props. From what I understand, it was most usual to let data-objects such as these travel down through the component-trees from a higher level component. After the Context API, it has become easier to access these values without relying on multitudes of prop-passing. But we're gonna take it a step further than that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-service"&gt;
  &lt;/a&gt;
  Creating a Service
&lt;/h2&gt;

&lt;p&gt;Let's first create a service. The sole responsibility of this service should be to - when prompted - send an api-call to an external webpage and when the call was resolved, return the values it received. If you use Typescript, you may want to start by defining an interface with the required functionality:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tM_EJ4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0o5j9oq35yu0lb88c1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tM_EJ4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0o5j9oq35yu0lb88c1f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not very fancy, but it serves our purposes excellently. A parameterless method that returns a Promise with our list of employees (which will be fulfilled once we receive a response).&lt;/p&gt;

&lt;p&gt;Note that I realize that the use of I to denote an interface is a somewhat controversial topic in the Typescript-world. I like it better than adding Interface as a post-fix to the interface, and it's better than coming up with fancier name for the component. Always follow the local guidelines for naming conventions, kids!&lt;/p&gt;

&lt;p&gt;Let's now create a functional component. This component will have the implementation for the interface:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSlIrQeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70y8rqmrnr0eup6bg8na.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSlIrQeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70y8rqmrnr0eup6bg8na.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not very impressive. But it too will do. As you can see, my linter is complaining about missing usage. We'll fix that in a moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-the-service-with-a-context"&gt;
  &lt;/a&gt;
  Providing the service with a Context
&lt;/h2&gt;

&lt;p&gt;Let's now make the service available through our app with the help of the Context API. We'll create a context outside the component, and we'll provide the implementation we just made through it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLqTKHeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qboxspol2anfeznk30x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLqTKHeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qboxspol2anfeznk30x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make things a bit easier for myself in this test case, I extended the component as an FC, which allows me to access the components children out of the box. You &lt;a href="https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/"&gt;may not want to do this&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At any rate. We now have a Context that contains our implementation of the EmployeeService. Due to how the Context API system works, only the children of this component will be able to access it. But how should we access it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-the-service-in-our-component-the-not-so-right-way"&gt;
  &lt;/a&gt;
  Accessing the Service in our Component (The not so right way)
&lt;/h2&gt;

&lt;p&gt;Let's make a parent component for our EmployeeComponent. (Let's call it EmployeePage.tsx) The responsibility of this component is to access our service, get the data and pass it onto our EmployeeComponent as a prop:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5ylTdZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb1lbh88jzwq1gpq7ty8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5ylTdZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb1lbh88jzwq1gpq7ty8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(A little oops here. Make sure that the useEffect-hook takes in employeeService as a dependency)&lt;/p&gt;

&lt;p&gt;Without going into all the specifics, we import the context, and with the useContext-method we extract the service. In the useEffect-hook we make the call, and when the results are returned, we pass them on as a prop to the Employees-component.&lt;/p&gt;

&lt;p&gt;We then wrap the App-component in index.tsx with out Service:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65ZOMHcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxsy6sht86ilxe1cf40x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65ZOMHcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxsy6sht86ilxe1cf40x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our service is now accessible within the entire App by importing and using the Context.&lt;/p&gt;

&lt;p&gt;Looking good? Well, not quite. First of all. We can't be sure that  we won't make a mistake and try to call the useContext-hook in a component that isn't a child of the Provider. Secondly, we could make the use of the service more apparent in our code.&lt;/p&gt;

&lt;p&gt;Let's make a few changes. In the EmployeeService, we'll stop exporting the EmployeeServiceContext. Instead we will create a hook that uses the Context for us. While we're at it, let's be sure that a value is provided, and throw a helpful error message if it isn't:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZogXqsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbz4kggsrjjrlsxtqgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZogXqsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbz4kggsrjjrlsxtqgo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's refactor our EmployeePage.tsx code to reflect these changes. It feels so much more apropriate to let the hook handle the possibility of undefined values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gg95XUQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q75ju5evfn65nnv0469.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gg95XUQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q75ju5evfn65nnv0469.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermission-test-run"&gt;
  &lt;/a&gt;
  Intermission Test Run
&lt;/h2&gt;

&lt;p&gt;Okay. Let's see how this works in action. Add some dummy data to the EmployeeService-class and make sure the EmployeePage is a child of AppComponent and do a test run:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXjPPmiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yy3jl74qzukn5qtu2o8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXjPPmiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yy3jl74qzukn5qtu2o8t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey, great. It works! We shouldn't be quite satisfied just yet though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-the-service-in-our-component-the-righter-way"&gt;
  &lt;/a&gt;
  Accessing the Service in our Component (The right(er) way)
&lt;/h2&gt;

&lt;p&gt;For this special case, our code is perfectly fine. But since we are setting this system up anticipating at least a good number of services, this will get cumbersome fast. Checking that all contexts for each hook exists, and also writing a test for each service? Ugh. This is an excellent case of DRY in action. Let's not do that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dry-the-contextualizer"&gt;
  &lt;/a&gt;
  DRY - The Contextualizer
&lt;/h3&gt;

&lt;p&gt;Let's create a central hub for all our services. This hub will keep track of all our contexts and - when a particular service is asked for - it will check if it exists and return an apropriate error if it doesn't.&lt;/p&gt;

&lt;p&gt;We'll make two files. The Contextualizer.ts and the ProvidedServices.ts. The latter is a simple enum that will contain all the services that exist within our app. This will be handy for us, and might also be handy for the onboarding process of future developers. Let's make this one first:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwYGzZEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxujzh93pmcsc6uko5si.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwYGzZEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxujzh93pmcsc6uko5si.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(It's probably fine to include this with the Contextualizer. I left it as its own file so its easier to use as a kind of service-encyclopedia)&lt;/p&gt;

&lt;p&gt;Then it's time to set up our Contextualizer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbFeKBOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbzx854n4tlpb51eset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbFeKBOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbzx854n4tlpb51eset.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this class, we generalize the creation of new services and retrieving them. Note that we still want to provide custom hooks for each service, for the sake of following React guidelines.&lt;/p&gt;

&lt;p&gt;Here we also take into account the cases of a service not having been created at all, as well as if the service is not available from the component it is called it.&lt;/p&gt;

&lt;p&gt;(You may get a lint-warning here that you should never use the &lt;code&gt;useContext&lt;/code&gt;-method outside of a component. I chose to ignore this warning, as it will ultimately only be called inside an component anyway. )&lt;/p&gt;

&lt;p&gt;(Finally, you should be able to remove the useEffect-dependency. It's possible you actually have to for anything to appear.)&lt;/p&gt;

&lt;p&gt;We have succesfully generalized our system for creating contexts and retrieving their value through hooks. In our EmployeeService-class we can now reduce the previously rather obtuse Context-related code to the following two lines:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jp_CYGYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxlla6m3jpy1rguscse6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jp_CYGYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxlla6m3jpy1rguscse6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cleaning-up-the-mess"&gt;
  &lt;/a&gt;
  Cleaning up the mess
&lt;/h3&gt;

&lt;p&gt;We're almost done. We can now create services, and provide them in our app with a few lines of code (and an entry to our enum). But there's one little detail that remains:&lt;/p&gt;

&lt;p&gt;Our index.tsx will easily get clogged if we're gonna be putting all our services in there. Let's instead create a little component solely for containing and keeping all our services. Let's call it GlobalServices.tsx, and lets replace the currently existing EmployeeService in index.tsx with it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GoUdP7A4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leinucnjz5i8qgc9li3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GoUdP7A4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leinucnjz5i8qgc9li3g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we create more services to our application, we can add them in this list. Just remember that if you have services that rely on other services, they must be placed as a child of that service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This is a very bare-bones example of how a pattern for allowing services in React can be done. I'm sure it's not perfect. Feel free to suggest improvements, critique it or give it tons of compliments in the comments section. If there are any questions, feel free to bring them forth too.&lt;/p&gt;

&lt;p&gt;If people are positive and find this helpful, I might write a little explanation for how this pattern makes unit-testing services and components easier at a later time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Comics, Graphic Design — and the Power of JavaScript</title>
      <author>Mads Stoumann</author>
      <pubDate>Fri, 09 Jul 2021 16:54:34 +0000</pubDate>
      <link>https://dev.to/madsstoumann/comics-graphic-design-and-the-power-of-javascript-2kap</link>
      <guid>https://dev.to/madsstoumann/comics-graphic-design-and-the-power-of-javascript-2kap</guid>
      <description>&lt;p&gt;In January 2007, I was asked to do the impossible: Layout, letter and produce a boxset with seven hardcover comic books, each 136 pages – in just two weeks! I knew I could do it, because I had a secret weapon, that none of the other &lt;em&gt;Graphic Designers&lt;/em&gt; I knew used: JavaScript!&lt;/p&gt;




&lt;p&gt;February 2007 marked the 40th anniversary of the “Gaston Lagaffe” comic (“Vakse Viggo” in danish). Multiple publishers around the world were publishing commemorate anniversary-editions, but the danish publisher had decided &lt;strong&gt;not&lt;/strong&gt; to mark the anniversary. &lt;/p&gt;

&lt;p&gt;Then they had a sudden change of heart – and the boxset had to be ready in record time, in order to co-print with other countries.&lt;/p&gt;

&lt;p&gt;It ended up looking like this (it's rare, and sold out today!):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWmJrFtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7bv2tiiyntf4j38pgkv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWmJrFtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7bv2tiiyntf4j38pgkv.jpg" alt="Viggo_boksen_ryg_indhold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But how on earth could JavaScript help me create seven comic books in record time?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-power-of-javascript"&gt;
  &lt;/a&gt;
  The Power of JavaScript
&lt;/h2&gt;

&lt;p&gt;As web developers we often forget, that JavaScript can be used in &lt;strong&gt;many other places&lt;/strong&gt; than websites and web apps. One such place is &lt;em&gt;Adobe InDesign&lt;/em&gt;, a popular desktop publishing application. Using it's &lt;em&gt;Script Panel&lt;/em&gt;, you can write small helper-scripts or even extend the UI (with small popup forms) using JavaScript.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Adobe InDesign&lt;/em&gt;, you simply create a reference to the active document in a plain &lt;code&gt;.js&lt;/code&gt;-file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeDocument&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;… and then you can do all sorts of things! Read the &lt;a href="https://helpx.adobe.com/indesign/using/scripting.html"&gt;documentation&lt;/a&gt; and try some of the sample scripts. If you know JavaScript, it's straightforward. You can also write  scripts for &lt;em&gt;Adobe Photoshop&lt;/em&gt; and other Adobe applications.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-secret-weapon"&gt;
  &lt;/a&gt;
  The Secret Weapon
&lt;/h2&gt;

&lt;p&gt;My “Secret Weapon” were a bunch of scripts, each assigned to a function-key, that could help me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the complete text of a comic book (from a Word-document), split it into pages and then into multiple text-frames, that would be used for each “speech balloon”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Excerpt:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;HEIGHT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pageHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HEIGHT&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HEIGHT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WIDTH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;textFrames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometricBounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageWidth&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textFramePreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insetSpacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textFramePreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verticalJustification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VerticalJustification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CENTER_ALIGN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometricBounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;tmpFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add “Word Effects”, for instance changing a line of text into ”wavy text” or text, where each letter grow or shrink in font-size (in comic books, these are &lt;strong&gt;KABOUM!&lt;/strong&gt; and &lt;strong&gt;VROOOOMM!&lt;/strong&gt; etc.!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the language of all text-frames in a document&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Fit text to frame”, by growing or shrinking the font-size&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color layers with original lettering, so you could differentiate them from local language lettering&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… Sometimes, I'd just write a quick script to help me re-link artwork-files or similar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeDocument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TUNI_45&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TUNIQUES_50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.tif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;nf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;TB45&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;Tuniques Bleues 45 page 03_46&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;Download&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;TB_3&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;Natifs&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;Tuniques 50 page 03-46&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;relink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So – yes – JavaScript &lt;strong&gt;did&lt;/strong&gt; really make it possible to create these comic books in record time! &lt;/p&gt;

&lt;p&gt;At that time, the workflow of a typical “comic book letterer” was like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the text of a single speech balloon in &lt;em&gt;Word&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Copy the selected text&lt;/li&gt;
&lt;li&gt;Create a new text-frame in &lt;em&gt;Adobe InDesign&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Paste copied text&lt;/li&gt;
&lt;li&gt;Adjust the size of the text-frame to fit the speech balloon&lt;/li&gt;
&lt;li&gt;Re-format the text&lt;/li&gt;
&lt;li&gt;Repeat for next speech balloon …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Needless to say, by automating all this in JavaScript, I could letter the comics &lt;strong&gt;many&lt;/strong&gt; times faster than my competitors.&lt;/p&gt;

&lt;p&gt;As a result, I could lower my prices, and get even more work. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#but-then-"&gt;
  &lt;/a&gt;
  But then ...
&lt;/h2&gt;

&lt;p&gt;In 2008, the financial crisis hit, and for the years to come, it impacted the Danish comic book-market badly. &lt;/p&gt;

&lt;p&gt;Not only that, but my main line of work besides comic book-lettering, was layouting childrens magazines like “Hello Kitty”, “Spider-Man”, “Star Wars” and “Toy Story”.&lt;/p&gt;

&lt;p&gt;As you might or might not know, childrens magazines faced a &lt;strong&gt;very&lt;/strong&gt; hard time after the launch of the iPad in 2010! &lt;/p&gt;

&lt;p&gt;A combination of the financial crisis and the launch of the iPad meant, that the company I worked for, went from 130 employees to just 5, in the span of a few years.&lt;/p&gt;

&lt;p&gt;Luckily, graphic design was only &lt;strong&gt;half&lt;/strong&gt; of my work-life, the other half being – you guessed it! – web development! In 2014, I “retired” as a graphic designer, and focused entirely on web- and app development.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;So why this post? It's not only meant to show you how – as a Web Developer – you can use your JavaScript-skills outside the world of web development, but also:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No matter &lt;em&gt;which field&lt;/em&gt; you work in, it's all about &lt;strong&gt;improving and optimizing your workflow&lt;/strong&gt;. If you have repetitive tasks, use your coding skills to remove them!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;… and, finally:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you know a &lt;em&gt;Grahic Designer&lt;/em&gt;, ask her/him if s/he has repetitive tasks. If yes, offer to help writing scripts – it can make a &lt;strong&gt;huge&lt;/strong&gt; difference! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#geeky-bonus-info"&gt;
  &lt;/a&gt;
  Geeky Bonus Info
&lt;/h2&gt;

&lt;p&gt;The artist behind “Gaston Lagaffe” was called André Franquin (1924–1997), and I was lucky enough to meet him, when I was a 12-year old comic book geek:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKjFZLwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s92amrkvbj2mfq8jv9bt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKjFZLwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s92amrkvbj2mfq8jv9bt.jpg" alt="Franquin and I"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I did the lettering of “Gaston Lagaffe”, I wanted it to resemble the original as much as possible, so I scanned a bunch of pages with Franquin's original handwriting, traced them in &lt;em&gt;Adobe Illustrator&lt;/em&gt;, and created two typefaces in &lt;a href="https://www.high-logic.com/font-editor/fontcreator"&gt;FontCreator&lt;/a&gt;, that were used in the publication:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C55jFptm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvuwzyzyflvgp08ebgq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C55jFptm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvuwzyzyflvgp08ebgq4.png" alt="Gaston Typeface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dUc3rz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn3p9vsrs518djwnn63s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dUc3rz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn3p9vsrs518djwnn63s.png" alt="SpirouModern Typeface"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>design</category>
      <category>comics</category>
      <category>scripting</category>
    </item>
    <item>
      <title>Iteration Statements</title>
      <author>Eduardo Julião</author>
      <pubDate>Fri, 09 Jul 2021 16:45:37 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/iteration-statements-m6b</link>
      <guid>https://dev.to/eduardojuliao/iteration-statements-m6b</guid>
      <description>&lt;p&gt;Iteration statements are code blocks that executes instructions in a loop.&lt;/p&gt;

&lt;p&gt;There a 4 types of iteration statements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For&lt;/li&gt;
&lt;li&gt;Foreach&lt;/li&gt;
&lt;li&gt;While&lt;/li&gt;
&lt;li&gt;Do... While&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#for"&gt;
  &lt;/a&gt;
  For
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop keeps executing until a certain condition is met.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code to be executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initializer"&gt;
  &lt;/a&gt;
  Initializer
&lt;/h3&gt;

&lt;p&gt;Creates and initialize a variable to be used inside the &lt;code&gt;for&lt;/code&gt; loop. This variable cannot be accessed from outside.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#condition"&gt;
  &lt;/a&gt;
  Condition
&lt;/h3&gt;

&lt;p&gt;A boolean expression that must return either true or false. The loop will keep executing until this expression returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iterator"&gt;
  &lt;/a&gt;
  Iterator
&lt;/h3&gt;

&lt;p&gt;Defines the incremental or decremental of Initializer variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Iterator adds a value to i each loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iterator removes a value of &lt;code&gt;i&lt;/code&gt; each loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;--)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initializer can be declared outside the for loop&lt;br&gt;
In this scenario, the &lt;code&gt;i&lt;/code&gt; variable can be accessed outise the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iterator can be managed inside the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iterator managed insithe the loop and initializer variable declared outside the for loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initializer, Condition and Iterator are managed ooutside the parenthesis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// force exit from loop&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working with arrays&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;currentItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Current value of item inside array is: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;currentItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we're using the &lt;code&gt;.Count&lt;/code&gt; property of the array to know how many items are inside it.&lt;br&gt;
Since arrays index start at 0, we use remove one iteration with &lt;code&gt;- 1&lt;/code&gt;, without it, the for looop will look for an item that does not exists in the array and trhow an error.&lt;/p&gt;

&lt;p&gt;To better exemplify this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs 1&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs 2&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  Foreach
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt; loop iterates through each item inside a collection.&lt;br&gt;
The &lt;code&gt;DataType&lt;/code&gt; must match the type of the collection you're iterating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;variableName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Current value of i is: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#while"&gt;
  &lt;/a&gt;
  While
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;while&lt;/code&gt; loop, the code block will run until the condition returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Execute the instrunction until &lt;code&gt;i&lt;/code&gt; is smaller than 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// initializer&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// condition&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt; &lt;span class="c1"&gt;// iterator&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a boolean variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isBiggerThan10&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isBiggerThan10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Value of i: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt; &lt;span class="c1"&gt;// iterator&lt;/span&gt;
  &lt;span class="n"&gt;isBiggerThan10&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Checks if i is bigger than 10 and assing the result to the variable.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-while"&gt;
  &lt;/a&gt;
  Do... While
&lt;/h2&gt;

&lt;p&gt;The difference between &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;do...while&lt;/code&gt;, is that &lt;code&gt;while&lt;/code&gt; checks the condition before executing, and &lt;code&gt;do...while&lt;/code&gt; always executes at least once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i = {0}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Asymptotic Notations</title>
      <author>Abhishek Chandra</author>
      <pubDate>Fri, 09 Jul 2021 16:24:37 +0000</pubDate>
      <link>https://dev.to/abhishekchandra2522k/asymptotic-notations-14nn</link>
      <guid>https://dev.to/abhishekchandra2522k/asymptotic-notations-14nn</guid>
      <description>&lt;p&gt;The objective of this article is to explain Analysis of Algorithms and Asymptotic Notations i.e. &lt;strong&gt;Big-O, Omega-Ω, and Theta-Θ.&lt;/strong&gt; These topics are the most basic foundation for Data Structures and Algorithms. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis-of-algorithms"&gt;
  &lt;/a&gt;
  Analysis of Algorithms
&lt;/h2&gt;

&lt;p&gt;The idea of &lt;em&gt;analysis of algorithms&lt;/em&gt; is to compare algorithms mainly in terms of running time and space consumed. &lt;br&gt; For example,&lt;br&gt;
To go from city 'M' to city 'Z', there can be many ways to carry-out this task: by &lt;em&gt;flight&lt;/em&gt;, by &lt;em&gt;bus&lt;/em&gt;, by &lt;em&gt;train&lt;/em&gt; and also by &lt;em&gt;bicycle&lt;/em&gt;. Depending on the accessibility and convenience, we choose the one that suits us. Similarly, in computer science we have various algorithms available for solving a same problem, for example we can solve sorting problem by many algorithms like &lt;code&gt;selection-sort&lt;/code&gt;, &lt;code&gt;bubble-sort&lt;/code&gt;, &lt;code&gt;merge-sort&lt;/code&gt;  and &lt;em&gt;many more&lt;/em&gt; but we will choose the one with lesser complexity. (Best algorithm for sorting is &lt;code&gt;quick-sort&lt;/code&gt; with complexity &lt;code&gt;O(nlog(n))&lt;/code&gt; ) &lt;br&gt;&lt;br&gt;
This concludes that Analysis of Algorithm should be used in determining which method is more efficient and also which method is good in terms of time and space consumed.&lt;/p&gt;

&lt;p&gt;Prior to learning Asymptotic Notations, Let's see what is &lt;strong&gt;&lt;em&gt;rate of growth&lt;/em&gt;&lt;/strong&gt; of an algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rate of growth&lt;/strong&gt; is nothing but the rate at which the run time complexity of the algorithm increases as a function of the input.&lt;br&gt;&lt;br&gt;
Let's suppose we have to purchase a laptop and a mouse. If someone asks you what are you purchasing, then in general you will say buying a laptop and ignore buying the mouse part. This is because, cost of laptop is too big compared to cost of mouse. So, we can say&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Total Cost = cost_of_laptop + cost_of_mouse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Total Cost ≈ cost_of_laptop (approximately)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the above mentioned example, we can represent the cost of laptop and cost of mouse as a function and for a given function, we can ignore the lower order terms (that are relatively insignificant for large value of input size, n). Let us consider another example in terms of algebra, let n&lt;sup&gt;4&lt;/sup&gt;, n&lt;sup&gt;2&lt;/sup&gt;, 100n and 5 are individual costs of some function, here we can approximate this function to n&lt;sup&gt;4&lt;/sup&gt; i.e. the highest rate of growth.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;n&lt;sup&gt;4&lt;/sup&gt; + n&lt;sup&gt;2&lt;/sup&gt; + 100n + 5 ≈ n&lt;sup&gt;4&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's the list of most common rate of growths.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time Complexity&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Constant&lt;/td&gt;
&lt;td&gt;accessing an array element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;Logarithmic&lt;/td&gt;
&lt;td&gt;finding an element in a &lt;em&gt;sorted&lt;/em&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Linear&lt;/td&gt;
&lt;td&gt;finding an element in a &lt;em&gt;unsorted&lt;/em&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nlog(n)&lt;/td&gt;
&lt;td&gt;Linear Logarithmic&lt;/td&gt;
&lt;td&gt;sorting n items with &lt;em&gt;divide-and-conquer&lt;/em&gt; (Merge Sort)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Quadratic&lt;/td&gt;
&lt;td&gt;shortest path between two nodes in a graph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;sup&gt;3&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Cubic&lt;/td&gt;
&lt;td&gt;matrix multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;sup&gt;n&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;Exponential&lt;/td&gt;
&lt;td&gt;tower of hanoi problem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Before going to Asymptotic Notations, We also need to know about Types Of Analysis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-analysis"&gt;
  &lt;/a&gt;
  Types of Analysis
&lt;/h3&gt;

&lt;p&gt;If we have to analyse an algorithm, we need to know on what inputs the algorithm takes less time, and on what inputs the algorithm is taking more time. That means we can represent algorithms with multiple expressions: one for the case where it takes &lt;em&gt;less time&lt;/em&gt; and other for the case where it takes &lt;em&gt;more time&lt;/em&gt;. &lt;br&gt;&lt;br&gt;
In general, when the algorithm takes less time it is called as the &lt;strong&gt;&lt;em&gt;best case&lt;/em&gt;&lt;/strong&gt; and when the algorithm takes more time than it is called as the &lt;strong&gt;&lt;em&gt;worst case&lt;/em&gt;&lt;/strong&gt;. &lt;br&gt;
To analyse an algorithm we need some kind of syntax and that forms the base for asymptotic analysis / notation. &lt;br&gt;
There are three types of analysis:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Worst Case&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defines the input for which algorithm takes longest time to execute.&lt;/li&gt;
&lt;li&gt;algorithm runs slower.&lt;/li&gt;
&lt;li&gt;algorithm which executes maximum number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defines the input for which algorithm takes lowest time to execute.&lt;/li&gt;
&lt;li&gt;algorithm runs fastest.&lt;/li&gt;
&lt;li&gt;algorithm which executes least number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Average Case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provides a prediction about the running time of the algorithm.&lt;/li&gt;
&lt;li&gt;assumes that the input is random.&lt;/li&gt;
&lt;li&gt;algorithm which performs average number of steps on input data of size n.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Lower Bound &amp;lt;= Average Time &amp;lt;= Upper Bound&lt;/code&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#asymptotic-notations"&gt;
  &lt;/a&gt;
  Asymptotic Notations
&lt;/h1&gt;

&lt;p&gt;Asymptotic Notations is having an expressions for the best, average and worst cases, for all the three cases we need to identify the upper and lower bounds. To represent these upper and lower bounds we need some kind of syntax and that is the following discussion. Let us assume that for a given algorithm, it can be represented in the form of function &lt;em&gt;f(n)&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation-"&gt;
  &lt;/a&gt;
  Big - O Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives the &lt;strong&gt;&lt;em&gt;tight upper bound&lt;/em&gt;&lt;/strong&gt; of the given algorithm / function &lt;em&gt;f(n)&lt;/em&gt;. It is represented as &lt;/p&gt;

&lt;p&gt;&lt;code&gt;f(n) = O(g(n))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It means, for larger values of n, the &lt;em&gt;upper bound&lt;/em&gt; of function &lt;em&gt;f(n)&lt;/em&gt; is a function &lt;em&gt;g(n)&lt;/em&gt;. &lt;br&gt;&lt;br&gt;
Here &lt;em&gt;upper bound&lt;/em&gt; means, value of f(n) cannot exceed g(n) after a particular value of n. (represented as n0 in the graphical approach). &lt;br&gt;&lt;br&gt;
Let's see this with a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rnxIn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625574434388/c5xYTEjgFV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rnxIn-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625574434388/c5xYTEjgFV.jpeg" alt="asymptotic_notations-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;em&gt;n = n0&lt;/em&gt;, value of g(n) is always greater than or equal to the given algorithm's rate of growth f(n). &lt;/p&gt;

&lt;p&gt;Also, for example, if &lt;em&gt;f(n)&lt;/em&gt; = n&lt;sup&gt;4&lt;/sup&gt; + 100n + 50 is the given algorithm, then n&lt;sup&gt;4&lt;/sup&gt; is &lt;em&gt;g(n)&lt;/em&gt;. That means, &lt;em&gt;g(n) = n&lt;sup&gt;4&lt;/sup&gt;&lt;/em&gt; gives the maximum rate of growth for &lt;em&gt;f(n)&lt;/em&gt; at larger values of n. &lt;/p&gt;

&lt;p&gt;O-Notation can be also be defined as &lt;strong&gt;O(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constant c and n0 such that &lt;code&gt;0 ≤ f(n) ≤ cg(n)&lt;/code&gt; for all  n ≥ n0 }. &lt;/p&gt;

&lt;p&gt;Our objective is to get smallest rate of growth g(n) which is greater than or equal to f(n)'s rate of growth.&lt;br&gt;&lt;br&gt;
Generally we discard lower values of n. That means the rate of growth at lower values of n is not important. In the graph, n0 is the point from which we need to consider the rate of growths for a given algorithm. Below n0 the rate of growths could be different.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-big-o-examples"&gt;
  &lt;/a&gt;
  Some Big - O Examples:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;f(n) = n&lt;sup&gt;2&lt;/sup&gt; + 1&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;n&lt;sup&gt;2&lt;/sup&gt; + 1 ≤ 2n&lt;sup&gt;2&lt;/sup&gt;, for all n ≥ 1&lt;/p&gt;

&lt;p&gt;Therefore, n&lt;sup&gt;2&lt;/sup&gt; + 1 = O(n&lt;sup&gt;2&lt;/sup&gt;), with c = 2 and n0 = 1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;f(n) = 2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt; ≤ 2n&lt;sup&gt;3&lt;/sup&gt;, for all n ≥ 1&lt;/p&gt;

&lt;p&gt;Therefore, 2n&lt;sup&gt;3&lt;/sup&gt; - 2n&lt;sup&gt;2&lt;/sup&gt; = O(2n&lt;sup&gt;3&lt;/sup&gt;), with c = 2 and n0 = 1&lt;/p&gt;

&lt;p&gt;There is one more thing related to values of n0 and c, that is, there is no isolated set of values for n0 and c in finding the asymptotic bounds. Let us see an example, &lt;br&gt;
100n + 5 = O(n). For this function, there can be multiple values for n0 and c, giving us an asymptotic solution / bound.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution 1&lt;/strong&gt;: 100n + 5 ≤ 100n + n = 101n, for all n ≥ 5, n0 = 5 and c = 101. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Solution 2&lt;/strong&gt;: 100n + 5 ≤ 100n + 5n = 105n, for all n ≥ 1, n0 = 1 and c = 105.&lt;/p&gt;

&lt;p&gt;Both possibilities are correct.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Most of the time we are interested in knowing the Big - O Notation i.e. Tight Upper Bound of an algorithm because it allows us to estimate weather an algorithm is feasible for our application or not, by telling us that this algorithm will not take more than such-and-such amount of memory or time when run on an input of size n. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#omega-%CF%89-notation-"&gt;
  &lt;/a&gt;
  Omega - Ω Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives the &lt;strong&gt;&lt;em&gt;tight lower bound&lt;/em&gt;&lt;/strong&gt; of the given algorithm / function &lt;em&gt;f(n)&lt;/em&gt;. We can represent it as &lt;/p&gt;

&lt;p&gt;&lt;code&gt;f(n) = Ω(g(n))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It means, for larger values of n, g(n) is the &lt;em&gt;lower bound&lt;/em&gt; of function f(n). &lt;br&gt;&lt;br&gt;
Here &lt;em&gt;lower bound&lt;/em&gt; means, rate of growth of &lt;em&gt;f(n)&lt;/em&gt; is always greater than or equal to the rate of growth of function &lt;em&gt;g(n)&lt;/em&gt; after a particular value of n i.e. n0. &lt;br&gt;&lt;br&gt;
Let's see this with a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpcKJjGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625827947954/nqxScttcq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpcKJjGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625827947954/nqxScttcq.jpeg" alt="asymptotic_notations-2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After n = n0, value of g(n) is always smaller than or equal to the given algorithm's rate of growth f(n). &lt;/p&gt;

&lt;p&gt;Ω Notation can also be defined as &lt;strong&gt;Ω(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constants n0 and c such that* &lt;code&gt;0 ≤ cg(n) ≤ f(n)&lt;/code&gt; * for all n ≥ n0 }. &lt;/p&gt;

&lt;p&gt;Here, our objective is to get largest rate of growth g(n) which is less than or equal to f(n)'s rate of growth. g(n) is asymptotic lower bound for the given algorithm's rate of growth f(n).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-%CF%89-examples-"&gt;
  &lt;/a&gt;
  Some Ω Examples :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;f(n) = 5n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;∃ (there exists) c, n0, such that: 0 ≤ cn ≤ 5n&lt;sup&gt;2&lt;/sup&gt;  =&amp;gt; c = 1 and n0 = 1&lt;/p&gt;

&lt;p&gt;Therefore, 5n&lt;sup&gt;2&lt;/sup&gt; = Ω(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2n = Ω(n), n&lt;sup&gt;3&lt;/sup&gt; = Ω(n&lt;sup&gt;3&lt;/sup&gt;), logn = Ω(logn)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*&lt;em&gt;Note : *&lt;/em&gt;  Lower bounds are of great use as well. Lower bounds can give information about whether we can improve our algorithm or is it feasible. We can also know that our algorithm is optimal, if our lower bound is equal to the upper bound. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theta-%CE%B8-notation-"&gt;
  &lt;/a&gt;
  Theta - Θ Notation :
&lt;/h2&gt;

&lt;p&gt;This notation gives a range of upper bound and lower bound and determines whether the upper bound and lower bound of the given algorithm are same. The average running time of an algorithm is always between the &lt;strong&gt;lower bound&lt;/strong&gt; (&lt;em&gt;Omega - Ω&lt;/em&gt;) and &lt;strong&gt;upper bound&lt;/strong&gt; (&lt;em&gt;Big - O&lt;/em&gt;) of the function. If the upper bound and lower bound of a function gives the same result (rate of growth) then Theta - Θ will also have the same rate of growth. &lt;/p&gt;

&lt;p&gt;For example, assume f(n) = 10n + n, then its tight upper bound is O(n) and the lower bound is Ω(n). &lt;br&gt;
In this case, rate of growths in the best case and worst case are same. As a result, the average case will also be the same. &lt;br&gt;
If for a given algorithm, the rate of growths O and Ω are not same then the rate of growth for Θ may not be same. In this case, we have to consider all possible time complexities and take average of those. (for example, &lt;em&gt;quick sort&lt;/em&gt; average case gives Θ(nlogn) complexity)&lt;/p&gt;

&lt;p&gt;Let us also see this in a graphical approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-zjK8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625828191290/0lp6yHxKk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-zjK8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625828191290/0lp6yHxKk.jpeg" alt="asymptotic_notations-3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After n = n0, the value of f(n) is always between c2g(n) and c1g(n). &lt;/p&gt;

&lt;p&gt;Θ Notation can also be defined as &lt;strong&gt;Θ(g(n))&lt;/strong&gt; = { &lt;strong&gt;f(n)&lt;/strong&gt; : there exists positive constants c1, c2, and n0 such that*  0 ≤ c1g(n) ≤ f(n) ≤ c2g(n) , for all n ≥ n0 }. g(n) is an asymptotic tight bound for f(n).&lt;/p&gt;

&lt;p&gt;Θ(g(n)) is a set of functions with same order of growth as g(n).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-%CE%B8-examples"&gt;
  &lt;/a&gt;
  Some Θ Examples:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prove n ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;c1n&lt;sup&gt;2&lt;/sup&gt; ≤ n ≤  c2n&lt;sup&gt;2&lt;/sup&gt;, only holds for n ≤ 1 / &lt;br&gt;
 c1&lt;/p&gt;

&lt;p&gt;Therefore, n ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Prove 6n&lt;sup&gt;3&lt;/sup&gt; ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;
c1n&lt;sup&gt;2&lt;/sup&gt; ≤ 6n&lt;sup&gt;3&lt;/sup&gt; ≤  c2n&lt;sup&gt;2&lt;/sup&gt;, only holds for n ≤ c2 / 6&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, 6n&lt;sup&gt;3&lt;/sup&gt; ≠ Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-is-it-called-asymptotic-notations"&gt;
  &lt;/a&gt;
  Why is it called Asymptotic Notations?
&lt;/h4&gt;

&lt;p&gt;For all the three notations, O, Ω, Θ, in every case for a given function f(n) we are trying to find other function g(n) which approximates f(n) at large values of n. That means, g(n) is also a &lt;em&gt;curve&lt;/em&gt; which approximates f(n) at large values of n. &lt;/p&gt;

&lt;p&gt;In mathematics, we call such curves as &lt;strong&gt;asymptotic curves&lt;/strong&gt;. In other terms, g(n) is the asymptotic curve for f(n). For this reason, we call algorithm analysis as &lt;strong&gt;asymptotic analysis&lt;/strong&gt; and notations as &lt;strong&gt;asymptotic notations&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties-of-notations"&gt;
  &lt;/a&gt;
  Properties of Notations:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Transitivity&lt;/strong&gt; : f(n) = Θ(g(n)) and g(n) = Θ(h(n)), then f(n) = Θ(h(n)). Valid for O and Ω as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reflexivity&lt;/strong&gt; : f(n) = Θ(f(n)). Valid for O and Ω as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Symmetry&lt;/strong&gt; : f(n) = Θ(g(n)) if and only if g(n) = Θ(f(n)).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transpose symmetry&lt;/strong&gt; : f(n) = O(g(n)) if and only if g(n) = Ω(f(n)).&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#bonus-"&gt;
  &lt;/a&gt;
  Bonus :
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#master-theorem-for-divide-and-conquer"&gt;
  &lt;/a&gt;
  Master Theorem for Divide and Conquer
&lt;/h3&gt;

&lt;p&gt;All divide and conquer algorithms works by dividing the problem into sub-problems, each of which is part of the original problem and then we perform some additional work to compute the final answer. As an example, &lt;em&gt;merge sort&lt;/em&gt; algorithm operates on two sub problems, each of which is half the size of the original problem and then performs O(n) additional work for merging the sub-problems.&lt;/p&gt;

&lt;p&gt;This gives the running time of the equation : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T(n) = 2T(n / 2) + O(n)&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;Master theorem can be used to determine the running time of divide and conquer algorithms. For a given algorithm, first we try to find the recurrence relation of the problem. If the recurrence relation is of the below form then we can directly give the answer without fully solving it. &lt;/p&gt;

&lt;p&gt;If the recurrence relation is of the form, ** T(n) = aT(n / b) + Θ(n&lt;sup&gt;k&lt;/sup&gt;log&lt;sup&gt;p&lt;/sup&gt;n)**, where a ≥ 1, b &amp;gt; 1, k ≥ 0 and p is a real number, then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If a &amp;gt; b&lt;sup&gt;k&lt;/sup&gt;, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a = b&lt;sup&gt;k&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;If p &amp;gt; -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;log&lt;sup&gt;p+1&lt;/sup&gt;n).
&lt;/li&gt;
&lt;li&gt;If p = -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;loglogn).
&lt;/li&gt;
&lt;li&gt;If p &amp;lt; -1, then T(n) = Θ(n&lt;sup&gt;log&lt;sup&gt;a&lt;/sup&gt;b&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;If a &amp;lt; b&lt;sup&gt;k&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;If p ≥ 0, then T(n) = Θ(n&lt;sup&gt;k&lt;/sup&gt;log&lt;sup&gt;p&lt;/sup&gt;n) 
&lt;/li&gt;
&lt;li&gt;If p &amp;lt; 0, then T(n) = O(n&lt;sup&gt;k&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>Announcing a New Free Curriculum: IoT for Beginners</title>
      <author>Jim Bennett ☁️</author>
      <pubDate>Fri, 09 Jul 2021 16:22:23 +0000</pubDate>
      <link>https://dev.to/azure/announcing-a-new-free-curriculum-iot-for-beginners-5ca2</link>
      <guid>https://dev.to/azure/announcing-a-new-free-curriculum-iot-for-beginners-5ca2</guid>
      <description>&lt;p&gt;It is our very great pleasure to announce the release of a new, free, MIT-licensed open-source curriculum all about the Internet of Things: &lt;a href="https://aka.ms/iot-beginners"&gt;IoT for Beginners&lt;/a&gt;. Brought to you by a team of Azure Cloud Advocates, Program Managers, and &lt;a href="https://studentambassadors.microsoft.com/?WT.mc_id=academic-17441-jabenn"&gt;Microsoft Learn Student Ambassadors&lt;/a&gt;, we hope to empower students of all ages to learn the basics of IoT. Presuming no knowledge of IoT, we offer a free 12-week, 24-lesson curriculum to help you dive into this amazing field.&lt;/p&gt;

&lt;p&gt;If you liked our first two curricula, &lt;a href="https://aka.ms/webdev-beginners"&gt;Web Dev for Beginners&lt;/a&gt; and &lt;a href="https://aka.ms/ml-beginners"&gt;Machine Learning for beginners&lt;/a&gt;, you will love IoT for Beginners!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us-on-the-journey-of-your-food-from-farm-to-table"&gt;
  &lt;/a&gt;
  Join us on the journey of your food, from farm to table!
&lt;/h2&gt;

&lt;p&gt;🌽 Join us as we take the same journey as your food as it travels from farm to table, taking advantage of IoT on the way to improve farming, transport, manufacturing and food processing, retail and smart homes. 🌽&lt;/p&gt;

&lt;p&gt;Our curricula are structured with a modified Project-Based pedagogy and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pre-lesson warmup quiz&lt;/li&gt;
&lt;li&gt;a written lesson&lt;/li&gt;
&lt;li&gt;video&lt;/li&gt;
&lt;li&gt;knowledge checks&lt;/li&gt;
&lt;li&gt;a project to build&lt;/li&gt;
&lt;li&gt;infographics, sketchnotes, and visuals&lt;/li&gt;
&lt;li&gt;a challenge&lt;/li&gt;
&lt;li&gt;an assignment&lt;/li&gt;
&lt;li&gt;a post-lesson quiz&lt;/li&gt;
&lt;li&gt;opportunities to deepen your knowledge on Microsoft Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3vLiXhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh8zwiv1ikfycaiz9ce0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3vLiXhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh8zwiv1ikfycaiz9ce0.jpg" alt="A roadmap of the lessons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The lessons are grouped so that you can deep-dive into use cases of IoT. We start with an introduction to IoT, covering devices, sensors, actuators and cloud connectivity, where you will build an internet connected version of the "Hello world" of IoT, an LED. We then move on to farming, learning about digital agriculture and feedback loops to control automated watering systems. Your food then leaves the farm on trucks, and you learn how to track vehicles using GPS, visualize their journeys and get alerts when a truck approaches a processing plant. Once in the plant, we move to AIoT, learning how to distinguish between ripe and unripe fruit using AI models running from IoT devices and on the edge. Next we move to the supermarket, using IoT to manage stock levels. Finally we take the food home to cook, and learn about consumer smart devices, building a voice controlled smart timer that can even speak multiple languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h2&gt;

&lt;p&gt;The hard part (pun intended) for IoT is hardware, so we've designed this curriculum to be as accessible as possible. We want you to Learn IoT, not learn how to solder, know how to read resistor color codes, or know what a microfarad is, so we've made hardware choices to make things easier.&lt;/p&gt;

&lt;p&gt;You can choose to learn using microcontrollers using Arduino with a &lt;a href="https://www.seeedstudio.com/Wio-Terminal-p-4509.html"&gt;Wio Terminal&lt;/a&gt;, or single board computers using a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/"&gt;Raspberry Pi&lt;/a&gt;. We've also added a virtual hardware option so you can learn without having to purchase anything!&lt;/p&gt;

&lt;p&gt;For sensors and actuators, we've gone with the &lt;a href="https://www.seeedstudio.com/category/Grove-c-1003.html"&gt;Grove kit&lt;/a&gt; from &lt;a href="https://www.seeedstudio.com"&gt;Seeed Studio&lt;/a&gt;, with easy to connect sensors and actuators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BPFTGCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72a2qbz99w152787ihnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BPFTGCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/72a2qbz99w152787ihnk.png" alt="The Seeed studio logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our friends at Seeed have made it easy to buy the hardware, with packages containing all of the kit you need.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Wio-Terminal-Starter-Kit-p-5006.html"&gt;IoT for beginners with Seeed and Microsoft - Wio Terminal Starter Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.seeedstudio.com/IoT-for-beginners-with-Seeed-and-Microsoft-Raspberry-Pi-Starter-Kit.html"&gt;IoT for beginners with Seeed and Microsoft - Raspberry Pi 4 Starter Kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in learning using virtual hardware, you can write IoT code locally as if you were using a Raspberry Pi, then simulate sensors and actuators using &lt;a href="https://github.com/CounterFit-IoT"&gt;CounterFit&lt;/a&gt;, a free, open source tool for simulating hardware.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sneak-peek"&gt;
  &lt;/a&gt;
  A sneak peek
&lt;/h2&gt;

&lt;p&gt;This curriculum is filled with a lot of art, created by our team. Take a look at this cool sketchnote created by &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFmwlXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hyb1avye1l5w92kx5q8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFmwlXZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hyb1avye1l5w92kx5q8.png" alt="A sketch note visualizing lesson 1 of the curriculum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#without-further-ado-please-meet-iot-for-beginners-a-curriculum"&gt;
  &lt;/a&gt;
  Without further ado, please meet &lt;a href="https://aka.ms/iot-beginners"&gt;IoT For Beginners: A Curriculum&lt;/a&gt;!
&lt;/h2&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>iot</category>
      <category>python</category>
    </item>
    <item>
      <title>Itty Bitty</title>
      <author>Siddharth</author>
      <pubDate>Fri, 09 Jul 2021 16:15:40 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/itty-bitty-328f</link>
      <guid>https://dev.to/siddharthshyniben/itty-bitty-328f</guid>
      <description>&lt;p&gt;This is one of the strangest ideas I've ever seen in a while. Nicholas Jitkoff has made a tool called &lt;a href="https://itty.bitty.site/"&gt;itty.bitty&lt;/a&gt; that creates websites with all of the assets being contained within their own link. You can create a website without any HTML or CSS resources at all because it’s all been encoded into the URL itself.&lt;/p&gt;

&lt;p&gt;For example: take a look at this humongous link:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://itty.bitty.site/#About/XQAAAAI9BwAAAAAAAAAeHMqHyTY4PyKmqfkwr6ooCXSIMxPQ7ojYR153HqZD3W+keVdvwyoyd+luwncAksvskG/my97qDaUEyfDGB0QDbdURMwS0L90o5EpQ7O+BMmWrcB7fs71TJEJv1I/T/JfksoiYu9CqkeO/3MjEVGWv6XhfDjWJZ9laLARogtAZtwl7FltrwO/ppSfgeKOjxCxTNdUQH9WBM3de22qOzClzeZaSsSM+/ETbHBIHe1Qc+UF7PDfY470lZNjQg3wfOam9KudUiHOOQD3Kn8FLfaae0lmdK4VHRgxpDtL1nExkdF+pzNQAIyktIv3dQUPDKhGJ61c+WBTNP6NI5AvZ0uFT+Mc2oG0mMUwwuupCrjTxxpYv3l4L3W5lBXqWDjEH+cL8VZc6xz4WwIMG5J9jaQTv1SSxJ1dLg2Z2F7iNQ0fCFI74yeqBM1koHGbscBj4GpwWuA7y/fMCu3sEzcwefjBOuUwDdDfsdxqQLnjywtBxR5qHmngo/agjHyILkZxU8IiTgJeSbjcEOWdiVxcb9tEdtZ7eDwWQcwMsQdU9A9sCnargxl1IdVsbB9dfcFTQL8OpvjdqnmFZZJ6n2cKr51FonrcrMjm68aS4Lemk+D4sRaHnN+O5BrF10BiSfjumSkvhZ0Uwu/tR35LSmtC1UmVPgRNMwWkSHZjfjEdqueqhYglmB7nHQ8TDWCTb7lJLtTdhx1btg7UWsAuNIhffUpBo+T+3oh8sg8c41WaX5JaNL19UkD2M0qFd8Sayfr0qeGXnrLrKkS0t56ckjui2rTTmUDKFup4CnEtE7fu6nGYeGSoCwGoRlYQD/SU1/GSIWfs8hSpK3KeSZgUQXk14b7dh2LaqrVKGJLja/hFcQCt2gdGD+Ml+iH+Cy0lqj3D32RSarS3k4mJyTKsGnETyXVlCbJtC7kiZ/gZ7i8ChR2hL1qWb7ZInxaHN7WVbsLxZmEIp0Bf+we6YCbg0JrLMoTqXqfx7lb4bGgIRzD4Kz+U9pve9VS4eU4c7JKX6XVLqg56dRO7Kw8MVipjdSANC/f54eQJ+YfB3RYT4eih7PAmHp62d8GiCJABN36B6oiENrnHkBvFu9JPTwo6BStvfP+fZEKFoxaKO3f78thxD7GZdMp0PLwZagS3G6TDAdY1nwSqtQC0G/9GR+VUHkDi2Mz5yxc/r8tfic+7p22WjmOGSge8joCeO7y5NARFillrggokK5I9rjSYy/pnNrfHBbORUL1ZCBf4FrD4=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And a &lt;a href="https://itty.bitty.site/#About/XQAAAAI9BwAAAAAAAAAeHMqHyTY4PyKmqfkwr6ooCXSIMxPQ7ojYR153HqZD3W+keVdvwyoyd+luwncAksvskG/my97qDaUEyfDGB0QDbdURMwS0L90o5EpQ7O+BMmWrcB7fs71TJEJv1I/T/JfksoiYu9CqkeO/3MjEVGWv6XhfDjWJZ9laLARogtAZtwl7FltrwO/ppSfgeKOjxCxTNdUQH9WBM3de22qOzClzeZaSsSM+/ETbHBIHe1Qc+UF7PDfY470lZNjQg3wfOam9KudUiHOOQD3Kn8FLfaae0lmdK4VHRgxpDtL1nExkdF+pzNQAIyktIv3dQUPDKhGJ61c+WBTNP6NI5AvZ0uFT+Mc2oG0mMUwwuupCrjTxxpYv3l4L3W5lBXqWDjEH+cL8VZc6xz4WwIMG5J9jaQTv1SSxJ1dLg2Z2F7iNQ0fCFI74yeqBM1koHGbscBj4GpwWuA7y/fMCu3sEzcwefjBOuUwDdDfsdxqQLnjywtBxR5qHmngo/agjHyILkZxU8IiTgJeSbjcEOWdiVxcb9tEdtZ7eDwWQcwMsQdU9A9sCnargxl1IdVsbB9dfcFTQL8OpvjdqnmFZZJ6n2cKr51FonrcrMjm68aS4Lemk+D4sRaHnN+O5BrF10BiSfjumSkvhZ0Uwu/tR35LSmtC1UmVPgRNMwWkSHZjfjEdqueqhYglmB7nHQ8TDWCTb7lJLtTdhx1btg7UWsAuNIhffUpBo+T+3oh8sg8c41WaX5JaNL19UkD2M0qFd8Sayfr0qeGXnrLrKkS0t56ckjui2rTTmUDKFup4CnEtE7fu6nGYeGSoCwGoRlYQD/SU1/GSIWfs8hSpK3KeSZgUQXk14b7dh2LaqrVKGJLja/hFcQCt2gdGD+Ml+iH+Cy0lqj3D32RSarS3k4mJyTKsGnETyXVlCbJtC7kiZ/gZ7i8ChR2hL1qWb7ZInxaHN7WVbsLxZmEIp0Bf+we6YCbg0JrLMoTqXqfx7lb4bGgIRzD4Kz+U9pve9VS4eU4c7JKX6XVLqg56dRO7Kw8MVipjdSANC/f54eQJ+YfB3RYT4eih7PAmHp62d8GiCJABN36B6oiENrnHkBvFu9JPTwo6BStvfP+fZEKFoxaKO3f78thxD7GZdMp0PLwZagS3G6TDAdY1nwSqtQC0G/9GR+VUHkDi2Mz5yxc/r8tfic+7p22WjmOGSge8joCeO7y5NARFillrggokK5I9rjSYy/pnNrfHBbORUL1ZCBf4FrD4="&gt;clickable version&lt;/a&gt; If you like&lt;/p&gt;

&lt;p&gt;This link contains all of the HTML and CSS to be contained in the site. It's an awesome idea, so why don't you make your own &lt;a href="//itty.bitty.site"&gt;itty bitty site&lt;/a&gt;?&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amazing Music Card Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 09 Jul 2021 16:05:29 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-music-card-using-html-css-2o1d</link>
      <guid>https://dev.to/nikhil27b/amazing-music-card-using-html-css-2o1d</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Music Card Using HTML &amp;amp; CSS. this simple music card using gradient colors and flex also I added font awesome icons to create the controls also added some box-shadow for image. I hope you like this also comments about your thoughts.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/glassmorphism-sign-in-form-using-html-css-3a2a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Glassmorphism Sign In Form Using HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Jul 6 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/WNjxqKQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>70 lessons from the last year as a developer and co-founder</title>
      <author>Saunved</author>
      <pubDate>Fri, 09 Jul 2021 16:01:55 +0000</pubDate>
      <link>https://dev.to/saunved/70-lessons-from-the-last-year-as-a-developer-and-co-founder-5h2h</link>
      <guid>https://dev.to/saunved/70-lessons-from-the-last-year-as-a-developer-and-co-founder-5h2h</guid>
      <description>&lt;p&gt;This time last year, we changed our business model and began partnering with small businesses and startups to create tech solutions for them. &lt;/p&gt;

&lt;p&gt;This is an exhaustive list of things I've learned since then. The process of writing and organizing these helped me process the learnings better, and I hope it helps someone out there too.&lt;/p&gt;

&lt;p&gt;A few of these things might seem like common sense, but I learned them from experience so they had an impact on my behavior or my understanding of my work and life in general.&lt;/p&gt;




&lt;p&gt;Organized by&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#life"&gt;Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#business"&gt;Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech-and-ux"&gt;Tech and UX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech-for-everyone"&gt;Tech for everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech-for-developers"&gt;Tech for developers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#life"&gt;
  &lt;/a&gt;
  Life
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Communication is crucial for your survival in any profession. Just talk to people you're working with (or for) about your tasks. Drop them a message once a day at least and keep them in the loop, especially if you're going to be late with something.&lt;/li&gt;
&lt;li&gt;Most difficult problems are solved when you periodically step away and do something else for a bit.&lt;/li&gt;
&lt;li&gt;Coffee is your friend as long as it doesn't mess with your sleep cycle&lt;/li&gt;
&lt;li&gt;Writing your own tasks down on paper and crossing them out is more efficient and rewarding than any online tool.&lt;/li&gt;
&lt;li&gt;Walk around the house if you're on a phone call. It helps keep you active.&lt;/li&gt;
&lt;li&gt;Spending some time every day looking at trees and plants is very soothing.&lt;/li&gt;
&lt;li&gt;Hugging your pets at random intervals during the day is a free dose of happiness.&lt;/li&gt;
&lt;li&gt;An 18-minute nap in the afternoon does wonders for productivity&lt;/li&gt;
&lt;li&gt;Time tracking (using a tool like Toggl) for personal analysis is very useful. You begin to learn how you spend or waste time and even understand how to estimate time for tasks correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#business"&gt;
  &lt;/a&gt;
  Business
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Making an app or website for someone doesn't guarantee them sales, and convincing them otherwise can lead to very difficult conversations about their business model.&lt;/li&gt;
&lt;li&gt;More effort doesn't equal more reward. Pick your work wisely.&lt;/li&gt;
&lt;li&gt;Getting your personal, relationship, and business goals to align will take a toll on your mental health. It's best to process this in a healthy way. Talking to someone, writing about it, or simply being aware of what's causing you to feel a certain way helps a lot.&lt;/li&gt;
&lt;li&gt;If you can write well in at least one language, you can usually do well in any desk job. If you don't write well, start practicing. If you can't write well, focus on calling people and talking more on the phone. Either way, communicate.&lt;/li&gt;
&lt;li&gt;Running a startup means dealing with the fear of failure and doubt every day. That's okay. It can get better as long as you learn from it and communicate with your cofounders.&lt;/li&gt;
&lt;li&gt;Lesser-paying contracts can sometimes give way more happiness than higher-paying ones. Who your customer or client is matters a lot.&lt;/li&gt;
&lt;li&gt;A good designer can do wonders for your product. Don't hesitate to hire designers even if you are "decent" at design.&lt;/li&gt;
&lt;li&gt;Always get written contracts before starting any work. Verbal contracts and handshake contracts leave room for miscommunication.&lt;/li&gt;
&lt;li&gt;Always tell the truth about timelines. If something is going to take 8 weeks, don't say you can do it in 4 weeks.&lt;/li&gt;
&lt;li&gt;Always take an advance before starting any project. Decide your amount. For large contracts, 10% can be okay. For small contracts, 50% is good, but always take an advance.&lt;/li&gt;
&lt;li&gt;Adapt to the client's style of communication instead of forcing them to use a particular app or website. If your client likes email, use email. If they like Whatsapp, use Whatsapp. You'll just speed things up for yourself down the line.&lt;/li&gt;
&lt;li&gt;UI is what you interact with. UX is how you feel after you interact with it. The thinking processes involved in both are vastly different. Try NOT to use these terms interchangeably because they mean different things.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-and-ux"&gt;
  &lt;/a&gt;
  Tech and UX
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encourage designers/yourself to make designs for mobile-first (especially for websites). It's always easier to expand from a place of constraint than to contract design from a large space.&lt;/li&gt;
&lt;li&gt;Menu buttons should ideally be labeled "Menu" if they contain important links that cannot be found with other actions&lt;/li&gt;
&lt;li&gt;Users forget their passwords. Allow them to sign in through magic links too.&lt;/li&gt;
&lt;li&gt;Fall into the habit of writing user feedback loops. Basically, if the user does something, open a toast telling them that it's done. A simple "Data updated" toast builds trust with your system.&lt;/li&gt;
&lt;li&gt;Fall into the habit of adding loaders wherever network calls are made. It's super annoying to press a button and have nothing happen for 1 second. I have seen plenty of reputed websites that somehow think it's okay to do this.&lt;/li&gt;
&lt;li&gt;If an error occurs on a user action, NEVER show it as a disappearing toast. Make it persist on the screen until the user manually clears the error&lt;/li&gt;
&lt;li&gt;Don't use words like "Cancel" in a dialog box. Use "Back" instead. "Back" is comforting, it's a casual escape. "Cancel" is ambiguous and brings an alarming feeling, as if the user is doing something wrong.&lt;/li&gt;
&lt;li&gt;Always use the combination of "Sign in" and "Register". Never use "Sign in" + "Sign Up" or "log in" + "sign up". It's not easy on the eyes&lt;/li&gt;
&lt;li&gt;Have separate forms for registration and signing in, preferably on separate pages instead of in modals (for SEO purposes)&lt;/li&gt;
&lt;li&gt;Keep an easily accessible "Feedback" button in your application so users can report bugs and issues &lt;/li&gt;
&lt;li&gt;Well-tested user interfaces require fewer updates and are a joy to use even if they don't "look" great&lt;/li&gt;
&lt;li&gt;Always make sure your site has a navbar and a footer, otherwise it looks "naked"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-for-everyone"&gt;
  &lt;/a&gt;
  Tech for everyone
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Never buy hosting from GoDaddy. Use DigitalOcean or Vercel or Vultr&lt;/li&gt;
&lt;li&gt;Buy domains from Google or Namecheap.&lt;/li&gt;
&lt;li&gt;Web apps are not worth the hype until Apple decides to adopt and support them properly. You will still need an "app" to give an app-like experience with push notifications and other permissions on iOS.&lt;/li&gt;
&lt;li&gt;The largest delays in development and testing times are caused by third-party dependencies (e.g. payment gateways, email delivery services, etc.). Make sure you have all the documentation, approvals, and data formats available before the developers start coding anything.&lt;/li&gt;
&lt;li&gt;Live streaming is complicated, especially if there is an authentication layer associated with the stream. The most affordable custom live-streaming services I've found are OneStream, LivePush, and Castr.&lt;/li&gt;
&lt;li&gt;WordPress is still better than about 95% of the new content management systems out there (for general use cases of course).&lt;/li&gt;
&lt;li&gt;Strapi is a decent choice for a custom CMS, but it is by no means bug-free, especially when it comes to nested queries in GraphQL or renaming collections, or developing locally. Look for lighter alternatives before you get here.&lt;/li&gt;
&lt;li&gt;When most people say "AI", they usually mean "ML". When most people say "ML", they usually mean dynamic output based on user-input (which is basically a bunch of "if-else" statements).&lt;/li&gt;
&lt;li&gt;The concept of a blockchain is great, but 99% of the things you want to use blockchains for don't need a blockchain in the first place.&lt;/li&gt;
&lt;li&gt;No-code is a dangerous buzzword. If you want to do anything even slightly different (which is most things when you get into the details), you have to use code.&lt;/li&gt;
&lt;li&gt;After spending a copious amount of time convincing myself that NFTs are actually useful, I have concluded that they are worthless and anybody telling you otherwise just wants to make quick money and disappear.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-for-developers"&gt;
  &lt;/a&gt;
  Tech for developers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bundle your "admin" frontend with your normal user-side code. Creating a separate project means you probably won't maintain it properly.&lt;/li&gt;
&lt;li&gt;Brand new frameworks and libraries will fail you by virtue of being less tested or documented. Test them out in a sandbox for your use case first.&lt;/li&gt;
&lt;li&gt;Authentication on the web is a rabbit hole. Use cookies set by the server with httpOnly if you're confused.&lt;/li&gt;
&lt;li&gt;The Safari browser is the new Internet Explorer (at least for developers) due to poor support for modern CSS and JS features.&lt;/li&gt;
&lt;li&gt;The AWS documentation and UX needs a massive revamp. Also, avoid using AWS if you can.&lt;/li&gt;
&lt;li&gt;Utility frameworks (like Tailwind) are surprisingly good, but it's okay if you don't like them. Each to his/her own.&lt;/li&gt;
&lt;li&gt;The command line is a beautiful gift and you should definitely use it more if you don't already. Try it out for common tasks, stick to it for a few days, you won't feel like giving up the convenience.&lt;/li&gt;
&lt;li&gt;It helps to know at least one frontend framework, one backend framework, and one database. You'll be able to associate other "new" things with the existing ones if you need to later on.&lt;/li&gt;
&lt;li&gt;You "know" a framework when you deploy at least two projects to production and maintain them for a few months with 100+ monthly active users.&lt;/li&gt;
&lt;li&gt;If you don't want to stress out about there being a bug in your production, then, well... don't stress out about it. If there's a bug, it'll be reported eventually, and you will fix it eventually. Worry about it then.&lt;/li&gt;
&lt;li&gt;Most new bugs are introduced when fixing old bugs in a hurry. So test thoroughly and save yourself time later on.&lt;/li&gt;
&lt;li&gt;Backups. Always. Have. Backups. Especially if you're not quick on your feet. Doesn't matter where you are, who you are. Make it a part of your thinking process. Also, know how to restore those backups. Backups are restored rarely, but also in time-critical situations. So keep the steps written down somewhere you can find them later on.&lt;/li&gt;
&lt;li&gt;Serverless doesn't seem to be the future because of database, job scheduling, and management constraints.&lt;/li&gt;
&lt;li&gt;Coding slowly allows you to finish tasks faster than coding "fast" which just causes issues to crop up later and consumes more time overall.&lt;/li&gt;
&lt;li&gt;The less code you have in your codebase, the easier it will be to debug.&lt;/li&gt;
&lt;li&gt;Don't start coding a new module until you have a bird's eye view and the next 3 steps you're going to take and you fully understand the side effects they will have on the existing system.&lt;/li&gt;
&lt;li&gt;Note down crucial decisions in a README that is version controlled and update it every time you have discussions. We've tried saving crucial decisions in emails, in Confluence, in ClickUp, on Jira. None of these things work. Keep the decisions with your code. They will always be accessible.&lt;/li&gt;
&lt;li&gt;Try to figure out what's different between your development, staging, and production environments to avoid issues with deployments.&lt;/li&gt;
&lt;li&gt;Set release cycles for your products. E.g. every alternate Wednesday. Never deploy immediately before a vacation or a weekend.&lt;/li&gt;
&lt;li&gt;Replicate the prod database locally to test things out in a "real way"&lt;/li&gt;
&lt;li&gt;If you're coding in a hurry, you'll end up sacrificing on security since it's easy to overlook. Make sure you come back to do a security check later&lt;/li&gt;
&lt;li&gt;End-to-end encryption is complicated and causes lots of user experience issues, backup and restore issues, and maintenance headaches in general. If you don't need end-to-end encryption, don't use it.&lt;/li&gt;
&lt;li&gt;Don't buy SSL certificates unless there's a very good reason to do so. Free Let's Encrypt certificates are enough for most use cases.&lt;/li&gt;
&lt;li&gt;All frontend frameworks are pretty much similar in performance. Use what's convenient and what works for you.&lt;/li&gt;
&lt;li&gt;Event-based systems are easier to handle than implicit update systems (e.g. computed properties in Vue). Emit and consume events wherever possible to make your system easier to trace, predict, and debug. This is very useful with complex systems where computed or watched properties can end up in infinite loops.&lt;/li&gt;
&lt;li&gt;Debouncing is very useful when dealing with scroll effects or multiple simultaneous event updates. It allows the interface to update while delaying the execution of the tasks by a reasonable time.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I know this was a long read! Feel free to leave your thoughts on the list, especially if you strongly agree or disagree with something.&lt;/p&gt;

</description>
      <category>knowledge</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How you write your String matters: benchmarking PHP</title>
      <author>Andrea Olivato</author>
      <pubDate>Fri, 09 Jul 2021 16:01:51 +0000</pubDate>
      <link>https://dev.to/andreaolivato/how-you-write-your-string-matters-benchmarking-php-dlf</link>
      <guid>https://dev.to/andreaolivato/how-you-write-your-string-matters-benchmarking-php-dlf</guid>
      <description>&lt;p&gt;There are a lot of ways in which you can specify, use and print  &lt;a href="https://www.php.net/manual/en/language.types.string.php"&gt;string in PHP&lt;/a&gt;. They all have different benefits and drawbacks and that's not the content of this article. The focus of these tests is to determine how using different string specifications affects the performances of your PHP code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: Single quoted strings are the most performing, both for simple text and for concatenation with other variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h2&gt;

&lt;p&gt;Compared 3 types of string specification:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single Quoted (e.g. &lt;code&gt;echo 'string';&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Double Quoted (e.g. &lt;code&gt;echo "string";&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;HEREDOC (e.g. &lt;code&gt;echo &amp;lt;&amp;lt;&amp;lt;EOT string EOT;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each type of specification, 2 tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple string (e.g. &lt;code&gt;'string'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;String + a variable (e.g. &lt;code&gt;'string'.$var&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#iterations"&gt;
  &lt;/a&gt;
  Iterations
&lt;/h2&gt;

&lt;p&gt;In order to simulate a strong workload and have more data, the code ran 10 iterations with a 5-second pause. For each iteration 1 Million &lt;code&gt;echo&lt;/code&gt; were executed, without any pause.&lt;/p&gt;

&lt;p&gt;To make sure that the machine load doesn't skew the results, all the 3 different specifications are executed within the same iteration, one after the other, with the same 5-second delay. So at any point in time, the load should be equally distributed among the different specifications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buffer"&gt;
  &lt;/a&gt;
  Buffer
&lt;/h2&gt;

&lt;p&gt;Since the actual printing of the strings must not affect these tests, &lt;code&gt;ob_start()&lt;/code&gt; and &lt;code&gt;ob_end_clean()&lt;/code&gt; are used to not print anything, and &lt;code&gt;ob_clean()&lt;/code&gt; is used within each iteration to free up the buffer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;This is the code used to run the tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MAX_PER_ITERATION'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MAX_ITERATIONS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SLEEP_TIME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"TEST 1: Simple String&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'quote'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s1"&gt;'doublequote'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s1"&gt;'heredoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;MAX_ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Iteration "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start Single Quote tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Quote&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'quote'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start Double Quote tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Double Quote&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'doublequote'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start HEREDOC tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Heredoc&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;EOT&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt;
        &lt;span class="no"&gt;EOT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'heredoc'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$times&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Avg: "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$avg&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"TEST 2: String with Variable&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'quote'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s1"&gt;'doublequote'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="s1"&gt;'heredoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'string2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;MAX_ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Iteration "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start Single Quote tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Quote&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$variable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'quote'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start Double Quote tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Double Quote&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"string &lt;/span&gt;&lt;span class="nv"&gt;$variable&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'doublequote'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Start HEREDOC tests */&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Heredoc&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ob_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;MAX_PER_ITERATION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;EOT&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$variable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;EOT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;ob_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;ob_end_clean&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$times&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'heredoc'&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SLEEP_TIME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$times&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;Avg: "&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$avg&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary-results"&gt;
  &lt;/a&gt;
  Summary Results
&lt;/h2&gt;

&lt;p&gt;Unsurprisingly, the &lt;strong&gt;Single Quoted strings are the fastest&lt;/strong&gt;: as they don't require parsing for variables or special characters (e.g. &lt;code&gt;\n&lt;/code&gt;), they run quicker than the others both for simple strings and for variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple String: &lt;code&gt;0.3838947773&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;li&gt;String+Variable: &lt;code&gt;0.532834816&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Heredoc&lt;/strong&gt; performs a bit slower than Single Quoted strings, but faster than Double Quoted ones, especially when without variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple String: &lt;code&gt;0.387871933&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;li&gt;String+Variable: &lt;code&gt;0.553892827&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally &lt;strong&gt;Double Quoted&lt;/strong&gt; strings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple String: &lt;code&gt;0.3914105415&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;li&gt;String+Variable: &lt;code&gt;0.5623492718&lt;/code&gt; seconds for 1 Million executions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#complete-results"&gt;
  &lt;/a&gt;
  Complete Results
&lt;/h2&gt;

&lt;p&gt;Below you can see a sneak peak of the final results. If you click on the image or  &lt;a href="https://docs.google.com/spreadsheets/d/1D381g94mJwLDyUt8gqXf4A4l_RSYD1sHfaQ5g97f8J8/edit?usp=sharing"&gt;here&lt;/a&gt; , you can access a shared spreadsheet with the complete data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/1D381g94mJwLDyUt8gqXf4A4l_RSYD1sHfaQ5g97f8J8/edit?usp=sharing"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgpmDHsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625845740107/XcI6Qh9Ih.png" alt="Screenshot 2021-07-09 at 11.39.27 PM.png"&gt;&lt;br&gt;
&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systemversions"&gt;
  &lt;/a&gt;
  System/Versions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP 7.4.19&lt;/li&gt;
&lt;li&gt;Amazon Linux 2 AMI &lt;/li&gt;
&lt;li&gt;Kernel 4.14.232-177.418.amzn2.x86_64&lt;/li&gt;
&lt;li&gt;16GB Memory&lt;/li&gt;
&lt;li&gt;4 Virtual CPUs&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>benchmark</category>
      <category>performance</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
