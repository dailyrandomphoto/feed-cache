<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>a first look at postgraphile with railway</title>
      <author>anthony-campolo</author>
      <pubDate>Sat, 17 Jul 2021 22:04:09 +0000</pubDate>
      <link>https://dev.to/ajcwebdev/a-first-look-at-postgraphile-with-railway-1k9d</link>
      <guid>https://dev.to/ajcwebdev/a-first-look-at-postgraphile-with-railway-1k9d</guid>
      <description>&lt;p&gt;PostGraphile builds a GraphQL API from a PostgreSQL schema in seconds that automatically detects tables, columns, indexes, relationships, views, types, functions, and comments.&lt;/p&gt;

&lt;p&gt;By combining features such as PostgreSQL's &lt;a href="https://www.postgresql.org/docs/current/static/user-manag.html"&gt;role-based grant system&lt;/a&gt; and &lt;a href="https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html"&gt;row-level security policies&lt;/a&gt; with Graphile Engine's &lt;a href="https://www.graphile.org/graphile-build/look-ahead/"&gt;GraphQL look-ahead&lt;/a&gt; and &lt;a href="https://www.graphile.org/graphile-build/plugins/"&gt;plugin expansion&lt;/a&gt; technologies, PostGraphile ensures your generated schema is secure, performant and extensible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-provision-a-postgresql-database-with-railway"&gt;
  &lt;/a&gt;
  1. Provision a PostgreSQL database with Railway
&lt;/h2&gt;

&lt;p&gt;There are two ways to setup a PostgreSQL database with Railway, through the dashboard or through the CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railway-dashboard"&gt;
  &lt;/a&gt;
  Railway Dashboard
&lt;/h3&gt;

&lt;p&gt;Click &lt;a href="https://dev.new"&gt;dev.new&lt;/a&gt; and choose "Provision PostgreSQL" After the database is setup click "PostgreSQL" on the left and then choose "Connect". Copy and paste the PostgreSQL client command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railway-cli"&gt;
  &lt;/a&gt;
  Railway CLI
&lt;/h3&gt;

&lt;p&gt;First you need to &lt;a href="http://railway.app/"&gt;create a Railway account&lt;/a&gt; and install the &lt;a href="https://docs.railway.app/cli/installation"&gt;Railway CLI&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-railway-cli-version"&gt;
  &lt;/a&gt;
  Check Railway CLI version
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;railway version 0.2.40
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#login-with-raw-railway-login-endraw-"&gt;
  &lt;/a&gt;
  Login with &lt;code&gt;railway login&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-project-with-raw-railway-init-endraw-"&gt;
  &lt;/a&gt;
  Initialize project with &lt;code&gt;railway init&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Run the following command, select “Empty Project,” and give your project a name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#provision-postgresql-with-raw-railway-add-endraw-"&gt;
  &lt;/a&gt;
  Provision PostgreSQL with &lt;code&gt;railway add&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Run the following command and select PostgreSQL to add a plugin to your Railway project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;railway add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect-to-database-with-raw-psql-endraw-"&gt;
  &lt;/a&gt;
  Connect to database with &lt;code&gt;psql&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;xxxx&lt;/code&gt; with your database password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;PGPASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xxxx psql &lt;span class="nt"&gt;--host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;containers-us-west-2.railway.app &lt;span class="nt"&gt;--username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5675 &lt;span class="nt"&gt;--dbname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;railway
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;psql (13.3, server 13.2)
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

railway=# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#seed-database"&gt;
  &lt;/a&gt;
  Seed database
&lt;/h3&gt;

&lt;p&gt;Run the following SQL commands to create a test table with seed data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This is a blog post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Wooooooo'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Another blog post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Even better than the other!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxxAk42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93pzypyfryw1oqx5rjt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxxAk42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93pzypyfryw1oqx5rjt7.png" alt="01-railway-seed-data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-tables-in-database"&gt;
  &lt;/a&gt;
  List tables in database
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        List of relations
 Schema | Name | Type  |  Owner   
-------------+------+-------+----------
 public | post | table | postgres
(1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#describe-table"&gt;
  &lt;/a&gt;
  Describe table
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\d&lt;/span&gt; post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              Table "public.post"
 Column | Type | Collation | Nullable | Default 
-------------+------+-----------+----------+---------
 title  | text |           |          | 
 body   | text |           |          | 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quit-psql"&gt;
  &lt;/a&gt;
  Quit psql
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#copy-database-connection-string-to-clipboard"&gt;
  &lt;/a&gt;
  Copy database connection string to clipboard
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;railway variables get DATABASE_URL&lt;span class="sb"&gt;`&lt;/span&gt; | pbcopy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-introspect-database-with-postgraphile"&gt;
  &lt;/a&gt;
  2. Introspect Database with PostGraphile
&lt;/h2&gt;

&lt;p&gt;It is easy to install PostGraphile with &lt;a href="https://docs.npmjs.com/getting-started/installing-node"&gt;npm&lt;/a&gt;, although the PostGraphile documentation does not recommend installing PostGraphile globally if you want to use plugins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; postgraphile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not globally install you will need to add &lt;code&gt;npx&lt;/code&gt; the beginning of all &lt;code&gt;postgraphile&lt;/code&gt; commands in this tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introspect-railway-database"&gt;
  &lt;/a&gt;
  Introspect Railway Database
&lt;/h3&gt;

&lt;p&gt;Enter the following command to connect to your Railway database including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username - &lt;code&gt;postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Password - &lt;code&gt;xxxxxxxx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Host - &lt;code&gt;containers-us-west-10.railway.app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Port - &lt;code&gt;7215&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Database name - &lt;code&gt;railway&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;postgraphile &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'postgresql://postgres:xxxxxxxx@containers-us-west-10.railway.app:7215/railway'&lt;/span&gt; &lt;span class="nt"&gt;--watch&lt;/span&gt; &lt;span class="nt"&gt;--enhance-graphiql&lt;/span&gt; &lt;span class="nt"&gt;--dynamic-json&lt;/span&gt; &lt;span class="nt"&gt;--port&lt;/span&gt; 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;localhost:5001/graphiql&lt;/code&gt; and send the following query.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gui29kjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k67m0nstevn58dh85liy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gui29kjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k67m0nstevn58dh85liy.png" alt="02-postgraphile-graphiql"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-raw-post-endraw-request-to-the-endpoint-with-raw-curl-endraw-"&gt;
  &lt;/a&gt;
  Send &lt;code&gt;POST&lt;/code&gt; request to the endpoint with &lt;code&gt;curl&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--request&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; &lt;span class="s2"&gt;"http://localhost:5001/graphql"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"query":"{ query { allPosts { totalCount nodes { body title } } } }"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allPosts"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"totalCount"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Wooooooo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"This is a blog post"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Even better than the other!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Another blog post"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect-to-endpoint-with-ngrok"&gt;
  &lt;/a&gt;
  Connect to endpoint with ngrok
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; provides an instant, secure URL to your localhost server through any NAT or firewall where you can introspect all HTTP traffic running over your tunnels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./ngrok http 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Session Status                online
Account                       Anthony Campolo (Plan: Free)
Version                       2.3.40
Region                        United States (us)
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://363ef1ef5cf3.ngrok.io -&amp;gt; http://localhost:5001
Forwarding                    https://363ef1ef5cf3.ngrok.io -&amp;gt; http://localhost:5001

Connections                   ttl     opn     rt1     rt5     p50     p90
                              2       0       0.00    0.00    5.11    5.21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send the same query with your API tool of choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNPK2jx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdadlx9uykt31ie8k4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNPK2jx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmdadlx9uykt31ie8k4x.png" alt="03-all-posts-query"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>postgraphile</category>
      <category>postgres</category>
      <category>graphql</category>
      <category>railway</category>
    </item>
    <item>
      <title>Introduction to the Document Makeup Library (DML) </title>
      <author>Eckehard</author>
      <pubDate>Sat, 17 Jul 2021 21:32:46 +0000</pubDate>
      <link>https://dev.to/efpage/introduction-to-the-document-makeup-library-dml-1aak</link>
      <guid>https://dev.to/efpage/introduction-to-the-document-makeup-library-dml-1aak</guid>
      <description>&lt;p&gt;The web has evolved a lot since the days of Tim Berners-Lee, but we are still using some of the initial concepts. From a &lt;strong&gt;technical&lt;/strong&gt; view, HTML is superfuous: We can access the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"&gt;HTML-DOM-API&lt;/a&gt; directly to build the DOM. From a &lt;strong&gt;programmers&lt;/strong&gt; view, there are good reasons to &lt;a href="https://dev.to/efpage/what-s-wrong-with-webdesign-9dh"&gt;rethink the whole concept.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Maybe it´s time for a new approach.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/efpage/DML"&gt;Document Makeup Library&lt;/a&gt; &lt;strong&gt;(DML)&lt;/strong&gt; is a new Javascript library that has just been released as &lt;strong&gt;&lt;em&gt;Open Source&lt;/em&gt;&lt;/strong&gt;. DML makes it increadibly easy to build complex web applications using just vanilla javascript &lt;em&gt;(one language to rule them all...)&lt;/em&gt;. It let´s you create DOM elements using the tags you are used to - not in html, but from within Javascript. h1() creates an &amp;lt;h1&amp;gt;-element, p() a &amp;lt;p&amp;gt; and so on. This makes it possible to "bypass" the traditional HTML-approach completely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What´s the advantage?&lt;/em&gt;&lt;/strong&gt; Much more than you would think: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Element creation gains some programmatical "intelligence": You can create new elements on the fly using conditions If -&amp;gt; create element A, else -&amp;gt; create element B.&lt;/li&gt;
&lt;li&gt;Most Elements have been "pimped" a bit to be more accessible: Simply apply an array to a list using ul(["Milk","Butter","Tea"]) to create a populated list.&lt;/li&gt;
&lt;li&gt;DML functions return references to DOM elements, so there is no need to use "getElementById" anymore. It is even not neccessary to use ID´s and Classes at all (though you can still use them if you want). Because elements are created from within Javascript, DOM elements become part of Javascript objects giving direct access to the object state. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No need to use a virtual DOM&lt;/em&gt;, direct access is blazing fast on current browswers. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No need to use a Shadow DOM&lt;/em&gt;, as CSS properties can be fully encapsulated to prevent side effects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will find more useful aspects using the DML-approach. After a few days you will ask yourself how you did it before? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope-of-use"&gt;
  &lt;/a&gt;
  Scope of use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build complete web applications with DML from sratch (Which is prooved by the DML homepage and other applications). This is easier if you have some experience to use object oriented design patterns. &lt;/li&gt;
&lt;li&gt;Use Javascript functions and classes instead of templates and components. It is easy to create your own module libraries that provide reusable components&lt;/li&gt;
&lt;li&gt;DML also integrates seamlessly with other frameworks, as it does not presuppose a certain workflow.&lt;/li&gt;
&lt;li&gt;If you like them: DML is ideal to create webcomponents&lt;/li&gt;
&lt;li&gt;DML can also integrate existing webcomponent libraries into your workflow. Just write some short wrappers. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core of the DML-libary is free (Open Source under the  CC0-1.0 License), a complete introduction and reference can be found &lt;a href="https://efpage.de/DML/DML_homepage/index.html"&gt;here&lt;/a&gt;. There are some more advanced modules available for professional use (e.g a charting library with an unlimited number of axis on each side of a diagram). &lt;/p&gt;

&lt;p&gt;The homepage itself was created using DML too. It provides lot´s of "living" examples that can be changed to immediately see the effects. Please try out yourself! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-seo"&gt;
  &lt;/a&gt;
  What about SEO?
&lt;/h3&gt;

&lt;p&gt;It is true: DML creates dynamic websites, bypassing the traditional HTML-part (though you can still use HTML). Some search engines will not be able to read the content of your site then (beside Google, that can render and index dynamic pages too). But this is not different from React or Vue, that have a similar approach. DML is still a very young project, so server side rendering is not yet implemented.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>framework</category>
    </item>
    <item>
      <title>How to position items within a container using Flex Box ?</title>
      <author>Danyson</author>
      <pubDate>Sat, 17 Jul 2021 21:22:20 +0000</pubDate>
      <link>https://dev.to/danyson/how-to-position-items-within-a-container-using-flex-box-153o</link>
      <guid>https://dev.to/danyson/how-to-position-items-within-a-container-using-flex-box-153o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-create-a-container-with-items"&gt;
  &lt;/a&gt;
  1. Create a Container with items
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  Html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="item"&amp;gt;A&amp;lt;/div&amp;gt;
    &amp;lt;div class="item"&amp;gt;B&amp;lt;/div&amp;gt;
    &amp;lt;div class="item"&amp;gt;C&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    width: 720px;
    height: 480px;
    background-color: blue;
}

.item{
    font-size: 18px;
    text-align: center;
    padding: 5px 10px;
    border: 1px solid green;
    background-color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-apply-flex-box-to-the-container"&gt;
  &lt;/a&gt;
  2. Apply Flex Box to the container
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    display: flex; /* flex box applied here */
    width: 720px;
    height: 480px;
    background-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-add-flexdirection"&gt;
  &lt;/a&gt;
  3. Add Flex-Direction
&lt;/h1&gt;

&lt;p&gt;We can now add a ‘flex-direction’ property to the container and assign one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row;&lt;/code&gt; - Aligns items horizontally, left to right. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T758478y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yombmv9yuxazn217wrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T758478y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yombmv9yuxazn217wrx.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: column;&lt;/code&gt; - Aligns items vertically, top to bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDCqnrGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7oc3dbpdsmyor155yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDCqnrGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7oc3dbpdsmyor155yj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row-reverse;&lt;/code&gt;- Aligns items horizontally, right to left.;`&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtHvaYdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzwjh5tyn3dz2k3wj1bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtHvaYdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzwjh5tyn3dz2k3wj1bk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: column-reverse;&lt;/code&gt;- Aligns items vertically, bottom to top.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBb_dW84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaq2dero888y1848c9k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBb_dW84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaq2dero888y1848c9k9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-add-justifycontent"&gt;
  &lt;/a&gt;
  4. Add Justify-Content
&lt;/h1&gt;

&lt;p&gt;We can place the items at different positions along the container’s main axis by using the ‘justify-content’ property coupled with one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-start;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpsJD5bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6kieh5yz0wu5tkpcsnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpsJD5bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6kieh5yz0wu5tkpcsnv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-end;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afMg7oEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hqruc0kytqhjmctkik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afMg7oEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hqruc0kytqhjmctkik.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: center;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tgn-Xl6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ro2n75uj6env036jyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tgn-Xl6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ro2n75uj6env036jyg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-between;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ui9JI4PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82s0kmiig43k07oao0aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ui9JI4PB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82s0kmiig43k07oao0aw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-around;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRMa2Gis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/231vsqzhjoa2pc204isc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRMa2Gis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/231vsqzhjoa2pc204isc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: space-evenly;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzS7cIXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pawdeo9kjmginde5s0z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzS7cIXa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pawdeo9kjmginde5s0z2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-add-alignitems"&gt;
  &lt;/a&gt;
  5. Add Align-Items
&lt;/h1&gt;

&lt;p&gt;We can place the items at different along the container’s cross axis by using the ‘align-items’ property coupled with one of the following values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-start;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3LqzNZSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxbf1k66k5w34z2m1yq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3LqzNZSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxbf1k66k5w34z2m1yq9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-end;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FQ2kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsprtcdux0dvvb61631z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8FQ2kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsprtcdux0dvvb61631z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: center;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0nJme8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzkqlwxw8v5bw8ngqeaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0nJme8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzkqlwxw8v5bw8ngqeaj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: strech;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gh3zwZf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99gv7qus4j96pgdyu61i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gh3zwZf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99gv7qus4j96pgdyu61i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our Tech works @ &lt;a href="https://matrixautomata.netlify.app/"&gt;Matrix Automata&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Let’s say you’ve decided to start a startup in 2021
</title>
      <author>Alexander Buzin</author>
      <pubDate>Sat, 17 Jul 2021 20:52:24 +0000</pubDate>
      <link>https://dev.to/sasha240100/let-s-say-you-ve-decided-to-start-a-startup-in-2021-9da</link>
      <guid>https://dev.to/sasha240100/let-s-say-you-ve-decided-to-start-a-startup-in-2021-9da</guid>
      <description>&lt;p&gt;If you have just decided to begin your first startup journey — then you probably know nothing about startups. But no worries, the good thing about startups is that you will learn a lot. 82% of early-stage founders say they have to operate in areas they had almost no experience in before. For example, if you are a [former] Software Engineer (which is very common for early Tech startups), you are going to be involved in the design, marketing, management, sales, and even finance processes.&lt;/p&gt;

&lt;p&gt;Read more: &lt;a href="https://medium.com/projectium-network/lets-say-you-ve-decided-to-start-a-startup-in-2021-8171ce5af694"&gt;https://medium.com/projectium-network/lets-say-you-ve-decided-to-start-a-startup-in-2021-8171ce5af694&lt;/a&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>productivity</category>
      <category>podcast</category>
    </item>
    <item>
      <title>How I Deployed my First Machine Learning Model Using Streamlit (Part 1)</title>
      <author>omale happiness Ojone</author>
      <pubDate>Sat, 17 Jul 2021 20:31:39 +0000</pubDate>
      <link>https://dev.to/codinghappinessweb/how-i-deployed-my-first-machine-learning-model-using-streamlit-part-1-31h9</link>
      <guid>https://dev.to/codinghappinessweb/how-i-deployed-my-first-machine-learning-model-using-streamlit-part-1-31h9</guid>
      <description>&lt;p&gt;I believe most of you must have done some form of data science project at some point in your lives, be it a machine learning project, a deep learning project, or even visualizations of your data. And the best part of these projects is to showcase them to others.&lt;/p&gt;

&lt;p&gt;But the question is how will you showcase your work to others? Well, this is where Model Deployment will help you.&lt;/p&gt;

&lt;p&gt;In this article I will be showing you how I was able to deploy my first machine learning model using Streamlit.&lt;/p&gt;

&lt;p&gt;Streamlit is a popular open-source framework used for model deployment by machine learning and data science teams. And the best part is it’s free of cost and purely in python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KleoSPKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygnksdh285gffuu1j3v9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KleoSPKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygnksdh285gffuu1j3v9.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preparing-data-and-training-model"&gt;
  &lt;/a&gt;
  Preparing Data and Training Model
&lt;/h1&gt;

&lt;p&gt;We will first build a loan prediction model and then deploy it using Streamlit.&lt;/p&gt;

&lt;p&gt;The project that I have picked for this particular article is automating the loan eligibility process.&lt;/p&gt;

&lt;p&gt;The task is to predict whether the loan will be approved or not based on the details provided by customers.&lt;/p&gt;

&lt;p&gt;Based on the details provided by customers, we have to create a model that can decide whether or not their loan should be approved and point out the factors that will help us to predict whether the loan for a customer should be approved or not.&lt;/p&gt;

&lt;p&gt;As a starting point, here are a couple of factors that I think will be helpful for us with respect to this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amount of loan: The total amount of loan applied by the customer. My hypothesis here is that the higher the amount of loan, the lesser the chances of loan approval and vice versa.&lt;/li&gt;
&lt;li&gt;Income of applicant: The income of the applicant (customer) can also be a deciding factor. A higher income will lead to higher probability of loan approval.&lt;/li&gt;
&lt;li&gt;Education of applicant: Educational qualification of the applicant can also be a vital factor to predict the loan status of a customer. My hypothesis is if the educational qualification of the applicant is higher, the chances of their loan approval will be higher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to collect the data. And the dataset related to the customers and loan will be provided at the end of this article.&lt;/p&gt;

&lt;p&gt;We will first import the required libraries and then read the CSV file:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  import pandas as pd
  train = pd.read_csv('train_ctrUa4K.csv') 
  train.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1Bt3WHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2y3t00dsdaffv3vhdfm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1Bt3WHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2y3t00dsdaffv3vhdfm.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above are the first five rows from the dataset.&lt;/p&gt;

&lt;p&gt;We know that machine learning models take only numbers as inputs and can not process strings. So, we have to deal with the categorical features present in the dataset and convert them into numbers.&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; train['Gender']= train['Gender'].map({'Male':0, 'Female':1})
 train['Married']= train['Married'].map({'No':0, 'Yes':1})
 train['Loan_Status']= train['Loan_Status'].map({'N':0, 
 'Y':1})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Above, we have converted the categories present in the Gender, Married and the Loan Status variable into numbers, simply using the map function of pandas DataFrame object. Next, let’s check if there are any missing values in the dataset:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     train.isnull().sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3CREJC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3kerrp0kz1s8pkrhqi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3CREJC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3kerrp0kz1s8pkrhqi.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there are missing values inside many features including the Gender, Married, LoanAmount variable. Next, we will remove all the rows which contain any missing values in them:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;train = train.dropna()
train.isnull().sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xm19IIj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nrmx8274629cn13i8hr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xm19IIj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nrmx8274629cn13i8hr.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there are no missing values in the dataset. Next, we will separate the dependent (Loan_Status) and the independent variables:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  X = train[['Gender', 'Married', 'ApplicantIncome', 
      'LoanAmount', 'Credit_History']]
  y = train.Loan_Status
  X.shape, y.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjQi7Pmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzg5o5xj8wmp3sb4v44s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjQi7Pmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzg5o5xj8wmp3sb4v44s.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will first split our dataset into a training and validation set, so that we can train the model on the training set and evaluate its performance on the validation set.&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; from sklearn.model_selection import train_test_split
 x_train, x_cv, y_train, y_cv = train_test_split(X,y, 
 test_size = 0.2, random_state = 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We have split the data using the train_test_split function from the sklearn library keeping the test_size as 0.2 which means 20 percent of the total dataset will be kept aside for the validation set. Next, we will train using the random forest classifier:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      from sklearn.ensemble import RandomForestClassifier 
      model = RandomForestClassifier(max_depth=4, random_state 
      = 10) 
      model.fit(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, our model is trained, let’s check its performance on both the training and validation set:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      from sklearn.metrics import accuracy_score
      pred_cv = model.predict(x_cv)
      accuracy_score(y_cv,pred_cv)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OTFsi2K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6yxtxq93uyywiey0y4y.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTFsi2K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6yxtxq93uyywiey0y4y.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The model is 80% accurate on the validation set. Let’s check the performance on the training set too:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    pred_train = model.predict(x_train)
    accuracy_score(y_train,pred_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JFOd5Ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt833gsk6zapbftdk9qm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JFOd5Ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt833gsk6zapbftdk9qm.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Performance on the training set is almost similar to that on the validation set. So, the model has generalized well. Finally, we will save this trained model so that it can be used in the future to make predictions on new observations:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         # saving the model 
         import pickle 
         pickle_out = open("classifier.pkl", mode = "wb") 
         pickle.dump(model, pickle_out) 
         pickle_out.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We are saving the model in pickle format and storing it as classifier.pkl. This will store the trained model and we will use this while deploying the model.&lt;/p&gt;

&lt;p&gt;We will be deploying this loan prediction model using Streamlit which is a recent and the simplest way of building web apps and deploying machine learning and deep learning models.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#model-deployment-of-the-loan-prediction-model-using-streamlit"&gt;
  &lt;/a&gt;
  Model Deployment of the Loan Prediction Model using Streamlit
&lt;/h1&gt;

&lt;p&gt;Creating the app, we will start with the basic installations:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; !pip install -q streamlit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Streamlit will be used to make our web app.&lt;/p&gt;

&lt;p&gt;We have to create the python script for our app. Let me show the code first and then I will explain it to you in detail:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         import pickle
         import streamlit as st

         # loading the trained model
         pickle_in = open('classifier.pkl', 'rb') 
         classifier = pickle.load(pickle_in)

         @st.cache()

         # defining the function which will make the 
         prediction using the data which the user inputs 
         def prediction(Gender, Married, ApplicantIncome, 
             LoanAmount, Credit_History):   

             # Pre-processing user input    
             if Gender == "Male":
                Gender = 0
            else:
                Gender = 1

           if Married == "Unmarried":
              Married = 0
          else:
              Married = 1

          if Credit_History == "Unclear Debts":
             Credit_History = 0
         else:
             Credit_History = 1  

         LoanAmount = LoanAmount / 1000

         # Making predictions 
         prediction = classifier.predict( 
           [[Gender, Married, ApplicantIncome, LoanAmount, 
           Credit_History]])

         if prediction == 0:
            pred = 'Rejected'
         else:
             pred = 'Approved'
         return pred


        #this is the main function in which we define our 
        webpage  
       def main():       
       #front end elements of the web page 
       html_temp = """ 
       &amp;lt;div style ="background-color:yellow;padding:13px"&amp;gt; 
       &amp;lt;h1 style ="color:black;text-align:center;"&amp;gt;Streamlit 
       Loan 
       Prediction ML App&amp;lt;/h1&amp;gt; 
       &amp;lt;/div&amp;gt; 
       """

      #display the front end aspect
      st.markdown(html_temp, unsafe_allow_html = True) 

     #following lines create boxes in which user can enter 
     data 
     required to make prediction 
     Gender = st.selectbox('Gender',("Male","Female"))
     Married = st.selectbox('Marital Status', 
     ("Unmarried","Married")) 
     ApplicantIncome = st.number_input("Applicants monthly 
     income") 
     LoanAmount = st.number_input("Total loan amount")
     Credit_History = st.selectbox('Credit_History',("Unclear 
     Debts","No Unclear Debts"))
     result =""

    #when 'Predict' is clicked, make the prediction and store 
    it 
    if st.button("Predict"): 
       result = prediction(Gender, Married, ApplicantIncome, 
       LoanAmount, Credit_History) 
       st.success('Your loan is {}'.format(result))
       print(LoanAmount)

   if __name__=='__main__': 
        main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is the entire python script which will create the app for us. Let me break it down and explain in detail:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWM0LwVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6xo6pl502qs15c7l7pn.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWM0LwVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6xo6pl502qs15c7l7pn.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this part, we are saving the script as app.py, and then we are loading the required libraries which are pickle to load the trained model and streamlit to build the app. Then we are loading the trained model and saving it in a variable named classifier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5c9kUhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45qh2ozkjr469v5ajzhx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5c9kUhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45qh2ozkjr469v5ajzhx.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we have defined the prediction function. This function will take the data provided by users as input and make the prediction using the model that we have loaded earlier. It will take the customer details like the gender, marital status, income, loan amount, and credit history as input, and then pre-process that input so that it can be feed to the model and finally, make the prediction using the model loaded as a classifier. In the end, it will return whether the loan is approved or not based on the output of the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAfWMPfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8kwz1ddhwhf4qrg8qnb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAfWMPfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8kwz1ddhwhf4qrg8qnb.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is the main app. First of all, we are defining the header of the app. It will display “Streamlit Loan Prediction ML App”. To do that, we are using the markdown function from streamlit. Next, we are creating five boxes in the app to take input from the users. These 5 boxes will represent the five features on which our model is trained. &lt;/p&gt;

&lt;p&gt;The first box is for the gender of the user. The user will have two options, Male and Female, and they will have to pick one from them. We are creating a dropdown using the selectbox function of streamlit. Similarly, for Married, we are providing two options, Married and Unmarried and again, the user will pick one from it. Next, we are defining the boxes for Applicant Income and Loan Amount.&lt;/p&gt;

&lt;p&gt;Since both of these variables will be numeric in nature, we are using the number_input function from streamlit. And finally, for the credit history, we are creating a dropdown which will have two categories, Unclear Debts, and No Unclear Debts. &lt;/p&gt;

&lt;p&gt;At the end of the app, there will be a predict button and after filling in the details, users have to click that button. Once that button is clicked, the prediction function will be called and the result of the Loan Status will be displayed in the app. This completes the web app creating part. And you must have noticed that everything we did is in python. Isn’t it awesome?&lt;/p&gt;

&lt;p&gt;This part is for running the app on your local machine, not the acual deployment.&lt;br&gt;
I will be explaining the actual deployment in my next article.&lt;/p&gt;

&lt;p&gt;First run the .py file in the same directory on your cmd:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    streamlit run loan_prediction.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will generate a link, something like this:&lt;br&gt;
 Local URL: &lt;a href="http://localhost:8501"&gt;http://localhost:8501&lt;/a&gt;&lt;br&gt;
 Network URL: &lt;a href="http://192.168.43.47:8501"&gt;http://192.168.43.47:8501&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the link will vary at your end. You can click on the link which will take you to the web app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3a4CGvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvda6hcaryb4ssg5ixoa.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3a4CGvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvda6hcaryb4ssg5ixoa.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see, we first have the name displayed at the top. Then we have 5 different boxes that will take input from the user and finally, we have the predict button. Once the user fills in the details and clicks on the Predict button, they will get the status of their loan whether it is approved or rejected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ-M0IAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2qichvwvcxgxa1t0a0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ-M0IAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2qichvwvcxgxa1t0a0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it is as simple as this to build and deploy your machine learning models using Streamlit.&lt;/p&gt;

&lt;p&gt;Note, this part is for running the app on your local machine, not the acual deployment.&lt;/p&gt;

&lt;p&gt;I will be explaining the actual deployment in my next article.&lt;/p&gt;

&lt;p&gt;Link to part 2 of the article:&lt;a href="https://dev.to/codinghappinessweb/how-i-deployed-my-first-machine-learning-model-using-streamlit-part-2-103a"&gt;https://dev.to/codinghappinessweb/how-i-deployed-my-first-machine-learning-model-using-streamlit-part-2-103a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view the app via &lt;a href="https://share.streamlit.io/codinghappiness-web/loanprediction/main/loan_prediction.py/"&gt;Streamlit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can access the dataset&lt;a href="https://github.com/codinghappiness-web/streamlit_app.py/blob/main/train_u6lujuX_CVtuZ9i.csv"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And my jupyter notebook&lt;a href="https://github.com/codinghappiness-web/streamlit_app.py/blob/main/Loan%20Prediction.ipynb"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>streamlit</category>
      <category>modeldeployment</category>
    </item>
    <item>
      <title>Destructuring In JavaScript</title>
      <author>capscode</author>
      <pubDate>Sat, 17 Jul 2021 19:05:32 +0000</pubDate>
      <link>https://dev.to/capscode/destructuring-in-javascript-gcg</link>
      <guid>https://dev.to/capscode/destructuring-in-javascript-gcg</guid>
      <description>&lt;p&gt;Hello Devs, &lt;/p&gt;

&lt;p&gt;In this article we will learn Destructuring in JavaScript&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#one"&gt;Array Destructuring in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two"&gt;Additional use of Array Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#three"&gt;Assigning default values using destructuring assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#four"&gt;Destructuing of nested array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five"&gt;Object Destructuring in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#six"&gt;Nested object destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seven"&gt;Combined Array and Object Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Without wasting any time lets get into it,&lt;/p&gt;

&lt;p&gt;The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.&lt;/p&gt;

&lt;p&gt;But why do we need destructuring ?&lt;br&gt;
Lets first see the traditional way of accessing the array elements and object properties,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt; &lt;span class="c1"&gt;//john&lt;/span&gt;
&lt;span class="c1"&gt;//or&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//john&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Think of accessing elements or properties when the array or object is nested, its little complex.&lt;/p&gt;

&lt;p&gt;Now we will see how things gets simpler/ easier using Destructuring concept.&lt;/p&gt;

&lt;p&gt;A destructuring assignment looks like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;«pattern» = «value»&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-array-destructuring"&gt;
  &lt;/a&gt;
  1. Array Destructuring: &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;syntax:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;some_array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// older way&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//John Doe&lt;/span&gt;

&lt;span class="c1"&gt;//array destructuring way&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//John Doe&lt;/span&gt;

&lt;span class="c1"&gt;//what if there are more values in array&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;//we can use rest operator,&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-some-additional-use-of-destructuring"&gt;
  &lt;/a&gt;
  2. Some Additional use of Destructuring &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Works with any iterables of JavaScript&lt;/span&gt;
&lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;iterable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "a"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "b"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "c"&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "H"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["e", "l", "l", "o"]&lt;/span&gt;

&lt;span class="c1"&gt;//Swap variables trick using array destructuring&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;guest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Swap values: make guest=Pete, admin=Jane&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-we-can-also-assign-default-values-using-destructuring-assignment"&gt;
  &lt;/a&gt;
  3. we can also assign default values using destructuring assignment &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;// default values&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Julius&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// Julius (from array)&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Anonymous (default used)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-destructuing-of-nested-array"&gt;
  &lt;/a&gt;
  4. Destructuing of nested array &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yahoo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;comp1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comp2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comp3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comp3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//"yahoo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-object-destructuring"&gt;
  &lt;/a&gt;
  5. Object Destructuring &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;company&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//we can also use rest operator&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;what if we will use Destructuing assignment without declaration?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;company&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="c1"&gt;// error in this line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that JavaScript treats &lt;code&gt;{.....}&lt;/code&gt; in the main code flow (not inside another expression) as a code block. &lt;/p&gt;

&lt;p&gt;The parentheses &lt;code&gt;( ... )&lt;/code&gt; around the assignment statement are required when using object literal destructuring assignment without a declaration.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; is not valid stand-alone syntax, as the &lt;code&gt;{a, b}&lt;/code&gt; on the left-hand side is considered a block and not an object literal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// okay now&lt;/span&gt;
&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;company&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;🔥NOTE:&lt;/strong&gt; 🔥Your &lt;code&gt;(....)&lt;/code&gt; expression needs to be preceded by a semicolon or it may be used to execute a function on the previous line.&lt;br&gt;
I will tell why I am saying like this,&lt;br&gt;
just take a look at the below &lt;strong&gt;2 examples carefully&lt;/strong&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt;
&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//TypeError: (intermediate value)(intermediate value) is not a function&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;
&lt;span class="nx"&gt;somefunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//TypeError: somefunc(...) is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔥 What's happening is, Without the semicolon, when parsing, Javascript engine considers both lines as a single call expression.&lt;br&gt;
&lt;strong&gt;🔥 So if you are using &lt;code&gt;()&lt;/code&gt; after any &lt;code&gt;()&lt;/code&gt; then put &lt;code&gt;;&lt;/code&gt; after first &lt;code&gt;()&lt;/code&gt; 😅&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6nested-object-destructuring"&gt;
  &lt;/a&gt;
  6.Nested object destructuring &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;maths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;english&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// We define 3 local variables: name, maths, science&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;maths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//74&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;english&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#7combined-array-and-object-destructuring"&gt;
  &lt;/a&gt;
  7.Combined Array and Object Destructuring &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rahul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Rahul"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Destructuring values that are not an object, array, or iterable gives you a &lt;code&gt;TypeError&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NaN_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="c1"&gt;//TypeError: NaN is not iterable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Boolean_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: true is not iterable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Number_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;iterable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NULL_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nul&lt;/span&gt; &lt;span class="c1"&gt;//TypeError: null is not iterable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;undefined_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="c1"&gt;//TypeError: undefined is not iterable&lt;/span&gt;

&lt;span class="c1"&gt;// NOTE: String are iterable in JavaScript&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;String_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CapsCode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// "C"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this far. This is a brief introduction of &lt;strong&gt;Destructuring Assignment in JavaScript&lt;/strong&gt; .&lt;br&gt;
If you find this article useful, like and share this article. Someone could find it useful too. If you find anything technically inaccurate please feel free to comment below.&lt;/p&gt;

&lt;p&gt;Hope its a nice and informative read for you.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/#/blog"&gt;https://www.capscode.in/#/blog&lt;/a&gt; TO LEARN MORE...&lt;br&gt;
See you in my next Blog article, Take care!!&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/capscode"&gt;@capscode&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>NlphoseBuilder : A tool to create NLP pipelines via drag and drop</title>
      <author>code2k13</author>
      <pubDate>Sat, 17 Jul 2021 19:05:23 +0000</pubDate>
      <link>https://dev.to/code2k13/nlphosebuilder-a-tool-to-create-nlp-pipelines-via-drag-and-drop-4cga</link>
      <guid>https://dev.to/code2k13/nlphosebuilder-a-tool-to-create-nlp-pipelines-via-drag-and-drop-4cga</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✨Checkout the live &lt;a href="https://ashishware.com/static/nlphose.html"&gt;demo here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently  I completed work on a tool called &lt;a href="https://github.com/code2k13/nlphoseGUI"&gt;nlphoseGUIBuilder&lt;/a&gt; that allows creation of complex NLP pipelines visually, without writing a single line of code ! It uses &lt;a href="https://developers.google.com/blockly/"&gt;Blockly&lt;/a&gt; to enable creation of NLP pipelines using drag and drop. &lt;/p&gt;

&lt;p&gt;Currently following operations are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sentiment Analysis (AFINN)&lt;/li&gt;
&lt;li&gt;NER (Spacy)&lt;/li&gt;
&lt;li&gt;Language Identification (FastText)&lt;/li&gt;
&lt;li&gt;Chunking (NLTK)&lt;/li&gt;
&lt;li&gt;Sentiment Analysis (Transformers)&lt;/li&gt;
&lt;li&gt;Question Answering (Transformers)&lt;/li&gt;
&lt;li&gt;Zero shot Classification (Transformers)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tool generates a nlphose command that can be executed in a docker container to run the pipeline. These pipelines can process streaming text like tweets or static data like files. They can be executed just like normal shell command using &lt;a href="https://github.com/code2k13/nlphose"&gt;nlphose&lt;/a&gt;.  Let me show you what I mean !&lt;/p&gt;

&lt;p&gt;Below is pipeline that searches Twitter for tweets containing 'netflix' and performs named entity recognition on it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOvmDp2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiru18lsctkolq63i2j0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOvmDp2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiru18lsctkolq63i2j0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It generates a nlphose command which looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twint &lt;span class="nt"&gt;-s&lt;/span&gt; netflix |&lt;span class="se"&gt;\ &lt;/span&gt;
./twint2json.py |&lt;span class="se"&gt;\ &lt;/span&gt;
./entity  |&lt;span class="se"&gt;\ &lt;/span&gt;
./senti 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above pipeline is run using  &lt;a href="https://github.com/code2k13/nlphose"&gt;nlphose&lt;/a&gt;, you can expect to see stream of JSON output similar to the one shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;....
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"6a5fe972-e2e6-11eb-9efa-42b45ace4426"&lt;/span&gt;,
  &lt;span class="s2"&gt;"text"&lt;/span&gt;: &lt;span class="s2"&gt;"Wickham were returned, and to lament over his absence from the Netherfield ball. He joined them on their entering the town, and attended them to their aunt’s where his regret and vexation, and the concern of everybody, was well talked over. To Elizabeth, however, he voluntarily acknowledged that the necessity of his absence _had_ been self-imposed."&lt;/span&gt;,
  &lt;span class="s2"&gt;"afinn_score"&lt;/span&gt;: &lt;span class="nt"&gt;-1&lt;/span&gt;.0,
  &lt;span class="s2"&gt;"entities"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"label"&lt;/span&gt;: &lt;span class="s2"&gt;"PERSON"&lt;/span&gt;,
      &lt;span class="s2"&gt;"entity"&lt;/span&gt;: &lt;span class="s2"&gt;"Wickham"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"label"&lt;/span&gt;: &lt;span class="s2"&gt;"ORG"&lt;/span&gt;,
      &lt;span class="s2"&gt;"entity"&lt;/span&gt;: &lt;span class="s2"&gt;"Netherfield"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"label"&lt;/span&gt;: &lt;span class="s2"&gt;"PERSON"&lt;/span&gt;,
      &lt;span class="s2"&gt;"entity"&lt;/span&gt;: &lt;span class="s2"&gt;"Elizabeth"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets try out something more, the below pipeline searches for tweets containing the word 'rainfall' and then finds the location where it rained using 'extractive question answering'. It also filters out answers with lower scores.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gn0hIVGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4hdnfxqeodrk7ax2x92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gn0hIVGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4hdnfxqeodrk7ax2x92.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the nlphose command it generates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twint &lt;span class="nt"&gt;-s&lt;/span&gt; rainfall |&lt;span class="se"&gt;\ &lt;/span&gt;
./twint2json.py |&lt;span class="se"&gt;\ &lt;/span&gt;
./xformer.py &lt;span class="nt"&gt;--pipeline&lt;/span&gt; question-answering &lt;span class="nt"&gt;--param&lt;/span&gt; &lt;span class="s1"&gt;'where did it rain'&lt;/span&gt; |&lt;span class="se"&gt;\ &lt;/span&gt;
jq &lt;span class="s1"&gt;'if (.xfrmr_question_answering.score) &amp;gt; 0.80 then . else empty end'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to create a pipeline that processes multiple files from a folder :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfnnqJip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgj0aoiqlfnqj704xgu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfnnqJip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgj0aoiqlfnqj704xgu3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above pipeline generates this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./files2json.py &lt;span class="nt"&gt;-n&lt;/span&gt; 3  data/&lt;span class="k"&gt;*&lt;/span&gt;.txt |&lt;span class="se"&gt;\ &lt;/span&gt;
./xformer.py &lt;span class="nt"&gt;--pipeline&lt;/span&gt; question-answering &lt;span class="nt"&gt;--param&lt;/span&gt; &lt;span class="s1"&gt;'who gave the speech ?'&lt;/span&gt; |&lt;span class="se"&gt;\ &lt;/span&gt;
jq &lt;span class="s1"&gt;'if (.xfrmr_question_answering.score) &amp;gt; 0.80 then . else empty end'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Play with the tool here: &lt;a href="https://ashishware.com/static/nlphose.html"&gt;https://ashishware.com/static/nlphose.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the link to the projects git repository: &lt;a href="https://github.com/code2k13/nlphoseGUI"&gt;https://github.com/code2k13/nlphoseGUI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a YouTube link of the tool in action:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X-BmStLY-DY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Don't forget to checkout the repository of the companion project nlphose: &lt;a href="https://github.com/code2k13/nlphose"&gt;https://github.com/code2k13/nlphose&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>javascript</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Scrum: The Art of Doing Twice the Work in Half the Time by Jeff Sutherland</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 17 Jul 2021 18:18:32 +0000</pubDate>
      <link>https://dev.to/sandordargo/scrum-the-art-of-doing-twice-the-work-in-half-the-time-by-jeff-sutherland-2073</link>
      <guid>https://dev.to/sandordargo/scrum-the-art-of-doing-twice-the-work-in-half-the-time-by-jeff-sutherland-2073</guid>
      <description>&lt;p&gt;I recently read &lt;a href="https://devreads.sandordargo.com/clean-agile-by-uncle-bob/"&gt;Clean Agile by Uncle Bob&lt;/a&gt; and probably that's why my Kindle recommended me to read &lt;a href="https://amzn.to/3bqM0uK"&gt;Scrum: The Art of Doing Twice the Work in Half the Time&lt;/a&gt; on Agile by another founder of &lt;a href="https://agilemanifesto.org/"&gt;the Agile Manifesto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, if there is one person who is more equal among the 17 founders, maybe it's &lt;a href="https://twitter.com/jeffsutherland"&gt;Jeff Sutherland&lt;/a&gt;. At least in regards to Scrum. He clearly considers it the best way of doing things - if done right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deliver-more-with-less"&gt;
  &lt;/a&gt;
  Deliver more with less
&lt;/h2&gt;

&lt;p&gt;He brings examples to support his points. Not one or two but many.&lt;/p&gt;

&lt;p&gt;The most fascinating one is probably the one of the FBI. The Federal Bureau of Investigation had been using an ancient computer system. Maybe it'd be better to say system, without "computer". They had most of their reports on paper, but anyways, they used a gigantic mainframe system that was built in the 80s.&lt;/p&gt;

&lt;p&gt;It was called the Automated Case Support system and often agents avoided using it as it was so cumbersome and slow. Many claim that even 9/11 could have been prevented with a modern system. In any case, by 2001 a new system called the Virtual Case File system was under development.&lt;/p&gt;

&lt;p&gt;But it was a disaster. The project ran late. It was budgeted for $100 million, then when the project was killed in 2005 they had already spent $170 million.&lt;/p&gt;

&lt;p&gt;A new project was announced, Sentinel for $451 million and was promised to be fully operational by 2009.&lt;/p&gt;

&lt;p&gt;In 2010 already $405 million was spent, but only half of the project was developed and independent analysts estimated an additional 6 to 8 years of development and at least $350 million.&lt;/p&gt;

&lt;p&gt;That's the point when agile got involved and the new project lead promised a delivery for the fall of 2011 with an ~80% staff reduction and with the remaining budget.&lt;/p&gt;

&lt;p&gt;The project got late, but finally, Sentinel was turned on in July 2012 that's years before the previous estimation with much fewer people and money.&lt;/p&gt;

&lt;p&gt;Those who were responsible to turn the project around consider the usage of the agile methodology a game-changer. &lt;/p&gt;

&lt;p&gt;Not relying on fixed ways of working, but constantly trying new things to eliminate impediments and inefficiencies of the processes made the teams more committed and faster.&lt;/p&gt;

&lt;p&gt;Not relying on made-up yet rigid plans, but having a constantly updated view on the status and always taking the tasks that would bring the most value added the feeling of success and predictability. &lt;/p&gt;

&lt;p&gt;It let the project go even faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-of-gantt-charts"&gt;
  &lt;/a&gt;
  The problem of Gantt charts
&lt;/h2&gt;

&lt;p&gt;Who hasn't see &lt;a href="https://en.wikipedia.org/wiki/Gantt_chart"&gt;Gantt charts&lt;/a&gt;? You know it's the popular chart diagram showing tasks displayed against time.  &lt;/p&gt;

&lt;p&gt;It was designed during the beginning of 1910s by a person called Henry Gantt and it was meant to represent plans for systematic routine operations. &lt;/p&gt;

&lt;p&gt;One of its first major use was in the First World War by the US Army. World War I doesn't have the reputation of an organizational success story, yet we use this tool in modern project management shamelessly.&lt;/p&gt;

&lt;p&gt;And do you know what's the main characteristic of these charts? They lie. They always do. The plans look good, but they always fall apart almost immediately. Reality is not taken into account and at the first delay, at the first tiniest change it loses its relevance and it has to be redone. According to Sutherland, there used to be people whose job consisted of nothing more than preparing these charts and keep them up to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ooda-loop"&gt;
  &lt;/a&gt;
  The OODA loop
&lt;/h2&gt;

&lt;p&gt;Instead, Scrum is not about creating schedules in advance that cannot be hold. It's about adapting to a constantly changing environment.&lt;/p&gt;

&lt;p&gt;This need and the presented principles of adaption were extremely important at the Vietnam War where the author was a fighter pilot. &lt;/p&gt;

&lt;p&gt;At the US Air Force, he got a training that helped him (and many others) to never lose his cool. The four actions to follow was&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Observe&lt;/li&gt;
&lt;li&gt;Orient&lt;/li&gt;
&lt;li&gt;Decide&lt;/li&gt;
&lt;li&gt;Act&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also called the &lt;a href="https://en.wikipedia.org/wiki/OODA_loop"&gt;OODA loop&lt;/a&gt; which was formalized by Colonel John Boyd.&lt;/p&gt;

&lt;p&gt;Take the 4 actions in loops. It's such an important concept that there is even a street in Alabama named after it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuATLVE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnp5icvtrm4xrs6g6mj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuATLVE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnp5icvtrm4xrs6g6mj.jpg" alt="OODA Loop, Alabama"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, both in warfare and business, you have to &lt;strong&gt;observe&lt;/strong&gt; the situation, you have to understand the big picture. Then you have to &lt;strong&gt;orient&lt;/strong&gt; yourself not just in a way to understand where you are, but you also have to take into account what you're capable of seeing.&lt;/p&gt;

&lt;p&gt;With proper observation and orientation, you can (and have to) quickly &lt;strong&gt;make decisions&lt;/strong&gt; and &lt;strong&gt;act&lt;/strong&gt; upon them and then start the loop over.&lt;/p&gt;

&lt;p&gt;In scrum, the result of such a loop is a working increment that helps the product owner to decide what's the next most important story to act upon, what will bring the most value to the customer.&lt;/p&gt;

&lt;p&gt;There is Gantt chart to follow, there is the constantly changing world around us that we have to observe and orient ourselves within.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#size-matters"&gt;
  &lt;/a&gt;
  Size matters
&lt;/h2&gt;

&lt;p&gt;One more interesting thing I wanted to mention from the book is that size matters and maybe a different way that you'd expect. I say maybe because if you've read the seminal book of Fred Brooks, &lt;a href="https://amzn.to/3uQ4sny"&gt;The Mythical Man-Month&lt;/a&gt; you probably remember that simply adding more people to a project will not make it go faster.&lt;/p&gt;

&lt;p&gt;Team dynamics form more difficult at scale. A lot.&lt;/p&gt;

&lt;p&gt;It seems that this has something to do with our short term memory. As it was shown by studies, an average person can retain about seven items in their short-term memory. That's also the ideal size of the team.&lt;/p&gt;

&lt;p&gt;You might err by +-2, but if you do, you should do on the negative side. Think about the number of communication channels in a team (n*(n-1)/2), where n is the number of members.&lt;/p&gt;

&lt;p&gt;I never understand when managers form 10+ agile teams. They never work, people usually don't even know who the others are (especially in remote teams), what they do, why they are there. If you have such a team, it will naturally break down into smaller entities, but it's not something positive either.&lt;/p&gt;

&lt;p&gt;Avoid it by forming small teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The end of the book could have been left out. No matter which side you are, you shouldn't involve politics in professional books I think and I say that as someone who was actively involved in politics. You have to be able to draw some borders. &lt;/p&gt;

&lt;p&gt;Apart from that, I think &lt;a href="https://amzn.to/3bqM0uK"&gt;it's an inspiring book&lt;/a&gt; with many real-life examples and pieces of advice. Some I'll follow, like the OODA principle and some I'd be happy if managers would follow such as the number of people on a team.&lt;/p&gt;

&lt;p&gt;And if you've never seen a successful agile project (like many of us), then at least you'll have a few references.&lt;/p&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>agile</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>Learnings from Javascript 30 - Building a JS Drum Kit</title>
      <author>Yaman Sharma</author>
      <pubDate>Sat, 17 Jul 2021 18:18:30 +0000</pubDate>
      <link>https://dev.to/yaman27/learnings-from-javascript-30-building-a-js-drum-kit-40dl</link>
      <guid>https://dev.to/yaman27/learnings-from-javascript-30-building-a-js-drum-kit-40dl</guid>
      <description>&lt;p&gt;This is the first post of the Learnings from Javascript30 Series where we will be covering what we learned from each day of Javascript30, a series by Wesbos.&lt;/p&gt;

&lt;p&gt;In the first lesson of Javascript30, We build a drum kit where user can create their own tunes by clicking alphabetic keys. Get the full Source Code &lt;a href="https://github.com/YyamanSharma/Javascript30/tree/master/01%20-%20JavaScript%20Drum%20Kit"&gt;here&lt;/a&gt; on my &lt;a href="https://github.com/YyamanSharma"&gt;Github&lt;/a&gt; Repo. &lt;/p&gt;

&lt;p&gt;The learnings from the project :-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-datakey-attributes"&gt;
  &lt;/a&gt;
  1. Data-Key Attributes:
&lt;/h4&gt;

&lt;p&gt;data-* attributes allows us to store extra information on html elements. So, if there's a attribute on an HTML element which starts with data- , it's called a data-attribute.&lt;/p&gt;

&lt;p&gt;e.g. data-key=65 is a data-attribute for the below element&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqB8od09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afl7obuko43szr7jzzji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqB8od09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afl7obuko43szr7jzzji.png" alt="Data-Key Attribute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can get the value of data attribute by using getAttribute() or can read/write using dataset property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYs-r-c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o444pntxnti77lxbvo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYs-r-c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o444pntxnti77lxbvo8.png" alt="Accessing data-key attribute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-audio-element"&gt;
  &lt;/a&gt;
  2. Audio Element:
&lt;/h4&gt;

&lt;p&gt;The audio element is used to add audio content in html pages.&lt;br&gt;
It can take multiple attributes but the most common and necessary one is the src attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XaHTT_6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biebw92p16n5rr2wvpuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaHTT_6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biebw92p16n5rr2wvpuy.png" alt="Audio Element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can even provide multiple source attributes so that if first one doesn't load, it can fall back to the others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63IMWlEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb43er1p2t1mreevrzi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63IMWlEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb43er1p2t1mreevrzi8.png" alt="Audio Element with multiple src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Various methods associated with audio are play(), pause() etc and properties like muted, loop, currentTime etc which gives us more control over the audio element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-transitionend-event"&gt;
  &lt;/a&gt;
  3. TransitionEnd Event
&lt;/h4&gt;

&lt;p&gt;The transitionend event is fired when a CSS transition is completed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yG-h08qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1mh67meulnymjifaw09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yG-h08qr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1mh67meulnymjifaw09.png" alt="transitionend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our project, we wanted to remove the styling of the key once the css transform transition has ended. Hence we added the event listener on all the keys and checks if transform has occured. If yes, remove the styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnLpSjCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qomi6d1rlbh37pri3yfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnLpSjCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qomi6d1rlbh37pri3yfj.png" alt="remove styling on transitionend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many other events like transitionstart, tranistioncancel etc which can be useful while working with animations.&lt;/p&gt;

&lt;p&gt;Javascript30 is a great learning series for a novice as well as an experienced developer because you will be learning a lot of stuffs which is either not known to you or can be helpful to fill the learning gaps.&lt;/p&gt;

&lt;p&gt;Hope you liked the post and learned something along the way! 😃&lt;/p&gt;

&lt;p&gt;✋ Hey! Before you go 🏃‍&lt;br&gt;
If you enjoyed this article, You can also follow me on&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/yamansharma27/"&gt;LinkedIN&lt;/a&gt; | &lt;a href="https://dev.to/yaman27"&gt;Dev.to&lt;/a&gt; | &lt;a href="https://github.com/YyamanSharma"&gt;Github&lt;/a&gt; | &lt;a href="https://twitter.com/YyamanSharma"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next blog, we will cover the learnings from second day of Javascript30, so stay tuned! ✨&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>javascript30</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to deploy a ML model as an API </title>
      <author>Nabil Alamin</author>
      <pubDate>Sat, 17 Jul 2021 18:12:25 +0000</pubDate>
      <link>https://dev.to/arndom/how-to-deploy-a-ml-model-as-an-api-using-google-compute-engine-docker-and-flask-3gab</link>
      <guid>https://dev.to/arndom/how-to-deploy-a-ml-model-as-an-api-using-google-compute-engine-docker-and-flask-3gab</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello 👋&lt;/strong&gt;, this is a quick guide into deploying a ml model as an API, so lets get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;First of the model we are going to be making use of is a &lt;em&gt;Deepfake&lt;/em&gt; model by the name of &lt;a href="https://aliaksandrsiarohin.github.io/first-order-model-website/"&gt;First Order Motion&lt;/a&gt;. Deepfakes you allow you create an artificial version of a person saying or doing an action, I first found about this particular model on two minute papers (an awesome YT channel for lovers of AI ⚡) and wanted to try it for myself. The video below talks more about the model.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mUfJOQKdtAk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this article we will be taking this model which could only be tested using the jupyter file in the &lt;a href="https://github.com/AliaksandrSiarohin/first-order-model"&gt;repo&lt;/a&gt; and through the power of python and cloud computing we can access it as an API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used"&gt;
  &lt;/a&gt;
  Tools used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python and Flask: to make the API.&lt;/li&gt;
&lt;li&gt;Docker: to build the docker image of the API &lt;/li&gt;
&lt;li&gt;Google Account with Billing and Compute Engine enabled: To Create the VM instance where the container will be deployed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Make the &lt;a href="https://gist.github.com/arndom/7a40bfd2a5ea9bbcd2f7076bb79ab638"&gt;app.py&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the main file of the project, it is where the APIs default and post requests are defined. The route for the home page can be easily defined by routing  to "/" and defining a landing html file as can be shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route("/")
def homepage():
    return render_template("index.html", title="JUST WORK")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is defining the post request, which does the work of making the specified image mirror the specified video. The function to make this request is based on the inference of the model as seen in this colab &lt;a href="https://github.com/AliaksandrSiarohin/first-order-model/blob/master/old_demo.ipynb"&gt;notebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqgqlMyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626526268602/vjsZEoXYsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqgqlMyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626526268602/vjsZEoXYsg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This inference was then given the route "/post" and the appropriate headers as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route('/post', methods=['GET', 'POST'])
@cross_origin(origin='*',headers=['Content-Type','Authorization'])
def post():
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The post function has some alterations and tweaks from the original used in the notebook due handling the inputs and their processing after which it was basically the exact same use of the functions of  loading the model checkpoints and making the deepfake;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generator, kp_detector = load_checkpoints(config_path='config/vox-256.yaml', checkpoint_path='../vox-cpk.pth.tar', cpu=True) # for gpu specify as false
print("generator done")

predictions = make_animation(source_image=image,driving_video=driving_video, generator=generator, kp_detector=kp_detector, relative=True, cpu=True
                                                  ) # for gpu specify as false

imageio.mimsave('generatedVideo.mp4', [img_as_ubyte(frame) for frame in predictions], fps=fps)    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full code can be found &lt;a href="https://gist.github.com/arndom/7a40bfd2a5ea9bbcd2f7076bb79ab638"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you followed the above, you can test it locally and see some nice results, here's an example test script &amp;amp; the result&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;test script ⬇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
resp = requests.post("http://localhost:5000/post",
                     files={"image": open('02.png','rb'), # 94kb file
                             "video": open('test.mp4','rb') # 10secs vid 
                            })
## output generation took 03m:03s on cpu (AMD ryzen 7 4800HS)
## for best result use a gpu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;result ⬇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x7KkLzk3b5k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Make the &lt;a href="https://gist.github.com/arndom/e65617b4745d82c68ec26d3c4853e90f"&gt;Dockerfile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There wasn't much to change from the dockerfile provided in the &lt;a href="https://github.com/AliaksandrSiarohin/first-order-model/blob/master/Dockerfile"&gt;repo&lt;/a&gt; except for some additions as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM nvcr.io/nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04

RUN DEBIAN_FRONTEND=noninteractive apt-get -qq update \
 &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get -qqy install python3-pip ffmpeg git less nano libsm6 libxext6 libxrender-dev \
 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

COPY . /app/
WORKDIR /app

RUN pip3 install --upgrade pip
RUN pip3 install \
  https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl \
  git+https://github.com/1adrianb/face-alignment \
  -r requirements.txt

ENTRYPOINT [ "python3" ]

CMD [ "app.py" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### requirements.txt
imageio
imageio-ffmpeg
matplotlib
numpy
pandas
python-dateutil
pytz
PyYAML
scikit-image
scikit-learn
scipy
torch
torchvision
tqdm
IPython
flask
flask_cors
requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NB: The best thing to do would be to edit the dockerfile  and requirements.txt(can be seen above) then add the app.py to a forked version of this &lt;a href="https://github.com/AliaksandrSiarohin/first-order-model"&gt;repo&lt;/a&gt; so the container image can be built successfully&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Deploy to google cloud platform as a VM instance on compute engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So first you need to have a google account, then if this your first time using the google cloud platform you would get $300 worth of cloud credit which comes in handy for this and any other projects later on. Let's get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a project on GCP(google cloud platform) eg: "photo-mirrors-video" &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_-2c-Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626537867278/rxlMloIPy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_-2c-Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626537867278/rxlMloIPy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Open your cloud shell editor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuZkxbO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626537989419/F-pQ85uPn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuZkxbO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626537989419/F-pQ85uPn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the cloud shell terminal copy the below to enter your current project. The project id in this case is "photo-mirrors-video"
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcloud config set project [PROJECT_ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq0FwkrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538034481/t2OA-nntf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq0FwkrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538034481/t2OA-nntf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Upload a folder containing your version of this project. The uploaded folder should have a structure similar to this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jscMmr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538468694/MDa7mfsza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jscMmr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538468694/MDa7mfsza.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Make sure&lt;/strong&gt; you followed up till this point and enter this command in the terminal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcloud builds submit --tag gcr.io/[PROJECT_ID]/chosen-image-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once the container has finished building it will be deployed to your google container &lt;a href="https://cloud.google.com/container-registry"&gt;registry&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to the cloud console &lt;a href="https://console.cloud.google.com/"&gt;dashboard&lt;/a&gt; and navigate to the compute engine option and select vm instance. Once opened click create instance&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2T9euchN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538746822/rj45z42gM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2T9euchN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626538746822/rj45z42gM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Under machine configuration have a minimum of v8CPUs to run the container( A GPU would have  been ideal but the model was built with torch 1.0 so there are compatibility issues for the available configurations) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the container and specify the address of your container. (also check all the boxes under advanced)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00xajNZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539209563/l5y4WUMc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00xajNZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539209563/l5y4WUMc3.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Specify 30gb as the size of the container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow http traffic for the firewall.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtV17wjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539330516/FXYaViIH0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtV17wjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539330516/FXYaViIH0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give it some minutes and your API should be &lt;strong&gt;live&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For the sake of this example go and edit this firewall http &lt;a href="https://console.cloud.google.com/networking/firewalls/details/default-allow-http"&gt;rule&lt;/a&gt; to allow all ports to access the IP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_XGLIeut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626540221402/CAi_ivg24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XGLIeut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626540221402/CAi_ivg24.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can  go to the external IP and add port 5000 which will take you to the index and should display this: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqWMVV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539840944/vAgEH-vcT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqWMVV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626539840944/vAgEH-vcT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you've followed up to this point, you successfully made an ml model an API, Congratulations 👏👏.  Thanks for sticking with me so far so and stay tuned for more how-to posts. Been a pleasure sharing what I've learnt this week 👋 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6EhGvKschtbrRjX2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6EhGvKschtbrRjX2/giphy.gif" alt="giph"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Managing remote servers with SSH connection: using Windows and Linux</title>
      <author>Lorenzo Costa</author>
      <pubDate>Sat, 17 Jul 2021 17:54:19 +0000</pubDate>
      <link>https://dev.to/costa86/managing-remote-servers-with-ssh-connection-using-windows-and-linux-45im</link>
      <guid>https://dev.to/costa86/managing-remote-servers-with-ssh-connection-using-windows-and-linux-45im</guid>
      <description>&lt;p&gt;Among the benefits to using SSH to manage remote machines, we can list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need for passwords&lt;/li&gt;
&lt;li&gt;Encrypted communication&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Many people, specially for &lt;code&gt;Windows OS&lt;/code&gt;, tend to recommend a GUI client called &lt;code&gt;PuTTY&lt;/code&gt; to set SSH connections. If you are on &lt;code&gt;Windows 10&lt;/code&gt;, &lt;code&gt;OpenSSH&lt;/code&gt; is already native on you computer, so do not bother installing &lt;code&gt;PuTTY&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the end of this article you will have learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create remote &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create SSH connection from &lt;code&gt;Windows/Linux&lt;/code&gt; devices to access these &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Disable password authentication on the &lt;code&gt;servers&lt;/code&gt;, so they will become less vulnerable to brute-force attacks&lt;/li&gt;
&lt;li&gt;Transfer files back and forth between local devices and these &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Host your custom website on remote &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-remote-servers"&gt;
  &lt;/a&gt;
  Creating remote servers
&lt;/h2&gt;

&lt;p&gt;We will use &lt;a href="https://cloud.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; for this part. Creating a &lt;code&gt;server&lt;/code&gt; is very straightforward. Look for a &lt;strong&gt;create droplet&lt;/strong&gt; option there. Here we have some settings suggestions for the new &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Choose a image/OS&lt;/strong&gt;: Ubuntu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Choose plan&lt;/strong&gt;: The cheapest one&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Choose a datacenter&lt;/strong&gt;: Whichever is closer to you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Authentication method&lt;/strong&gt;: Password. We will set SSH manually and then disable password authentication (save this password to a text file for now, though)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number of droplets (servers)&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Choose a hostname&lt;/strong&gt;: ubuntu-one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hit the "create droplet" button&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some reference screenshots:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNEGYur5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq08uz1awffw5ljcunov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNEGYur5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq08uz1awffw5ljcunov.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wfiih9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iw7gx1ghynsnln9ar2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wfiih9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iw7gx1ghynsnln9ar2b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the server is created, you will have access to its IP address. Mine was &lt;code&gt;142.93.169.195&lt;/code&gt;, and yours will be a different one.&lt;/p&gt;

&lt;p&gt;Check that the machine is "real" by verifying its IP address on this website:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://ifconfig.co/?ip=142.93.169.195&lt;/code&gt; (use your IP, not this one)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-remote-server-via-cmd-terminal-using-password"&gt;
  &lt;/a&gt;
  Accessing the remote server via cmd terminal (using password)
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh root@142.93.169.195
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Where:&lt;br&gt;
&lt;code&gt;root&lt;/code&gt;: user&lt;br&gt;
&lt;code&gt;142.93.169.195&lt;/code&gt;: server IP&lt;/p&gt;

&lt;p&gt;You will be prompted for a message regarding &lt;strong&gt;ECDSA key fingerprint&lt;/strong&gt;. Type &lt;strong&gt;"yes"&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you say &lt;strong&gt;yes&lt;/strong&gt; to this, notice that in &lt;code&gt;$HOME/.ssh&lt;/code&gt; there will be a &lt;code&gt;known_hosts&lt;/code&gt; file. This file "remembers" the &lt;code&gt;servers&lt;/code&gt; that the current &lt;code&gt;client&lt;/code&gt; device has previously connected to. Every time you connect to a new &lt;code&gt;server&lt;/code&gt;, its fingerprint will be saved here (and you will be notified of that). This is a mechanism to verify that the &lt;code&gt;server&lt;/code&gt; you are connecting to is actually the one you think it is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will be prompted for the password (the one you set when the &lt;code&gt;server&lt;/code&gt; was created). Paste it here.&lt;/p&gt;

&lt;p&gt;And there it is. If your terminal changed to &lt;code&gt;root@ubuntu-one&lt;/code&gt;, you are connected to the remote server!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#updating-packages-on-the-new-server"&gt;
  &lt;/a&gt;
  Updating packages on the new server
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is optional&lt;/strong&gt;, but recommended, as you problably will install additional softwares to this &lt;code&gt;server&lt;/code&gt;. Run on the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt update
apt upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#about-the-ssh-key"&gt;
  &lt;/a&gt;
  About the SSH key
&lt;/h3&gt;

&lt;p&gt;SSH is the authentication method that we will use as an alternative to using passwords when accessing remote &lt;code&gt;servers&lt;/code&gt;. The SSH key is a 2-part key. Here's how they differ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Public:&lt;/strong&gt; It is intented to be shared, and placed on the &lt;code&gt;server&lt;/code&gt; you will connect to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Private:&lt;/strong&gt; It is not supposed to be shared or even seen by anyone else. If it gets to the wrong hands, someone might be able to use it on their &lt;code&gt;client&lt;/code&gt; computer and access the &lt;code&gt;servers&lt;/code&gt; the key is intended for! ⚠️
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have multiple SSH keys stored on your device. Once you have one, send the &lt;code&gt;public&lt;/code&gt; part to the &lt;code&gt;server&lt;/code&gt;. There, it will be stored in a dedicated place. To establish a connection, you will select a &lt;code&gt;private&lt;/code&gt; key and the &lt;code&gt;server&lt;/code&gt; will check for a match with their pre-existing &lt;code&gt;public&lt;/code&gt; keys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9llNx6_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sqzj5rl0hozt4gpbapq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9llNx6_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sqzj5rl0hozt4gpbapq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-ssh-keys"&gt;
  &lt;/a&gt;
  Creating SSH keys
&lt;/h3&gt;

&lt;p&gt;To make it easier, download and run one of the following scripts. They use the &lt;code&gt;ed25519&lt;/code&gt; algorithm to create the keys, since it provides a more sophisticated encryption and generates a smaller key as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When creating a SSH key, you will be prompted for an optional &lt;code&gt;passphrase&lt;/code&gt; that will be requested when you try to use it. It is &lt;strong&gt;highly&lt;/strong&gt; recommended that you set a &lt;code&gt;passphrase&lt;/code&gt;, because if your &lt;code&gt;private&lt;/code&gt; key gets leaked and it has no &lt;code&gt;passphrase&lt;/code&gt;, someone else can actually it on their &lt;code&gt;client&lt;/code&gt; computer and very likely will be able to access the &lt;code&gt;servers&lt;/code&gt; that the key has access to. 😱 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#windows-powershell"&gt;
  &lt;/a&gt;
  Windows (PowerShell)
&lt;/h4&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#linux-bash"&gt;
  &lt;/a&gt;
  Linux (bash)
&lt;/h4&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Tipically, the SSH keys are stored under the &lt;code&gt;$HOME/.ssh&lt;/code&gt; directory (the &lt;code&gt;.&lt;/code&gt; means that &lt;code&gt;.ssh&lt;/code&gt; is a hidden folder), but you can have them elsewhere. I created a SSH key named &lt;code&gt;costa&lt;/code&gt;, so here I can expect to see the 2-part key in 2 files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;costa&lt;/code&gt; (private, with no extension)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;costa.pub&lt;/code&gt; (public)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-public-key"&gt;
  &lt;/a&gt;
  Accessing the public key
&lt;/h3&gt;

&lt;p&gt;See its contents with:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat costa.pub 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Or using a text editor, and you wil get something like this: &lt;code&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN7ioJG5Axxcksw47AujdY/Lke8ZJoWRPSDsV6pc/reK costa&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sending-the-public-key-to-a-remote-server"&gt;
  &lt;/a&gt;
  Sending the public key to a remote server
&lt;/h3&gt;

&lt;p&gt;Log in to the &lt;code&gt;server&lt;/code&gt;, then &lt;code&gt;cd /root/.ssh&lt;/code&gt;. There you will find the &lt;code&gt;authorized_keys&lt;/code&gt; file, which is where the &lt;code&gt;public&lt;/code&gt; keys must be inserted into. Paste it manually by opening the file using a text editor:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Or directly using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; command: &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo &amp;lt;your_public_key_content&amp;gt; &amp;gt;&amp;gt; authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;If you use this second option, make sure you use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (append) and not &lt;code&gt;&amp;gt;&lt;/code&gt; (overwrite) ⚠️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Think of the &lt;code&gt;authorized_keys&lt;/code&gt; as a vault that holds all the &lt;code&gt;public&lt;/code&gt; keys from all devices authorized to SSH connect into this &lt;code&gt;server&lt;/code&gt; using a SSH key.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#accessing-the-remote-server-via-cmd-terminal-using-ssh-key"&gt;
  &lt;/a&gt;
  Accessing the remote server via cmd terminal (using SSH key)
&lt;/h3&gt;

&lt;p&gt;Now that the &lt;code&gt;public&lt;/code&gt; is on the &lt;code&gt;server&lt;/code&gt;, let's access it by using the SSH key! &lt;br&gt;
First, if you are on the &lt;code&gt;server&lt;/code&gt;, exit from it using the &lt;code&gt;exit&lt;/code&gt; command.&lt;br&gt;
Back on the &lt;code&gt;client&lt;/code&gt;, access the &lt;code&gt;server&lt;/code&gt; with the following command. This time you will not be prompted for the password.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh -i &amp;lt;private_key&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice that you don't actually need to provide the &lt;code&gt;private&lt;/code&gt; key path using &lt;code&gt;-i&lt;/code&gt;, as the keys stored under &lt;code&gt;/.ssh&lt;/code&gt; are picked automatically.  But as you begin to add more keys, chances are that at some point you will start to get errors for unmatching keys. To avoid this kind of problem, I suggest that you &lt;strong&gt;specify&lt;/strong&gt; the key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#sending-files-from-the-raw-client-endraw-to-the-raw-server-endraw-"&gt;
  &lt;/a&gt;
  Sending files from the &lt;code&gt;client&lt;/code&gt; to the &lt;code&gt;server&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Back on the &lt;code&gt;client&lt;/code&gt;, let us say I have &lt;code&gt;hello.txt&lt;/code&gt; in the current directory, and I want to send it to the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scp hello.txt root@142.93.169.195:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Where:&lt;br&gt;
&lt;code&gt;:&lt;/code&gt;: the directory where &lt;code&gt;hello.txt&lt;/code&gt; will be saved on the &lt;code&gt;server&lt;/code&gt;. In this case, the main/root folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sending-files-from-the-raw-server-endraw-to-the-raw-client-endraw-"&gt;
  &lt;/a&gt;
  Sending files from the &lt;code&gt;server&lt;/code&gt; to the &lt;code&gt;client&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a little counter-intuitive, because you need to be on the &lt;code&gt;client&lt;/code&gt; side. It is as if you are &lt;em&gt;fetching&lt;/em&gt; a file previously stored on the &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Being on &lt;code&gt;client&lt;/code&gt;, I would like to have &lt;code&gt;hello.txt&lt;/code&gt; (the one already saved on the &lt;code&gt;server&lt;/code&gt;) sent to the &lt;code&gt;client&lt;/code&gt;. First, delete &lt;code&gt;hello.txt&lt;/code&gt; on the &lt;code&gt;client&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now fetch &lt;code&gt;hello.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scp root@142.93.169.195:hello.txt .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Where:&lt;br&gt;
&lt;code&gt;:&lt;/code&gt;: indicates the file path on the &lt;code&gt;server&lt;/code&gt;&lt;br&gt;
&lt;code&gt;.&lt;/code&gt; (at the end): the path I want the file to be saved on the &lt;code&gt;client&lt;/code&gt;. Notice the space before the &lt;code&gt;.&lt;/code&gt;. Now, make sure you can see &lt;code&gt;hello.txt&lt;/code&gt; on the &lt;code&gt;client&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-user-on-the-server"&gt;
  &lt;/a&gt;
  Creating a user on the server
&lt;/h3&gt;

&lt;p&gt;The following script will create a new user, grant it &lt;code&gt;sudo&lt;/code&gt; permissions and grab a copy of the &lt;code&gt;root&lt;/code&gt; user's &lt;code&gt;authorized_keys&lt;/code&gt; file. Keep in mind that each user has its own &lt;code&gt;authorized_keys&lt;/code&gt; file. ⚠️&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;From the &lt;code&gt;client&lt;/code&gt;, send &lt;code&gt;create-user.sh&lt;/code&gt; to the main folder on the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scp create-user.sh root@142.93.169.195:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Back on the &lt;code&gt;server&lt;/code&gt;, you will see that &lt;code&gt;create-user.sh&lt;/code&gt; is there. Run it to create a new user:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;. create-user.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Notice that your terminal changed to &lt;code&gt;&amp;lt;new_user&amp;gt;@ubuntu-one&lt;/code&gt;. Now check the contents of the &lt;code&gt;authorized_keys&lt;/code&gt; of the &lt;code&gt;&amp;lt;new_user&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat /home/&amp;lt;new_user&amp;gt;/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will see here the same &lt;code&gt;public&lt;/code&gt; key that you added to the &lt;code&gt;root&lt;/code&gt; user. That means that now you can SSH connect to this &lt;code&gt;server&lt;/code&gt; as &lt;code&gt;&amp;lt;new_user&amp;gt;&lt;/code&gt;, instead of &lt;code&gt;root&lt;/code&gt;, by using the same &lt;code&gt;private&lt;/code&gt; key.  &lt;/p&gt;

&lt;p&gt;Now you can replace &lt;code&gt;root&lt;/code&gt; for &lt;code&gt;&amp;lt;new_user&amp;gt;&lt;/code&gt; when connecting to the &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disabling-password-access-on-the-server"&gt;
  &lt;/a&gt;
  Disabling password access on the server
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not required&lt;/strong&gt;, but notice that if you try to connect to the &lt;code&gt;server&lt;/code&gt; without a SSH key, you will still be prompted for the password. We will disable that so the &lt;code&gt;server&lt;/code&gt; will be protected against brute-force attacks using passwords. On the &lt;code&gt;server&lt;/code&gt;, run:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice that in order to change this file, you need &lt;code&gt;sudo&lt;/code&gt; permissions, hence the &lt;code&gt;sudo&lt;/code&gt; command. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This file contains settings regarding SSH. In its contents, look for &lt;code&gt;PasswordAuthentication&lt;/code&gt;. It is problably set to &lt;code&gt;yes&lt;/code&gt;, so change it to &lt;code&gt;no&lt;/code&gt;. Also, make sure it is &lt;strong&gt;not&lt;/strong&gt; commented as well (&lt;code&gt;#&lt;/code&gt;). Save the changes and close this file.&lt;br&gt;
Now you need to restart the SSH service for the changes to take effect: ⚠️&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;From this moment on, you will no longer be prompted for the password when trying to SSH connect to the &lt;code&gt;server&lt;/code&gt;!😎&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The settings in the &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; file apply to all the users, as the &lt;code&gt;/etc&lt;/code&gt; folder in Linux has a global scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#disabling-root-access-on-the-server"&gt;
  &lt;/a&gt;
  Disabling root access on the server
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not required&lt;/strong&gt; either, but keep in mind that there are many security concerns about remote connecting to a server as the &lt;code&gt;root&lt;/code&gt; user. This user is a &lt;em&gt;god mode&lt;/em&gt; on Linux machines, so a lot of damage can be done by this user on the &lt;code&gt;server&lt;/code&gt;! ⚠️&lt;/p&gt;

&lt;p&gt;To disable &lt;code&gt;root&lt;/code&gt; access, go back to:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set &lt;code&gt;PermitRootLogin&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt;. Now restart the SSH Daemon service again: &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now go ahead and try to access the &lt;code&gt;server&lt;/code&gt; as the &lt;code&gt;root&lt;/code&gt; user. You are &lt;strong&gt;not&lt;/strong&gt; supposed to be able to log in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-raw-config-endraw-file-very-handy"&gt;
  &lt;/a&gt;
  Create a &lt;code&gt;config&lt;/code&gt; file (very handy)
&lt;/h3&gt;

&lt;p&gt;This file makes it easier to SSH connect to remote &lt;code&gt;servers&lt;/code&gt; without needing to type their IP and user.&lt;/p&gt;

&lt;p&gt;Use the following template to create a file named &lt;code&gt;config&lt;/code&gt;, and place it in your &lt;code&gt;/.ssh&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Host &amp;lt;custom_name&amp;gt;
    Hostname &amp;lt;ip&amp;gt;
    Port 22
    User &amp;lt;user&amp;gt;
    IdentityFile &amp;lt;private_key&amp;gt;

Host &amp;lt;another_custom_name&amp;gt;
    Hostname &amp;lt;ip&amp;gt;
    Port 22
    User &amp;lt;user&amp;gt;
    IdentityFile &amp;lt;private_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In case you are wondering about the &lt;code&gt;Port&lt;/code&gt;, 22 is the default &lt;code&gt;port&lt;/code&gt; for SSH connections. It can be changed on the &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; file on the &lt;code&gt;server&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once this file is set, the SSH connections can be made as such:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh &amp;lt;custom_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In short, now you can replace the &lt;strong&gt;user + IP address + private key + port&lt;/strong&gt; for merely a custom &lt;code&gt;alias&lt;/code&gt;. Very convenient, right? 😎&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-a-website-on-the-server"&gt;
  &lt;/a&gt;
  Hosting a website on the server
&lt;/h3&gt;

&lt;p&gt;We will use &lt;code&gt;apache&lt;/code&gt; as a &lt;code&gt;HTTP server&lt;/code&gt;. Install it on the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install apache2 -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, go to your &lt;code&gt;browser&lt;/code&gt; and visit the IP address of the &lt;code&gt;server&lt;/code&gt; and you will see a page similar to this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6aAlaxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwnnq25cuk3ibpg15114.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6aAlaxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwnnq25cuk3ibpg15114.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is finding this page on the &lt;code&gt;server&lt;/code&gt; and replace it with our custom website content. Back on the &lt;code&gt;server&lt;/code&gt;, go to this directory:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /var/www/html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will find a &lt;code&gt;index.html&lt;/code&gt; file here. This is the file you are seeing on the page above.&lt;/p&gt;

&lt;p&gt;We will use my personal portfolio website. Back on the &lt;code&gt;client&lt;/code&gt;, download it &lt;a href="https://github.com/costa86/portfolio/archive/refs/heads/master.zip"&gt;here&lt;/a&gt; as a &lt;code&gt;.zip&lt;/code&gt; file, and send it to the &lt;code&gt;server&lt;/code&gt; (main folder):&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scp portfolio-master.zip &amp;lt;custom_name&amp;gt;:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Back on the &lt;code&gt;server&lt;/code&gt; and , having the &lt;code&gt;portfolio-master.zip&lt;/code&gt; file there, move it to the &lt;code&gt;/var/www/html/&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv portfolio-master.zip /var/www/html/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Go there:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /var/www/html/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Install &lt;code&gt;unzip&lt;/code&gt; to unzip this file:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install unzip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now you can unzip it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unzip portfolio-master.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The files are in a &lt;code&gt;/portfolio-master&lt;/code&gt; folder. We do not need the folder, only its contents. So we will move them into the current folder (&lt;code&gt;/var/www/html/&lt;/code&gt;) &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv portfolio-master/* .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Where:&lt;br&gt;
&lt;code&gt;*&lt;/code&gt;: all the files in this folder&lt;br&gt;
&lt;code&gt;.&lt;/code&gt;: the current directory&lt;/p&gt;

&lt;p&gt;Now you are expected to see a bunch of files in &lt;code&gt;/var/www/html/&lt;/code&gt;, including a new &lt;code&gt;index.html&lt;/code&gt; file. Visit the IP address again on the &lt;code&gt;browser&lt;/code&gt; and you will see my portfolio page!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TXh5jce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tef21x0yccfz4u50u2cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TXh5jce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tef21x0yccfz4u50u2cn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can safely delete the &lt;code&gt;/portfolio-master&lt;/code&gt; folder and&lt;code&gt;portfolio-master.zip&lt;/code&gt; file, as we do not need them anymore:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo rm -r portfolio-master/
sudo rm portfolio-master.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That's it, people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-the-time-reading-this"&gt;
  &lt;/a&gt;
  Thanks for the time reading this!
&lt;/h3&gt;

&lt;p&gt;Follow me:&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/costa86/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://dev.to/costa86"&gt;Dev.to&lt;/a&gt; | &lt;a href="https://www.buymeacoffee.com/costa86"&gt;Buy me a coffee&lt;/a&gt; | &lt;a href="https://github.com/costa86"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ssh</category>
      <category>key</category>
      <category>security</category>
      <category>devops</category>
    </item>
    <item>
      <title>Get Faster Creating React Project with Vite</title>
      <author>Moch Farras Fauzan</author>
      <pubDate>Sat, 17 Jul 2021 17:46:52 +0000</pubDate>
      <link>https://dev.to/frrsfuzn/get-faster-creating-react-project-with-vite-4gmf</link>
      <guid>https://dev.to/frrsfuzn/get-faster-creating-react-project-with-vite-4gmf</guid>
      <description>&lt;p&gt;I am new in react and also still learning how to use react. I'm using create-react-app to make react project. The first thing that I notice whenever I created react project with create-react-app are;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The time it took to make a single project .&lt;/li&gt;
&lt;li&gt;The time it took to start the project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But all that changed when I got to know ViteJs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-vitejs"&gt;
  &lt;/a&gt;
  What is ViteJs?
&lt;/h3&gt;

&lt;p&gt;According to vite website, Vite is a French word that means "Fast". So, vite is a build tool that aims to provide a faster and leaner development experience for modern web projects. ViteJs is made by the creator of VueJS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-using-vite"&gt;
  &lt;/a&gt;
  Why using Vite?
&lt;/h3&gt;

&lt;p&gt;When starting the project server, a bundler-based build setup has seek to your application and build entire application before it can be served.&lt;/p&gt;

&lt;p&gt;Vite improves the time that dev server took by dividing the modules in an application into two categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Dependencies, Vite pre-bundles dependencies using esbuild. Esbuild is written in Go and pre-bundles dependencies 10-100x faster than JavaScript-based bundlers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code often contains non-javascript like JSX, CSS, or React components that used to be edited very often. Vite only needs to transform and serve source code on demand, as the browser requests it. Code behind conditional dynamic imports is only processed if actually used on the current screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#performance-between-vite-vs-createreactapp"&gt;
  &lt;/a&gt;
  Performance between Vite vs create-react-app
&lt;/h3&gt;

&lt;p&gt;To do this testing, I measure the time that both of them took to create and launch react project. And here is the difference between both of them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLECixvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l02ylqet3g3t5atqz05b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLECixvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l02ylqet3g3t5atqz05b.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
As you can see the result has significant difference. Either create project or launch project, Vite has a better performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-react-with-vite"&gt;
  &lt;/a&gt;
  How to create react with Vite
&lt;/h3&gt;

&lt;p&gt;To make react project with Vite is very simple. All you need to do is follow this instruction.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm init vite@latest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enter project name and select framework (in this case I use React)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xfTBZm-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24ah47tekp8r3uxxb8yw.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Then select react variant (I choose react)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBZcfBDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jp1gvj3zha9yrw4qnsz.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Go to your project app and enter &lt;code&gt;npm install&lt;/code&gt; command. Your project will be ready within a minute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So that's it what I could share. I'm truly sorry if my English is not good because it isn't my mother tongue. But I keep learning English to make it better. Writing blog also my learning method to improve my English. So if you have any feedback related to the content or to my English, feel free to share!&lt;/p&gt;

&lt;p&gt;References&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=LQQ3CR2JTX8&amp;amp;ab_channel=codeSTACKr"&gt;Vite 2.0 Crash Course by codeSTACKr&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/swlh/vitejs-and-react-eb3f1afc6e6"&gt;Vitejs and React by Roberto Butti&lt;/a&gt;&lt;br&gt;
&lt;a href="https://vitejs.dev/guide/#index-html-and-project-root"&gt;Getting Started by Vite&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vite</category>
      <category>react</category>
      <category>createreactapp</category>
    </item>
  </channel>
</rss>
