<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Embed VSCode single file editor in your website.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sat, 02 Oct 2021 11:45:07 +0000</pubDate>
      <link>https://dev.to/ksengine/embed-vscode-single-file-editor-in-your-website-176j</link>
      <guid>https://dev.to/ksengine/embed-vscode-single-file-editor-in-your-website-176j</guid>
      <description>&lt;p&gt;Today we're going to embed an code editor in website.&lt;br&gt;
I had chosen the most popular IDE Visual Studio Code.&lt;br&gt;
The Monaco Editor is the code editor that powers VS Code.&lt;br&gt;
So we can use it to build a single file code editor&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rich IntelliSense, Validation
&lt;p&gt;&lt;code&gt;TypeScript, JavaScript, CSS, LESS, SCSS, JSON, HTML&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Basic Syntax Colorization
&lt;p&gt;&lt;code&gt;XML, PHP, C#, C++, Razor, Markdown, Diff, Java, VB, CoffeeScript, Handlebars, Batch, Pug, F#, Lua, Powershell, Python, Ruby, SASS, R, Objective-C&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn30-gMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5engj79t8or6xnw40y0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn30-gMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5engj79t8or6xnw40y0.jpg" alt="coding on laptop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;This is an quick example for embed vscode.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/dyRLmrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-explained"&gt;
  &lt;/a&gt;
  Example explained
&lt;/h2&gt;

&lt;p&gt;First create a container for editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:100%;height:80vh;border:1px solid grey"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;width:100%;&lt;/code&gt; - takes full width&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;height:80vh;&lt;/code&gt; - takes 80% of the viewport height.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border:1px solid grey&lt;/code&gt; - just a border.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then add loader for editor.&lt;br&gt;
Here I am using jsDelivr as my CDN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/monaco-editor@0.27.0/min/vs/loader.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the working code part. add this code inside an script tag below above code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/monaco-editor@0.27.0/min/vs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vs/editor/editor.main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;automaticLayout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;require&lt;/code&gt; - AMD module loader(loads editor)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;require.config()&lt;/code&gt; - configure to use jsDelivr.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value: code&lt;/code&gt; - code can be any code as string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;language: "typescript"&lt;/code&gt; - set programming language of code for language features.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;automaticLayout: true&lt;/code&gt; - Makes it responsive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then enjoy it.&lt;br&gt;
I hope to write more articles with advanced use cases of embedded editor. &lt;br&gt;
Follow üèÉ‚Äç‚ôÇÔ∏è me for more articles.&lt;br&gt;
Asküôè any question on comments section.&lt;br&gt;
Star‚≠ê me if you love this article.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;cover image by &lt;a href="https://unsplash.com/photos/oXlXu2qukGE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;sup&gt;image(laptop) by &lt;a href="https://unsplash.com/photos/m_HRfLhgABo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª...&lt;br&gt;
Thanks. ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>vscode</category>
    </item>
    <item>
      <title>The entropy of states</title>
      <author>Daniele Falchetti</author>
      <pubDate>Sat, 02 Oct 2021 11:21:10 +0000</pubDate>
      <link>https://dev.to/falcosan/the-entropy-of-states-5gbi</link>
      <guid>https://dev.to/falcosan/the-entropy-of-states-5gbi</guid>
      <description>&lt;h6&gt;
  &lt;a href="#to-read-the-article-in-other-languages-go-to-my-website-httpsaprogramacoblogtheentropyofstates"&gt;
  &lt;/a&gt;
  To read the article in other languages, go to my website: &lt;a href="https://aprograma.co/blog/the-entropy-of-states/"&gt;https://aprograma.co/blog/the-entropy-of-states/&lt;/a&gt;
&lt;/h6&gt;




&lt;h3&gt;
  &lt;a href="#can-the-entropy-change-the-perspective-of-our-project-or-even-ruin-it"&gt;
  &lt;/a&gt;
  Can the entropy change the perspective of our project or even ruin it?
&lt;/h3&gt;




&lt;p&gt;Those who program know what it means to manipulate data, explaining it briefly means to manipulate a certain value through mathematical processes (such as a function for example) to define a second value. If this process is replicated many times, inserted as a set and structured in the best way, then a program will be created. Generally, this is the standard way to program, but sometimes something is missing: the consciousness of entropy.&lt;/p&gt;

&lt;p&gt;Here is an example in temporal sequence:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Dev is a good developer.&lt;/li&gt;
&lt;/ul&gt;



&lt;h5&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process:
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Dev does some brainstorming thinking about the final vision of his project defining all his goals.&lt;/li&gt;
&lt;li&gt;Dev starts programming and becomes aware of what he will need to do in practice to make it all work.&lt;/li&gt;
&lt;li&gt;Dev finishes programming and releases his first version of his application.&lt;/li&gt;
&lt;li&gt;Dev is happy.&lt;/li&gt;
&lt;li&gt;Having done everything right, many people start using Dev's application.&lt;/li&gt;
&lt;li&gt;Dev's work is not finished, he needs to keep on improving by taking advantage of users' feedback and enthusiasm for the success of the project.&lt;/li&gt;
&lt;li&gt;Dev has succeeded, his application becomes super popular and attracts people from other platforms similar to the one created by him (he wins over the competition).&lt;/li&gt;
&lt;li&gt;Dev is an open source lover, his code is public and some contributors start submitting codes to fix or add features (useful, but difficult to manage beyond a certain volume).&lt;/li&gt;
&lt;li&gt;Dev can't control people and their ‚Äúsometimes‚Äù conflicting ideas.&lt;/li&gt;
&lt;li&gt;The social pressure is unsustainable and Dev, influenced by all this, is forced to revise the final vision of his project and replace it with a democratic vision.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;It‚Äôs not necessary to have an opinion about whether to change your plans is right or wrong, I think it's relative. The question is another, with this example, what I would like to share is how important it is to know and control the entropy. As a great developer, Dev has managed to do what we all desire, to achieve our goals. As I described, from a specific point in the process, entropy starts to be relevant, a variable that Dev had not considered. But what is entropy in this area? In the simplest possible way, entropy can be explained as a measure of chaos that remains unchanged or increases over time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4Qr5nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://a.storyblok.com/f/106240/1191x731/add4813309/explication-entropy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4Qr5nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://a.storyblok.com/f/106240/1191x731/add4813309/explication-entropy.png" alt="Img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By checking this sketch I ask myself a question: is there a better way to capture the variables Z, S, and X and consequently manage them?&lt;/p&gt;

&lt;p&gt;To arrive to a possible answer, I first thought about answering myself through a smaller context, with fewer variables than those present in Dev's situation. As a great user of the Vue.js framework, I stopped to reflect on the store of this framework, Vuex.&lt;/p&gt;

&lt;p&gt;For those who don't know what I'm talking about, Vuex, Vue's store, is a set of globally defined variables, through which these variables can be changed or simply read.&lt;/p&gt;

&lt;p&gt;It is very easy to manipulate the data with Vuex but it is also risky because such data is accessible from any component/page/plugin... You must have the foresight to manage the various manipulations of the data correctly while maintaining zero entropy. In this case, to manage entropy it is necessary to define in each component a copy of the global data with an internal variable, so all the operations carried out on the new variable will remain in the context in which the latter was defined. This strategy is not always valid, if the modification of global data occurred in the Header component must be listened to by the Footer component, then we do nothing with the internal variable.&lt;/p&gt;



&lt;p&gt;OK .. extrapolating from the Vuex example I more or less achieve to understand that the best way to manage entropy is the abstraction.&lt;/p&gt;

&lt;p&gt;Now how do I apply the concept of abstraction to Dev's situation?&lt;/p&gt;

&lt;p&gt;Trying to get there with associations: if our Dev is the Vuex store, the contributors are the components/pages/plugins, and the feedback and ideas of the users of the Dev's application are the operations done on the global data, defining the "internal variable" would mean representing this process: creating various beta versions of Dev's application where each of them adopts one of the contributors' ideas.  These parallel versions, formed from dissatisfaction with the original vision of Dev's product, are consequently tested by some beta testers. These beta testers are composed of groups of people selected on the basis of a shared idea of what they think the philosophy of Dev's application should be. In the end, the version that is most popular with the public is chosen as Dev's application release 2.0.&lt;/p&gt;

&lt;p&gt;This representation, while utopian and ignorant of the limits of reality, is my response to the application of abstraction for entropy control.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>entropy</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Chatwoot: The Better Way to Talk To Your Customers</title>
      <author>Adeyemi Adeshina </author>
      <pubDate>Sat, 02 Oct 2021 11:12:16 +0000</pubDate>
      <link>https://dev.to/iamadeyemiadex/chatwoot-the-better-way-to-talk-to-your-customers-8gd</link>
      <guid>https://dev.to/iamadeyemiadex/chatwoot-the-better-way-to-talk-to-your-customers-8gd</guid>
      <description>&lt;p&gt;All  paying and potential customers always want a swift and better way to communicate or engage with any company or business. Imagine a customer having some issues or concerns about doing your business with you and he wants to have some of his issues answered faster. &lt;/p&gt;

&lt;p&gt;A very poor and slower conversation may lead to loosing that customer and some other ones coming in. That's why customer engagement is one of the pillars of modern businesses to success.&lt;br&gt;
It's not enough to have a great product, every business must find a better way to talk to customers, and build bonds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-beauty-of-chatwoot"&gt;
  &lt;/a&gt;
  The Beauty of Chatwoot
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;By making it easier for customers to engage in ways they find valuable, you‚Äôll strengthen their emotional investment in your brand. They will trust you more, and when they do, your business grows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, I know you have seen more than enough customer engagement platforms. I have seen them too, and I have used quite a number of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chatwoot&lt;/strong&gt; is an open source customer engagement platform created to improve and properly structure conversations around B2B and P2B.&lt;/p&gt;

&lt;p&gt;Imagine your business having several social media engagement platforms such as Facebook, Instagram, Twitter, Whatsapp, Telegram etc. and all your customers send you messages via all these platforms. You will agree with me that managing conversations around all the platforms look so tedious, cumbersome and boring.  &lt;/p&gt;

&lt;p&gt;Rather than having to manage conversations everywhere, &lt;strong&gt;Chatwoot&lt;/strong&gt;, with its beautiful and easy to use dashborad, allows you to integrate all your social media platforms including your website seamlessly within few seconds. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chatwoot&lt;/strong&gt; includes a live chat tool;  and out-of-the-box integrations with third-party platforms such as Slack, Shopify, Stripe and chatboot tools such as Rasa and DialogFlow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How To Begin&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt; Go to the Registration page and enter your details&lt;br&gt;
&lt;a href="https://app.chatwoot.com/app/auth/signup"&gt;Register Here&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjVXdUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uvwy7ehqy5b300z6nid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjVXdUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uvwy7ehqy5b300z6nid.png" alt="Register_image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; After successful registration, you'll be redirected to your dashboard where you can integrate social media platforms and chat seamlessly. Remember to confirm your account in your registered email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fxVAwmw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342umpcnzx4ufv5pu8nk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxVAwmw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342umpcnzx4ufv5pu8nk.png" alt="chat_integration"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chatwoot.com/"&gt;Learn more about Chatwoot&lt;/a&gt;&lt;/p&gt;

</description>
      <category>chatwoot</category>
      <category>customers</category>
      <category>chatbot</category>
    </item>
    <item>
      <title>How to install vscode in ubuntu using apt-get?</title>
      <author>abbazs</author>
      <pubDate>Sat, 02 Oct 2021 10:39:15 +0000</pubDate>
      <link>https://dev.to/abbazs/how-to-install-vscode-in-ubuntu-using-apt-get-2m8o</link>
      <guid>https://dev.to/abbazs/how-to-install-vscode-in-ubuntu-using-apt-get-2m8o</guid>
      <description>&lt;p&gt;To install vscode using apt-get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# login to a shell as super user
sudo su
# Get the gpg key from microsoft
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &amp;gt; packages.microsoft.gpg
install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
rm packages.microsoft.gpg
# Create a file called vscode.list in /etc/apt/sources.list.d and add reference url
sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" &amp;gt; /etc/apt/sources.list.d/vscode.list'
# Install dependency packages
apt install apt-transport-https
apt update
apt install code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>apt</category>
      <category>vscode</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Calling REST APIs from Dart and Flutter</title>
      <author>Jan Mewes</author>
      <pubDate>Sat, 02 Oct 2021 10:27:29 +0000</pubDate>
      <link>https://dev.to/janux_de/calling-rest-apis-from-dart-and-flutter-3f2i</link>
      <guid>https://dev.to/janux_de/calling-rest-apis-from-dart-and-flutter-3f2i</guid>
      <description>&lt;p&gt;When using API-based services, they often bring an SDK for some of the most popular languages, to facilitate the creation of apps using their API (e.g. &lt;a href="https://supabase.io/docs/reference/javascript/supabase-client"&gt;Supabase&lt;/a&gt; or &lt;a href="https://developers.google.com/google-ads/api/docs/client-libs"&gt;Google Ads&lt;/a&gt;). This blog post describes a concept for building your own SDK for consumption of any REST API, using the Dart programming language for use in an app using the Flutter framework.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#terminology"&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context"&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#usage"&gt;Usage&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#package-dependency-declaration"&gt;Package dependency declaration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instantiate-api-entry-point"&gt;Instantiate API entry point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-resources"&gt;Collection resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton-resources"&gt;Singleton resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-handling"&gt;Error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage-in-flutter-project"&gt;Usage in Flutter project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#testing"&gt;Testing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#service-tests"&gt;Service tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#widget-tests"&gt;Widget tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#implementation-details"&gt;Implementation details&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#payload-representations"&gt;Payload representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;The following table gives an overview of the abbreviations and technical terms used in the blog post.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;Application Programming Interface; an interface of a software system that allows other software systems to use it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDK&lt;/td&gt;
&lt;td&gt;Software Development Kit; a library that provides access to a third-party service for the respective programming language.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST API&lt;/td&gt;
&lt;td&gt;Short form for RESTful API which denotes a software architecture style based "representational state transfer".&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KSCH&lt;/td&gt;
&lt;td&gt;Kirpal Sagar Charitable Hospital; the target domain of the app to be built.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Workflow&lt;/td&gt;
&lt;td&gt;A semi-automated business process.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/ksch-workflows/backend/"&gt;backend&lt;/a&gt; service of the KSCH Workflows system provides &lt;a href="https://ksch-workflows.github.io/backend"&gt;a REST API&lt;/a&gt; for all the queries and commands which are needed for the apps in the KSCH workflows. The &lt;a href="https://github.com/ksch-workflows/ksch-dart-client"&gt;KSCH Dart Client&lt;/a&gt; facilitates it for all apps which use the Dart programming language to use that API by wrapping the low-level REST API with a high-level Dart API. The apps - e.g. the &lt;em&gt;&lt;a href="https://github.com/ksch-workflows/registration-desk/"&gt;Registration desk&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;Pharmacy desk&lt;/em&gt;, and &lt;em&gt;Administration app&lt;/em&gt; - can then use the &lt;em&gt;KSCH Dart Client&lt;/em&gt; like any other Dart package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6w7xeCNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spnon9800g0n900l2lom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6w7xeCNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spnon9800g0n900l2lom.png" alt="Context diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the text below, the &lt;em&gt;KSCH Dart Client&lt;/em&gt; will also be referred to as "the SDK".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Before the discussion of the internal structure of the &lt;em&gt;KSCH Dart Client&lt;/em&gt;, it will be shown how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#package-dependency-declaration"&gt;
  &lt;/a&gt;
  Package dependency declaration
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;KSCH Dart Client&lt;/em&gt; is a project-specific library that is of no use for the general Dart community. That's why the package is not published to the Dart package repository but is leveraging Dart's capability to declare dependencies directly on GitHub repositories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ksch_dart_client&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;git&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/ksch-workflows/ksch_dart_client&lt;/span&gt;
      &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;a85c7f0cb83087d13e207b1331bcf6f64676e995&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the system is in production use, &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt; tags should be used instead of specific commit IDs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instantiate-api-entry-point"&gt;
  &lt;/a&gt;
  Instantiate API entry point
&lt;/h3&gt;

&lt;p&gt;The next step in using the SDK is to create an instance of the &lt;code&gt;KschApi&lt;/code&gt; class. This class has a parameter for the base URL of the backend service so that it can be configured to be executed against the testing or production system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KschApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost:8080'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#collection-resources"&gt;
  &lt;/a&gt;
  Collection resources
&lt;/h3&gt;

&lt;p&gt;The first request to be done with the API is listing all patients with a GET request on the &lt;code&gt;/patients&lt;/code&gt; collection resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http GET /patients
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic idea of the SDK is that it provides a property in the &lt;code&gt;api&lt;/code&gt; object for every supported resource. So, in the case of this example, there is a &lt;code&gt;patients&lt;/code&gt; property. On its value is a method available for each operation that can be done on that resource. By calling this method, the HTTP call is triggered and delivers its response wrapped in a &lt;code&gt;Future&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since collection resources are usually paged, the &lt;code&gt;list&lt;/code&gt; method can take the index of the page to be requested as an optional parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;PatientsResponsePayload&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;page:&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;++);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;patient&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNextPage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#singleton-resources"&gt;
  &lt;/a&gt;
  Singleton resources
&lt;/h3&gt;

&lt;p&gt;For working with individual patients, the singleton resource can be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http GET /patients/${PATIENT_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the help of Dart's &lt;a href="https://www.educative.io/edpresso/what-is-dart-call"&gt;&lt;code&gt;call&lt;/code&gt; method convention&lt;/a&gt; it is possible to invoke an object as a function. With this tool, a parameter can be passed to a collection resource for fluent access on a singleton resource below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;residentialAddress&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each resource may also have sub-resources. All resource path elements act as a builder and the HTTP call is triggered only in the final method call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;visits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startVisit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VisitType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OPD&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;When there is an error response from the API, i.e. a status code &amp;gt;= 400, then an exception will be raised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage-in-flutter-project"&gt;
  &lt;/a&gt;
  Usage in Flutter project
&lt;/h3&gt;

&lt;p&gt;To avoid any HTTP-related ideas and too much business logic within the frontend widgets, the SDK is wrapped in a service layer. For every service, there is an interface which is widgets uses. During application start the &lt;code&gt;main.dart&lt;/code&gt; file decides which service implementation should be used. Only that service implementation knows about the SDK and how to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTG2m9gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzhnz5pt0xqptnwa6ymh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTG2m9gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzhnz5pt0xqptnwa6ymh.png" alt="Service structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The SDK can now be used in any Dart project. To spare the Flutter code of dealing with the request details, the SDK can be wrapped into service classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PatientServiceImpl&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;PatientService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Patient&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Patient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The service can then be injected into the widget using e.g. &lt;a href="https://pub.dev/packages/get_it"&gt;get_it&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_RegisterPatientPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RegisterPatientPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;PatientService&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetIt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatientService&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebScaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Register patient'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;RegisterPatientResult&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="c1"&gt;//...&lt;/span&gt;
              &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;createdPatient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patient&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#service-tests"&gt;
  &lt;/a&gt;
  Service tests
&lt;/h3&gt;

&lt;p&gt;The service classes can be tested with the help of the &lt;a href="https://pub.dev/packages/nock"&gt;nock&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;setUpAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cleanAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;patientService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Should create patient in case of emergency'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;patientId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;v4&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;givenCreatePatientResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MinimalPatientResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenCreatePatientResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/api/patients'&lt;/span&gt;&lt;span class="o"&gt;)..&lt;/span&gt;&lt;span class="na"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#widget-tests"&gt;
  &lt;/a&gt;
  Widget tests
&lt;/h3&gt;

&lt;p&gt;For the unit tests of the Flutter widgets, it should be fairly simple to create mocks for the used services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h2&gt;

&lt;p&gt;Next comes a description of how the SDK is working internally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/ksch-workflows/ksch-dart-client"&gt;KSCH Dart Client&lt;/a&gt; as a small core with the &lt;code&gt;KschApi&lt;/code&gt; class and model classes to be able to interpret pagination and links in the response payloads. The &lt;code&gt;KschApi&lt;/code&gt; API provides an API for basic HTTP operations which can then be used by the resources. Further, it provides properties to the root resources.&lt;/p&gt;

&lt;p&gt;The resources themselves are a tree structure, i.e. every resource can have subresources. Further, they know about their respective path element. Just before the actual HTTP called on the &lt;code&gt;absolutePath&lt;/code&gt;, all the path elements of all ancestors are joined together.&lt;/p&gt;

&lt;p&gt;The bases classes for the collection resources and identity resources are almost the same, with the difference that &lt;br&gt;
identity resources know about their identification number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSeg1QF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2glf4vitcyw2pyqphc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSeg1QF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2glf4vitcyw2pyqphc.png" alt="ksch-dart-client-uml"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#payload-representations"&gt;
  &lt;/a&gt;
  Payload representations
&lt;/h3&gt;

&lt;p&gt;The KSCH API uses JSON as the data format for request and response payloads. The code which does the mapping between JSON strings and Dart data types is generated with the help of the &lt;a href="https://pub.dev/packages/json_annotation"&gt;json_annotation&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;The Dart data types are a model of the JSON data structures. By default, the JSON properties are mapped with the Dart properties. If this is not possible, e.g. because a property in the JSON data starts with an underscore, then the mapping can be configured with custom annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsonSerializable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VisitResponsePayload&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@JsonKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;'_id'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;VisitType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;opdNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;timeStart&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;VisitResponsePayload&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;opdNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;timeStart&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;factory&lt;/span&gt; &lt;span class="n"&gt;VisitResponsePayload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;_$VisitResponsePayloadFromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_$VisitResponsePayloadToJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The details of the &lt;code&gt;fromJson&lt;/code&gt; and &lt;code&gt;toJson&lt;/code&gt; methods are then generated from the Dart build runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dart run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;The unit tests for the SDK act also as API tests for the &lt;a href="https://github.com/ksch-workflows/backend"&gt;backend&lt;/a&gt; API. The expectation is that the &lt;em&gt;backend&lt;/em&gt; has been locally started on port 8080. Then they are using the real API to make sure that all requests can be successfully executed and all responses successfully parsed. Later on, this test suite will also be included in the build process of the &lt;em&gt;backend&lt;/em&gt; to make sure that no unintended breaking API changes are made.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>rest</category>
    </item>
    <item>
      <title>How to Build a Predictive Machine Learning Site With React and Python (Part Two: API Development)</title>
      <author>Gospel Darlington</author>
      <pubDate>Sat, 02 Oct 2021 09:51:46 +0000</pubDate>
      <link>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</link>
      <guid>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</guid>
      <description>&lt;p&gt;What we‚Äôll be building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" alt="Hireable API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sequel to the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;last article&lt;/a&gt;, we will be building a machine learning API that will predict whether a candidate will or will not be hired based on his or her credentials. This is part two out of a three-part series we will be developing. This part is only concerned with developing the machine learning API. If you haven't read part one of this article you should do so before this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Building a machine learning model with no deployment mechanism could be frustrating unless you just want to learn. But where is the beauty in that if you can't deploy it for the whole world to see and use? for your machine learning model to be useful you need to integrate it with an API. You don't know how to build a machine learning API? Don't worry, in this tutorial you will learn step-by-step how to develop a predictive machine learning API. We will utilize the machine learning model developed in the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;part one&lt;/a&gt; of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;To flow along in this tutorial, a good understanding of the following tools is required.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Fast API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;Part One&lt;/a&gt; of this tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-machine-learning-api"&gt;
  &lt;/a&gt;
  What is a Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" alt="Image by Riekus from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will answer this question by defining the terminologies used here and also doing a brief coverage of the advantages associated with machine learning APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an API&lt;/strong&gt;&lt;br&gt;
API stands for an &lt;strong&gt;a&lt;/strong&gt;pplication &lt;strong&gt;p&lt;/strong&gt;rograming &lt;strong&gt;i&lt;/strong&gt;nterface. To simply state, it is a piece of backend service that allows two or more computers to have communications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why combine machine learning with an API&lt;/strong&gt;&lt;br&gt;
It gives your model the platform to be accessed and used by millions of people all over the globe, else it will just be a piece of code sitting on your computer. Take this analogy to understand why you must combine a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;An airplane needs an airport, this is where it will operate from and also be accessed by millions of passengers that frequent the airport. Without the airport, the airplane cannot serve the passengers. This is how important an API is to a machine learning model, without an API a machine learning model cannot be used online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of an API&lt;/strong&gt;&lt;br&gt;
The benefits are almost unlimited, the following are some advantages of combining a machine learning model with an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps people to access your model online.&lt;/li&gt;
&lt;li&gt;It helps other applications to utilize your model.&lt;/li&gt;
&lt;li&gt;It brings you profits by offering it as a service.&lt;/li&gt;
&lt;li&gt;It helps your model to gather more data from your users.&lt;/li&gt;
&lt;li&gt;It helps your model to collect more diversified inputs from people online.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These and more are some advantages of integrating a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What technologies can achieve a machine learning API&lt;/strong&gt;&lt;br&gt;
There are a few programming languages and frameworks that can help you put together a machine learning model with an API. This also depends on your choice of programming language and framework. The most popular frameworks that can help you achieve a hybrid of a machine learning model and API are django, Flask, and FastAPI. All these frameworks are built upon the Python programming language. For the sake of this tutorial, we will be using the FastAPI framework, which is fast, lightweight, and simple to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-predictive-machine-learning-api"&gt;
  &lt;/a&gt;
  Building a Predictive Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" alt="Image by Free-Photos from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the meat of this tutorial, you will be guided by the hand so ensure that you don't skip any step. Below are the procedures you need to follow to build a machine learning API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing a Development Environment&lt;/strong&gt;&lt;br&gt;
This step is important, the tools that you use will either help you accomplish your task on time or frustrates you with difficulties. For this tutorial, we will be using VScode for all the coding. This is because all the necessary toolings needed to both develop and test our API are all in one place. Below are some of the reasons we are choosing VScode for this work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Python IntelliSense, Code Format tools, and Code Highlights.&lt;/li&gt;
&lt;li&gt;Support for Thunder Client Extention for testing our API.&lt;/li&gt;
&lt;li&gt;Support for an integrated terminal with splitting functionality.&lt;/li&gt;
&lt;li&gt;Support for integrated version control and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Installing Development Dependencies&lt;/strong&gt;&lt;br&gt;
As earlier stated, we will be using the FastAPI framework which is built upon the Python programming language to code up our API. The following are the tools and libraries we will install for our development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.9.7&lt;/li&gt;
&lt;li&gt;Fastapi 0.68.1&lt;/li&gt;
&lt;li&gt;Uvicorn 0.15.0&lt;/li&gt;
&lt;li&gt;Scikit-learn 1.0&lt;/li&gt;
&lt;li&gt;Thunder Client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, follow the below instruction to have them all installed on your computer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head to the VScode &lt;a href="https://code.visualstudio.com/download"&gt;site&lt;/a&gt; and download the appropriate version for your OS.&lt;/li&gt;
&lt;li&gt;Install the downloaded package on your computer.&lt;/li&gt;
&lt;li&gt;Head to the Python &lt;a href="https://www.python.org/downloads/"&gt;website&lt;/a&gt; and download &lt;strong&gt;Python version 3.9.7&lt;/strong&gt; or later.&lt;/li&gt;
&lt;li&gt;Install the Python package and add the path to your &lt;strong&gt;system variables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Goto the directory from part one of this tutorial where you have your &lt;strong&gt;&lt;em&gt;model folder&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create a new directory called &lt;strong&gt;api&lt;/strong&gt; &lt;em&gt;side-by-side&lt;/em&gt; with the model folder, It should look like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" alt="Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;strong&gt;&lt;em&gt;api folder&lt;/em&gt;&lt;/strong&gt; in VSCode and install the following libraries using the terminal.&lt;/p&gt;

&lt;p&gt;pip install fastapi&lt;br&gt;
pip install uvicorn[standard]&lt;br&gt;
pip install scikit-learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On VScode click on extensions and install &lt;strong&gt;&lt;em&gt;Thunder Client&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations, that is all that you will need for now, here is how your VScode should look, minus the theming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" alt="VScode Project structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please make sure you are on the &lt;strong&gt;api&lt;/strong&gt; working directory, else just change the directory into it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importing Libraries&lt;/strong&gt;&lt;br&gt;
Within the &lt;strong&gt;api folder&lt;/strong&gt;, create a new file named &lt;strong&gt;&lt;em&gt;"main.py"&lt;/em&gt;&lt;/strong&gt;, this is where all the programming logic will reside. Once you have created this file, paste the following code snippets inside it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Importing necessary libraries
import uvicorn
import pickle
from pydantic import BaseModel
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;uvicorn&lt;/strong&gt; library is used to create a server having a host and port of your preference for communicating with our API via &lt;strong&gt;HTTP&lt;/strong&gt; requests and responses.&lt;/p&gt;

&lt;p&gt;We use the &lt;strong&gt;pickle&lt;/strong&gt; library to load up our trained model from part one of this series.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;BaseModel&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;class from the **pydantic&lt;/strong&gt; library is used for defining our API request parameters. This is important for ensuring that we are sending the right data types to our trained machine learning model.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;FastAPI&lt;/strong&gt; library helps us define the routes and the functions a route will run when accessed by a client. It also helps us define the responses we give for a request.&lt;/p&gt;

&lt;p&gt;Lastly, the CORSMiddleware helps us define the domains that will get resources from our API. This is a very important configuration in a FastAPI project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializing the fast API&lt;/strong&gt;&lt;br&gt;
The following code block initializes the fastAPI, whitelist the domains origins that can access our API endpoints, and configures it as a middleware.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Initializing the fast API server
app = FastAPI()
origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Terrific job, now let‚Äôs advance to loading up our trained machine learning model from part one of this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading up the Trained Model&lt;/strong&gt;&lt;br&gt;
Copy and paste the following codes on your VScode &lt;strong&gt;main.py&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Loading up the trained model
model = pickle.load(open('../model/hireable.pkl', 'rb'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Using the pickle library, we are loading the trained model in combination with the Python &lt;strong&gt;open function&lt;/strong&gt;. Take note of the path to the trained pickle model, we are accessing it from the &lt;strong&gt;model folder&lt;/strong&gt;. Although, you can access your trained model from any directory provided that you specify it in the Python open function. However, for the sake of this tutorial, we should all follow the same style guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining the model input types&lt;/strong&gt;&lt;br&gt;
Again, copy and paste the codes below into your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Defining the model input types
class Candidate(BaseModel):
    gender: int
    bsc: float
    workex: int
    etest_p: float
    msc: float
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Base on the BaseModel class, we are defining a class called &lt;strong&gt;‚ÄúCandidate‚Äù&lt;/strong&gt;. By doing this we are instructing our model prediction route to only accept the data types that conform to the specifications in the Candidate class. This immensely helps us collect the right data types for our trained machine learning model and reduce errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Home Route&lt;/strong&gt;&lt;br&gt;
This is a route that specifies what we respond to our users when they visit the home route. For this project, we will just give them a welcome message. Paste the following codes to your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the home route
@app.get("/")
def read_root():
    return {"data": "Welcome to online employee hireability prediction model"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Prediction Route&lt;/strong&gt;&lt;br&gt;
Now let's stitch all these codes together. Paste the following code on your editor and let me explain.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the prediction route
@app.post("/prediction/")
async def get_predict(data: Candidate):
    sample = [[
        data.gender,
        data.bsc,
        data.workex,
        data.etest_p,
        data.msc
    ]]
    hired = model.predict(sample).tolist()[0]
    return {
        "data": {
            'prediction': hired,
            'interpretation': 'Candidate can be hired.' if hired == 1 else 'Candidate can not be hired.'
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Firstly, when a user sends a post data to our prediction route, we use the Candidate class to bind it to the request body and extract the essential data we specified into a multi-dimensional array called &lt;strong&gt;‚Äúsample‚Äù&lt;/strong&gt;. Secondly, we give this array to our model for prediction and save the result in another variable called &lt;strong&gt;‚Äúhired‚Äù&lt;/strong&gt;. Lastly, we send a response back to the client with either &lt;em&gt;‚ÄúCandidate can be hired‚Äù&lt;/em&gt; or &lt;em&gt;‚ÄúCandidate can not be hired‚Äù&lt;/em&gt; base on the prediction of our model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring the Server Host and Port&lt;/strong&gt;&lt;br&gt;
Finally, we do a quick server configuration instructing the uvicorn library to start up our server on the specified host and port number whenever the &lt;strong&gt;main.py&lt;/strong&gt; file is executed. See the codes below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Configuring the server host and port
if __name__ == '__main__':
    uvicorn.run(app, port=8080, host='0.0.0.0')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Congratulations, you have just built a machine learning API. Now let‚Äôs do quick testing to see if it's all good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-api-endpoints"&gt;
  &lt;/a&gt;
  Testing the API Endpoints
&lt;/h2&gt;

&lt;p&gt;Adhere to the following instructions to test the API endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the VScode interface, click on the Thunder Client.&lt;/li&gt;
&lt;li&gt;Create a new request.&lt;/li&gt;
&lt;li&gt;Select the post option.&lt;/li&gt;
&lt;li&gt;Enter "&lt;a href="http://localhost:8080/prediction"&gt;http://localhost:8080/prediction&lt;/a&gt;" on the address bar.&lt;/li&gt;
&lt;li&gt;Goto the body tab and supply the parameters below.&lt;/li&gt;
&lt;li&gt;Finally, click on send.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will have something like this if you had done the above steps correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" alt="Testing the Prediction Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also send another request to the home route but use the GET method instead. You should get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" alt="Testing the Home Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray, you have just completed two out of the three-part series on how to build a predictive machine learning model. In the third and last article for this series, you will learn how to consume this API using ReactJs. You can see the full source code on my &lt;a href="https://github.com/Daltonic/predictive/tree/main/api"&gt;Git Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, preparing a deployable machine learning model in the past has been a pain on the neck but not anymore. You have seen how easy it is to do so with the FastAPI framework built upon the Python programming language. I believe that FastAPI is the first simple solution for developers to bridge the gap between machine learning and web development. In our next tutorial, we will see this in action by hooking it up with ReactJs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-author"&gt;
  &lt;/a&gt;
  About Author
&lt;/h2&gt;

&lt;p&gt;Gospel Darlington is a remote &lt;strong&gt;Fullstack&lt;/strong&gt; web developer, prolific with technologies such as &lt;strong&gt;VueJs&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;ReactJs&lt;/strong&gt;, and &lt;strong&gt;API development&lt;/strong&gt;. He takes a huge interest in the development of high-grade and responsive web applications.&lt;/p&gt;

&lt;p&gt;Gospel Darlington currently works as a &lt;strong&gt;freelancer developing apps and writing tutorials&lt;/strong&gt; that teach other developers how to integrate software products into their projects.&lt;/p&gt;

&lt;p&gt;He spends his free time &lt;strong&gt;coaching young people&lt;/strong&gt; on how to be successful in life. His hobbies include inventing new recipes, book writing, songwriting, and singing. You can reach me on &lt;a href="https://daltonic.github.io/"&gt;Website&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/darlington-gospel-aa626b125/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/idaltonic"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/darlington.gospel01"&gt;Facebook&lt;/a&gt;, or &lt;a href="https://github.com/Daltonic"&gt;GitHub&lt;/a&gt; for any discussion.&lt;/p&gt;

</description>
      <category>python</category>
      <category>react</category>
      <category>machinelearning</category>
      <category>fastapi</category>
    </item>
    <item>
      <title>Ways to Make Money?</title>
      <author>Thu Htet Tun</author>
      <pubDate>Sat, 02 Oct 2021 09:49:07 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/ways-to-make-money-19gc</link>
      <guid>https://dev.to/thuhtetdev/ways-to-make-money-19gc</guid>
      <description>&lt;p&gt;hello guys!&lt;/p&gt;

&lt;p&gt;I won't explain you with long and complicate words for that coz everybody can make money on their own way,&lt;br&gt;
so here's the key points to modify your mind.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't ever think about making money is hard&lt;/li&gt;
&lt;li&gt;You can make money right now but amount will be based on yours.&lt;/li&gt;
&lt;li&gt;You can't make money right now .. it takes time to make money.. but amount will be based on yours preparation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all. &lt;br&gt;
Making money is not hard. Choose your way.&lt;/p&gt;

&lt;p&gt;For me, I'm not that rich now. But I can live on my own and currently follow that No.3 rule to set up my mind. I wanna make more income streams as much as I can. I'm currently working on a full time job but I wanna expand my income by teaching and sharing. &lt;br&gt;
After that, making passive incomes will be my final target.&lt;/p&gt;

&lt;p&gt;Think about what's your method to make money.&lt;br&gt;
Share in this comment section&lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>September 21 New launch and Updates for Developers  üöÄ | Video SDK</title>
      <author>Sagar Kava</author>
      <pubDate>Sat, 02 Oct 2021 09:45:45 +0000</pubDate>
      <link>https://dev.to/videosdk/september-21-new-launch-and-updates-for-developers-video-sdk-dae</link>
      <guid>https://dev.to/videosdk/september-21-new-launch-and-updates-for-developers-video-sdk-dae</guid>
      <description>&lt;p&gt;NEW! This is the September 2021 release announcement. Here is a list of all new enhancements and product updates on videosdk.live&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. User dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplified API key creation and domain whitelisting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Site tour&lt;/strong&gt; tutorial now available! Get a quick walkthrough of all features.&lt;/li&gt;
&lt;li&gt;Now join the &lt;a href="https://discord.gg/f2WsNDN9S5"&gt;Discord community&lt;/a&gt; from the console itself.&lt;/li&gt;
&lt;li&gt;Find the &lt;strong&gt;Quickstart&lt;/strong&gt; on the top right corner to get started with any SDK.&lt;/li&gt;
&lt;li&gt;Upfront payment credit is now visible on the homepage.&lt;/li&gt;
&lt;li&gt;And other minor bug fixes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. RTC Javascript prebuilt v0.1.12&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Join screen&lt;/strong&gt; now available with minimal configuration.&lt;/li&gt;
&lt;li&gt;Smoother navigation for 100+ participants.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-rtc-sdk-launch-ios-sdk-and-flutter-sdk"&gt;
  &lt;/a&gt;
  üöÄ New RTC SDK launch iOS SDK and Flutter SDK
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41Yd_-ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/10/giphy--2-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41Yd_-ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/10/giphy--2-.gif" alt="September 2021 New launch and Updates for Developers üöÄ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. iOS SDK v1.0.0 (NEW!)&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;p&gt;We are launching the &lt;a href="https://docs.videosdk.live/docs/realtime-communication/sdk-reference/ios-sdk/setup"&gt;iOS Video call SDK&lt;/a&gt; this month which is completely compatible with our other SDKs. Visit our docs to start integrating right now!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Join or start the same meeting from iOS devices.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Manage and &lt;strong&gt;display participant videos&lt;/strong&gt; in a grid or list or any custom layout.&lt;/li&gt;
&lt;li&gt;Support for wired and wireless headsets for &lt;strong&gt;audio calling&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/videosdk-live/videosdk-rtc-ios-sdk-example"&gt;Code sample&lt;/a&gt; on iOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Flutter SDK v0.0.4 (NEW!)&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;p&gt;We are also launching the &lt;a href="https://pub.dev/packages/videosdk"&gt;Flutter Video call SDK&lt;/a&gt; this October which will be completely compatible with our other SDKs. The documentation is still a work in progress. Stay tuned for the update.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single &lt;strong&gt;MeetingBuilder&lt;/strong&gt; widget for integrating the meeting.&lt;/li&gt;
&lt;li&gt;Manage and &lt;strong&gt;display participant videos&lt;/strong&gt; in a grid or list or any custom layout.&lt;/li&gt;
&lt;li&gt;Support for wired and wireless headsets for &lt;strong&gt;audio calling&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/videosdk-live/videosdk-rtc-flutter-sdk-example"&gt;Code sample&lt;/a&gt; on Flutter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code Samples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;New code samples released.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RTC SDK: &lt;a href="https://github.com/videosdk-live/videosdk-rtc-flutter-sdk-example"&gt;Flutter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;RTC SDK:&lt;a href="https://github.com/videosdk-live/videosdk-rtc-ios-sdk-example"&gt;IOS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can always &lt;a href="https://videosdk.live/contact"&gt;connect with us&lt;/a&gt; in case of any query or help. We are happy to assist you.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Videosdk.live presents you its Flutter and IOS Video SDK. Integrate easy-to-use real-time audio and video calling with this robust flutter video API and make experiences better with full flexibility and customization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqXM_prh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/Video-SDK-for-Re.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqXM_prh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/Video-SDK-for-Re.png" alt="September 2021 New launch and Updates for Developers üöÄ"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>New Features of Windows 11</title>
      <author>Jack Pritom Soren </author>
      <pubDate>Sat, 02 Oct 2021 09:41:43 +0000</pubDate>
      <link>https://dev.to/jps27cse/new-features-of-windows-11-382p</link>
      <guid>https://dev.to/jps27cse/new-features-of-windows-11-382p</guid>
      <description>&lt;p&gt;Microsoft's New Big Windows 11 Update is on the way.&lt;/p&gt;

&lt;p&gt;Microsoft confirmed that Windows 11 is launching on October 5 2021 as a free upgrade, with eligible devices being notified from them on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements-"&gt;
  &lt;/a&gt;
  Requirements :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Processor: 1 gigahertz (GHz) or faster with at least two cores on a compatible 64-bit processor or SoC&lt;/li&gt;
&lt;li&gt;RAM: 4GB&lt;/li&gt;
&lt;li&gt;Storage: 64GB&lt;/li&gt;
&lt;li&gt;System Firmware: UEFI, Secure Boot capable&lt;/li&gt;
&lt;li&gt;TPM: Trusted Platform Module 2.0&lt;/li&gt;
&lt;li&gt;Graphics Card: DirectX 12 or later with WDDM 2.0 driver&lt;/li&gt;
&lt;li&gt;Display: 720p, 8-bit per color channel, at least 9-inch diagonal&lt;/li&gt;
&lt;li&gt;Internet Connection and Microsoft Account: Windows 11 Home requires an active internet connection and a Microsoft Account to complete initial, first-use setup of the operating system, or when switching a device out of Windows 11 Home in S-mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features-"&gt;
  &lt;/a&gt;
  Features :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A New interface : Clean design with rounded corners, pastel shades and a centered Start menu and Taskbar. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrated Android apps : Android apps will be coming to Windows 11&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Widgets : Windows Widgets are back in Windows 11, accessible via the dock, with Microsoft touting AI-powered dynamic features that enable widgets, as with the Start menu, to change depending on the apps you're using and the time of day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microsoft Teams integration : Teams will be integrated directly into the Windows 11 Taskbar, making it easier to access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xbox tech for better gaming :  Windows 11 will get certain features found in Xbox consoles, like Auto HDR and DirectStorage, to improve gaming on your Windows PC. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better virtual desktop support : Windows 11 will let you set up virtual desktops in a way that's more similar to MacOS, toggling between multiple desktops for personal, work, school or gaming use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easier transition from monitor to laptop, and better multitasking : The new OS includes features called Snap Groups and Snap Layouts -- collections of the apps you're using at once that sit in the Taskbar, and can come up or be minimized at the same time for easier task switching.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>windows11</category>
    </item>
    <item>
      <title>Awesome Card Design for Website with HTML CSS</title>
      <author>Sadee</author>
      <pubDate>Sat, 02 Oct 2021 09:41:39 +0000</pubDate>
      <link>https://dev.to/codewithsadee/awesome-card-design-for-website-with-html-css-46i</link>
      <guid>https://dev.to/codewithsadee/awesome-card-design-for-website-with-html-css-46i</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/g9VdvKx8fuM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to Create Awesome Card Design for Website with HTML CSS&lt;/p&gt;

&lt;p&gt;In this video I will show you how to create creative card design with hover effect step by step&lt;br&gt;
Website Component Design&lt;/p&gt;

&lt;p&gt;‚åõÔ∏è | ùêÄùê´ùêû ùê≤ùê®ùêÆ ùê¢ùêßùê≠ùêûùê´ùêûùê¨ùê≠ùêûùêù ùê¢ùêß ùêö ùêúùêûùê´ùê≠ùêöùê¢ùêß ùê¨ùêûùêúùê≠ùê¢ùê®ùêß? ùêîùê¨ùêû ùêìùê¢ùê¶ùêûùê¨ùê≠ùêöùê¶ùê©ùê¨&lt;br&gt;
  ‚Üí  0:00 Demo&lt;br&gt;
  ‚Üí  0:17 File Structure &amp;amp; Code&lt;br&gt;
  ‚Üí  8:05 Final Preview&lt;/p&gt;

&lt;p&gt;üì• | ùêÜùêûùê≠ ùêöùê•ùê• ùê¢ùê¶ùêöùê†ùêûùê¨ ùê≠ùê°ùêöùê≠ ùêà ùêÆùê¨ùêûùêù&lt;br&gt;
  ‚Üí  &lt;a href="https://drive.google.com/file/d/1P31-"&gt;https://drive.google.com/file/d/1P31-&lt;/a&gt;... (.zip)&lt;/p&gt;

&lt;p&gt;üÖ∞Ô∏è | ùêÜùêûùê≠ ùê≠ùê°ùêû ùêüùê®ùêßùê≠ ùêà ùêÆùê¨ùêûùêù&lt;br&gt;
  ‚Üí  Open Sans : &lt;a href="https://fonts.google.com/specimen/Ope"&gt;https://fonts.google.com/specimen/Ope&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;üì• | ùêàùêúùê®ùêß ùêãùê¢ùêßùê§&lt;br&gt;
  ‚Üí  &lt;a href="https://ionic.io/ionicons/usage"&gt;https://ionic.io/ionicons/usage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è | ùêàùêßùê≠ùêûùê´ùêûùê¨ùê≠ùêûùêù ùê¢ùêß ùê¨ùêûùêûùê¢ùêßùê† ùê¶ùê®ùê´ùêû ùêØùê¢ùêùùêûùê®ùê¨? ùêíùêîùêÅùêíùêÇùêëùêàùêÅùêÑ ùêçùêéùêñ&lt;br&gt;
  ‚Üí  &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë§ | ùêãùê¢ùê§ùêû - ùêÖùê®ùê•ùê•ùê®ùê∞ &amp;amp; ùêíùêÆùêõùê¨ùêúùê´ùê¢ùêõùêû ùêåùêû&lt;br&gt;
  ‚Üí  Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
  ‚Üí  Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
  ‚Üí  YouTube : &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Open Sourcing URL Shortener</title>
      <author>Rishabh Rawat</author>
      <pubDate>Sat, 02 Oct 2021 09:26:42 +0000</pubDate>
      <link>https://dev.to/rishabh570/open-sourcing-url-shortener-2g3d</link>
      <guid>https://dev.to/rishabh570/open-sourcing-url-shortener-2g3d</guid>
      <description>&lt;p&gt;Open Source Software (OSS) has been the main driving force in democratizing access to so many awesome tools with way more transparency than ever possible. It‚Äôs never too late to start giving back to the community and contribute towards a better OSS culture. That‚Äôs why we started this journey by open-sourcing our in-house URL Shortener service.  The reason for choosing this is to assess the road ahead and be in a better position to embark on our open source journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#road-to-open-sourcing-url-shortener"&gt;
  &lt;/a&gt;
  Road to Open Sourcing URL Shortener
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs take a look at the steps involved in open sourcing this service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-business-logic-abstraction"&gt;
  &lt;/a&gt;
  1. Business logic abstraction
&lt;/h3&gt;

&lt;p&gt;Being an internal service, the URL Shortener was strongly tied with our tracking API which is used for, as the name suggests, tracking purposes. We needed to decouple these services before open-sourcing URL Shortener as having internal dependencies in an open-source project is unfeasible for obvious reasons. This called for refactoring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iza1cifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1dpcte9ppsa3ez8juzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iza1cifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1dpcte9ppsa3ez8juzw.png" alt="URL shortener initial setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the diagram, CTA (Call To Action) token is generated in the notifications service and is passed down to the URL shortener whenever a notification needs to be sent. URL Shortener then stores the CTA token &amp;lt;&amp;gt; original URL mapping in a separate table. And, it simply passes the CTA token and the original URL to the tracking API whenever someone clicks on the short link. As you might guess, the CTA token has nothing to do with a URL shortening service and therefore it should not have any context of such tokens.&lt;/p&gt;

&lt;p&gt;This presented before us, the quest to pull URL Shortener out of the loop and stop passing any redundant data to it. Let‚Äôs take a look at the steps involved:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtCqGEP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6kund78e8img1e90hrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtCqGEP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6kund78e8img1e90hrd.png" alt="URL Shortener Business Logic Abstraction HLD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the above HLD proposes a different way of passing down the CTA Token in a way where URL Shortener is not bothered with unnecessary data. Let‚Äôs go through it step-by-step:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Notification services hit the URL Shortener to get the short URL whenever a notification needs a short link (eg. referral emails, market open reminder SMS, order updates SMS, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; URL Shortener generates the short URL, maps it with the corresponding original (or ‚Äúlong‚Äù) URL, and returns the result to the notification service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; After sending the notification, the shortener forwards the CTA token &amp;amp; the corresponding original URL to our tracking API service when someone clicks on the short URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Tracking API stores this original URL to CTA token mapping in the PostgreSQL.&lt;/p&gt;

&lt;p&gt;Forwarding the data to tracking API happens like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Tvy9pPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jlu3oks6w698nwd3bh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Tvy9pPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jlu3oks6w698nwd3bh5.png" alt="URL Shortener Modified Tracking HLD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; User clicks on the short link received through email or SMS notification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; URL Shortener receives the short URL user clicked and redirects him/her to the original URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Before redirecting the user to the original URL, the shortener also emits a kafka event that contains the short URL that the user clicked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Tracking API, upon receiving the short URL, stores the data corresponding to that in the PostgreSQL table for analytics purposes. No user-specific data is used in any shape &amp;amp; form. We only use the metadata to understand the delivery, click rates, etc.&lt;/p&gt;

&lt;p&gt;And that is it for the business logic abstraction. Following these steps, we were able to make the URL Shortener loosely coupled with our tracking API and free from internal dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-refactor"&gt;
  &lt;/a&gt;
  2. Refactor
&lt;/h3&gt;

&lt;p&gt;The URL Shortener service was created a little more than 2 years ago to fulfil the needs of an internal URL shortening service. It was just a bare-bone HTTP server with SQLite as the database. But with the increase in the notification sent from smallcase, the number of requests to the shortener has increased significantly over time, it gets around 500k (read + write) requests per month. There were a couple of things that need addressal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple &amp;amp; non-scalable nature of the service&lt;/li&gt;
&lt;li&gt;No logging pipeline to debug when something goes wrong.&lt;/li&gt;
&lt;li&gt;No way to avoid getting duplicate short keys for different URLs.&lt;/li&gt;
&lt;li&gt;No purging of stale entries from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#moving-to-fastify"&gt;
  &lt;/a&gt;
  Moving to Fastify
&lt;/h4&gt;

&lt;p&gt;As I mentioned, the initial setup was not reliable enough for the growing needs. There were some major changes required in the implementation. There were three options we had in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using S3, AWS Lambda, and CloudFront&lt;/li&gt;
&lt;li&gt;Using AWS API Gateway and Dynamo DB&lt;/li&gt;
&lt;li&gt;Fastify with MongoDB &amp;amp; Redis&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs talk about each one of them.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-s3-aws-lambda-and-cloudfront"&gt;
  &lt;/a&gt;
  Using S3, AWS Lambda, and CloudFront
&lt;/h5&gt;

&lt;p&gt;This approach aims to use S3 as a redirection engine by activating website hosting on the bucket. This way, for each short URL we can create a new empty object with a long URL attached in the website redirect metadata. On top of this, we can create a bucket lifecycle policy to purge the entries older than a set timeframe.&lt;/p&gt;

&lt;p&gt;To create an admin page, all we need is a basic page hosted on S3 which will trigger a POST request to API Gateway invoking a lambda function which will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a short key&lt;/li&gt;
&lt;li&gt;create an empty S3 object&lt;/li&gt;
&lt;li&gt;store the short URL (/) as the redirection destination in the object properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While going ahead with this approach meant we didn‚Äôt have to worry about scalability or &lt;a href="https://www.digitalocean.com/community/tutorials/what-is-high-availability"&gt;High Availability&lt;/a&gt;, it certainly ties us with AWS offerings and implicitly denies any flexibility when it comes to change of service vendor.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-aws-api-gateway-with-dynamo-db"&gt;
  &lt;/a&gt;
  Using AWS API Gateway with Dynamo DB
&lt;/h5&gt;

&lt;p&gt;If we observe closely, all that lambda function is doing is storing the short URL in the empty S3 object. Hence, we can cut out on the resources &amp;amp; cost using this approach. Let‚Äôs take a look at how API Gateway combined with Dynamo DB would work here.&lt;/p&gt;

&lt;p&gt;There are four phases a request goes through when using the API Gateway:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method Request&lt;/li&gt;
&lt;li&gt;Integration Request&lt;/li&gt;
&lt;li&gt;Integration Response&lt;/li&gt;
&lt;li&gt;Method Response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-request.html"&gt;Method Request&lt;/a&gt; involves creating API method resources, attaching HTTP verbs, authorisation, validation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-integration-settings-integration-request.html"&gt;Integration Request&lt;/a&gt; is responsible for setting up the integration between API Gateway &amp;amp; DynamoDB. One thing to note here, we need to modify the request &amp;amp; change it to a format that DynamoDB understands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-response.html"&gt;Method Response&lt;/a&gt; is configured to send the response back to the client which can be 200, 400, or some other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-integration-settings-integration-response.html"&gt;Integration Response&lt;/a&gt; is what we get from DynamoDB but again, we need to convert this back into the format that the client understands.&lt;/p&gt;

&lt;p&gt;Again, while this approach allows us to get rid of the lambda and uses Apache VTL to communicate with DynamoDB, this presents the vendor lock-in we saw in the previous approach as it is strongly tied to AWS offerings. Also, it leaves us with us zero-control over the execution.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#fastify-with-mongodb-amp-redis"&gt;
  &lt;/a&gt;
  Fastify with MongoDB &amp;amp; Redis
&lt;/h5&gt;

&lt;p&gt;It is immediately noticeable that this approach gives us complete control over the service with no vendor lock-in. We can choose any data storage solution as per our needs, custom logging setup, and even in-house key generation service if we want.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="https://www.fastify.io/benchmarks/"&gt;benchmarks&lt;/a&gt;, Fastify is the clear winner among other Nodejs frameworks. It has &lt;a href="https://github.com/delvedor/find-my-way"&gt;faster routing&lt;/a&gt;, &lt;a href="https://github.com/fastify/fast-json-stringify"&gt;JSON handling with faster rendering&lt;/a&gt; and a bunch of ready-made &lt;a href="https://www.fastify.io/ecosystem/"&gt;plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this is perfect in terms of what we wanted, it also means we now have to make sure that MongoDB and Redis are highly available otherwise it directly affects our service. This means developers‚Äô bandwidth is extensively required which was not the case in the previous approaches.&lt;/p&gt;

&lt;p&gt;With our Fastify application in place, we were able to plug our improved custom logging pipeline which is a huge benefit to the developer experience because the old pipeline was not reliable for the scale we now operate at.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-logging-pipeline"&gt;
  &lt;/a&gt;
  Adding logging pipeline
&lt;/h4&gt;

&lt;p&gt;With the increasing number of requests and possibly errors, we needed a proper logging setup to debug and monitor the service. That‚Äôs why we chose &lt;a href="https://www.npmjs.com/package/bunyan"&gt;bunyan&lt;/a&gt; to log insightful data in our application. These logs sit conveniently on our new logging pipeline running on EFK (or, Elasticsearch Fluentd Kibana) stack. While this deserves a separate blog post on its own, let‚Äôs take a brief look at how the logs travel from our application to the &lt;a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html"&gt;kibana dashboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHc_dSbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3euqz7u5twhzko1dk4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHc_dSbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3euqz7u5twhzko1dk4.png" alt="Logging pipeline used for URL shortener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The logs that we have written inside the application are produced to the standard output. The fluentd collector (which is present in all the applications using the EFK logging pipeline) takes all the logs from the stdout and forwards them to the fluentd aggregator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The aggregator is simply where all the logs get collected from various &lt;a href="https://aws.amazon.com/ec2/"&gt;AWS EC2&lt;/a&gt; application instances. All the logs then go through the &lt;a href="https://www.fluentd.org/plugins"&gt;plugins&lt;/a&gt; installed to process the logs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These potentially transformed logs are then sent to the Elasticsearch nodes over the network where this data gets stored. The structure of the logs needs to follow a predetermined pattern and that‚Äôs why Elasticsearch needs an index mapping to understand the structure of logs comings its way. This helps in &lt;a href="https://www.elastic.co/blog/what-is-an-elasticsearch-index"&gt;indexing&lt;/a&gt; and storing data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kibana uses the structured logs data to show the logs nicely on a &lt;a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html"&gt;dashboard&lt;/a&gt;. Since the data is structured, Kibana enables us to create visualisations and custom dashboards (a collection of different visualisations) on top of it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#generating-unique-short-key"&gt;
  &lt;/a&gt;
  Generating unique short key
&lt;/h4&gt;

&lt;p&gt;With the increasing number of short key generations, there‚Äôs a higher probability that the key generation service can spit out the same short keys for two different original (or long) URLs, if not handled correctly. The solution to this problem is simply not let a short key get reused. Now there are two ways to achieve this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do not generate a duplicate short key&lt;/li&gt;
&lt;li&gt;Retry until a unique short key is generated&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs take a look at both approaches.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#do-not-generate-a-duplicate-short-key"&gt;
  &lt;/a&gt;
  Do not generate a duplicate short key
&lt;/h5&gt;

&lt;p&gt;To make sure we don‚Äôt generate a duplicate short key ever, we need to know what keys have been generated already. One approach could be creating two tables in PostgreSQL, one for the available keys (let‚Äôs say AvlK) and one for the keys that are occupied (let‚Äôs say OccK).&lt;/p&gt;

&lt;p&gt;So while creating a short URL, we would fetch one unused key from AvlK table, add it to OccK table and return it. Two database operations, one short URL. Not fair.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#retry-until-a-unique-short-key-is-generated"&gt;
  &lt;/a&gt;
  Retry until a unique short key is generated
&lt;/h5&gt;

&lt;p&gt;Instead of maintaining two tables just to get one short key, we can work with just one PostgreSQL table which will store the keys already occupied. We can then simply generate a random key, check if it is occupied, and assign it if it is not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4N_LiIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoo54yt30p5uaboiz9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4N_LiIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoo54yt30p5uaboiz9k.png" alt="NanoId Collision Calculator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the results on &lt;a href="https://zelark.github.io/nano-id-cc/"&gt;nanoId collision calculator&lt;/a&gt;, we can see that after three days of generating short keys at rate of 70/hr, there is 1% probability of encountering at least one collision.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;70 keys generation per hour * 24 hours * 3 days = 5040 short keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So 1% probability means, having at least &lt;strong&gt;one collision in every 5k short keys generation&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passively-purging-the-url-mappings"&gt;
  &lt;/a&gt;
  Passively purging the URL mappings
&lt;/h4&gt;

&lt;p&gt;Short URLs are not supposed to have a lifetime of decades or even more than 1 year depending upon the use case. As it is not practical to store the entries forever. That‚Äôs why purging is required. But the implementation can be flexible. At smallcase, short URLs are majorly generated for two broad categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For transactional notifications&lt;/li&gt;
&lt;li&gt;For campaigns&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The short links generated for the transactional notifications are not supposed to be active forever whereas the links that are generated for the campaigns are supposed to be active till the campaign is active. Considering the differences in the lifespan of different short links, they needed to be treated differently when it comes to purging the entries from the database.&lt;/p&gt;

&lt;p&gt;One approach was to run a job that would remove all the entries which are older than a set timeframe. But turns out there was a better way with minimal additional effort. Instead of running a dedicated job to purge entries, we could simply handle this when we‚Äôre creating short URLs. Remember we were doing retries to land upon a key that was not already occupied? A minor change in that process handled purging for us. Just when you get an already occupied key, allow overwriting to that key only if it has hit the expiration date (which is also stored during the creation of the short key along with the mapping). This increases the time of creating short links comparatively but this is the trade-off you need to make to ensure unique keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-documentation"&gt;
  &lt;/a&gt;
  3. Documentation
&lt;/h3&gt;

&lt;p&gt;Lastly, the crucial part of an open-source project. Documentation. These were the following things that were on the checklist:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;README.md&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md&lt;/li&gt;
&lt;li&gt;CODE_OF_CONDUCT.md&lt;/li&gt;
&lt;li&gt;LICENCE&lt;/li&gt;
&lt;li&gt;CODEOWNERS&lt;/li&gt;
&lt;li&gt;Templates for creating issues &amp;amp; submitting PRs for streamlined flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And finally, making the project public! üéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;p&gt;This was our journey to open-sourcing the URL shortener service that we use at smallcase. I believe open source not only helps in building a better tool, but it also builds a community of people that care about equal access to software. At the end of the day, we learn from each other.&lt;/p&gt;

&lt;p&gt;The project is available here: &lt;a href="//github.com/smallcase/smalllinks"&gt;github.com/smallcase/smalllinks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to create an issue on Github if you find any improvement opportunities or bugs present in the project. I‚Äôll be happy to connect üòÉ.&lt;/p&gt;

</description>
      <category>fastify</category>
      <category>urlshortener</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How Internet Message Access Protocol(IMAP) works in Node JS</title>
      <author>Venkat3750</author>
      <pubDate>Sat, 02 Oct 2021 09:18:11 +0000</pubDate>
      <link>https://dev.to/venkat3750/how-internet-message-access-protocol-imap-works-in-node-js-1jh5</link>
      <guid>https://dev.to/venkat3750/how-internet-message-access-protocol-imap-works-in-node-js-1jh5</guid>
      <description>&lt;p&gt;Hello my dear peers üòÉ! Hope you're doing well. Welcome to my tech blog and this time we are discussing about &lt;strong&gt;IMAP&lt;/strong&gt; package and it's uses in Node JS with real time code snippet examples. In this, first will only focus on reading emails.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nodeimap-is-an-imap-client-module-for-nodejs"&gt;
  &lt;/a&gt;
  node-imap is an IMAP client module for node.js.
&lt;/h4&gt;

&lt;p&gt;Let's open our terminal and hit &lt;strong&gt;npm install node-imap.&lt;/strong&gt; to install IMAP package.&lt;/p&gt;

&lt;p&gt;In this blog, we are mainly focusing on how to read email attachments based on the &lt;strong&gt;DATE RANGE&lt;/strong&gt;, &lt;strong&gt;FROM&lt;/strong&gt; particular email address and it's &lt;strong&gt;SUBJECT&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's see from the below example code which fetches first 3 email messages from the mail box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Imap = require('node-imap'),
    inspect = require('util').inspect;

var imap = new Imap({
  user: 'mygmailname@gmail.com',
  password: 'mygmailpassword',
  host: 'imap.gmail.com',
  port: 993,
  tls: true
});

function openInbox(cb) {
  imap.openBox('INBOX', true, cb);
}

imap.once('ready', function() {
  openInbox(function(err, box) {
    if (err) throw err;
    var f = imap.seq.fetch('1:3', {
      bodies: 'HEADER.FIELDS (FROM TO SUBJECT DATE)',
      struct: true
    });
    f.on('message', function(msg, seqno) {
      console.log('Message #%d', seqno);
      var prefix = '(#' + seqno + ') ';
      msg.on('body', function(stream, info) {
        var buffer = '';
        stream.on('data', function(chunk) {
          buffer += chunk.toString('utf8');
        });
        stream.once('end', function() {
          console.log(prefix + 'Parsed header: %s', inspect(Imap.parseHeader(buffer)));
        });
      });
      msg.once('attributes', function(attrs) {
        console.log(prefix + 'Attributes: %s', inspect(attrs, false, 8));
      });
      msg.once('end', function() {
        console.log(prefix + 'Finished');
      });
    });
    f.once('error', function(err) {
      console.log('Fetch error: ' + err);
    });
    f.once('end', function() {
      console.log('Done fetching all messages!');
      imap.end();
    });
  });
});

imap.once('error', function(err) {
  console.log(err);
});

imap.once('end', function() {
  console.log('Connection ended');
});

imap.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are scenarios where you need to fetch only the attachments from the email and process it for a different purpose. In such cases, please refer below code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var imap = new Imap({
  user: 'mygmailname@gmail.com',
  password: 'mygmailpassword',
  host: 'imap.gmail.com',
    port: 993,
    tls: true,
  });
  imap.once("ready", function () {
    var fs = require("fs"),
      fileStream;
    imap.openBox("INBOX", true, function (err, box) {
      if (err) throw err;
      try {
        imap.search(
          [
            ["FROM", FROM_MAIL],
            ["HEADER", "SUBJECT", SUBJECT],
            ["UNSEEN", ["SINCE", "Day, Year"]],
          ],
          function (err, results) {
            if (err) throw err;
            try {
              var f = imap.fetch(results, {
                bodies: ["HEADER.FIELDS (FROM TO SUBJECT DATE)"],
                struct: true,
              });
              f.on("message", function (msg, seqno) {
                console.log("Message #%d", seqno);

                var prefix = "(#" + seqno + ") ";
                msg.on("body", function (stream, info) {
                  var buffer = "";
                  stream.on("data", function (chunk) {
                    buffer += chunk.toString("utf8");
                  });
                  stream.once("end", function () {
                    console.log(
                      prefix + "Parsed header: %s",
                      Imap.parseHeader(buffer)
                    );
                  });
                });
                msg.once("attributes", function (attrs) {
                  // console.log("test", attrs);
                  var attachments = findAttachmentParts(attrs.struct);
                  console.log(
                    prefix + "Has attachments: %d",
                    attachments.length
                  );
                  for (var i = 0, len = attachments.length; i &amp;lt; len; ++i) {
                    var attachment = attachments[i];

                    var f = imap.fetch(attrs.uid, {
                      //do not use imap.seq.fetch here
                      bodies: [attachment.partID],
                      struct: true,
                    });
                    //build function to process attachment message
                    f.on("message", processAttachment(attachment));
                  }
                });
                msg.once("end", function () {
                  console.log(prefix + "Finished email");
                });
              });
              f.once("error", function (err) {
                console.log("Fetch error: " + err);
              });
              f.once("end", function () {
                console.log("Done fetching all messages!");
                imap.end();
              });
            } catch (e) {
              console.log("err", e);
            }
          }
        );
      } catch (e) {
        console.log("log", e);
      }
    });
  });

  imap.once("error", function (err) {
    console.log(err);
  });

  imap.once("end", function () {
    console.log("Connection ended");
  });
  imap.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The downloaded email attachment must be decoded using &lt;strong&gt;Base64Decode()&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function processAttachment(attachment) {
  var filename = attachment.params.name;
  var encoding = attachment.encoding;
  var name = filename.split(".")[1];
  console.log("log", name);

  return function (msg, seqno) {
    if (name === "pdf") {
      var prefix = "(#" + seqno + ") ";
      msg.on("body", function (stream, info) {
        //Create a write stream so that we can stream the attachment to file;
        console.log(
          prefix + "Streaming this attachment to file",
          filename,
          info
        );
        var path = require("path");
       // var dirPath = path.join(__dirname, "/attachments");
        var writeStream = fs.createWriteStream(filename);
        writeStream.on("finish", function () {
          console.log(prefix + "Done writing to file %s", filename);
        });

        if (toUpper(encoding) === "BASE64") {
          stream.pipe(new base64.Base64Decode()).pipe(writeStream);
        } else {
          stream.pipe(writeStream);
        }
      });
      msg.once("end", function () {
        console.log(prefix + "Finished attachment %s", filename);
      });
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above process attachment method has a condition check of having only PDF docs.&lt;/p&gt;

&lt;p&gt;So, after processing the email attachments would you recommend those emails still be present in same inbox? No not at all, because we need to move that to some other folder so that we can differentiate the newly arrived emails. &lt;/p&gt;

&lt;p&gt;So, you can move the processed email to specific folder from the inbox using below code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; imap.seq.move(seqno, "Processed", function (err) {
                  if (!err) {
                    console.log(seqno + ": move success");
                  }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you got atleast an idea how to work with imap package and with emails in Node JS üéâüéâ. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/node-imap"&gt;https://www.npmjs.com/package/node-imap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/mikebevz/node-imap"&gt;https://github.com/mikebevz/node-imap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for sticking around and holding on to the end.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>imap</category>
    </item>
  </channel>
</rss>
