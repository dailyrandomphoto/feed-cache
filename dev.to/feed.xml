<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simplest way to compile all TypeScript into one single Js file by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 15 Nov 2021 15:15:26 +0000</pubDate>
      <link>https://dev.to/silvenleaf/simplest-way-to-compile-all-typescript-into-one-single-js-file-19bj</link>
      <guid>https://dev.to/silvenleaf/simplest-way-to-compile-all-typescript-into-one-single-js-file-19bj</guid>
      <description>&lt;p&gt;Ahoy there! It's I, SilvenLEAF!! Have you ever faced an issue where you have many TypeScript files but want them all to convert into one Single JavaScript file so that you can reference it from your HTML? Then fear you not! Let's get it done in the simplest way!! &lt;/p&gt;

&lt;p&gt;We'll be using Webpack with TypeScript. Let's start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-begin-the-project"&gt;
  &lt;/a&gt;
  Step 0: Begin the project
&lt;/h3&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h2&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;p&gt;Let's update some of the properties from that &lt;strong&gt;.tsconfig&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll convert all TypeScript files that are inside &lt;strong&gt;"src"&lt;/strong&gt; folder and output them in the &lt;strong&gt;"dist"&lt;/strong&gt; folder.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-create-a-simplest-project"&gt;
  &lt;/a&gt;
  Step 1: Create a Simplest project
&lt;/h3&gt;

&lt;p&gt;Let's create an &lt;strong&gt;"index.html"&lt;/strong&gt; file on the root level of your project folder with this following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- By @SilvenLEAF --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./dist/app-bundle.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack with TypeScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Let's learn Webpack with TypeScript&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alertBtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See on line no 7, we are referencing &lt;strong&gt;"./dist/app-bundle.js"&lt;/strong&gt; JavaScript file. This will be the single JavaScript file which will be compiled from all those TypeScript files.&lt;/p&gt;

&lt;p&gt;Now let's create a folder &lt;strong&gt;"src"&lt;/strong&gt; on the root level and inside it, let's create all our TypeScript files. Let's create &lt;strong&gt;"app.ts"&lt;/strong&gt; and &lt;strong&gt;"variable.ts"&lt;/strong&gt; files (inside the &lt;strong&gt;"src"&lt;/strong&gt; folder. &lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;"variable.ts"&lt;/strong&gt; file, write the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside &lt;strong&gt;"app.ts"&lt;/strong&gt; file write the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// By @SilvenLEAF&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./variable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alertBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#alertBtn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLHeadingElement&lt;/span&gt;

&lt;span class="nx"&gt;alertBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Hello there, I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! We have a simple project created. Now let's compile all those TypeScript files into one single file and test it out.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-2-configure-webpack"&gt;
  &lt;/a&gt;
  Step 2: Configure Webpack
&lt;/h3&gt;

&lt;p&gt;Type the following command to install the required packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; webpack webpack-cli typescript ts-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the shorthand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now create a &lt;strong&gt;"webpack.config.js"&lt;/strong&gt; file on the root level of your project folder with the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//webpack.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;devtool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline-source-map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--- Will be compiled to this single file&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;tsx&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's compile them and test it out. Type this following command to compile all TypeScript files into one single file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See we are not using the &lt;strong&gt;"tsc"&lt;/strong&gt; command to compile here because we are using webpack. It'll create a single file named &lt;strong&gt;"app-bundle.js"&lt;/strong&gt; inside &lt;strong&gt;"dist"&lt;/strong&gt; folder. We'll be linking this file on the &lt;strong&gt;"index.html"&lt;/strong&gt;. See line no 7 of &lt;strong&gt;"index.html"&lt;/strong&gt; file&lt;/p&gt;

&lt;p&gt;Now let's test it out. Launch the &lt;strong&gt;"index.html"&lt;/strong&gt; file with LIVE Server. (If you don't have this extension installed, install it in VS Code or Atom or whatever Text Editor you are using, and run it). It'll run that html page live on your browser. Click that &lt;strong&gt;"Click me!"&lt;/strong&gt; Button and see that it's working fine!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Before clicking the button&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eY2YeGTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlxonr977ek0izw9b4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eY2YeGTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlxonr977ek0izw9b4v.png" alt="Before clicking the button" width="781" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;After clicking the button&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rceWclJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgw0gza0t9014ept7mzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rceWclJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgw0gza0t9014ept7mzc.png" alt="After clicking the button" width="793" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it was helpful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming by November 17th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  1. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-more-on-devops"&gt;
  &lt;/a&gt;
  2. More on DevOps
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Open-source Node.js commerce engine for Strapi</title>
      <author>Oliver Juhl</author>
      <pubDate>Mon, 15 Nov 2021 15:04:12 +0000</pubDate>
      <link>https://dev.to/medusajs/open-source-nodejs-commerce-engine-for-strapi-259p</link>
      <guid>https://dev.to/medusajs/open-source-nodejs-commerce-engine-for-strapi-259p</guid>
      <description>&lt;p&gt;Use &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; and &lt;a href="https://github.com/strapi/strapi"&gt;Strapi&lt;/a&gt; to power your commerce setup for a full open-source headless solution. In recent years, it has become increasingly popular to go with a headless approach when building ecommerce, blogs, portfolios, and the likes. Among many benefits, you get improved performance, more customizability, and support to scale as your business grows. &lt;/p&gt;

&lt;p&gt;A headless system is essentially a decoupling of presentational layers and backend. It cuts off the traditional proprietary frontend displaying your content (hence the name), and instead gives you Rest APIs, you can consume from whatever system, client, or service you would like.&lt;/p&gt;

&lt;p&gt;Going with the headless approach when building your setup will provide you with a modular system with best-in-breed services within each specific area of your stack; CMS, ecommerce, etc. This is in contrast to how you would traditionally choose a monolithic platform that partly (or hardly) caters to all of your needs.&lt;/p&gt;

&lt;p&gt;This article will guide you through setting up a headless ecommerce setup in which content is managed by &lt;a href="http://strapi.io"&gt;Strapi&lt;/a&gt; and the ecommerce is powered by &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; - on a 100% open-source stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-medusa-and-why-strapi"&gt;
  &lt;/a&gt;
  Why Medusa, and why Strapi?
&lt;/h2&gt;

&lt;p&gt;The bottleneck of headless ecommerce systems is most often the amount of resources it requires to both get started and to maintain. You need backend developers to handle your infrastructure and integrations and frontend developers to build the customer experience. This is one of the reasons many existing headless solutions target enterprise businesses. To allow for small to mid-sized businesses to enter the space, one must cater to the developer experience. If the onboarding, setup, and implementation process are all easy to approach, you no longer need a team of ten to build a scalable ecommerce setup. &lt;/p&gt;

&lt;p&gt;Strapi and Medusa are two systems built primarily for developers and the combination of the two enables you to build an ecommerce store with a blazingly fast, content-rich frontend and a highly extendable backend.&lt;/p&gt;

&lt;p&gt;Both projects are open-source, headless, and built with Node.js. They use a very similar architecture for plugins and customizations, that gives you the ability to extend your commerce and CMS to fit exactly your needs. Let's now dive into the installation and setup of the two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The following guide for setting up the plugin assumes, that you are familiar with both Strapi and Medusa. If this is not the case, visit the official &lt;a href="https://docs.medusa-commerce.com/tutorial/set-up-your-development-environment"&gt;Medusa&lt;/a&gt; and &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-medusa"&gt;
  &lt;/a&gt;
  Setting up Medusa
&lt;/h3&gt;

&lt;p&gt;First, create a Medusa project using your favorite package manager. You can go about this in two ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;npx&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx create-medusa-app&lt;/code&gt;  will allow you to create a Medusa store engine, a storefront, and Medusa admin in a single command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npx&lt;/span&gt;
npx create-medusa-app

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn create medusa-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When choosing &lt;code&gt;npx&lt;/code&gt; you are shown different store engine options as part of the setup. For this Strapi tutorial, you should choose &lt;code&gt;medusa-starter-default&lt;/code&gt;. Optionally, pick a storefront.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;medusa-cli&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@medusajs/medusa-cli&lt;/code&gt; is our Command Line Tool for creating the Medusa store engine (alongside many other powerful commands). Use it as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn global add @medusajs/medusa-cli

&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @medusajs/medusa-cli

&lt;span class="c"&gt;# initialise a Medusa project&lt;/span&gt;
medusa new my-medusa-store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Medusa uses Redis for emitting events in the system, so ensure, that this is installed and running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;code&gt;medusa-config.js&lt;/code&gt; you should enable it. Your project config in the bottom of the file should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projectConfig: &lt;span class="o"&gt;{&lt;/span&gt;
  redis_url: REDIS_URL,
  database_database: &lt;span class="s2"&gt;"./medusa-db.sql"&lt;/span&gt;,
  database_type: &lt;span class="s2"&gt;"sqlite"&lt;/span&gt;,
  store_cors: STORE_CORS,
  admin_cors: ADMIN_CORS,
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, add Strapi to your list of plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;resolve:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`medusa-plugin-strapi`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;options:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_medusa_user:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'medusa_user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_medusa_password:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'medusaPassword&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_url:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;strapi_port:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, install the plugin using your package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#using yarn&lt;/span&gt;
yarn add medusa-plugin-strapi

&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;medusa-plugin-strapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've now successfully installed and configured your Medusa store engine. Seed it with data and start it up by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm run seed &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm start

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn seed &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll now turn to the Strapi side of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-strapi"&gt;
  &lt;/a&gt;
  Setting up Strapi
&lt;/h3&gt;

&lt;p&gt;Similar to how you installed Medusa, you can install Strapi using your favorite package manager. Use the &lt;code&gt;strapi-medusa-template&lt;/code&gt; to create your project. The template is a custom Strapi implementation required for the two systems to work together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using npx&lt;/span&gt;
npx create-strapi-app strapi-medusa &lt;span class="nt"&gt;--template&lt;/span&gt; https://github.com/Deathwish98/strapi-medusa-template.git

&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn create strapi-app strapi-medusa &lt;span class="nt"&gt;--template&lt;/span&gt; https://github.com/Deathwish98/strapi-medusa-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the command, you have a full Strapi project configured to synchronize with Medusa. Upon the initial start of the Strapi server, all the required models will be created. They will correlate with models from Medusa to allow for two-way synchronization. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The Strapi template starter uses SQLite as the default database. There is a known bug related to &lt;code&gt;knex.js&lt;/code&gt; that comes from multiple write connections. Restarting the Strapi server should make the error disappear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The power of using Strapi with Medusa comes from two-way synchronization. Strapi allows you to enrich your products with extra fields and data, such that you can perfect the customer experience. But for the products to appear in Strapi, you are required to create them in Medusa. For the commerce logic in your presentational layer to function properly, you need the Medusa IDs of products and variants. This is used for operations like adding to cart and going through the checkout flow.&lt;/p&gt;

&lt;p&gt;When products are created in Medusa, the two-way communication ensures that data is kept consistent between the two systems. Though only some fields are synchronized and those are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product&lt;/strong&gt;: title, subtitle, description, handle&lt;br&gt;
&lt;strong&gt;Variants&lt;/strong&gt;: title&lt;br&gt;
&lt;strong&gt;Region&lt;/strong&gt;: name&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Further down the road, the support for synchronizing more entities is expected to be introduced&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Using Postgres in Medusa (optional)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Postgres to function, you need to create a local database. One way of doing this would be to use your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;createdb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;medusa-store&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on what system you are on and how your local Postgres is configured, the above command might fail. In that case, please investigate the correct way to create a local database on your pc.&lt;/p&gt;

&lt;p&gt;Navigate to your newly created Medusa project (&lt;code&gt;&amp;lt;project name&amp;gt;/backend&lt;/code&gt; if you used &lt;code&gt;npx&lt;/code&gt;). In &lt;code&gt;medusa-config.js&lt;/code&gt;, ensure that you have Redis and Postgres enabled. The project configurations at the bottom of the file should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projectConfig: &lt;span class="o"&gt;{&lt;/span&gt;
  redis_url: REDIS_URL,
  database_url: DATABASE_URL,
  database_type: &lt;span class="s2"&gt;"postgres"&lt;/span&gt;,
  store_cors: STORE_CORS,
  admin_cors: ADMIN_CORS,
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: the &lt;code&gt;DATABASE_URL&lt;/code&gt; variable should use the Postgres database created in the previous step&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-next-steps"&gt;
  &lt;/a&gt;
  Summary and next steps
&lt;/h2&gt;

&lt;p&gt;You are now provided with the toolbox for creating amazing digital commerce experiences on top of a highly extendable CMS system and ecommerce platform. &lt;/p&gt;

&lt;p&gt;To quickly get started, see our starters for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/medusajs/gatsby-starter-medusa"&gt;GatsbyJS&lt;/a&gt; (much more feature-rich V2 coming soon)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medusajs/nextjs-starter-medusa"&gt;NextJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A big thanks to community member Pawan Sharma (&lt;a href="https://github.com/Deathwish98"&gt;Deathwish98&lt;/a&gt;) for leading the implementation of this integration with Strapi. If you want to be part of the Medusa community, feel free to join us on our &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord channel&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>headless</category>
    </item>
    <item>
      <title>How Does Functional Programming Contribute to Modern Languages?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 15 Nov 2021 14:30:19 +0000</pubDate>
      <link>https://dev.to/typeable/how-does-functional-programming-contribute-to-modern-languages-4gap</link>
      <guid>https://dev.to/typeable/how-does-functional-programming-contribute-to-modern-languages-4gap</guid>
      <description>&lt;p&gt;Author: Vladislav Lagunov&lt;/p&gt;

&lt;p&gt;Modern programming languages have a large set of various tools and useful features, which makes it possible to write quite a different code in the same language for the same task.&lt;br&gt;
Programming paradigm is a way of thinking in the first place – the way the programmer &lt;em&gt;thinks&lt;/em&gt; about the data representation and processing. In other words, programming paradigm exists in the programmer’s mind and is not a part of the language. Different languages can support a specific paradigm to a varying degree. If we open Wikipedia and start reading about the most popular programming languages, we’ll see that many of them are described as “multi-paradigm”: they allow programming in different styles though some of them will be more convenient to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-soOaYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-soOaYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features1.jpg" alt="I ♥ FP by https://impurepics.com/" width="550" height="344"&gt;&lt;/a&gt;&lt;br&gt;
I ♥ FP by &lt;a href="https://impurepics.com/"&gt;https://impurepics.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our recent post, we spoke about the &lt;a href="https://dev.to/typeable/do-you-know-where-lisp-is-used-nowadays-4pbn"&gt;practical applications of Lisp&lt;/a&gt; and mentioned, without going into details, that it strongly influenced the development of other programming languages. Now it’s high time to explore this topic in more detail and figure out what contribution functional programming in general (not just Lisp!) has made to the development of other languages. Since we use Haskell as the main programming language, we couldn’t help touching upon this topic.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to consider several mechanisms which either emerged in the functional programming languages or were most widely used and popularized by these languages, eventually turning up in originally non-functional languages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firstclass-functions"&gt;
  &lt;/a&gt;
  First-class functions
&lt;/h2&gt;

&lt;p&gt;The distinctive feature of FP style, in general, is the wide use of functions which become one of the main development tools. Let’s quickly look through the main definitions describing the differences between the functions and procedures and other similar constructs of non-functional languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btxYpXSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btxYpXSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features2.jpg" alt="First-class functions are fancy" width="550" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Higher-order function&lt;/strong&gt; is the function that either takes another function as an argument or returns some function as the result. They are also called functionals. This behaviour can be implemented even in pure C using function pointers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update_user_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;update_fn&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;First-class functions&lt;/strong&gt; are the ones which you can manipulate in the same way as any other values: pass as arguments, return as results, assign to variables and structure fields. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lambda function&lt;/strong&gt; is the anonymous function. Besides the absence of a name, support of lambda functions removes other language restrictions on function declarations (in some languages, i.e. in C99 standard, function declarations can occur only at the higher level). Support of lambda functions implies that the function can be declared in any location where other expressions are valid. Lambda functions are mostly used in higher-order functions; when used in combination, they provide convenience and significant shortening of the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of a lambda function used to print out&lt;/span&gt;
&lt;span class="c1"&gt;// the contents of std::vector&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Closure&lt;/strong&gt; is the function that can capture some variables from the context it was declared in, without letting the garbage collector erase the data which can be used in this function for as long as the application has the reference to the function itself. An example in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createClosures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The variable can be seen in the functions below&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// The values of fields inc and print are closures&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter value: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClosures&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;gt;&amp;gt;&amp;gt; "counter value: 2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-comprehension"&gt;
  &lt;/a&gt;
  List comprehension
&lt;/h2&gt;

&lt;p&gt;List comprehension allows writing down concisely the processing or generation of lists using existing ones. Miranda was one of the first languages to use such syntax which was adopted by Haskell; later on, similar constructs appeared in “less functional” languages such as Python, C#, Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2RGCA8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2RGCA8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features3.jpg" alt="Haskell is a leader in adopting new features" width="550" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an example, let's consider the code in Python and Haskell that creates word combinations using adjectives and nouns. These two fragments look very much alike and only have minor syntactical differences, don’t they?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example in Python
&lt;/span&gt;&lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"waterfall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"moon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"silence"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;adjectives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"late"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"divine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;phrases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; ['late waterfall', 'divine waterfall',
#   'blue waterfall', 'late moon', 'divine moon',
#   'blue moon', 'late silence', 'divine silence',
#   'blue silence']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- The same in Haskell&lt;/span&gt;
&lt;span class="n"&gt;nouns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"waterfall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"moon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"silence"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;adjectives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"late"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"divine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;phrases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;nouns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- &amp;gt;&amp;gt;&amp;gt; ['late waterfall', 'divine waterfall',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue waterfall', 'late moon', 'divine moon',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue moon', 'late silence', 'divine silence',&lt;/span&gt;
&lt;span class="c1"&gt;--  'blue silence']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#algebraic-data-types"&gt;
  &lt;/a&gt;
  Algebraic data types
&lt;/h2&gt;

&lt;p&gt;These types can also be called ADTs, sum types, discriminatory unions, disjunctive unions, coproducts, and, probably, some other clever words. Maybe you have the idea of such types under different names but, in a few words, this is a compound type containing the discriminant field (which can be called a tag) together with the associated data. The following is the Haskell example of such compound type describing the user’s possible actions in a hypothetical application implementation &lt;a href="https://todomvc.com/"&gt;TodoMVC&lt;/a&gt;. Some actions involve the “payload” (a string or an element ID).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;UserAction&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TextInput&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EnterPressed&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EscPressed&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;CheckTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;EditTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;DeleteTodoItem&lt;/span&gt; &lt;span class="kt"&gt;ItemId&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ApplyFilter&lt;/span&gt; &lt;span class="kt"&gt;TodoFilter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite its simplicity and usefulness for modelling domain objects, ADTs are rarely supported on a full scale in popular languages and databases. Here are some examples implementing similar types: &lt;a href="https://doc.rust-lang.org/rust-by-example/custom_types/enum.html"&gt;Enum in Rust&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/sealed-classes.html"&gt;Sealed Classes in Kotlin&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/utility/variant"&gt;std::variant in C++&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-matching"&gt;
  &lt;/a&gt;
  Pattern Matching
&lt;/h2&gt;

&lt;p&gt;Pattern Matching is a syntactic construct giving access to the data of the structure consisting of one or several alternatives with different sets of fields (the very ADT, algebraic type sum, enum, std::variant, etc. we discussed earlier). Pattern Matching resembles the switch-case operator you all know from imperative languages. However, its main advantage is that the compiler checks the access to alternative fields statically by using the information about the expression type, while the switch-case doesn’t prevent errors related to incorrect access to the fields, missing cases or redundant checks.&lt;/p&gt;

&lt;p&gt;Pattern Matching is another technique popularized in functional languages where it turned out to be useful. Now it is adopted and integrated – in various forms – in &lt;a href="https://www.python.org/dev/peps/pep-0634/"&gt;Python&lt;/a&gt;, Java, &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching"&gt;C#&lt;/a&gt;, Rust, and other popular languages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Example of state update function in a hypothetical&lt;/span&gt;
&lt;span class="c1"&gt;-- TodoMVC written in the Elm architecture style.&lt;/span&gt;
&lt;span class="c1"&gt;-- Pattern Matching is used to analyze the&lt;/span&gt;
&lt;span class="c1"&gt;-- user-generated event.&lt;/span&gt;
&lt;span class="n"&gt;updateTodoList&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;UserAction&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt;
&lt;span class="n"&gt;updateTodoList&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
  &lt;span class="kt"&gt;TextInput&lt;/span&gt; &lt;span class="n"&gt;newTitle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;EnterPressed&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;appendNewItem&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;EscPressed&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stopEditing&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;CheckTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;itemChecked&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;updateItemById&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;itemChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kt"&gt;EditTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;itemTitle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;updateItemById&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;itemTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kt"&gt;DeleteTodoItem&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deleteItembyId&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt;
  &lt;span class="kt"&gt;ApplyFilter&lt;/span&gt; &lt;span class="n"&gt;newFilter&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;oldState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newFilter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lazy-evaluations"&gt;
  &lt;/a&gt;
  Lazy evaluations
&lt;/h2&gt;

&lt;p&gt;In most programming languages evaluation is performed when the value is assigned to the variable; all arguments are evaluated before the function call (strict evaluations). The alternative approach is “lazy” implying that the evaluation is postponed until the value is actually used. Lazy evaluation allows working with infinite data structures, writing declarative code with definitions arranged in the order convenient for reading instead of the order of their evaluation. If you use the DSL approach, lazy evaluations will help you to easily implement such constructs as if-then-else (the values will be evaluated only in the branch you need).&lt;/p&gt;

&lt;p&gt;The history of the term can be traced back to lambda calculus, forming part of the theoretical basics of functional programming, so no wonder that it’s used in FP languages. For instance, in Haskell everything is evaluated lazily by default.&lt;/p&gt;

&lt;p&gt;Some elements of “laziness” can be found in other languages, even in pure C the operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are lazy as they don’t evaluate their second argument if the first one has been evaluated as 0 or 1, correspondingly. In higher-level languages the more common term is “deferred evaluations” which are implemented using generator functions and the “yield” keyword. Such generators can be found, for example, &lt;a href="https://wiki.python.org/moin/Generators"&gt;in Python&lt;/a&gt; or &lt;a href="https://www.codeproject.com/Articles/793374/Generators-with-Java"&gt;Java&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuations"&gt;
  &lt;/a&gt;
  Continuations
&lt;/h2&gt;

&lt;p&gt;Continuation is the “remaining evaluation”, i.e. the description of what is to be done with the result of expression for each subexpression in the program. An expression gets the continuation in the form of an additional argument and when the result is obtained, the current function calls the passed continuation with the evaluated value instead of returning the result directly. Such style of passing the result is called Continuation-Passing Style (CPS).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Direct style of passing the result &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFoo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;

&lt;span class="c1"&gt;// CPS style&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFooCPS&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;А&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CPS is rarely found immediately in the software source code. Compilers are one of the main areas of its application – as the intermediate format before generating the machine code. Code conversion to CPS allows transforming recursive function calls to tail recursion that can be easily optimized to avoid stack growth during evaluations.&lt;/p&gt;

&lt;p&gt;Continuations are a very powerful tool that can be used to implement control structures such as early function exit, explicit call for tail recursion, imperative cycles, etc. For more details on the use of continuations see the example for the Scheme language &lt;a href="https://hillside.net/plop/plop2001/accepted_submissions/PLoP2001/dferguson0/PLoP2001_dferguson0_1.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#futures-and-promises"&gt;
  &lt;/a&gt;
  Futures and promises
&lt;/h2&gt;

&lt;p&gt;Futures, Promises, or Deferred,  are a construct containing the evaluation of asynchronous value. They emerged in functional programming as a tool used to simplify parallel evaluations and execute queries in distributed systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Sending 2 serial queries&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/user-info/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, your id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Promises were popularized mainly because of their adaptation and extensive use in the browser. JavaScript execution in the browser is limited by only one execution thread, so blocking while waiting for an HTTP response, as is the case with most platforms, would have led to the page hangup and annoy users. This is why callback functions are used to process responses to HTTP queries in the browser. At the same time, it’s not very convenient to combine such requests and the term “Callback Hell” came up to describe the code that has become illegible due to a large number of callbacks. Promises have allowed partially solving the issue of sending parallel queries and serial query chains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sending 3 parallel queries&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchInParralel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/shopping-cart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/recently-viewed-items&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewedItems&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Display the page using the data sent from the server&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In many popular languages (such as C#, Java, JavaScript), promises have become the main tool for asynchronous programming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monadic-interface"&gt;
  &lt;/a&gt;
  Monadic interface
&lt;/h2&gt;

&lt;p&gt;The names of many constructs and programming techniques in Haskell were borrowed from category theory and other branches of mathematics. One of such terms – the Monad – has become the object of many memes and jokes about functional programming. There are lots of posts on the Web explaining what “Monads” are in functional languages and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtE11ddc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtE11ddc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/fp_features4.jpg" alt="Monads have become a local meme in FP world" width="750" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To put it simply, “monad” is just an interface with two methods that allow combining evaluations into a chain in the same way it’s done in the promise chain example. The promises themselves also illustrate the monadic interface implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example of a monad used to generate pseudo-random values;&lt;/span&gt;
&lt;span class="c1"&gt;// parameter А is the type of generated value&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Creation of Random using a random valueе&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
  &lt;span class="c1"&gt;// Method used to implement the call chain&lt;/span&gt;
  &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Example of using the monad chain&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other applications of monads in purely functional languages, such as Haskell, is the side effect encapsulation. As it’s not possible to make a database query, read a file or even print a line in the standard output in these languages by calling ordinary functions, monads are used to perform these actions. At the same time, their application goes beyond side effects – the monadic interface is universal and allows writing generic, laconic, high-level code, which is why the monads are used everywhere in Haskell. Beyond Haskell, monads themselves are not so widely used, but their influence can be seen primarily in programming using promises and in the async-await construct, which we’ll talk about below. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  Async
&lt;/h2&gt;

&lt;p&gt;Getting back to the examples of code with promises, you can notice that despite all advantages of the promises, the call chain looks no better than callbacks. The async-await syntactic structure allows taking it a step further and improving the code with the promise chain, turning it into something much like the code with blocking calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Sending 2 serial queries&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/current-user-id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/user-info/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, your id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The emergence of async-await can be traced back to the researches devoted to functional programming in &lt;a href="https://softwareengineering.stackexchange.com/questions/377464/who-did-async-await-first/377514#377514"&gt;Haskell and ML&lt;/a&gt; which gave rise to the async workflows in F# (2007) and then C# (2011). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Programming languages move on and develop actively, accumulating new, ever more advanced and convenient tools. As you can see, such popular languages as Python or С++ are acquiring a growing number of features, originating from functional programming. More recent languages, such as Scala or Kotlin, support functional tools from the very beginning.&lt;/p&gt;

&lt;p&gt;It turns out that functional programming is much closer than might appear at first sight even if you develop in C++ or Java!&lt;/p&gt;

&lt;p&gt;We’d be happy to learn about your experience with these or any other functional tricks in your day-to-day development. &lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Principle of Least Effort</title>
      <author>Matthew Lucas</author>
      <pubDate>Mon, 15 Nov 2021 14:15:32 +0000</pubDate>
      <link>https://dev.to/notmattlucas/the-principle-of-least-effort-ki0</link>
      <guid>https://dev.to/notmattlucas/the-principle-of-least-effort-ki0</guid>
      <description>&lt;p&gt;Start with two restaurants. They’re identical in almost every way — the same kind of location, same style and quality of food, same ambiance, same everything —but there is one key difference. The website of restaurant A has a very simple booking page right there at the front — when you want to book it’s instant. The website of restaurant B is full of mouth-watering snapshots of the menu, but any contact details are buried deep within the site and even then it’s just a phone number.&lt;/p&gt;

&lt;p&gt;Customers are lazy (and hungry), they take the path of least resistance. For restaurant A, since it’s trivial to book, customers are knocking the door down. Sadly, restaurant B, isn’t quite as popular. Because there is a barrier to entry a lot of customers give up and go elsewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-principle-of-least-effort"&gt;
  &lt;/a&gt;
  The principle of least effort
&lt;/h2&gt;

&lt;p&gt;The principle of least effort can be found in a lot of disciplines — evolutionary biology, economics, psychology, software design.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“… animals, people, and even well-designed machines will naturally choose the path of least resistance or “effort”.” — Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea was best documented by researchers in the information science field. Their assertion was that someone looking for information will use the most convenient source, not necessarily the best or most comprehensive one. A user will use the tools that they are most familiar with or are nearest to hand as long as the information they receive meets some minimal standard.&lt;/p&gt;

&lt;p&gt;If you have a question, you’re likely to consult a friend with limited knowledge of a subject rather than tracking down an expert (e.g. a mechanic, financial advisor, medical professional, etc). It’s quicker and much less effort, not to mention less expensive.&lt;/p&gt;

&lt;p&gt;This goes some way to explain the scourge of misinformation spread by social media. Facebook, Twitter, Instagram, (Medium?) are very palatable, easy to consume, nagging you to take a look, and are curated by algorithms to suit your very specific tastes. A newspaper takes more effort to consume (and certainly has it’s fair share of issues) but reading an informative book, or even conducting research, takes a lot more effort so we commonly fall into the trap of consuming from the most poisonous source. Information is readily available on Facebook but it’s often the wrong information, hence the epidemic of populism, anti-vaxxers and the like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-communication"&gt;
  &lt;/a&gt;
  Simple communication
&lt;/h2&gt;

&lt;p&gt;One form of The Principle of Least Effort was popularized by the linguist George Zipf. Without diving deep into the probability, Zipf’s law has implications on the way we communicate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“… neither speakers nor hearers using a given language want to work any harder than necessary to reach understanding …” — Zipf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Communication is effort, and we don’t want to use any more energy than necessary doing it. Unfortunately business writing in particular, tends to be over-complex and full of jargon. Rather than trying to impress with your power over the language, keep emails and documentation simple. Keep them short and to the point.&lt;/p&gt;

&lt;p&gt;Rather than presenting a problem — which can be taxing for the reader to understand — present a few solutions. It’s far easier to pick from a couple of simple options than to completely digest and unpick a problem from first principles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-it-easy-to-do-the-right-thing"&gt;
  &lt;/a&gt;
  Make it easy to do the right thing
&lt;/h2&gt;

&lt;p&gt;Years ago I worked for an IT consultancy. Every week we had to fill in not one but three separate time-sheets, each for different departments! Guess how often everybody logged them all on time, if at all — never. It was a complete waste signing into three different applications to log the same information in triplicate.&lt;/p&gt;

&lt;p&gt;If something is difficult or time consuming, it won’t get done. If a shortcut is available, it’ll often get used as an alternative to an “official” process. This has implications for interface design, library design, security and more.&lt;/p&gt;

&lt;p&gt;A UI should lead its users to naturally perform the correct action. An API or library should be intuitive to use and should align closely with &lt;a href="https://notmattlucas.com/the-principle-of-least-astonishment-97fb95c0b57"&gt;The Principle of Least Astonishment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Billion dollar businesses have even been built from this principle. In 2010, connecting to payment systems, such as PayPal, was frustrating and often involved tricky integrations. John and Patrick Collison founded Stripe with the aim of allowing software developers to plug-in with just a few lines of code. Developers flocked to Stripe because of the simplicity it provided, it became the path of least resistance. Stripe is now valued at 95 billion dollars!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_effort"&gt;The Principle of Least Effort — Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.thoughtco.com/principle-of-least-effort-zipfs-law-1691104"&gt;Zipfs Law — Thoughtco&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unearnedwisdom.com/the-principle-of-least-effort-week-46-of-wisdom/"&gt;The Principle of Least Effort Week 46 of Wisdom — Unearned Wisdom&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.crowdspring.com/marketing-psychology/law-of-least-effort/"&gt;The Law of Least Effort — Crowdspring&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://martinfowler.com/articles/microservices.html#MakeItEasyToDoTheRightThing"&gt;Microservices, make it easy to do the right thing — Martin Fowler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.britannica.com/topic/Zipfs-law"&gt;Zipfs Law — Britannica&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.forbes.com/sites/tomtaulli/2019/09/20/startup-lessons-how-stripe-created-a-35-billion-giant/?sh=63536d335060"&gt;Startup Lessons: How Stripe Created A $35 Billion Giant&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-final-word"&gt;
  &lt;/a&gt;
  A final word
&lt;/h2&gt;

&lt;p&gt;This post was written as part of a series on laws of software development for #PragProWriMo 2021 run by the &lt;a href="https://medium.com/@pragprog"&gt;The Pragmatic Programmers&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>psychology</category>
      <category>design</category>
    </item>
    <item>
      <title>Liman Sunucu Sertifikası Ekleme</title>
      <author>Duygu Ölmez</author>
      <pubDate>Mon, 15 Nov 2021 14:02:01 +0000</pubDate>
      <link>https://dev.to/liman/liman-sunucu-sertifikasi-ekleme-597n</link>
      <guid>https://dev.to/liman/liman-sunucu-sertifikasi-ekleme-597n</guid>
      <description>&lt;p&gt;Liman MYS üzerine Sunucu Sertifikaları eklemek için aşağıdaki adımları takip etmek gerekmektedir&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Yetkili bir hesap ile Liman MYS arayüzüne giriş yapılır &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBtTJ3Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5jkgis8awhq4arig4d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBtTJ3Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5jkgis8awhq4arig4d8.png" alt="Image description" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sistem Ayarları sayfasındaki &lt;code&gt;Sertifika Ekle&lt;/code&gt; sekmesi açılır. Eklenmek istenen SSL sertifikasının bulunduğu sunucu Ip ve port bilgisi doldurularak &lt;code&gt;Al&lt;/code&gt; butonuna basılır.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPmvcYhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bek875gbz5enhl0be6w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPmvcYhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bek875gbz5enhl0be6w4.png" alt="Image description" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seritifka bilgileri çekildikten sonra Sertifikayı Onayla butonuna basılır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpQZl2hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/722nv0t0ejn7pa36v8c6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpQZl2hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/722nv0t0ejn7pa36v8c6.png" alt="Image description" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Crack CSS Interview</title>
      <author>cloudytech147</author>
      <pubDate>Mon, 15 Nov 2021 14:01:38 +0000</pubDate>
      <link>https://dev.to/cloudytech147/crack-css-interview-1jp6</link>
      <guid>https://dev.to/cloudytech147/crack-css-interview-1jp6</guid>
      <description>&lt;p&gt;CSS is one of the three mainstays of Front-End devices, and each web application and page utilizes it to shade and give a design to its skeleton HTML report. Each brilliant and very much planned page you see on the web is only a consequence of CSS code, eliminate CSS and you will get dark and unaligned text with white foundation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JsWkbpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00cone7brfblfvsxwoi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JsWkbpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00cone7brfblfvsxwoi7.png" alt="css iq" width="653" height="246"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The interviewer may also ask about your experience with any of the CSS frameworks, so there you need to share your experience of working with CSS and one of its frameworks such as Bootstrap. While sharing your experience do not mention those tools on which you have never worked before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.techgeekbuzz.com/css-interview-questions/"&gt;CSS interview questions&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is CSS?&lt;/li&gt;
&lt;li&gt;Give some advantages of CSS.&lt;/li&gt;
&lt;li&gt;What is the latest version of CSS?&lt;/li&gt;
&lt;li&gt;What is the file extension of CSS files?&lt;/li&gt;
&lt;li&gt;What are the different methods to integrate CSS on an HTML page?&lt;/li&gt;
&lt;li&gt;Why do we use the external method more than any other method?&lt;/li&gt;
&lt;li&gt;What is the Embedded style Sheet in CSS&lt;/li&gt;
&lt;li&gt;Give some Advantages of Embedded style sheets in CSS.&lt;/li&gt;
&lt;li&gt;What is the difference between an inline and an embedded style sheet?&lt;/li&gt;
&lt;li&gt;Give some limitations of CSS.&lt;/li&gt;
&lt;li&gt;Name Some frameworks of CSS&lt;/li&gt;
&lt;li&gt;What is the framework?&lt;/li&gt;
&lt;li&gt;What are the components we keep in mind when we use CSS to style HTML?&lt;/li&gt;
&lt;li&gt;What is a selector in CSS?&lt;/li&gt;
&lt;li&gt;What are the type and universal selectors?&lt;/li&gt;
&lt;li&gt;What is the Descendant selector in CSS?&lt;/li&gt;
&lt;li&gt;What are class selectors in CSS?&lt;/li&gt;
&lt;li&gt;What is a property in CSS?&lt;/li&gt;
&lt;li&gt;What is value in CSS?&lt;/li&gt;
&lt;li&gt;What is opacity in CSS?&lt;/li&gt;
&lt;li&gt;What % unit signifies in CSS value?&lt;/li&gt;
&lt;li&gt;What does cm mean in CSS value?&lt;/li&gt;
&lt;li&gt;Is CSS case sensitive?&lt;/li&gt;
&lt;li&gt;Name the format in which we can specify the colour in CSS&lt;/li&gt;
&lt;li&gt;What is a Declaration box in CSS?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Generally, companies do not organize specific Jobs related to CSS or HTML, however, you can find jobs for JavaScript and its frameworks. CSS is a part of front-end development, and only in the front-end job interviews, you will find these questions.&lt;/p&gt;

</description>
      <category>css</category>
      <category>guide</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Liman Sunucusu DNS Değiştirme</title>
      <author>Duygu Ölmez</author>
      <pubDate>Mon, 15 Nov 2021 13:55:40 +0000</pubDate>
      <link>https://dev.to/liman/liman-sunucusu-dns-degistirme-4nbf</link>
      <guid>https://dev.to/liman/liman-sunucusu-dns-degistirme-4nbf</guid>
      <description>&lt;p&gt;Liman MYS Sunucusunun DNS'ini değiştirmek için aşağıdaki adımları takip etmek gerekmektedir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yetkili bir hesap ile Liman MYS arayüzüne giriş yapılır 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS6G1num--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9gryu36glvpme551jrn.png" alt="Image description" width="880" height="447"&gt;
&lt;/li&gt;
&lt;li&gt;Sistem Ayarları sayfasındaki &lt;code&gt;DNS Ayarları&lt;/code&gt; sekmesi açılır. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Cvf9wmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufu8xk9juhwzul01nghf.png" alt="Image description" width="880" height="458"&gt;
&lt;/li&gt;
&lt;li&gt;Dns ayarları girilerek Kaydet butonuna basılır.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>The Best Gojek Clone App Development Guide to Build A Productive Multi-services App</title>
      <author>georgedavid</author>
      <pubDate>Mon, 15 Nov 2021 13:47:40 +0000</pubDate>
      <link>https://dev.to/georgedavid02/the-best-gojek-clone-app-development-guide-to-build-a-productive-multi-services-app-b1b</link>
      <guid>https://dev.to/georgedavid02/the-best-gojek-clone-app-development-guide-to-build-a-productive-multi-services-app-b1b</guid>
      <description>&lt;p&gt;Multiservices apps in the existing market get huge fame among users. Because of its all-in-one purpose and convenience for different services booking, it is still in demand in several market regions across the world. This is why entrepreneurs today have highly searched for a better app development source for their business initiations in the same marketplace online. On that, their most selected stuff would be the Gojek clone app focusing on its mass advantages over others.&lt;/p&gt;

&lt;p&gt;So let’s discuss how you can productively build a new Gojek clone app for business apt to the current market scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#research-on-new-ondemand-multiservices-market-demands"&gt;
  &lt;/a&gt;
  Research On New On-demand Multi-services Market Demands
&lt;/h2&gt;

&lt;p&gt;Before developing your new Gojek clone app for the existing market expectations, it is very much needed to analyze contemporary demands accordingly. For that, you could simply do the following before you go to the development segment. As well as making a new app output so productive, those are the primary things that every developer does constantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding Customer Pain Points&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Considering customers’ pain points is not only for us as developers but also for all the businesses whether online or offline. Following, you should consider the contemporary on-demand multi-services businesspeople’s primary demands like options for quick app launching online, cost-effectiveness in the development, and proper expert business guidance and support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Demands Analysing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As well, analyzing the existing multi-services app user demands is also major for your new app development outputs is so user-centric. That makes both you and your clients have a win-win multi-services app design and interface atmosphere. The foremost user requirement in modern time is an easy-to-use app, seamless performances, and fast details access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Market Status Research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, researching the current market status is also essential for your business app development. Taking into consideration, the on-demand multi-services market in the existing scenario holds a high market value compared to others. And this is why energetic entrepreneurs today show their large amount of interest in investing in the achievable marketplace as mentioned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Captivating Development Support Provisions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In application development, offering clients expected support and options always increase service friendliness in between any kind of market competition. As a result, your business productivity increases greatly in time. For that, you can offer some engaging development side of options as discussed like full app tailoring, expert support, and user-demands-oriented customer guidance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Utilizing Cutting-edge Technology Stacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And secondly, selecting with the advanced tech stacks would offer you the benefit of providing your new apps’ output in the fastest way to the clients. Taking that into account, utilizing the recommended tech stacks as listed in the following makes your development powerful. As a result, you could achieve entrepreneurs’ pain points promptly in service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-programming-languages"&gt;
  &lt;/a&gt;
  Recommended Programming Languages
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Php&lt;/strong&gt; - As we all know, the powerful scripting language can be used to build dynamic and interactive mobile apps. And, it is still recommended by the professional clone app developers in the market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt; - Utilizing the Swift programming language, you can develop your new multi-services app for the Apple platform. It ensures the benefits such as being safe, fast, and expressive in business operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GoLang&lt;/strong&gt; - The open-source programming language would be simple, reliable, and efficient in mobile apps or software creations. You can smartly use this for your new multiservice app building for profitable sustain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-management-programs"&gt;
  &lt;/a&gt;
  Database Management Programs
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - The NoSQL database management program is now widely used by clone app developers considering its large sets of distributed data. The tool assists to manage document accesses like storing or retrieving information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; - It is an advanced and enterprise-class open-source database. It supports both relational and non-relational SQLs. Most of the successful on-demand app-based services today get used to this stable database management system for high reliability. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt; - This relational database management system is associated with the Php script language. It makes it possible for your new multi-services business app to speedily display real-time information to the users online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inbuilding-general-features-of-gojek-clone-app-to-the-latest-marketplace"&gt;
  &lt;/a&gt;
  In-building General Features of Gojek Clone App to the Latest Marketplace
&lt;/h2&gt;

&lt;p&gt;Thirdly, the final part, the general features add-ons. It is necessary to make your new Gojek clone app visible to the audience in an effective way. For that, some of the major and must-included app features are listed below. By in-building those to your new Gojek clone app make it so enhanced for launching services online, as well makes it so relevant to the current on-demand multi-services marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart User Registration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enable social media integration option. And, offer users simply can log in using their name, email-id or/and mobile number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geolocation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build your Gojek clone app with the Geolocation option. Through that, the service handlers can actively track customers’ locations for on-time presents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Payment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make your app capable of choosing both online and offline payment options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schedule Booking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Include the schedule-based service booking options to the customers. Through this, they can book service handlers for a particular time slot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Profile Customization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Allow the service handlers to customize their own profile mentioning their needed things like professional photo update, the field of expertise, experience in services, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rates and Reviews&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build your multiservice app with customer rates and reviews section. That assists next customers to get to know about the service experiences of others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Service Categorization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enable different service categorizing solution options. So that the customers can easily get their needed services from relevant ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart User Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Offer the admin to easily handle their users with a smart user control option. For example, the admin should be able to add or remove any user under demand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special and Promotional Options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inbuild promotional options such as referral link generation, coupon codes, promo codes, and premier loyalty programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dedicated Business Details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The admin panel must be dedicated to business details like reporting, analytics, and other admin-side information for effective reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#altogether"&gt;
  &lt;/a&gt;
  Altogether
&lt;/h2&gt;

&lt;p&gt;In this current market scenario, customers need just a single mobile app to book many services to their doorsteps. Such all-in-one multi-services business apps are now getting trendy day by day. The gigantic growth of the marketplace is consequently alluring entrepreneurs today.  Of them, you can offer a powerful &lt;a href="https://www.spotnrides.com/gojek-clone-script"&gt;Gojek clone app&lt;/a&gt; for their effective business launching online.&lt;/p&gt;

&lt;p&gt;In which, developing your new multiservice app for business with the discussed guidelines uplifts your brand visibility among rivals in a unique way.&lt;/p&gt;

</description>
      <category>software</category>
      <category>development</category>
      <category>android</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is DevOps a legacy practice?</title>
      <author>Pablo Bermejo</author>
      <pubDate>Mon, 15 Nov 2021 13:46:37 +0000</pubDate>
      <link>https://dev.to/peibolsang/is-devops-a-legacy-practice-4g66</link>
      <guid>https://dev.to/peibolsang/is-devops-a-legacy-practice-4g66</guid>
      <description>&lt;p&gt;&lt;em&gt;(Cover picture credits: Sigmund @sigmund via Unsplash)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The idea of this article is expalined in detail in the book &lt;strong&gt;Building Software Platforms. A Guide to SaaS Transition with AWS&lt;/strong&gt; available on &lt;a href="https://leanpub.com/software-platforms"&gt;Leanpub&lt;/a&gt; and &lt;a href="https://www.amazon.com/dp/B09L56CZKD"&gt;Amazon&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The commoditization of cloud compute and the proliferation (and adoption) of managed cloud services during the first years of the past decade enabled the co-evolution of other software engineering practices that helped teams build and release software faster. This progression eventually led to DevOps, a technique that has helped reduce the dependency on a centralized operations team during the software development lifecycle.&lt;/p&gt;

&lt;p&gt;But things have changed. We just don't &lt;em&gt;do cloud&lt;/em&gt; anymore. I mean, this is what we do 10 years ago when we spun up virtual machines on the cloud and installed Web servers, application containers, and other type of runtimes so we could deploy and run our applications. Under that context, DevOps emerged as a practice that co-evolved with the technology.&lt;/p&gt;

&lt;p&gt;Now, cloud providers offer those runtimes &lt;em&gt;as a service&lt;/em&gt; for us so we don't even need to spin the virtual machine hosts. It means that infrastructure resources are now utilities priced per use and accesible through a new whole set of programmatic APIs and infrastructure-as-code frameworks. This is known as &lt;em&gt;serverless&lt;/em&gt; and it is making the DevOps practice to co-evolve, the same way cloud did in the 2010s.&lt;/p&gt;

&lt;p&gt;To some extent, yes, &lt;strong&gt;DevOps is a legacy practice&lt;/strong&gt;. At least some bits of it, probably the most technical aspect of it related to the automation technologies. Because we know DevOps is much more than that. As &lt;a href="https://twitter.com/editingemily"&gt;Emily Freeman&lt;/a&gt; (author of DevOps for dummies) says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"DevOps is an engineering culture of collaboration, ownership, and learning with the purpose of accelerating the software development lifecycle from ideation to production."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#new-guiding-principles"&gt;
  &lt;/a&gt;
  New Guiding Principles
&lt;/h2&gt;

&lt;p&gt;We need new technical guiding principles. &lt;/p&gt;

&lt;p&gt;Let me put you an example. In a serverless context, what is an environment? How would you define your SDLC boxes if we don't have the concept of server instances anymore?&lt;/p&gt;

&lt;p&gt;Using an analogy with operating systems design, a lifecycle automation solution in a serverless architecture has close connections with traditional package managers. Similar to operating systems and other plug-in-based software, a package in this context is a self-contained unit that provisions the specific infrastructure that the application requires for running its business logic. &lt;/p&gt;

&lt;p&gt;The equivalent of a package in the context of cloud-based software would be the combination of the deployable artifacts that compose a given application and the scripts that perform the actual deployment. Therefore, the lifecycle automation management solution is a system that helps in producing the service artifacts, creates the packages, stores them in a central repository, enhances them with metadata, controls their versioning, manages their dependencies, and allows developers to perform &lt;em&gt;a-la-carte&lt;/em&gt; deployments.&lt;/p&gt;

&lt;p&gt;The following principles will help our modern development teams align with this view and come up with an efficient build and release process to build and deploy applications on serverless architectures with confidence.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Include both source code and binary artifacts under version control so that you can keep track of changes over time. We recommend using a distributed system for source code management (e.g., Git) so you can work on changes in parallel as a team before merging them, even when the network is unavailable. Use meaningful commits messages to describe the changes you are making (your future self will be thankful for that). Avoid having multiple long-lived branches and keep the mainline in a releasable state (e.g., favor Trunk-based development over GitFlow or GitOps). Only use short-lived branches for features and fixes that can be merged into the mainline once complete and tested.&lt;/li&gt;
&lt;li&gt;Use tools and platforms that allow developers to collaborate and contribute efficiently to developing the business services (e.g., GitHub). Incentive contribution mechanisms such as Pull Requests and use them as coaching opportunities. In that line, enhance source code repositories with all sorts of documentation that helps developers understand how they can contribute to the project, including Licensing, Notice, and Contributing guidelines.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attempt small, incremental changes to the source code and integrate them often with the mainline. Write unitary and integration tests for your features and run them locally even before submitting a contribution to the mainline. You can configure the version control system so that the Continuous Integration (CI) pipeline automatically runs build, unit tests, integration tests, and code quality scan upon code commit (i.e., continuous integration).&lt;/p&gt;

&lt;p&gt;Also, you can design a build process for quick feedback and ring-fence the services' unit and integration tests by mocking all external dependencies. Use deployment preview techniques when available and applicable. You should be able to perform an additional quality check of your generated artifacts before deploying them in a natural environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create &lt;em&gt;infrastructure-as-code&lt;/em&gt; repositories to run deterministic and consistent deployments that spin up the necessary cloud infrastructure to run the services and, at the same time, get all the artifacts deployed. Write fast and straightforward post-deployment tests that are executed automatically upon any deployment to exercise the service and its essential dependencies. You will have to work under the assumption that all the artifacts generated from the mainline are potential release candidates, so you must deploy services often and obtain quick feedback. Also, use auditable and traceable deployments to ensure you know what version of the services is running on each environment every time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It would be most excellent to have multiple deployment environments (e.g., SDLC stages) so you can phase the rollout of the software and ensure it is adequately tested. Configure your infrastructure-as-code repositories so that the CD (Continuous Deploy) pipeline automatically runs deployment, smoke tests, and performance tests upon artifact generation (i.e., continuous deployment).&lt;/p&gt;

&lt;p&gt;If you are working from a feature branch, deploy services on a cloud sandbox. Alternatively, if you are working from the mainline, deploy them through a lifecycle of environments where they can be promoted and tested until they reach the &lt;em&gt;release candidate&lt;/em&gt; status. This process will help you make sure a version of the software is not deployed to a later environment before being deployed and tested at an earlier stage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All these principles and the tools supporting them are highly available and accessible in the software development industry, to the point that some are even quite a standard. Despite this industrialization, how do you use those tools and the custom pieces you add on top of them make this solution a good platform capability.&lt;/p&gt;

&lt;p&gt;This new paradigm based on a &lt;em&gt;serviceful&lt;/em&gt; architecture running on serverless computing challenges the traditional concepts of environments since everything is composed of little and independent building blocks, including the infrastructure. &lt;/p&gt;

&lt;p&gt;Providing lifecycle automation management functionalities for the development teams will help them not worry about these new constructs, heavy-lifting all the environment provisioning, and promoting their artifacts from their workstations to production. This type of automation could be considered a core capability of internal software platforms and something you may be interested in building for the developers.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>cloud</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Liman Eklentilerine Lisans Ekleme</title>
      <author>Duygu Ölmez</author>
      <pubDate>Mon, 15 Nov 2021 13:45:28 +0000</pubDate>
      <link>https://dev.to/liman/liman-eklentilerine-lisans-ekleme-3i1</link>
      <guid>https://dev.to/liman/liman-eklentilerine-lisans-ekleme-3i1</guid>
      <description>&lt;p&gt;Liman MYS üzerine eklenmiş eklentilere lisans ekleme için aşağıdaki adımları takip etmek gerekmektedirç&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yetkili bir hesap ile Liman MYS arayüzüne giriş yapılır
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_KP4Ki3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3v40eft97hhj216brl6.png" alt="Image description" width="880" height="447"&gt;
&lt;/li&gt;
&lt;li&gt;Sistem Ayarları sayfasındaki Eklentiler sekmesi açılır.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjxmD6Uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vrhnigf6ribu2vu8mhv.png" alt="Image description" width="880" height="446"&gt;
&lt;/li&gt;
&lt;li&gt;Lisans eklenmek istenen eklentiye sağ tıklanarak &lt;code&gt;Lisans Ekle&lt;/code&gt; seçeneği seçilir.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8m-vHTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dq1brc1r3vpt11s0pzq.png" alt="Image description" width="880" height="355"&gt;
&lt;/li&gt;
&lt;li&gt;Kurum tarafından size iletilen lisans aşağıdaki şekilde açılan kutucuğa yazılır eklenir. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSwVxPID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehvty3xyjbh5qjx4qw4o.png" alt="Image description" width="880" height="210"&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>The brag list, a great way to improve your performance</title>
      <author>Jelle Smeets</author>
      <pubDate>Mon, 15 Nov 2021 13:44:19 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/the-brag-list-a-great-way-to-improve-your-performance-27kf</link>
      <guid>https://dev.to/smeetsmeister/the-brag-list-a-great-way-to-improve-your-performance-27kf</guid>
      <description>&lt;p&gt;In an ideal world, everyone has your achievements at the top of their mind. In your performance review, your manager knows all the good things you did during the year. As a result, he or she will reward you accordingly. In a more realistic world, this is not always the case. The expectation that everyone remembers every good thing you did is unrealistic. People forget things. Even managers who are there to review you. Maybe some of the things you did were not as visible as others. To help you make sure your good deeds do not go unnoticed, we have the brag list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-brag-list"&gt;
  &lt;/a&gt;
  What is a brag list?
&lt;/h2&gt;

&lt;p&gt;A brag list is a document where you keep track of all the good things you did. The name sort of explains it, it contains all the things you can brag about. The list can be in any format you want. From my personal experience, I noticed I found it useful to include the date, a title, and a short summary of my role. As a result, I find it easier to remember the details at the end of the year.&lt;/p&gt;

&lt;p&gt;The first time I heard about a brag list was from a coworker. He was using this to keep track of all the things he did during the year. And as a result, he could always summarize pretty well his year-round performance.&lt;/p&gt;

&lt;p&gt;To make sure you will not forget to add things to your list, make it a regular activity. In the same way as a retrospective, it is satisfying to stop and reflect on the last period. You can make it a recurring calendar event to update your brag list every two weeks. Or whatever period works for you.&lt;/p&gt;

&lt;p&gt;Some examples that could be on a brag list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mentorred an intern.&lt;/li&gt;
&lt;li&gt;Fixed a big security issue.&lt;/li&gt;
&lt;li&gt;Help team X when their project was in need.&lt;/li&gt;
&lt;li&gt;Fixed that important production incident.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UZAfk8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78xybiy8ble7elmh7h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UZAfk8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78xybiy8ble7elmh7h.jpg" alt="Writing a brag list" width="640" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What writing your brag list could look like&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;All humans are influenced by recency bias. As a result, we will favor recent events over historical events.&lt;/p&gt;

&lt;p&gt;If your performance is only reviewed once or twice a year like mine. You are likely to experience recency bias. As a result, your manager will probably not remember what you did at the beginning of the year. But he is able to recall current events. To make sure you don't lose out on these events, keep your brag list up to date. In the period before your review send it to your manager to remind him or her of all your good things during the year.&lt;/p&gt;

&lt;p&gt;Another benefit of having a brag list is to remind yourself of all the awesome things you did. Just like your manager, you will likely suffer from recency bias. I sometimes look at my brag list, and all of a sudden remember the awesome things I did months ago. As a result of recency bias, I already forgot about those achievements.&lt;/p&gt;

&lt;p&gt;A brag list can be a great way to remind yourself of all the positive things you did. Use it during your performance review to make sure your manager knows as well. You deserve it after all! Did you already use a brag list, or did this post convince you to start one? Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;If you are interested in more of my blog posts I recommend checking my blog post on &lt;a href="https://blog.jellesmeets.nl/articles/are-recruiters-worth-it-in-the-tech-world/"&gt;Recruiters in the tech world&lt;/a&gt; or &lt;a href="https://blog.jellesmeets.nl/newsletter-signup/"&gt;signing up for the newsletter&lt;/a&gt; to never have to miss another post!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>performancereview</category>
    </item>
    <item>
      <title>The Five Dysfunctions of an Engineering Team</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 15 Nov 2021 13:34:46 +0000</pubDate>
      <link>https://dev.to/thawkin3/the-five-dysfunctions-of-an-engineering-team-3a60</link>
      <guid>https://dev.to/thawkin3/the-five-dysfunctions-of-an-engineering-team-3a60</guid>
      <description>&lt;p&gt;Every team has some level of dysfunction. And that’s normal, because teams are made of imperfect human beings. In his book &lt;em&gt;The Five Dysfunctions of a Team&lt;/em&gt;, Patrick Lencioni identifies these five basic dysfunctions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Absence of Trust&lt;/li&gt;
&lt;li&gt;Fear of Conflict&lt;/li&gt;
&lt;li&gt;Lack of Commitment&lt;/li&gt;
&lt;li&gt;Avoidance of Accountability&lt;/li&gt;
&lt;li&gt;Inattention to Results&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These dysfunctions build upon each other. A team that doesn’t trust each other is afraid to admit their shortcomings and mistakes. Teams like this aren’t vulnerable around each other. This leads to a fear of conflict, where ideas are not openly debated and bad behaviors are not called out for fear of offending someone. Rather than solving underlying problems, the team experiences growing tension manifested by occasionally passive aggressive remarks.&lt;/p&gt;

&lt;p&gt;Because ideas aren’t openly discussed, there is very little buy-in from team members, and so they aren’t fully committed to any agreements. This leads to an avoidance of accountability, since it’s hard to hold someone accountable to a standard that they never really agreed to in the first place. All of this results in an inattention to results where the team fails to accomplish their most meaningful goals.&lt;/p&gt;

&lt;p&gt;In this article, I’d like to examine these dysfunctions in the context of a software engineering team. Because believe it or not, software engineers are flawed human beings too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#absence-of-trust"&gt;
  &lt;/a&gt;
  Absence of Trust
&lt;/h2&gt;

&lt;p&gt;Software engineers need to be able to trust each other. This includes trusting that your team members are on top of their work and can be relied upon to get their work done on time and correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When members of an engineering team don’t trust each other:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Team members hide their mistakes out of fear&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team lead frequently follows up with team members to make sure the work is being done&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team lead serves as the gatekeeper who reviews all merge requests before code can be merged&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team members become protective of areas of the software application in which they’ve worked and don’t like anyone else touching their code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But when they do trust each other:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Team members catch their mistakes quickly, discuss them openly, and resolve them speedily&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each team member shows ownership over their work, reaching out for help when needed while still owning the solution and ensuring that the work gets done&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All team members review each other’s code, and any team member’s stamp of approval on a merge request is good enough to allow code to be merged&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any team member can work in any part of the codebase&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#fear-of-conflict"&gt;
  &lt;/a&gt;
  Fear of Conflict
&lt;/h2&gt;

&lt;p&gt;Every software engineering team needs a healthy amount of conflict. You might argue that a team which is perfectly aligned and agrees on all issues has no need for conflict, which is technically true, but I have yet to meet a team like this. After all, engineers are known for being opinionated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When members of an engineering team have a fear of conflict:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Team members don’t bring up process issues or other efficiency problems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team meetings are boring and without much discussion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team members allow toxic behaviors to go unchecked&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low performers bring down the team by making the same mistakes over and over and wasting their team members’ time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Morale decreases&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But when conflict is embraced:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Team members always seek to improve the way they do things and look for outdated processes that should be changed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team meetings are filled with lively discussion and sometimes heated debate (but always focusing on tangible issues, not general attacks on each other)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team members call out toxic behavior and don’t tolerate any form of bullying or verbal abuse&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low performers are held accountable to the team’s standards and are told how their behavior affects the rest of the team&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Morale increases&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#lack-of-commitment"&gt;
  &lt;/a&gt;
  Lack of Commitment
&lt;/h2&gt;

&lt;p&gt;Software engineering teams need to be committed to the goals that they’ve set. But if there’s no honest discussion when goals are made, there’s no buy-in from each team member to actually accomplish these goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When members of an engineering team show a lack of commitment:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sprint goals and deadlines are frequently missed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team members often work on the wrong things&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code-quality standards are not followed, and shortcuts are taken &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But when every team member is committed to accomplishing the team’s goals:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sprint goals and deadlines are generally met (with the occasional delay)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each team member is working on the most important thing at any given time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code-quality standards are agreed upon and followed (and enforced by code formatters, linters, and test suites run in continuous integration pipelines)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#avoidance-of-accountability"&gt;
  &lt;/a&gt;
  Avoidance of Accountability
&lt;/h2&gt;

&lt;p&gt;Software engineering teams need to hold each team member to the standards that they’ve agreed to.&lt;/p&gt;

&lt;p&gt;An avoidance of accountability stems largely from a fear of conflict. It’s important to remember though that when we talk about accountability, we don’t mean punishing someone any time they make a mistake. We also don’t mean you have to be rude about it. You can hold someone accountable while still treating them with respect.&lt;/p&gt;

&lt;p&gt;Holding each other accountable means having an honest and open discussion when someone isn’t pulling their weight or is dragging the team down. These conversations don’t have to wait until tensions have grown until everyone is at their breaking point. They can happen immediately for the smallest behaviors in the form of respectable micro-doses of feedback. Being clear is not being mean.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When members of an engineering team avoid accountability:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Important tasks don’t get done&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low performers drag the team down&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team’s overall velocity decreases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standards are ignored and code quality decreases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team lead or manager is the only one who addresses poor performance or other bad behavior&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But when team members do hold each other accountable:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Important tasks are completed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low performers are encouraged to improve or to move on&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team’s overall velocity increases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Standards are upheld and code quality remains high&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All team members feel comfortable holding one another accountable, not just the team lead&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#inattention-to-results"&gt;
  &lt;/a&gt;
  Inattention to Results
&lt;/h2&gt;

&lt;p&gt;Software engineering teams need to be focused on results. Engineers don’t complete tasks just as busywork — they build things to deliver value to their customers and to solve problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When members of an engineering team show an inattention to results:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sprint goals and deadlines are often missed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lots of work may get done, but it may be the wrong work or low impact work&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team members don’t show an interest in or ownership of their work&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each team member seems to be moving in a different direction&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But when team members show a strong attention to results:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sprint goals and deadlines are generally met (with the occasional delay)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lots of work gets done, and it’s the right work, the most important work&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each team member shows ownership over their work and pride in doing a good job&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The members of a team are working toward a shared goal and are not simply a collection of individuals but a team&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All teams exhibit some level of dysfunction, and that’s perfectly normal. But if you want to get better as a team, the first step is having an open and honest conversation about these dysfunctions. Identify your team’s strengths and weaknesses, and make a plan to improve.&lt;/p&gt;

&lt;p&gt;Overcoming the five dysfunctions of a software engineering team is incredibly simple in theory and yet very difficult in practice. And that’s exactly what it takes to get better at this — practice, practice, practice.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>career</category>
      <category>books</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
