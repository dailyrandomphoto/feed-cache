<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use alt attribute properly for accessibility and SEO</title>
      <author>Jozsef Polgar</author>
      <pubDate>Sat, 18 Sep 2021 22:02:04 +0000</pubDate>
      <link>https://dev.to/polgarj/use-alt-attribute-properly-for-accessibility-and-seo-3ohp</link>
      <guid>https://dev.to/polgarj/use-alt-attribute-properly-for-accessibility-and-seo-3ohp</guid>
      <description>&lt;p&gt;&lt;code&gt;&amp;lt;img src="image.png" alt="The picture description comes here." /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Many people miss alternative texts and many misuse them. This is a big mistake, because &lt;strong&gt;they have a huge effect on accessibility and even on SEO&lt;/strong&gt;. Here are 4 reasons why you should pay more attention to writing alternative texts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-image-accessibility"&gt;
  &lt;/a&gt;
  #1 Image accessibility
&lt;/h2&gt;

&lt;p&gt;Screen reader users are mainly blind or partially sighted people. The main reason for using alt attribute is to describe the images to them. When a screen reader comes to an image it will read the value of the alt attribute for your visitor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fallback-text-if-image-doesnt-load"&gt;
  &lt;/a&gt;
  #2 Fallback text, if image doesn't load
&lt;/h2&gt;

&lt;p&gt;A lot of things can cause an image not to load on a websites. For example: incorrect file path, missing file, too large image size or bad internet connection.&lt;/p&gt;

&lt;p&gt;In these cases, the &lt;em&gt;alternative text comes and saves the day&lt;/em&gt; because it appears in place of the missing images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-help-people-to-find-your-images-with-search-engines"&gt;
  &lt;/a&gt;
  #3 Help people to find your images with search engines
&lt;/h2&gt;

&lt;p&gt;When a search engine crawls through your website, it checks your images too and they will index your images based on your alt attributes.&lt;br&gt;
So if you write good alternative text and your image appears in search results, &lt;strong&gt;it can bring you more visitors&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-add-keywords-to-your-homepage"&gt;
  &lt;/a&gt;
  #4 Add keywords to your homepage
&lt;/h2&gt;

&lt;p&gt;When people are looking for something on the internet, they start typing in search engines. The search engines will show them websites that containing the keywords they are searching for. &lt;em&gt;The more keywords you have on your website, the better your page will rank in the search results.&lt;/em&gt;&lt;br&gt;
And here comes the best part: every single word you write in alt attribute counts as a keyword, so basically you are &lt;strong&gt;improving your search engine optimization&lt;/strong&gt; (SEO).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices:
&lt;/h2&gt;

&lt;p&gt;Now that we've learned the benefits of a well-written alternative text, it's time to dive into best practices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#max-125-characters"&gt;
  &lt;/a&gt;
  Max. 125 characters.
&lt;/h3&gt;

&lt;p&gt;You should write an alternative text as if you were telling someone by phone what is in the picture, but try to be brief, because some screen readers cut off alt text after 125 characters&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-start-with-image-of-or-picture-of-"&gt;
  &lt;/a&gt;
  Don't start with "image of ..." or "picture of ..."
&lt;/h3&gt;

&lt;p&gt;Screen readers tell their user that they are hearing the alternative text of an image anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-sentences-not-words"&gt;
  &lt;/a&gt;
  Write sentences, not words
&lt;/h3&gt;

&lt;p&gt;If you have a picture of a dog playing with a ball, your alternative text should look like this:&lt;br&gt;
"A small black wiener-dog playing with a red ball."&lt;br&gt;
Never write something like this to get more keywords: "Dog, doggy, doggo, puppy, wiener-dog, dachshund, play, ball".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-empty-alt-attribute-for-decorative-images"&gt;
  &lt;/a&gt;
  Use empty alt attribute for decorative images
&lt;/h3&gt;

&lt;p&gt;If you have an image just for the looks, you should leave its alt attribute empty, like this: &lt;code&gt;&amp;lt;img src="image.png" alt="" /&amp;gt;&lt;/code&gt;&lt;br&gt;
It is important to include the alt="" part, because in this case screen readers will skip your decorative images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-the-image-has-text-write-it-down"&gt;
  &lt;/a&gt;
  If the image has text, write it down
&lt;/h3&gt;

&lt;p&gt;If an image has text content and it gives extra information to your site, you should include it in the alt attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaway"&gt;
  &lt;/a&gt;
  Takeaway:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Always give proper alt attribute to your images.&lt;/li&gt;
&lt;li&gt;If it's a decorative image, give it an empty alt attribute.&amp;lt;br &lt;/li&gt;
&lt;li&gt;If you keep these few tips in mind, you will not only make your website more accessible, but you can also get more visitors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Originally posted on &lt;a href="https://uselessdivs.com/blog/use-alt-attribute-properly-for-accessibility-and-seo"&gt;Use Less Divs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>seo</category>
    </item>
    <item>
      <title>Are You Bored Of Converting "px" to "em" Using A Calculator, SASS Will Solve The Problem</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 18 Sep 2021 21:56:48 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/are-you-bored-of-converting-px-to-em-using-a-calculator-sass-will-solve-the-problem-2cp6</link>
      <guid>https://dev.to/ayabouchiha/are-you-bored-of-converting-px-to-em-using-a-calculator-sass-will-solve-the-problem-2cp6</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail"&gt;Aya Bouchiha&lt;/a&gt;, today, I decided to share with you the solution of converting "px" to "rem" or 'em' using a calculator because using It, will distract you to focus more in your work, and will let you waste a considerable amount of time, especially if the project is so big or your computer is slow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INt-rt4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfbefrmssinn6d6m3mxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INt-rt4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfbefrmssinn6d6m3mxt.png" alt="Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-px"&gt;
  &lt;/a&gt;
  What's px?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;px&lt;/strong&gt;: is an absolute unit for measuring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-them"&gt;
  &lt;/a&gt;
  What's them?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;em&lt;/strong&gt;: is a relative unit to the font-size of its parent, used for measuring, It is equal to 16px.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#px-vs-em-vs-rem"&gt;
  &lt;/a&gt;
  px vs em vs rem
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chiamakaikeanyi.dev/sizing-in-css-px-vs-em-vs-rem/"&gt;Sizing in CSS: px vs em vs rem by Chiamaka Ikeanyi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#converting-px-to-em"&gt;
  &lt;/a&gt;
  Converting px to em
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;1em = 16px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pxValue = emValue * 16&lt;/code&gt; &lt;br&gt;
&lt;code&gt;emValue = pxValue / 16&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-a-calculator-for-converting-px-to-em"&gt;
  &lt;/a&gt;
  Should I Use A Calculator For Converting px to em?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you are familiar with scss, the answer is no, no, and no! so how?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-function-for-converting-px-to-em"&gt;
  &lt;/a&gt;
  Creating A Function For Converting px to em
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#indexscss"&gt;
  &lt;/a&gt;
  index.scss
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@function&lt;/span&gt; &lt;span class="nf"&gt;to-em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$val-px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;@return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$val-px&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-function"&gt;
  &lt;/a&gt;
  Testing Our Function
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#indexscss"&gt;
  &lt;/a&gt;
  index.scss
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.scss&lt;/span&gt;

&lt;span class="c1"&gt;// px =&amp;gt; em&lt;/span&gt;
&lt;span class="k"&gt;@function&lt;/span&gt; &lt;span class="nf"&gt;to-em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$val-px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;@return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$val-px&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;font-size&lt;/span&gt;&lt;span class="nd"&gt;:to-em&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;to-em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;to-em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#indexcss"&gt;
  &lt;/a&gt;
  index.css
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have an amazing day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting Started With Flask and Docker: Containerize your first flask application</title>
      <author>Emma Donery</author>
      <pubDate>Sat, 18 Sep 2021 21:48:40 +0000</pubDate>
      <link>https://dev.to/emma_donery/getting-started-with-flask-and-docker-containerize-your-first-flask-application-1f43</link>
      <guid>https://dev.to/emma_donery/getting-started-with-flask-and-docker-containerize-your-first-flask-application-1f43</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXtEbgmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4galx5vlrrehwrxnow8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXtEbgmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4galx5vlrrehwrxnow8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Docker&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker is an open source tool which is used to deliver software in packages called containers and in the recent days it has changed we think, ship and deploy our applications to the server.&lt;/p&gt;

&lt;p&gt;The main advantage of docker is that it enables easy deployment to the cloud, since containers have the added benefit of running anywhere without facing dependencies conflicts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Flask&lt;/strong&gt; is a web micro-framework, it’s a Python module that lets you develop web applications easily without providing rules and specific methodology to follow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flask-application-structure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Flask application structure:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;server.py&lt;/strong&gt; file - This is our main and entry point file that contains all flask logic to run our application.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;templates&lt;/strong&gt; folder - By default, flask will look for any markup files in the templates folder, but you can configure to have your html files in a different folder.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;static&lt;/strong&gt; folder - In our flask applications we uses static folder to keep our static files, these include images, JavaScript and CSS code  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; &lt;br&gt;
When creating python application it is advisable to keep virtual environment so that you don't interfere with the global local environment, also since we will creating a minimalistic flask application we won't be using static files hence we don't need the static folder.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/register'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'register.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Templates/register.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Welcome to our registration page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    Username &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type = &lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name= &lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
    Email &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type = &lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name = &lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    Password &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type = &lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name = &lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt /app/requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; app&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 5000:5000&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "python", "server.py" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Build your docker image&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; docker build &lt;span class="nt"&gt;-t&lt;/span&gt; myimage &lt;span class="nb"&gt;.&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run your docker image&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now that we have successfully built our image let run it using &lt;code&gt;docker run&lt;/code&gt; command, the following command will run our &lt;strong&gt;myimage&lt;/strong&gt; image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;docker run &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; myimage    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bravo!🥳🥳 you have containarized your first flask application, alternatively you can use docker compose which is used to run multiple docker containers to simplify the process where we use just one command &lt;code&gt;docker-compose up&lt;/code&gt; to build and run our docker container and &lt;code&gt;docker-compose down&lt;/code&gt; to stop the container. &lt;/p&gt;

&lt;p&gt;Thank you for reading, please feel free to leave additional insights in the comment section below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let Connect&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can get in touch with me on &lt;a href="https://www.linkedin.com/in/emma-donery-0831a7188/"&gt;linkedin&lt;/a&gt; or &lt;a href="https://mobile.twitter.com/Emma_Donery"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>devops</category>
      <category>docker</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Tricks for Learning Vim Quickly</title>
      <author>BigCoder</author>
      <pubDate>Sat, 18 Sep 2021 20:34:38 +0000</pubDate>
      <link>https://dev.to/bigcoder/tricks-for-learning-vim-quickly-42mo</link>
      <guid>https://dev.to/bigcoder/tricks-for-learning-vim-quickly-42mo</guid>
      <description>&lt;p&gt;Vim is very powerful and fast editor, on the other hand it's so powerful that some people might prefer not to use it. It's available on every machine, even through an SSH connection and bindings can be used in any popular IDE. &lt;/p&gt;

&lt;p&gt;If you’re learning Vim, there are two mistakes you can make:&lt;br&gt;
The first is to jump right in. The second is to avoid doing anything.&lt;/p&gt;

&lt;p&gt;The correct approach is to learn Vim incrementally. Learn one trick at a time, then practice it until it’s second nature.&lt;/p&gt;

&lt;p&gt;Here are tricks that will help you learn Vim quickly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Practice makes perfect. Vim works differently than you are used to. You can practice online using &lt;a href="https://vim.is"&gt;vim.is&lt;/a&gt;, which makes you learn vim keybindings very quickly.&lt;/p&gt;

&lt;p&gt;I recommend learning vim first before using it, because it works so different than say notepad. But the advantage is higher productivity, moving around the text quickly, recording and replaying keystrokes and lots more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable vim keybindings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are extensions for your web browser like &lt;a href="https://vimium.github.io/"&gt;Vimium&lt;/a&gt;. Get used to the vi-like keybindings by surfing the web. There's also &lt;a href="https://qutebrowser.org/"&gt;qutebrowser&lt;/a&gt;. Qutebrowser is a Chromium fork but uses Vi-like key bindings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable vi keybindings in bash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write the command to enable vi keybindings in bash. You can then use the vi keybindings inside your commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; vi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can use keys like &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;5w&lt;/code&gt; and all the other vi keybindings you use inside the commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable vi keybindings in other apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.reddit.com/r/vim/comments/3tluqr/my_list_of_applications_with_vi_keybindings/"&gt;many applications&lt;/a&gt; which support vi keybindings. Some notable ones are ranger, vifm, feh. &lt;/p&gt;

&lt;p&gt;For Windows users, you can enable vim keybindings in visual studio, word, outlook using &lt;a href="http://www.viemu.com/"&gt;viemu&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick tricks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To open a file, type the command &lt;code&gt;vim file&lt;/code&gt;. To quit vim, press &lt;code&gt;ZQ&lt;/code&gt;. To edit a file, press &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;insert&lt;/code&gt;. To return to command mode, press the &lt;code&gt;esc&lt;/code&gt; key. Press &lt;code&gt;:w&lt;/code&gt; to save the file. &lt;/p&gt;

</description>
      <category>vim</category>
      <category>linux</category>
    </item>
    <item>
      <title>My 5 Favourite VS Code Themes</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 18 Sep 2021 19:30:53 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/my-5-favourite-vs-code-themes-26h8</link>
      <guid>https://dev.to/ayabouchiha/my-5-favourite-vs-code-themes-26h8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-best-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O6iBWP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g430l7mwmbetmc18ne53.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O6iBWP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g430l7mwmbetmc18ne53.PNG" alt="thebesttheme"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dracula"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Dracula&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hT4VVtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdhqr9ezprn9sbl92y5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hT4VVtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdhqr9ezprn9sbl92y5.PNG" alt="dracula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme"&gt;Github Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5yii4_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn15c9zaxwqs48wn5cu1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5yii4_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn15c9zaxwqs48wn5cu1.PNG" alt="githubDark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#night-owl"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl"&gt;Night OWL&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHOHT1zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m47mtpzqb8br9dwaohc5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHOHT1zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m47mtpzqb8br9dwaohc5.PNG" alt="nightOwl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shades-of-purple"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Shades Of Purple&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpo968X6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac7xa82xg70a9as78tyw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpo968X6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac7xa82xg70a9as78tyw.PNG" alt="Shades Of Purple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Simple Web Crawler Service</title>
      <author>Temitope Omotunde</author>
      <pubDate>Sat, 18 Sep 2021 18:39:33 +0000</pubDate>
      <link>https://dev.to/topeomot/simple-web-crawler-service-4anp</link>
      <guid>https://dev.to/topeomot/simple-web-crawler-service-4anp</guid>
      <description>&lt;p&gt;&lt;em&gt;This was built based on the Backend Project Idea 1 given in the article &lt;a href="https://hackernoon.com/15-project-ideas-for-front-end-back-end-and-full-stack-web-developers-j06k35pi"&gt;https://hackernoon.com/15-project-ideas-for-front-end-back-end-and-full-stack-web-developers-j06k35pi&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Find project repository at &lt;a href="https://github.com/topeomot2/simple-web-crawler-service"&gt;https://github.com/topeomot2/simple-web-crawler-service&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple web crawler service that takes a page URL and returns the HTML markup of that page.&lt;/li&gt;
&lt;li&gt;Only handles absolute urls.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /?url={page absolute url}
Host: localhost:3000

Response
status: 200 OK
content-type: json
body: {
    data: "html Content"
}


GET /?url={wrong string}
Host: localhost:3000

Response
status: 400
text: 'send absolute url with protocol included'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#libraries-used"&gt;
  &lt;/a&gt;
  Libraries used
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Personally, my go to web framework for Node.js apis. &lt;/p&gt;

&lt;p&gt;Express actually lives up to the definition on its site. It is Fast, unopinionated, minimalist Framework for Node.js. The unopinionated and minimalist can be a blessing  or a curse, depending on what your preferences are.&lt;br&gt;
 It means you need to make decisions on what tools you want to use. Express makes no assumptions for you.&lt;br&gt;&lt;br&gt;
 But no worries, with the &lt;a href="https://expressjs.com/en/starter/generator.html"&gt;express-generator&lt;/a&gt;, spinning up a basic api is simple.&lt;/p&gt;

&lt;p&gt;The code below creates a project with express and some folder and setup opinions. The --no-view means we are  not using any view template engines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;
    &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;crawler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find out more at &lt;a href="https://expressjs.com/en/starter/generator.html"&gt;https://expressjs.com/en/starter/generator.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/validator"&gt;Validator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A library of string validators and sanitizers. Chose this because of the simple isURL function it has which helps us check if the url query  parameter is an absolute url with the protocol set.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Never use external inputs to your api without validation and sanitization&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; 
        &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;require_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;require_protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;send absolute url with protocol included&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  &lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A very simple promise based HTTP Client. If you know how to use Promises, using  Axios will be a breeze. This does all the work of retrieving  the content of a page by making a GET request to the url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#jest"&gt;
  &lt;/a&gt;
  &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Jest is a JavaScript Testing Framework. It works for any form of JavaScript code or anything that compiles to JavaScript i.e TypeScript. It is simple and I would recommend it anytime. It is the only testing framework I use in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install as a devDependency
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add the  following line in the scripts section of package.json.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest --coverage --watchAll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--coverage : you want jest to create a coverage report&lt;br&gt;
--watchAll means you want continuous checking of code change and rerunning  tests. (This is good for TDD, but can be removed if not desired)&lt;/p&gt;

&lt;p&gt;The test can be found in the tests/app.test.js file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supertest"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/supertest"&gt;Supertest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The most important tests you can write for apis (and software in general) are integration tests. For apis, "route tests" are the integration tests. Supertest&lt;/p&gt;

&lt;p&gt;Route tests are tests that actually call endpoints in the apis and tests for the happy path and sad paths. Supertest is the package for write route test. Supertest is built on &lt;a href="https://github.com/visionmedia/superagent"&gt;superagent&lt;/a&gt;, which is  an HTTP request library. So your Express app is actually called like if a user was making a request&lt;/p&gt;

&lt;p&gt;Happy path is when you call the api correctly with all the expected parameters, you should the correct  successful response. Below is a test that checks the response for the happy path. &lt;/p&gt;

&lt;p&gt;The sad path is when you call the api incorrectly and you expect api to respond with the agreed response. &lt;/p&gt;

&lt;p&gt;But something very important to note, calling apis this way means that all dependencies will be called. Dependencies include things like Databases, 3rd party apis etc. There are 2 ways practically to handle dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mocking: This is the process of substituting the response from 3rd dependencies so that they are not  actually  called during the test. This is the approach used here. Instead of using the crawler.js module to call the url, I used Jest to Mock the module and return a response. This makes the test faster and more predictable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Containerization: this is good for database dependent apis, instead of mocking the database, you can just spin up a container for that database, seed it (fill it with test data) and then run your test against  it. This can also be used for other infrastructural dependencies that the pai depends on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: You can also use Mocking for the situation described in the Containerization section. I would advise that database are encapsulated in a service/model and then you can then mock the service/model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the first of many project ideas, I want to get done. Most of them will be picked from project ideas, I find online. Please reach out with any advise, improvements or corrections you feel that is needed.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>api</category>
      <category>testing</category>
    </item>
    <item>
      <title>Implement dark mode in React 🌞🌕</title>
      <author>Suryaraj Bhaduri</author>
      <pubDate>Sat, 18 Sep 2021 17:59:04 +0000</pubDate>
      <link>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</link>
      <guid>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</guid>
      <description>&lt;p&gt;Who doesn't want a dark theme on their website! Not only does it help us focus better, but also keeps our eyes safer 🤓.&lt;/p&gt;

&lt;p&gt;The blog might add value if you belong to either of these situations -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maybe you have been in a place wherein you want to implement a dark theme for your website but are struggling around the same 😵. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are starting out with React, so this might just be another fun exercise for you to try 🎉.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of React and terminologies (state, props, etc.)&lt;/li&gt;
&lt;li&gt;Basic knowledge of CSS&lt;/li&gt;
&lt;li&gt;Will to learn 🚀&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spin-up-a-new-react-project"&gt;
  &lt;/a&gt;
  Spin up a new React Project ✨
&lt;/h2&gt;

&lt;p&gt;You could use your local development environment or maybe use a sandbox. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note📝 - If using local setup prefer cleaning up the factory code before moving further.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, I will be using class based components for this one - &lt;em&gt;not using React Hooks&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-simple-page"&gt;
  &lt;/a&gt;
  Create a simple page
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App()&lt;/code&gt;, just return a &lt;code&gt;div&lt;/code&gt; for the time being. (Can use a &lt;code&gt;button&lt;/code&gt; as well)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" alt="Init setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-state-to-our-app"&gt;
  &lt;/a&gt;
  Add state to our app
&lt;/h2&gt;

&lt;p&gt;We cannot do much with a &lt;em&gt;dumb component&lt;/em&gt; when it comes to embedding logic inside of it. So we need to add &lt;code&gt;state&lt;/code&gt; to the React component.&lt;/p&gt;

&lt;p&gt;Add a state called &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; component and set it to &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" alt="Adding state"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Creating the theme switcher logic 💡
&lt;/h2&gt;

&lt;p&gt;This is the crux of the entire problem. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to build the theme switcher / toggler ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might become simple, if you try to draw an analogy to a light bulb. A light bulb has two states &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt;. &lt;br&gt;
At any given point of time it is in one of the either states.&lt;/p&gt;

&lt;p&gt;Now, imagine the theme switcher to be a bulb and try to map the idea.&lt;/p&gt;

&lt;p&gt;You got it! 🎉 If the theme switcher is imagined to be a light bulb, &lt;code&gt;light mode&lt;/code&gt; becomes &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;dark mode&lt;/code&gt; becomes &lt;code&gt;off&lt;/code&gt; or vice-versa.&lt;/p&gt;

&lt;p&gt;Now, how to toggle the state ? Pretty simple, just flip the current state whenever a certain event fires.&lt;br&gt;
In simpler terms - on clicking a button change the state value from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; or vice versa.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Implementing the theme switcher logic
&lt;/h2&gt;

&lt;p&gt;Now, as we have designed the approach it's good time to start coding up the idea. &lt;br&gt;
FYI for changing state in React we use the &lt;code&gt;setState&lt;/code&gt; function. You can read about the &lt;code&gt;setState&lt;/code&gt; API from &lt;a href="https://reactjs.org/docs/react-component.html#setstate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;clickHandler&lt;/code&gt; and embed the state-toggler logic inside of it. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" alt="Click handler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pass this &lt;code&gt;clickHandler&lt;/code&gt; to the &lt;code&gt;onClick&lt;/code&gt; prop of the div, to trigger the function whenever user clicks on the div.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" alt="clickHandler passed to prop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-svg-to-our-app"&gt;
  &lt;/a&gt;
  Adding SVG to our app
&lt;/h2&gt;

&lt;p&gt;I want to let the user know which mode he can currently switch to. Can be accomplished with text, but what better than using SVG icons to enhance the UI !🎉&lt;/p&gt;

&lt;p&gt;I will be using &lt;a href="https://heroicons.com/"&gt;heroicons&lt;/a&gt; for high quality SVG icons.&lt;/p&gt;

&lt;p&gt;Create two files in your &lt;code&gt;/src&lt;/code&gt; directory, for two SVG icons for the two states. I will be using a Moon and a Sun SVG in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" alt="folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use any SVG in our React app, we can directly use them in our code or import the SVG as a React Component. I prefer the latter as it helps to keep the code cleaner.&lt;/p&gt;

&lt;p&gt;This is how we import an SVG icon as a React component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to toggle the SVG icons as well to suit our purpose. For this we will use &lt;code&gt;conditional rendering&lt;/code&gt;. &lt;br&gt;
This is a gem 💎. You can read about this &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is, whenever &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; we need the &lt;code&gt;sun&lt;/code&gt; SVG to show up else the &lt;code&gt;moon&lt;/code&gt; SVG should show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" alt="conditional render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the app looks right now. You're almost there.🏁&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" alt="demo GIF"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-style-up-our-app"&gt;
  &lt;/a&gt;
  Let's style up our app
&lt;/h2&gt;

&lt;p&gt;When &lt;code&gt;dark mode&lt;/code&gt; is enabled we would want to paint our app background dark. So, for this we would prefer applying &lt;code&gt;classNames conditionally&lt;/code&gt;.&lt;br&gt;
You can read on this from &lt;a href="https://www.pluralsight.com/guides/applying-classes-conditionally-react"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We would be using &lt;code&gt;JSX expression&lt;/code&gt; and &lt;code&gt;Template Literals&lt;/code&gt; for this. When &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, which means &lt;code&gt;dark mode&lt;/code&gt; is enabled, we would append a &lt;code&gt;className&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; className.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets add some style for the &lt;code&gt;.App.dark-mode&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" alt="CSS for App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also style up the SVG icons 💅. Add a className of &lt;code&gt;moon&lt;/code&gt; and &lt;code&gt;sun&lt;/code&gt; to &lt;code&gt;&amp;lt;Moon /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Sun /&amp;gt;&lt;/code&gt; components respectively.&lt;/p&gt;

&lt;p&gt;This is how the App code looks right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sun.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggler-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add desired styles in the &lt;code&gt;styles.css&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" alt="styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ Add a transition time to the wrapper class to make the color switch smoother. I added &lt;code&gt;transition: 0.3s ease&lt;/code&gt; to &lt;code&gt;.App&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the App looks finally!&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; - I have added some additional styles and animations.&lt;/p&gt;

&lt;p&gt;For a larger websites use &lt;code&gt;css variables&lt;/code&gt; to make painting UI components on theme toggle easier.&lt;/p&gt;

&lt;p&gt;Feel free to play around with the sandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/competent-snowflake-d8ox5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!&lt;/strong&gt; 🎉🎉 You made it till the end. If you're still here chances are you probably liked the blog. &lt;/p&gt;

&lt;p&gt;You can also make improvisations to this simple project and share them. This would help in getting the fundamentals stronger 🏋 🚀.&lt;/p&gt;

&lt;p&gt;Do let me know how you liked the blog and where I need to improve. Would be eagerly waiting for feedback!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Event Bubbling - JavaScript Concepts Simplified</title>
      <author>Thisura Thenuka</author>
      <pubDate>Sat, 18 Sep 2021 17:30:10 +0000</pubDate>
      <link>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</link>
      <guid>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</guid>
      <description>&lt;p&gt;Hello guys, welcome to another article in the JavaScript Concepts Simplified article series. Today, we'll be looking into Event Bubbling in JavaScript.&lt;/p&gt;

&lt;p&gt;I'm just going to go through some of the basic things you need to know before going into the main event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-knowledge"&gt;
  &lt;/a&gt;
  Background Knowledge
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;event&lt;/strong&gt; is an action or an occurrence that happens in your system. The simplest example would be the user clicking on a button.&lt;/p&gt;

&lt;p&gt;For each event that is fired, we can write an &lt;strong&gt;event handler&lt;/strong&gt; (A JavaScript function to handle the event) to do what we want to do. For example, we can write an event handler function to print something on the screen once the user clicks on the button.&lt;/p&gt;

&lt;p&gt;We also have &lt;strong&gt;event listeners&lt;/strong&gt; in JavaScript. Event listeners listen to the events happening. So, if we want to print something on the screen once the user clicks on the button, we need to first create an event listener to listen for the click event of the button.&lt;/p&gt;

&lt;p&gt;When we are loading HTML pages in browsers, the browser creates a tree-like structure for each page called the &lt;strong&gt;DOM&lt;/strong&gt;. For example, if you have a button inside your &lt;em&gt;body&lt;/em&gt; tag, the path to the button element would be &lt;strong&gt;html&lt;/strong&gt; -&amp;gt; &lt;strong&gt;body&lt;/strong&gt; -&amp;gt; &lt;strong&gt;button&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-phases-of-event-handling"&gt;
  &lt;/a&gt;
  Three Phases of Event Handling
&lt;/h2&gt;

&lt;p&gt;When it comes to handling events, modern browsers have three phases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Capturing Phase&lt;/li&gt;
&lt;li&gt;Target Phase&lt;/li&gt;
&lt;li&gt;Bubbling Phase&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-capturing-phase"&gt;
  &lt;/a&gt;
  The Capturing Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the element's outer-most ancestor has an onclick event handler registered on it for the capturing phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-target-phase"&gt;
  &lt;/a&gt;
  The Target Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the target property has an event handler for the click event registered on it, and runs it if so.&lt;/p&gt;

&lt;p&gt;Then, if &lt;strong&gt;bubbles&lt;/strong&gt; is true, it propagates the event to the direct parent of the selected element, then the next one, and so on. Otherwise, if &lt;strong&gt;bubbles&lt;/strong&gt; is false, it doesn’t propagate the event to any ancestors of the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bubbling-phase"&gt;
  &lt;/a&gt;
  The Bubbling Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the direct parent of the element selected has an onclick event handler registered on it for the bubbling phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, What?
&lt;/h2&gt;

&lt;p&gt;It is hard to grasp the issue by reading the above lines. Let me simplify. Here is the issue we are facing. &lt;/p&gt;

&lt;p&gt;Think you have created a UI with two &lt;strong&gt;div&lt;/strong&gt; blocks (Block A and Block B). Block B is placed inside Block A. And you have created event handlers for the click event of both &lt;strong&gt;div&lt;/strong&gt; tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you click on &lt;strong&gt;Block B&lt;/strong&gt;, before calling B's event handler, the browser calls A's event handler function. Obviously, this is not what we expected. When we click on B, only the event handler of B should be called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-fix-this"&gt;
  &lt;/a&gt;
  How do we fix this?
&lt;/h2&gt;

&lt;p&gt;Luckily, we do have a solution for this. In the &lt;strong&gt;event&lt;/strong&gt; object, we have a function called &lt;strong&gt;stopPropogation&lt;/strong&gt;. You can call this function at the start of the event handler function of B. You will see that only the event handler function of B is getting executed this time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-is-event-bubbling-useful"&gt;
  &lt;/a&gt;
  When is Event Bubbling Useful?
&lt;/h2&gt;

&lt;p&gt;There could be some use cases where this can be useful. For example, when you have a list of items and you want to do something for all of the items, you will usually have to add event listeners for all the items.&lt;/p&gt;

&lt;p&gt;But since you now know the concept of event bubbling, you can just write and assign the event handler for the parent node and see the magic happen.&lt;/p&gt;

&lt;p&gt;This concept is called &lt;strong&gt;event delegation&lt;/strong&gt;. You can read more on that in  &lt;a href="https://davidwalsh.name/event-delegate"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article. Hope you learned something valuable today. And most importantly, stay safe guys 😷&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Best SvelteKit YouTube Tutorials – UPDATED</title>
      <author>kvetoslavnovak</author>
      <pubDate>Sat, 18 Sep 2021 17:29:45 +0000</pubDate>
      <link>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</link>
      <guid>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</guid>
      <description>&lt;p&gt;Here is my list of the best SvelteKit YouTube video tutorials (updated on 9/18/21):&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thisstephie"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=uC6y59y4V4w&amp;amp;ab_channel=this.stephie"&gt;this.stephie &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uC6y59y4V4w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#noah-glaser"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=OTxIcU_2Qos&amp;amp;ab_channel=NoahGlaser"&gt;Noah Glaser&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OTxIcU_2Qos"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLT9tklUafCrKillL-YGj1IundEpNEDqvC"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tushar-shukla"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=bkqvVkP3sK8&amp;amp;ab_channel=TusharShukla"&gt;Tushar Shukla&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bkqvVkP3sK8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLgZ38BcfViGn2pL2J8Hd78gPblBnzX0IK"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#james-q-quick"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=UU7MgYIbtAk&amp;amp;t=2676s"&gt;James Q Quick&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UU7MgYIbtAk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brayden-girard"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=P6gEnVlJPOc&amp;amp;list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Brayden Girard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P6gEnVlJPOc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svelte-mastery"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=j4AV2Liojk0&amp;amp;t=6s&amp;amp;ab_channel=SvelteMasterySvelteMastery"&gt;Svelte Mastery &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j4AV2Liojk0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webjeda"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=Gtg4yG8Bhcs&amp;amp;list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms&amp;amp;index=1&amp;amp;t=137s&amp;amp;ab_channel=WebJedaWebJeda"&gt;WebJeda&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Gtg4yG8Bhcs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#david-parker"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=qmwJTI-vH6w&amp;amp;list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq&amp;amp;index=1&amp;amp;t=148s&amp;amp;ab_channel=DavidParkerDavidParker"&gt;David Parker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qmwJTI-vH6w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why is bubble sort called 'Bubble Sort'?</title>
      <author>CallMe_Shinzo</author>
      <pubDate>Sat, 18 Sep 2021 17:03:44 +0000</pubDate>
      <link>https://dev.to/callme_shinzo/why-is-bubble-sort-called-bubble-sort-3mg5</link>
      <guid>https://dev.to/callme_shinzo/why-is-bubble-sort-called-bubble-sort-3mg5</guid>
      <description>&lt;p&gt;I have read many contents on bubble sort, but found one same reason for this name. The reason they said is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because its easy to swap soap bubble/watter bubble, and that is what we do in bubble sort, we swap those elements which satisfy our condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today I got to know a good, a real-like reason while reading a blog. The reason is :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Air bubbles that are more buoyant than surrounding water rise to the top. Similarly, list elements with greater value than their surrounding elements “bubble” to the end of the list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading...&lt;/p&gt;

</description>
      <category>bubblesort</category>
      <category>sort</category>
      <category>algorithms</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel Dispatch Queue Job with Delay and Get Job ID</title>
      <author>Mitul Lakhani</author>
      <pubDate>Sat, 18 Sep 2021 17:01:10 +0000</pubDate>
      <link>https://dev.to/mitulmlakhani/laravel-delay-dispatch-queue-job-and-get-job-id-36ke</link>
      <guid>https://dev.to/mitulmlakhani/laravel-delay-dispatch-queue-job-and-get-job-id-36ke</guid>
      <description>&lt;p&gt;With Laravel when we dispatch Queue Job asynchronously, the job is added to the queue then we have no control over it anymore. So I find a way to take control of the job, to either remove or process jobs from the queue.&lt;/p&gt;

&lt;p&gt;Let's Start!&lt;/p&gt;

&lt;p&gt;Create a new helper for dispatch queue job and get Job ID&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!function_exists("custom_dispatch")) {
    function custom_dispatch($job): int {
        return app(\Illuminate\Contracts\Bus\Dispatcher::class)-&amp;gt;dispatch($job);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now let's use "custom_dispatch" helper.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new controller to dispatch the job and handle the job.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller JobHandlerController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's use our helper and implement the controller.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
namespace  App\Http\Controllers;

use Illuminate\Support\Facades\DB;

class JobHandlerController extends  Controller
{
    public function dispatchJob(): int
    {
        // Create your job instance with delay, so we can back here within delay and take control in our hands.
        $job = new App\Jobs\YourAwesomeJob($params)-&amp;gt;delay(now()-&amp;gt;addSeconds(60);

        // Dispath your job with our custom_dispatch helper. This will return job id from jobs table
        $jobId = custom_dispatch($job);

        return $jobId;
    }

    public function processJob(int $jobId, string $action): bool
    {
        // Here deleting job from the jobs table
        if($action === "delete") {
            DB::table('jobs')-&amp;gt;whereIn('id', $args['jobIds'])-&amp;gt;delete();
        }

        // Here update available_at field with the current timestamp, So now the queue worker will process the job immediately. 
        DB::table('jobs')-&amp;gt;where('id', $jobIds)-&amp;gt;update(['available_at' =&amp;gt; time()]);

        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note: This thing is useful when the queue driver is not "sync".&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Hope you find it useful.&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>How to Get Most Out of an Online Course</title>
      <author>Bhagya Mudgal</author>
      <pubDate>Sat, 18 Sep 2021 16:47:59 +0000</pubDate>
      <link>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</link>
      <guid>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</guid>
      <description>&lt;p&gt;Today if anyone wants to learn a new skill, they prefer online courses over books because they tend to learn more in less duration by consuming video content instead of going through textbooks.&lt;br&gt;
There are many courses available on the internet free as well as paid, some people prefer free over paid and vice versa, it is completely a personal choice. The end goal for taking a course is to learn something new. We put our time into it so it is important for us to know how we can get the most out of an online course. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-follow-up-with-the-instructor"&gt;
  &lt;/a&gt;
  1. Follow up with the instructor
&lt;/h3&gt;

&lt;p&gt;Let's say you are doing a course that needs implementation like a coding course, so usually, what people do they watch the course like a movie or web series and they think that they are getting all things that the instructor is explaining but after they finish the course and try to implement those things they realize that they have forgotten some concepts and in the worst case they don't remember anything. Now they blame the course that it is not good so they try a new course or go through the same course again. To overcome this issue you should always implement side by side whatever the instructor is explaining. By doing this you will understand and remember concepts better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-focus-on-concepts-and-adapt-to-changes"&gt;
  &lt;/a&gt;
  2. Focus on concepts and adapt to changes
&lt;/h3&gt;

&lt;p&gt;Sometimes courses are not updated with the time but it does not mean that those courses are now useless. The content in that course may be better than of some new course. Let's say you want to learn react.js and now you are searching for a course to start learning and your friend is offering you a course of react.js that he purchased last year and it is not updated since then instead of saying to him that it is outdated and I will buy an updated one what you can do is to go through that course and if the instructor had used any particular package in that course that is now deprecated you can get its replacement by searching it on google. Concepts don't change over time so try to focus on concepts and adapt to changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-always-make-your-own-notes-for-the-course"&gt;
  &lt;/a&gt;
  3. Always make your own notes for the course
&lt;/h3&gt;

&lt;p&gt;Nowadays, it is very convenient to take notes while watching courses due to the online tools like the notion, google docs, etc. So try to make your own notes using one of these tools or you can follow the old way of using pen and paper to take notes. By doing this you will be able to summarise let's say 20 hrs of content into 4-5 pages so that if in future you forgot something you can always go through the notes instead of watching the course, it will definitely save you time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-complete-the-course"&gt;
  &lt;/a&gt;
  4. Complete the course
&lt;/h3&gt;

&lt;p&gt;The most important thing is to complete the course. People tend to start the course and leave it incomplete. This happens due to a lack of consistency, when we start something we should be consistent in it and do it regularly until it gets completed. When we do something regularly it's difficult for us to miss one day because our brain tells us that we are going out of track. Make a plan to study at least 1 hour per day and keep going until the course gets completed.&lt;/p&gt;




&lt;p&gt;Thanks for reading! I hope it will help you.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://bit.ly/3AgR0MT"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://bit.ly/2YZxZRq"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To know more about me and my projects visit my &lt;a href="https://bit.ly/3zOlSUS"&gt;Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this post useful and informative, you can support me and &lt;a href="https://bit.ly/3nyg52d"&gt;Buy Me A Coffee&lt;/a&gt;. Your support encourages me to write more informational and useful content in the future.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
