<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Everything you need to know about OpenTelemetry Java agent</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 24 Aug 2021 13:00:55 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-agent-4o3n</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-agent-4o3n</guid>
      <description>&lt;p&gt;OpenTelemetry emerged as a single project after the merging of OpenCensus(from Google) and OpenTracing(from Uber) into a single project. The project aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.&lt;/p&gt;

&lt;p&gt;The OpenTelemetry Java agent enables Java applications to generate and capture telemetry data automatically. This article gives you a solid overview of the OpenTelemetry Java agent, including how it works. But first, let's take a short detour to understand what OpenTelemetry is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry"&gt;
  &lt;/a&gt;
  What is OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a collection of code - a set of APIs, SDKs, tooling, and integrations that help you generate and manage telemetry data. It helps you generate, emit, collect, process, and export telemetry data.&lt;/p&gt;

&lt;p&gt;The telemetry data captured with OpenTelemetry enables observability for your systems and applications. It also aims to standardize this process. The data you collect with OpenTelemetry is vendor-agnostic and can be exported in many formats.&lt;/p&gt;

&lt;p&gt;OpenTelemetry does not come with a backend analysis tool. For storage, analysis, and visualization of telemetry data, you can use a full-stack observability platform like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-generate-telemetry-data-using-opentelemetry"&gt;
  &lt;/a&gt;
  How do we generate telemetry data using OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;Telemetry data is generated using a process called instrumentation. OpenTelemetry provides instrumentation libraries for both manual and automatic instrumentation. These libraries are specific to the languages that they are used for. Instructions for setting up instrumentation also vary with programming languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OpenTelemetry defines instrumentation libraries as libraries that enable observability for another library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#opentelemetry-java-libraries"&gt;
  &lt;/a&gt;
  OpenTelemetry Java libraries
&lt;/h2&gt;

&lt;p&gt;For Java applications, OpenTelemetry provides three repositories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java&lt;/b&gt;&lt;/a&gt;&lt;br&gt;This repo is the main OpenTelemetry Java SDK and provides components for manual instrumentation. Top-level components include OpenTelemetry API, extensions, SDK, bridge layers for OpenTracing and OpenCensus.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-instrumentation&lt;/b&gt;&lt;/a&gt;&lt;br&gt;This is the sibling project of opentelemetry-java and provides the all-in-one, easy-to-install auto instrumentation Java agent. The OpenTelemetry Java agent enables you to capture telemetry data from many popular libraries and frameworks. You need to attach it to any Java 8+ application. We will learn more about the Java agent below.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-contrib&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry java provides this repo to cover JVM-based applications and workflows that don't fit into the scope of opentelemetry-java and opentelemetry-java-instrumentation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  What is OpenTelemetry Java agent?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry has a very handy Java JAR agent that can be attached to any Java 8+ application for instrumenting Java applications. The Java JAR agent can detect a number of popular libraries and frameworks and instrument it right out of the box for generating telemetry data.&lt;/p&gt;

&lt;p&gt;OpenTelemetry collectors capture the generated telemetry data, which can then be exported in its desired format. If you're using &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, then you can use the default OTLP exporters. The Java agent and the exporter can be configured via the command line with some environment variables. You will not need to make any changes to your code, and that's why it is so convenient to get started with the OpenTelemetry Java agent.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  How to use OpenTelemetry Java agent?
&lt;/h2&gt;

&lt;p&gt;The Java agent needs to be downloaded and distributed for each host that you want to monitor.&lt;/p&gt;

&lt;p&gt;Steps to use the OpenTelemetry Java agent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download and distribute the &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent-all.jar"&gt;latest Java JAR agent&lt;/a&gt; to each monitored host and service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare environment variables like the service name of your monitored service and endpoint to where you will export your data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attach the agent to the jar of your application while running it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're exporting your data to an observability tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, you will have to specify the IP address of the host machine where SigNoz is hosted. SigNoz listens to incoming data at port number: 4317. So remember to allow incoming requests to port number 4317 where SigNoz is hosted.&lt;/p&gt;

&lt;p&gt;Examples of some of the environment variables to take care of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz Backend&amp;gt;:4317
OTEL_RESOURCE_ATTRIBUTES="service.name=SERVICE_NAME"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how the command looks like when you want to run the Java agent attached to an application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/path/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path to the Java agent JAR file needs to be replaced with the location of the file downloaded. For example, for my local, the command looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/Users/Downloads/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, the OpenTelemetry Java agent will dynamically inject bytecode to capture telemetry from a number of popular libraries and frameworks. Let's see what some of the libraries and frameworks included in the list are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-libraries-and-frameworks-supported-by-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  List of libraries and frameworks supported by OpenTelemetry Java agent
&lt;/h2&gt;

&lt;p&gt;The supported libraries and frameworks supported by OpenTelemetry Java agent for automatic instrumentation includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Akka HTTP 10.0+&lt;/li&gt;
&lt;li&gt;Apache HttpClient 2.0+&lt;/li&gt;
&lt;li&gt;AWS Lambda 1.0+&lt;/li&gt;
&lt;li&gt;AWS SDK 1.11.x and 2.2.0+&lt;/li&gt;
&lt;li&gt;Cassandra Driver 3.0+&lt;/li&gt;
&lt;li&gt;Elasticsearch API 5.0+&lt;/li&gt;
&lt;li&gt;Elasticsearch REST Client 5.0+&lt;/li&gt;
&lt;li&gt;gRPC 1.6+&lt;/li&gt;
&lt;li&gt;JDBC Java 8+&lt;/li&gt;
&lt;li&gt;Jedis 1.4+&lt;/li&gt;
&lt;li&gt;Kafka 0.11+&lt;/li&gt;
&lt;li&gt;Kubernetes Client 7.0+&lt;/li&gt;
&lt;li&gt;MongoDB Driver 3.1+&lt;/li&gt;
&lt;li&gt;OkHttp 3.0+&lt;/li&gt;
&lt;li&gt;RabbitMQ Client 2.7+&lt;/li&gt;
&lt;li&gt;Spark Web Framework 2.3+&lt;/li&gt;
&lt;li&gt;Spring Web Services 2.0+&lt;/li&gt;
&lt;li&gt;Vert.x 3.0+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the popular application servers supported by the Java agent include Glassfish, JBoss EAP, Jetty, Payara, Tomcat, TomEE, Weblogic, and Wildfly.&lt;/p&gt;

&lt;p&gt;You can find the complete list of supported libraries and frameworks supported by OpenTelemetry Java agent at &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md#libraries--frameworks" rel="noopener noreferrer nofollow"&gt;opentelemetry-java-instrumentation&lt;/a&gt; GitHub repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The OpenTelemetry Java Jar agent provides a quick and convenient way to enable your Java application for observability. With out-of-box instrumentation for many popular libraries, the Java agent can be a good starting point for instrumenting your apps with OpenTelemetry.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, OpenTelemetry is a vendor-agnostic instrumentation library. So the telemetry data is portable. You can configure it to export in many different formats. A tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; supports the default OTLP formats and is a perfect choice for sending your telemetry data. It also comes with a visualization layer where you can visualize charts like the popular RED metrics and distributed tracing with flame graphs and Gantt charts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vq7cMA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1qgy9r8vvzy5r8ivpo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vq7cMA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1qgy9r8vvzy5r8ivpo1.png" alt="SigNoz UI"&gt;&lt;/a&gt;SigNoz Dashboard with visualization of the popular RED metrics for your application (Number of requests, rate of error &amp;amp; duration)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ-jub8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gts0usvvuv34lv6orr4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ-jub8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gts0usvvuv34lv6orr4u.png" alt="Flamegraphs"&gt;&lt;/a&gt;Flamegraphs and Gantt Charts for visualizing distributed tracing&lt;/p&gt;

&lt;p&gt;Read how to monitor your Spring Boot application with OpenTelemetry Java agent and SigNoz 👇&lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>java</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>Microsoft Server Üzerinde SQLite Kurulumu</title>
      <author>Zeki Ahmet Bayar</author>
      <pubDate>Tue, 24 Aug 2021 12:43:10 +0000</pubDate>
      <link>https://dev.to/aciklab/microsoft-server-uzerinde-sqlite-kurulumu-23k0</link>
      <guid>https://dev.to/aciklab/microsoft-server-uzerinde-sqlite-kurulumu-23k0</guid>
      <description>&lt;p&gt;SQLite bilindiği gibi çokça tercih edilen bir veri tabanı yazılımı. Diğer veri tabanı yazılımlarına göre daha sade olması ile öne çıkan SQLite'ın Microsoft Server 2016 üzerinde bir Powershell scripti içerisinde nasıl kullanılacağını beraber inceleyelim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#versiyon-kontrol%C3%BC"&gt;
  &lt;/a&gt;
  Versiyon kontrolü
&lt;/h3&gt;

&lt;p&gt;Bu aşamada sistemimizle alakalı bazı versiyon bilgilerini öğreneceğiz. Bu bilgiler bize bir sonraki adım olan indirme adımında hangi SQLite versiyonunu indireceğimize karar verirken yardımcı olacak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="nx"&gt;Size&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komutu sisteminizin kaç bit görmemize yardımcı olur. Bu komuttan 8 çıktısını alıyorsanız 64, 4 çıktısını alıyorsanız 32 bit bir sisteme sahip olduğunuz anlamına gelir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$PSVersionTable&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                             
&lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                             
&lt;/span&gt;&lt;span class="n"&gt;PSVersion&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="nx"&gt;5.1.14393.693&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                     
&lt;/span&gt;&lt;span class="n"&gt;PSEdition&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="nx"&gt;Desktop&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                           
&lt;/span&gt;&lt;span class="n"&gt;PSCompatibleVersions&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                           
&lt;/span&gt;&lt;span class="n"&gt;BuildVersion&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nx"&gt;10.0.14393.693&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                    
&lt;/span&gt;&lt;span class="n"&gt;CLRVersion&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="nx"&gt;4.0.30319.42000&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                   
&lt;/span&gt;&lt;span class="n"&gt;WSManStackVersion&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;3.0&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                               
&lt;/span&gt;&lt;span class="n"&gt;PSRemotingProtocolVersion&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;2.3&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                               
&lt;/span&gt;&lt;span class="n"&gt;SerializationVersion&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nx"&gt;1.1.0.1&lt;/span&gt;&lt;span class="w"&gt;            
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komut çıktısında ise ihtiyacımız olan CLRVersion bilgisi. Örneğin yukarıdaki çıktı için bu bilgi bize .NET 4.0 sürümünü kullanmamız gerektiğini ifade ediyor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uygun-sqlite-s%C3%BCr%C3%BCm%C3%BCn%C3%BCn-i%CC%87ndirilmesi"&gt;
  &lt;/a&gt;
  Uygun SQLite Sürümünün İndirilmesi
&lt;/h3&gt;

&lt;p&gt;SQLite &lt;a href="https://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki"&gt;indirme bağlantısına&lt;/a&gt; giderek edindiğimiz versiyon bilgilerine göre sistemimize uygun SQLite sürümünü indirelim. Bu işlem tarayıcı ya da komut satırı üzerinden gerçekleştirilebilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alIohtq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jdo3tybx0gqtc04dj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alIohtq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jdo3tybx0gqtc04dj0.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS&amp;gt; Invoke-WebRequest -Uri "https://system.data.sqlite.org/blobs/1.0.114.0/sqlite-netFx45-binary-bundle-Win32-2012-1.0.114.0.zip" -OutFile C:\Windows\Temp\sqlite.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sıkıştırılmış dosya indirildikten sonra arayüz ya da komut satırı üzerinden ilgili dizine çıkartılmalıdır.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir C:\Windows\sqlite
Expand-Archive C:\Temp\sqlite.zip -DestinationPath C:\Windows\sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i%CC%87ndirilen-dosyan%C4%B1n-sisteme-eklenmesi"&gt;
  &lt;/a&gt;
  İndirilen Dosyanın Sisteme Eklenmesi
&lt;/h3&gt;

&lt;p&gt;İndirilen SQLite dosyasının aşağıdaki gibi sisteme eklenmesi gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS&amp;gt; Add-Type -Path "C:\Windows\sqlite\System.Data.SQLite.dll"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>sqlite</category>
      <category>powershell</category>
    </item>
    <item>
      <title>Interviews are about telling a story</title>
      <author>Laurie</author>
      <pubDate>Tue, 24 Aug 2021 12:34:23 +0000</pubDate>
      <link>https://dev.to/laurieontech/interviews-are-about-telling-a-story-21no</link>
      <guid>https://dev.to/laurieontech/interviews-are-about-telling-a-story-21no</guid>
      <description>&lt;p&gt;Last week I was in &lt;a href="https://twitter.com/DThompsonDev"&gt;Danny Thompson's&lt;/a&gt; twitter space talking about tech interviews. One piece of advice I gave was about preparing for conversational interviews and the types of questions you get asked.&lt;/p&gt;

&lt;p&gt;Apparently, people wanted to learn more!  And as always, I'm happy to oblige.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-interviews-arent-only-about-code"&gt;
  &lt;/a&gt;
  Tech Interviews aren't only about code
&lt;/h2&gt;

&lt;p&gt;You may be familiar with guides for studying and preparing to ace tech interviews. Oftentimes they focus on algorithms and data structures. You'll also find write-ups and websites on studying for systems design interviews and other abstract exercises. Prepping for these types of questions are great. However, they aren't the only type of interview rounds you're likely to encounter.&lt;/p&gt;

&lt;p&gt;In most interview processes you'll have rounds that are very conversational in nature. They're typically a mix of technical and people skills questions. This post is about setting yourself up for success in these interviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-type-of-questions-can-you-expect"&gt;
  &lt;/a&gt;
  What type of questions can you expect?
&lt;/h2&gt;

&lt;p&gt;The interviewer in conversational rounds can be anyone from a manager to a colleague to a skip level director. However, their goal is often the same. How do you collaborate? How do you communicate? What level of experience do you have handling challenges that are both technical and people-focused?&lt;/p&gt;

&lt;p&gt;Examples of the types of questions they might ask are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tell me about a time where you had to say no to a request?&lt;/li&gt;
&lt;li&gt;Have you ever had to give feedback to a more senior engineer? Can you tell me about that?&lt;/li&gt;
&lt;li&gt;What mistakes have you made in implementing a system? What would you do differently next time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are hundreds of these types of questions, but you get the idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-good-answer-look-like"&gt;
  &lt;/a&gt;
  What does a good answer look like?
&lt;/h2&gt;

&lt;p&gt;Sometimes these answers explicitly ask for a story, e.g. "tell me about a time". Sometimes it's less overt and they say "how would you handle". In either case, having a real life example you can point to helps ground your answer and show the experience you have.&lt;/p&gt;

&lt;p&gt;Stories should have a beginning, a middle and an end. They should show a positive outcome or an outcome where you can point to the mistakes that were made and what you'd do differently. They also need to be clear, concise and effective. Most importantly, the story needs to clearly connect to the question being asked.&lt;/p&gt;

&lt;p&gt;This sounds like a lot to ask on the spot! You have to think about the question, come up with an anecdote, package it well, and relay it back to the interviewer. All in 5 or so minutes, maybe less. Yikes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?!
&lt;/h2&gt;

&lt;p&gt;This is where my original advice comes into play. You don't need to think of every question you might be asked. But you should think of some stories ahead of time.&lt;/p&gt;

&lt;p&gt;Have 3-5 stories in your back pocket going into an interview. They should highlight different aspects of your collaboration and communication style so that they can fit the questions being asked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A story where you did everything right&lt;/li&gt;
&lt;li&gt;A story where you did something wrong and learned from it&lt;/li&gt;
&lt;li&gt;A story involving a peer&lt;/li&gt;
&lt;li&gt;A story involving management&lt;/li&gt;
&lt;li&gt;A story involving another team, company, or external player&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list isn't exhaustive, but it will help you start thinking about some good anecdotes. Once you've zeroed in on your stories you can start to practice talking about them.&lt;/p&gt;

&lt;p&gt;When prepping a story consider an interview enviroment. You want to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get to the point quickly - remove any extraneous or overly detailed pieces of information&lt;/li&gt;
&lt;li&gt;Be clear - beginning, middle and end, make sure that your point comes across&lt;/li&gt;
&lt;li&gt;Connect to the question - this takes some practice, but try and mention the keywords of the question as you're concluding the story and drive home how it connects&lt;/li&gt;
&lt;li&gt;Show off - this doesn't mean you should brag, but try and show yourself in a positive light, even when the story involves a misadventure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thinking through all of this ahead of time will give you confidence going into these types of interviews. You won't be stuck trying to think of a good anecdote in live time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-caveats"&gt;
  &lt;/a&gt;
  Important caveats
&lt;/h2&gt;

&lt;p&gt;There are a couple mistakes to avoid.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If they ask for a time you weren't successful, don't use a story where you were. Always have a story for when you messed up. Be able to analyze what you could have done differently, but don't avoid the point of the question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't need to be an engineer to answer these questions well. If you are a career changer you can tell a story involving retail managers, your fellow line cook, the military. Whatever it is, this is a great opportunity to show how your current experience relates to the role and why you have more to offer than someone straight out of school.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#interviews-are-about-you"&gt;
  &lt;/a&gt;
  Interviews are about you
&lt;/h2&gt;

&lt;p&gt;For all the flaws with technical interviews, conversational interviews are different. You don't need to be the most outgoing person in the room or have studied a textbook worth of potential questions. A few focused areas of prep will help you show off your skills and experience.&lt;/p&gt;

</description>
      <category>career</category>
      <category>interview</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Things to do before making the build for Production. (React JS)</title>
      <author>Atul Bhatt</author>
      <pubDate>Tue, 24 Aug 2021 12:25:58 +0000</pubDate>
      <link>https://dev.to/atulbhattsystem32/5-things-to-do-before-making-the-build-for-production-react-js-j8b</link>
      <guid>https://dev.to/atulbhattsystem32/5-things-to-do-before-making-the-build-for-production-react-js-j8b</guid>
      <description>&lt;p&gt;This article is not something you might not already know but maybe you might not have it all listed in a one place. There can be more things that I'll surely be missing in this article which I would like you to mention down in the comments so that I can compile another part to this article. And this is a beginner level post.&lt;/p&gt;

&lt;p&gt;So let's start on listing the things that I feel one should do before pushing their production build. These are the things that I have used for the react project I have built but they are definitely the points which can surely be helpful in other projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Clearing all the &lt;code&gt;console.logs&lt;/code&gt; that are absolutely not intended for the users. And it's rare that &lt;code&gt;console.logs&lt;/code&gt; are there for users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Remove all the &lt;code&gt;commented code&lt;/code&gt; which doesn't serves any purpose or in the end is just misleading. Comments are meant for giving extra context to why something has been done not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9C7MQvmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ttpxsa5z79q4077anq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C7MQvmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ttpxsa5z79q4077anq4.png" alt="Screenshot (309)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The above screenshot depicts how there is a &lt;code&gt;useless console log&lt;/code&gt; which the developer might have used for the &lt;code&gt;testing purpose&lt;/code&gt; which should be &lt;code&gt;removed&lt;/code&gt; once everything is wrapped up in development and the project is ready for getting into production.&lt;/p&gt;

&lt;p&gt;Another thing worth keeping note is the commented code which serves no purpose in the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Removing all the &lt;code&gt;unused npm packages&lt;/code&gt; and &lt;code&gt;libraries&lt;/code&gt; that are installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Deleting all the &lt;code&gt;unused files&lt;/code&gt; that are just clogging up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It might feel overwhelming to find all the unused packages and files manually but don't you worry.&lt;br&gt;
As the diamond cuts the diamond, in the same way we will use another package to remove the dead files. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can follow the packages below:&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/depcheck"&gt;depcheck&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/unimported"&gt;unimported&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmXtWWmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935ega4ef8386v4uqz5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmXtWWmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935ega4ef8386v4uqz5k.png" alt="Screenshot (119)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Check how the build works by &lt;code&gt;serving the build&lt;/code&gt; in react. I know that I used to create a build and then push it to staging server to check how it will behave there because I wasn't aware of the fact that React offers this functionality. It's always good to check your build before pushing it to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NzF2Hvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfijqotdyhfohsq6zfqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NzF2Hvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfijqotdyhfohsq6zfqk.png" alt="Screenshot (310)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So basically this is not about improving the code or optimizing it. These things go hand in hand when you are doing development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The goal🎯 of this article is primarily on giving the finishing touch to your React Web App before making it live in the production.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope this article was helpful to you. I would be more than happy to receive your feedback on this article. Thanks for your precious time reading this. Stay tuned for more insightful reading by me.😊&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>writing</category>
    </item>
    <item>
      <title>All about .NET MAUI (+15 NEW Features)🏅</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 24 Aug 2021 11:56:37 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/all-about-net-maui-15-new-features-4dge</link>
      <guid>https://dev.to/dotnetsafer/all-about-net-maui-15-new-features-4dge</guid>
      <description>&lt;p&gt;.NET MAUI means &lt;strong&gt;.NET Multi-Platform&lt;/strong&gt; App User Interface and allows us to build native desktop and mobile apps with a single code base. .NET MAUI will be running on .NET 6, which will be released in &lt;strong&gt;November 2021.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to Microsoft, .NET MAUI is an &lt;strong&gt;evolution&lt;/strong&gt; of Xamarin Forms with rebuilt controls from the group up for performance and extensibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-the-difference-between-net-maui-and-xamarin-forms"&gt;
  &lt;/a&gt;
  What’s the difference between .NET MAUI and Xamarin Forms?
&lt;/h2&gt;

&lt;p&gt;With .NET MAUI based on .NET 6, the evolution of Xamarin Forms will be integrated into the new world of a single .NET.&lt;/p&gt;

&lt;p&gt;With .NET 6 native app development becomes part of .NET like other frameworks such as &lt;strong&gt;ASP.NET Core&lt;/strong&gt; already have with &lt;strong&gt;.NET 5.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In .NET MAUI, &lt;strong&gt;all your code is in a single project&lt;/strong&gt; compared to Xamarin Forms, where you had to have a project for every platform. It should reduce complexity and make it an overall better developer experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#net-maui-features-lets-start-with-basics"&gt;
  &lt;/a&gt;
  🟢.NET MAUI features: Let’s start with basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🟢Support
&lt;/h3&gt;

&lt;p&gt;.NET 6 will be released in November 2021 and will be supported for three years, as a Long Term Support (LTS) release. The platform matrix has been significantly expanded compared to .NET 5.&lt;/p&gt;

&lt;p&gt;The additions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iOS.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt; and &lt;strong&gt;Mac Catalyst&lt;/strong&gt;, for x64 and Apple Silicon (AKA “M1”).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows Arm64 (specifically &lt;strong&gt;Windows Desktop&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;.NET 6 Debian container images are based on Debian 11 (“bullseye”), which is currently in testing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#startup"&gt;
  &lt;/a&gt;
  🟢 Startup
&lt;/h3&gt;

&lt;p&gt;The .NET MAUI applications will use a Startup class that will allow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configure&lt;/strong&gt; method to pipe service registration, handler registration, or application customization processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be able to &lt;strong&gt;create&lt;/strong&gt; a custom HostBuilder.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAppHostBuilder&lt;/span&gt; &lt;span class="n"&gt;appBuilder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;     
  &lt;span class="n"&gt;appBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appBuilder&lt;/span&gt;         
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseCompatibilityRenderers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseMauiApp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, if you don’t want to customize anything special, or you want to use your own dependency container or something, you can.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  🟢 Accessibility
&lt;/h3&gt;

&lt;p&gt;Adding more control and improving the accessibility &lt;strong&gt;API&lt;/strong&gt; to avoid confusion in addition to aligning the behavior in all cases and platforms is one of the priorities in one of the sections with such importance as accessibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;     
  &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Entry text TH"&lt;/span&gt;     
  &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"14"&lt;/span&gt;     
  &lt;span class="n"&gt;SemanticProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Description text"&lt;/span&gt;    
  &lt;span class="n"&gt;SemanticProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hint&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hint text"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The concept of &lt;strong&gt;SemanticProperties&lt;/strong&gt; is added. Microsoft are talking about a series of properties that add extra information to Views to allow it to correctly interpret what happens when using the screen reader, or keyboard navigation.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#workload-installation"&gt;
  &lt;/a&gt;
  🟢 Workload Installation
&lt;/h3&gt;

&lt;p&gt;As part of &lt;strong&gt;.NET&lt;/strong&gt; unification, Microsoft have introduced the concept of SDK workloads to enable specific developer scenarios on top of the .NET SDK. In previous preview the underlying SDKs for &lt;strong&gt;iOS, Mac Catalyst, macOS, Android&lt;/strong&gt; were enabled. Now they are introducing the maui, maui-desktop, maui-mobile and workloads. The first will acquire and install all the required SDKs for building .NET MAUI applications.&lt;/p&gt;

&lt;p&gt;In the near future &lt;strong&gt;Visual Studio 2022&lt;/strong&gt; will include these with its installer.&lt;/p&gt;

&lt;p&gt;If you want use them, just open a CLI and check what you have installed 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;sdk&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5osV6Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A7MQ88aV7HyNHMpcD0SNfCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5osV6Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A7MQ88aV7HyNHMpcD0SNfCA.png" alt="Checking dotnet sdk version&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After verifying what’s installed, you can see how the additional workloads are running 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;workload&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FfwOWmXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQPgx0DyQUuNW_lnFWeMZfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FfwOWmXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQPgx0DyQUuNW_lnFWeMZfw.png" alt="Checking additional workloads&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally to install .NET MAUI you need to execute 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;workload&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;maui&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#net-maui-features-ui-and-ux"&gt;
  &lt;/a&gt;
  🟡.NET MAUI features: UI and UX
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#shared-fonts-images-and-app-icons"&gt;
  &lt;/a&gt;
  🟡Shared fonts, images, and app icons
&lt;/h3&gt;

&lt;p&gt;Fonts and images can be placed in one location in your solution and .NET MAUI will enable them to natively work on all platforms you target. These are tracked in your *.csproj as SharedImage and SharedFont.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts\ionicons.ttf"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both accept wildcards to include all files within a location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Images*"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts*"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#font-scaling"&gt;
  &lt;/a&gt;
  🟡 Font Scaling
&lt;/h3&gt;

&lt;p&gt;All controls across all platforms now have font scaling enabled by default. This means as your application users adjust their text scaling preferences in the OS, your &lt;strong&gt;UI&lt;/strong&gt; will reflect their choice. This produces a more accessible app by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUN_GIjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AN6J5nyt4BkCfJep908esRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUN_GIjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AN6J5nyt4BkCfJep908esRQ.png" alt=".NET MAUI font scaling feature&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each control has an added FontAutoScalingEnabled, and it even works with FontImageSource or your font icons. Setting a FontSize is your 100% size, and to lock it in you’ll set FontAutoScalingEnabled =”false" 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;VerticalStackLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Scaling disabled"&lt;/span&gt;
    &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;
    &lt;span class="n"&gt;FontAutoScalingEnabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Scaling enabled"&lt;/span&gt;
    &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;VerticalStackLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#new-layouts"&gt;
  &lt;/a&gt;
  🟡 New Layouts
&lt;/h3&gt;

&lt;p&gt;Microsoft also tells us that the layouts that have been used in the &lt;strong&gt;.NET MAUI&lt;/strong&gt; are the &lt;strong&gt;Xamarin.Forms&lt;/strong&gt; layouts. They say they started with that approach to quickly get the user interface on screen and focus on completing their library of &lt;strong&gt;UI 40&lt;/strong&gt; controls.&lt;/p&gt;

&lt;p&gt;At the same time, they have been creating streamlined layouts based on a new LayoutManager approach that employs its long &lt;strong&gt;7 years&lt;/strong&gt; of Xamarin.Forms design training to optimize consistency, performance, and maintainability.&lt;/p&gt;

&lt;p&gt;One of the updates that you may have noticed is the leveling out of the default spacing values in these layouts: &lt;strong&gt;0&lt;/strong&gt;. If you’ve used the legacy layouts, then you already know the different arbitrary values previously set there. Zero sets a clearer expectation and prompts you to set your preferred values that best suit your design needs.&lt;/p&gt;

&lt;p&gt;A very easy way is 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResourceDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt; &lt;span class="n"&gt;TargetType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"StackLayout"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Spacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt; &lt;span class="n"&gt;TargetType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Grid"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ColumnSpacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"RowSpacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ResourceDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#native-alerts"&gt;
  &lt;/a&gt;
  🟡 Native Alerts
&lt;/h3&gt;

&lt;p&gt;Each platform has a native way of displaying alerts to users. These can be simple informational popups, simple input forms, and even action sheets with multiple options to guide a user.&lt;br&gt;
These are available from any Page in a .NET MAUI application. 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;DisplayAlert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"You have been alerted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqGRHQEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/459/1%2AFEud8Hr07E3yTupU2A_rJw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqGRHQEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/459/1%2AFEud8Hr07E3yTupU2A_rJw.png" alt=".NET MAUI new alert feature"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clipping"&gt;
  &lt;/a&gt;
  🟡 Clipping
&lt;/h3&gt;

&lt;p&gt;When you need to mask content you can now add shapes to the clipping region of a layout or view. The most common use for this is to make a circle image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mOlPBA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A4HZuLcl8LBX0d1JsHagZXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mOlPBA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A4HZuLcl8LBX0d1JsHagZXg.png" alt="Clipping function in .NET MAUI"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#gestures"&gt;
  &lt;/a&gt;
  🟡Gestures
&lt;/h3&gt;

&lt;p&gt;Gesture recognizers allow you to apply tap, pinch, pan, swipe, and drag-and-drop to any view instance. You can apply them easily in &lt;strong&gt;XAML.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GestureRecognizers&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TapGestureRecognizer&lt;/span&gt; &lt;span class="n"&gt;NumberOfTapsRequired&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{Binding OnTileTapped}"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GestureRecognizers&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCMn1OL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2A3rZ4xnBHEzrplaASsczMtQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCMn1OL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2A3rZ4xnBHEzrplaASsczMtQ.gif" alt=".NET MAUI gestures"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#splash-screen"&gt;
  &lt;/a&gt;
  🟡 Splash Screen
&lt;/h3&gt;

&lt;p&gt;On mobile platforms especially you want your first screen to appear as quickly as possible, and this is done by implementing a static splash screen. &lt;strong&gt;.NET MAUI&lt;/strong&gt; now has a single place to describe your splash screen for all platforms that support them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MauiSplashScreen&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#512BD4"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FiZDjaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/900/1%2AiU1Ic31XPhM6ZPyGQ96bLw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FiZDjaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/900/1%2AiU1Ic31XPhM6ZPyGQ96bLw.png" alt=".NET MAUI splash screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#new-control-handlers"&gt;
  &lt;/a&gt;
  🟡 New Control Handlers
&lt;/h3&gt;

&lt;p&gt;They have introduced the first controls and properties that implement a new handler approach. These include partial implementations of &lt;strong&gt;Button, Label, and Entry, Slider, and Switch.&lt;/strong&gt; They are now accepting pull requests to fill out complete implementations, and several contributors have already successfully contributed.&lt;/p&gt;

&lt;p&gt;The HelloMaui sample application now runs from a single project to macOS, iOS, and Android showcasing the current set of ported controls.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;macOS&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GbmOZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHx6JuzXFekHJ093Dud-zQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GbmOZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHx6JuzXFekHJ093Dud-zQA.png" alt=".NET MAUI Control handlers (macOS)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;iOS&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGKXB2HC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/449/1%2AWfra-g6uuRkDBNTjmCYLzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGKXB2HC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/449/1%2AWfra-g6uuRkDBNTjmCYLzA.png" alt=".NET MAUI Control handlers (iOS)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Android&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzxDORYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/422/1%2A4fKSw3HBCMtZoxE4rAnhTw.png" alt=".NET MAUI Control handlers (Android)"&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#net-maui-better-improvements"&gt;
  &lt;/a&gt;
  🟠 .NET MAUI: Better improvements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mac-catalyst"&gt;
  &lt;/a&gt;
  🟠 Mac Catalyst
&lt;/h3&gt;

&lt;p&gt;You can add the following TargetFramework settings to your project to build for macOS desktop, using Mac Catalyst.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt; &lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" '$(OS)' != 'Windows_NT' "&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maccatalyst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#single-project-and-windows"&gt;
  &lt;/a&gt;
  🟠 Single Project and Windows
&lt;/h3&gt;

&lt;p&gt;Microsoft have made a few updates to single project based on developer feedback and Windows support to adopt the latest features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The NuGet package is replaced with the .NET MAUI workload (true in the .csproj).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single project solutions now nest individual platforms within a “Platforms” folder for tidy organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated to Windows App SDK 0.8.1 RC. Use the latest Visual Studio 2022 compatible extension from the marketplace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AV5aw6xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/783/1%2AqMgirzF3t1OY7XyGCB8W-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AV5aw6xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/783/1%2AqMgirzF3t1OY7XyGCB8W-g.png" alt=".NET MAUI single project and Windows"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-top-of-net-maui"&gt;
  &lt;/a&gt;
  🔴 The TOP of .NET MAUI
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#net-hot-reload"&gt;
  &lt;/a&gt;
  🔴 .NET Hot Reload
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;.NET Hot Reload&lt;/strong&gt; is a new experience that enables you to make live edits to your &lt;strong&gt;.NET MAUI&lt;/strong&gt; app’s source code while it is running, reducing the number of times you need to rebuild your app.&lt;br&gt;
To start testing this feature install both &lt;strong&gt;.NET 6 Preview 4&lt;/strong&gt; and Visual Studio 2019 version 16.11 Preview 1. Start your app through the Visual Studio debugger (&lt;strong&gt;F5&lt;/strong&gt;) targeting a WinUI 3 host. Once your app is running, you’ll now have the new option to make code changes and apply them using our new &lt;strong&gt;“apply code changes”&lt;/strong&gt; button as illustrated below.&lt;/p&gt;

&lt;p&gt;In coming releases &lt;strong&gt;.NET Hot Reload&lt;/strong&gt; will also be available for Android, iOS, and macOS, and we’ll be integrating &lt;strong&gt;XAML Hot Reload&lt;/strong&gt; and the Live Visual Tree as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbSAWSAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2AYH4fGom4aqIhMUy_zGx9CQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbSAWSAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2AYH4fGom4aqIhMUy_zGx9CQ.gif" alt=".NET MAUI Hot Reload feature"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  🔹 Conclution:
&lt;/h2&gt;

&lt;p&gt;.NET MAUI has only a few months left to go officially. The latest features mentioned by Microsoft in the Previews are very powerful. At the moment we still have a little left to have it and apparently it will greatly facilitate developers to program web, console or mobile applications.&lt;/p&gt;

&lt;p&gt;What do you think?🤔&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
    <item>
      <title>Básico de corotinas em Kotlin</title>
      <author>Ederson Ferreira</author>
      <pubDate>Tue, 24 Aug 2021 11:22:10 +0000</pubDate>
      <link>https://dev.to/edersonferreira/basico-de-corotinas-em-kotlin-50a8</link>
      <guid>https://dev.to/edersonferreira/basico-de-corotinas-em-kotlin-50a8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-s%C3%A3o-corotinas"&gt;
  &lt;/a&gt;
  O quê são corotinas?
&lt;/h2&gt;

&lt;p&gt;Corotinas (ou &lt;em&gt;Coroutines&lt;/em&gt;) são um bloco de código que rodam concorrentemente com o resto do código, isso significa que podemos rodar dois blocos de código ao mesmo tempo, podendo assim ao mesmo  tempo ler quanto enviar para um servidor por exemplo. Vamos ver mais sobre corotinas na prática durante o artigo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#materiais"&gt;
  &lt;/a&gt;
  Materiais
&lt;/h2&gt;

&lt;p&gt;Será necessário ter o &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; instalado na máquina e um conhecimento básico sobre a linguagem &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-um-projeto-com-corotinas"&gt;
  &lt;/a&gt;
  Criando um projeto com Corotinas
&lt;/h2&gt;

&lt;p&gt;Abra seu IntelliJ no menu inicial e clique em &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3a63hFO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyipebjncu4l9q33v0w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3a63hFO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyipebjncu4l9q33v0w1.png" alt="botão New Project no menu inicial do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois, selecione a opção &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, selecione também a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;, e opicionalmente remova a primeira opção &lt;strong&gt;Java&lt;/strong&gt;. Essa opção não vai mudar em nada, pois ela dá suporte do Gradle á linguagem Java, mas apenas iremos usar Kotlin.&lt;/p&gt;

&lt;p&gt;Após isso, clique em &lt;strong&gt;Next&lt;/strong&gt; e escreva o nome do projeto e a localização na sua máquina. Essas duas opção são completamente pessoais, caso não tenha nenhuma ideia, coloque algo como &lt;strong&gt;Corotinas&lt;/strong&gt; apenas como identificação.&lt;/p&gt;

&lt;p&gt;Agora, com o projeto aberto, vá ao aquivo &lt;code&gt;build.gradle.kts&lt;/code&gt; e adicione a dependência &lt;code&gt;implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1")&lt;/code&gt;, com a seção &lt;code&gt;dependencies&lt;/code&gt; ficando assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stdlib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, clique no elefante no canto superior direito para carregar as alterações no Gradle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vU9RoGar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkf14hqf488c3wjt9uty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vU9RoGar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkf14hqf488c3wjt9uty.png" alt="Elefante do Gradle no canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, poderemos começar a programar. Você pode criar um arquivo em &lt;code&gt;src/main/kotlin/&lt;/code&gt; chamado &lt;code&gt;main.kt&lt;/code&gt; para ser o arquivo principal da aplicação.&lt;/p&gt;

&lt;p&gt;Mas com qualquer nome de arquivo, como você irá usar as corotinas, sempre se lembre de importar a biblioteca de corotinas no começo do arquivo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeira-corotina"&gt;
  &lt;/a&gt;
  Primeira Corotina
&lt;/h2&gt;

&lt;p&gt;Vamos criar o primeiro exemplo, vamos criar uma corotina que irá rodar paralelamente com o código principal, o código principal apenas irá mostrar um "Olá", enquanto o código da corotina irá esperar um segundo, e após isso, irá mostrar um "Mundo!". Podemos fazer isso da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Coloque esse código no seu IntelliJ e rode. O output esperado desse código é esse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos explicar o quê esse código está fazendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;RunBlocking&lt;/code&gt; é um bloco que irá armazenar todas as corotinas de uma parte do código, como se criasse um contexto diferente do normal da &lt;code&gt;main&lt;/code&gt;. Todas as corotinas devem estar dentro de um bloco &lt;code&gt;runBlocking&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;launch&lt;/code&gt; irá iniciar uma corotina, que irá funcionar concorrentemente (ao mesmo tempo) e independente do resto do código, podemos inserir quantos blocos &lt;code&gt;launch&lt;/code&gt; que quisermos dentro de um mesmo código;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;delay&lt;/code&gt; é uma função que faz a corotina esperar por um tempo em milisegundos, e voltar com o processamento após esse tempo. Essa função recebe um número do tipo &lt;code&gt;Long&lt;/code&gt;, que pode ser criado colocando um &lt;code&gt;L&lt;/code&gt; no final de um número;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O &lt;code&gt;runBlocking&lt;/code&gt; guarda um &lt;code&gt;launch&lt;/code&gt; dentro, iniciando uma nova corotina, que a primeira instrução é o &lt;code&gt;delay(1000L)&lt;/code&gt;, fazendo que a corotina espere por um segundo (1000 milisegundos), enquanto isso o código principal continua, mandando um &lt;code&gt;Olá&lt;/code&gt; na tela. E após um segundo da corotina rodando, a proxima e ultima instrução manda um &lt;code&gt;Mundo!&lt;/code&gt; na tela.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refatorando-para-uma-fun%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Refatorando para uma função
&lt;/h2&gt;

&lt;p&gt;Agora vamos transformar o conteúdo de dentro do bloco &lt;code&gt;launch&lt;/code&gt; em uma função. Para isso, iremos precisar usar um &lt;code&gt;suspend&lt;/code&gt; antes da função. (Função de suspensão)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mas, o quê é esse &lt;code&gt;suspend&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;funções com &lt;code&gt;suspend&lt;/code&gt; são funções que podem ser usadas normalmente dentro de corotinas, mas podem usar algumas funções especiais, como a função &lt;code&gt;delay&lt;/code&gt; que como foi explicado mais cedo, serve para fazer a corotina esperar um tempo em milisegundos.&lt;/p&gt;

&lt;p&gt;Com isso em mente, vamos criar a função:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E agora na &lt;code&gt;main&lt;/code&gt;, vamos tirar tudo de dentro do bloco &lt;code&gt;launch&lt;/code&gt; e rodar a função &lt;code&gt;escreverMundo()&lt;/code&gt; dentro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto! Agora nosso código está mais organizado, diminuindo o código da função &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escopo-de-corotinas"&gt;
  &lt;/a&gt;
  Escopo de Corotinas
&lt;/h2&gt;

&lt;p&gt;Podemos também criar um escopo onde iremos armazenar corotinas dentro. Esse escopo se chama &lt;code&gt;coroutineScope&lt;/code&gt;. Esse bloco é muito parecido com o bloco &lt;code&gt;runBlocking&lt;/code&gt;, mas tem uma diferença, enquanto o &lt;code&gt;runBlocking&lt;/code&gt; bloqueia a thread em uso enquanto está esperando algo, o &lt;code&gt;coroutineScope&lt;/code&gt; libera a thread para outros usos enquanto espera algo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Como o &lt;code&gt;coroutineScope&lt;/code&gt; consegue fazer isso?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Porque o &lt;code&gt;coroutineScope&lt;/code&gt; é uma função de suspensão, enquanto o &lt;code&gt;runBlocking&lt;/code&gt; é uma função normal. Por isso &lt;code&gt;coroutineScope&lt;/code&gt; tem essas habilidades especiais.&lt;/p&gt;

&lt;p&gt;Agora, vamos mudar a função &lt;code&gt;escreverMundo&lt;/code&gt;, para fazer que essa função use os poderes de um &lt;code&gt;coroutineScope&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Já se passaram 4 segundos né?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, a função &lt;code&gt;escreverMundo&lt;/code&gt; recebe uma &lt;code&gt;coroutineScope&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Como uma &lt;code&gt;coroutineScope&lt;/code&gt;, podemos colocar vários blocos &lt;code&gt;launch&lt;/code&gt; dentro. No caso, há dois blocos;&lt;/li&gt;
&lt;li&gt;O primeiro bloco, espera por um segundo e depois escreve um &lt;code&gt;Mundo!&lt;/code&gt; na tela;&lt;/li&gt;
&lt;li&gt;O segundo bloco espera por 4 segundos, e depois escreve na tela &lt;code&gt;Já se passaram 4 segundos né?&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E abaixo destes dois blocos, há a instrução para escrever um &lt;code&gt;Olá&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por conta que essas três partes serão executadas ao mesmo tempo, primeiro irá aparecer &lt;code&gt;Olá&lt;/code&gt;, depois de um segundo &lt;code&gt;Mundo!&lt;/code&gt;, e depois de 4 segundos que o programa começou a rodar, irá aparecer o &lt;code&gt;Já se passaram 4 segundos né?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas para que esse código rode corretamente, também precisamos mudar a função &lt;code&gt;main&lt;/code&gt; adaptando para que possamos usar a função &lt;code&gt;escreverMundo&lt;/code&gt; como &lt;code&gt;coroutineScope&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, removemos o &lt;code&gt;launch&lt;/code&gt; pois ele irá impedir que a &lt;code&gt;main&lt;/code&gt; rode corretamente.&lt;/p&gt;

&lt;p&gt;O resultado esperado do programa agora é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
Já se passaram 4 segundos né?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos fazer uma experiência, vamos remover o &lt;code&gt;println("Olá")&lt;/code&gt; na função &lt;code&gt;escreverMundo&lt;/code&gt;, e vamos colocar no final da função &lt;code&gt;main&lt;/code&gt;, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Já se passaram 4 segundos né?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O resultado desse código é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mundo!
Já se passaram 4 segundos né?
Olá
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Como a função &lt;code&gt;runBlocking&lt;/code&gt; bloqueia a thread enquanto está rodando, primeiro, todas as instruções de &lt;code&gt;escreverMundo&lt;/code&gt; são rodadas, e após isso que o código irá continuar, mandando o &lt;code&gt;Olá&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com todos esses recursos, dá pra fazer bastante coisa usando escopos de corotinas com &lt;code&gt;coroutineScope&lt;/code&gt;, iniciar partes do código com corotinas com &lt;code&gt;runBlocking&lt;/code&gt;, iniciar uma corotina com &lt;code&gt;launch&lt;/code&gt;, e fazer uma corotina esperar um tempo com &lt;code&gt;delay&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jobs-tarefas"&gt;
  &lt;/a&gt;
  Jobs (Tarefas)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt; ou tarefas são instâncias de corotinas, que podem ser manipuladas para por exemplo, cancelar a corotina, esperar a corotina terminar todo o processamento para que o código principal continue,etc. Vamos ver esse exemplo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fim"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main&lt;/code&gt; recebe um bloco &lt;code&gt;runBlocking&lt;/code&gt;, podendo assim usar as corotinas dentro;&lt;/li&gt;
&lt;li&gt;é criada uma variável chamada &lt;code&gt;tarefa&lt;/code&gt; que recebe uma corotina em um bloco &lt;code&gt;launch&lt;/code&gt;. Com isso, a corotina é iniciada e o código principal continua;&lt;/li&gt;
&lt;li&gt;Após isso, é escrito na tela um &lt;code&gt;Olá&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;tarefa.join()&lt;/code&gt; faz com que a corotina &lt;code&gt;tarefa&lt;/code&gt; tenha de terminar para que o código principal continue, com isso a instrução &lt;code&gt;println("Fim")&lt;/code&gt; apenas irá rodar depois da corotina &lt;code&gt;tarefa&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Após isso, a corotina espera um segundo, com a instrução &lt;code&gt;delay(1000L)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E ao final da corotina &lt;code&gt;tarefa&lt;/code&gt;, é escrito um &lt;code&gt;Mundo!&lt;/code&gt; na tela;&lt;/li&gt;
&lt;li&gt;E depois da corotina &lt;code&gt;tarefa&lt;/code&gt; ter acabado, é escrito um &lt;code&gt;Fim&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com isso em mente, o output esperado é&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
Fim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Mas, e se eu quiser que a corotina &lt;code&gt;tarefa&lt;/code&gt; rode junto com o código da função &lt;code&gt;main&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podemos fazer isso mudando na linha 9 de &lt;code&gt;tarefa.join()&lt;/code&gt; para &lt;code&gt;tarefa.start()&lt;/code&gt;, com isso o nosso código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fim"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O output esperado dessa maneira é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Fim
Mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso acontece pois enquanto a função &lt;code&gt;tarefa.join()&lt;/code&gt; suspende a thread (&lt;code&gt;main&lt;/code&gt; no caso) enquanto roda, a função &lt;code&gt;tarefa.start()&lt;/code&gt; apenas inicia uma corotina (no caso a corotina &lt;code&gt;tarefa&lt;/code&gt;), e continua a rodar o código principal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cancelando-tarefas"&gt;
  &lt;/a&gt;
  Cancelando tarefas
&lt;/h2&gt;

&lt;p&gt;Agora vamos aprender a como cancelar uma tarefa, esse conhecimento é útil para aplicações que irão rodar por muito tempo sem parar, e vão precisar iniciar e fechar corotinas constantemente, como por exemplo, uma aplicação web feita em &lt;a href="https://ktor.io/"&gt;Ktor&lt;/a&gt;. (Caso você tenha interesse em Ktor, leia esse artigo da Kotlinautas &lt;a href="https://dev.to/kotlinautas/criando-uma-api-com-ktor-8le"&gt;Criando uma API com Ktor&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Primeiro, vamos criar uma &lt;code&gt;main&lt;/code&gt; que recebe um &lt;code&gt;runBlocking&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, vamos criar uma variável &lt;code&gt;tarefa&lt;/code&gt; que recebe um &lt;code&gt;launch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A variável &lt;code&gt;tarefa&lt;/code&gt; recebe um &lt;code&gt;launch&lt;/code&gt;, logo sendo uma corotina;&lt;/li&gt;
&lt;li&gt;Dentro da corotina, há um &lt;code&gt;repeat(1000)&lt;/code&gt;, esse &lt;code&gt;repeat&lt;/code&gt; inicia um código que irá rodar por um número determinado de vezes, no caso, 1000 vezes;&lt;/li&gt;
&lt;li&gt;E dentro desse bloco, é mostrado na tela um texto &lt;code&gt;tarefa: Estou rodando fazem $i vezes&lt;/code&gt;, sendo &lt;code&gt;$i&lt;/code&gt; o número de vezes que o &lt;code&gt;repeat&lt;/code&gt; já repetiu;&lt;/li&gt;
&lt;li&gt;Depois desse texto ser mostrado na tela, a corotina é suspensa por 500 milesegundos (meio segundo);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos fazer que a &lt;code&gt;main&lt;/code&gt; espere um tempo, escreva na tela que não deseja mais esperar que a corotina &lt;code&gt;tarefa&lt;/code&gt; termine seu processamento, cancele a corotina &lt;code&gt;tarefa&lt;/code&gt;, e feche a &lt;code&gt;main&lt;/code&gt; em seguida;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, a &lt;code&gt;main&lt;/code&gt; espera 1.3 segundos, e após isso, será mostrado na tela um texto &lt;code&gt;main: Não quero mais esperar pela tarefa!&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Após isso, é usada a função &lt;code&gt;tarefa.cancel()&lt;/code&gt; para cancelar a corotina, fazendo a corotina &lt;code&gt;tarefa&lt;/code&gt; terminar;&lt;/li&gt;
&lt;li&gt;Para fazer que o resto do código rode apenas quando a corotina for completamente cancelada, é usada a função &lt;code&gt;tarefa.join()&lt;/code&gt; novamente;&lt;/li&gt;
&lt;li&gt;Após isso, a &lt;code&gt;main&lt;/code&gt; escreve na tela &lt;code&gt;main: Agora eu posso fechar&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output esperado desse programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando fazem 0 vezes
tarefa: Estou rodando fazem 1 vezes
tarefa: Estou rodando fazem 2 vezes
main: Não quero mais esperar pela tarefa!
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Segundo a própria &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html"&gt;documentação do Kotlin&lt;/a&gt;, a função &lt;code&gt;.cancel()&lt;/code&gt; cancela a tarefa (corotina sendo armazenada em uma variável), incluindo todas as corotinas iniciadas por essa.&lt;/p&gt;

&lt;p&gt;Mas não é toda corotina que pode ser cancelada dessa maneira, vamos ver o exemplo á seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, ao invés de um &lt;code&gt;repeat(1000)&lt;/code&gt;, temos um &lt;code&gt;while(isActive)&lt;/code&gt;, &lt;code&gt;isActive&lt;/code&gt; é uma variável interna da corotina, que sempre é verdadeira enquanto a corotina não terminou ou não foi cancelada. Logo, quando usamos &lt;code&gt;tarefa.cancel()&lt;/code&gt;, a variável &lt;code&gt;isActive&lt;/code&gt; se torna falsa e a corotina é cancelada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output esperado desse programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
main: Não quero mais esperar pela tarefa!
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usando-um-raw-try-endraw-e-raw-finally-endraw-dentro-de-uma-corotina"&gt;
  &lt;/a&gt;
  Usando um &lt;code&gt;try&lt;/code&gt; e &lt;code&gt;finally&lt;/code&gt; dentro de uma corotina
&lt;/h2&gt;

&lt;p&gt;Caso queiramos que a corotina faça algo antes de ser cancelada, podemos usar um bloco &lt;code&gt;try&lt;/code&gt; com o código da corotina, e depois do &lt;code&gt;try&lt;/code&gt;, dentro de um &lt;code&gt;finally&lt;/code&gt; o código que irá rodar quando a corotina for cancelada.&lt;/p&gt;

&lt;p&gt;Vamos usar o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: terminando corotina tarefa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, todo o código da corotina &lt;code&gt;tarefa&lt;/code&gt; está dentro de um &lt;code&gt;try&lt;/code&gt;, que é o mesmo código do exemplo anterior sobre &lt;code&gt;isActive&lt;/code&gt;, mas agora, após o &lt;code&gt;try&lt;/code&gt;, dentro de um &lt;code&gt;finally&lt;/code&gt;, mostramos na tela &lt;code&gt;tarefa: terminando corotina tarefa&lt;/code&gt;, mostrando esse conceito;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output do programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando fazem 0 vezes
tarefa: Estou rodando fazem 1 vezes
tarefa: Estou rodando fazem 2 vezes
tarefa: Estou rodando fazem 3 vezes
tarefa: Estou rodando fazem 4 vezes
main: Não quero mais esperar pela tarefa!
tarefa: terminando corotina tarefa
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as linha 18 e 19 podem ser refatoradas em uma só, pois há o método &lt;code&gt;cancelAndJoin()&lt;/code&gt;, que cancela a corotina e espera pelo seu fechamento. Com isso, o nosso código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: terminando corotina tarefa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancelAndJoin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#timeout"&gt;
  &lt;/a&gt;
  Timeout
&lt;/h2&gt;

&lt;p&gt;É possível de criar corotinas com tempo máximo de existência, isso pode ser feito com &lt;code&gt;withTimeout&lt;/code&gt;, informando um tempo do tipo &lt;code&gt;Long&lt;/code&gt;, vamos supor o seguinte código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;withTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo há $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caso você tente rodar esse código, irá resultar neste erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I'm sleeping 0 ...
I'm sleeping 1 ...
I'm sleeping 2 ...
Exception in thread "main" kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms
    at kotlinx.coroutines.TimeoutKt.TimeoutCancellationException(Timeout.kt:186)
    at kotlinx.coroutines.TimeoutCoroutine.run(Timeout.kt:156)
    at kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask.run(EventLoop.common.kt:497)
    at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)
    at kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:69)
    at java.base/java.lang.Thread.run(Thread.java:829)

Process finished with exit code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código, é usada a função &lt;code&gt;withTimeout&lt;/code&gt;, que deixa fixo o tempo que uma corotina pode rodar. Caso esse tempo passe, é retornado um erro, sendo &lt;code&gt;kotlinx.coroutines.TimeoutCancellationException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caso você queria que esse timeout não resulte em um erro, é possível se se usar a função &lt;code&gt;withTimeoutOrNull&lt;/code&gt;, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resultado&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;"Feito"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Resultado é $resultado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso, caso esse timeout resulte em um erro, a variável &lt;code&gt;resultado&lt;/code&gt; receberá o valor &lt;code&gt;null&lt;/code&gt;, mas caso deletemos a linha 7, que é uma espera na corotina que aumenta elevadamente o tempo de processamento, ultrapassando o valor determinado de 1.3 segundos pelo &lt;code&gt;withTimeoutOrNull&lt;/code&gt; o valor de &lt;code&gt;resultado&lt;/code&gt; será &lt;code&gt;Feito&lt;/code&gt; pois a corotina rodou sem problema nenhum. Dessa maneira, o código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resultado&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;"Feito"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Resultado é $resultado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explorando-mais-sobre-fun%C3%A7%C3%B5es-de-suspens%C3%A3o"&gt;
  &lt;/a&gt;
  Explorando mais sobre funções de suspensão
&lt;/h2&gt;

&lt;p&gt;Vamos supor que temos duas funções, uma que retorna o número &lt;code&gt;10&lt;/code&gt;, e outra que retorna o número &lt;code&gt;20&lt;/code&gt;, e essas duas funções esperam por um segundo usando a função &lt;code&gt;delay&lt;/code&gt;. Por conta dessas funções terem que pausar a sua execução, terão que ser funções de suspensão, tendo um &lt;code&gt;suspend&lt;/code&gt; na frente. Dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar uma &lt;code&gt;main&lt;/code&gt;, que irá medir o tempo de execução total do código, criar duas variáveis, cada uma sendo o retorno dessas duas funções, e mostrar o resultado dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlin.system.measureTimeMillis&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${um + dois}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import kotlin.system.measureTimeMillis&lt;/code&gt; importa a função que irá medir o tempo do código;&lt;/li&gt;
&lt;li&gt;O retorno das duas funções criadas anteriormente são armazenadas nas variáveis &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A soma dessas duas variáveis é mostrada na tela;&lt;/li&gt;
&lt;li&gt;O tempo total dessas operações é guardado na variável &lt;code&gt;tempo&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E o valor dessa variável &lt;code&gt;tempo&lt;/code&gt; é mostrada na tela;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output desse código será algo parecido com isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 2008 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;E se eu quiser rodar essas duas funções ao mesmo tempo, economizando tempo de processamento?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso pode ser feito usando a função &lt;code&gt;async&lt;/code&gt;. A função &lt;code&gt;async&lt;/code&gt; inicia uma corotina como a função &lt;code&gt;launch&lt;/code&gt;, mas que pode receber um valor como retorno. Por isso é interessante usar &lt;code&gt;async&lt;/code&gt; nesses casos, pois poderemos guardar o retorno de funções de suspensão dentro de variáveis.&lt;/p&gt;

&lt;p&gt;Vamos ver como a nossa função &lt;code&gt;main&lt;/code&gt; ficará com a função &lt;code&gt;async&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${um.await() + dois.await()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, as funções &lt;code&gt;funçãoNúmeroUm&lt;/code&gt; e &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; estão dentro de &lt;code&gt;async&lt;/code&gt;, instânciando uma nova corotina (tarefa) para cada função;&lt;/li&gt;
&lt;li&gt;Para pegar o valor de &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;, é usada a função &lt;code&gt;.await()&lt;/code&gt;, que pega o resultado de dentro da corotina;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, o código roda na metade do tempo pois as duas funções estão rodando ao mesmo tempo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 1015 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#estruturando-concorr%C3%AAncias-com-raw-async-endraw-"&gt;
  &lt;/a&gt;
  Estruturando concorrências com &lt;code&gt;async&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Podemos melhorar ainda mais o código acima, estruturando essa concorrência em uma função, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;soma&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;um&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;await&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;await&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Criamos uma função &lt;code&gt;soma&lt;/code&gt; que é um &lt;code&gt;coroutineScope&lt;/code&gt;, esse escopo é muito interessante de ser usado nesse tipo de caso pois se uma corotina de dentro desse escopo falhar, todas as outras também irão falhar. No caso, as duas corotinas precisam dar um resultado válido para a função retornar o número coretamente.&lt;/li&gt;
&lt;li&gt;E o retorno da função pega o valor das variáveis &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;, e soma, retornando o resultado esperado de &lt;code&gt;30&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora também podemos mudar a função &lt;code&gt;main&lt;/code&gt; para usar a função &lt;code&gt;soma&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${soma()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora temos um código mais bem estruturado, seguro, e com seu output igual ainda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 1016 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;E se alguma corotina der um erro, como posso tratar esse erro usando &lt;code&gt;coroutineScope&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos mudar a &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; para que essa função obrigatoriamente retorne um erro, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Função com erro esperado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dessa maneira, obrigatoriamente, a &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; retorna um erro do tipo &lt;code&gt;Função com erro esperado&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso você tente rodar o código dessa maneira, dará um erro por conta da &lt;code&gt;funçãoNúmeroDois&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" java.lang.Exception: Função com erro esperado
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para resolver isso, pode ser usado com bloco &lt;code&gt;try&lt;/code&gt; com um &lt;code&gt;catch&lt;/code&gt;, dessa maneira, tratando o erro. Vamos mudar a função &lt;code&gt;main&lt;/code&gt; mas tratando o erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${soma()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ocorreu um erro: $erro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, o output do programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ocorreu um erro: java.lang.Exception: Função com erro esperado
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mesmo que o erro &lt;code&gt;Função com erro esperado&lt;/code&gt; tenha acontecido, a &lt;code&gt;main&lt;/code&gt; fechou sem problemas, pois os blocos &lt;code&gt;try&lt;/code&gt; e &lt;code&gt;catch&lt;/code&gt; trataram o erro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Esse é o básico sobre corotinas no Kotlin. Há muito mais detalhes e conteúdos que podem ser abordados, mas para um artigo introdutório isso já é suficiente.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
    </item>
    <item>
      <title>Cross-Validation and Hyperparameter Search in scikit-learn - A Complete Guide</title>
      <author>Bala Priya C</author>
      <pubDate>Tue, 24 Aug 2021 11:21:22 +0000</pubDate>
      <link>https://dev.to/balapriyac/cross-validation-and-hyperparameter-search-in-scikit-learn-a-complete-guide-5ed8</link>
      <guid>https://dev.to/balapriyac/cross-validation-and-hyperparameter-search-in-scikit-learn-a-complete-guide-5ed8</guid>
      <description>&lt;p&gt;This post is inspired by Kevin Markham's course &lt;a href="https://courses.dataschool.io/courses/introduction-to-machine-learning-with-scikit-learn"&gt;Introduction to Machine Learning with scikit-learn&lt;/a&gt; on Data School. If you're a beginner looking to get started with Machine Learning using scikit-learn, I would highly recommend this course to gain all the required foundational skills. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In just a few hours, you'd be able to understand and build basic regression and classification models with optimal hyperparameters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this sounds interesting, please be sure to check the course at &lt;a href="https://courses.dataschool.io/courses/introduction-to-machine-learning-with-scikit-learn"&gt;this&lt;/a&gt; link. &lt;/p&gt;

&lt;p&gt;That said, we shall cover the following in this post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use cross-validation to search for best model hyperparameters&lt;/li&gt;
&lt;li&gt;How to use grid search for hyperparameter search&lt;/li&gt;
&lt;li&gt;How to search more efficiently for hyperparameters using randomized search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-crossvalidation-to-evaluate-a-machine-learning-model"&gt;
  &lt;/a&gt;
  How to Use Cross-Validation to Evaluate a Machine Learning Model
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-validate-a-machine-learning-model"&gt;
  &lt;/a&gt;
  How do we validate a machine learning model?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When evaluating a machine learning model, training and testing on the same dataset is not a great idea. Why? Let us draw a relatable analogy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever since school days, we’ve been giving exams, and how are our exams designed? Well, they’ve been designed so as to test our understanding of the subjects rather than our ability to memorize! The same analogy can be transposed to our machine learning model as well!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here’s the answer to the question ‘Why can we not evaluate a model on the same data that it was trained on?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is because this process inherently encourages the model to memorize the training data. So, the model performs extremely well on the training data. However, it generalizes rather poorly and performs badly on the data that it has never seen before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-raw-traintestsplit-endraw-do"&gt;
  &lt;/a&gt;
  What does &lt;code&gt;train_test_split&lt;/code&gt; do?
&lt;/h3&gt;

&lt;p&gt;As a model's performance on data that it has never seen before is a more reliable estimate of its performance, we usually validate the model by checking how it performs on out-of-sample data, that is, on data that it has never seen before. &lt;/p&gt;

&lt;p&gt;If you remember, it is for this reason, we use the &lt;code&gt;train_test_split&lt;/code&gt; method, in our very friendly and nifty library, scikit-learn.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;train_test_split&lt;/code&gt; splits the available data into two sets: the train and test sets in certain proportions; for example, train on 70% of the available data and test on the remaining 30% of the data. In this way, we can ensure that every record in the dataset can either be in the training set or the test set but not both! By doing so, we are making sure that we test the model’s performance on unseen data.&lt;/p&gt;

&lt;p&gt;But, is this good enough? Or do we take this with a pinch of salt?&lt;br&gt;
Let us train a simple &lt;code&gt;KNeighborsClassifier&lt;/code&gt; in scikit-learn on the iris dataset.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#necessary-imports"&gt;
  &lt;/a&gt;
  Necessary imports
&lt;/h4&gt;

&lt;p&gt;As shown below, we import the necessary modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_iris&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.neighbors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#load-the-data"&gt;
  &lt;/a&gt;
  Load the data
&lt;/h4&gt;

&lt;p&gt;Let us load the iris data and separate out the features(Sepal Length, Sepal Width, Petal Length and Petal Width) and the target variables which are the class labels indicating the iris type. (Setosa, Versicolour, and Virginica)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# read in the iris data
&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_iris&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# create X (features) and y (response)
&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-traintestsplit"&gt;
  &lt;/a&gt;
  Create train_test_split
&lt;/h4&gt;

&lt;p&gt;Let’s create the train and test sets with &lt;code&gt;random_state= 4&lt;/code&gt;; Setting the &lt;code&gt;random_state&lt;/code&gt; ensures reproducibility.&lt;/p&gt;

&lt;p&gt;In this case, it ensures that the records that go into the train and test sets stay the same every time our code is run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# use train/test split with different random_state values
&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#check-classification-accuracy"&gt;
  &lt;/a&gt;
  Check Classification Accuracy
&lt;/h4&gt;

&lt;p&gt;We now instantiate the &lt;code&gt;KNeighborsClassifier&lt;/code&gt; with &lt;code&gt;n_neighbors=9&lt;/code&gt; and fit the classifier on the training set and predict on the test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;knn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accuracy_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="mf"&gt;0.9736842105263158&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us change the &lt;code&gt;random_state&lt;/code&gt; to a different value. What do you think the accuracy score would be?&lt;/p&gt;

&lt;p&gt;Well, please feel free to insert your favorite number in the &lt;code&gt;random_state&lt;/code&gt; and check for yourselves. It'd be a different accuracy score this time.&lt;/p&gt;

&lt;p&gt;Setting the &lt;code&gt;random_state&lt;/code&gt; to another value, we would get another value for the accuracy score. The evaluation metric thus obtained is therefore susceptible to high variance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The accuracy score may depend heavily on which data points end up in the training set and which end up in the test set. &lt;/li&gt;
&lt;li&gt;Thus the accuracy score may be significantly different depending on how the division is made. Clearly, this doesn’t seem like the best way to validate our model’s performance!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-do-we-reach-a-consensus-on-how-to-calculate-the-accuracy-score"&gt;
  &lt;/a&gt;
  How do we reach a consensus on how to calculate the accuracy score?
&lt;/h4&gt;

&lt;p&gt;One very natural thing to do would be to create multiple train/test splits, calculate the accuracy for each such split, and compute the average of all the accuracy scores thus obtained. This definitely seems like a better estimate of the accuracy, doesn’t it?&lt;/p&gt;

&lt;p&gt;This is precisely the essence of cross-validation, which we shall see in the subsequent section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-kfold-crossvalidation"&gt;
  &lt;/a&gt;
  Understanding K-fold cross-validation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#steps-in-kfold-crossvalidation"&gt;
  &lt;/a&gt;
  Steps in K-fold cross-validation
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Split the dataset into K equal partitions (or “folds”).&lt;/li&gt;
&lt;li&gt;Use fold 1 for testing and the union of the other folds as the training set.&lt;/li&gt;
&lt;li&gt;Calculate accuracy on the test set.&lt;/li&gt;
&lt;li&gt;Repeat steps 2 and 3 K times, using a different fold for testing each time.&lt;/li&gt;
&lt;li&gt;Use the average accuracy on different test sets as the estimate of out-of-sample accuracy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us try to visualize this by splitting a dataset of 25 observations into 5 equal folds as shown below.&lt;/p&gt;

&lt;p&gt;The dataset contains 20 observations (numbered 0 through 24).&lt;br&gt;
5-fold cross-validation runs for 5 iterations.&lt;/p&gt;

&lt;p&gt;Let's see how the folds are created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# simulate splitting a dataset of 25 observations into 5 folds
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KFold&lt;/span&gt;
&lt;span class="n"&gt;kf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_splits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# print the contents of each training and testing set
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'{} {:^61} {}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Iteration'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Training set observations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Testing set observations'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'{:^9} {} {:^25}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;
&lt;span class="n"&gt;Iteration&lt;/span&gt;                   &lt;span class="n"&gt;Training&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;observations&lt;/span&gt;                   &lt;span class="n"&gt;Testing&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;observations&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       
    &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       
    &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     
    &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     
    &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We observe the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For each iteration, every observation is either in the training set or the testing set, but not both.&lt;/li&gt;
&lt;li&gt;Every observation is in the test set exactly once.&lt;/li&gt;
&lt;li&gt;Each fold is used as the test set exactly once and in the training set (K-1) times.&lt;/li&gt;
&lt;li&gt;The average accuracy thus obtained is a more accurate estimate of out-of-sample accuracy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This process uses data more efficiently as every observation is used for both training and testing.&lt;/p&gt;

&lt;p&gt;It is recommended to use stratified sampling for creating the folds, as this ensures that all class labels are represented in equal proportions in each fold. And, scikit-learn’s &lt;code&gt;cross_val_score&lt;/code&gt; does this by default.&lt;/p&gt;

&lt;p&gt;In practice, we can do even better by doing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Hold out” a portion of the data before beginning the model building process.&lt;/li&gt;
&lt;li&gt;Find the best model using cross-validation on the remaining data, and test it using the hold-out set. &lt;/li&gt;
&lt;li&gt;This gives a more reliable estimate of out-of-sample performance since the hold-out set is truly out-of-sample.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-crossvalidation-to-search-for-best-model-hyperparameters"&gt;
  &lt;/a&gt;
  How to Use Cross-Validation to Search for Best Model Hyperparameters
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#crossvalidation-for-hyperparameter-tuning"&gt;
  &lt;/a&gt;
  Cross-validation for hyperparameter tuning
&lt;/h3&gt;

&lt;p&gt;For the KNN classifier on the iris dataset, can we possibly use cross-validation to find the optimal value for &lt;code&gt;K&lt;/code&gt;? That is, to search for the optimal value of &lt;code&gt;n_neighbors&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Remember, &lt;code&gt;K&lt;/code&gt; in KNN classifier is the number of neighbors (&lt;code&gt;n_neighbors&lt;/code&gt;) that we take into account for predicting the class label of the test sample. Not to be confused with the &lt;code&gt;K&lt;/code&gt; in K-fold cross-validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;
&lt;span class="c1"&gt;# 10-fold cross-validation with K=5 for KNN (the n_neighbors parameter)
&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;         &lt;span class="mf"&gt;0.93333333&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;         &lt;span class="mf"&gt;1.&lt;/span&gt;         &lt;span class="mf"&gt;0.86666667&lt;/span&gt; &lt;span class="mf"&gt;0.93333333&lt;/span&gt;
 &lt;span class="mf"&gt;0.93333333&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;         &lt;span class="mf"&gt;1.&lt;/span&gt;         &lt;span class="mf"&gt;1.&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# use average accuracy as an estimate of out-of-sample accuracy
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# Output
&lt;/span&gt;
&lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we shall run the K fold cross-validation for the models with different values of &lt;code&gt;n_neighbors&lt;/code&gt;, as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# search for an optimal value of K for KNN
&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;k_scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
   &lt;span class="n"&gt;knn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
   &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;k_scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k_scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output k_scores
&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9533333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666668&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9733333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9666666666666666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9533333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9533333333333334&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9533333333333334&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us plot the values to get a better idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;

&lt;span class="c1"&gt;# plot the value of K for KNN (x-axis) versus the cross-validated accuracy (y-axis)
&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k_scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Value of K for KNN'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Cross-Validated Accuracy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wOde8Zho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdzir812ln0cbv4jqsqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOde8Zho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdzir812ln0cbv4jqsqx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that &lt;code&gt;n_neighbors (K)&lt;/code&gt; values from 13 to 20 yield higher accuracy, especially &lt;code&gt;K&lt;/code&gt;=13,18 and 20.As a larger value of &lt;code&gt;K&lt;/code&gt; yields a less complex model, we choose &lt;code&gt;K&lt;/code&gt;=20.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This process of searching for the optimal values of hyperparameters is called hyperparameter tuning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this example, we chose the values of &lt;code&gt;K&lt;/code&gt; that resulted in higher mean accuracy score under 10-fold cross validation. &lt;/p&gt;

&lt;p&gt;This is how cross-validation can be used to search for the best hyperparameters and this process can be done much more efficiently in scikit-learn.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In KNN classifiers, setting a very small value for &lt;code&gt;K&lt;/code&gt; will make the model needlessly complex, and a very large value of &lt;code&gt;K&lt;/code&gt; would result in a model with high bias that yields suboptimal performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As &lt;code&gt;K&lt;/code&gt;=13,18 and 20 gave the highest accuracy score, close to 0.98, we decided to choose &lt;code&gt;K&lt;/code&gt;=20 as a larger value of &lt;code&gt;K&lt;/code&gt; would yield a less complex model.&lt;/p&gt;

&lt;p&gt;While it is not particularly difficult to write the for loop, we do realize that we may have to do it often.&lt;/p&gt;

&lt;p&gt;Therefore, it would be good to have a more convenient way of doing the hyperparameter search, without having to write a loop every time and identify the best parameter through inspection.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-use-grid-search-for-hyperparameter-search"&gt;
  &lt;/a&gt;
  How to Use Grid Search for Hyperparameter Search
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-gridsearchcv-class"&gt;
  &lt;/a&gt;
  Import GridSearchCV Class
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#define-the-parameter-grid"&gt;
  &lt;/a&gt;
  Define the Parameter Grid
&lt;/h4&gt;

&lt;p&gt;We now define the parameter grid (&lt;code&gt;param_grid&lt;/code&gt;), a Python dictionary, whose key is the name of the hyperparameter whose best value we’re trying to find and the value is the list of possible values that we would like to search over for the hyperparameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# define the parameter values that should be searched
&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# create a parameter grid: map the parameter names to the values that should be searched
&lt;/span&gt;&lt;span class="n"&gt;param_grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# param_grid
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now instantiate &lt;code&gt;GridSearchCV&lt;/code&gt;. Note that we specify the &lt;code&gt;param_grid&lt;/code&gt; instead of the &lt;code&gt;n_neighbors&lt;/code&gt; argument that we had specified for &lt;code&gt;cross_val_score&lt;/code&gt; earlier. &lt;/p&gt;

&lt;p&gt;Why is this valid?&lt;/p&gt;

&lt;p&gt;Remember, the parameter grid, &lt;code&gt;param_grid&lt;/code&gt; is a dictionary whose key is &lt;code&gt;n_neighbors&lt;/code&gt; and the value is a list of possible values of &lt;code&gt;n_neighbors&lt;/code&gt;. Therefore, specifying the &lt;code&gt;param_grid&lt;/code&gt; ensures that the value at index &lt;code&gt;i&lt;/code&gt; is fetched as the value of &lt;code&gt;n_neighbors&lt;/code&gt; in the i_th run.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instantiate-fit-the-grid-and-view-the-results"&gt;
  &lt;/a&gt;
  Instantiate, fit the grid and view the results
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# instantiate the grid
&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now go ahead and fit the grid with data, and access the &lt;code&gt;cv_results_&lt;/code&gt; attribute to get the mean accuracy score after 10-fold cross-validation, standard deviation and the parameter values. &lt;/p&gt;

&lt;p&gt;For convenience, we may store the results in a pandas DataFrame. The mean and standard deviation of the accuracy scores for &lt;code&gt;n_neighbors&lt;/code&gt;=1 to 10 are shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# fit the grid with data
&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# view the results as a pandas DataFrame
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cv_results_&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="s"&gt;'mean_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'std_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'params'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="c1"&gt;# Output
&lt;/span&gt;
&lt;span class="n"&gt;mean_test_score&lt;/span&gt; &lt;span class="n"&gt;std_test_score&lt;/span&gt;  &lt;span class="n"&gt;params&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mf"&gt;0.960000&lt;/span&gt;    &lt;span class="mf"&gt;0.053333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mf"&gt;0.953333&lt;/span&gt;    &lt;span class="mf"&gt;0.052068&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using &lt;code&gt;cross_val_score&lt;/code&gt;, we tried eyeballing the accuracy scores to identify the best hyperparameters and to make it easier, we plotted the value of hyperparameters vs the respective cross-validated accuracy scores! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sounds good but doesn’t seem to be a great option though!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we’ve completed the grid search, the following attributes can be very useful! We can choose to examine:&lt;br&gt;
☑ the best_score_ , the highest cross-validated accuracy score&lt;br&gt;
☑ the best_params_, the optimal value for the hyperparameters, and&lt;br&gt;
☑ the best_estimator_, which is the best model that has the best hyperparameter.&lt;/p&gt;

&lt;p&gt;Let us now examine these for our example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# examine the best model
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_params_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_estimator_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;KNeighborsClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'auto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leaf_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'minkowski'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;metric_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_jobs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;K&lt;/code&gt;=13 has been chosen, remember, &lt;code&gt;K&lt;/code&gt;=13 was one of the values of &lt;code&gt;K&lt;/code&gt; that gave highest cross-validated accuracy score.✔&lt;br&gt;
So far so good!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#searching-for-multiple-hyperparameters"&gt;
  &lt;/a&gt;
  Searching for Multiple Hyperparameters
&lt;/h3&gt;

&lt;p&gt;In this example, the only hyperparameter that we searched for was &lt;code&gt;n_neighbors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What if there were many such hyperparameters?&lt;br&gt;
We may think, “Why not tune each hyperparameter independently?”&lt;/p&gt;

&lt;p&gt;Well, we may independently search for the optimal values for each of the hyperparameters; but the model may perform best at some values of the parameters that are very different from the individual best values.&lt;/p&gt;

&lt;p&gt;So, we have to search for the combination of the parameters that optimizes performance rather than the individual best parameters.&lt;br&gt;
Let us build on the same example of KNNClassifier. &lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;n_neighbors&lt;/code&gt;, let us also search for the optimal weighting strategy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default weighting option is &lt;code&gt;‘uniform’&lt;/code&gt; where all points are weighted equally and &lt;code&gt;‘distance’&lt;/code&gt; option weights points by the inverse of their distance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, closer neighbors of a query point will have a greater influence than neighbors which are far away.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#define-the-parameter-grid"&gt;
  &lt;/a&gt;
  Define the Parameter Grid
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# define the parameter values that should be searched
&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;weight_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# create a parameter grid: map the parameter names to the values that should be searched
&lt;/span&gt;&lt;span class="n"&gt;param_grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;weight_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# param_grid
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let us instantiate and fit the grid and view results, as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# instantiate and fit the grid
&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# view the results
&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cv_results_&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="s"&gt;'mean_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'std_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'params'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="c1"&gt;# Results
&lt;/span&gt;&lt;span class="n"&gt;mean_test_score&lt;/span&gt; &lt;span class="n"&gt;std_test_score&lt;/span&gt;  &lt;span class="n"&gt;params&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mf"&gt;0.960000&lt;/span&gt;    &lt;span class="mf"&gt;0.053333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mf"&gt;0.960000&lt;/span&gt;    &lt;span class="mf"&gt;0.053333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mf"&gt;0.953333&lt;/span&gt;    &lt;span class="mf"&gt;0.052068&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mf"&gt;0.960000&lt;/span&gt;    &lt;span class="mf"&gt;0.053333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that we have 30*2=60 models.(As we had 30 possible values for &lt;code&gt;n_neighbors&lt;/code&gt; and 2 possible values for weights)&lt;br&gt;
As we chose 10-fold cross-validation, there will be 60*10=600 predictions made!&lt;/p&gt;

&lt;p&gt;Time to look at our model’s best score and parameters that yielded the best score.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# examine the best model
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_params_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# best score and best parameters
&lt;/span&gt;&lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We obtain the same best cross-validated accuracy score of 0.98, with n_neighbors=13 and weights= ‘uniform’.&lt;br&gt;
Now, let us say we have to tune 4 hyperparameters and we have a list of 10 possible values for each of the hyperparameters.&lt;br&gt;
This process creates 10*10*10*10 =10,000 models and when we run 10 fold cross-validation, there are 100,000 predictions made.&lt;br&gt;
Clearly, things do scale up very quickly and can soon become computationally infeasible.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-to-search-more-efficiently-for-hyperparameters-using-randomized-search"&gt;
  &lt;/a&gt;
  How to Search More Efficiently for Hyperparameters Using Randomized Search
&lt;/h2&gt;

&lt;p&gt;We shall now try to rephrase the limitations of Grid Search better, in a more formal way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say we have to search for M parameters; Let &lt;code&gt;p_1, p_2,p_3, …, p_M&lt;/code&gt; be the &lt;code&gt;M&lt;/code&gt; parameters. &lt;/li&gt;
&lt;li&gt;Let the number of values that we would like to search over for &lt;code&gt;p_1&lt;/code&gt; be &lt;code&gt;n1&lt;/code&gt;, for &lt;code&gt;p_2&lt;/code&gt; be &lt;code&gt;n2&lt;/code&gt;, and so on, with &lt;code&gt;nM&lt;/code&gt; values for &lt;code&gt;p_M&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grid Search considers all possible hyperparameter settings (combinations) into account and creates a model for each possible setting to choose the best model with optimal hyperparameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To understand it better, assume that out of &lt;code&gt;M&lt;/code&gt; parameters, we decide to freeze the values of all hyperparameters except one, say the M_th parameter &lt;code&gt;p_M&lt;/code&gt;. So, Grid Search involves searching through the list of &lt;code&gt;nM&lt;/code&gt; values for the M_th hyperparameter; So, there are &lt;code&gt;nM&lt;/code&gt; models created.&lt;/li&gt;
&lt;li&gt;Suppose we now freeze the values of all hyperparameters except two, say the last two (&lt;code&gt;p_M&lt;/code&gt; and &lt;code&gt;p_(M-1)&lt;/code&gt;). We now have to search through all possible combinations of &lt;code&gt;p_M&lt;/code&gt; and &lt;code&gt;p_(M-1)&lt;/code&gt;, each having &lt;code&gt;nM&lt;/code&gt; and &lt;code&gt;n_(M-1)&lt;/code&gt; possible values that we could search over.&lt;/li&gt;
&lt;li&gt;We now take a step back and freeze the value of &lt;code&gt;p_M-1&lt;/code&gt; and search through all values for &lt;code&gt;p_M&lt;/code&gt;; To account for all possible combinations, we should repeat the procedure for all &lt;code&gt;n_M-1&lt;/code&gt; values for &lt;code&gt;p_M-1&lt;/code&gt;. So, this process would leave us with &lt;code&gt;n_(M-1) * nM&lt;/code&gt; models.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope it’s clear how the complexity scales with increasing values of the number of values each hyperparameter could take. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the above example with M hyperparameters, we would have &lt;code&gt;n1*n2*n3*…*n_M&lt;/code&gt; models. This is why we said that things could scale up quickly and become computationally intractable with Grid Search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this motivation to make hyperparameter search computationally more efficient, let us proceed to understand Randomized Search.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#understanding-randomizedsearchcv"&gt;
  &lt;/a&gt;
  Understanding RandomizedSearchCV
&lt;/h3&gt;

&lt;p&gt;In contrast to &lt;code&gt;GridSearchCV&lt;/code&gt;, not all parameter values are tried out in &lt;code&gt;RandomizedSearchCV&lt;/code&gt;, but rather a fixed number of parameter settings is sampled from the specified distributions/ list of parameters.&lt;/p&gt;

&lt;p&gt;If some of the hyperparameters that we’re searching for are continuous, then we should specify the distribution rather than the list of values, while defining the parameter grid. How do we define the fixed number of parameter settings?&lt;/p&gt;

&lt;p&gt;The number of parameter settings that are tried is given by &lt;code&gt;n_iter&lt;/code&gt;. There's a quality vs computational cost trade-off in picking &lt;code&gt;n_iter&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A very small value of &lt;code&gt;n_iter&lt;/code&gt; would imply that we’re more likely to find a suboptimal solution, because we are actually considering too few combinations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A very high value of n_iter would mean we can ideally get closer to finding the best hyperparameters that yield the best model, but this again comes with a high computation cost as before. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In fact, if we set &lt;code&gt;n_iter= n1*n2*n3*…*n_M&lt;/code&gt; from the previous example, then, we’re essentially considering all possible hyperparameter combinations and now Randomized Search and Grid Search are equivalent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us build on the same example of KNNClassifier from the previous section.&lt;/p&gt;

&lt;p&gt;Let us search for the optimal weighting strategy and &lt;code&gt;n_neighbors&lt;/code&gt;. And now, let us implement Randomized Search in scikit-learn and do the following steps, as we did for Grid Search.&lt;br&gt;
&lt;strong&gt;1. Import RandomizedSearchCV class&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Define the parameter grid&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# specify "parameter distributions" rather than a "parameter grid"
&lt;/span&gt;&lt;span class="n"&gt;param_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_neighbors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;weight_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Instantiate the grid; Set n_iter=10, Fit the grid &amp;amp; View the results&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# n_iter controls the number of searches
&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cv_results_&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="s"&gt;'mean_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'std_test_score'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'params'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;#DataFrame
&lt;/span&gt;
&lt;span class="n"&gt;mean_test_score&lt;/span&gt; &lt;span class="n"&gt;std_test_score&lt;/span&gt;  &lt;span class="n"&gt;params&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.033333&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mf"&gt;0.980000&lt;/span&gt;    &lt;span class="mf"&gt;0.030551&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mf"&gt;0.953333&lt;/span&gt;    &lt;span class="mf"&gt;0.042687&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mf"&gt;0.966667&lt;/span&gt;    &lt;span class="mf"&gt;0.044721&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.044222&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.044222&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'distance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mf"&gt;0.973333&lt;/span&gt;    &lt;span class="mf"&gt;0.032660&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Examine the best score and best hyperparameters&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# examine the best model
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_params_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="mf"&gt;0.9800000000000001&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'weights'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'uniform'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'n_neighbors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters of the best model&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Surprisingly, we see that the highest accuracy score obtained in this case, where we only looked at 10 different parameter settings instead of 60 in Grid Search, is the same as before: 0.98 ✔&lt;/li&gt;
&lt;li&gt;And the value for n_neighbors= 18, which is also one of the optimal values that we got when we initially searched for the optimal value of n_neighbors. (Recall from the earlier blog post with the same example)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe we just got lucky?&lt;br&gt;
What is the guarantee that we will always get the best results?&lt;br&gt;
Ah, this question makes perfect sense, doesn’t it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us do the following now: Let us run &lt;code&gt;RandomizedSearchCV&lt;/code&gt; for multiple times and see how many times we really end up getting lucky!&lt;/p&gt;

&lt;p&gt;➡️Run RandomizedSearchCV 20 times and see what happens; We log the best_score_ for every run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# run RandomizedSearchCV 20 times (with n_iter=10) and record the best score
&lt;/span&gt;&lt;span class="n"&gt;best_scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomizedSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;knn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_train_score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;best_scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best_score_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Let&lt;/span&gt; &lt;span class="n"&gt;us&lt;/span&gt; &lt;span class="n"&gt;examine&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output: Best Scores
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.973&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon examining the best scores above for all the 20 runs, we see that we get the best accuracy score of 0.98 about 13 times.&lt;br&gt;
Looks like we’re lucky indeed! What about the other 7 times when we didn't quite get the best accuracy score? These accuracy scores are around 0.973 which is pretty close to 0.98.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This observation convinces us that even though Randomized Search may not always give the hyperparameters of the best performing model, the models obtained by using these hyperparameters do not perform much worse compared to the best model obtained from Grid Search. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means, the best models thus obtained, with the hyperparameters from randomized search are clearly very close to the optimal model.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In essence, these may not be the best hyperparameters, but certainly close to the best hyperparameters, except that these are found under resource-constrained settings. Hope you all understood how we could use Randomized Search for hyperparameter tuning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope you all enjoyed reading this post.😀&lt;/p&gt;

&lt;p&gt;Happy Learning! Until next time!✨&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1]&lt;a href="https://courses.dataschool.io/courses/introduction-to-machine-learning-with-scikit-learn"&gt;https://courses.dataschool.io/courses/introduction-to-machine-learning-with-scikit-learn&lt;/a&gt;&lt;br&gt;
[2]&lt;a href="http://scikitlearn.org/stable/modules/cross_validation.html"&gt;http://scikitlearn.org/stable/modules/cross_validation.html&lt;/a&gt;&lt;br&gt;
[3]&lt;a href="http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html"&gt;http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html&lt;/a&gt;&lt;br&gt;
[4]&lt;a href="http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html"&gt;http://scikitlearn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Image: Photo by &lt;a href="https://unsplash.com/@rosssneddon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ross Sneddon&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This post is a comprehensive post for understanding model evaluation, and hyperparameter search. This is a compiled, and improved version of a few of my earlier shorter posts.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Shop by Brand Extension for Magento 2
</title>
      <author>Mehul Patel</author>
      <pubDate>Tue, 24 Aug 2021 11:10:51 +0000</pubDate>
      <link>https://dev.to/dolphinwebsolution/shop-by-brand-extension-for-magento-2-5hb5</link>
      <guid>https://dev.to/dolphinwebsolution/shop-by-brand-extension-for-magento-2-5hb5</guid>
      <description>&lt;p&gt;Allows your customers in their desire to navigate the store in search of the favourite brands. Create customised pages, slider, A-Z alphabetical listing, and more features.&lt;/p&gt;

&lt;p&gt;Display brands separately as the main menu item.&lt;br&gt;
Sort and arrange the brands in an Asc/Desc manner.&lt;br&gt;
Layered navigation on brand-specific product listing pages.&lt;br&gt;
Display featured brand slider on any page using custom widget.&lt;br&gt;
Upload a custom logo for the brand.&lt;br&gt;
Display brands as sliders.&lt;br&gt;
Alphabetical listing of brands.&lt;br&gt;
Search Filters &amp;amp; Alphabetical order display.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  OVERVIEW
&lt;/h2&gt;

&lt;p&gt;It is proven that nine-in-ten online searchers stick to the store brands. Additionally, customers always stick to a single brand.&lt;br&gt;
In a multi-brand store, shoppers expect to have a possibility to shop by brands.&lt;/p&gt;

&lt;p&gt;Shoppers become emotionally attached to brands very quickly. Especially when the products they once found attractive and suitable confirm their quality regularly. Thus, the first thing they often do when they reach online stores is to browse by their favorite brand. Apparently, it is better not to stand in the customers' way when they are rushing to their favorite brands. with &lt;a href="https://dolphinwebsolution.com/shop/shop-by-brand-for-magento.html"&gt;Magento 2 Shop by Brand extension&lt;/a&gt;, you can make the brand-to-customer connection a lot easier and well-directed.&lt;/p&gt;

&lt;p&gt;Shop by Brand Magento 2 extension creates a separate searching tool for your shoppers to freely investigate each brand on your website. All brands will be gathered on one page to let your visitors choose from. After clicking any of the brand the category page will be open and product related to that brand will be listed there. Moreover, each brand will have its own space which contains the description, logo, and products. It is obvious that your shoppers now can shop with ease when being able to filter items by brands. Another important point of this extension is that if admin wants to display featured brand slider then he can do that simply by adding custom widget from the backend. Admin can create as many brands as they want, edit brand details (name, description, and image), filterable by brand, and easily customize the product page and product list page. Admin can also set the Meta details for the brand page. Customers will easily be able to sort brands by alphabetical names and also in Asc and Desc order.&lt;/p&gt;

&lt;p&gt;For more detail click Here: &lt;a href="https://dolphinwebsolution.com/shop/shop-by-brand-for-magento.html"&gt;Shop by brand Extension&lt;/a&gt;&lt;/p&gt;

</description>
      <category>magento2extension</category>
    </item>
    <item>
      <title>HighlightJS - How to show some code safely?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 24 Aug 2021 11:06:36 +0000</pubDate>
      <link>https://dev.to/adaendra/highlightjs-how-to-show-some-code-safely-3j0d</link>
      <guid>https://dev.to/adaendra/highlightjs-how-to-show-some-code-safely-3j0d</guid>
      <description>&lt;p&gt;In our job, it can be really useful to expose a bloc of code without execute it. Generally, we can use Markdown or some Wiki to do it. But sometimes, we want to use it on a website.&lt;/p&gt;

&lt;p&gt;And in this case, &lt;strong&gt;HighlightJS&lt;/strong&gt; is our savior!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-highlightjs"&gt;
  &lt;/a&gt;
  What is HighlightJS?
&lt;/h2&gt;

&lt;p&gt;It's a JavaScript syntax highlighter with language auto-detection and zero dependencies.&lt;/p&gt;

&lt;p&gt;And currently &lt;strong&gt;192 languages&lt;/strong&gt; and &lt;strong&gt;242 styles&lt;/strong&gt; are implemented!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Tibixx/embed/NLpNar?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;Once you've installed it &lt;em&gt;(with NodeJS or basic JavaScript import)&lt;/em&gt;, put some &lt;strong&gt;pre/code&lt;/strong&gt; &lt;em&gt;(Example just below)&lt;/em&gt; blocks with our code to show and that's it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Otherwise, you can define which language to highlight&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"language-html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or add a class to ignore some blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nohighlight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Their &lt;a href="https://highlightjs.org/usage/"&gt;documentation&lt;/a&gt; is quite complete, so go check it if you want more informations!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HighlightJS website : &lt;a href="https://highlightjs.org/"&gt;https://highlightjs.org/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you ! 🍺&lt;/p&gt;

</description>
      <category>ui</category>
      <category>html</category>
    </item>
    <item>
      <title>Should I use Twitter as a Dev? Tell me about your Twitter experiences..</title>
      <author>Rob OLeary</author>
      <pubDate>Tue, 24 Aug 2021 10:59:39 +0000</pubDate>
      <link>https://dev.to/robole/should-i-use-twitter-as-a-dev-i-have-never-have-tell-me-about-your-twitter-experiences-2pld</link>
      <guid>https://dev.to/robole/should-i-use-twitter-as-a-dev-i-have-never-have-tell-me-about-your-twitter-experiences-2pld</guid>
      <description>&lt;p&gt;I have never used Twitter. From time to time, I see people talk about Dev Twitter, and occasionally a story leads me to read a Twitter thread (as a visitor killing the popups to get to the content). &lt;/p&gt;

&lt;p&gt;The pandemic did make me consider starting a Twitter account, because the opportunities for doing things in real life were more limited, but I resisted so far. &lt;/p&gt;

&lt;p&gt;What I would like to know from you, as a Dev on Twitter, have you benefitted from using Twitter? &lt;/p&gt;




&lt;p&gt;Cover Image - loud white birds By Arnoudt, BE on noun project&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Amazon Aurora MySQL Database Administrator’s Handbook</title>
      <author>Ebrahim Gomaa</author>
      <pubDate>Tue, 24 Aug 2021 10:37:46 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/amazon-aurora-mysql-database-administrator-s-handbook-146d</link>
      <guid>https://dev.to/awsmenacommunity/amazon-aurora-mysql-database-administrator-s-handbook-146d</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Aurora MySQL is a managed relational DB engine compatible with MySQL 5.6 &amp;amp; 5.7. You can still use the drivers, connectors and tools you used to with MySQL with (almost) no charge. Aurora MySQL DB clusters provides features like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One primary Read/Write (RW) instance, 15 replicas of Read-only (RO) instances&lt;/li&gt;
&lt;li&gt;Any RO instance can be promoted to RW in case of failure of the primary instance&lt;/li&gt;
&lt;li&gt;Dynamic cluster endpoint (i.e. URI or address) always pointing to the primary instance even in case of failover&lt;/li&gt;
&lt;li&gt;Reader endpoint including all RO Replicas, updates when replicas are added or removed&lt;/li&gt;
&lt;li&gt;Admin can create custom DNS endpoints containing his own configuration of DB instances within a single cluster&lt;/li&gt;
&lt;li&gt;Improved scalability using internal connection pools and thread multiplexing for each server&lt;/li&gt;
&lt;li&gt;Almost zero-down-time DB restart/recovery&lt;/li&gt;
&lt;li&gt;Almost Real-Time metadata accessible by application developers enabling them to create smart drivers and connect directly to the instances based on their roles (RW - RO)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But to get the most out of these perks, DBAs need to learn the best practices, because any sub-optimal configuration for applications, drivers, connector or proxies can lead to unexpected downtime and performance issues. And you can consider this article &lt;em&gt;The Aurora MySQL configuration best practices Cookbook.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dns-endpoints"&gt;
  &lt;/a&gt;
  DNS Endpoints
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFtQrIo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/images/AuroraArch001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFtQrIo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/images/AuroraArch001.png" alt="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/images/AuroraArch001.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/images/AuroraArch001.png"&gt;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/images/AuroraArch001.png&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see from the diagram above, Aurora DB has some &lt;em&gt;Compute&lt;/em&gt; instances connected to a Multi-tenant (can serve many clusters), Multi-attach (can have multiple instances attached to it) &lt;em&gt;Storage&lt;/em&gt; volume. The compute instances are one primary RW instance (M) and up to 15 RO replicas (R) - per cluster. RO instances can take over the RW instance in case of failure.&lt;/p&gt;

&lt;p&gt;But how to connect to these instances in an optimum way ? Here, Aurora supports 4 types of DNS endpoint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cluster Endpoint&lt;/strong&gt; : Following the Primary Instance even in case of failover&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reader Endpoint&lt;/strong&gt; : Include all RO instances under a single DNS CNAME, so can be used for Round-robin Load Balancing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instance Endpoints :&lt;/strong&gt; Connect directly to some instance (RW or RO)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom Endpoints :&lt;/strong&gt; User-defined DNS endpoints containing a selected group on instance within a single cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any of the 4 types where you see suitable to reach the optimum configuration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connection-handling-in-aurora-mysql-and-mysql"&gt;
  &lt;/a&gt;
  Connection Handling in Aurora MySQL and MySQL
&lt;/h3&gt;

&lt;p&gt;MySQL Community Edition dedicated one OS thread from the &lt;code&gt;mysqld&lt;/code&gt; process for each connection (one-thread-per-connection). This leads to many scalability issues (in case of large number of user connections) like high memory usage even if some connections are idle, also the huge context-switching overhead between multiple threads.&lt;/p&gt;

&lt;p&gt;As a solution, Aurora MySQL supports a thread pool approach (group of threads ready for any connection on-demand usage). Those threads are never dedicated to any single connection usage. Threads are multiplexed, that is, when a thread is being used by a connection and it's not actively executing (e.g. waiting for IO), the thread can switch to another connection to do useful work; thus gaining best utilization and serving many connections with just a few threads. The thread pool also scales up and down automatically according to usage, no manual configuration required.&lt;/p&gt;

&lt;p&gt;Although thread pooling reduces server-side cost of maintaining connections, it comes with the limitation of setting up and terminating the connections, especially when this connection has session-level configuration (like &lt;code&gt;SET variable_name = value&lt;/code&gt; ). This process involves an exchange of several network packets. For busy workloads with short-lived connections (like Online Transaction Processing), consider using an application-side connection pool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-misconceptions"&gt;
  &lt;/a&gt;
  Common Misconceptions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;❌ &lt;strong&gt;No need for application-side connection pool when a server-side connection pool is used&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned before, server-side pooling has the limitation that it doesn't eliminate the overhead of setting up and terminating the connection. So if your application is doing very frequent opening/closing connections, and few statements are executed per connection; then you need application-side pooling. Even if your connections are long-lived, you may benefit from app-side pooling to avoid large bursts of new connection attempts i.e. connection surges. You can use &lt;code&gt;tcpdump&lt;/code&gt; tool to monitor your connection and compare overhead packets versus useful processing packets to help you take the decision.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;❌ &lt;strong&gt;Idle connections don't use memory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Incorrect! Both OS and database processes allocate in-memory descriptors for each connection. Although Aurora MySQL typically uses less memory than MySQL CE, this overhead in Aurora MySQL is non-zero. So basically, avoid opening too more connection inn your app-side pool than you need.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;❌ &lt;strong&gt;Downtime depends entirely on DB stability and features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Incorrect! Your app design and configuration also matters. For this, read the next section to know how your practices can help user traffic recover faster following a DB event.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using Smart Drivers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although Aurora MySQL &lt;em&gt;Cluster&lt;/em&gt; and &lt;em&gt;Reader&lt;/em&gt; endpoints abstracts (hides) the topology of the cluster, taking the topology into account while designing your connector helps greatly in eliminating delays occur because of DNS updates. For this reason, Aurora MySQL provides a near-real-time Metadata table ( &lt;code&gt;INFORMATION_SCHEMA.REPLICA_HOST_STATUS&lt;/code&gt; ) carrying information about the instances in the cluster and their roles and can be queried from any instance in the cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IU6RQvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o40kasvij2k2v4575c8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IU6RQvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o40kasvij2k2v4575c8y.png" alt="replica_host_status table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Example query against the metadata table. Source : the original paper&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Smart drivers&lt;/em&gt;  are drivers/connector that utilize this table to improve queries, not only depending on high-level DNS endpoint, also round-robin load-balancing read-only connections to the reader instances. Example for this is The MariaDB Connector/J for Java.&lt;/p&gt;

&lt;p&gt;Note that using the smart connector doesn't compensate for the rest of best practices, you still need to manage some other stuff - following in the article - to reach to the optimal connection. Also note that theses connector that has Aurora-specific features may not be officially verified by AWS and needs to be up-to-date as they encounter much more updates than the barebones connectors. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DNS Caching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule of thumb: DNS Caching TTL of Aurora endpoints is 5 seconds.&lt;/strong&gt; Your configuration should NEVER further exceed this limit. Caching may occur on network layer, the OS or your application, so make sure all caching layers will not exceed the TTL limit.&lt;br&gt;
Exceeding the TTL limit means having outdated DNS data, which may lead to reaching to a demoted primary instance as if it is still the primary instance, connection failure to the reader instances after scaling up/down due to usage of old IPs or unequal utilization of traffic among reader instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Connection management and pooling&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always keep the connections closed and don't rely on the development language/framework to close them automatically as there may be scenarios where this is not the case.&lt;/li&gt;
&lt;li&gt;If you can't rely on client-interactive applications to close idle connection use &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout"&gt;&lt;code&gt;interactive_timeout&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout"&gt;&lt;code&gt;wait_timeout&lt;/code&gt;&lt;/a&gt; MySQL variables to keep idle connection wait time suitable.&lt;/li&gt;
&lt;li&gt;As mentioned before, use connection pooling to protect your DB against surges, also if you make thousands of short-lived connections per second. If your framework doesn't support connection pooling, mind using connection proxies like ProxySQL.&lt;/li&gt;
&lt;li&gt;Best practices with managing connection pools and proxies :

&lt;ul&gt;
&lt;li&gt;Check the health of the borrowed connection before using. This can be as easy as &lt;code&gt;SELECT 1&lt;/code&gt; or show the value of &lt;code&gt;@innodb_read_only&lt;/code&gt; variables to further know the role of the Aurora instance you're communicating with - &lt;code&gt;true&lt;/code&gt; if it's a reader instance.&lt;/li&gt;
&lt;li&gt;Periodically health-check the connections&lt;/li&gt;
&lt;li&gt;Recycle ALL connections periodically by closing and reopening new ones. This helps save resources and prevent &lt;a href="https://stackoverflow.com/questions/587965/what-is-runaway-query"&gt;runaway queries&lt;/a&gt; and zombie connections (connection with abandoned clients).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Connection Scaling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scaling up, number of connections increases proportional to number of application server instances, given that you dedicated a fixed number of connections per server. This may limit DB scalability in some extreme cases, as most of the connections are typically idle, yet taking up server resources.&lt;/p&gt;

&lt;p&gt;To solve this case you may reduce number of connections per server to the minimum applicable, although this solution doesn't scale well as your app grows up. A much better solution is to use proxy between the application servers and the DB. It comes with many features out of the box, like configurable fixed number of connections, query caching, connection buffering and load balancing. Proxies like ProxySQL, ScaleArc and MaxScale are compatible with MySQL protocol. For further scalability and availability you may use multiple proxy instances behind the same DNS endpoint.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Transaction Management and Autocommit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Autocommit mode ensures that every statement runs in its own transaction which is commited automatically. This mode is recommended because disabling this mode means that the transaction is open and may stay open for long, blocking garbage collection mechanism and filling the garbage collection backlog, leading to excessive storage consumption and query slowness.&lt;/p&gt;

&lt;p&gt;It's recommended to always use the autocommit mode and double-check it's enabled in the applications and the DB sides, especially at the applications as it may not be enabled by default. You should also manage transactions manually using &lt;code&gt;START/BEGIN TRANSACTION&lt;/code&gt; and &lt;code&gt;COMMIT/ROLLBACK&lt;/code&gt; as soon as you finish. These recommendations apply whenever you're using innoDB.&lt;/p&gt;

&lt;p&gt;Also you can monitor transaction time using &lt;code&gt;information_schema.innodb_trx&lt;/code&gt; table. &lt;code&gt;trx_started&lt;/code&gt; is the starting time of the transaction so you can use it to calculate its age and investigate it if age is in the order of minutes.&lt;/p&gt;

&lt;p&gt;For garbage collection backlog monitoring, use &lt;code&gt;trx_rseg_history_len&lt;/code&gt; counter in the &lt;code&gt;information_schema.innodb_metrics&lt;/code&gt; table. If in the order of ten thousands, g.c. is delayed. If millions, the situation is dangerous and needs investigate.&lt;/p&gt;

&lt;p&gt;Note that garbage collection in Aurora is cluster-wide, meaning that any performance issue will affect all the instances, so you need to monitor all the instances.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Connection Handshakes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Usually opening a new DB session involve executing many set up statements, like setting up session variables, which affects greatly the applications sensitive to latency. You should be aware of internal operations of the driver using Aurora Advanced Audit, General Query Log or network-level packet trace using &lt;code&gt;tcpdump&lt;/code&gt;. You know the purpose of each statement and its effect on subsequent queries. If you find that number of roundtrips taken for handshake operations are significant relative to actual work, consider disabling some handshake statements or using connection pooling.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Load Balancing with the Reader Endpoint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DNS resolution of Reader endpoint is load balanced in round robin fashion for every new connection, this means that for the same connection, all the queries are executed against the same instance. This may lead to unequal usage of Read Replicas, long initial delay for newly added instances and applications keep sending traffic to stopped instances in case of DNS caching. Be sure to use DNS caching best practices mentioned before.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Designing for Fault Tolerance and Quick Recovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you scale your application up, you're more likely to add more instances (db, application, ...) also to face more issues. You should design your application to be resilient in facing these situations. You should keep your application up-to-date with the failover of Aurora primary instances (occurs within 30 seconds after the failure). You should also keep up to date with the new Reader instances created to start sending traffic to them, as well as the removed instances to stop sending traffic to them. Not following best practices may lead to longer downtime.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Server Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Variable &lt;code&gt;max_connections&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This variable limits number of connections per Aurora DB instance. The best practice is to keep this slightly higher than what you expect to open, but beware if you're using &lt;code&gt;performance_schema&lt;/code&gt; as its memory usage increases proportional to the value of this variable, s it may lead to OOM isues on smaller instances, like T2 and T3 instances with less than 8GB memory. In this case you may need to disable &lt;code&gt;performance_schema&lt;/code&gt; or keep &lt;code&gt;max_connections&lt;/code&gt; to the default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Variable &lt;code&gt;max_connect_errors&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This variable controls number of successive failed connection requests for a given client host. The client is shown the following error on exceeding this limit&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Host &lt;span class="s1"&gt;'*host_name*'&lt;/span&gt; is blocked because of many connection 
errors ...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;A common incorrect practice is keeping this variable very high to avoid client connectivity issues. However, this is dangerous as it may hide serious issues with the applications that needs developer action, or even worse, DDoS attacks trying to take down the system.&lt;/p&gt;

&lt;p&gt;If your client application is facing the "host is blocked" problem, use &lt;code&gt;aborted_connects&lt;/code&gt; diagnostic counters along with &lt;code&gt;host_cache&lt;/code&gt; table to &lt;strong&gt;identify and fix the problem&lt;/strong&gt; &lt;strong&gt;in your application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note that this variable has no effect if &lt;code&gt;skip_name_resolve&lt;/code&gt; is set to 1 (default).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Aurora is really great ❤️, however, you still need to apply best practices to ensure smooth integration, reduced downtime and scalability. This article will help you apply these best practices with little to no engineering effort.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>devops</category>
    </item>
    <item>
      <title>Develop Crypto Payment Gateway</title>
      <author>Stephen Hardy</author>
      <pubDate>Tue, 24 Aug 2021 10:37:16 +0000</pubDate>
      <link>https://dev.to/stephen_hardy98/develop-crypto-payment-gateway-1ap6</link>
      <guid>https://dev.to/stephen_hardy98/develop-crypto-payment-gateway-1ap6</guid>
      <description>&lt;p&gt;Bitcoin and Ethereum continue to be the most used digital currencies for processing payments. The circulating supply of Bitcoin is 43.5% and Ethereum 18.5% respectively. According to Statista, the number of Ethereum and Bitcoin payments in July 2021 was 1.1 million and 250,000 respectively. &lt;/p&gt;

&lt;p&gt;Are you that entrepreneur who wishes to do everything fast? The business of cryptocurrency transaction processing is apt for you. Bitcoin, the world’s most valuable digital currency, witnessed a speed of 9000 transactions per second on its Scaling Test Network (STN) in January 2021. Hence, aspiring techpreneurs can take the big step now and commence customized Crypto payment gateway development. &lt;/p&gt;

&lt;p&gt;Source:&amp;gt;&amp;gt;&amp;gt; &lt;a href="https://www.appdupe.com/blog/cryptocurrency-payment-gateway-development/"&gt;Cryptocurrency Payment Gateway Development - A Detailed Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>bitcoinpayment</category>
    </item>
  </channel>
</rss>
