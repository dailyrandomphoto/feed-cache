<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vocabulary Building</title>
      <author>vindhya Hegde </author>
      <pubDate>Thu, 16 Sep 2021 01:51:31 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-5eko</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-5eko</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;glut&lt;/strong&gt;(noun): an excessive supply&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=glut&amp;amp;oq=glut&amp;amp;aqs=chrome..69i57j0i67i433j0i67j0i67i433l2j69i60l2j69i61.1621j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fortuitous&lt;/strong&gt;(adjective): happening by a lucky chance; fortunate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=fortuitous&amp;amp;oq=fortuitous&amp;amp;aqs=chrome..69i57j0i433i512j0i131i433i512j0i512l7.12059j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;superfluous&lt;/strong&gt;(adjective): unnecessary, especially through being more than enough.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=superfluous+meaning&amp;amp;oq=superfluous&amp;amp;aqs=chrome.0.0i433i512j69i57j0i512l8.8189j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;obscure&lt;/strong&gt;(verb): make unclear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=obscure&amp;amp;oq=obscure&amp;amp;aqs=chrome..69i57j46i275i433i512j0i20i263i433i512j0i20i263i512j0i433i512j0i512l3j0i433i512l2.3668j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mitigate&lt;/strong&gt;(verb): make (something bad) less severe, serious, or painful&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=mitigate&amp;amp;oq=mitigate&amp;amp;aqs=chrome.0.69i59j0i131i433i512j0i20i263i512j0i512l2j0i433i512l2j0i512l2j0i433i512.3656j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day15</category>
    </item>
    <item>
      <title>Intro to ViteJS</title>
      <author>Rene Rubalcava</author>
      <pubDate>Thu, 16 Sep 2021 00:14:00 +0000</pubDate>
      <link>https://dev.to/odoenet/intro-to-vitejs-54cp</link>
      <guid>https://dev.to/odoenet/intro-to-vitejs-54cp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#rambling"&gt;
  &lt;/a&gt;
  Rambling
&lt;/h2&gt;

&lt;p&gt;There used to be a time when I would write JavaScript in multiple files. They might look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// start.js&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// multiple js files of code&lt;/span&gt;

&lt;span class="c1"&gt;// end.js&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// use a makefile to join them together&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I would use a &lt;code&gt;make&lt;/code&gt; file to run a script that just concatenated all those files together. I didn't care much about minification or optimization. I don't think I was alone here, I'm pretty sure I got this idea from an article way back when. I do remember writing Ant scripts when the project was a mix of JavaScript and Flash, &lt;em&gt;that was fun&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the project was big enough, there were tools like &lt;a href="https://www.crockford.com/jsmin.html"&gt;jsmin&lt;/a&gt;. If the project warranted it, I would use &lt;a href="https://dojotoolkit.org/"&gt;Dojo Toolkit&lt;/a&gt;, which could probably make me a sandwich if I wanted it to.&lt;/p&gt;

&lt;p&gt;As a developer, no matter the language, build tools &lt;em&gt;just come with the territory&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-no-more-rambling"&gt;
  &lt;/a&gt;
  Ok, no more rambling
&lt;/h2&gt;

&lt;p&gt;My point in all this is that if you're not careful, build tools can get unweildy. This is where a tool like &lt;a href="https://vitejs.dev/"&gt;ViteJS&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Vite is like a breath of fresh air. It handles ES modules natively, meaning that builds are super fast, because it just builds ESM, especially dev builds! Out of the box, you don't even need a config file, &lt;em&gt;it just works&lt;/em&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnv6p9eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9FWP3uVIAMgv7x.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzqNKZyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/848265616645537792/LR5p0Mj0_normal.jpg" alt="Rene (Hecho En East Los) Rubalcava profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rene (Hecho En East Los) Rubalcava
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/odoenet"&gt;@odoenet&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      my vitejs config 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:34 PM - 18 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Under the hood, Vite uses &lt;a href="http://esbuild.github.io/"&gt;esbuild&lt;/a&gt;. For CSS, it can handle &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; if you add a config for it, or &lt;a href="https://github.com/css-modules/css-modules"&gt;css-modules&lt;/a&gt; if you add &lt;code&gt;.module.css&lt;/code&gt; files, or &lt;a href="https://sass-lang.com/"&gt;sass&lt;/a&gt;. It will also make liberal use of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta"&gt;&lt;code&gt;import.meta&lt;/code&gt;&lt;/a&gt; to add some sugar methods like &lt;a href="https://vitejs.dev/guide/features.html#glob-import"&gt;glob imports&lt;/a&gt; or adding environment variables. You can switch the build to use &lt;a href="https://terser.org/"&gt;terser&lt;/a&gt; and get a slightly smaller build, but it is a little slower. In my regular usage, I don't notice a huge difference, so I leave esbuild as default.&lt;/p&gt;

&lt;p&gt;It handles &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;wasm&lt;/code&gt; imports for you. Even &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;workers&lt;/a&gt; can be loaded via &lt;code&gt;import WorkIt from './workit?worker'&lt;/code&gt;. Just when you thought you could escape loader plugins, &lt;em&gt;they drag you back in!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But I have some complex workflows, I use &lt;code&gt;ejs&lt;/code&gt; templates, I need sprite sheet generation&lt;/em&gt;... I hear you. The great thing about Vite is that it uses &lt;a href="https://www.rollupjs.org/"&gt;rollup&lt;/a&gt;, so you can use rollup plugins if you want. It also has a suite of &lt;a href="https://github.com/vitejs/awesome-vite#plugins"&gt;vite plugins&lt;/a&gt; available. Just add them to your &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt; and you're good to go.&lt;/p&gt;

&lt;p&gt;Most projects I don't even need a config. It's insane.&lt;/p&gt;

&lt;p&gt;How to use it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest my-vite-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run that command, you'll be asked if you want a vanilla project or if you want react/preact/vue and even TypeScript. It's really that simple and makes me smile.&lt;/p&gt;

&lt;p&gt;Geez, I feel like this should be a longer blog post. But it really is that simple. Now, I wouldn't try converting your large webpack application to Vite. Don't get me wrong, webpack has a ton of plugins, loaders, community, and history.&lt;/p&gt;

&lt;p&gt;I should note, I have had some issues in building third-party css where I need to modify the url imports, like I can with the resolve-url-loader for webpack, but that has been the only very specific issue I've run into.&lt;/p&gt;

&lt;p&gt;Vite is another option, and one I think is great for new projects! In testing, I can get a smaller build with webpack, not much smaller, but smaller. So if squeezing every last kb out of your build is your goal, maybe webpack is your thing. You do you, and build awesome apps!&lt;/p&gt;

&lt;p&gt;You can check out more info in this video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sV1Tcie2SR8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vitejs</category>
    </item>
    <item>
      <title>Part 2: 5 COOL CSS PROPERTIES</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 15 Sep 2021 23:55:43 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl</link>
      <guid>https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, and this is part 2 of  &lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;5 cool CSS properties&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quotes"&gt;
  &lt;/a&gt;
  quotes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;quotes&lt;/strong&gt;: helps you to chose the quotation marks for a quote element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/eYRejbX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrollbehavior"&gt;
  &lt;/a&gt;
  scroll-behavior
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;scroll-behavior&lt;/strong&gt;:  specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.&lt;a href="https://www.w3schools.com/cssref/pr_scroll-behavior.asp"&gt;more info&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/bGRYmeb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userselect"&gt;
  &lt;/a&gt;
  user-select
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;user-select&lt;/strong&gt;: used to allow or deny the user to select content like a text, image...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/JjJOmNL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writingmode"&gt;
  &lt;/a&gt;
  writing-mode
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;writing-mode&lt;/strong&gt;: allows you to specify the writing mode (horizontal-tb, vertical-lr, vertical-rl)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/abwVRGY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#textoverflow"&gt;
  &lt;/a&gt;
  text-overflow
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;text-overflow&lt;/strong&gt;: defines the way that the overflowed content should be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/VwWrEqR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;scroll-behavior&lt;/strong&gt;:  specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;quotes&lt;/strong&gt;: helps you to chose the quotation marks for a quote element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;user-select&lt;/strong&gt;: used to allow or deny the user to select content like a text, image...&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;writing-mode&lt;/strong&gt;: allows you to specify the writing mode (horizontal-tb, vertical-lr, vertical-rl)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;text-overflow&lt;/strong&gt;: defines the way that the overflowed content should be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;https://www.w3schools.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>That moment when coding no longer feels scary</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Wed, 15 Sep 2021 23:36:17 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/that-moment-when-coding-no-longer-feels-scary-4ki4</link>
      <guid>https://dev.to/jasonleowsg/that-moment-when-coding-no-longer-feels-scary-4ki4</guid>
      <description>&lt;p&gt;Before starting, programming felt scary. And so confusing. I didn’t understand what the terms meant. It was complete gibberish to me. I took foreign language classes before (in French), but this is a whole different level. With French, there’s at least some scaffolding to start off as there’s some similarities to English. But with programming, all the symbols were hard to figure out. But now, after learning some HTML, CSS and JS basics on Udemy, it doesn’t feel so scary anymore.&lt;/p&gt;

&lt;p&gt;Why? Not because I mastered the language after just some online classes. Because after watching the videos of the instructor approaching the problem, writing the code and explaining blow-by-blow what and why each word is meant to do, I’m beginning to see that coding is done in bite-sized pieces. Programming is very much about breaking down an overall feature to very small and specific blocks of code, and building up the feature one block at a time, starting from a minimum viable block of code. Usually, each block is simple and easy to write. &lt;/p&gt;

&lt;p&gt;For example, as part of the Javascript class, I had to build a small Javascript game that tests your reaction time, by having you click on random coloured, random sized circles and squares appearing in the browser one after another, and each time you click it, you get a reading on your reaction time of how fast you managed to catch it. Sounds scary? It did for me in the beginning. But after breaking it down, it feels much more approachable. And it all starts with the &lt;strong&gt;Minimum Viable Interaction&lt;/strong&gt; (haha yes I’m coining it here - for my own purposes at least).&lt;/p&gt;

&lt;p&gt;So the MVI is basically to make a shape appear on the browser and click on it to get a timing. And that can be broken down even further:&lt;/p&gt;

&lt;p&gt;Need a shape to appear on your browser? Just create a shape first in HTML. Then write some JS to make it disappear when you click on it. Then add a new variable to start a timer when the page loads, and end the timer when the shape is clicked on. Then get the time taken and write some JS to display it out on the page. There! Already the first interaction of your game is done. You click on a shape and it shows the reaction time back. After this minimum viable block of code for the game, continue building on it to add more functions/interactions…&lt;/p&gt;

&lt;p&gt;This is probably child’s play to code veterans, but to be able to see the approach to coding this way, makes everything seem possible. As a maker/designer, that’s how we make products - by prototyping minimum viable products (MVPs) first, launching it to learn if it works for the users, then building on it after. Knowing that it’s pretty much the same way for coding really lowered my fear factor.&lt;/p&gt;

&lt;p&gt;This is something (most) online classes don’t really teach. They dive into the code and teach you the how very quickly - how it’s written, what tools you need, what the terms mean…but don’t teach you how to problem-solve in programming. I later learned this is called &lt;a href="https://en.wikipedia.org/wiki/Computational_thinking"&gt;computational thinking&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The characteristics that define computational thinking are decomposition, pattern recognition / data representation, generalization/abstraction, and algorithms.[7][8] By decomposing a problem, identifying the variables involved using data representation, and creating algorithms, a generic solution results. The generic solution is a generalization or abstraction that can be used to solve a multitude of variations of the initial problem.” - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isn’t that critical to explicitly teach too in basic beginner level courses? So that budding rookies like me don’t just develop the technical skill to coding, but also the problem-solving mindsets and thinking skills needed to sustain their journey? I’m sure there are some courses that do that…maybe just not the ones I come across in many of the coding MOOCs. &lt;/p&gt;

&lt;p&gt;So now I realised that I need to break things down and visualise my approach like Russian dolls, nesting more functionality upon another from just one super basic and simple starting block. &lt;/p&gt;

&lt;p&gt;I know I can do that basic block. And I know I can build another simple block on top of that. &lt;/p&gt;

&lt;p&gt;That realisation was really empowering.&lt;/p&gt;

&lt;p&gt;A pivotal moment since starting to learn how to code. &lt;/p&gt;

&lt;p&gt;A moment when coding no longer felt scary.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/jasonleow"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Product developers’ guide to getting started with AI — Part 1: Introduction to dataframes</title>
      <author>Mage</author>
      <pubDate>Wed, 15 Sep 2021 23:35:05 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-20pg</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-20pg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;When working with AI, it’s important to know how to import data sets, read through tables, and understand what the structure is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Downloading Prerequisites&lt;/li&gt;
&lt;li&gt;My first Dataframe&lt;/li&gt;
&lt;li&gt;Reading Metadata&lt;/li&gt;
&lt;li&gt;Viewing Data&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to the “Product developer’s guide to getting started with AI”. In this series, we’ll go over key concepts and run through examples using Pandas. First, we will cover setting up your development environment and learning how to inspect your data. Then, you’ll be ready to tackle the more exciting parts of AI throughout this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;For the most part, Google Collab has everything already installed except the dataset, skip to My First Dataframe. However, if you want to run it locally then follow the next step. We’ll be using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#downloading-prerequisites-optional"&gt;
  &lt;/a&gt;
  Downloading Prerequisites (Optional)
&lt;/h2&gt;

&lt;p&gt;When getting started with AI, 2 important libraries you’ll be using every day are Pandas and Numpy. Follow the link here for instructions to install Python, Pandas, NumPy, and access to Google Collab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-dataframe"&gt;
  &lt;/a&gt;
  My First Dataframe
&lt;/h2&gt;

&lt;p&gt;First, we’ll begin by going through how to upload files and download our first data set, the Titanic, hosted by the Pandas community on Github.&lt;br&gt;
Open up Google Collab and click on the new notebook button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-W4WXSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyaq7ziz6edb6isbtmae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-W4WXSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyaq7ziz6edb6isbtmae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Click on New notebook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll begin by importing titanic.csv to create your first dataframe. Go to the file tab, and click on the file with the arrow to upload from your computer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBVqNfQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyzw3pynpvgdidgm9s69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBVqNfQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyzw3pynpvgdidgm9s69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Click on the file with the arrow icon to import titanic.csv&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then import Pandas, Numpy, and use read_csv to extract our CSV data into a dataframe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdrUPmSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygya6y6pk8xme899voo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdrUPmSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygya6y6pk8xme899voo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;At the beginning, import the libraries and file via code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Type the name of the dataframe to view it. Here we call it df, so in the next cell we type df. To run the cell use Shift+Enter or click the run icon at the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MiZUc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul7x8cu0kmv18793bgy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MiZUc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul7x8cu0kmv18793bgy8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Display entire dataframe&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-metadata"&gt;
  &lt;/a&gt;
  Reading Metadata
&lt;/h2&gt;

&lt;p&gt;Unlike a table, a dataframe has some extra data behind the scenes, called metadata. Metadata is used to organize its structure and can be viewed in Pandas by using the describe, info, and columns method. Let’s say we wanted to know how many rows and columns contain non-empty values or how much storage the data takes up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-G7RMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3wj497qlqib36g1mvc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-G7RMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3wj497qlqib36g1mvc.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Info is a great method that product developers who have worked with SQL will find similar to the EXPLAIN command. It tells us valuable information about the storage space used, column information, number of rows, indices, and types. All while organizing it into an easy-to-read table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZDv7g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lwhtzz0ivaw8k6qhxui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZDv7g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lwhtzz0ivaw8k6qhxui.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Show all information about the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Describe is a method best used to summarize the numerical data by calculating a quick mathematical summary and displaying the count, mean, min, max, standard deviation, and percentiles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6oHiiWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3ogdcvtxnyfobcq4n0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6oHiiWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3ogdcvtxnyfobcq4n0u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Default output of describe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is by default equivalent to df.describe(include=[np.number])&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-mp79qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdhcpzfr49he46rfgjoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-mp79qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdhcpzfr49he46rfgjoa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe all numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By adding the object keyword, describe looks for the unique, top, and frequency of the data for object data, such as strings and timestamps instead. Here, it selects the columns that have a data type of object from the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eHrg43Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h29ecnkrv921dwm7b95p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eHrg43Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h29ecnkrv921dwm7b95p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe all objects&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Conversely, you may also use exclude instead of include to get the reverse outputs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5Tkgr0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4cdi33wew17uwoeysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5Tkgr0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4cdi33wew17uwoeysz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe everything that is not an object&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqVnYTg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rqp2hsx9hnvsrb2afw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqVnYTg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rqp2hsx9hnvsrb2afw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe everything that is not a number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, columns is an interesting method that is used to read metadata and select data. To get the metadata of a column, call it on a dataframe to get the index names.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rkLhGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rz3bipwg05o5nbjmizt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rkLhGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rz3bipwg05o5nbjmizt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Display all index names&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are two ways to select a column, using either the index position or index name. The index position can be found from the metadata of info on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_XUOb4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyj3vmme2v8tthdzg52s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_XUOb4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyj3vmme2v8tthdzg52s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Access by index position&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The index name can be found from the output of columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQHM_0Ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hchaocc3lygne2hix2pk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQHM_0Ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hchaocc3lygne2hix2pk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Access by index name&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-data"&gt;
  &lt;/a&gt;
  Viewing Data
&lt;/h2&gt;

&lt;p&gt;But most of the time, especially when working with AI, you’ll have very large datasets and it may not be feasible or necessary to display everything. Dataframes have other features to view parts of the data, by using the head, tail, loc, and iloc method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpmRps2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ffhwjnulzzac4vu0ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpmRps2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ffhwjnulzzac4vu0ox.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Time to use Python to chop down the data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look using indexing with the head or tail method.&lt;/p&gt;

&lt;p&gt;To view the data on the first 5 rows, we use head(5)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiyo3txN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y314f0ec1du3lqjafxg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiyo3txN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y314f0ec1du3lqjafxg5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Head refers to the start of the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then, to view the data for the last 5 rows, we use tail(5)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WgSY3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70bz237b4cc1na4ewac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WgSY3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70bz237b4cc1na4ewac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Tail refers to the end of the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can view multiple columns using loc, specifying the row index found on the left of the dataframe, along with the names of the columns to view. Since our row index is unlabeled, we use integers to quickly access them. The ‘:’ command is to set a range of values, to include everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjPxIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bizqrguv4fj4leqc8srg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjPxIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bizqrguv4fj4leqc8srg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;View each Name, Ticket, and Fare&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly to loc, you can also use the index position with the iloc command instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---S0QjOYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iert6efsd3fkeay3xkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---S0QjOYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iert6efsd3fkeay3xkz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Name, Ticket, and Fare are 3, 8, and 9 respectively&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-analysis"&gt;
  &lt;/a&gt;
  Data Analysis
&lt;/h2&gt;

&lt;p&gt;Combining what we’ve learned, let’s answer common data analysis questions about the Titanic dataset that data scientists and marketing ask themselves every day.&lt;/p&gt;

&lt;p&gt;How many people were aboard the Titanic when it sank?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From info, we see that 889 people embarked on the ship
How much did the average passenger pay?&lt;/li&gt;
&lt;li&gt;From describe, the mean fare was $32
What was the standard deviation or “std” between ticket prices?&lt;/li&gt;
&lt;li&gt;From describe, std of the fare is $50
What was the highest cost for a ticket?&lt;/li&gt;
&lt;li&gt;From describe, the max fare is $512
Who was the first person to pay for a ticket?&lt;/li&gt;
&lt;li&gt;Using the head on the name column, Mr. Owen Harris Braund
Who was the last person to pay for a ticket?&lt;/li&gt;
&lt;li&gt;Using the tail on the name column, Mr. Patrick Dooley
Who was the 100th person to purchase a ticket?&lt;/li&gt;
&lt;li&gt;Using iloc for row 99 of column[3], since position starts from 0, Mr. Sinai Kantor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That covers the info, describe, and columns functions for reading metadata and head, tail, loc, and iloc for viewing dataframes. Check back next week for our next guide, “Surfing through dataframes”, where we’ll be taking a look at how to search through our imported data by grouping, ordering, and rearranging the dataframe’s structure.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>pandasdataframe</category>
      <category>python</category>
      <category>deved</category>
    </item>
    <item>
      <title>How to build a React Video Modal with Hooks</title>
      <author>cesaruseche18</author>
      <pubDate>Wed, 15 Sep 2021 23:14:29 +0000</pubDate>
      <link>https://dev.to/cesareuseche/how-to-build-a-react-video-modal-with-hooks-4on4</link>
      <guid>https://dev.to/cesareuseche/how-to-build-a-react-video-modal-with-hooks-4on4</guid>
      <description>&lt;p&gt;I want to share with other Front End developers how to build a React Video modal from scratch.&lt;/p&gt;

&lt;p&gt;I hope everyone finds this small tutorial really helpful.&lt;/p&gt;

&lt;p&gt;I'm leaving the url of the working modal and code at the end of the tutorial if you want to test it and and check out the code &lt;/p&gt;

&lt;p&gt;First, we need to use the useState Hook to change the state of the modal once the user clicks the modal button and clicks the close modal button.&lt;/p&gt;

&lt;p&gt;Second, we will do the same to build a loader icon once the modal is open and waits to fetch the video from YouTube like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [modal, setModal] = useState(false);
  const [videoLoading, setVideoLoading] = useState(true);

  const openModal = () =&amp;gt; {
    setModal(!modal);
  };

  const spinner = () =&amp;gt; {
    setVideoLoading(!videoLoading);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, we will start working on the JSX part of the code setting up an onClick event to the button and using the ternary operator for the modal and the loader icon like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;button onClick={openModal} className=""&amp;gt;
        Click Me!
        {modal ? (
          &amp;lt;section className="modal__bg"&amp;gt;
            &amp;lt;div className="modal__align"&amp;gt;
              &amp;lt;div className="modal__content" modal={modal}&amp;gt;
                &amp;lt;IoCloseOutline
                  className="modal__close"
                  arial-label="Close modal"
                  onClick={setModal}
                /&amp;gt;
                &amp;lt;div className="modal__video-align"&amp;gt;
                  {videoLoading ? (
                    &amp;lt;div className="modal__spinner"&amp;gt;
                      &amp;lt;BiLoaderAlt
                        className="modal__spinner-style"
                        fadeIn="none"
                      /&amp;gt;
                    &amp;lt;/div&amp;gt;
                  ) : null}
                  &amp;lt;iframe
                    className="modal__video-style"
                    onLoad={spinner}
                    loading="lazy"
                    width="800"
                    height="500"
                    src="https://www.youtube.com/embed/4UZrsTqkcW4"
                    title="YouTube video player"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                  &amp;gt;&amp;lt;/iframe&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/section&amp;gt;
        ) : null}
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm leaving the url of the code if you also want to check out the CSS styles and also the live demo. &lt;/p&gt;

&lt;p&gt;Code: &lt;a href="https://codesandbox.io/s/nkwxb?file=/src/App.js:423-1898"&gt;https://codesandbox.io/s/nkwxb?file=/src/App.js:423-1898&lt;/a&gt;&lt;br&gt;
Live Demo: &lt;a href="https://nkwxb.csb.app/"&gt;https://nkwxb.csb.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope I'm able to help anyone that wants to build a React Modal Video from scratch without using any library. &lt;/p&gt;

&lt;p&gt;Follow me on Github &amp;amp; Connect with me on LinkedIn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cesareuseche"&gt;https://github.com/cesareuseche&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/cesar-useche-profile/"&gt;https://www.linkedin.com/in/cesar-useche-profile/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 COOL CSS PROPERTIES ! (part 1)</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 15 Sep 2021 22:58:54 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg</link>
      <guid>https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, and this is part 1 of some cool CSS properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2 of some cool CSS properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#caretcolor"&gt;
  &lt;/a&gt;
  caret-color
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;caret-color&lt;/strong&gt;: used to change the cursor of editable elements like input fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/ZEyaRpL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clippath"&gt;
  &lt;/a&gt;
  clip-path
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;clip-path&lt;/strong&gt;: used to hide a specific area of an element and build complex shapes like the octagon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/eYReKLe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;website will help you to build complex shapes using clip-path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-about-clippath"&gt;
  &lt;/a&gt;
  resources to learn about clip-path
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/almanac/properties/c/clip-path/"&gt;css-tricks (article)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;designCourse (youtube video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;content&lt;/strong&gt;: used with :before &amp;amp; :after for adding a generated content w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/ZEyajYx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/css-content/"&gt;more info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pointerevents"&gt;
  &lt;/a&gt;
  pointer-events
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pointer-events&lt;/strong&gt;: specify that the user could react to pointer events or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/QWgOBpq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resize"&gt;
  &lt;/a&gt;
  resize
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;resize&lt;/strong&gt;: specify if an element is resizable or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/gORXdeK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;clip-path&lt;/strong&gt;: used to hide a specific area of an element and build complex shapes like the octagon.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;resize&lt;/strong&gt;: specify if an element is resizable or not.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;pointer-events&lt;/strong&gt;: specify that the user could react to pointer events or not.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;content&lt;/strong&gt;: used with :before &amp;amp; :after for adding a generated content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;caret-color&lt;/strong&gt;: used to change the cursor of editable elements like input fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;https://www.w3schools.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2 of some cool CSS properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>6 MORE Things I Learned Building Snowpack to 20,000 Stars</title>
      <author>Fred K. Schott</author>
      <pubDate>Wed, 15 Sep 2021 22:58:01 +0000</pubDate>
      <link>https://dev.to/fredkschott/5-more-things-i-learned-building-snowpack-to-20-000-stars-5dc9</link>
      <guid>https://dev.to/fredkschott/5-more-things-i-learned-building-snowpack-to-20-000-stars-5dc9</guid>
      <description>&lt;p&gt;This article is the second entry in a two-part series. &lt;a href="https://dev.to/fredkschott/5-things-i-learned-while-building-snowpack-to-20-000-stars-b9d"&gt;In the first post&lt;/a&gt;, I went over the early history of Snowpack and how we grew an open source project to find our first set of users. In this post, I want to focus on what happened next: how do you maintain and continue to grow a large project at this scale?&lt;/p&gt;

&lt;p&gt;This will be an entertaining read for anyone interested in open source software. The highlighted lessons are for current (or aspiring!) open source maintainers of large and/or growing open source projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;If the first post in this series was about everything that I did right with Snowpack, then this post is about everything that went wrong.&lt;/p&gt;

&lt;p&gt;We came into the year with big expectations: Voted &lt;a href="https://osawards.com/javascript/2020"&gt;"Productivity Booster of the Year"&lt;/a&gt; in the OS Awards. Voted #1 &amp;amp; #2 placement in the &lt;a href="https://2020.stateofjs.com/en-US/technologies/build-tools/"&gt;"2020 State of JavaScript"&lt;/a&gt; survey on build tools. Exploding from 200,000 downloads in 2020 to 1.3M in 2021.&lt;/p&gt;

&lt;p&gt;When you do something like this for the first time, you're never going to get it 100% right. This was my first experience maintaining an open source project of this scale. I had started plenty of new repos in the past, and some of them were even well liked, but none had ever grown this big. We didn't have a roadmap for this transition, and I made plenty of mistakes that I now see in hindsight.&lt;/p&gt;

&lt;p&gt;I want to make it clear that I'm incredibly proud of this project and &lt;a href="https://github.com/snowpackjs/snowpack/graphs/contributors"&gt;the people&lt;/a&gt; who have contributed to it. Snowpack pushed the entire web development industry forward, and that's pretty cool. Even if you never use Snowpack directly, the work that we pioneered -- specifically around npm package handling for ESM and unbundled development --  is being built on and improved on across the entire web tooling landscape in projects like &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;, &lt;a href="https://www.skypack.dev/"&gt;Skypack&lt;/a&gt;, &lt;a href="https://jspm.org/"&gt;JSPM CDN&lt;/a&gt; and others.&lt;/p&gt;

&lt;p&gt;This post is my attempt to create a guide for anyone who finds themselves in a similar position one day.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-1-dogfood-large-realworld-projects"&gt;
  &lt;/a&gt;
  Lesson 1: Dogfood large, real-world projects
&lt;/h2&gt;

&lt;p&gt;Real-world testing is &lt;em&gt;super&lt;/em&gt; important. I'm sure that sounds cliche, but its true. We had a few starter projects that we could test Snowpack against, but they were all small and simple. This created a huge experience gap between our internal projects and our actual users.&lt;/p&gt;

&lt;p&gt;People tend to think of &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food"&gt;"dogfooding"&lt;/a&gt; as a way to prevent bugs, but I've found it to be most useful as a way to align with your users. It's impossible to make good decisions about something that you don't know well. Without some kind of real-world dogfooding, you often end up prioritizing the wrong features and fixes.&lt;/p&gt;

&lt;p&gt;This is unfortunately one thing that large-scale corporate open source does well. Facebook is able to test a new React feature or bugfix across a codebase of &lt;a href="https://github.com/facebook/react/issues/9463#issuecomment-295643228"&gt;30,000+ components.&lt;/a&gt; They can try things out internally, at scale, before sharing publicly.&lt;/p&gt;

&lt;p&gt;If your project isn't owned by a tech giant, you still have options. If you work somewhere full-time, try to dogfood things within your company. Rich Harris often talks about how &lt;a href="https://twitter.com/rich_harris/status/1329257941510320130"&gt;using Svelte at The New York Times&lt;/a&gt; benefits the framework. Your company could be a real-world playground for new features, API changes, and even &lt;a href="https://twitter.com/Rich_Harris/status/1354491322720268290"&gt;entire pre-release projects.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Snowpack never had a company playground. Yet, we still could have been better about talking to our users and getting feedback before working on features. In retrospect I would have sought out invites to real-world codebases in exchange for some testing and support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; Dogfood large projects to prevent bugs and useless feature work.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-2-painless-developer-experience-is-essential"&gt;
  &lt;/a&gt;
  Lesson 2: Painless developer experience is essential
&lt;/h2&gt;

&lt;p&gt;In the early days of a project, you'll be forgiven for a few bugs and odd behaviors. As your project matures, this patience tends to run out. The real problem doesn't have to be a single big bug, but the sum of multiple "poor" user experiences.&lt;/p&gt;

&lt;p&gt;For example, you should &lt;strong&gt;always&lt;/strong&gt; have a clear error message when something breaks. Yes, even if you think that it was the user's fault:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBJgbC3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blxbd1imgyvmaph98gpq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBJgbC3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blxbd1imgyvmaph98gpq.gif" alt="a funny gif of a person failing to do a simple task like drinking water from a cup"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As our audience transitioned from early-adopters to a larger "mainstream" audience, users became less likely to track down odd errors (&lt;code&gt;undefined is not a function&lt;/code&gt; 😱). Instead, they would abandon the project for more familiar/stable alternatives.&lt;/p&gt;

&lt;p&gt;This is also relevant to how you choose new features. "Bundling should be optional" was a core idea baked into Snowpack from the start. If you remember back to &lt;a href="https://dev.to/fredkschott/5-things-i-learned-while-building-snowpack-to-20-000-stars-b9d"&gt;the first post&lt;/a&gt; in this series, that was the idea that our first users fell in love with. As we grew, mainstream users didn't love it so much. They were mostly confused why they had to implement such a simple feature themselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; As your audience grows, understand how your users change. Invest in testing, clear error messages, and overall stability. Make sure that the default user experience is good before investing in advanced features.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-3-your-users-wont-tell-you-everything"&gt;
  &lt;/a&gt;
  Lesson 3: Your users won't tell you everything
&lt;/h2&gt;

&lt;p&gt;Snowpack almost powered &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Rich Harris &lt;a href="https://svelte.dev/blog/whats-the-deal-with-sveltekit"&gt;announced it&lt;/a&gt; at the Svelte Summit conference, and published a blog about how excited he was about our project. We were ecstatic. But right before SvelteKit's public release, they switched out Snowpack for an alternative tool called &lt;a href="http://vitejs.dev/"&gt;Vite&lt;/a&gt;. We found out tool late. The decision had already been made. Their team was unhappy with Snowpack, and we hadn't even noticed!&lt;/p&gt;

&lt;p&gt;You tend to have a strong connection to your users on smaller projects. But as the audience grows, you lose touch a bit. I had gotten so used to this feedback cycle that I hadn't even thought to check in. I had missed the rough edges that the Svelte team was encountering every day, and only got their feedback after it was too late to change any minds.&lt;/p&gt;

&lt;p&gt;It's important for open source leaders to invest in feedback channels. We learned this too late.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; Don't wait for your users to tell you what's wrong. Be proactive about gathering feedback and fixing issues.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-4-be-consistent"&gt;
  &lt;/a&gt;
  Lesson 4: Be consistent
&lt;/h2&gt;

&lt;p&gt;The best part of open source development is the community. As your project grows, you'll see more people stopping by to chat, comment on issues, and maybe even contribute some code. Repeat contributors can become life-long friends.&lt;/p&gt;

&lt;p&gt;Consistency is the best way to build trust in your community. Bursts of productivity are fine for personal projects, but the long stretches of quiet that usually follow are poison to a growing community. This might be the most common mistake that I see large open source projects make. When you step away from your project, contributors and potential future contributors notice. There's nothing worse than putting time into a PR and then having it sit around, uncommented and unnoticed for weeks or months.&lt;/p&gt;

&lt;p&gt;I want to stress that the solution here is &lt;em&gt;not&lt;/em&gt; "just spend more time." That's a guaranteed path to burnout. Instead, spend your time better. It's better to spend an hour or two every week than it is to spend a full day, once a month.&lt;/p&gt;

&lt;p&gt;For what it's worth, this is something that I'm still working on myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; Be consistent. Don't leave your contributors hanging on code reviews and pull requests.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-5-be-present-and-use-discord-seriously"&gt;
  &lt;/a&gt;
  Lesson 5: Be present and use Discord (seriously.)
&lt;/h2&gt;

&lt;p&gt;I mentioned it before but it's important enough to say again: Use &lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt;. Create a community server as soon as your get your first users. If you already have a Slack community, start thinking about moving. Seriously, it's that much better.&lt;/p&gt;

&lt;p&gt;A new Discord server will only ever be as active as you are. If you never visit it, don't expect much to happen. If people never get a response, don't expect them to stay for long. Calling back to the previous two sections: Consistent presence is the best way to build a community and get valuable feedback from your users.&lt;/p&gt;

&lt;p&gt;Discord also is great at encouraging experimentation. Is someone recommending a great bot (aka integration) for your server? Try it out! Ask them to help integrate, customize, or even teach you how Discord works. If your codebase is daunting, Discord can be a great middle-ground where you can collaborate with (and even learn from) your community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; Use Discord. Be present + consistent. Embrace the fun side of the platform (emotes/emojis, bots, stickers, etc).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lesson-6-you-cant-do-it-all-on-your-own"&gt;
  &lt;/a&gt;
  Lesson 6: You can't do it all on your own
&lt;/h2&gt;

&lt;p&gt;It's important to realize when your project has grown beyond your ability to maintain it alone. At that point you'll have a decision: bring on more people, or burn out. &lt;/p&gt;

&lt;p&gt;"It will just be faster if I do it myself" might be true short-term thinking, but its dangerous over the long-term.&lt;/p&gt;

&lt;p&gt;Despite accepting plenty of contributions over the years, I still fell into this trap with Snowpack. A part of me wanted to run the project all by myself, and refused to encouraged larger contributions. I shipped some great stuff during that period, but I also rushed my work. Code quality suffered. I skipped code reviews because I felt I didn't have time for it. And then when I did step away to recover, I would stay away for longer periods and the project would go quiet.&lt;/p&gt;

&lt;p&gt;Ever been so burnt out that you didn't have the energy to realize it? Yeah. It's tough.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson:&lt;/strong&gt; You can't do it all yourself. Building a community can be the most fun part of open source, &lt;em&gt;if you invest in it.&lt;/em&gt; Read up on good open source governance to learn how others do it.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue-whats-next-for-snowpack"&gt;
  &lt;/a&gt;
  Epilogue: What's Next for Snowpack?
&lt;/h2&gt;

&lt;p&gt;If you're currently an open source maintainer or contributor, I hope that you have found this honest guide useful! This last year has been a wild journey, but I wouldn't trade a moment of it.&lt;/p&gt;

&lt;p&gt;Painful mistakes tend to stick. I've already started to apply these lessons to our newest project, &lt;a href="https://astro.build/"&gt;Astro.&lt;/a&gt; We've already invested in an &lt;a href="https://astro.build/chat"&gt;active Discord,&lt;/a&gt; a healthy &lt;a href="https://github.com/snowpackjs/astro/blob/main/GOVERNANCE.md"&gt;governance model,&lt;/a&gt; a solid test suite, a focus on stability, and a community of amazing maintainers.&lt;/p&gt;

&lt;p&gt;It's a great feeling to step away and know that your project is in good hands.&lt;/p&gt;

&lt;p&gt;To be honest, I'm not sure where Snowpack goes from here. I burnt out on it at the end of last year, and haven't found the energy to return. Usage and downloads began to trend down and the community has gotten quieter. &lt;/p&gt;

&lt;p&gt;At the same time, &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; (that Snowpack alternative that now powers SvelteKit) is taking off. To their credit, they do a lot of things really well. The good news is that two tools are very similar and easy to switch out. Even Astro is experimenting with moving from Snowpack to Vite in a future release.&lt;/p&gt;

&lt;p&gt;So maybe it makes sense to wind things down. We asked our community if anyone wanted to get involved in long-term maintenance. But new contributor onboarding takes time that we just can't seem to find any on our end. It's a bit of a Catch-22.&lt;/p&gt;

&lt;p&gt;One other idea would be going back to basics, and bring this story full-circle. The ESM package installer that our first users fell in love with still exists as &lt;a href="https://www.npmjs.com/package/esinstall"&gt;its own package&lt;/a&gt;. The audience for a utility like that would be smaller. It might even be fun!&lt;/p&gt;

&lt;p&gt;Whatever happens, I know that we'll keep learning and keep improving.&lt;/p&gt;

&lt;p&gt;Thanks for reading! &lt;a href="https://twitter.com/FredKSchott/"&gt;Follow me on Twitter&lt;/a&gt; for more updates. If you missed it, check out &lt;a href="https://dev.to/fredkschott/5-things-i-learned-while-building-snowpack-to-20-000-stars-b9d"&gt;the first post&lt;/a&gt; in the series.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>snowpack</category>
    </item>
    <item>
      <title>Contagem de Tweets com Python</title>
      <author>Brenda Souza</author>
      <pubDate>Wed, 15 Sep 2021 22:51:37 +0000</pubDate>
      <link>https://dev.to/breudes/contagem-de-tweets-com-python-2df9</link>
      <guid>https://dev.to/breudes/contagem-de-tweets-com-python-2df9</guid>
      <description>&lt;p&gt;A API do Twitter é uma ferramenta (do próprio Twitter) que permite ao usuário ter acesso aos tweets produzidos em tempo real, esses tweets podem ser filtrados e analisados conforme o objetivo da pessoa que está utilizando a ferramenta. Neste artigo falaremos sobre contagem de tweets utilizando a API e a linguagem de programação Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conta-de-desenvolvedor"&gt;
  &lt;/a&gt;
  Conta de Desenvolvedor
&lt;/h2&gt;

&lt;p&gt;Mas antes de utilizar a API, é preciso checar se: 1. Você possui uma conta no Twitter; 2. Você possui perfil de desenvolvedor. Para ter esse perfil é necessário solicitar ao Twitter, solicite &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;aqui&lt;/a&gt; caso não o tenha.&lt;/p&gt;

&lt;p&gt;Após ter acesso ao seu perfil de desenvolvedor, um painel como este será apresentado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNdGRaIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mawrvwmds2dc7jofssjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNdGRaIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mawrvwmds2dc7jofssjz.png" alt="Painel inicial do perfil de desenvolvedor."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para utilizar a API é necessário criar um projeto e uma aplicação vinculada ao projeto. Após a criação do projeto, você terá suas chaves de autenticação. E uma tela como esta mostrará tais chaves: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QNq9NH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00bvskj01w8rhzi64pde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QNq9NH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00bvskj01w8rhzi64pde.png" alt="Painel com chaves de autenticação de um projeto."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, guarde suas chaves de autenticação e vamos utilizar a API!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conex%C3%A3o-com-a-api"&gt;
  &lt;/a&gt;
  Conexão com a API
&lt;/h2&gt;

&lt;p&gt;Como dito no título deste artigo, utilizaremos Python. Caso não possua Python instalado em sua máquina, existem duas opções comuns para utilizá-lo: 1. Baixar o Python no &lt;a href="https://www.python.org/downloads/"&gt;site oficial&lt;/a&gt; e instalar na sua máquina; 2. Caso não queira instalar o Python, também é possível utilizá-lo via &lt;a href="https://colab.research.google.com/"&gt;Google Colab&lt;/a&gt;, basta ter uma conta Google para isso. &lt;/p&gt;

&lt;p&gt;Certas bibliotecas precisam ser importadas via Python, são elas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="c1"&gt;# módulo que realiza requisições HTTP/HTTPS
&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt; &lt;span class="c1"&gt;# módulo para manuseio de objetos json
&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="c1"&gt;# módulo para manuseio de datas e horas
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Na ordem que foi mostrado: Requests é um módulo que fazer requisições HTTP/HTTPS; Json é um módulo para manuseio de objetos no formato JSON; Datetime é um módulo para manuseio de datas e horas.&lt;/p&gt;

&lt;p&gt;Agora, precisamos utilizar a chave de autenticação chamada de Bearer Token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;bearer_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"XXXXXXXXXXXXXXXXXXXXXXXXXX"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para utilizá-la na requisição é necessário criar um cabeçalho com a chave. Neste exemplo, implementamos uma função que cria o cabeçalho:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="c1"&gt;# gera o cabeçalho para a requisição com o bearer token
&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bearer_oauth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bearer_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida definir palavras-chave e a query para a requisição. Vale ressaltar que para contagem de tweets, utilizamos o endpoint da API chamado de Tweet Counts, para saber mais sobre ele acesse &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/counts/introduction"&gt;este link&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;O endpoint Tweet Counts é utilizado dado esta URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.twitter.com/2/tweets/counts/recent"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, um exemplo de palavras chave e query (consulta) para requisição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="c1"&gt;# palavras-chave
&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"vacina covid-19"&lt;/span&gt;
 &lt;span class="c1"&gt;# query 
&lt;/span&gt; &lt;span class="n"&gt;query_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finalmente, faremos a requisição à API, e para isso implementamos uma função que realiza a requisição e retorna a resposta em formato JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="c1"&gt;# conecta com o endpoint e retorna a reposta em formato JSON 
&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bearer_oauth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Status da requisição: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

      &lt;span class="c1"&gt;# caso ocorra algum erro, uma exceção é lançada
&lt;/span&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# retorna o resultado em formato JSON
&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, basta imprimir a resposta da requisição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com esses resultados temos a contagem de tweets por palavras-chave. Esses resultados podem ser analisados, até mesmo responder esta pergunta: quantos tweets foram produzidos, nas últimas 24 horas, sobre o Covid-19?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Espero que tenha gostado deste artigo, a API do Twitter permite ao usuário fazer muitas coisas interessantes como, por exemplo, análise dos dados presentes nos tweets acessados. Este artigo foi feito com base &lt;a href="https://github.com/breudes/contagem-de-tweets"&gt;neste projeto&lt;/a&gt; que eu implementei para uma disciplina da faculdade.&lt;/p&gt;

&lt;p&gt;É possível utilizar essa API por meio de diferentes tecnologias, Python foi apenas a tecnologia que achei mais confortável para isso.&lt;/p&gt;

&lt;p&gt;Recomendo &lt;a href="https://dev.to/lisandramelo/buscando-tweets-com-a-api-do-twitter-3g1b"&gt;esse artigo&lt;/a&gt;, também relacionado a API do Twitter. Até a próxima! &lt;/p&gt;

</description>
      <category>python</category>
      <category>http</category>
      <category>twitter</category>
      <category>api</category>
    </item>
    <item>
      <title>CfP for AsyncAPI Conference is open! 😀 🎉 
</title>
      <author>Alejandra Quetzalli 🐾</author>
      <pubDate>Wed, 15 Sep 2021 22:33:07 +0000</pubDate>
      <link>https://dev.to/alejandra_quetzalli/cfp-for-asyncapi-conference-is-open-mm7</link>
      <guid>https://dev.to/alejandra_quetzalli/cfp-for-asyncapi-conference-is-open-mm7</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Call for Papers (CfP)&lt;/strong&gt; for our upcoming &lt;a href="https://conference.asyncapi.com/"&gt;AsyncAPI Conference&lt;/a&gt; is open! 😀&lt;/p&gt;

&lt;p&gt;It ends on October 17th, which means &lt;strong&gt;you have one month to apply&lt;/strong&gt;! 😱&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-aside-november-1618"&gt;
  &lt;/a&gt;
  Set aside November 16-18! 🦄
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://conference.asyncapi.com/"&gt;AsyncAPI Conference&lt;/a&gt; is for everyone in the community! 🦄 The main goal is to share and exchange the experiences between existing users and new community members. And have lots of fun. 😁&lt;/p&gt;

&lt;p&gt;The community always needs more real examples/use cases of both the &lt;strong&gt;&lt;a href="https://github.com/asyncapi/spec"&gt;AsyncAPI spec&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.asyncapi.com/generator"&gt;tools&lt;/a&gt;&lt;/strong&gt;. That said, we don't want to place any limitations on the community and encourage submitters to share any and all ideas, in any way, shape, or form. The most important is to have some time for community members to share their experiences with each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dates-to-remember"&gt;
  &lt;/a&gt;
  Dates to Remember:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CFP Closes:&lt;/strong&gt; Sunday, October 17 at 11:59 PM PDT
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CFP Notifications:&lt;/strong&gt; Friday, October 22&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Schedule Announcement:&lt;/strong&gt; Friday, October 29&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pre-recorded Video &amp;amp; Slide Due Date:&lt;/strong&gt; Friday, November 5 at 11:59 PM PDT&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Event Dates:&lt;/strong&gt; Tuesday, November 16 - Thursday, November 18&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cfp-topic-suggestions"&gt;
  &lt;/a&gt;
  CfP Topic Suggestions
&lt;/h2&gt;

&lt;p&gt;Remember to ✨ have fun ✨ as you select your topic! 😀&lt;/p&gt;

&lt;p&gt;Some ideas could be...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real examples&lt;/li&gt;
&lt;li&gt;Real use cases&lt;/li&gt;
&lt;li&gt;AsyncAPI spec&lt;/li&gt;
&lt;li&gt;AsyncAPI tools&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉🏽 Don't forget to apply and &lt;strong&gt;submit your CfPs over &lt;a href="https://linuxfoundation.smapply.io/prog/asyncapi_conference_2021/"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u982BQau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylk8ybogtjpzcq7vswhp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u982BQau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylk8ybogtjpzcq7vswhp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-i-want-to-sponsor-asyncapi-conference"&gt;
  &lt;/a&gt;
  What if I want to sponsor AsyncAPI conference?
&lt;/h2&gt;

&lt;p&gt;If you would like to take a look at our sponsorship levels and learn more about where you can see your logo placements within the AsyncAPI Conference website, go &lt;strong&gt;&lt;a href="https://opencollective.com/asyncapi/events/asyncapi-hackathon-and-conference-2021-3156d7af"&gt;here&lt;/a&gt;.&lt;/strong&gt; 😀 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BbUyt1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mib816as78zbfqrtehq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BbUyt1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mib816as78zbfqrtehq6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-help-with-proposals-selection"&gt;
  &lt;/a&gt;
  Want to help with proposals selection?
&lt;/h2&gt;

&lt;p&gt;If you would like to help with the AsyncAPI proposals selection, simply contact us directly on &lt;a href="https://asyncapi.slack.com/join/shared_invite/enQtNDY3MzI0NjU5OTQyLTM5NTlkYzFmZDQyMGVkNzVkOTRhMGU2N2VmMWRlOTdkNWE0YzdjMGQ2NzRlOWU1NGJkYjUyZDEzMzM3ZGYzYzM#/shared-invite/email"&gt;slack&lt;/a&gt; or feel free to raise your hand in &lt;a href="https://github.com/asyncapi/community/discussions/71"&gt;our public community GitHub Discussion thread&lt;/a&gt; 🧵.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-cant-wait-to-read-your-proposals"&gt;
  &lt;/a&gt;
  We can't wait to read your proposals! 🦄
&lt;/h2&gt;

&lt;p&gt;Let us know if there are any questions we can help with! &lt;/p&gt;

</description>
      <category>eventdriven</category>
      <category>opensource</category>
      <category>contributorswanted</category>
      <category>speaking</category>
    </item>
    <item>
      <title>GitHub Repository Readme Template</title>
      <author>Animesh Kumar</author>
      <pubDate>Wed, 15 Sep 2021 22:04:34 +0000</pubDate>
      <link>https://dev.to/an1meshk/github-repository-readme-template-6h2</link>
      <guid>https://dev.to/an1meshk/github-repository-readme-template-6h2</guid>
      <description>&lt;p&gt;I'm a big fan of README.md file in the GitHub repository, as it provides essential details about the application or project. However, the problem begins when we start thinking about what all details need to be put inside it?&lt;/p&gt;

&lt;p&gt;Here is my attempt to create a generic &lt;a href="https://github.com/an1meshk/tutorials/blob/main/readme-template/readme-template.md"&gt;readme template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What all details you keep in your readme file?&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>How to write a README</title>
      <author>Eric Saldivar</author>
      <pubDate>Wed, 15 Sep 2021 21:45:26 +0000</pubDate>
      <link>https://dev.to/esaldivar/how-to-write-a-readme-3ge9</link>
      <guid>https://dev.to/esaldivar/how-to-write-a-readme-3ge9</guid>
      <description>&lt;p&gt;What is a README?  A README is a series of instructions, information, and/or guide which usually highlight a portion if not what an entire codebase does.  A README is written in Markdown syntax which may be different then what you are accustomed to besides HTML syntax.  &lt;/p&gt;

&lt;p&gt;So why use a README?  Well, the reason I started diving into writing READMEs and taking the time to fine tune them is simply because it makes my code accessible.  It creates a guide by which those unfamiliar with my code or tech stack can gain a quick insight into the workings of my file structure, database management/schema, etc.&lt;/p&gt;

&lt;p&gt;Now, how do you write a good README?&lt;/p&gt;

&lt;h1&gt;Title, short description, and image&lt;/h1&gt;

&lt;p&gt;Well first you need a title and I would recommend titling your README based on it's coverage.  A README that you find as soon as you open up a repository should be titled the name of the repository or product.  I would recommend h1 tags for this purpose. It also makes sense to put a short description (one sentence) of the overall purpose of the product or code here.  I also recommend a picture directly under your README that is a representation of your code/product. This could also be a logo for your product!  Maybe a picture of a key feature or a gif of your product in action.  Images are written in markdown syntax with the img tag.  An important note is that markdown syntax uses inline styling to position things, color things, size things, etc.  So for an image I typically mark its source (src) maybe its linked in the files or hyperlinked where it is stored.&lt;/p&gt;

&lt;p&gt;See an example below for one of my first title, description, and image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyMrV1DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmk235cl2g4z83r9nxh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyMrV1DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmk235cl2g4z83r9nxh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Table of Contents&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IXK6oq_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m85opwl154bjhrcbknhl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IXK6oq_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m85opwl154bjhrcbknhl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you have a fancy title, a short description, and an image that gives some insight into your project/product.   I believe the next thing that sets apart other READMEs is a table of contents.  How do you create a table of contents with Markdown?  Title the Table of contents with an h2 tag then use the following format.&lt;/p&gt;

&lt;p&gt;Asterisk followed by closed square brackets that wrap the title of the content followed by parenthesis that enclose the link to the part of the README where the content is located.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UO33Fz_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/023zmlqz8rzou63tw57d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UO33Fz_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/023zmlqz8rzou63tw57d.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/handle/yourrepo/#contentarea"&gt;section 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handle/yourrepo/#contentarea"&gt;section 2&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handle/yourrepo/#contentarea"&gt;section 3&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Sections&lt;/h1&gt;

&lt;p&gt;After the table of contents, the contents naturally follow.  What the contents are depends on your project/product but things that make contents easy to read are picture examples and code snippets!&lt;/p&gt;

&lt;p&gt;How do you write a code snippet and what is it?  Let's take a look!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fi17Ygpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3e8fuz1ctazl2bzhbvd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fi17Ygpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3e8fuz1ctazl2bzhbvd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three tick marks followed by the language and inside the tick marks you can place your code block.  After that close with three more tick marks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So these are what I would consider the basics of a README.  I want to expand on this later.  I will also say that it has benefited me to look at professional products and study their READMEs.  I hope this has been helpful to you!  See you in the next post.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>help</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
