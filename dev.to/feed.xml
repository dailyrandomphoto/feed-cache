<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>‚≠êÔ∏è Helpful Golang tools to make your code great again</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Mon, 25 Oct 2021 16:38:59 +0000</pubDate>
      <link>https://dev.to/koddr/helpful-golang-tools-to-make-your-code-great-again-3739</link>
      <guid>https://dev.to/koddr/helpful-golang-tools-to-make-your-code-great-again-3739</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, breathtaking DEV people! üëã&lt;/p&gt;

&lt;p&gt;All last week I was refactoring my Go projects. And realized that I was using the same tools to check code quality and safety everywhere. Yes, this should be done from time to time to keep the code base clean and orderly (&lt;em&gt;this applies not only to programming, but in general in life&lt;/em&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üöÄ &lt;strong&gt;By the way&lt;/strong&gt;, this article is &lt;strong&gt;not&lt;/strong&gt; about the built-in linters and formatters in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=golang.go"&gt;Go&lt;/a&gt; plugin for VS Code or similar! These will be different projects from various authors, that you can add to your programming cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, why not tell my readers about helpful tools? Let's go! üëá&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-it-is-important-and-my-vision-for-go-projects"&gt;Why it is important and my vision for Go projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-environment-correctly"&gt;Setting up the environment correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-gosec-package"&gt;The gosec package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-gocritic-package"&gt;The go-critic package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-golangcilint-package"&gt;The golangci-lint package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#afterwards"&gt;Afterwards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-it-is-important-and-my-vision-for-go-projects"&gt;
  &lt;/a&gt;
  Why it is important and my vision for Go projects
&lt;/h2&gt;

&lt;p&gt;I have to tell you: I love writing code. But more than that, I like reading structured code from other developers. &lt;/p&gt;

&lt;p&gt;Why? It helps to better understand the author, adopt useful techniques and methods, as well as, just to understand the work of a particular function and the package as a whole!&lt;/p&gt;

&lt;p&gt;For this reason, I am meticulous about tools to make it easier to write code and, as a consequence, to read it afterwards. I encourage you to be careful and use the tips and tools I describe in this article, too‚Ä¶ someone is still reading the code you've written.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-environment-correctly"&gt;
  &lt;/a&gt;
  Setting up the environment correctly
&lt;/h2&gt;

&lt;p&gt;First, the default &lt;code&gt;.editorconfig&lt;/code&gt; for all of my Go projects, looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./.editorconfig
&lt;/span&gt;
&lt;span class="py"&gt;root&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="nn"&gt;[*]&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;-- rules for all files
&lt;/span&gt;&lt;span class="py"&gt;indent_style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;space&lt;/span&gt;
&lt;span class="py"&gt;indent_size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="py"&gt;charset&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;utf-8&lt;/span&gt;
&lt;span class="py"&gt;trim_trailing_whitespace&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;insert_final_newline&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="nn"&gt;[{go.mod,go.sum,*.go}]&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;-- rules only for Go's project files
&lt;/span&gt;&lt;span class="py"&gt;indent_style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tab&lt;/span&gt;
&lt;span class="py"&gt;indent_size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;

&lt;span class="c"&gt;# ...other rules...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The second, but just as important as the first, always updated &lt;a href="https://marketplace.visualstudio.com/items?itemName=golang.go"&gt;Go plugin&lt;/a&gt; for &lt;strong&gt;Visual Studio Code&lt;/strong&gt; (&lt;em&gt;which I mentioned above&lt;/em&gt;) with default settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuzeO_as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd85jb01jdez65tnyawd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuzeO_as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd85jb01jdez65tnyawd.gif" alt="vs code go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-gosec-package"&gt;
  &lt;/a&gt;
  The gosec package
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;gosec&lt;/code&gt; inspects source code for security problems by scanning the Go AST. This package contains &lt;a href="https://github.com/securego/gosec#available-rules"&gt;over 30&lt;/a&gt; different rules to test the security of your Go code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; In computer science, an &lt;strong&gt;abstract syntax tree&lt;/strong&gt; (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of source code written in a programming language.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/securego"&gt;
        securego
      &lt;/a&gt; / &lt;a href="https://github.com/securego/gosec"&gt;
        gosec
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Golang security checker
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's an example from one of my projects. I call the command &lt;code&gt;gosec ./...&lt;/code&gt; in the root directory of my module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;gosec] 2021/10/25 18:03:37 Including rules: default
&lt;span class="o"&gt;[&lt;/span&gt;gosec] 2021/10/25 18:03:37 Excluding rules: default
&lt;span class="o"&gt;[&lt;/span&gt;gosec] 2021/10/25 18:03:37 Import directory: /Users/koddr/Code/project/api/app/models
&lt;span class="o"&gt;[&lt;/span&gt;gosec] 2021/10/25 18:03:37 Checking package: models

&lt;span class="c"&gt;# ...list of all *.go files...&lt;/span&gt;

Results:

&lt;span class="o"&gt;[&lt;/span&gt;/Users/koddr/Code/project/api/platform/cdn/digitalocean_spaces.go:62] - G304 &lt;span class="o"&gt;(&lt;/span&gt;CWE-22&lt;span class="o"&gt;)&lt;/span&gt;: Potential file inclusion via variable &lt;span class="o"&gt;(&lt;/span&gt;Confidence: HIGH, Severity: MEDIUM&lt;span class="o"&gt;)&lt;/span&gt;
    61:         // Open the file from system path.
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 62:         file, errOpen :&lt;span class="o"&gt;=&lt;/span&gt; os.OpenFile&lt;span class="o"&gt;(&lt;/span&gt;pathToFile, os.O_RDONLY, 0o600&lt;span class="o"&gt;)&lt;/span&gt;
    63:         &lt;span class="k"&gt;if &lt;/span&gt;errOpen &lt;span class="o"&gt;!=&lt;/span&gt; nil &lt;span class="o"&gt;{&lt;/span&gt;

Summary:
  Gosec  : 2.9.1
  Files  : 29
  Lines  : 2760
  Nosec  : 0
  Issues : 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And this give me a lot of information to fix it! You can easily fix this part of the code by wrapping the &lt;code&gt;pathToFile&lt;/code&gt; variable with the &lt;a href="https://pkg.go.dev/path/filepath#Clean"&gt;&lt;code&gt;filepath.Clean()&lt;/code&gt;&lt;/a&gt; function built into Golang.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§î &lt;strong&gt;Note:&lt;/strong&gt; Yes, it may seem strange at first glance, but if you've ever run Go projects in production, you'll understand why you can't leave such things out of your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-gocritic-package"&gt;
  &lt;/a&gt;
  The go-critic package
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;go-critic&lt;/code&gt; is a collection of checks that detect style, performance issues as well as some common programming errors. It provides as much useful checks as possible. This wonderful tool not only shows you the problematic part of your Go code, but also tells you what to replace it with.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/go-critic"&gt;
        go-critic
      &lt;/a&gt; / &lt;a href="https://github.com/go-critic/go-critic"&gt;
        go-critic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The most opinionated Go source code linter for code audit.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For an example, let's run &lt;code&gt;gocritic check -enableAll ./...&lt;/code&gt; for the popular Swagger documentation generator package &lt;a href="https://github.com/swaggo/swag"&gt;&lt;code&gt;swaggo/swag&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./operation.go:1033:24: ioutilDeprecated: ioutil.ReadFile is deprecated, use os.ReadFile instead

./parser.go:604:1: paramTypeCombine: func&lt;span class="o"&gt;(&lt;/span&gt;tagName string, dirPath string&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;([]&lt;/span&gt;byte, error&lt;span class="o"&gt;)&lt;/span&gt; could be replaced with func&lt;span class="o"&gt;(&lt;/span&gt;tagName, dirPath string&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;([]&lt;/span&gt;byte, error&lt;span class="o"&gt;)&lt;/span&gt;

./packages.go:41:5: emptyStringTest: replace &lt;span class="sb"&gt;`&lt;/span&gt;len&lt;span class="o"&gt;(&lt;/span&gt;packageDir&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0&lt;span class="sb"&gt;`&lt;/span&gt; with &lt;span class="sb"&gt;`&lt;/span&gt;packageDir &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c"&gt;# ...and over 20 more...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If there is a rule group you don't need at the moment, just disable it via a &lt;code&gt;disable&lt;/code&gt; flag with tag like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gocritic check &lt;span class="nt"&gt;-disable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'#style'&lt;/span&gt; ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Supported tags (always enabled): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#diagnostic&lt;/code&gt; ‚Äî kind of checks that detect various errors&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#style&lt;/code&gt; ‚Äî kind of checks that find style issues&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#performance&lt;/code&gt; ‚Äî kind of checks that detect potential performance issues&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#security&lt;/code&gt; ‚Äî kind of checks that find security issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And tags which disabled by default (enable it by the &lt;code&gt;-enable='&amp;lt;TAG&amp;gt;'&lt;/code&gt; flag with specific tag, or use &lt;code&gt;-enableAll&lt;/code&gt; flag):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#experimental&lt;/code&gt; ‚Äî check is under testing and development&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#opinionated&lt;/code&gt; ‚Äî check can be unwanted for some people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For turn off a specific rule, just run this command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gocritic check &lt;span class="nt"&gt;-disable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;emptyStringTest ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; You can find a complete list of all the rules &lt;a href="https://go-critic.com/overview.html#checkers"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-golangcilint-package"&gt;
  &lt;/a&gt;
  The golangci-lint package
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;golangci-lint&lt;/code&gt; is a fast Go linters runner. Most installations of this package performed for CI, but you can use it, for example, as a standard linter in your favorite IDE. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/golangci"&gt;
        golangci
      &lt;/a&gt; / &lt;a href="https://github.com/golangci/golangci-lint"&gt;
        golangci-lint
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fast linters Runner for Go
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The main advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Runs linters in parallel, reuses Go build cache and caches analysis results&lt;/li&gt;
&lt;li&gt;YAML-based configuration&lt;/li&gt;
&lt;li&gt;Many linters included, no need to install them&lt;/li&gt;
&lt;li&gt;Minimum number of false positives because of tuned default settings&lt;/li&gt;
&lt;li&gt;Nice output with colors, source code lines and marked identifiers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And yes, personally, I often use it with GitHub Actions to check all incoming PRs for projects in the repositories. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üìå &lt;strong&gt;Note:&lt;/strong&gt; If you missed it, here's &lt;a href="https://dev.to/koddr/series/7074"&gt;my series of articles&lt;/a&gt; that will give you insight and practice with GitHub Actions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The config file for Actions looks like this, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./.github/workflows/golangci-lint.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golangci-lint&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;golangci&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;lint&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golangci-lint&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golangci/golangci-lint-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
          &lt;span class="na"&gt;only-new-issues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A small demo from the developers of &lt;code&gt;golangci-lint&lt;/code&gt; that shows the problematic areas of the Beego web framework (by &lt;code&gt;golangci-lint run&lt;/code&gt; command):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/183662"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXn_vrgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mps4v43pepd9h1rvm6pc.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afterwards"&gt;
  &lt;/a&gt;
  Afterwards
&lt;/h2&gt;

&lt;p&gt;I hope that this article has helped you. Write in the comments if you have any other good tools for checking and formatting code. And be never afraid to take a little time to make your code great again. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's well worth it!&lt;/strong&gt; üòâ&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tools authors and Vic Sh√≥stak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How cryptography üí™works to protect ML models</title>
      <author>Cossack Labs</author>
      <pubDate>Mon, 25 Oct 2021 16:01:07 +0000</pubDate>
      <link>https://dev.to/cossacklabs/how-cryptography-works-to-protect-ml-models-476o</link>
      <guid>https://dev.to/cossacklabs/how-cryptography-works-to-protect-ml-models-476o</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Let‚Äôs speak about &lt;a href="https://www.youtube.com/watch?v=rj5zbIleekA&amp;amp;t=5s&amp;amp;ab_channel=NoNameCon"&gt;Machine Learning and cryptography&lt;/a&gt;. Are they a match? 
  spoiler:
  &lt;p&gt;yep &lt;/p&gt;

&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs imagine that you are in ML.&lt;/strong&gt;&lt;br&gt;
You trained fantastic ML models that add cat‚Äôs ears =^..^= (&lt;em&gt;nekomimi&lt;/em&gt;) to all people on the video. You decided to make an app for that! Suddenly, your app became popular, and some people wanted to copy it. So, it would be best to protect your ML models from leakage and misuse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simplified, it works like this:&lt;/strong&gt; users upload their videos to your app. Your app takes them to your backend, which generates a video-specific ML model, and then sends it back to the app. Then your application stores and executes it.&lt;/p&gt;

&lt;p&gt;Being a üí™ security pro, you understand that ML models need protection. But &lt;strong&gt;from a data security perspective ML model is a‚Ä¶ just file with model data and procedure/algorithm&lt;/strong&gt;. So, you‚Äôre to adjust your security efforts and protect those tiny ML models‚Äîfrom their generation point to their usage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMXyo_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z611h7ye9m1jhnj5ug14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMXyo_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z611h7ye9m1jhnj5ug14.png" alt="IML dataflow, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You carefully add encryption: the backend will encrypt each ML model per user per video using ephemeral keys and &lt;a href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/"&gt;an HPKE-like approach&lt;/a&gt;. It means that every ML model will be explicitly encrypted for specific videos by your backend code. This approach is known as &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;application-level encryption (ALE)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your mobile apps will receive an encrypted model and decrypt it before usage. &lt;strong&gt;Each ML model is encrypted by a unique encryption key used only once to make things complicated for attackers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_VDKlre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1xp3gjdb66vmo4l5g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_VDKlre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1xp3gjdb66vmo4l5g2.png" alt="Encryption layer: solutions, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indeed, you don‚Äôt want to leave encryption alone.&lt;/p&gt;

&lt;p&gt;So, you add multiple protection measures: use Keychain/Keystore on a device, add logging and monitoring on a server, and an anti-fraud system that prevents sending ML models to untrusted users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRIu7kE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyflukqb6c6xp87v5f4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRIu7kE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyflukqb6c6xp87v5f4q.png" alt="Anti-fraud system 201, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Curious to learn details?&lt;/p&gt;

&lt;p&gt;Dive into the full video‚Äîto learn more about cryptography, cloud storage security, API protection, anti-fraud system, etc.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rj5zbIleekA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Sounds too complicated as for protecting =^..^= cat-ears ML model?&lt;/p&gt;

&lt;p&gt;Well, imagine a financial analytics ML model instead. We built specific ML-protection technologies several times, as it was exciting every time.&lt;/p&gt;




&lt;p&gt;Say hi to &lt;a href="https://twitter.com/vixentael"&gt;@vixentael&lt;/a&gt; and follow &lt;a class="mentioned-user" href="https://dev.to/cossacklabs"&gt;@cossacklabs&lt;/a&gt;
 for data security updates on &lt;a href="https://twitter.com/cossacklabs"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCQbAyrwHKJ8QRDTOHs90O0g"&gt;YouTube&lt;/a&gt;, &lt;a href="https://github.com/cossacklabs"&gt;Linkedin&lt;/a&gt;, and our &lt;a href="https://www.cossacklabs.com/"&gt;website&lt;/a&gt;. üëãüß°üîê&lt;/p&gt;

</description>
      <category>security</category>
      <category>cryptography</category>
      <category>riskmanagement</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>5 Best Free Email Marketing Tools List</title>
      <author>Bhavyashah</author>
      <pubDate>Mon, 25 Oct 2021 15:58:37 +0000</pubDate>
      <link>https://dev.to/bhavyashah/5-best-free-email-marketing-tools-list-4pb1</link>
      <guid>https://dev.to/bhavyashah/5-best-free-email-marketing-tools-list-4pb1</guid>
      <description>&lt;p&gt;Email marketing is a highly effective way to promote your business or online project. It‚Äôs also a very cost-effective means of promoting your website. So it‚Äôs no wonder that &lt;a href="https://www.blogtriggers.com/2021/06/create-email-newsletter-widget-in-blogger.html"&gt;email newsletter&lt;/a&gt; has become a common part of a large number of businesses strategies in recent years.&lt;/p&gt;

&lt;p&gt;There are numerous tools that can help you with your email marketing. There are free tools and paid tools. Here is a list of 5 Free email marketing tools to help you with your email campaigns.&lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://mailchimp.com/"&gt;MailChimp&lt;/a&gt;&lt;br&gt;
2) &lt;a href="https://www.mailmunch.com/"&gt;MailMunch&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://www.mailerlite.com/"&gt;Mailerlite&lt;/a&gt;&lt;br&gt;
4) &lt;a href="https://www.hubspot.com/"&gt;Hubspot&lt;/a&gt;&lt;br&gt;
5) &lt;a href="https://convertkit.com/"&gt;ConvertKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For More Stuff you can also See this &lt;a href="https://in.pinterest.com/blogtriggers/"&gt;website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tools</category>
    </item>
    <item>
      <title>Ddosify : High-performance load testing tool</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Mon, 25 Oct 2021 15:56:12 +0000</pubDate>
      <link>https://dev.to/qainsights/ddosify-high-performance-load-testing-tool-56d6</link>
      <guid>https://dev.to/qainsights/ddosify-high-performance-load-testing-tool-56d6</guid>
      <description>&lt;p&gt;There are over &lt;a href="https://github.com/QAInsights/Performance-Testing-Tools" rel="noreferrer noopener"&gt;50+ tools and solutions&lt;/a&gt; available in the market for performance testing your application and services. Now it is time to check out Ddosify, high-performance load testing tool which offers free and commercial features to test web applications and services over HTTP(S), HTTP/2, and other protocols are on their way. In this blog article, let us deep-dive into Ddosify tool and see whether it satisfies a typical performance engineer or not.&lt;/p&gt;

&lt;p&gt;Before we see Ddosify, let us try to understand the name of the tool. Ddosify contains &lt;code&gt;Ddos&lt;/code&gt; term. DDoS stands for Distributed Denial of Services. Below is the Wikipedia entry for Denial of Service:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In computing, a denial-of-service attack is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An attacker targets a machine and tries to disrupt its services. The term &lt;em&gt;distributed &lt;/em&gt;stands for &lt;em&gt;multiple sources. &lt;/em&gt;Instead of attacking a system from one source, attacker uses multiple sources.&lt;/p&gt;

&lt;p&gt;If you try to fit the &lt;em&gt;DDoS &lt;/em&gt;capabilities for good intent, you will get &lt;code&gt;Ddosify&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;What is Ddosify?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ddosify/ddosify" rel="noreferrer noopener"&gt;Ddosify&lt;/a&gt; is a high-performance load testing tool written in Golang. It comes in two flavors: open-source and commercial. &lt;/p&gt;

&lt;p&gt;It supports HTTP(S), HTTP/2 protocols (as of now); other protocols are on the way.&lt;/p&gt;

&lt;p&gt;JSON support for creating scenarios.&lt;/p&gt;

&lt;p&gt;Supports various workload models.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;As Ddosify is Golang based, the prerequisite is to install the latest and stable version of Golang if you want to build from the source, else you can download the binaries to get started. Head to https://golang.org/dl/ to install the Golang.&lt;/p&gt;

&lt;p&gt;To install Ddosify, you can leverage Docker or install it from source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it --rm ddosify/ddosify
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;go install -v go.ddosify.com/ddosify@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After successful installation, you can verify Ddosify by issuing the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ddosify -version&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Quick Start&lt;/h2&gt;

&lt;p&gt;Let us start a quick load testing, targeting the demo app. I am running a sample Jetty app locally on the port 8080. To begin the testing using Ddosify, you can issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ddosify -t http://localhost:8080/test/hello&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command sends 100 requests in 10 seconds. Below is the output. During the test, Ddosify displays the status runtime. Once the test is done, it will display the results with DNS, Connection, Request Write, Server Processing, Response Read time and Total time in seconds.&lt;/p&gt;

&lt;p&gt;To terminate the test, you can press &lt;code&gt;Ctrl + C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqMwTg3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-4-1024x651.png" alt="Ddosify : High-performance load testing tool"&gt;&lt;/a&gt;Ddosify : High-performance load testing tool&lt;/p&gt;

&lt;h2&gt;Scenario Design&lt;/h2&gt;

&lt;p&gt;Now let us design a quick scenario to test the demo app in JSON. Copy and paste the below JSON and save it as &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To start the test, issue &lt;code&gt;ddosify -config .\config.json&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "request_count": 20,
  "load_type": "linear",
  "duration": 5,
  "output": "stdout",
  "steps": [
    {
      "id": 1,
      "url": "http://localhost:8080/test/session/",
      "protocol": "http",
      "method": "POST",
      "headers": {
        "ContenType": "application/xml",
        "header1": "header2"
      },
      "payload": "Name=test&amp;amp;Value=test&amp;amp;Action=Set",
      "timeout": 3,      
      "others": {
        "keep-alive": true,
        "disableCompression": false,
        "h2": true,
        "disable-redirect": true
      }
    }    
  ]
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above scenario throws 20 requests (iterates) over the period of 5 seconds. Below is the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fVB8E9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-5-1024x568.png" alt="Ddosify : High-performance load testing tool"&gt;&lt;/a&gt;Ddosify : High-performance load testing tool&lt;/p&gt;

&lt;p&gt;Below are the various flags available for Ddosify at this time of writing. &lt;/p&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;br&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;br&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Required?&lt;/th&gt;
&lt;br&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;br&gt;
&lt;tbody&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Target website URL. Example:¬†&lt;a href="https://ddosify.com/"&gt;&lt;/a&gt;&lt;a href="https://ddosify.com"&gt;https://ddosify.com&lt;/a&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Total request count&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Test duration in seconds.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Protocol of the request. Supported protocols are¬†&lt;em&gt;HTTP, HTTPS&lt;/em&gt;. HTTP/2 support is only available by using a config file as described. More protocols will be added.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;HTTPS&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Request method. Available methods for HTTP(s) are¬†&lt;em&gt;GET, POST, PUT, DELETE, UPDATE, PATCH&lt;/em&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;The payload of the network packet. AKA body for the HTTP.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Basic authentication. Usage:¬†&lt;code&gt;-a username:password&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Headers of the request. You can provide multiple headers with multiple¬†&lt;code&gt;-h&lt;/code&gt;¬†flag.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-T&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Timeout of the request in seconds.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Proxy address as host:port.¬†&lt;code&gt;-P &lt;a href="http://user:pass@proxy_host.com:port"&gt;http://user:pass@proxy_host.com:port&lt;/a&gt;'&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Test result output destination. Other output types will be added.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;a href="https://github.com/ddosify/ddosify#load-types"&gt;Type&lt;/a&gt;¬†of the load test. Ddosify supports 3 load types.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;linear&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;a href="https://github.com/ddosify/ddosify#config-file"&gt;Config File&lt;/a&gt;¬†of the load test.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-version&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Prints version, git commit, built date (utc), go information and quit&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/tbody&gt;
&lt;br&gt;
&lt;/table&gt;&lt;/div&gt;
Ddosify Flags


&lt;h2&gt;Workload Models&lt;/h2&gt;

&lt;p&gt;At this moment, Ddosify supports three workload models: Linear, Incremental, and Waved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linear &lt;/strong&gt;helps to inject the load consistently over the period of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incremental &lt;/strong&gt;injects the load gradually increasing.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;wave &lt;/strong&gt;pattern injects the load like peaks and valleys. &lt;/p&gt;

&lt;h2&gt;How many requests you can send from your system?&lt;/h2&gt;

&lt;p&gt;To determine, how many requests you can generate on the system, purely depends on the CPU, memory, and other parameters. You need to run benchmark tests and conclude your findings.&lt;/p&gt;

&lt;p&gt;I have two cores with 16 GB RAM. Golang is based on a lightweight thread managed by Go runtime called goroutines. Golang has better concurrency than other languages. You can easily spin up hundreds of threads using minimal resources. &lt;/p&gt;

&lt;p&gt;I executed a test with 10000 requests. As you see, the load is proportional to the time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0cspo1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-6-1024x779.png" alt="High Load Test"&gt;&lt;/a&gt;High Load Test&lt;/p&gt;

&lt;p&gt;When I injected with 10000000, I observed high CPU and memory on ddosify.exe and the test took a long time to complete. I have to terminate the exe file. It is not DDosify issue, it is my system configuration. I have an under-powered config which cannot be useful for running very high load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otJlTPWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overall&lt;/h2&gt;

&lt;p&gt;Ddosify might be a good fit if you want to run a very high load quickly with minimal configuration. It is still in the very early stages, and a lot of features are missing (parameterization, logical actions, scripting to name a few). The commercial version is yet to be released.; I am on the waiting list. I hope Ddosify team will develop the features which will satisfy typical performance engineers eventually. I urge you to try Ddosify to ddosify your app. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>webperf</category>
      <category>go</category>
    </item>
    <item>
      <title>How to emulate Ternary Operators of Javascript in Python.</title>
      <author>NoobCoder </author>
      <pubDate>Mon, 25 Oct 2021 15:47:11 +0000</pubDate>
      <link>https://dev.to/vanshcodes/how-to-emulate-ternary-operators-of-javascript-in-python-4hlc</link>
      <guid>https://dev.to/vanshcodes/how-to-emulate-ternary-operators-of-javascript-in-python-4hlc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cv09xmX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqcnorw8eqfgvzcly1z0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cv09xmX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqcnorw8eqfgvzcly1z0.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-for-those-who-dont-know-ternary-operation"&gt;
  &lt;/a&gt;
  First For Those Who don't know Ternary Operation
&lt;/h1&gt;

&lt;p&gt;Ternary Operator is a easy and consize way of if-else &lt;/p&gt;

&lt;p&gt;Ok So lets flex some JS muscles.&lt;/p&gt;

&lt;p&gt;The syntax in JS is something like this.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let v = condition ? "True" : "False"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Here if condition is true. &lt;br&gt;
The value of the variable v becomes True. &lt;br&gt;
While if condition is false. &lt;br&gt;
The value of the variable v becomes False.&lt;/p&gt;

&lt;p&gt;In Python's if-else it would be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if condition:
    v = "True"
else:
    v = "False"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-to-emulate-this-in-python-"&gt;
  &lt;/a&gt;
  Now To Emulate This in Python ?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ifTrue = "It is a True Value"
ifFalse = "It is a False Value"
trueValue = 432
c1 = [ifFalse, ifTrue][bool(trueValue)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-the-code"&gt;
  &lt;/a&gt;
  Understanding The Code
&lt;/h3&gt;

&lt;p&gt;So in simple if else it would be like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if trueValue:
   c1 = ifTrue
else:
   c2 = ifFalse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;So How is this Happening?&lt;/strong&gt;&lt;br&gt;
Now lets break it into pieces&lt;br&gt;
&lt;code&gt;c1 = [ifFalse, ifTrue]&lt;/code&gt; is a List. Do you agree?&lt;/p&gt;

&lt;p&gt;c1[0] would be ifFalse.&lt;/p&gt;

&lt;p&gt;c2[1] would be ifTrue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agreed?&lt;br&gt;
Now,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bool(3)&lt;/code&gt;  will give True in python&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bool(None)&lt;/code&gt;  will give False in python&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Shall We Move on ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok So&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = [ifFalse, ifTrue]
c = a[bool(trueValue)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here if &lt;code&gt;bool(trueValue)&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; then it will get typecasted to integer which is 1.&lt;/p&gt;

&lt;p&gt;And, Whats a[1] it's &lt;code&gt;ifTrue&lt;/code&gt;.&lt;br&gt;
While it its &lt;code&gt;False&lt;/code&gt;. It will get typecasted to a[0] which is &lt;code&gt;ifFalse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was a Long One but for short and helpful tricks&lt;br&gt;
Follow &lt;a href="https://www.instagram.com/pythonzen/"&gt;PythonZen On Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rebrand.ly/a7p8wz7"&gt;Try it Here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Authentication based on clean architecture</title>
      <author>John Piedrahita</author>
      <pubDate>Mon, 25 Oct 2021 15:35:03 +0000</pubDate>
      <link>https://dev.to/japhernandez/authentication-based-on-clean-architecture-1n74</link>
      <guid>https://dev.to/japhernandez/authentication-based-on-clean-architecture-1n74</guid>
      <description>&lt;h4&gt;
  &lt;a href="#first-delivery"&gt;
  &lt;/a&gt;
  &lt;em&gt;First delivery...&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;In this new installment I share with you several use cases for authenticating to an API, with the @clean/scaffold package.&lt;/p&gt;

&lt;p&gt;Use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user may be able to register.&lt;/li&gt;
&lt;li&gt;A user can log in to the system through jwt authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We install the package globally on our pc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g @tsclean/scaffold
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:project --name=authentication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the entity with the corresponding attributes, in this case we are going to store a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:entity --name=user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/user.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the interface that will communicate the domain layer with the infrastructure layer. This interface will contain the use case.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The interfaces when compiling the code to javascript are lost, for this reason to be able to apply the principle of Inversion of Dependencies, we must make reference in the communication of the components by means of a constant.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:interface --name=add-user --path=models
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/gateways/add-user-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the service that is going to have all the logic to store the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:service --name=add-user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interface to communicate the service with external layers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/add-user-service.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Exist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the business logic in the service, this involves applying some business rules.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/impl/add-user-service-impl.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the basic logic for the service to store the user, but we must check that the email is unique and create a hash for the password, so we get closer to a real world application.&lt;/p&gt;

&lt;p&gt;We must create two interfaces for this purpose, one for the email validation and the other to create the password hash.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/models/gateways/check-email-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/gateways/hash-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the interfaces have been created to handle some of the business rules, we implement the interfaces in the service, passing them as a dependency in the constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/impl/add-user-service-impl.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;checkEmailRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userExist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userExist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the adapter in infrastructure layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:adapter-orm --name=user --orm=mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must configure in the .env the url that you will use in the connection with mongoose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: An update has been made in the plugin to give a management to the providers generating a single file, in this we include all the providers that are being created and by means of the spread operator we include them in the main container of the application so that the dependencies are solved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/orm/mongoose/models/user.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/orm/mongoose/user-mongoose-repository-adapter.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/orm/mongoose/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// We create this function to manage the entity that exists in the domain.&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the adapter of an external library to create the hash of the password, for this we use bcrypt, where we make the implementation of the interface, decoupling completely the components.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/bcrypt-adapter.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/providers/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/bcrypt-adapter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/orm/mongoose/user-mongoose-repository-adapter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/impl/add-user-service-impl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adapters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the controller as an entry point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:controller --name=add-user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/add-user-controller.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/v1/add-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserController&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are already validating in the use case that the email is unique, but it returns only a boolean value, we must handle this exception at the entry point, in this case the controller, in addition we validate that the email has the correct format and the body of the request does not bring empty fields.&lt;/p&gt;

&lt;p&gt;To achieve this we create our own helper or we make use of an external library, if you make use of a library you must create the corresponding adapter for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/helpers/validate-fields.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9_&lt;/span&gt;&lt;span class="se"&gt;\.\-])&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\@(([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;\-])&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.)&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]{2,4})&lt;/span&gt;&lt;span class="sr"&gt;+$/&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;fieldsValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; field is required`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;REGEX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is invalid`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/add-user-controller.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/helpers/validate-fields&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/v1/add-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserController&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldsValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email is already in use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create an index file to export all the controllers to the container.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserController&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/entry-points/api/add-user-controller&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AddUserController&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we configure all the components in the main container&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/application/app.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/entry-points/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/providers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code looks much cleaner with the update that was made.&lt;/p&gt;

&lt;p&gt;Previously when creating the adapter, the index.ts file that starts the application was updated with the necessary configuration to make the connection with the database manager.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module-alias/register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;helmet&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;StartProjectServer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AppContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/application/app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/application/config/environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DB Mongo connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;StartProjectServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helmet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running on port: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#next-second-delivery"&gt;
  &lt;/a&gt;
  &lt;em&gt;next second delivery...&lt;/em&gt;
&lt;/h4&gt;

</description>
    </item>
    <item>
      <title>Hosting Website on Firebase</title>
      <author>Krutik Raut</author>
      <pubDate>Mon, 25 Oct 2021 15:34:00 +0000</pubDate>
      <link>https://dev.to/reboot13_dev/hosting-website-on-firebase-5ged</link>
      <guid>https://dev.to/reboot13_dev/hosting-website-on-firebase-5ged</guid>
      <description>&lt;p&gt;This instruction is for making newbies work easy so that they can follow exactly the same steps I am giving below&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder name &lt;strong&gt;&lt;em&gt;website&lt;/em&gt;&lt;/strong&gt; on desktop&lt;/li&gt;
&lt;li&gt;Create another folder within the website folder name it as &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Add your HTML/CSS/JS and images files to the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure the main page of your website is named as an &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;Firebase hosting does not support any server-side scripts such as Ruby, PHP, Python, or anything else that is processing your files before output. That would require an application engine such as Google App Engine, Heroku, or similar. The hosting service is a static website hosting service.&lt;/p&gt;

&lt;p&gt;Before starting install node js on your device.&lt;/p&gt;

&lt;p&gt;Link:  &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you are done with installing &lt;strong&gt;Node JS&lt;/strong&gt; Follow the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Go to &lt;a href="https://firebase.google.com/"&gt;https://firebase.google.com/&lt;/a&gt; and click on &lt;strong&gt;Get started.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
Click on &lt;strong&gt;Add Project&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
Enter your Project name and continue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reboot13-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Enable google analytics on your project if you want to track users and click on continue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Firebase will create your project within a few seconds&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Click on continue.&lt;/li&gt;
&lt;/ul&gt;



&lt;br&gt;
Lets Install Firebase CLI on our device

&lt;ul&gt;
&lt;li&gt;
Now Open your terminal (Command Prompt).
-
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This will install firebase tools globally on your device.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This will redirect you to the browser&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Now select the Gmail account in which you have created the Project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Allow access to Firebase and get back to the terminal.&lt;/p&gt;

&lt;p&gt;Once you are logged in change the directory in the terminal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd C:\Users\common\Desktop\website

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;You're about to initialize a Firebase project in this directory:&lt;/p&gt;

&lt;p&gt;C:\Users\common\Desktop\website? &lt;/p&gt;

&lt;p&gt;Are you ready to proceed? (Y/n)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;y&lt;/strong&gt; and press enter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scroll down user navigation keys (arrow keys) and press space to select &lt;/p&gt;

&lt;p&gt;(*) Hosting: Configure and deploy Firebase Hosting sites&lt;/p&gt;

&lt;p&gt;(*)means it's selected.&lt;/p&gt;

&lt;p&gt;Press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Please select an option: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select &amp;gt; Use an existing project and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select a default Firebase project for this directory: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select your project name and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select a default Firebase project for this directory: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we named our folder public&lt;/p&gt;

&lt;p&gt;type &lt;strong&gt;public&lt;/strong&gt; and press enter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Configure as a single-page app (rewrite all URLs to /index.html)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Set up automatic builds and deploys with GitHub? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;File public/404.html already exists. Overwrite? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? File public/index.html already exists. Overwrite? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;p&gt;Don't overwrite any file just type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Firebase initialization complete!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
Now Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Deploy complete!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Done you successfully hosted your website on Firebase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;project name&amp;gt;.web.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the one I hosted &lt;a href="https://reboot13-dev.web.app"&gt;https://reboot13-dev.web.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Youtube Video Tutorial: &lt;a href="https://www.youtube.com/watch?v=KQs7adkKNHk"&gt;https://www.youtube.com/watch?v=KQs7adkKNHk&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reboot13"&gt;
  &lt;/a&gt;
  Reboot13
&lt;/h3&gt;

&lt;p&gt;Youtube: &lt;a href="https://youtube.com/krutikraut"&gt;https://youtube.com/krutikraut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/reboot13-git"&gt;https://github.com/reboot13-git&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>firebase</category>
      <category>hosting</category>
      <category>website</category>
    </item>
    <item>
      <title>Localize your React.js App the simplest way you've ever seen</title>
      <author>Jan Cizmar</author>
      <pubDate>Mon, 25 Oct 2021 15:29:32 +0000</pubDate>
      <link>https://dev.to/tolgee_i18n/localize-your-reactjs-app-the-simplest-way-youve-ever-seen-ch5</link>
      <guid>https://dev.to/tolgee_i18n/localize-your-reactjs-app-the-simplest-way-youve-ever-seen-ch5</guid>
      <description>&lt;p&gt;Translating an App to multiple languages (localization) is tricky part of many applications. Tolgee is simplifying the localization process and saves developer's time üë®‚Äçüíªüë©üèª‚Äçüíª by removing repetitive tasks üîÅ ‚ùå. Saving time? That's what I want. Show me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tolgee"&gt;
  &lt;/a&gt;
  What is Tolgee
&lt;/h2&gt;

&lt;p&gt;Tolgee is &lt;strong&gt;open-source&lt;/strong&gt; tool combining localization platform and SDKs to provide simple way to translate the web applications for both developers and translators. üë®‚Äçüíªüë©üèª‚Äçüíªüßñüèºüë©üèª‚Äçüíªüßñüèº&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-context-translating"&gt;
  &lt;/a&gt;
  In context translating üìñ
&lt;/h2&gt;

&lt;p&gt;As a developer of localized application, you probably have to modify localization data every time you need to change a text. So you have to open the file, add or find the key to modify, save it and check whether everything was changed correctly in the app. With Tolgee you can just &lt;code&gt;ALT + click&lt;/code&gt; the actual translated text in your app and üí•boomüí• translation dialog appears and you are able to translate it right away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIK8NH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43135o8bo4w65qw868kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIK8NH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43135o8bo4w65qw868kc.png" alt="Tolgee - in context translation dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-screenshot-generation"&gt;
  &lt;/a&gt;
  Automatic Screenshot Generation üì∏
&lt;/h2&gt;

&lt;p&gt;Another tricky part of localization is providing context üìñ to translators. Only exporting the keys and translations in source language is not always enough. Tolgee enables you to take and upload screenshot directly in the in-context translation dialog. So no more manual taking and uploading screenshots.üåÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localization-platform-included"&gt;
  &lt;/a&gt;
  Localization platform included ‚úÖ
&lt;/h2&gt;

&lt;p&gt;Tolgee is also localization platform, where you can manage all your localization strings üìö. So you can provide access to translators and they can translate the texts there. If you uploaded screenshots before, they know the context of the translations perfectly so they can produce perfect results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-that-hard-to-integrate-no-its-not"&gt;
  &lt;/a&gt;
  Isn't that hard to integrate? No it's not!
&lt;/h2&gt;

&lt;p&gt;To get started, you can simply follow the integration guides provided in the platform. Which is the simplest way to get started. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to &lt;a href="https://app.tolgee.io"&gt;Tolgee Cloud&lt;/a&gt; or use your self hosted &lt;a href="https://tolgee.io/docs/server_and_web_app/self_hosting/running_with_docker"&gt;Tolgee instance&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new project by clicking &lt;strong&gt;&lt;code&gt;Add&lt;/code&gt; button in the top right&lt;/strong&gt;. And filling the project name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" alt="Add button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Optionally, you can add multiple languages to translate your app into.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Integrate&lt;/code&gt; from side menu, choose &lt;strong&gt;React&lt;/strong&gt; and generate an API key with &lt;strong&gt;all scopes checked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR0-yh8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwnhivvi8fr48u16iy4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR0-yh8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwnhivvi8fr48u16iy4a.png" alt="Add button"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Success! üéâ Now you just have to follow the integration guide.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-integrate-it-into-cra-app"&gt;
  &lt;/a&gt;
  Let's integrate it into CRA App
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate brand new CRA App and open it your favorite editor&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app tolgee-hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Tolgee packages ‚¨áÔ∏è&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @tolgee/react @tolgee/ui --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Tolgee properties to you development &lt;code&gt;.env&lt;/code&gt; file &lt;code&gt;env.development.local&lt;/code&gt; by &lt;strong&gt;copying it&lt;/strong&gt; from the integration guide&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_TOLGEE_API_URL=https://app.tolgee.io
REACT_APP_TOLGEE_API_KEY=&amp;lt;your API key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wrap your App component in &lt;code&gt;index.js&lt;/code&gt; with &lt;code&gt;TolgeeProvider&lt;/code&gt; component. Again, you can copy it from the integration guide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code&gt;App.js&lt;/code&gt; and replace all the crap with simple "Hello world!" message.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrap the "Hello world!" with &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; component and add keyName prop.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="na"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello_world"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's run the App in the browser and see the magic! ü™Ñ Hold your &lt;em&gt;ALT&lt;/em&gt; key and move your mouse over the text. It should be highlighted. When you click it, dialog opens and you're able to edit the text ‚úèÔ∏è or generate screenshots. üì∑&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDpNpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz4o6exaqanlxcm6ruft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDpNpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz4o6exaqanlxcm6ruft.png" alt="In-context translation of hello_world key"&gt;&lt;/a&gt;&lt;br&gt;
After you hit the update button, your &lt;code&gt;Hello World!&lt;/code&gt; text will be immediately changed to the new value!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zypGE1kk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqd1z1v4ubq0oxfuhmz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zypGE1kk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqd1z1v4ubq0oxfuhmz1.png" alt="The result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#congratulations-youre-done"&gt;
  &lt;/a&gt;
  Congratulations! You're done! üéâüéâüéâ
&lt;/h2&gt;

&lt;p&gt;You can find the resulting code in &lt;a href="https://github.com/JanCizmar/tolgee-react-hello-world"&gt;this GitHub repo&lt;/a&gt;, &lt;strong&gt;but you have to add your &lt;code&gt;.env.development.local&lt;/code&gt; file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you are able to translate your Applications with Tolgee. To learn more about Tolgee or to find out how to translate more complicated cases, &lt;a href="https://tolgee.io"&gt;visit our docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;Tolgee is open-source tool simplifying the process of web based application. It has this features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's open-source&lt;/li&gt;
&lt;li&gt;You can translate in the context of your App&lt;/li&gt;
&lt;li&gt;You can generate screenshots automatically&lt;/li&gt;
&lt;li&gt;You should use it and save time!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üôèüôèüôè If you like what we do, please star our GitHub projects. üôèüôèüôè&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/server"&gt;Tolgee Server&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/tolgee-js"&gt;Tolgee JS&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://tolgee.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkILodBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq3xtc3ikjzpbkx3it93.jpg" alt="Mouse"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Greater Than &amp; Greater Than or Equal To ( $gt &amp; $gte ) Operators in MongoDB | Theory with Hands-on</title>
      <author>Srajan Gupta</author>
      <pubDate>Mon, 25 Oct 2021 15:26:36 +0000</pubDate>
      <link>https://dev.to/srajangupta__/greater-than-greater-than-or-equal-to-gt-gte-operators-in-mongodb-theory-with-hands-on-1pl7</link>
      <guid>https://dev.to/srajangupta__/greater-than-greater-than-or-equal-to-gt-gte-operators-in-mongodb-theory-with-hands-on-1pl7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BTeGXtAxVvE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial is all about the Greater Than &amp;amp; Greater Than or Equal To Operators in MongoDB.&lt;br&gt;
This tutorial includes both theoretical and hands-on explanation.&lt;/p&gt;

&lt;p&gt;Project Enquiries: &lt;a href="https://www.srajangupta.com/"&gt;https://www.srajangupta.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>mongoose</category>
      <category>nosql</category>
      <category>node</category>
    </item>
    <item>
      <title>1 line of code: How to check if an Array is empty </title>
      <author>martin krause</author>
      <pubDate>Mon, 25 Oct 2021 15:17:19 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-check-if-an-array-is-empty-4p8g</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-check-if-an-array-is-empty-4p8g</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isEmptyArray = arr =&amp;gt; !Array.isArray(arr) ? new Error() : ! arr.length;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checks if the given argument is an empty Array. &lt;/p&gt;

&lt;p&gt;Returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a boolean &lt;code&gt;false&lt;/code&gt; if the array is not empty&lt;/li&gt;
&lt;li&gt;a boolean &lt;code&gt;true&lt;/code&gt; if the array is empty&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;Error&lt;/code&gt; if it's not an Array&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Part 1: Rehosting git repositories on IPFS</title>
      <author>woss</author>
      <pubDate>Mon, 25 Oct 2021 15:11:57 +0000</pubDate>
      <link>https://dev.to/woss/part-1-rehosting-git-repositories-on-ipfs-23bf</link>
      <guid>https://dev.to/woss/part-1-rehosting-git-repositories-on-ipfs-23bf</guid>
      <description>&lt;p&gt;Have you ever wanted to have a truly distributed way of hosting the git repository at a specific revision, tag, or branch, always available even when the remote server is down? If the answer is YES then this post is for you.&lt;/p&gt;

&lt;p&gt;In this post, you will learn how to rehost any git repository by revision, tag, or branch on IPFS.&lt;/p&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the difference between a bare and normal repository. More info on &lt;a href="https://stackoverflow.com/a/42900694/2764898"&gt;StackOverflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;storing files on IPFS and what is the CID&lt;/li&gt;
&lt;li&gt;a running &lt;a href="https://docs.ipfs.io/how-to/command-line-quick-start/"&gt;IPFS node&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;and of course git knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's dig in! ‚öíÔ∏è&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will use a dummy repository, and its source code is located here &lt;a href="https://github.com/woss/dummy"&gt;https://github.com/woss/dummy&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-rehosting"&gt;
  &lt;/a&gt;
  Basic rehosting
&lt;/h2&gt;

&lt;p&gt;Clone the bare repository and enter the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="nt"&gt;--bare&lt;/span&gt; https://github.com/woss/dummy dummy.git
&lt;span class="nb"&gt;cd &lt;/span&gt;dummy.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are going to use IPFS to store the data, we need to tell git to change certain things in the bare repo to support dumb servers. IPFS is considered a dumb server because it cannot handle the updates, only reads. More info can be found here: &lt;a href="https://git-scm.com/docs/git-update-server-info"&gt;update-server-info&lt;/a&gt;, &lt;a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#_dumb_http"&gt;dumb server&lt;/a&gt;, and &lt;a href="https://git-scm.com/docs/gitrepository-layout"&gt;git-repository-layout&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git update-server-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to upload this bare repo to the IPFS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;### choose only one&lt;/span&gt;
ipfs add &lt;span class="nt"&gt;--cid-version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;             &lt;span class="c"&gt;# this pins the CID by default &lt;/span&gt;
ipfs add &lt;span class="nt"&gt;--pin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;--cid-version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# this will not pin the CID&lt;/span&gt;
&lt;span class="c"&gt;### choose only one&lt;/span&gt;

...
... 
... 
added bafybeihptjdt3maqy66vjwklpk6va3zavwziu6zhftqaedttux7dipzjxy &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We have rehosted our git repository on the default branch (in our case it's &lt;code&gt;main&lt;/code&gt;) with all tag references.&lt;/p&gt;

&lt;p&gt;Now, you should be able to see your rehosted repository on your IPFS gateway or use it as a git dependency with your favorite package manager. üéâüéâüéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-rehosting"&gt;
  &lt;/a&gt;
  Advanced rehosting
&lt;/h2&gt;

&lt;p&gt;In the previous section, we did the most basic rehosting. Here you will learn how to rehost the tag, branch and a revision. We will not focus on the differences in the CID for the same revision, tag or a branch given the larger git history. We will cover that in the Part 2 of this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rehosting-the-revision"&gt;
  &lt;/a&gt;
  Rehosting the revision
&lt;/h3&gt;

&lt;p&gt;In the normal repository to switch to a specific revision we would do this &lt;code&gt;git reset --hard 20888c33cd0f6f897703198199f33369cba8639a&lt;/code&gt;. This puts the repository into the &lt;a href="https://git-scm.com/docs/git-checkout#_detached_head"&gt;Detached HEAD state&lt;/a&gt; which is quite useful for the CI and testing the specific PR or MR. It is also very useful for rehosting since you are making sure that anybody who clones the repository will get the desired revision by default without knowing anything about the git history beforehand. This way you can be sure that the dependency behind the rehosted version will always produce the same code.&lt;/p&gt;

&lt;p&gt;That said, the tricky part is that on the bare repositories you cannot run &lt;code&gt;[git reset](https://git-scm.com/docs/git-reset)&lt;/code&gt; since the bare repo doesn't contain a working tree. Here are two different ways to accomplish &lt;code&gt;git reset&lt;/code&gt; on a bare repository:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Detaching the HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to force a bare repo into the detached state by manually changing the HEAD to the revision we need. This can be done like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ git log
2021-10-19 aa97502 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.3.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; Merge pull request &lt;span class="c"&gt;#1 from woss/change-1  [Daniel Maricic]&lt;/span&gt;
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;origin/change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic] &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;&amp;lt; we need this!!!&lt;/span&gt;
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

&lt;span class="c"&gt;# get the full revision, short will not work&lt;/span&gt;
‚ùØ git rev-parse 20888c3
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ &lt;span class="nb"&gt;echo &lt;/span&gt;20888c33cd0f6f897703198199f33369cba8639a &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; HEAD

‚ùØ &lt;span class="nb"&gt;cat &lt;/span&gt;HEAD
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ git log
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;HEAD, tag: v0.2.0, main&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Now you can use &lt;code&gt;[shell#2]()&lt;/code&gt;and then &lt;code&gt;[shell#3]()&lt;/code&gt; to upload your repo to the IPFS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating the reference to the specific revision with the default or custom branch name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are not comfortable with the &lt;strong&gt;Detached HEAD state,&lt;/strong&gt; this approach kind of cheats the refs to point the &lt;code&gt;main&lt;/code&gt; branch to a different revision you can use following. Both of the commands will create the file called &lt;code&gt;main&lt;/code&gt; ( default branch ) under &lt;code&gt;refs/head&lt;/code&gt; with the value of the revision identifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ git log
2021-10-19 aa97502 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.3.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; Merge pull request &lt;span class="c"&gt;#1 from woss/change-1  [Daniel Maricic]&lt;/span&gt;
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;origin/change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic] &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;&amp;lt; we need this!!!&lt;/span&gt;
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ git rev-parse 20888c3
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ git update-ref refs/heads/main 20888c33cd0f6f897703198199f33369cba8639a
&lt;span class="c"&gt;# or&lt;/span&gt;
‚ùØ git update-ref HEAD 20888c33cd0f6f897703198199f33369cba8639a

‚ùØ tree refs
refs
‚îú‚îÄ‚îÄ heads
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main
‚îî‚îÄ‚îÄ tags

‚ùØ &lt;span class="nb"&gt;cat &lt;/span&gt;refs/heads/main
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ git log
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.2.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to name the reference differently, let's say &lt;code&gt;rehosted&lt;/code&gt; instead of &lt;code&gt;main&lt;/code&gt;, to avoid confusion with the upstream &lt;code&gt;main&lt;/code&gt; branch, you can do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ git log
2021-10-19 aa97502 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.3.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; Merge pull request &lt;span class="c"&gt;#1 from woss/change-1  [Daniel Maricic]&lt;/span&gt;
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;origin/change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic] &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;&amp;lt; we need this!!!&lt;/span&gt;
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ git rev-parse 20888c3
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ git update-ref refs/heads/rehosted 20888c33cd0f6f897703198199f33369cba8639a

‚ùØ tree refs
refs
‚îú‚îÄ‚îÄ heads
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ rehosted
‚îî‚îÄ‚îÄ tags

‚ùØ &lt;span class="nb"&gt;cat &lt;/span&gt;refs/heads/rehosted
20888c33cd0f6f897703198199f33369cba8639a

‚ùØ git log
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;HEAD, tag: v0.2.0, rehosted&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rehosting-the-branch"&gt;
  &lt;/a&gt;
  Rehosting the branch
&lt;/h3&gt;

&lt;p&gt;This approach is supported by the bare repo. It involves changing the refs using the &lt;code&gt;[git symbolic-ref](https://git-scm.com/docs/git-symbolic-ref)&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;Let's say we want to point to the branch called &lt;code&gt;change-1&lt;/code&gt; we would do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ git log
2021-10-19 aa97502 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.3.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; Merge pull request &lt;span class="c"&gt;#1 from woss/change-1  [Daniel Maricic]&lt;/span&gt;
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;origin/change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic] &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;&amp;lt; we need this!!!&lt;/span&gt;
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ git symbolic-ref HEAD refs/heads/change-1

‚ùØ git log
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ &lt;span class="nb"&gt;cat &lt;/span&gt;HEAD
ref: refs/heads/change-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Now you can use &lt;code&gt;[shell#2]()&lt;/code&gt;and then &lt;code&gt;[shell#3]()&lt;/code&gt; to upload your repo to the IPFS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rehosting-the-tag"&gt;
  &lt;/a&gt;
  Rehosting the tag
&lt;/h3&gt;

&lt;p&gt;This approach is supported by the bare repo. It involves changing the refs using the &lt;code&gt;[git symbolic-ref](https://git-scm.com/docs/git-symbolic-ref)&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ git log
2021-10-19 aa97502 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main, tag: v0.3.0, origin/main, origin/HEAD&lt;span class="o"&gt;)&lt;/span&gt; Merge pull request &lt;span class="c"&gt;#1 from woss/change-1  [Daniel Maricic]&lt;/span&gt;
2021-10-19 3a227d8 &lt;span class="o"&gt;(&lt;/span&gt;origin/change-1&lt;span class="o"&gt;)&lt;/span&gt; Merge branch &lt;span class="s1"&gt;'main'&lt;/span&gt; into change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7c17223 commit to change-1  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic] &lt;span class="c"&gt;# &amp;lt;&amp;lt;&amp;lt;&amp;lt; we need this!!!&lt;/span&gt;
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 7e962ca add changefile  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ git tag
v0.2.0
v0.3.0

‚ùØ git symbolic-ref HEAD refs/tags/v0.2.0

‚ùØ git log
2021-10-18 20888c3 &lt;span class="o"&gt;(&lt;/span&gt;HEAD, tag: v0.2.0&lt;span class="o"&gt;)&lt;/span&gt; third commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 25ad655 second commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]
2021-10-18 6365c84 first commit  &lt;span class="o"&gt;[&lt;/span&gt;Daniel Maricic]

‚ùØ &lt;span class="nb"&gt;cat &lt;/span&gt;HEAD
ref: refs/tags/v0.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Now you can use &lt;code&gt;[shell#2]()&lt;/code&gt;and then &lt;code&gt;[shell#3]()&lt;/code&gt; to upload your repo to the IPFS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unpacking-the-git-object"&gt;
  &lt;/a&gt;
  Unpacking the git object
&lt;/h2&gt;

&lt;p&gt;It's hard to summarize what are the &lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"&gt;git objects&lt;/a&gt; in a single sentence ( or at least it is for me ), but essentially it is the git database. All the history and file contents are there ( not the LFS ).  Since git is trying to occupy the least amount of space possible it does a lot of optimizations and one of them is packing the objects together into things called &lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Packfiles"&gt;packfiles&lt;/a&gt;. The more your repository grows the more packfiles will be created and the bigger they get.  &lt;/p&gt;

&lt;p&gt;For example, at the time of writing, Linux git repo has 8358230 objects which is quite a large number and it will take some time to clone. Now, imagine unpacking these objects just so you can leverage the IPFS deduplication feature! It sounds tempting on smaller repositories, like our dummy one, which has only 19 objects, but on the big ones ‚Äî definitely no!  &lt;/p&gt;

&lt;p&gt;Unpacking the packfiles and uploading them to the IPFS has these major effects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üëéüèΩ significantly increases the rehosting time&lt;/li&gt;
&lt;li&gt;üëéüèΩ significantly increases the clone time&lt;/li&gt;
&lt;li&gt;üëçüèΩ IPFS deduplicates files, resulting in smaller disk usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I suggest unpacking &lt;strong&gt;AFTER&lt;/strong&gt; the &lt;code&gt;Re-hosting the *&lt;/code&gt; sections.&lt;/p&gt;

&lt;p&gt;Those who want to rehost smaller repositories and leverage the IPFS deduplication here is how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;objects/pack/&lt;span class="k"&gt;*&lt;/span&gt;.pack &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;### choose only one&lt;/span&gt;
&lt;span class="c"&gt;# if using the for example nodejs exec this will break&lt;/span&gt;
git unpack-objects &amp;lt; &lt;span class="k"&gt;*&lt;/span&gt;.pack
&lt;span class="c"&gt;# but not this&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.pack | git unpack-objects
&lt;span class="c"&gt;### choose only one&lt;/span&gt;

&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.pack
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; objects/pack/&lt;span class="k"&gt;*&lt;/span&gt;.idx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use &lt;code&gt;[shell#2]()&lt;/code&gt;and then &lt;code&gt;[shell#3]()&lt;/code&gt; to upload your repo to the IPFS.&lt;/p&gt;

&lt;p&gt;Kudos to and inspired by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.ipfs.io/how-to/host-git-style-repo/"&gt;https://docs.ipfs.io/how-to/host-git-style-repo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/whyrusleeping/git-ipfs-rehost"&gt;https://github.com/whyrusleeping/git-ipfs-rehost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/4a3accb6fdfd77ec6ebee20bed211731"&gt;https://gist.github.com/jfmherokiller/4a3accb6fdfd77ec6ebee20bed211731&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading. If you have found this post useful, please share and maybe subscribe.&lt;/p&gt;

</description>
      <category>git</category>
      <category>ipfs</category>
      <category>rehosting</category>
    </item>
    <item>
      <title>Freak out! Showcasing Chic Modules 1.0 ‚ú® A Styled-like CSS-Modules API</title>
      <author>Liam Howell</author>
      <pubDate>Mon, 25 Oct 2021 15:11:53 +0000</pubDate>
      <link>https://dev.to/eels/freak-out-showcasing-chic-modules-10-a-styled-like-css-modules-api-ej0</link>
      <guid>https://dev.to/eels/freak-out-showcasing-chic-modules-10-a-styled-like-css-modules-api-ej0</guid>
      <description>&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#a-familiar-styledlike-api-for-working-with-cssmodules-in-react"&gt;
  &lt;/a&gt;
  A familiar styled-like API for working with css-modules in React
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another week, another announcement. While the wind may have been taken out of my sails by Facebook talking about their own styling solution, I'm pleased to announce that my own take on managing components styles in React has reached stable status. Introducing &lt;a href="https://github.com/eels/chic-modules"&gt;Chic Modules&lt;/a&gt;! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-chicmodules-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;chic-modules&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;While I adore the styled pattern for composing React components, I also love css-modules and separating concerns. Life isn't all sunshine and roses though. Complex class compositions often result in ugly inline ternary operators for conditional class names and style modifiers. I wanted to create a compromise, or "best-of-both-worlds" solution, that wraps a standard css-modules implementation in a well-established API.&lt;/p&gt;

&lt;p&gt;This project isn't meant to supersede others like styled-components, and doesn't attempt to join the conversation around css-in-js vs css-modules (there's &lt;em&gt;literally&lt;/em&gt; thousands of articles for that), it's simply meant to be a different solution and alternative approach. My attitude is, if you're going to use css-modules anyway then why not give &lt;code&gt;chic-modules&lt;/code&gt; a whirl.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;üß† Intelligent prop-based style modifiers&lt;/li&gt;
&lt;li&gt;ü§ù Extending/sharing styles between components&lt;/li&gt;
&lt;li&gt;‚õì Static prop management via &lt;code&gt;attrs&lt;/code&gt; constructor &lt;/li&gt;
&lt;li&gt;üèÉ‚Äç‚ôÇÔ∏è Dynamic run-time style management&lt;/li&gt;
&lt;li&gt;üîé Full TypeScript support&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application.module.css&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;papayawhip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;palevioletred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./application.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chic-modules&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Call the chic-modules `create` factory and pass the&lt;/span&gt;
&lt;span class="c1"&gt;// required styles object as an argument&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create a &amp;lt;Wrapper&amp;gt; React component that inherits the `.wrapper`&lt;/span&gt;
&lt;span class="c1"&gt;// class from the styles object and renders a &amp;lt;section&amp;gt; html element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create a &amp;lt;Title&amp;gt; React component that inherits the `.title`&lt;/span&gt;
&lt;span class="c1"&gt;// class from the styles object and renders a &amp;lt;h1&amp;gt; html element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Use them like regular React components ‚Äì except they're styled!&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World, this is my first chic component!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you'll see in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCzm_Pfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/86960670/131226145-180aadcc-4805-409d-9a57-81d7dc94d69a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCzm_Pfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/86960670/131226145-180aadcc-4805-409d-9a57-81d7dc94d69a.png" alt="Chic Modules example usage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/brave-lewin-ofw92?file=/src/components/application.jsx"&gt;Open in CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#style-modifiers"&gt;
  &lt;/a&gt;
  Style Modifiers
&lt;/h4&gt;

&lt;p&gt;As I briefly touched upon in the opening statement, my biggest gripe when using css-modules is the cumbersome nature of adding "modifier" class names to components. Where I believe &lt;code&gt;chic-modules&lt;/code&gt; really shines is in its attempt to solve this problem.&lt;/p&gt;

&lt;p&gt;Taking a look at this pretty standard setup using the &lt;a href="https://www.npmjs.com/package/classnames"&gt;classnames&lt;/a&gt; package, you can see that a lot of extra steps are required to attach conditional class names to a component. This problem only gets worse when you try to go it alone without a class name utility package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nogoodwoman-cumbersome"&gt;
  &lt;/a&gt;
  üôÖ‚Äç‚ôÄÔ∏è Cumbersome
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classnames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./button.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isPrimary&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button--primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="nx"&gt;isPrimary&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// outputs &amp;lt;button class="button button--primary"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, &lt;code&gt;chic-modules&lt;/code&gt; can infer when a prop is being used as a style modifier and automagically add the relevant modifier class if it exists in the styles object to the component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sunglasses-chic"&gt;
  &lt;/a&gt;
  üòé Chic
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./button.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chic-modules&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isPrimary&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;isPrimary&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isPrimary&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// outputs &amp;lt;button class="button button--primary"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any prop can be used to infer a style modifier as long as it starts with &lt;code&gt;has&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;with&lt;/code&gt; and its value evaluates as truthy. You can also pass string values to props prefixed with &lt;code&gt;with&lt;/code&gt; and have that value used in the constructed modifier class.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chic-modules&lt;/code&gt; expects that your styles follow the &lt;a href="http://getbem.com/naming/"&gt;BEM&lt;/a&gt; naming convention, so when using this package ensure that your stylesheet aligns with this structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;hasBorder&lt;/span&gt; &lt;span class="na"&gt;isPrimary&lt;/span&gt; &lt;span class="na"&gt;withTextColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// outputs &amp;lt;button class="button button--border button--primary button--text-color-black"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#using-as"&gt;Using &lt;code&gt;as&lt;/code&gt; prop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#using-attrs"&gt;Using &lt;code&gt;attrs&lt;/code&gt; constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#additional-styles"&gt;Additional Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#multiple-base-class-names"&gt;Multiple Base Class Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#typescript"&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eels/chic-modules#dynamic-styles"&gt;Dynamic Styles&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/eels/chic-modules#server-side-rendering"&gt;Server-Side Rendering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interested? Read the full &lt;a href="https://github.com/eels/chic-modules#readme"&gt;documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-future-helping-out"&gt;
  &lt;/a&gt;
  The Future / Helping Out
&lt;/h4&gt;

&lt;p&gt;My main focus for the project at the moment is performance improvements over additional features. I think the initial feature-set is in a good place and I would like to get more insights on any real world usage before thinking about adding more. There's also definitely parts of the code base that could do with being fine-tuned and abstracted a little more.&lt;/p&gt;

&lt;p&gt;If you find &lt;code&gt;chic-modules&lt;/code&gt; interesting and would like to help out then feel free to take a look over the code and suggest any improvements. Additionally, it would be a big help if you could star, tweet or mention this project to raise some awareness!&lt;/p&gt;

&lt;p&gt;And of course, if you do end up building anything with &lt;code&gt;chic-modules&lt;/code&gt; then definitely send it my way! I'd love to see what's being made and I'll even include it in the &lt;a href="https://github.com/eels/chic-modules#built-with-chic-modules"&gt;README&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

&lt;p&gt;C'est chic!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/eels/chic-modules"&gt;https://github.com/eels/chic-modules&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>webdev</category>
      <category>news</category>
    </item>
  </channel>
</rss>
