<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PHP vs Javascript - What should you choose?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 10 May 2021 12:43:23 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</link>
      <guid>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</guid>
      <description>&lt;p&gt;In this short tutorial, we take a closer look at a controversial topic that is PHP vs JavaScript. We look at their pros and cons and weigh them against each other. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at Flexiple, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;PHP vs JavaScript: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PHP"&gt;PHP - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thoughts"&gt;Closing thoughts - PHP vs JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#php-vs-javascript-an-overview"&gt;
  &lt;/a&gt;
  PHP vs JavaScript: An Overview&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Most blogs under this topic would mention that comparing PHP and JavaScripts are like comparing apples and oranges. However, the rationale supporting this is - PHP is used on the server-side, whereas JavaScript is primarily used on the client-side. Although javascript is largely used on the client-side, the development of NodeJS (A backend framework) has made javascript a full-stack programming language.&lt;/p&gt;

&lt;p&gt;Even though this does not level the playing field it does beg the question of whether a developer should choose - JavaScript/ PHP or developer the entire website using Javascript. And this blog is aimed towards answering this question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-pros-and-cons"&gt;
  &lt;/a&gt;
  JavaScript - Pros and Cons&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript has been around for ages since 1995, this has not only allowed the creators to refine the language but has also helped grow a large community of active users. In turn, resulting in a plethora of well-documented tutorials and troubleshooting methods readily available on the internet.&lt;/p&gt;

&lt;p&gt;JavaScript as a language was developed to create dynamic and interactive websites improving the user experience. Catering to the client-side it was built to have minimal server interaction, reducing the load on the server. And because of this high-performance Javascript is often used on one-page websites and streaming platforms. The pros of Javascript don't stop here, the introduction of frameworks such as ReactJS, AngularJS, VueJS, NodeJS, etc has made it an extensible language. And with each framework offering different functionality and performance developers are quick to adopt them.&lt;/p&gt;

&lt;p&gt;This leads us to our first con, given its vast usage the learning curve can be quite intimidating, and with each framework offering a different syntax it would require significant dedication and practice to master them. However, the returns on doing so are quite significant and in case you are looking to enter mobile development, javascript is the way forward. Another major con when it comes to using Javascript is security. With the source code easily visible to anyone, it has become a major concern. There are ways for you to enhance security but these methods would require additional effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-pros-and-cons"&gt;
  &lt;/a&gt;
  PHP - Pros and Cons &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;PHP is a general-purpose language that has also been around since 1995. Similar to Javascript, PHP also has a large active community and was built to suit web development. And since PHP has always cantered to backend development it has a rich library and support to more features and much better security than javascript&lt;/p&gt;

&lt;p&gt;Areas, where PHP stands out, are its seamless performance with Content Management Systems like Word press, Drupal, etc. This is why PHP is commonly used in blogs, Media, and E-commerce websites.  Another pro is its compatibility with serves like SQL, MariaDB, Postgresql, etc. The only con I have faced while using PHP has been its performance - Unlike Javascript, PHP is synchronous and this makes it lose out on speed and performance. &lt;/p&gt;

&lt;p&gt;When it comes to the learning curve, PHP is significantly easier. Tasks such as setting up a server are quite simple, and the frameworks as well can be easily learned without many prerequisites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts-php-vs-javascript"&gt;
  &lt;/a&gt;
  Closing thoughts - PHP vs JavaScript&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you have reached it this far you must be aware of the pros and cons of each language. And it must be quite evident that choosing between the two would boil to the use-case and the developers' knowledge of the languages. My personal choice would be to chose JavaScript/ PHP while working on complicated websites as this would allow you to get the best of both halves. A few famous websites that utilize this are - Wikipedia, Facebook, Yahoo, etc. &lt;/p&gt;

&lt;p&gt;However, if you are competent in Javascript and looking to build a smaller one-page or streaming website - hands down javascript all the way.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Do I need to do private side projects to be/become a professional web developer? </title>
      <author>Owlcowl</author>
      <pubDate>Mon, 10 May 2021 12:17:31 +0000</pubDate>
      <link>https://dev.to/s2engineers/do-i-need-to-do-private-side-projects-to-be-become-a-professional-web-developer-5137</link>
      <guid>https://dev.to/s2engineers/do-i-need-to-do-private-side-projects-to-be-become-a-professional-web-developer-5137</guid>
      <description>&lt;p&gt;Disclaimer: professional in this case means making a living as a web developer. &lt;/p&gt;

&lt;p&gt;This is a question I asked myself and discussed with other developers over my career multiple times. It seems like most web developers have at least one private side project ongoing or they are planning to. &lt;br&gt;
For me personally I also felt some need in the past to have a side project because all the cool kids I follow on Twitter have some and they have fun with it and are successful, at least that is what it looked like for me. And I wanted to have fun and be successful too. &lt;/p&gt;

&lt;p&gt;If you were on the job hunt in the last years as a web developer or talked to some devs that were you might asked yourself the same.  It often even feels like if you do not have an open source (e.g. GitHub) account and add that to your CV nobody will even look at it. &lt;/p&gt;

&lt;p&gt;So that specifically developers that are new to the profession get the feeling there is a need for private side projects to become and stay a web developer, is no miracle to me. &lt;/p&gt;

&lt;p&gt;From my experience, after more than 10 years of software development, private side projects are not a good indicator if someone is a professional web developer. Over my career I had years with and without side projects and I wasn't the only one, even the cool kids take breaks from their side projects.&lt;br&gt;&lt;br&gt;
But I will say that private side projects can be quite helpful if you want to improve your coding skills or want to get into some new technology because you can do everything on your own terms. &lt;br&gt;
They are no requirement though. &lt;/p&gt;

&lt;p&gt;And please do not forget there are web developers out there which do not have any private time to spare for side projects and this does not make them any less a professional web developer. &lt;/p&gt;

&lt;p&gt;What are your thoughts and experiences with this? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codeiscolorful</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Interactive window with a single div</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 10 May 2021 12:13:09 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/interactive-window-with-a-single-div-4apj</link>
      <guid>https://dev.to/alvaromontoro/interactive-window-with-a-single-div-4apj</guid>
      <description>&lt;p&gt;First of all, let's clarify one point: when talking about a window, we refer to an actual window like on the wall, not a window on a computer. This post will be about how to draw a window with a single &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and how to make it interactive, so you can open/close the blinds by pulling the string.&lt;/p&gt;

&lt;p&gt;This is what we are going to develop (&lt;a href="https://codepen.io/alvaromontoro/full/eYvmQoj"&gt;it looks better on larger screens&lt;/a&gt;, as it is sometimes tough to pull the string on mobile):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYvmQoj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This demo was inspired by &lt;a class="mentioned-user" href="https://dev.to/jh3y"&gt;@jh3y&lt;/a&gt;
's 3D window demo that uses the new &lt;code&gt;@container&lt;/code&gt; query, and that you can &lt;a href="https://codepen.io/jh3y/pen/qBrEMEe"&gt;see on CodePen too&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3BoXZiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1390797483484327936/pu/img/kx_AP0NBbPwrQqxN.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkhTix2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355149810148515842/NBuYxo5I_normal.jpg" alt="Jhey 🐻🛠 (Exploring Opportunities ✨) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠 (Exploring Opportunities ✨)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Peter's Blinds v2 🪟&lt;br&gt;&lt;br&gt;Debunking memes with CSS container queries!&lt;br&gt;&lt;br&gt;This time it's tested in Chrome Canary 😅&lt;br&gt;&lt;br&gt;No JavaScript required&lt;br&gt;&lt;br&gt;Pull the cord(resize the element 🤫) to open blinds&lt;br&gt;&lt;br&gt;Queries update custom properties 😎&lt;br&gt;&lt;br&gt;cc &lt;a href="https://twitter.com/TerribleMia"&gt;@TerribleMia&lt;/a&gt; &lt;br&gt;👉 &lt;a href="https://t.co/P9ITDwLQ8o"&gt;codepen.io/jh3y/pen/qBrEM…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:41 PM - 07 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I decided to do something simpler in 2D (I should go back to doing 3D CSS demos, it is fun.) And as a challenge, limit the number of elements to the lowest possible. In this case, that was one: a single &lt;code&gt;div&lt;/code&gt;. I could draw the window and wall with &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;, but it was not possible to animate them (or at least I couldn't.) Initially, I was going to use the &lt;code&gt;@container&lt;/code&gt; query too but then thought of a way of doing it without needing that new feature.&lt;/p&gt;

&lt;p&gt;The background/wall is the &lt;code&gt;html&lt;/code&gt;/&lt;code&gt;body&lt;/code&gt; element (only one of them is needed) after applying multiple gradients as &lt;code&gt;background-image&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ep4BFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzu1w6qa0b80xzcg2m86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ep4BFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzu1w6qa0b80xzcg2m86.png" alt="Screenshot of the background mimicking a 50s style house interior with wallpaper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With 8 gradients, we can achieve that background:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One horizontal &lt;code&gt;linear-gradient&lt;/code&gt; for the pink and cream vertical lines.&lt;/li&gt;
&lt;li&gt;One vertical &lt;code&gt;linear-gradient&lt;/code&gt; for the railing and bottom of the wall.&lt;/li&gt;
&lt;li&gt;One vertical &lt;code&gt;linear-gradient&lt;/code&gt; for the decorative top paper (just the white and blue lines)&lt;/li&gt;
&lt;li&gt;Five &lt;code&gt;radial-gradient&lt;/code&gt; to make the circular pattern in the decorative paper on top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two vertical &lt;code&gt;linear-gradient&lt;/code&gt;. Why not combine them into a single one? Great question! There are some bugs in Chrome and Firefox that if a &lt;code&gt;linear-gradient&lt;/code&gt; has too many stops (8 or more), the lines will get blurred or distorted. For that reason, I had to break one large linear gradient into two smaller ones with less than 8 stops each.&lt;/p&gt;

&lt;p&gt;The window is a single &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element, for which we use different &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;linear-gradient&lt;/code&gt; to paint the frame, glass, and reflections.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;::before&lt;/code&gt; pseudo-element, we add the blinds using a &lt;code&gt;repeating-linear-gradient&lt;/code&gt;. And with the &lt;code&gt;::after&lt;/code&gt;, we draw the strings for the blinds.&lt;/p&gt;

&lt;p&gt;So far, the window is static. Just a drawing without interaction, but if we add the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* same as height */&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the window can grow and shrink vertically within the specified values (the bottom right corner of the &lt;code&gt;div&lt;/code&gt; will be the resizing handle in most browsers.) As we used absolute values for the linear gradients and shadows, the window will give the impression that it is always the same size, but the HTML element is actually changing height.&lt;/p&gt;

&lt;p&gt;And this is where the &lt;code&gt;::after&lt;/code&gt; pseudo-element comes into play. It will be the only one with relative size, so its background (used for the blinds cord) will grow along with the container.&lt;/p&gt;

&lt;p&gt;Finally, the blinds need to go up/down depending on the size of the container... which sounds like a great opportunity for the &lt;code&gt;@container&lt;/code&gt; query, but instead, we can calculate the height based on the height of the window (300px) and the height of the container (the &lt;code&gt;div&lt;/code&gt; itself).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;calc()&lt;/code&gt; and &lt;code&gt;clamp()&lt;/code&gt;, we can determine which size the blinds should have based on the size of the parent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="c"&gt;/* the background width is fixed, the height changes */&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;196px&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;900px&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;290px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is how we get an &lt;a href="https://codepen.io/alvaromontoro/full/eYvmQoj"&gt;interactive window with a single div element&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYvmQoj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. Let me know if you have any questions or if anything needs further explanation.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How does middleware work in Express?</title>
      <author>Simon Plenderleith</author>
      <pubDate>Mon, 10 May 2021 12:11:00 +0000</pubDate>
      <link>https://dev.to/simonplend/how-does-middleware-work-in-express-359f</link>
      <guid>https://dev.to/simonplend/how-does-middleware-work-in-express-359f</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is an adapted excerpt from my book, &lt;a href="https://expressapivalidation.com/"&gt;Express API Validation Essentials&lt;/a&gt;. It teaches you a complete API validation strategy which you can start applying in your Express applications today.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;The Express documentation tells us that "an Express application is essentially a series of middleware function calls". It sounds simple on the surface, but honestly, middleware can get pretty confusing. You've probably found yourself wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where is the right place to add this middleware in my application?&lt;/li&gt;
&lt;li&gt;When should I call the &lt;code&gt;next&lt;/code&gt; callback function, and what happens when I do?&lt;/li&gt;
&lt;li&gt;Why does the order of middleware matter?&lt;/li&gt;
&lt;li&gt;How can I write my own code for handling errors?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The middleware pattern is fundamental to building applications with Express, so you want to have a solid understanding of what middleware is and how it works.&lt;/p&gt;

&lt;p&gt;In this article we're going to dig into the middleware pattern. We'll also look at the different types of Express middleware and how to effectively combine them when we build our applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jump-links"&gt;
  &lt;/a&gt;
  Jump links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#the-middleware-pattern"&gt;The middleware pattern&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#middleware-syntax"&gt;Middleware syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-two-types-of-middleware"&gt;The two types of middleware&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#plain-middleware"&gt;Plain middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-handling-middleware"&gt;Error handling middleware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#using-middleware"&gt;Using middleware&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#at-the-route-level"&gt;At the route level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-the-router-level"&gt;At the router level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-the-application-level"&gt;At the application level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-middleware-pattern"&gt;
  &lt;/a&gt;
  The middleware pattern
&lt;/h2&gt;

&lt;p&gt;In Express, middleware are a specific style of function which you configure your application to use. They can run any code you like, but they typically take care of processing incoming requests, sending responses and handling errors. They are the building blocks of every Express application.&lt;/p&gt;

&lt;p&gt;When you define a route in Express, the route handler function which you specify for that route is a middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routeHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// execute something&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.1)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Middleware is flexible. You can tell Express to run the same middleware function for different routes, enabling you to do things like making a common check across different API endpoints.&lt;/p&gt;

&lt;p&gt;As well as writing your own middleware functions, you can also install third-party middleware to use in your application. The Express documentation lists some &lt;a href="https://expressjs.com/en/resources/middleware.html"&gt;popular middleware modules&lt;/a&gt;. There are also a wide variety of Express middleware modules available on &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#middleware-syntax"&gt;
  &lt;/a&gt;
  Middleware syntax
&lt;/h3&gt;

&lt;p&gt;Here is the syntax for a middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {Object} request - Express request object (commonly named `req`)
 * @param {Object} response - Express response object (commonly named `res`)
 * @param {Function} next - Express `next()` function
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;middlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// execute something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.2)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: You might have noticed that I refer to &lt;code&gt;req&lt;/code&gt; as &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; as &lt;code&gt;response&lt;/code&gt;. You can name the parameters for your middleware functions whatever you like, but I prefer verbose variable names as I think that it makes it easier for other developers to understand what your code is doing, even if they're not familiar with the Express framework.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When Express runs a middleware function, it is passed three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Express request object (commonly named &lt;code&gt;req&lt;/code&gt;) - this is an extended instance of Node.js' built-in &lt;a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage"&gt;http.IncomingMessage&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;An Express response object (commonly named &lt;code&gt;res&lt;/code&gt;) - this is an extended instance of Node.js' built-in &lt;a href="https://nodejs.org/api/http.html#http_class_http_serverresponse"&gt;http.ServerResponse&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;An Express &lt;code&gt;next()&lt;/code&gt; function - Once the middleware function has completed its tasks, it must call the &lt;code&gt;next()&lt;/code&gt; function to hand off control to the next middleware. If you pass an argument to it, Express assumes it to be an error. It will skip any remaining non-error handling middleware functions and start executing error handling middleware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Middleware functions should not &lt;code&gt;return&lt;/code&gt; a value. Any value returned by middleware will not be used by Express.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-two-types-of-middleware"&gt;
  &lt;/a&gt;
  The two types of middleware
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#plain-middleware"&gt;
  &lt;/a&gt;
  Plain middleware
&lt;/h3&gt;

&lt;p&gt;Most middleware functions that you will work with in an Express application are what I call "plain" middleware (the Express documentation doesn't have a specific term for them). They look like the function defined in the middleware syntax example above (&lt;em&gt;Example 1.2&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Here is an example of a plain middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;plainMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The request method is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Ensure the next middleware function is called.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.3)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-handling-middleware"&gt;
  &lt;/a&gt;
  Error handling middleware
&lt;/h3&gt;

&lt;p&gt;The difference between &lt;a href="https://expressjs.com/en/guide/using-middleware.html#middleware.error-handling"&gt;error handling middleware&lt;/a&gt; and plain middleware is that error handler middleware functions specify four parameters instead of three i.e. &lt;code&gt;(error, request, response, next)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of an error handling middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorHandlingMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Ensure the next error handling middleware is called.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.4)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This error handling middleware function will be executed when another middleware function calls the &lt;code&gt;next()&lt;/code&gt; function with an error object e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;anotherMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something is wrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * This will cause Express to start executing error
     * handling middleware.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.5)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-middleware"&gt;
  &lt;/a&gt;
  Using middleware
&lt;/h2&gt;

&lt;p&gt;The order in which middleware are configured is important. You can apply them at three different levels in your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The route level&lt;/li&gt;
&lt;li&gt;The router level&lt;/li&gt;
&lt;li&gt;The application level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want a route (or routes) to have errors which they raise handled by an error handling middleware, you must add it after the route has been defined.&lt;/p&gt;

&lt;p&gt;Let's look at what configuring middleware looks like at each level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-route-level"&gt;
  &lt;/a&gt;
  At the route level
&lt;/h3&gt;

&lt;p&gt;This is the most specific level: any middleware you configure at the route level will only run for that specific route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routeHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.6)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-router-level"&gt;
  &lt;/a&gt;
  At the router level
&lt;/h3&gt;

&lt;p&gt;Express allows you to create &lt;a href="https://expressjs.com/en/api.html#router"&gt;Router&lt;/a&gt; objects. They allow you to scope middleware to a specific set of routes. If you want the same middleware to run for multiple routes, but not for all routes in your application, they can be very useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.7)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-application-level"&gt;
  &lt;/a&gt;
  At the application level
&lt;/h3&gt;

&lt;p&gt;This is the least specific level. Any middleware configured at this level will be run for all routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// define routes&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.8)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically you can define some routes, call &lt;code&gt;app.use(someMiddleware)&lt;/code&gt; , then define some other routes which you want &lt;code&gt;someMiddleware&lt;/code&gt; to be run for. I don't recommend this approach as it tends to result in a confusing and hard to debug application structure.&lt;/p&gt;

&lt;p&gt;You should only configure middleware at the application level if absolutely necessary i.e. it really must be run for every single route in your application. Every middleware function, no matter how small, takes &lt;em&gt;some&lt;/em&gt; time execute. The more middleware functions that need to be run for a route, the slower requests to that route will be. This really adds up as your application grows and is configured with lots of middleware. Try to scope middleware to the route or router levels when you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In this article we've learnt about the middleware pattern in Express. We've also learnt about the different types of middleware and how we can combine them when building an application with Express.&lt;/p&gt;

&lt;p&gt;If you'd like to read more about middleware, there are a couple of guides in the Express documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;Guide: Using middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/guide/writing-middleware.html"&gt;Guide: Writing middleware for use in Express apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;This article is an adapted excerpt from my book, &lt;a href="https://expressapivalidation.com/"&gt;Express API Validation Essentials&lt;/a&gt;. It teaches you a complete API validation strategy which you can start applying in your Express applications today.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tired-of-wasting-time-reading-nodejs-blog-posts-which-dont-actually-help-you-improve-your-projects"&gt;
  &lt;/a&gt;
  Tired of wasting time reading Node.js blog posts which don't actually help you improve your projects?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://simonplend.com/newsletter/"&gt;Sign up to my weekly-ish newsletter&lt;/a&gt; and I'll let you know when I publish a new blog post which helps solve your real developer problems. I'll also send you an awesome tip so we can level up together, as well as a handful of excellent things by other people.&lt;/p&gt;

</description>
      <category>node</category>
      <category>express</category>
      <category>middleware</category>
    </item>
    <item>
      <title>Top 10 Tools for Web Design</title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 10 May 2021 12:10:46 +0000</pubDate>
      <link>https://dev.to/thenerdydev/top-10-tools-for-web-design-39gb</link>
      <guid>https://dev.to/thenerdydev/top-10-tools-for-web-design-39gb</guid>
      <description>&lt;p&gt;&lt;em&gt;Are you looking for magic tools to ease out your design process ?&lt;/em&gt; &lt;br&gt;
Well, your search ends here. In this article, I am going to present you 10 tools that are a &lt;strong&gt;MUST&lt;/strong&gt; to ease out your design process and make your overall workflow super efficient. &lt;/p&gt;

&lt;p&gt;With me ? Amazing. Here we go. &lt;/p&gt;

&lt;p&gt;The first tool is: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-pexels"&gt;
  &lt;/a&gt;
  1. Pexels
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pexels.com&lt;/strong&gt; is my top most preferred website to grab royalty free images for my projects. The best part of these images is that they are professional high grade images that you can use in your web designs. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://pexels.com"&gt;https://pexels.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-css-clip-path-maker-clippy"&gt;
  &lt;/a&gt;
  2. CSS Clip Path Maker (Clippy)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clippy&lt;/strong&gt; is another amazing tool that you can use for image clipping. It gives you different templates that you can apply on your images to make them look different and eases the clipping process. So you drag a couple of points here and there and it gives you the CSS property for same that you can directly paste into your project and you are &lt;strong&gt;DONE&lt;/strong&gt;. Isn't it dead simple ? Pretty awesome, right?&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-css-gradient"&gt;
  &lt;/a&gt;
  3. CSS Gradient
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS Gradient&lt;/strong&gt; is another quality tool that helps you in creating amazing and sleek gradients to enhance the overlook look, feel and aesthetics of your website. This is another must have tool for web design.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://cssgradient.io/"&gt;https://cssgradient.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-animista"&gt;
  &lt;/a&gt;
  4. Animista
&lt;/h2&gt;

&lt;p&gt;Who can forget Animista ? It is literary one of the best CSS tools that I have used so far for creating amazing, smooth and clean animations. IMO it is the best tool that you can use to animate your CSS elements. It lets you go crazy and creative at the very same time. It also provides tons of COOL animations out of the box which can be useful for most of the cases. You can even tweak them a bit to generate animations with the desired effect that you are looking for. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://animista.net/"&gt;https://animista.net/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-colorhunt"&gt;
  &lt;/a&gt;
  4. ColorHunt
&lt;/h2&gt;

&lt;p&gt;Color Hunt is a free and open platform for color inspiration with thousands of trendy hand-picked color palettes. So use these palettes for colors that look great to the eye. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://colorhunt.co/"&gt;https://colorhunt.co/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-filter-css-generator"&gt;
  &lt;/a&gt;
  5. Filter CSS Generator
&lt;/h2&gt;

&lt;p&gt;A filter CSS generator that helps you quickly generate filter CSS declarations for your website. It comes with many options and it demonstrates instantly.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://cssgenerator.org/"&gt;https://cssgenerator.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-keyframesapp"&gt;
  &lt;/a&gt;
  5. Keyframes.app
&lt;/h2&gt;

&lt;p&gt;Keyframes helps you write better CSS. It provides dead simple visual tools to help you generate CSS for your projects.It is a pretty new tool but I feel it has tremendous potential. Currently it allows you to play with animations, colors and shadows. So feel free to try this tool as well. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://keyframes.app/"&gt;https://keyframes.app/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-bouncejs"&gt;
  &lt;/a&gt;
  6. Bounce.js
&lt;/h2&gt;

&lt;p&gt;Bounce.js is a handy JavaScript library that enables you to create complicated animations. Bounce.js has a mature user interface that allows you to either add different components – such as easing, duration, delay, and number of bounces – manually to your animation, or select a ready-to-use preset, then play the animation, and fine-tune the properties if it’s necessary.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://bouncejs.com"&gt;https://bouncejs.com&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-single-element-css-spinners"&gt;
  &lt;/a&gt;
  7. Single Element CSS Spinners
&lt;/h2&gt;

&lt;p&gt;Looking for enhancing your CSS designs with simple yet awesome looking animated loading spinners ? If the answer is yes, this CSS spinner library may be the perfect choice for you. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://projects.lukehaas.me/css-loaders/"&gt;https://projects.lukehaas.me/css-loaders/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-normalizecss"&gt;
  &lt;/a&gt;
  8. Normalize.css
&lt;/h2&gt;

&lt;p&gt;A HTML5-ready alternative to CSS resets. It preserves some useful browser default settings, normalizes styles for a wide range of HTML elements, corrects some common browser inconsistencies, and is well commented for easier use.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://necolas.github.io/normalize.css/"&gt;https://necolas.github.io/normalize.css/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-voxelcss"&gt;
  &lt;/a&gt;
  9. Voxel.css
&lt;/h2&gt;

&lt;p&gt;Voxel.css is a CSS library for 3D rendering. Voxel is flexible enough to be used for everything from 3D web animations to full-on video games. It exposes 4 different classes - Scene, World, Editor and Voxel. So it offers a customization that is as close as a full 3D animation website.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="http://www.voxelcss.com/"&gt;http://www.voxelcss.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-blush"&gt;
  &lt;/a&gt;
  10. Blush
&lt;/h2&gt;

&lt;p&gt;Easily create stunning and beautiful illustrations with collections made by artists across the globe&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://blush.design/"&gt;https://blush.design/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those are my 10 favorite resources which I use in countless projects, go ahead and try those and let me know what you think of them!&lt;/p&gt;

&lt;p&gt;If you are looking to learn CSS for &lt;strong&gt;FREE&lt;/strong&gt; or Web Development in general, make sure to check out the below article: &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Rust programming language: what is it &amp; how to learn it?</title>
      <author>Igor Cekelis</author>
      <pubDate>Mon, 10 May 2021 11:58:16 +0000</pubDate>
      <link>https://dev.to/barrage/rust-programming-language-what-is-it-how-to-learn-it-1867</link>
      <guid>https://dev.to/barrage/rust-programming-language-what-is-it-how-to-learn-it-1867</guid>
      <description>&lt;p&gt;Rust is a low-level systems programming language. While that might make Rust seem limited, it can be used to build many different types of applications. Rust is a tool, and tools are chosen depending on what you want to build.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-rust"&gt;
  &lt;/a&gt;
  First of all, what is Rust?
&lt;/h2&gt;

&lt;p&gt;As mentioned before, Rust is an open-source systems programming language. Rust aims to be memory-safe, thread-safe, fast, and secure. To achieve this, it introduces some new concepts, like ownership, borrowing, and lifetimes, which are the main things that keep Rust memory safe. These concepts might seem foreign if you have not seen them explicitly as you will in Rust.&lt;/p&gt;

&lt;p&gt;Thanks to these concepts, many errors in Rust are compile-time errors rather than runtime errors.&lt;/p&gt;

&lt;p&gt;Rust is a statically typed language, unlike JS, Python, Ruby, or Objective- C. As your code compiles, you will get compile type checking, and the compiler will let you know if you have any unhandled errors. Rather than re-running your application and trying to replicate an error that happened, you can spend more time writing the correct code.&lt;/p&gt;

&lt;p&gt;Let’s talk about ownership. In Rust, the compiler keeps track of which data “lives” in which scope or context. Because of this, you do not have to keep track of dangling pointers or references to parts of memory, which, if left unchecked, could leave you with segmentation faults or memory leaks.&lt;/p&gt;

&lt;p&gt;For example, in C, you have a function that returns a reference/pointer to some data. Then you call another function on that same reference, the code works, and everything seems fine, but little do you know the first pointer (returned from the function) has now been freed. This leaves you with a dangling pointer, and if you are not mindful, you could accidentally try to use that pointer again, and you will end up with some unexpected behavior.&lt;/p&gt;

&lt;p&gt;The Rust compiler keeps track of what function or what context holds what data at any given moment, so something like this most likely would not happen. At least not so easily, as the Rust compiler will let you know during compile-time that you have an error that needs to be handled.&lt;/p&gt;

&lt;p&gt;This is where ownership comes in; as mentioned before, a context or function can hold or own data, meaning the data lives in the function’s scope. Rust will not let us access that data outside of that scope unless we explicitly say so. And even then, we need to explicitly tell the compiler how we want to use that data. This is called borrowing in Rust, and that’s what makes Rust memory safe. Because all data lives in its own scope/context, once we move out of it, Rust will look at all of the data inside that scope and deallocate it.&lt;/p&gt;

&lt;p&gt;Here is an example of returning a reference to a string (&amp;amp;str) from a function and using it in another (main) function.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn hello_v1() -&amp;gt; &amp;amp; str{
    "Hello, world!"
}

fn main() -&amp;gt; (){
    let message = hello_v1();
    println!("{}",message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;The example above will not work because the “Hello, world!” string is deallocated after the “hello_v1 function is finished, so we cannot print it. Also, the error we get clearly states that we are missing lifetime parameters, so let's add them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn hello_v2&amp;lt;'a&amp;gt;() -&amp;gt; &amp;amp;'a str{
    "Hello, world!"
}

fn main() -&amp;gt; (){
    let message = hello_v2();
    println!("{}",message);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Once we change our function and add the lifetime parameters, the compiler knows that we need that string to live outside of that function, so we get the message  “Hello, world!” in our console.&lt;/p&gt;

&lt;p&gt;Rust does not have an automatic garbage collector like some other languages, Java or Python, for example.&lt;/p&gt;

&lt;p&gt;We don’t have to manually free or deallocate any memory. If we want data to live outside the function it was created in, we must tell the compiler explicitly that we do not want this data deallocated.&lt;/p&gt;

&lt;p&gt;This might seem complicated at first, but you won't even notice it once you start writing the code.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-rust-used-for"&gt;
  &lt;/a&gt;
  What is Rust used for?
&lt;/h3&gt;



&lt;p&gt;More than a few projects are created using Rust, and some of the well known are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla built its browser engine called &lt;a href="https://servo.org/"&gt;Servo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.figma.com/blog/rust-in-production-at-figma/"&gt;Figma’s&lt;/a&gt; real-time syncing server, which is used to edit all Figma documents &lt;/li&gt;
&lt;li&gt;An open-source virtualization technology called &lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;Firecracker&lt;/a&gt; is mostly being written in Rust.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf"&gt;NPM&lt;/a&gt; also uses this language to alleviate some of its CPU-bound bottlenecks.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#rust-vs-go"&gt;
  &lt;/a&gt;
  Rust vs. Go
&lt;/h3&gt;

&lt;p&gt;The most obvious difference between Rust and GoLang is simplicity. Becoming productive in Go takes much less time than it does in Rust. However, simplicity comes at a cost as Go lacks some Rust features like generics and functional programming.&lt;/p&gt;

&lt;p&gt;Another difference is in memory management. Go has a garbage collector, while Rust’s memory management, as explained above, comes in the form of ownership and borrowing. While this might give an edge to Rust in performance, speed and flexibility, it can also be a setback in some cases.&lt;/p&gt;

&lt;p&gt;Concurrency in programming, simply put, is the ability to execute more than one function or task simultaneously. Go has great support for concurrency in the form of Goroutines and channels.&lt;/p&gt;

&lt;p&gt;While both of these features are also available in Rust (either using the standard library or third-party crates like Tokio), the main difference is, once again, simplicity. Writing concurrent applications in Go is easier than in Rust. Still, Rust, on the other hand, offers compile-time checking, being able to catch thread-safety bugs even before your program runs.&lt;/p&gt;

&lt;p&gt;Considering compilation time, Go blows Rust out of the water, as the Go compiler does not have to run all the optimization checks the Rust compiler does. One thing they have in common is that they both produce a static binary as an output, which means that in order to run the compiled program, you don't need an interpreter or a virtual machine. Go is very well suited to build services and simple applications. For example, a web REST API was built to replace Java and C#.&lt;/p&gt;

&lt;p&gt;Another key difference is that Go does not support macros, while Rust has a very powerful macro system. Rust is a systems programming language; therefore, it's a very good fit when you need efficiency and performance. Rust is very well suited for performance-critical applications such as web browsers, databases, operating systems, or libraries that rely on heavy mathematical calculations.&lt;/p&gt;

&lt;p&gt;This does not mean that you can’t use Rust to build a web application, as Rust has great support for building web APIs in the form of third-party crates.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#rust-vs-c"&gt;
  &lt;/a&gt;
  Rust vs. C++
&lt;/h3&gt;

&lt;p&gt;Both Rust and C++ are system programming languages, which means they can write low-level code like operating systems and firmware for microcontrollers. Compared to C, both languages offer a lot of abstractions that make it possible to go high-level and write game engines and web applications.&lt;/p&gt;

&lt;p&gt;Another similarity is that neither of them uses a garbage collector to manage memory. This makes code more efficient and faster. If you have ever used C, you will know that managing memory yourself is hard and often results in undefined behaviors or segmentation faults.&lt;/p&gt;

&lt;p&gt;For this reason, C++ introduced smart pointers to mitigate some memory-related bugs. However, they are still limited in the number of guarantees they offer. Rust goes a step further and introduces the borrow checker (ownership, borrowing), preventing most of the memory safety bugs.&lt;/p&gt;

&lt;p&gt;Another selling point for Rust is its rich type system, making it possible to prevent data races at compile time. Rust introduces two traits, Sync and Send. A type is Send if it is safe to send to another thread, and a type is Sync if it is safe to share between threads. This makes sharing memory between threads possible, but the compiler will prevent you from doing so unsafely.&lt;/p&gt;

&lt;p&gt;This example shows how sharing the number between threads would be unsafe as the RefCell type is not Sync.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() {
    let mut number = std::cell::RefCell::new(2);

    let new_thread = std::thread::spawn(|| {
        let mut reference = number.borrow_mut();
        *reference = 5
    });

    let mut reference = number.borrow_mut();
    *reference = 5;

    new_thread.join();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;We get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let new_thread = std::thread::spawn(|| {
    |                      ^^^^^^^^^^^^^^^^^^ `RefCell&amp;lt;i32&amp;gt;` cannot be shared between threads safely
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;This also highlights how great the Rust compiler is as it tells us exactly what the problem is.&lt;/p&gt;

&lt;p&gt;This is an example of how to share data between threads and changing it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() {
    use std::sync::{Arc, Mutex};
   let number = Arc::new(Mutex::new(5)); // this number is in the main thread

   { 
        let number_copy = Arc::clone(&amp;amp;number);
        let new_thread = std::thread::spawn(move || { // create a new thread and pass in the num
            let mut reference = number_copy.lock().unwrap();
            *reference *= 5 // here we multiply our starting number by 5
        });
        new_thread.join().unwrap();
    }
    println!("{}",number.lock().unwrap().clone()); // now the starting number is 25

    *number.lock().unwrap() *= 5; // we multiply the starting number by 5 again

     println!("{}",number.lock().unwrap()) // here the number is 125    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Another “version” of Rust called Unsafe Rust is more similar to C++. Working in Unsafe Rust is like telling the compiler to trust you and skip some of the checks it provides. You lose the safety guarantees a safe Rust compiler gives you, but you gain the ability to interact with the low-level aspects of the operating system/hardware. Those operations are inherently unsafe. Rust’s compiler is very conservative in its checks, meaning that it prefers to check and block a few valid programs/operations rather than allow many unchecked operations. This means that even if we know that some code is safe to execute, Rust might still not allow it unless we use unsafe Rust.&lt;/p&gt;

&lt;p&gt;The areas where  Rust definitely beats C++ and many other languages are package management and documentation. The official package manager in Rust is called Cargo. Using a package is as simple as adding a line to the cargo.toml, Rust's config file. Documentation for Rust is on a whole other level compared to any other language; everything can be found at doc.rust-lang.org.&lt;/p&gt;

&lt;p&gt;Using an external library with C++ can be an issue, especially if you’re targeting multiple operating systems. There are some third-party options like Conan or Vcpkg, but they are far from being as standardized and easy to use as Cargo.&lt;/p&gt;

&lt;p&gt;Of course, the C++ ecosystem is much larger. There are many more libraries for C++, so there might not be a library for something that already exists for C++. Rust does allow for FFI (foreign function interface), which allows you to interface with C code from Rust and thus interface with C++ libraries; however, this functionality is still limited for more complex cases.&lt;/p&gt;

&lt;p&gt;Another similarity is macros. Both C++ and Rust allow them, but Rust’s macros are considered to be much more powerful and safer.&lt;/p&gt;

&lt;p&gt;Rust has two types of macros: declarative and procedural.&lt;/p&gt;

&lt;p&gt;Declarative macros are similar to ones in C++, but the key difference is that macros in Rust are hygienic in the sense that they can not interact with variables outside of their scope and cause any unwanted behavior.&lt;/p&gt;

&lt;p&gt;Procedural macros are much more powerful and complex. They act more like functions: they accept code as an input, manipulate it, and return the enriched code as an output, all at compile time.&lt;/p&gt;

&lt;p&gt;In conclusion, C++ is used far more often than Rust.  That said,  big companies like Microsoft, Google, and Apple are gradually integrating Rust with their products. C++ is not going away any time soon, thanks to its large ecosystem and legacy code built around it. Rust, however, is slowly beginning to be used as a system programming language.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-best-way-to-learn-rust-programming"&gt;
  &lt;/a&gt;
  What is the best way to learn Rust programming?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The most logical way to start learning Rust is to read the &lt;a href="https://doc.rust-lang.org/book/"&gt;Rust book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Depending on if you already have a specific application you want to build, you might want to skip the macros section and Unsafe Rust.&lt;/li&gt;
&lt;li&gt;As always, start small. One web application I have built as a practice is a to-do list manager.&lt;/li&gt;
&lt;li&gt;There are many useful sites where you can practice, like &lt;a href="https://exercism.io/tracks/rust"&gt;exercism.io&lt;/a&gt; or &lt;a href="https://www.codewars.com/?language=rust"&gt;codewars.com&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned before, Rust has many useful third-party crates and tools; however, it already has a decent number of frameworks depending on what you want to do.  Learning about them is the path you want to take next. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rocket&lt;/strong&gt; - a web framework built on the nightly version of Rust; it's boilerplate-free, type-safe, and has a large ecosystem. It also features rich, supporting cookies, streams, built-in templating, and JSON types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actix&lt;/strong&gt; – a web framework also aimed to be more stable than a rocket; however, you will need to use third-party packages as it is newer and has less support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gotham&lt;/strong&gt; – flexible web framework built on stable Rust, statically typed, and type-safe. Supports Async operations by using the Tokio project and Hyper.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amethyst&lt;/strong&gt; - is a game engine; it has a pool of features you might need to build a larger application. It also has better support for third party libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bevy&lt;/strong&gt; - an open-source, newer, simple, data-driven game engine, heavily inspired by amethyst, supports real-time 2d rendering, 3d rendering, multiple platforms (Windows, Mac, Linux, and soon iOS and Android). Hot reload with fast compile times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Druid&lt;/strong&gt; - an experimental, data-oriented, Rust native UI toolkit. Based on Flutter and SwiftUI. Its current development is largely driven by its use in Runebender (a new font editor).&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>backend</category>
      <category>learning</category>
    </item>
    <item>
      <title>Basics of Java #11</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 11:36:46 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-11-6ef</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-11-6ef</guid>
      <description>&lt;p&gt;This article is based on the areas comparison operators, logical operators, and conditional operators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h2&gt;

&lt;p&gt;While coding you may need to compare two numbers to check whether those two numbers are equal or not. To check whether they are equal, we have to use two equal signs (==). And to check if they are unequal we have to use exclamation mark followed by an equal sign (!=). Try out the following code segment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At one glace you can see that x and y are not equal at all. Therefore, this code gives output as 'false' and 'true' for the given two &lt;code&gt;println()&lt;/code&gt; lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h2&gt;

&lt;p&gt;You may want to know whether a given mark of a subject is in a particular range (Is 34 in between 10 and 50?). For that you can use logical operators. There are several logical operators like and operator (&amp;amp;&amp;amp;), or operator (||), and not operator (!). In a case where we want all the conditions to be true we use 'and operator'. If satisfying just one condition is enough, then we can use 'or operator'. 'Not operator' is used to reverse a Boolean value. Let's go through below code segment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;mayWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mayWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;notWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!(&lt;/span&gt;&lt;span class="n"&gt;mayWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will first print 'true'. That is because the value of the variable &lt;code&gt;temp&lt;/code&gt; (22) is in between 20 and 30. The next line will also print 'true' because, though &lt;code&gt;temp&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; less than 15 it is greater than 20. So one condition is satisfied. Since we have used 'or operator' there, it gives true. Next line will print 'false'. The variable &lt;code&gt;notWarm&lt;/code&gt; is assigned with the &lt;em&gt;reversed&lt;/em&gt; value of the variable &lt;code&gt;mayWarm&lt;/code&gt;. Since &lt;code&gt;mayWarm&lt;/code&gt; is true, &lt;code&gt;notWarm&lt;/code&gt; gives false.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-operators"&gt;
  &lt;/a&gt;
  Conditional Operators
&lt;/h2&gt;

&lt;p&gt;This operator is to check whether conditions are true or false. Assume there is an institute which gives grades A, B, C, and F according to the marks students have scored.&lt;br&gt;
'If' a student has got marks in the range [75, 100], he is given an 'A'.&lt;br&gt;
'Or else if' his score is in the range [50, 74] he gets a 'B'.&lt;br&gt;
'Else if' the score is in the range [25, 49] a 'C' is given.&lt;br&gt;
'If not' the student gets an 'F'. So how can you code this? Go through the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are a genius!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"F"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through above code line by line. To give an 'A', marks have to be in the range 75 to 100. Therefore, both of the conditions ('75 or greater than that' &lt;em&gt;and&lt;/em&gt; 'less than 100 or 100') have to be true. That is why we have to use &lt;strong&gt;and&lt;/strong&gt; operator here (&amp;amp;&amp;amp;). &lt;br&gt;
After that we need to check conditions for a 'B' pass. Marks have to be '50 or greater than 50' &lt;em&gt;and&lt;/em&gt; 'less than 75'. Here we need not to check the condition 'less than 75'. That is because the first 'if' condition filter out any mark which is less than 75. So that condition is guaranteed by first 'if' statement. So we are only going to check whether the mark is above or equal to 50. Same process goes to 'C' grade as well.&lt;br&gt;
Then we are remained with the last condition. If marks are less than 25 we have to give an 'F'. You know that the 'else if' condition which gives 'C' pass filter out any mark that is less than 50. So this condition is already guaranteed. Therefore, we need not to write any condition here. Just writing the 'else' is enough.&lt;br&gt;
You may have noticed that I have only used curly braces '{}' for the first 'if' statement. Why is that? As you can see, I have written more than one code lines inside that 'if' condition. Hence we need to add curly braces to let java know which code lines comes under that particular condition. However, in other two 'else if' and 'else' conditions I have only written one code line. In such cases there is no any need of using curly braces. But using indentation in such cases is very important. It also makes your code looks clean and tide.&lt;br&gt;
Change the value of the &lt;code&gt;marks&lt;/code&gt; variable into different values and check different outputs you get.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You also can have nested conditional statements. For example, you can have another if condition inside of one if condition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Ask the user to input his salary. Check if he has entered a negative value. If not add a bonus of 20,000 into his salary. Now check whether the total salary is greater then 90,000. If so print 'Maximum salary range'. If not check whether the salary is in between 90,000 and 50,000. If so print 'Moderate salary range'. Finally if the salary is 20,000 print 'Bonus only'.&lt;/p&gt;

&lt;p&gt;Does this conditions checking thing has to be this much of a trouble always? Like if you want to check whether a number is greater than 100 or not, do you really have to struggle with if and else statements? Not at all! There is a much easier way by using &lt;strong&gt;Ternary operator (?)&lt;/strong&gt;.&lt;br&gt;
In the given code I am going to check if a number is greater than 100. And if so I will print 'Greater then 100' else I will print 'Less than or equal 100'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;163&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nmberGroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"Greater then 100"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Less than or equal 100"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberGroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it? Yes! Precise, accurate and less code lines as well. &lt;code&gt;number &amp;gt; 100&lt;/code&gt; checks whether the number is greater than 100. If that condition is true, the first line after the ternary operator (?) gets printed. If it is not the case (which means if number is less than or equal to the 100), the second line (life after the colon : ) gets printed. Try to use this most often than huge if else code blocks, because this is more handy and makes your code neat.&lt;/p&gt;

&lt;p&gt;Let's learn about loops in our next article :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Adding port "8080/tcp" using UFW</title>
      <author>Ritabrata Das</author>
      <pubDate>Mon, 10 May 2021 11:10:35 +0000</pubDate>
      <link>https://dev.to/ritabratadas343/adding-port-8080-tcp-using-ufw-4bbe</link>
      <guid>https://dev.to/ritabratadas343/adding-port-8080-tcp-using-ufw-4bbe</guid>
      <description>&lt;p&gt;Hello there!!1 &lt;br&gt;
I have recently done a research on &lt;strong&gt;how to add the port 8080/tcp&lt;/strong&gt; in my system and list all the active ports in a text file called &lt;strong&gt;"zones.txt"&lt;/strong&gt;. I use a Linux Mint 20.1 XFCE system and I came across the apt-package named &lt;strong&gt;Uncomplicated Firewall&lt;/strong&gt;. This package allows you to open ports on your system and makes them ready for use using ssh. &lt;br&gt;
&lt;em&gt;Here is a screenshot on how to progress with the procedures.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Dx9E-_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar7rvd8m6l3dizzlpthx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Dx9E-_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar7rvd8m6l3dizzlpthx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am also attaching my GitHub gist which provides an detailed explanation on how to implement this in your system.&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
 

&lt;h4&gt;
  &lt;a href="#best-of-luck-and-may-the-source-be-with-you-"&gt;
  &lt;/a&gt;
  Best of Luck and May the Source be with You 🐧💗.
&lt;/h4&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Censorship on DEV Community 😶🤐</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 10 May 2021 11:08:26 +0000</pubDate>
      <link>https://dev.to/technoglot/censorship-on-dev-community-11de</link>
      <guid>https://dev.to/technoglot/censorship-on-dev-community-11de</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Winkler&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer 🚨&lt;/strong&gt;: No, despite the possibly misleading title of my post, I am NOT suggesting in ANY way that the team behind this platform is full of tyrants. Now, proceed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey there 👋🏻 I'd like to start the week at a different pace this time. Hence this post.&lt;/p&gt;

&lt;p&gt;As of late, I took notice of some posts around here where the author has chosen to hide certain comments. I can imagine that this has been around since the very inception of this platform. However, hear me out. &lt;/p&gt;

&lt;p&gt;I'm not entirely okay with the practice of hiding comments. I am, however, fully onboard with the idea of fostering a safe, inclusive and respectful community on this platform. I follow the Code of Conduct (CoC) almost to the letter and I understand and acknowledge the need for the CoC in the first place.&lt;/p&gt;

&lt;p&gt;Here's the deal. Imagine that I post a blog here and someone leaves a comment I disagree with. As the author I have the "power" to hide this comment for whatever reason I see fit, even if the opinion expressed in the comment/by the commenter didn't violate the CoC in any way. &lt;/p&gt;

&lt;p&gt;I will be honest with you all. On more than one occasion I felt tempted to hide a comment or two on my posts (especially the unsolicited and shameless self promo). But I chose not to do so. However, I am seeing more and more folks hiding comments on their posts. Yes, their posts are sometimes controversial and hence elicit really candid responses from other members of the community. In my experience, it would have been great to see the hidden comments. I want to see the bigger picture, not just what the author wants me to see. That's it. That's the "issue" I have with this. &lt;/p&gt;

&lt;p&gt;Now let me be very clear, before anybody jumps to conclusions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have no intention of telling people how to "moderate" the comments on their posts. &lt;/li&gt;
&lt;li&gt;I understand that the CoC is there for a reason and that it will be enforced no matter what. That's great. No objections there.&lt;/li&gt;
&lt;li&gt;No, despite the possibly misleading title of my post, I am NOT suggesting in ANY way that the team behind this platform is full of tyrants. They have noble intentions and are doing their absolute best to make and keep this place wonderful and welcoming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom-line is this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we want authors to possibly misuse the "Hide comment" feature? Do we want authors to hide comments that disagree with their narrative but are otherwise respectful, constructive and abiding to the CoC?&lt;/li&gt;
&lt;li&gt;Can we, as users late to the party, have a way of seeing the hidden comments? Never mind deleted comments, these are gone for good. (P.S. if there's a way of reading hidden comments, by all means please enlighten me.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I am missing something and this is already being enforced whatsoever, please share the relevant docs to such information. I am genuinely curious and just trying to contribute to making this corner of the net a little more wholesome. Would be a shame to see people getting censored just because an author fails to take criticism like a grown up. I've seen it countless of times across various platforms and would hate to see this take DEV.to by storm.&lt;/p&gt;

&lt;p&gt;By all means, drop your comments and thoughts below. I won't hide them (no matter how great the temptation). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBRybF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia1.tenor.com%252Fimages%252F1f795c93fd3fbf1d6027cbd9093cc99e%252Ftenor.gif%253Fitemid%253D11745137%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBRybF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia1.tenor.com%252Fimages%252F1f795c93fd3fbf1d6027cbd9093cc99e%252Ftenor.gif%253Fitemid%253D11745137%26f%3D1%26nofb%3D1" alt="cambio y fuera"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Have a nice week folks!&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;&lt;br&gt;
Still here? Catch me on &lt;a href="https://twitter.com/technoglot"&gt;Twitter&lt;/a&gt; or find me &lt;a href="https://linktr.ee/technoglot"&gt;elsewhere&lt;/a&gt;! If you like my blogs and are feeling generous, kindly consider to 👇🏻&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/technoglot"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQYkOYbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9olbzsmrxb3tksl6iqf.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cftknAn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iwes672pxpljtq7z6oy.png" alt="technoglot footer banner"&gt;

</description>
      <category>meta</category>
      <category>discuss</category>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
    <item>
      <title>Creative-Tim - Open-Source Products</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 10 May 2021 10:55:05 +0000</pubDate>
      <link>https://dev.to/sm0ke/creative-tim-open-source-products-4jgj</link>
      <guid>https://dev.to/sm0ke/creative-tim-open-source-products-4jgj</guid>
      <description>&lt;p&gt;This article presents a curated list with open-source products crafted and released for free by &lt;strong&gt;Creative-Tim&lt;/strong&gt;. All templates can be downloaded directly from Github and the permissive license allows usage for unlimited hobby and commercial products.  For newcomers, &lt;strong&gt;Creative-Tim&lt;/strong&gt; is a popular web agency that provides open-source and commercial products in many technologies like React, Vue, Svelte Bootstrap, and Tailwind.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Latest Free Products: &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; and &lt;a href="https://www.creative-tim.com/product/soft-ui-design-system"&gt;Soft UI Kit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free React Dashboards - &lt;a href="https://www.creative-tim.com/product/material-dashboard-react"&gt;Material Design&lt;/a&gt;, &lt;a href="https://www.creative-tim.com/product/argon-dashboard-material-ui"&gt;Argon&lt;/a&gt;, &lt;a href="https://www.creative-tim.com/product/black-dashboard-react"&gt;Black Dashboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free Vue Templates - &lt;a href="https://www.creative-tim.com/product/vue-black-dashboard"&gt;Vue Black&lt;/a&gt;, &lt;a href="https://www.creative-tim.com/product/vue-light-bootstrap-dashboard"&gt;Light Bootstrap&lt;/a&gt; and &lt;a href="https://www.creative-tim.com/product/vuetify-material-dashboard"&gt;Material&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free NextJs Templates - &lt;a href="https://www.creative-tim.com/product/nextjs-material-dashboard"&gt;Material Dashboard&lt;/a&gt;, &lt;a href="https://www.creative-tim.com/product/notus-nextjs"&gt;Notus NextJS&lt;/a&gt; and &lt;a href="https://www.creative-tim.com/product/nextjs-argon-dashboard"&gt;Argon&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-dashboard"&gt;
  &lt;/a&gt;
  Soft UI Dashboard
&lt;/h2&gt;

&lt;p&gt;Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combining. All components can take variations in colour, that you can easily modify using SASS files and classes.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard/pages/dashboard.html"&gt;Soft UI Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eBTXL7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ej6wqnw766n5ga2306.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eBTXL7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ej6wqnw766n5ga2306.png" alt="Creative-Tim - Soft UI Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-design-system"&gt;
  &lt;/a&gt;
  Soft UI Design System
&lt;/h2&gt;

&lt;p&gt;Most complex and innovative Design System made by Creative-Tim built with Bootstrap 5 and released under the MIT License on Github. Designed for those who like bold elements and beautiful websites. Made of hundred of elements, designed blocks and fully coded pages, Soft UI Design System is ready to help you create stunning websites and webapps.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-design-system"&gt;Soft UI Design System&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-design-system/index.html"&gt;Soft UI Design System&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4U9Ry6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rayd4p3ki66edad7v6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4U9Ry6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rayd4p3ki66edad7v6z.png" alt="Creative-Tim - Soft UI Design System."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-material-dashboard"&gt;
  &lt;/a&gt;
  React Material Dashboard
&lt;/h2&gt;

&lt;p&gt;Material Dashboard React is a free Material-UI Admin with a fresh, new design inspired by Google's Material Design. We are very excited to introduce our take on the material concepts through an easy to use and beautiful set of components. Material Dashboard React was built over the popular Material-UI v4.1.0 framework.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/material-dashboard-react"&gt;React Material Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/material-dashboard-react/"&gt;React Material Dashboard&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gd_d9DgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sftl4d95wwqfeg8kl3m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gd_d9DgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sftl4d95wwqfeg8kl3m1.png" alt="Creative-Tim - React Material Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-argon-dashboard"&gt;
  &lt;/a&gt;
  React Argon Dashboard
&lt;/h2&gt;

&lt;p&gt;Argon Dashboard React is built with over 100 individual components, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/argon-dashboard-material-ui"&gt;React Argon Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/argon-dashboard-material-ui"&gt;React Argon Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwQf9xRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euqrvlu1waqemv3u6mtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwQf9xRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euqrvlu1waqemv3u6mtd.png" alt="Creative-Tim - React Argon Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-black-dashboard"&gt;
  &lt;/a&gt;
  React Black Dashboard
&lt;/h2&gt;

&lt;p&gt;Black Dashboard React is a beautiful Bootstrap 4 (Reactstrap) Admin Dashboard with a huge number of components built to fit together and look amazing. If you are looking for a tool to manage and visualize data about your business, this dashboard is the thing for you. It combines colors that are easy on the eye, spacious cards, beautiful typography, and graphics.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/black-dashboard-react"&gt;React Black Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/black-dashboard-react/"&gt;React Black Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M1UOS-2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/roor14tl3g1tm0qujsqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M1UOS-2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/roor14tl3g1tm0qujsqc.png" alt="Creative-Tim - React Black Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-light-bootstrap"&gt;
  &lt;/a&gt;
  Vue Light Bootstrap
&lt;/h2&gt;

&lt;p&gt;Vue Light Bootstrap Dashboard is a beautiful resource built over Bootstrap 4 and Vuejs. It will help you get started developing dashboards in no time. Vue Light Bootstrap Dashboard is the official Vuejs version of the Light Bootstrap Dashboard. Using the Dashboard is pretty simple but requires basic knowledge of Javascript, Vue and Vue-Router.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/vue-light-bootstrap-dashboard"&gt;Vue Light Bootstrap&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/vue-light-bootstrap-dashboard/"&gt;Vue Light Bootstrap&lt;/a&gt; - LIVE deployment &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-MHJXcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcgfhu4y6e48jb43083p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-MHJXcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcgfhu4y6e48jb43083p.png" alt="Creative-Tim - Vue Light Bootstrap."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vuetify-material-dashboard"&gt;
  &lt;/a&gt;
  Vuetify Material Dashboard
&lt;/h2&gt;

&lt;p&gt;Vuetify is developed exactly according to Material Design spec. Every component is handcrafted to bring you the best possible UI tools to your next great app. The development doesn't stop at the core components outlined in Google's spec. Through the support of community members and sponsors, additional components will be designed and made available for everyone to enjoy.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/vuetify-material-dashboard"&gt;Vuetify Material Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/vuetify-material-dashboard"&gt;Vuetify Material Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pmHxcf9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hro8u0nl2wd6icotbz12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pmHxcf9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hro8u0nl2wd6icotbz12.png" alt="Creative-Tim - Vuetify Material Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-black-dashboard"&gt;
  &lt;/a&gt;
  Vue Black Dashboard
&lt;/h2&gt;

&lt;p&gt;Vue Black Dashboard is a beautiful Bootstrap 4 and Vue.js Admin Dashboard with a huge number of components built to fit together and look amazing. If you are looking for a tool to manage and visualize data about your business, this dashboard is the thing for you. It combines colors that are easy on the eye, spacious cards, beautiful typography, and graphics.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/vue-black-dashboard"&gt;Vue Black Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/vue-black-dashboard"&gt;Vue Black Dashboard&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMK70PI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rvfch285mftgd4gzp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMK70PI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rvfch285mftgd4gzp9.png" alt="Creative-Tim - Vue Black Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nextjs-material-dashboard"&gt;
  &lt;/a&gt;
  NextJS Material Dashboard
&lt;/h2&gt;

&lt;p&gt;NextJS Material Dashboard is a free Material-UI, NextJS and React Admin with a fresh, new design inspired by Google's Material Design. We are very excited to introduce our take on the material concepts through an easy to use and beautiful set of components. NextJS Material Dashboard was built over the popular Material-UI, NextJS and React frameworks.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/nextjs-material-dashboard"&gt;NextJS Material Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/nextjs-material-dashboard/admin/dashboard"&gt;NextJS Material Dashboard&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLZIdbuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6lqegkifsmtbn1n1d06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLZIdbuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6lqegkifsmtbn1n1d06.png" alt="Creative-Tim - NextJS Material Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#notus-tailwind-css"&gt;
  &lt;/a&gt;
  Notus Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Start your development with a Free Tailwind CSS and NextJS UI Kit and Admin. Let Notus NextJS amaze you with its cool features and build tools and get your project to a whole new level. &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-nextjs"&gt;Notus NextJS&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/notus-nextjs/"&gt;Notus NextJS&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUhtVwn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bvsmygav89cwpwrjf27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUhtVwn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bvsmygav89cwpwrjf27.png" alt="Creative-Tim - Notus Tailwind CSS."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nextjs-argon-dashboard"&gt;
  &lt;/a&gt;
  NextJS Argon Dashboard
&lt;/h2&gt;

&lt;p&gt;NextJS Argon Dashboard is built with over 100 individual components, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files. You will save a lot of time going from prototyping to full-functional code, because all elements are implemented. This Dashboard is coming with pre-built examples, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/nextjs-argon-dashboard"&gt;NextJS Argon Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/nextjs-argon-dashboard/admin/dashboard"&gt;NextJS Argon Dashboard&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rtpEN9La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4zqf3etqhv7nz72j9rt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rtpEN9La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4zqf3etqhv7nz72j9rt.png" alt="Creative-Tim - NextJS Argon Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on Dev.&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/vue-dashboard-open-source-apps-1gd1"&gt;Vue Dashboards&lt;/a&gt; - a curated list with open-source Templates&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>creativetim</category>
    </item>
    <item>
      <title>React Hooks Part 2 - Understanding the Context API and The useContext Hook</title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 10 May 2021 10:54:35 +0000</pubDate>
      <link>https://dev.to/thenerdydev/react-hooks-part-2-understanding-the-context-api-and-the-usecontext-hook-4hcf</link>
      <guid>https://dev.to/thenerdydev/react-hooks-part-2-understanding-the-context-api-and-the-usecontext-hook-4hcf</guid>
      <description>&lt;p&gt;In the first part of the Hooks article series, we covered about the basic React Hooks in great depth - The &lt;strong&gt;useState&lt;/strong&gt; and the &lt;strong&gt;useEffect&lt;/strong&gt; hooks. In this article, let us cover yet another important topic which is regarding the Context API, a concept that is used in state management in applications. But before we understand what the &lt;strong&gt;Context API&lt;/strong&gt; is, let us first understand why do we need this &lt;strong&gt;Context API&lt;/strong&gt; in the first place. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#need-for-the-context-api"&gt;
  &lt;/a&gt;
  Need for the Context API
&lt;/h2&gt;

&lt;p&gt;Now it is quite common that you pass data to components through &lt;strong&gt;props&lt;/strong&gt;, but it's always a problem if you forward state through multiple components. This is called as prop drilling which means that there is no direct established connection between the component from where a certain state is present and the component to which we want that state or data to reach. So with prop drilling, we first pass a prop from the source component to an intermediate component and then from that intermediate component we funnel the prop down till it reaches the destination component where it is required. So it is where the React Context comes into picture. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-context-"&gt;
  &lt;/a&gt;
  What is React Context ?
&lt;/h2&gt;

&lt;p&gt;React Context is some component-wide under the hood managed form of state storage. So we have this concept of React Context which then allows us to trigger some action in that context where we house our state and methods pertaining to a certain feature of the application and it is then made to directly pass to the component where it is required without building such long &lt;strong&gt;prop chains&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-context"&gt;
  &lt;/a&gt;
  Using Context
&lt;/h2&gt;

&lt;p&gt;To use Context, you need to do two things&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You basically need to provide it (You need to declare globally - "Hey this is the file that houses a specific feature context.". All the components that are wrapped by this feature context will be able to &lt;strong&gt;access&lt;/strong&gt; it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Besides providing, you also need to setup a way so that you can consume the feature context wherever required. So in essence, you need to hook into it. You need to listen to it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Providing the Context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Providing means that you wrap in JSX code i.e all the components that should be able to tap into that context. Any component that is not wrapped will not be able to listen or subscribe to the Context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Consuming the Context&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Next we can also leverage the &lt;strong&gt;useContext&lt;/strong&gt; Hook to consume instead of the Consumer. It allows us to tap into context and listen to changes on it. Remember that our context that we define can be dynamic meaning that we don't just pass data to our components but also the functions which technically of course work with this data. &lt;/p&gt;

&lt;p&gt;Remember that in most cases you would just use &lt;strong&gt;props&lt;/strong&gt; to pass data to other components because props are your mechanism to configure components and make them reusable. &lt;/p&gt;

&lt;p&gt;Only if you have something which you would forward through a lot of components and you are forwarding it to a component that does something very specific would you use the Context API.&lt;/p&gt;

&lt;p&gt;So now let us see an example to understand the Context API: &lt;br&gt;
So inside the App.js file, the very first step is to import React. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI9FA0nx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48ndou41yj9g639p26mz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI9FA0nx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48ndou41yj9g639p26mz.png" alt="carbon (51)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we setup a piece of state to manage some company details inside the App component. So we first make use of the useState React Hook to setup an initial state companyDetails and we also get the handler (state updating function) to work with the companyDetails state. &lt;/p&gt;

&lt;p&gt;Now if you see in the above image, to setup a Provider we first need to create a context so we create &lt;strong&gt;CompanyContext&lt;/strong&gt; and on that we can access the Provider. &lt;/p&gt;

&lt;p&gt;To create a Context, all we have to say is : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSerjpUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq184zpg5p4pc4immav5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSerjpUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq184zpg5p4pc4immav5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we setup the provider in the App component and we pass a special &lt;strong&gt;value&lt;/strong&gt; prop to which we specify all the properties and functions to the JSX code that gets wrapped by the provider. So all the components (here Company) that are wrapped by the Provider will listen to changes in Context and will directly be able to access the exposed data and functions that we specify in the value prop. &lt;/p&gt;

&lt;p&gt;Next let us see how we can consume the Context that was setup. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consuming-context"&gt;
  &lt;/a&gt;
  Consuming Context
&lt;/h2&gt;

&lt;p&gt;So it is the Company Component that we need to define which will access the Context. &lt;br&gt;
So here is the code for the Company Component: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7vQtvWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvj4x5ajhmq8guntpgz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7vQtvWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvj4x5ajhmq8guntpgz9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So all we do here is that we setup a Consumer on the &lt;strong&gt;CompanyContext&lt;/strong&gt; and here we have two ways of consuming the context. &lt;/p&gt;

&lt;p&gt;Let us first see the first approach : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;APPROACH 1&lt;/strong&gt; &lt;br&gt;
The approach 1 is shown in the above image where we have receive an anonymous arrow function within the Consumer. Since the arrow function represents a JavaScript expression, we need to wrap this in curly braces in our JSX code. Now in the arrow function, all we get is a single context object from which we can destructure the data that we want. So here we want the &lt;strong&gt;companyName&lt;/strong&gt;, &lt;strong&gt;employees&lt;/strong&gt; and &lt;strong&gt;teams&lt;/strong&gt; and it is this data that we render in our Company Component. So we are directly getting this from Context and not via a prop chain. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;APPROACH 2&lt;/strong&gt; &lt;br&gt;
The approach 2 is to make use of the special React Hook - &lt;strong&gt;useContext&lt;/strong&gt;. I strongly recommend that you use useContext Hook for consuming the context instead of APPROACH 1. It is more elegant and quite straight forward. So we get access to the feature context that we have using the useContext hook and directly access the data on the context object. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtYrfWgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39swaukx7hvm26hv8764.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtYrfWgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39swaukx7hvm26hv8764.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to play with the code : &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/stoic-wing-2fn5v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So this is it for the second part of React Hooks article series. In the next article, we will learn about other React Hooks. So stay tuned ! &lt;/p&gt;

&lt;p&gt;Check out the first article of this React Hooks series: &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/react-hooks-part-1-understanding-usestate-and-useeffect-hooks-1k6f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React Hooks Part 1 - Understanding useState and useEffect Hooks&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ May 9 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you have spare 2 hours, then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Have you learned Rust?</title>
      <author>Madza</author>
      <pubDate>Mon, 10 May 2021 10:53:24 +0000</pubDate>
      <link>https://dev.to/madza/have-you-learned-rust-55b5</link>
      <guid>https://dev.to/madza/have-you-learned-rust-55b5</guid>
      <description>&lt;p&gt;According to StackOverflow &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;survey&lt;/a&gt;, Rust has been the most loved lang for multiple consecutive years.&lt;/p&gt;

&lt;p&gt;Have you learned it and maybe you can share some awesome projects that you have built with it?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>rust</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
