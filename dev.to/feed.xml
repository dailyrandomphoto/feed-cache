<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Need assistance with useEffect() dependencies</title>
      <author>Yar</author>
      <pubDate>Sun, 06 Dec 2020 23:50:04 +0000</pubDate>
      <link>https://dev.to/ptifur/need-assistance-with-requestanimationframe-in-react-5gdc</link>
      <guid>https://dev.to/ptifur/need-assistance-with-requestanimationframe-in-react-5gdc</guid>
      <description>&lt;p&gt;Hey there! So I'm trying to figure out how to use &lt;code&gt;canvas&lt;/code&gt; element in React.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-TltgnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dkegj1ektl36mglre0jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-TltgnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dkegj1ektl36mglre0jf.png" alt="raf-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how my playground looks like. Canvas element, a dot travelling around the board and a button to start / stop the animation &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue" class="anchor"&gt;
  &lt;/a&gt;
  The Issue
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The button is giving me hard time pausing and resuming the animation. When the dot stops programmatically, it takes a couple of extra clicks on the Start button to keep it moving. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I suspect it has to do with &lt;code&gt;useEffect&lt;/code&gt; and its dependencies.&lt;/p&gt;

&lt;p&gt;Do you think you could take a look and give me some advice?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;requestAnimationFrame()&lt;/code&gt; method to update the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reqRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// some animation&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deltaTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;
    &lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// stop&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// start the loop&lt;/span&gt;
    &lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// clean up&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;animate()&lt;/code&gt; function loops itself &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect()&lt;/code&gt; starts the animation &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;requestAnimationFrame()&lt;/code&gt; method generates new &lt;code&gt;reqRef&lt;/code&gt; value with each run &lt;/li&gt;
&lt;li&gt;in order to stop the animation you have to use &lt;code&gt;cancelAnimationFrame(reqRef.current)&lt;/code&gt; with the current reqRef&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#approach" class="anchor"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;shouldStop&lt;/code&gt; as a key to pause the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At the start it works as expected&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The button flips the key &lt;/li&gt;
&lt;li&gt;useEffect fires, as &lt;code&gt;shouldStop&lt;/code&gt; is set as its dependency, and sets the loop
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positionX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setPositionX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;290&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setPositionY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;165&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the dot bounces at the edge, the app resets its position and flips the key back to &lt;code&gt;true&lt;/code&gt;. The dot rests in the middle of the screen. &lt;/p&gt;

&lt;p&gt;And now when I press the button, the key switches to &lt;code&gt;false&lt;/code&gt; yet nothing happens. After the second click key switches to &lt;code&gt;true&lt;/code&gt; again. And only on the third time the key switches to &lt;code&gt;false&lt;/code&gt; and the dot starts moving.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so" class="anchor"&gt;
  &lt;/a&gt;
  So
&lt;/h2&gt;

&lt;p&gt;I guess I have three questions 😼&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it a proper approach overall?&lt;/li&gt;
&lt;li&gt;What am I missing about the useEffect()?&lt;/li&gt;
&lt;li&gt;How do you trace / investigate those issues?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>help</category>
      <category>discuss</category>
      <category>react</category>
    </item>
    <item>
      <title>Why I turned my homepage into a timeline</title>
      <author>Mike Nikles</author>
      <pubDate>Sun, 06 Dec 2020 21:32:28 +0000</pubDate>
      <link>https://dev.to/mikenikles/why-i-turned-my-homepage-into-a-timeline-h9</link>
      <guid>https://dev.to/mikenikles/why-i-turned-my-homepage-into-a-timeline-h9</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@fprado?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Félix Prado&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/line?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-has-happened-so-far" class="anchor"&gt;
  &lt;/a&gt;
  What has happened so far?
&lt;/h2&gt;

&lt;p&gt;On December 21, 2019 I migrated my blog from Medium to my own infrastructure (&lt;a href="https://dev.to/mikenikles/migrating-from-medium-to-my-own-blog-1nj8"&gt;this blog post has more details&lt;/a&gt;). The main reason was to own my content rather than leaving it on servers owned by a company. It also gives me more flexibility should the need arise to provide my content in other formats, e.g. RSS feed.&lt;br&gt;
In summer of 2020, I launched &lt;a href="https://dev.to/blog/my-personal-website-v2-0"&gt;v2 of my website&lt;/a&gt; in preparation for the publication of my first book, &lt;a href="https://dev.to/cloud-native-web-development"&gt;Cloud Native Web Development&lt;/a&gt;. The main goal of v2 was to significantly simplify the architecture.&lt;/p&gt;

&lt;p&gt;As of v2, the homepage displayed a list of blog post previews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tn9KWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rskoce9bdanth9g159s9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tn9KWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rskoce9bdanth9g159s9.png" alt="v2 homepage with blog post thumbnails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was great up until just about now, read December 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-a-timeline-as-my-homepage" class="anchor"&gt;
  &lt;/a&gt;
  Why choose a timeline as my homepage?
&lt;/h2&gt;

&lt;p&gt;The latest evolution of the homepage looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0kxfk0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egnxcndi49oigsf2nnfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0kxfk0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egnxcndi49oigsf2nnfb.png" alt="Timeline homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lightweight version of the timeline is used on mobile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-8iR2zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nowka2m0wvaom4wc08h0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-8iR2zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nowka2m0wvaom4wc08h0.png" alt="Mobile intro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpvNZRp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilwiuu13j1rwytr9h5j0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpvNZRp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilwiuu13j1rwytr9h5j0.png" alt="Mobile timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://twitter.com/mikenikles/status/1334305377500925953"&gt;this Twitter thread&lt;/a&gt; for progress updates and how the homepage came together.&lt;/p&gt;

&lt;p&gt;The reason to show a timeline is twofold and inspired by &lt;a href="https://www.florin-pop.com/timeline"&gt;Florin Pop's timeline on his website&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;It's about more than blog posts&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#simplicity" class="anchor"&gt;
  &lt;/a&gt;
  Simplicity
&lt;/h3&gt;

&lt;p&gt;A bit over 1,000 visitors per month read a single blog post where I explain why I moved from React to Svelte, according to &lt;a href="https://your-analytics.org/mikenikles.com?preset=30days"&gt;my public website analytics&lt;/a&gt;.&lt;br&gt;
The second most visited page is the homepage with roughly 800 visitors per month. While the previous version was colorful and had nice images and blog post summaries, I received feedback from people saying they look at the titles and if anything sounds interesting, they click and read the blog post.&lt;/p&gt;

&lt;p&gt;The new timeline view reflects that and only displays a blog post's title, with a call to action to read the post.&lt;/p&gt;

&lt;p&gt;A nice side effect with the new view is a much more performant homepage given there is only a single image to load.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-more-than-blog-posts" class="anchor"&gt;
  &lt;/a&gt;
  It's about more than blog posts
&lt;/h3&gt;

&lt;p&gt;Throughout my career, I have mentored others, answered questions in online communities and worked on side projects.&lt;br&gt;
With the timeline view, I have a place to showcase this work and help others find me online and see what I'm up to.&lt;/p&gt;

&lt;p&gt;The filter &amp;amp; search features help narrow down what is displayed in the timeline. Starting in 2021, I am going to revive my &lt;a href="https://www.youtube.com/channel/UCgEvLz_YbByFqn8f32wh9lA"&gt;YouTube channel&lt;/a&gt;, so expect there to be new entries on the timeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Technical implementation
&lt;/h2&gt;

&lt;p&gt;The majority of the work happened in &lt;a href="https://github.com/mikenikles/www-mikenikles-com/pull/252"&gt;PR 252&lt;/a&gt;. There are about 10 lines of custom CSS code, the rest is styled with &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; and of course still based on &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; &amp;amp; &lt;a href="https://sapper.svelte.dev"&gt;Sapper&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Drawing a snowman in CSS... with no HTML elements!</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 06 Dec 2020 18:56:25 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/drawing-a-snowman-in-css-with-no-html-elements-57g7</link>
      <guid>https://dev.to/alvaromontoro/drawing-a-snowman-in-css-with-no-html-elements-57g7</guid>
      <description>&lt;p&gt;The snowman from the image was drawn in CSS, without using JavaScript or HTML, as you can see in the following &lt;a href="https://codepen.io/alvaromontoro/full/QWKNbrQ"&gt;snippet&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/QWKNbrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And here you can see a video of the drawing being coded step by step just using CSS (explanation of how it was done at the end of this post):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RhO0UmcREGo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But what type of witchcraft is this? How is it possible?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9jo6rdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/skikd7jc8omzhnmdc4cl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9jo6rdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/skikd7jc8omzhnmdc4cl.gif" alt='Animated gif of a strange-looking man saying "magic" while moving his hands dramatically'&gt;&lt;/a&gt;&lt;/p&gt;
Web development sometimes feels like this!



&lt;p&gt;Obviously, there's a trick. Codepen and other online editors, don't show the basic structure of the document that the user is editing. The written HTML code is then wrapped in something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"link.to.css.code.from.editor"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"link.to.js.code.from.editor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Here goes the HTML from the editor --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the snippet itself, there's nothing in the HTML or JavaScript boxes, which makes it look like there's no other code but CSS, but the code above (or something similar) is auto-generated to run.&lt;/p&gt;

&lt;p&gt;Because it looks like there's no HTML, some people call this type of CSS drawings a zero-element or no-div drawing... but truly there is an element: the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; (or the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; in the case of the snowman).&lt;/p&gt;

&lt;p&gt;Mystery solved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-was-done" class="anchor"&gt;
  &lt;/a&gt;
  How it was done
&lt;/h2&gt;

&lt;p&gt;As it can be seen in the &lt;a href="https://www.youtube.com/watch?v=RhO0UmcREGo"&gt;video above&lt;/a&gt;, we used 3 elements for this drawing: the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, and its &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/a&gt; pseudo-elements.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; tag was used to generate the snowy background (we even added a small animation). It is all a bunch of different sized circles generated with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient()"&gt;&lt;code&gt;radial-gradient&lt;/code&gt;&lt;/a&gt;, and positioned all over the place using the diverse properties of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the body of the snowman, we used the &lt;code&gt;body::before&lt;/code&gt;. We made it into a circle using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;&lt;code&gt;border-radius: 50%&lt;/code&gt;&lt;/a&gt; that will be the left eye. Then used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; to create more circles of different sizes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the other eye,&lt;/li&gt;
&lt;li&gt;the nose,&lt;/li&gt;
&lt;li&gt;the head,&lt;/li&gt;
&lt;li&gt;the buttons in the middle section,&lt;/li&gt;
&lt;li&gt;the middle section,&lt;/li&gt;
&lt;li&gt;the bottom section,&lt;/li&gt;
&lt;li&gt;some shadows between the different parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For one of the buttons, we used two circles so it would not look exactly like a circle. This was on purpose to break a little bit the symmetry of the cartoon.&lt;/p&gt;

&lt;p&gt;For the shadows between the different sections of our snowman, we added &lt;code&gt;box-shadows&lt;/code&gt; with a little bit of a blur.&lt;/p&gt;

&lt;p&gt;Finally, with the &lt;code&gt;body::after&lt;/code&gt; we made a transparent rectangle that covered the whole snowman. And tiltet it a little bit (again, to break the symmetry).&lt;/p&gt;

&lt;p&gt;With three &lt;code&gt;box-shadow&lt;/code&gt;s we generated the hat. And then used multiple &lt;code&gt;linear-gradient&lt;/code&gt; to create the arms, hands, and broom.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Et voilà !&lt;/em&gt; Our snowman is complete!&lt;/p&gt;

</description>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I started JavaScript</title>
      <author>JavierCunat</author>
      <pubDate>Sun, 06 Dec 2020 17:55:42 +0000</pubDate>
      <link>https://dev.to/javiercunat/how-i-started-javascript-39kf</link>
      <guid>https://dev.to/javiercunat/how-i-started-javascript-39kf</guid>
      <description>&lt;p&gt;Hello Enthusiasts of the Computer Science World!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-javascript" class="anchor"&gt;
  &lt;/a&gt;
  What is JavaScript?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; can be the biggest step you can take in your developer career, however when first starting JavaScript it was the hardest thing to grasp, I remember being confused and frustrated along the way. Although this is true I'm here to tell you this is the right option and you need to stick through it, just like learning any language with enough time and practice you will become fluent. Lets stay strong and stay determined. &lt;/p&gt;

&lt;p&gt;JavaScript was created in 1995 by the Netscape web browser, it was a way to add actions to websites, JavaScript is like the verb of a website, call to action. In 1995 it was a way to beat the competition, JavaScript became the standard also called &lt;code&gt;ECMAScript&lt;/code&gt; when it was first introduced. Every website nowadays uses an excessive amount of JavaScript for example, adding something to your cart on Amazon, signing in to your account in any website, liking a post on DEV, virtual reality, robotics, this is all made possible through JavaScript. This one skill will take you very far into your career and opens up a lot of possibilities, however take things step by step and think simply that JavaScript is just a file that you can write instructions to a computer telling it to do as you desire and code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principles-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Principles of JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First lets talk about &lt;code&gt;JavaScript types&lt;/code&gt;, there a seven types or &lt;code&gt;primitive values&lt;/code&gt; , you can open and try these commands in any console, example go to any website, right click, inspect element, open console:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Types&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;2+2 = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;"Hello" + "World"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Represents and Gives either True or False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;td&gt;Used when nothing is assigned to a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;the value represents the intentional absence of any object value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;returns a value of type symbol, has static properties that expose several members of built-in objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;objects are containers for named values called properties or methods they follow name:value pairs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Secondly we have &lt;code&gt;JavaScript Comparisons&lt;/code&gt;, these come in very useful with Booleans and they are very simple to understand as they are literally just comparing any type to another:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Comparisons&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!==&lt;/td&gt;
&lt;td&gt;3!==3 the ! basically means not, therefore 3 doesn't not equal three would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;3=3 would not work therefore always 3===3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;3&amp;gt;=3 three is greater than or equal to three would return true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;3&amp;lt;=3 three is less than or equal to three would return true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;3&amp;gt;3 would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;3&amp;lt;3 would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Next you would look into &lt;code&gt;JavaScript Variables&lt;/code&gt; now this is when JavaScript starts to get fun, this is how a program starts to remember things. A variable stores something and we can access that content through it for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is my blog about starting JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Type in post now in console &lt;/span&gt;
&lt;span class="nx"&gt;post&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is my blog about starting JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These variables are super important and can hold any type of content here are the different ways of calling them:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Variables&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;var= "hello" the first and basic way to declare a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;let&lt;/td&gt;
&lt;td&gt;let= "hello" the new and improved version to declare a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;const="hello" unlike the other two this variable you cannot modify its not interchangeable like others, hence its constant&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Fourth on the list is &lt;code&gt;JavaScript Conditionals&lt;/code&gt;, these conditionals are to control and make decisions that you have written in your code, there are a few:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Conditionals&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;basically if would say if this is right then right true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;if its anything other than the if or later on else if then finally run this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;else if&lt;/td&gt;
&lt;td&gt;the computer would run after the if the else to see if that is correct to run that&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Billy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Billy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi Billy!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;P.S. All alert() does is make a pop up for the user to display that information that it is correct so the computer will return a pop up saying HI Billy! when running in console.&lt;/p&gt;

&lt;p&gt;Afterwards there are three &lt;code&gt;logical operators&lt;/code&gt; in JavaScript. Although they are called “logical”, they can be applied to values of any type, not only boolean. Their result can also be of any type. Let's take a look:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Logical Operators&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;The AND operator is represented with two ampersands &amp;amp;&amp;amp;. AND returns true if both operands are truthy and false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"//"&lt;/td&gt;
&lt;td&gt;OR is meant to manipulate Boolean values only. If any of its arguments are true, it returns true, otherwise it returns false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;The Boolean NOT operator is represented with an exclamation sign ! Converts the operand to Boolean type: true/false. Returns the inverse value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Finally we have &lt;code&gt;JavaScript Functions&lt;/code&gt; these are the most important values you will learn in JavaScript to execute everything, they are pieces of code that perform actions, without them JavaScript wouldn't really do anything these actions can preform one or multiple. All functions are followed by () these call the function and then are {} these are the arguments, what's given to functions. These are different types of function:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Functions&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var a = function name() {}&lt;/td&gt;
&lt;td&gt;function declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;function name () {}&lt;/td&gt;
&lt;td&gt;anonymous function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;this returns a value in a function, it's important to have this to make sure the function acts the way we want it to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;console.log()&lt;/td&gt;
&lt;td&gt;the Console method log() outputs a message to the web console&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Function Explanation Diagram&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxPYAx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxxjaw7lbgti4w1w0nly.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxPYAx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxxjaw7lbgti4w1w0nly.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now you have a better understanding of JavaScript and realize that it goes a lot further than just these principles and fundamentals which you should practice and master to continue your path smoothly. I hope it wasn't as bad as you thought because at first I really did, and if you're still not there continue practicing, make fun simple projects I believe those maximize your understanding and comprehension in a not so frustrating way. Thank you for reading and remember to keep coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>introduction</category>
    </item>
    <item>
      <title>Questions YOU should ask when being interviewed</title>
      <author>Dimitris Platis</author>
      <pubDate>Sun, 06 Dec 2020 15:38:50 +0000</pubDate>
      <link>https://dev.to/platisd/questions-you-should-ask-when-being-interviewed-57de</link>
      <guid>https://dev.to/platisd/questions-you-should-ask-when-being-interviewed-57de</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reverse-interview-questions-for-software-engineers" class="anchor"&gt;
  &lt;/a&gt;
  🔄 Reverse interview questions for Software Engineers
&lt;/h3&gt;

&lt;p&gt;As a Software Engineer, you will go through several interviews in your career. These interviews are typically set up by the potential employers to evaluate your &lt;strong&gt;cultural and technical fitness&lt;/strong&gt; for the role.&lt;br&gt;
From the candidate's point of view, the interview process should not &lt;em&gt;just&lt;/em&gt; be about convincing the employer. That is of course important, however, it should not be your &lt;em&gt;primary&lt;/em&gt; concern unless you are in &lt;em&gt;dire&lt;/em&gt; need of a job. Instead, you should mainly aim to understand what the company works with, how your future teammates operate, what would your development be, and so on.&lt;br&gt;
In other words, you should strive to collect the necessary information which will allow &lt;strong&gt;you&lt;/strong&gt; to assess the technical and cultural suitability of the workplace, its tech and the people in it.&lt;/p&gt;

&lt;p&gt;This is what lead me to create a set of &lt;em&gt;reverse&lt;/em&gt; interview questions.&lt;br&gt;
It is tailored for &lt;em&gt;product companies&lt;/em&gt; and, nonetheless, should be adjusted depending on the setting as well as common sense. Do not try to blindly follow it irrespective of the flow of the conversation, it will just be awkward.&lt;br&gt;
Usually, the interviewer will ask you if you have any questions. This is your chance to start with them, taking into consideration what has already been discussed. No need to ask all of them, or in a particular order either. The &lt;strong&gt;context&lt;/strong&gt; matters!&lt;br&gt;
Most, if not all, questions are open-ended and there is &lt;strong&gt;no "correct" answer&lt;/strong&gt;. More precisely, it is up to you to determine whether the responses satisfy you or not. They are also best-addressed towards individuals involved with development. Do not ask them to a human resources representative or a recruiter. Furthermore, topics that should be covered in every interview, such as benefit package, working hours, salary etc, are not included.&lt;/p&gt;

&lt;p&gt;Overall, personal experience shows these questions make it easier for the interviewers to illustrate in depth &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;what&lt;/em&gt; they work with. Thus far, they have been warmly welcomed and even helped to make a good impression. To say the least, they show the candidate is highly interested and seriously engaged with the process.&lt;br&gt;
More importantly, they enable you, as a Software Engineer, to make well-informed career decisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-stack" class="anchor"&gt;
  &lt;/a&gt;
  👩‍💻 Technology stack 👨‍💻
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What does your technology stack look like?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Unless already mentioned, do not forget to ask about programming languages, target operating system, build system or framework, continuous integration and version control software.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#way-of-working" class="anchor"&gt;
  &lt;/a&gt;
  ⚙️ Way of Working ⚙️
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Before a team member starts working on a task, what preparatory work has taken place and what occurs after?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Is the task is written down in some tool and who writes it? Are the tasks derived from a certain set of requirements? Who maintains those requirements? How is traceability ensured? How does the code get peer-reviewed?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you have a specific workstation setup in regards to the operating system, the IDE etc?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;In some projects, there is a very well-defined toolset, either due to company guidelines or constraints set by the product domain. Others let developers freely select their own. The latter is not always the better choice since it may be trickier to set up an efficient workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you use any containers for your development environment and/or the product?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Using containers makes it easier to get all necessary dependencies, however, may be less flexible.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you do pair programming?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Some like pair-programming, some do not. In any case, it is something good to know in advance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you ensure knowledge sharing?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Knowledge sharing is important and there are different ways to do it, which may or may not suit you.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Are there usually person-specific tasks or can everything be taken up by anyone?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is one of the most important questions for me. I strongly prefer it when everyone can potentially take up any task in the team. However, others like to go deep and specialize in particular sub-domains.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you write documentation?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Do they maintain separate documents, is it contained in the code, or is everything self-documenting so there is no need for extra documentation?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you work with bugs?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;What happens after a bug is discovered? Who usually reports them? How does the emergence of a bug affect their planning?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you collaborate with other sites?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is often fun to work with colleagues located in different parts of the world, however, this does come with its set of challenges.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;When developing a feature, is the team able to complete it in its entirety?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This will give you a hint on the &lt;em&gt;size&lt;/em&gt; of the system you will be working with as well as how &lt;em&gt;vertical&lt;/em&gt; the team's domain of responsibility is.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#agile" class="anchor"&gt;
  &lt;/a&gt;
  🚅 Agile 🚅
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you follow any development methodology, e.g. Agile? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are there daily standups, retrospectives etc?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you write tasks?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are they formulated as user stories? Are they estimated?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you release software?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;How often do the releases take place? Are they automatically built and deployed?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#open-source" class="anchor"&gt;
  &lt;/a&gt;
  🚀 Open source 🚀
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Are you working with open source software? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Can they name some open source packages they heavily utilize? Do they upstream any changes? Working with open source can be a valuable experience to carry with to the next job and upstreamed changes offer great visibility. On the other hand, there may be multiple do's and don'ts which can make your life difficult.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#relations-with-customers" class="anchor"&gt;
  &lt;/a&gt;
  🧑‍🤝‍🧑 Relations with customers 🧑‍🤝‍🧑
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you collaborate with the customers?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dependencies, communication and collaboration with the customer can vary between projects or even teams in the same project. There are those who enjoy being tightly engaged with the customer while others prefer working more isolated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How smooth do customer deliveries usually go?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Delivering software may require intense collaboration with the customer for the new software to be integrated. Some thrive in such situations and view them as a chance to understand the customer needs better. Others try to avoid them.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#testing" class="anchor"&gt;
  &lt;/a&gt;
  🐜 Testing 🐜
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you test your code?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Testing and verification may happen at different levels. From unit and integration tests to manual verification and trying things out in hardware or software in the loop rigs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What test frameworks do you use?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Not all frameworks appeal the same to everyone. It is good if you know this in advance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What are your thoughts on Test Driven Development?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Do they use TDD? If not, why?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#career-path" class="anchor"&gt;
  &lt;/a&gt;
  🤵 Career path 🤵
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What do you think I will love about this job?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A good indicator of the extent they have understood your personal goals and style as well as the incentives they have to offer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Where do you see me in 5 years?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A question often addressed to you as an interviewee. Reversing it offers you insights on the available career development paths.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How common is it for employees from this branch/department/team to advance in the higher organizational hierarchy?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are the ones on the top coming from a different background from yours? Can your loyalty potentially pay off?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#selfdevelopment" class="anchor"&gt;
  &lt;/a&gt;
  📚 Self-development 📚
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How often do your employees attend conferences, courses, seminars or hackathons?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;All companies &lt;em&gt;claim&lt;/em&gt; they care for the personal development of their employees. However few have concrete examples of how they do it. Not all activities will satisfy all engineers, therefore getting input on this can be crucial.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#collaboration-with-3rd-parties" class="anchor"&gt;
  &lt;/a&gt;
  🤝 Collaboration with 3rd parties 🤝
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you work with external suppliers? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Working with external suppliers can be both fun and/or challenging. It is good if you can find out how this synergy works.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you collaborate with academia? If so, how? If not, would you be open to?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Participating in research projects can be interesting and rewarding. However, it may consume a portion of your time and it is not everyone's cup of tea.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#innovation" class="anchor"&gt;
  &lt;/a&gt;
  💡 Innovation 💡
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Who comes up with novel features and how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Does the responsibility for coming up with new features lie with the customer or the company's higher management? Is there an "advanced engineering" team that is tasked with this? Do the employees themselves often propose novel product functionality? Or is it interns that get to experiment with the fun stuff?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;What kind of functionality are you mostly working with, in this branch?&lt;/strong&gt;&lt;br&gt;&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Commodity&lt;/strong&gt; functionality constitutes all functionality that customers typically expect in a product or system, but that is also offered by competing companies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Differentiating&lt;/strong&gt; functionality contains the functionality that makes customers select our products or systems over those from competitors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Innovation&lt;/strong&gt; functionality is experimental functionality. Company experiments with different innovative ideas to identify new future differentiation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;The three types of functionality are found in Jan Bosch's 3LPM. &lt;a href="https://www.researchgate.net/publication/260584542_Achieving_Simplicity_with_the_Three-Layer_Product_Model"&gt;[1]&lt;/a&gt;, &lt;a href="https://janbosch.com/blog/index.php/2017/01/28/9-out-of-10-in-rd-work-on-commodity/"&gt;[2]&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6t0FEslo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cVoKY4Z.png" alt="3LPM Jan Bosch"&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>interview</category>
    </item>
    <item>
      <title>How to create a CLI with NodeJS</title>
      <author>Josias Aurel</author>
      <pubDate>Sun, 06 Dec 2020 14:15:59 +0000</pubDate>
      <link>https://dev.to/josiasaurel/how-to-create-a-cli-with-nodejs-1obf</link>
      <guid>https://dev.to/josiasaurel/how-to-create-a-cli-with-nodejs-1obf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#build-a-cli-with-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Build a CLI with NodeJs
&lt;/h1&gt;

&lt;p&gt;Hey there. In this tutorial, I am going to show you how to build a CLI app using NodeJS. This is going to be a simple app that will print a greeting to user, provided his/her name. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-cli" class="anchor"&gt;
  &lt;/a&gt;
  What is a CLI
&lt;/h3&gt;

&lt;p&gt;CLI stands for Command Line Interface. This is the kind of interface where a user makes use of commands in a terminal/console/shell in order to carry out tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start" class="anchor"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h3&gt;

&lt;p&gt;First things first, let's create a new directory to contain our app source code.&lt;br&gt;
We are going to name that directory &lt;code&gt;greet&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;greet
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next thing is to move to that directory and initialise a new node project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Running the above command to create a new node project is going to ask you some questions, you can choose to skip all of them by continually pressing the &lt;code&gt;enter&lt;/code&gt; key.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that whatever you do, the name you choosed when asked the questions should match the name you want for your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next things is to actually write the code for the app.&lt;br&gt;
Open index.js (or whatever name you gave to the main file) and add the following code at the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="c1"&gt;// ...your code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might have seen such code somewhere, especially if you have used python before. That line of code is called a shebang. What it does is : it makes your program executable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-does-a-shebang-work-" class="anchor"&gt;
  &lt;/a&gt;
  But how does a shebang work ?
&lt;/h3&gt;

&lt;p&gt;It is a program loader, which will essentially look for an interpreter for the kind of instructions the program contains and run it, passing as first argument the path to the main file.&lt;br&gt;
In this case, it will look for node executable in &lt;code&gt;usr/bin&lt;/code&gt; and run it, passing the path to your main javascript file as first argument.&lt;/p&gt;

&lt;p&gt;Next comes our main program. Our program needs to take the name of the user as first argument. Luckily, Nodejs makes it easy to access command line arguments. This arguments are accessed through &lt;code&gt;process.argv&lt;/code&gt;.&lt;br&gt;
Add the following to your code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now try running your program. You will notice the following output :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;'/data/data/com.termux/files/usr/bin/node'&lt;/span&gt;,
  &lt;span class="s1"&gt;'/data/data/com.termux/files/home/greet/index.js'&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are not adding any arguments to our node programs but we get two. By default, Nodejs will pass two arguments to you program, regardless if it has to take any. The first is the absolute path to the Nodejs executable and the second is the absolute path to your file. &lt;br&gt;
Now try running your program again, passing anything as argument. Try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js hello
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;'/data/data/com.termux/files/usr/bin/node'&lt;/span&gt;,
  &lt;span class="s1"&gt;'/data/data/com.termux/files/home/greet/index.js'&lt;/span&gt;,
  &lt;span class="s1"&gt;'hello'&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So our argument comes after the first two. We therefore need to &lt;em&gt;slice&lt;/em&gt; those two first away from the array to get a new array containing only our arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your code should look like this now&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now try running your script passing it any two arguments. You will get back an array containing the arguments you passed.&lt;/p&gt;

&lt;p&gt;Now we want to access the first argument as the name of the user to greet. That should be the first element of the arguments array.&lt;br&gt;
You will end up with such code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the last line we are sending a Hello message + the first argument we get which should be the name of the user. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-turn-it-into-a-cli" class="anchor"&gt;
  &lt;/a&gt;
  Time to turn it into a CLI
&lt;/h2&gt;

&lt;p&gt;Now we want to turn the app into a CLI that we can use anywhere in our terminal. &lt;br&gt;
Follow the below steps .&lt;br&gt;
First add a &lt;code&gt;bin&lt;/code&gt; key to your &lt;code&gt;package.json&lt;/code&gt; and set it's value to the name of your main script. Here is what mine looks like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A simple cli to greet users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;
   },
   &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;Josias&lt;/span&gt; &lt;span class="nx"&gt;Aurel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,
   &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;
 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, in the root of your project, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this command does, is it creates a &lt;code&gt;symlink&lt;/code&gt; i.e, links your script to a global executable, making your script available globally in your terminal.&lt;br&gt;
Now you can use your CLI like you will use any other.&lt;br&gt;
Try running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;greet Mike
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you should get a greeting saying &lt;em&gt;Hello Mike&lt;/em&gt; in your terminal. You are free to close your terminal or try it anywhere in it and it will work.&lt;/p&gt;

&lt;p&gt;You have reached the end of this tutorial.&lt;/p&gt;

&lt;p&gt;Thank you for reading ♥️.&lt;/p&gt;

</description>
      <category>node</category>
      <category>cli</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Setting Up Width of Images In CSS</title>
      <author>Ayu</author>
      <pubDate>Sun, 06 Dec 2020 14:01:59 +0000</pubDate>
      <link>https://dev.to/adiatiayu/setting-up-width-of-images-in-css-3m38</link>
      <guid>https://dev.to/adiatiayu/setting-up-width-of-images-in-css-3m38</guid>
      <description>&lt;p&gt;Hello Fellow Codenewbies 👋&lt;/p&gt;

&lt;p&gt;You probably use &lt;code&gt;px&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt; to set up the size of your image in CSS.&lt;br&gt;
Well, I did.&lt;/p&gt;

&lt;p&gt;But there is a good practice that I learned recently on how to set up the size of images, particularly the &lt;em&gt;width&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Percentage&lt;/em&gt; is better to be used when we want to set the width of an image.&lt;/p&gt;

&lt;p&gt;Let's take a look at this example.&lt;br&gt;
In this example, we set the width of the image to 100%.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/adiati/embed/VwKazNR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Oops.&lt;br&gt;
Are you seeing a blurred image?&lt;br&gt;
Maybe now you think that this image has bad quality?&lt;/p&gt;

&lt;p&gt;The image has a relatively small resolution of 800 x 532 pixels.&lt;br&gt;
What will happen if we expand the size of an image to be more than its own size?&lt;br&gt;
Precisely! The quality will be reduced and we start to see pixels.&lt;/p&gt;

&lt;p&gt;So it is not the image that has bad quality, but &lt;em&gt;percentage&lt;/em&gt; as one of the &lt;a href="https://adiati.com/css-units"&gt;relative CSS units&lt;/a&gt; makes the width of the image relative to its parent.&lt;/p&gt;

&lt;p&gt;Setting up the width to 100% to the image means that the width of the image is as big as the width of the parent, which in this example, we've set the parent's width to 200%.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-should-we-do-now" class="anchor"&gt;
  &lt;/a&gt;
  What should we do now?
&lt;/h4&gt;

&lt;p&gt;We use the &lt;code&gt;max-width&lt;/code&gt; instead of &lt;code&gt;width&lt;/code&gt; and set it to 100%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We cannot change the quality of an image.&lt;br&gt;
But when we work with images, especially images with relatively small-resolution, we better keep their original resolution to maintain their quality.&lt;/p&gt;

&lt;p&gt;By setting &lt;code&gt;max-width&lt;/code&gt; to 100% to an image, we are setting the maximum width to 100% of its own size.&lt;br&gt;
So, the image would never get bigger than it is supposed to be even though the width of its parent gets bigger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When we work with images, it's a good practice to use &lt;code&gt;max-width&lt;/code&gt; instead of &lt;code&gt;width&lt;/code&gt; to maintain the quality of the image.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
This post is one of my TIL note based on my learning on &lt;a href="https://scrimba.com/learn/frontend#"&gt;Scrimba&lt;/a&gt; platform.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>What I've learned from the Advent of Code so far (days 1-5)</title>
      <author>Minna Nurmiluoto</author>
      <pubDate>Sun, 06 Dec 2020 12:22:20 +0000</pubDate>
      <link>https://dev.to/levelupkoodarit/what-i-ve-learned-from-the-advent-of-code-so-far-days-1-5-1dm5</link>
      <guid>https://dev.to/levelupkoodarit/what-i-ve-learned-from-the-advent-of-code-so-far-days-1-5-1dm5</guid>
      <description>&lt;p&gt;I consider myself an advanced beginner in programming. I lack a lot of knowledge in best practices, gotchas, elegance... let alone algorithms, optimizations... I have no clue.&lt;/p&gt;

&lt;p&gt;I'm quite sure I won't make it through &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; but I wanted to give it a go anyway. I first thought to use Java to solve the puzzles because I'm more comfortable processing line-by-line input and doing "tricks" with it (I did a comprehensive course on it just at the beginning of this year), but decided on JavaScript because it's more beneficial for the things I'm learning at the moment.&lt;/p&gt;

&lt;p&gt;On the first five days, I had a couple of facepalm moments 🤦 but also some proud moments 🏆.&lt;/p&gt;

&lt;p&gt;Here are some of the things that have helped me on puzzle-solving days 1-5.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#neat-feature-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  Neat feature: Destructuring
&lt;/h1&gt;

&lt;p&gt;On day 2 I was quite proud of myself for remembering &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;the destructuring assignment&lt;/a&gt; feature. The task is to process a list with the following data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int-int char: string
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One line contains a password policy and a password, so first I separated the policy from the password&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [policy, password] = line.split(': ');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then I separated the numbers from the character in the policy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [amount, character] = policy.split(' ');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally the first number and the second number (representing min and max values in the first part of the puzzle and two positions in the second part):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [min, max] = amount.split('-');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Very handy!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#neat-method-arrayfrom" class="anchor"&gt;
  &lt;/a&gt;
  Neat method: Array.from()
&lt;/h1&gt;

&lt;p&gt;For the colour code validation on day 4, I use &lt;code&gt;indexOf()&lt;/code&gt;. First I had an array with the possible values like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let validChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I got a tip to make it sooo much more elegant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let validChars = Array.from('0123456789abcdef');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Coolio! 😎 As it sounds like, here &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; creates an array from the given string.&lt;/p&gt;

&lt;p&gt;If you are wondering why I'm processing the numbers as strings, it's just so much simpler because the valid characters are either numbers or strings. And actually, the value comes as a string to validation so &lt;code&gt;===&lt;/code&gt; works more reliably this way.&lt;/p&gt;

&lt;p&gt;I'm really digging this array of valid values, too. First I had&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (value === 'amb' || 
    value === 'blu' || 
    value === 'brn' || 
    value === 'gry' || 
    value === 'grn' || 
    value === 'hzl' || 
    value === 'oth' ) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;for the hair colour validation 😅 but I just changed it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let validColors = ['amb', 'blu', 'brn', 'gry', 'grn', 'hzl', 'oth'];

if (validColors.indexOf(value) != -1) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-break-up-processing-into-functions" class="anchor"&gt;
  &lt;/a&gt;
  Tip: Break up processing into functions
&lt;/h1&gt;

&lt;p&gt;On day 4 you have to do data validation and I was puzzled by how I'd be able to end processing of an invalid value in a nested loop and get back to the outer loop to validate the next value. I got a tip – one that I should remember by now – that I should make more helper functions. There's no such thing as too many functions (within reason). 😄&lt;/p&gt;

&lt;p&gt;My colour code validation was made much simpler with a helper function that returns either true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function hexValidity(hexValue) {
  let validChars = Array.from('0123456789abcdef');
  let colourArray = Array.from(hexValue);

  if (colourArray[0] != '#' || colourArray.length != 7) {
    return false;
  }

  for (let i = 1; i &amp;lt; colourArray.length; i++) {
    let currentChar = colourArray[i];

    if (validChars.indexOf(currentChar) === -1) {
      return false;
    }
  }
  return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#tip-create-variables-more-often" class="anchor"&gt;
  &lt;/a&gt;
  Tip: Create variables more often
&lt;/h1&gt;

&lt;p&gt;The code is easier to read when you first assign results of functions, values from arrays, etc. in variables and use them in another structure. For example in my colour validation code for day 4, I first had:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (validChars.indexOf(colourArray[i]) === -1) {
  return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Compare with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let currentChar = colourArray[i];

if (validChars.indexOf(currentChar) === -1) {
  return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#tip-use-modulo-where-you-can" class="anchor"&gt;
  &lt;/a&gt;
  Tip: Use modulo where you can
&lt;/h1&gt;

&lt;p&gt;I keep forgetting how useful (and multi-use) modulo &lt;code&gt;%&lt;/code&gt; is. &lt;/p&gt;

&lt;p&gt;For my &lt;a href="#toboggan"&gt;toboggan trajectory&lt;/a&gt; on day 3, I skip to the beginning of the line ("horizontal index" 0) when I go over the length of the array (31) so in my code, I subtract the length from the horizontal index if it's over 30 (last possible index). With modulo, I could just use &lt;code&gt;index % 31&lt;/code&gt; and be done with it.&lt;/p&gt;

&lt;p&gt;If you have a situation where a value has to loop back to 0 at some point, use modulo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#best-practice-early-exit" class="anchor"&gt;
  &lt;/a&gt;
  Best practice: Early exit
&lt;/h1&gt;

&lt;p&gt;It's best to start by validating your data so you can break out of a loop/function as early as possible. For example on day 4, it's wise to check if the passport ID even has the required 9 characters &lt;strong&gt;before&lt;/strong&gt; you start validating if each of the characters is a digit. Same with the hex colour codes: if it doesn't have a hash &lt;code&gt;#&lt;/code&gt; at the beginning and exactly 6 characters after it, there's no point validating it in more detail.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#take-heed-scope-of-variables" class="anchor"&gt;
  &lt;/a&gt;
  Take heed: Scope of variables
&lt;/h1&gt;

&lt;p&gt;This was a moment of a huge facepalm. On day 4 you have to do data validation, which in itself is quite complicated to do for seven different value types.&lt;/p&gt;

&lt;p&gt;After I'd extracted the value validation itself into a separate function, as &lt;a href="#breaking"&gt;mentioned above&lt;/a&gt;, I found myself facing an infinite loop. The code was able to process the first three values ok but then it got stuck looping with second and third value. A lot of debugging later, I was this much wiser: 💡 remember to &lt;strong&gt;always&lt;/strong&gt; declare the initial variable of a &lt;code&gt;for&lt;/code&gt; loop 💡 or the code may end up using a completely wrong variable.&lt;/p&gt;

&lt;p&gt;I had forgotten the &lt;code&gt;let&lt;/code&gt; from a couple of &lt;code&gt;for&lt;/code&gt; loops where used &lt;code&gt;i&lt;/code&gt; as the index counter. 🤦&lt;/p&gt;

&lt;p&gt;This actually brings to mind another tip for myself: keep in mind the existence of &lt;code&gt;for/of&lt;/code&gt; loop! I could've made my code a lot simpler with it.&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-proud-moment-on-day-3" class="anchor"&gt;
  &lt;/a&gt;
  A proud moment on day 3
&lt;/h1&gt;

&lt;p&gt;First I was completely at a loss with the puzzle on day 3: how am I supposed to figure out a trajectory through lines of data? I don't know about vectors or any map algorithms.&lt;/p&gt;

&lt;p&gt;I started visualizing the problem as a matrix, but then was unsure how that would be done in JavaScript (would've been easy-peasy in Java) but it got me a step further: I put the lines into an array (array item per line) for vertical movement and used &lt;code&gt;charAt&lt;/code&gt; for the horizontal dimension of my "matrix". Once I had my function for the part 1 working and I was looking at part 2, I first thought "oh no, the function is going to be so messy with the for loop times 5". But then I realized, if I refactor my first function a bit I can reuse it by giving the numbers for traversing (x steps right, y steps down) as parameters and just assign the results to variables. 🏆&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Cover photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/advent-calendar?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>adventofcode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My Dev.to Writing Process</title>
      <author>Devin Witherspoon</author>
      <pubDate>Sun, 06 Dec 2020 12:11:09 +0000</pubDate>
      <link>https://dev.to/dcwither/my-dev-to-writing-process-2dng</link>
      <guid>https://dev.to/dcwither/my-dev-to-writing-process-2dng</guid>
      <description>&lt;p&gt;Beginning to write Dev.to articles was intimidating for me, and a tutorial on writing articles would have helped reduce the barrier to entry. Now that I've written six articles, I've settled into a comfortable flow that I thought I'd share with anyone else interested in taking the plunge into writing their own technical articles.&lt;/p&gt;

&lt;p&gt;I've tuned this process for my needs as a writer, ensuring I can consistently write technical articles with a specific structure, but I think it works well for opinion pieces as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-setup" class="anchor"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;I keep all my articles in a GitHub repository so that I can access them from multiple computers and track changes as I go. Like coding, sometimes I'm unsatisfied with my changes, and I want to compare them to a previous version. A simple file version manager would also suffice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-structure" class="anchor"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h3&gt;

&lt;p&gt;I keep my active articles in a &lt;code&gt;drafts&lt;/code&gt; folder. When I publish an article, I prepend it with the date and move it to the &lt;code&gt;published&lt;/code&gt; folder for ordering/archival purposes. This gives me a record of my articles and images in case I want to publish anywhere else or need to make a change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── README.md
├── drafts
│   ├── more_accessible
│   │   └── main.md
│   └── writing_process
│       └── main.md
├── package-lock.json
├── package.json
└── published
    ├── 2020_10_31_color_migration
    │   ├── hero.jpg
    │   └── main.md
    ├── 2020_11_07_testing_postcss
    │   ├── hero.jpg
    │   └── main.md
    ├── 2020_11_15_marginal_linting
    │   ├── hero.jpg
    │   ├── main.md
    │   └── reviewdog-annotation.png
    ├── 2020_11_16_use_datetime
    │   └── main.md
    ├── 2020_11_22_testing_time
    │   ├── hero.jpg
    │   └── main.md
    └── 2020_11_29_bad_variable_names
        ├── hero.png
        └── main.md
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#packagejson" class="anchor"&gt;
  &lt;/a&gt;
  Package.json
&lt;/h3&gt;

&lt;p&gt;I use Prettier with &lt;code&gt;lint-staged&lt;/code&gt; to automatically format my articles after every commit. This is particularly helpful for any code blocks in &lt;code&gt;.md&lt;/code&gt; files.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;scripts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;necessary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;hooks&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --ignore-path=.gitignore **/*.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint -- --write"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.{js,jsx,css,scss,md}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.5.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.1.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#vscode" class="anchor"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h3&gt;

&lt;p&gt;I use &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; to edit and preview markdown. I've tried &lt;a href="https://marktext.app/"&gt;Mark Text&lt;/a&gt;, and &lt;a href="https://typora.io/"&gt;Typora&lt;/a&gt;, neither of which felt right for me - their rich text editing for markdown seems to struggle with undo/redo.&lt;/p&gt;

&lt;p&gt;I use the following VSCode Plugins to help with my writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ban.spellright"&gt;Spell Right&lt;/a&gt; for basic spell checking.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;VSCode Prettier&lt;/a&gt; auto-formats my code on every save.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=travisthetechie.write-good-linter"&gt;Write Good&lt;/a&gt; encourages me to use active voice and cuts unnecessary words.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's my project level &lt;code&gt;.vscode/settings.json&lt;/code&gt; for configuring the plugins:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.rulers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"[markdown]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bounded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrapColumn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"write-good.languages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plaintext"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"languageToolLinter.serviceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"public"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-process" class="anchor"&gt;
  &lt;/a&gt;
  The Process
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#ideas" class="anchor"&gt;
  &lt;/a&gt;
  Ideas 💡
&lt;/h3&gt;

&lt;p&gt;I initially struggled each week to come up with new article ideas, so I started tracking my thoughts as they popped into my head throughout the day. As I come up with ideas I add them as sections to &lt;code&gt;README.md&lt;/code&gt;. To develop the idea, I add bullet points that I'd like to cover. Often these bullet points become the headings for my articles. If my computer isn't near, I add a short note on my phone to move to my &lt;code&gt;README.md&lt;/code&gt; later.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure-%F0%9F%8F%97" class="anchor"&gt;
  &lt;/a&gt;
  Structure 🏗
&lt;/h3&gt;

&lt;p&gt;When I get started on an article, I try to get the heading structure onto the page first. This helps me identify what I want to say and make sure I'm making an honest effort at having a flow to my article. At this point I run the structure by my editor (in my case, my wife, but whomever you have to get a second opinion can help).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-draft" class="anchor"&gt;
  &lt;/a&gt;
  First Draft 📝
&lt;/h3&gt;

&lt;p&gt;Now that I have the idea and structure, it's time to write the article. In addition to the article itself, I build demos or test applications to verify technical accuracy. For instance, I made &lt;a href="https://www.npmjs.com/package/jest-postcss"&gt;&lt;code&gt;jest-postcss&lt;/code&gt;&lt;/a&gt; while writing &lt;a href="https://dev.to/dcwither/writing-cleaner-tests-with-jest-extensions-5fmb"&gt;Writing Cleaner Tests with Jest Extensions&lt;/a&gt; and an example repo for &lt;a href="https://dev.to/dcwither/adding-new-lint-rules-without-the-fuss-34a2"&gt;Adding New Lint Rules Without the Fuss&lt;/a&gt;. I embed interactive tools (repl.it, Code Sandbox) whenever possible through Dev.to's &lt;a href="https://docs.dev.to/frontend/liquid-tags/"&gt;liquid tags&lt;/a&gt; to make the article more engaging.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#read-through" class="anchor"&gt;
  &lt;/a&gt;
  Read Through 👀
&lt;/h3&gt;

&lt;p&gt;I do a first pass to make sure everything makes sense to me. A lot of big edits and paragraph rearranging happen in this step. I try to leave the first draft sitting for a few hours or a day so I can come back to it with a fresh mind.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#listen-to-it" class="anchor"&gt;
  &lt;/a&gt;
  Listen to it 🎧
&lt;/h3&gt;

&lt;p&gt;Because I struggle to see what is wrong with my writing just by reading it, I use &lt;a href="https://support.apple.com/guide/mac-help/have-your-mac-speak-text-thats-on-the-screen-mh27448/mac"&gt;Mac's text to speech&lt;/a&gt; to listen to my article. This helps catch phrasing that is hard to parse or sounds awkward when read aloud. This and the read through help limit the time my editor puts into the writing - she's doing it for free after all.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#highlevel-feedback" class="anchor"&gt;
  &lt;/a&gt;
  High-Level Feedback 🚥
&lt;/h3&gt;

&lt;p&gt;At this point I ask my editor to look through the article for any big changes or gaps in the article. I try to not be too attached to anything I've written so far because anything is fair game for revisions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#polish" class="anchor"&gt;
  &lt;/a&gt;
  Polish ✨
&lt;/h3&gt;

&lt;p&gt;After addressing high-level comments, I ask my editor to walk through the entire article with me piece-by-piece to clean up wording. This is where we make sure the ideas are easy to understand for the reader. We no longer spend the whole time fixing passive voice now that I use the Write Good plugin.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ship-it" class="anchor"&gt;
  &lt;/a&gt;
  Ship It! 🚢
&lt;/h3&gt;

&lt;p&gt;For now I publish directly to Dev.to by copying my markdown files over, making sure to preview them for any issues. It's important to make sure liquid tags work before publishing since they don't render in VSCode's markdown preview.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hero-images" class="anchor"&gt;
  &lt;/a&gt;
  Hero Images
&lt;/h2&gt;

&lt;p&gt;Hero images help catch the reader's eye. They're an opportunity to show readers something about your article or yourself. I normally use a photo I've taken myself, but for articles with code I started using &lt;a href="https://carbon.now.sh/"&gt;Carbon.now.sh&lt;/a&gt; to help give readers a clearer idea of the article's contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://carbon.now.sh/LFkH9XtlBux9mHjyx69A"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QUQ1LsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egoeys5t6p8j2nbdt4jq.png" alt="example carbon screenshot"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;This was the hero image from my article, &lt;a href="https://dev.to/dcwither/stop-using-data-as-a-variable-name-3954"&gt;Stop Using "data" as a Variable Name&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's my whole process for writing technical articles. I hope it's helpful to anyone who wants to start writing and makes the process less intimidating. I'd love to hear what other tools, processes, or services people use for their writing.&lt;/p&gt;

&lt;p&gt;You can also check out my template repo, which I'll try to keep up-to-date with any new practices I adopt.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dcwither"&gt;
        dcwither
      &lt;/a&gt; / &lt;a href="https://github.com/dcwither/articles-template"&gt;
        articles-template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      template folder
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Ideas&lt;/h1&gt;
&lt;h2&gt;
Easy&lt;/h2&gt;
&lt;h2&gt;
Previous Projects&lt;/h2&gt;
&lt;h2&gt;
Future Projects&lt;/h2&gt;
&lt;h2&gt;
Opinion&lt;/h2&gt;
&lt;h2&gt;
Big Ideas&lt;/h2&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/dcwither/articles-template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>writing</category>
      <category>discuss</category>
      <category>tutorial</category>
      <category>markdown</category>
    </item>
    <item>
      <title>Light/Dark Mode Toggle Button Using 1 variable 2021 || CSS JS</title>
      <author>Khondokor Alam</author>
      <pubDate>Sun, 06 Dec 2020 08:01:10 +0000</pubDate>
      <link>https://dev.to/joyshaheb/light-dark-mode-toggle-button-using-1-variable-2021-css-js-13l</link>
      <guid>https://dev.to/joyshaheb/light-dark-mode-toggle-button-using-1-variable-2021-css-js-13l</guid>
      <description>&lt;p&gt;If you really want your &lt;strong&gt;Readers to Read All&lt;/strong&gt; of your &lt;strong&gt;contents&lt;/strong&gt;, then having a &lt;strong&gt;dark mode&lt;/strong&gt; is a must on your website.&lt;/p&gt;

&lt;p&gt;Because, A &lt;strong&gt;dark theme&lt;/strong&gt; reduces the irritation on readers eyes compared to light mode. &lt;/p&gt;

&lt;p&gt;Today, we'll make a Scalable &lt;strong&gt;dark/light mode toggler button&lt;/strong&gt;, &amp;amp; we'll do all the calculation's using 1 scss variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents 🔥
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;Codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;YouTube Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#codepen" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Codepen 🔥&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;You can find the full code on &lt;a href="https://codepen.io/joyshaheb/pen/gOwOGQE"&gt;Codepen&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/joyshaheb/embed/gOwOGQE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youtube-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Youtube Tutorial 🔥&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#if-the-codepen-is-difficult-for-you-then-see-step-by-step-tutorial-on-youtube" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://youtu.be/x0hGQ3blksE"&gt;If the codepen is difficult for you then see Step by step Tutorial on Youtube 🔥&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x0hGQ3blksE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suggestions-amp-criticisms-are-highly-appreciated-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  Suggestions &amp;amp; Criticisms are Highly Appreciated ❤️️
&lt;/h2&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>bind(), call(), and apply() in JavaScript</title>
      <author>RAJAT MEHRA</author>
      <pubDate>Sun, 06 Dec 2020 07:54:08 +0000</pubDate>
      <link>https://dev.to/rajatmehra05/bind-call-and-apply-in-javascript-3ml</link>
      <guid>https://dev.to/rajatmehra05/bind-call-and-apply-in-javascript-3ml</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRUs-vDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d14j8hctr8rnbt3o5lpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRUs-vDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d14j8hctr8rnbt3o5lpe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While coding in JavaScript, I'm always perplexed on how JavaScript works. It's just as Kyle Simpson says -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I don’t think anyone ever really knows JS, not completely anyway."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any programmer who is learning JavaScript might have come across with &lt;code&gt;this&lt;/code&gt; keyword for sure. So let's start with &lt;code&gt;this&lt;/code&gt;. In the process, we will see how bind(), call() and apply() are used with &lt;code&gt;this&lt;/code&gt;. I hope your doubts resolve after reading this post. Let's begin.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-raw-this-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is &lt;code&gt;this&lt;/code&gt; ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#this-in-javascript-is-set-to-the-current-environment-in-which-the-function-is-being-executed" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;'this' in JavaScript is set to the current environment in which the function is being executed.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Often good programmers find it astounding and confusing and have a vague citation to &lt;code&gt;this&lt;/code&gt; keyword.&lt;br&gt;
Hence, to clearly define the object to which &lt;code&gt;this&lt;/code&gt; keyword belongs, we need to use methods like &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-bind" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. bind()&lt;/strong&gt;
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#the-bind-method-creates-a-new-function-that-when-called-has-its-raw-this-endraw-keyword-set-to-the-provided-value" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The bind() method creates a new function that, when called, has its &lt;code&gt;this&lt;/code&gt; keyword set to the provided value.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Here is an example-👁&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ryan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;getInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Hello Ryan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we use bind(), a new displayInfo instance is created and binds user object to its &lt;code&gt;this&lt;/code&gt; keyword. Note: It copies the displayInfo function whenever a new instance is created using bind(). So when we call this.getName() inside the displayInfo, we get the name 'Ryan'. Besides we have the access to all the properties of user object.&lt;br&gt;
Also, &lt;code&gt;.bind&lt;/code&gt; allows you to set the this value now while allowing you to execute the function in the future, because it returns a new function object.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-call" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. call()&lt;/strong&gt;
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#call-method-calls-a-function-with-a-given-raw-this-endraw-value-and-and-arguments-provided-individually" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;call() method calls a function with a given &lt;code&gt;this&lt;/code&gt; value and and arguments provided individually.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What does this mean? 👀&lt;br&gt;
This means that we can call any function and explicitly specify what &lt;em&gt;this&lt;/em&gt; should reference within the calling function.&lt;/p&gt;

&lt;p&gt;Here is an example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ryan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;greet2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;greet2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How are you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Hello! How are you Ryan?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;call() method accepts the first argument as &lt;code&gt;this&lt;/code&gt; reference and after that we can pass additional arguments to the fucntion. Here, we call displayInfo() with its &lt;code&gt;this&lt;/code&gt; set to user object and an addition argument greet with value 'Hello' &lt;br&gt;
&lt;code&gt;Note:&lt;/code&gt; .call() method doesn't make a copy of function like bind() does. 🤞&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-apply" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. apply()&lt;/strong&gt;
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#apply-method-is-similar-to-call-method-both-serve-the-exact-same-purpose" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;apply() method is similar to call() method. Both serve the exact same purpose.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; &lt;em&gt;The only difference between call() and apply()&lt;/em&gt; is that call() expects all parameters to be passed in individually, whereas apply() expects a single array of all arguments to be passed in.&lt;/p&gt;

&lt;p&gt;Here is an example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ryan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;greet2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;greet2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How are you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//Hello! How are you Ryan?&lt;/span&gt;

&lt;span class="nx"&gt;displayInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How are you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 
&lt;span class="c1"&gt;//Hello! How are you Ryan?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#where-to-use" class="anchor"&gt;
  &lt;/a&gt;
  Where to use?
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;.bind()&lt;/code&gt; when you want that function to later be called with a certain context useful in events. &lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt; when you want to invoke the function immediately, and modify the context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"&gt;mdn docs&lt;/a&gt; to read more about it and see the real implementation.&lt;/p&gt;

&lt;p&gt;Such built-in methods in JavaScript can be useful to any programmer or coder. 👾✌&lt;/p&gt;

&lt;p&gt;I hope you find this post useful and informative. Share your feedback on comments section. If you have queries, reach out to me on &lt;a href="https://www.linkedin.com/in/rajat-mehra-1a0349a9/"&gt;linkedin&lt;/a&gt; , &lt;a href="https://www.instagram.com/frontend_ryan"&gt;instagram&lt;/a&gt;, &lt;a href="https://github.com/rajat-mehra05"&gt;github&lt;/a&gt;. 😀&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Mac setup for work 👩‍💻</title>
      <author>jun</author>
      <pubDate>Sun, 06 Dec 2020 07:43:18 +0000</pubDate>
      <link>https://dev.to/junlow/my-mac-setup-for-work-1d7k</link>
      <guid>https://dev.to/junlow/my-mac-setup-for-work-1d7k</guid>
      <description>&lt;p&gt;This weekend I'm going to setup a new Macbook Pro 13' for work. 💻 Here are my current preferences for setting up a MacBook Pro. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%EF%A3%BF-gt-system-preferences-" class="anchor"&gt;
  &lt;/a&gt;
   &amp;gt; System Preferences :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keyboard &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input sources - set to regular ABC instead of a specific country.&lt;/li&gt;
&lt;li&gt;Key repeat set to the fastest and delayed until repeat to the shortest.&lt;/li&gt;
&lt;li&gt;Shortcuts - Mission Control - overwrite &lt;code&gt;command + Q&lt;/code&gt; to the Do Not Disturb on/off &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Desktop &amp;amp; Screen Saver &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screen Saver - Hot Corner - Set lock screen or sleep&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Trackpad &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Point &amp;amp; Click - change the speed to the fastest&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disable Ask Siri&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Dock &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove everything unnecessary application but leave some important like Finder and Trash&lt;/li&gt;
&lt;li&gt;Show recent applications in Dock &lt;/li&gt;
&lt;li&gt;Turn automatically hiding on&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finder - show path bar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Accessibility&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pointer Control - Trackpad Options - Enable dragging - three-finger drag&lt;/li&gt;
&lt;li&gt;Double click speed to the fastest&lt;/li&gt;
&lt;li&gt;Scrolling speed to the fastest&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Security and Privacy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow apps downloaded from App Store and identified developers&lt;/li&gt;
&lt;li&gt;Turn the Firewall on &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cherry-pick some good stuff &lt;a href="https://github.com/mathiasbynens/dotfiles/blob/master/.macos"&gt;here&lt;/a&gt; you think will suit you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applications-" class="anchor"&gt;
  &lt;/a&gt;
  Applications :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Brave browser and set it to default. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chrome extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj/related"&gt;checker-plus-for-gmail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=en"&gt;uBlock Origin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=en"&gt;ColorZilla&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/new-tab-studio-countdown/epngggilgnflanfabeldfpbgponcgpgl?hl=en"&gt;New Tab Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en"&gt;LastPass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall/related?hl=en"&gt;OneTab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/codecopy/fkbfebkcoelajmhanocgppanfoojcdmg/related?hl=en"&gt;CodeCopy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp/related?hl=en"&gt;OctoLinker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://theunarchiver.com/"&gt;The Unarchiver&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://zoom.us/"&gt;Zoom&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/desktop"&gt;Notion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://krisp.ai/"&gt;Krisp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ide-" class="anchor"&gt;
  &lt;/a&gt;
  IDE :
&lt;/h3&gt;

&lt;p&gt;I'm using &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; with Menlo font and following extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;GitLens&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;li&gt;Code Spell Checker&lt;/li&gt;
&lt;li&gt;Emmet&lt;/li&gt;
&lt;li&gt;Live Share&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#terminal-environments-" class="anchor"&gt;
  &lt;/a&gt;
  Terminal environments :
&lt;/h3&gt;

&lt;p&gt;I'm using iTerm2 + Zsh + Spaceship theme with following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;autosuggestions&lt;/li&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;homebrew&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;SSH &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See also &lt;a href="https://dev.to/aspittel/my-terminal-setup-iterm2--zsh--30lm"&gt;Ali Spittel's My Terminal Setup: iTerm2 + Zsh 🔥&lt;/a&gt; and &lt;a href="https://dev.to/gabsii/2020-macos-terminal-setup-zsh-iterm-1nln"&gt;Lukas Gabsi's 2020 🍀 macOS Terminal Setup (zsh + 🚀 + iTerm)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading my mac setup article. I really hope this could help speed up your process or gave you some ideas for the next macOS setup. 🚀 &lt;/p&gt;

&lt;p&gt;I am always looking for ways to improve my efficiency, so if you use any tool that you find useful, feel free to comment on this post.🙂&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>mac</category>
    </item>
  </channel>
</rss>
