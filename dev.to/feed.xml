<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Ultimate Javascript Cheatsheet </title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Wed, 01 Sep 2021 06:49:27 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/the-ultimate-javascript-cheatsheet-55j2</link>
      <guid>https://dev.to/rainboestrykr/the-ultimate-javascript-cheatsheet-55j2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-basics"&gt;
  &lt;/a&gt;
  JavaScript Basics
&lt;/h2&gt;

&lt;p&gt;Set of JavaScript basic syntax to add, execute and write basic programming paradigms in Javascript &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-page-script"&gt;
  &lt;/a&gt;
  On Page Script
&lt;/h3&gt;

&lt;p&gt;Adding internal JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt; //JS code goes here &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#external-js-file"&gt;
  &lt;/a&gt;
  External JS File
&lt;/h3&gt;

&lt;p&gt;Adding external JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="filename.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;JavaScript Function syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nameOfFunction () 
{
// function body 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dom-element"&gt;
  &lt;/a&gt;
  DOM Element
&lt;/h3&gt;

&lt;p&gt;Changing content of a DOM Element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("elementID").innerHTML = "Hello World!";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
This will print the value of a in JavaScript console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(a);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conditional-statements"&gt;
  &lt;/a&gt;
  Conditional Statements
&lt;/h3&gt;

&lt;p&gt;Conditional statements are used to perform operations based on some conditions.&lt;/p&gt;

&lt;p&gt;If Statement&lt;br&gt;
The block of code to be executed, when the condition specified is true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If-else Statement&lt;br&gt;
If the condition for the if block is false, then the else block will be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
} else {
// block of code to be executed if the condition is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Else-if Statement&lt;br&gt;
A basic if-else ladder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition1) {
// block of code to be executed if condition1 is true
} else if (condition2) {
// block of code to be executed if the condition1 is false and condition2 is true
} else {
// block of code to be executed if the condition1 is false and condition2 is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Switch Statement&lt;br&gt;
Switch case statement in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch(expression) {
case x:
// code block
break;
case y:
// code block
break;
default:
// code block
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterative-statements-loops"&gt;
  &lt;/a&gt;
  Iterative Statements (Loops)
&lt;/h3&gt;

&lt;p&gt;Iterative statement facilitates programmer to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer.&lt;/p&gt;

&lt;p&gt;For Loop&lt;br&gt;
For loop syntax in javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (statement 1; statement 2; statement 3) {
// code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While Loop&lt;br&gt;
Runs the code till the specified condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while (condition) {
// code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do While Loop&lt;br&gt;
A do while loop is executed at least once despite the condition being true or false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
// run this code in block
i++;
} while (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;The string is a sequence of characters that is used for storing and managing text data.&lt;/p&gt;

&lt;p&gt;charAt method&lt;br&gt;
Returns the character from the specified index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.charAt(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;concat method&lt;br&gt;
Joins two or more strings together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.concat(str2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index of method&lt;br&gt;
Returns the index of the first occurrence of the specified character from the string else -1 if not found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.indexOf('substr')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;match method&lt;br&gt;
Searches a string for a match against a regular expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.match(/(chapter \d+(\.\d)*)/i;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace method&lt;br&gt;
Searches a string for a match against a specified string or char and returns a new string by replacing the specified values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.replace(str2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;search method&lt;br&gt;
Searches a string against a specified value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.search('term')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;split method&lt;br&gt;
Splits a string into an array consisting of substrings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.split('\n')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;substring method&lt;br&gt;
Returns a substring of a string containing characters from the specified indices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.substring(0,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;The array is a collection of data items of the same type. In simple terms, it is a variable that contains multiple values.&lt;/p&gt;

&lt;p&gt;variable&lt;br&gt;
Containers for storing data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var fruit = ["element1", "element2", "element3"];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;concat method&lt;br&gt;
Joins two or more arrays together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;concat()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;indexOf method&lt;br&gt;
Returns the index of the specified item from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;indexOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;join method&lt;br&gt;
Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pop method&lt;br&gt;
Deletes the last element of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;reverse method&lt;br&gt;
This method reverses the order of the array elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sort method&lt;br&gt;
Sorts the array elements in a specified manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toString method&lt;br&gt;
Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;valueOf method&lt;br&gt;
returns the relevant Number Object holding the value of the argument passed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#number-methods"&gt;
  &lt;/a&gt;
  Number Methods
&lt;/h3&gt;

&lt;p&gt;JS math and number objects provide several constant and methods to perform mathematical operations.&lt;/p&gt;

&lt;p&gt;toExponential method&lt;br&gt;
Converts a number to its exponential form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toExponential()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toPrecision method&lt;br&gt;
Formats a number into a specified length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toPrecision()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toString method&lt;br&gt;
Converts an object to a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;valueOf method&lt;br&gt;
Returns the primitive value of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#maths-methods"&gt;
  &lt;/a&gt;
  Maths Methods
&lt;/h3&gt;

&lt;p&gt;ceil method&lt;br&gt;
Rounds a number upwards to the nearest integer, and returns the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ceil(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;exp method&lt;br&gt;
Returns the value of E^x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exp(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;log method&lt;br&gt;
Returns the logarithmic value of x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;log(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pow method&lt;br&gt;
Returns the value of x to the power y.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pow(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;random method&lt;br&gt;
Returns a random number between 0 and 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;random()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sqrt method&lt;br&gt;
Returns the square root of a number x&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sqrt(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dates"&gt;
  &lt;/a&gt;
  Dates
&lt;/h3&gt;

&lt;p&gt;Date object is used to get the year, month and day. It has methods to get and set day, month, year, hour, minute, and seconds.&lt;/p&gt;

&lt;p&gt;Pulling Date from the Date object&lt;br&gt;
Returns the date from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDate()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Day from the Date object&lt;br&gt;
Returns the day from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDay()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Hours from the Date object&lt;br&gt;
Returns the hours from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getHours()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Minutes from the Date object&lt;br&gt;
Returns the minutes from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getMinutes()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Seconds from the Date object&lt;br&gt;
Returns the seconds from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getSeconds()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Time from the Date object&lt;br&gt;
Returns the time from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getTime()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mouse-events"&gt;
  &lt;/a&gt;
  Mouse Events
&lt;/h3&gt;

&lt;p&gt;Any change in the state of an object is referred to as an Event. With the help of JS, you can handle events, i.e., how any specific HTML tag will work when the user does something.&lt;/p&gt;

&lt;p&gt;click&lt;br&gt;
Fired when an element is clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('click', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;oncontextmenu&lt;br&gt;
Fired when an element is right-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('contextmenu', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dblclick&lt;br&gt;
Fired when an element is double-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('dblclick', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mouseenter&lt;br&gt;
Fired when an element is entered by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseenter', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mouseleave&lt;br&gt;
Fired when an element is exited by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseleave', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mousemove&lt;br&gt;
Fired when the mouse is moved inside the element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mousemove', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keyboard Events&lt;br&gt;
keydown&lt;br&gt;
Fired when the user is pressing a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keydown', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;keypress&lt;br&gt;
Fired when the user presses the key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keypress', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;keyup&lt;br&gt;
Fired when the user releases a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keyup', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  Errors
&lt;/h3&gt;

&lt;p&gt;Errors are thrown by the compiler or interpreter whenever they find any fault in the code, and it can be of any type like syntax error, run-time error, logical error, etc. JS provides some functions to handle the errors.&lt;/p&gt;

&lt;p&gt;try and catch&lt;br&gt;
Try the code block and execute catch when err is thrown&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {
Block of code to try
}
catch(err) {
Block of code to handle errors
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Window Methods&lt;br&gt;
Methods that are available from the window object&lt;/p&gt;

&lt;p&gt;alert method&lt;br&gt;
Used to alert something on the screen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alert()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;blur method&lt;br&gt;
The blur() method removes focus from the current window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;blur()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setInterval&lt;br&gt;
Keeps executing code at a certain interval&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setTimeout&lt;br&gt;
Executes the code after a certain interval of time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setTimeout(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;close&lt;br&gt;
The Window. close() method closes the current window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;confirm&lt;br&gt;
The window.confirm() instructs the browser to display a dialog with an optional message, and to wait until the user either confirms or cancels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.confirm('Are you sure?')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open&lt;br&gt;
Opens a new window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.open("https://www.google.com");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;prompt&lt;br&gt;
Prompts the user with a text and takes a value. Second parameter is the default value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = prompt("What is your name?", "Abhiraj");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;scrollBy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollBy(100, 0); // Scroll 100px to the right
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;scrollTo&lt;br&gt;
Scrolls the document to the specified coordinates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollTo(500, 0); // Scroll to horizontal position 500
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clearInterval&lt;br&gt;
Clears the setInterval. var is the value returned by setInterval call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearInterval(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clearTimeout&lt;br&gt;
Clears the setTimeout. var is the value returned by setTimeout call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearTimeout(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;stop&lt;br&gt;
Stops the further resource loading&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#queryget-elements"&gt;
  &lt;/a&gt;
  Query/Get Elements
&lt;/h3&gt;

&lt;p&gt;The browser creates a DOM (Document Object Model) whenever a web page is loaded, and with the help of HTML DOM, one can access and modify all the elements of the HTML document.&lt;/p&gt;

&lt;p&gt;querySelector&lt;br&gt;
Selector to select first matching element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('css-selectors')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;querySelectorAll&lt;br&gt;
A selector to select all matching elements&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll('css-selectors', ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;getElementsByTagName&lt;br&gt;
Select elements by tag name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByTagName('element-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;getElementsByClassName&lt;br&gt;
Select elements by class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByClassName('class-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get Element by Id&lt;br&gt;
Select an element by its id&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating Elements&lt;br&gt;
Create new elements in the DOM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createElement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createElement('div')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;createTextNode&lt;br&gt;
Create a new text node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createTextNode('some text here')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pointer vs Reference in C++: The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Wed, 01 Sep 2021 06:42:42 +0000</pubDate>
      <link>https://dev.to/zigrazor/pointer-vs-reference-in-c-the-final-guide-3475</link>
      <guid>https://dev.to/zigrazor/pointer-vs-reference-in-c-the-final-guide-3475</guid>
      <description>&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; in C++ is a variable that holds the memory address of another variable.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;reference&lt;/strong&gt; is an alias for an already existing variable. Once a reference is initialized to a variable, it cannot be changed to refer to another variable. Hence, a reference is similar to a const pointer (not to be confused with a pointer to a constant value!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-differences"&gt;
  &lt;/a&gt;
  Key differences
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pointer"&gt;
  &lt;/a&gt;
  Pointer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be initialized to any value anytime after it is declared.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
// some code
int *p = &amp;amp;a;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be assigned to point to a &lt;code&gt;NULL&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pointers&lt;/strong&gt; need to be dereferenced with a &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be changed to point to any variable of the same type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
int *p;
p = &amp;amp;a;
int b = 6;
p = &amp;amp;b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;reference&lt;/strong&gt; must be initialized when it is declared.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
int &amp;amp;ref = a;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; cannot be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; can be used ,simply, by name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once a &lt;strong&gt;reference&lt;/strong&gt; is initialized to a variable, it cannot be changed to refer to a variable object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-differences"&gt;
  &lt;/a&gt;
  Other Differences
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#memory-details"&gt;
  &lt;/a&gt;
  Memory Details
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; has its own memory address and size on the stack whereas a &lt;strong&gt;reference&lt;/strong&gt; shares the same memory address (with the original variable) but also takes up some space on the stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arithmetic-operations"&gt;
  &lt;/a&gt;
  Arithmetic operations
&lt;/h3&gt;

&lt;p&gt;Various arithmetic operations can be performed on &lt;strong&gt;pointers&lt;/strong&gt; whereas there is no such thing called &lt;strong&gt;Reference&lt;/strong&gt; Arithmetic.(but you can take the address of an object pointed by a reference and do pointer arithmetics on it as in &lt;code&gt;&amp;amp;obj + 6&lt;/code&gt;).)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-use-pointer-and-when-use-reference"&gt;
  &lt;/a&gt;
  When use Pointer and when use Reference
&lt;/h2&gt;

&lt;p&gt;The performances are exactly the same, as references are implemented internally as pointers. But still you can keep some points in your mind to decide when to use what :  &lt;/p&gt;

&lt;p&gt;Use references :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In function parameters and return types.
Use pointers: &lt;/li&gt;
&lt;li&gt;Use pointers if pointer arithmetic or passing NULL-pointer is needed. For example for arrays (Note that array access is implemented using pointer arithmetic).&lt;/li&gt;
&lt;li&gt;To implement data structures like linked list, tree, etc and their algorithms because to point different cell, we have to use the concept of pointers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As said in a &lt;a href="https://isocpp.org/wiki/faq/references#refs-vs-ptrs"&gt;C++ official FAQ&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use references when you can, and pointers when you have to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;References are usually preferred over pointers whenever you don’t need “reseating”. This usually means that references are most &amp;gt;useful in a class’s public interface. References typically appear &amp;gt;on the skin of an object, and pointers on the inside.&lt;/p&gt;

&lt;p&gt;The exception to the above is where a function’s parameter or return value needs a “sentinel” reference — a reference that does not refer to an object. This is usually best done by returning/taking a pointer, and giving the nullptr value this special significance (references must always alias objects, not a dereferenced null pointer).&lt;/p&gt;

&lt;p&gt;Note: Old line C programmers sometimes don’t like references since they provide reference semantics that isn’t explicit in the caller’s code. After some C++ experience, however, one quickly realizes this is a form of information hiding, which is an asset rather than a liability. E.g., programmers should write code in the language of the problem rather than the language of the machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://isocpp.org/wiki/faq/references#refs-vs-ptrs"&gt;isocpp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Docker over Qemu on a Mac</title>
      <author>Jilles van Gurp</author>
      <pubDate>Wed, 01 Sep 2021 06:40:05 +0000</pubDate>
      <link>https://dev.to/jillesvangurp/docker-over-qemu-on-a-mac-1ajp</link>
      <guid>https://dev.to/jillesvangurp/docker-over-qemu-on-a-mac-1ajp</guid>
      <description>&lt;p&gt;Yesterday, Docker announced that Docker for Mac is going to require a paid account for large companies soon. While this does not immediately impact me, I have been relying on docker desktop for mac for a while and that annoys me for several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's somewhat flaky. I've had loads of issues over the years where I had to wipe it out and reinstall.&lt;/li&gt;
&lt;li&gt;the update process is flaky&lt;/li&gt;
&lt;li&gt;it barfs a lot of stuff all over the file system making cleanup a PITA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-alternative-dockerhost-amp-ssh"&gt;
  &lt;/a&gt;
  The Alternative: DOCKER_HOST &amp;amp; ssh
&lt;/h2&gt;

&lt;p&gt;Docker is a simple binary that acts as a client to the  docker daemon. Normally it connects to that via a socket that the locally running docker daemon creates.&lt;/p&gt;

&lt;p&gt;However, you can easily make it connect to a remotely running docker daemon by either using the &lt;code&gt;-H&lt;/code&gt; option or setting the &lt;code&gt;DOCKER_HOST&lt;/code&gt; environment variable. One of the supported protocols is &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, I installed &lt;code&gt;qemu&lt;/code&gt; via homebrew, and created a vm running a linux distribution (&lt;a href="https://manjaro.org/"&gt;Manjaro&lt;/a&gt;), installed ssh &amp;amp; docker on that, and set up an authorized key so I can ssh into that from my mac terminal. I configured the networking to forward port 5555 to the ssh port 22 on the vm.&lt;/p&gt;

&lt;p&gt;Then I simply set this environment variable on my mac:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jilles@localhost:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this all my docker commands (using the client that came with docker for mac; but of course you can install that via homebrew as well), go to the remote host, which is where all the docker containers run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-port-forwarding"&gt;
  &lt;/a&gt;
  Docker Port Forwarding
&lt;/h2&gt;

&lt;p&gt;The point of running docker is launching things like databases, web servers, etc. with the goal of actually connecting to these things. These things have ports that you might want to talk to. Normally what you do is forward those ports with the -p option. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p8080&lt;/span&gt;:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;would run nginx and allow you to connect to that from localhost via port 8080. One minor problem: those ports will be inside the linux vm and not on your mac's localhost.&lt;/p&gt;

&lt;p&gt;There are various ways to address this. An easy one is to use ssh for this. To forward a port, you can use the &lt;code&gt;-L&lt;/code&gt; option with ssh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh -L 8080:localhost:8080 -p 5555 jilles@localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can access it in your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-qemu-on-a-mac"&gt;
  &lt;/a&gt;
  Installing Qemu on a Mac
&lt;/h2&gt;

&lt;p&gt;You can make this work with any remote ssh; including cloud based options for this. But I wanted a locally running vm. There are ways to do this on mac. A nice OSS and lightweight option for this is qemu. But of course, you can probably make this work with parallels, virtualbox, vmware, or whatever else.&lt;/p&gt;

&lt;p&gt;You can install qemu via homebrew (or whatever else you prefer). Also make sure to install libvirt. I was not able to get networking going without it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;qemu libvirt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When that has finished and you've started the libvirt service (see instructions it dumps in your terminal when it installs), you can create a disk image and start qemu with a linux iso of your choice (or whatever OS you prefer).&lt;/p&gt;

&lt;p&gt;For reference, here's a script that I use to start qemu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#  qemu-img create -f qcow2 manjaro.qcow2 30G
#   -cdrom  manjaro-xfce-21.1.1-210827-linux513.iso \

qemu-system-x86_64 \
  -m 4G \
  -vga virtio \
  -display default,show-cursor=on \
  -usb \
  -device usb-tablet \
  -machine type=q35,accel=hvf \
  -smp 2 \
  -drive file=manjaro.qcow2,if=virtio \
  -cpu Nehalem \
  -device e1000,netdev=net0 \
  -netdev user,id=net0,hostfwd=tcp::5555-:22 \
  -soundhw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commented first line is the command you use to create a disk image. The line below that is the command line option for qemu you use to mount the linux iso. After you've installed to your disk image, you can remove that and boot from the disk image. I went with manjaro, which was pretty hassle free to get going. The networking options are important as you need port forwarding for ssh.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-amp-down-sides"&gt;
  &lt;/a&gt;
  Benefits &amp;amp; Down Sides
&lt;/h2&gt;

&lt;p&gt;On the plus side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have a nice sandboxed linux vm that contains all my docker stuff. I can shut it down, upgrade it, wipe it out, etc.&lt;/li&gt;
&lt;li&gt;Docker command line works as normally and things like docker-compose work as well&lt;/li&gt;
&lt;li&gt;qemu is reasonably fast and uses a similar virtualization strategy as docker for mac uses&lt;/li&gt;
&lt;li&gt;I can uninstall docker for mac.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This stuff needs memory and cpu. I noticed qemu struggling a bit with some of the things I normally run in docker for mac.&lt;/li&gt;
&lt;li&gt;While command line docker works fine, other things like some of our gradle build files assume docker is running locally. I may have to investigate forwarding a socket over ssh. Likewise docker port forwarding needs some manual work as well.&lt;/li&gt;
&lt;li&gt;You need some level of skills on the command line, setting up linux, getting qemu going. If you have that; great.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are all sorts of ways to make this more seamless but it works quite nicely like this already. Adding stuff like kubernetes support might be relevant for some. Making the port mapping less tedious might be doable with e.g. &lt;code&gt;sshuttle&lt;/code&gt; or setting up an ssh proxy.&lt;/p&gt;

&lt;p&gt;Let me know on twitter (&lt;a class="mentioned-user" href="https://dev.to/jillesvangurp"&gt;@jillesvangurp&lt;/a&gt;
) what you think about this.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>qemu</category>
    </item>
    <item>
      <title>My love letter to CodePen</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 01 Sep 2021 06:35:43 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/my-love-letter-to-codepen-2fo4</link>
      <guid>https://dev.to/dailydevtips1/my-love-letter-to-codepen-2fo4</guid>
      <description>&lt;p&gt;When I think about tools that I use on an almost daily base, &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt; sparks my mind.&lt;/p&gt;

&lt;p&gt;Not only do I use it so often, but then it hit me. They don't even ever ask for anything in return.&lt;/p&gt;

&lt;p&gt;Could it be? The perfect tool DOES exist?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5ClI1mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858129321/lJpFKyhq3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5ClI1mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858129321/lJpFKyhq3.jpeg" alt="CodePen is the perfect tool."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And because of that, I just had to write this love letter to CodePen. The tool that brings so much and never asks for anything in return ❤️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-codepen"&gt;
  &lt;/a&gt;
  What is CodePen?
&lt;/h2&gt;

&lt;p&gt;CodePen is a browser-based development environment. It allows you to create real-time code examples to test something out or demo something to other people quickly.&lt;/p&gt;

&lt;p&gt;You might have seen the phrase:&lt;br&gt;
Could you create a CodePen demonstrating this issue?&lt;/p&gt;

&lt;p&gt;And that's exactly what it is!&lt;br&gt;
It doesn't take favorites, as it comes with so many tools, libraries and languages supported.&lt;/p&gt;

&lt;p&gt;Not only is it just that, but there is a whole community around CodePen, which is a super cool developer space.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#its-a-portfolio"&gt;
  &lt;/a&gt;
  It's a portfolio
&lt;/h2&gt;

&lt;p&gt;When we think about developer portfolios, especially front-end devs, we often neglect that CodePen plays an immersive role in this.&lt;/p&gt;

&lt;p&gt;We might have made some CSS art or just a very cool JavaScript project that we want to share with the world.&lt;/p&gt;

&lt;p&gt;And yes, CodePen might be just as important as your GitHub profile.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#its-inspiring"&gt;
  &lt;/a&gt;
  It's inspiring
&lt;/h2&gt;

&lt;p&gt;I often find myself browsing CodePen for inspiration. The team picks top projects to showcase for the rest of the world to explore.&lt;/p&gt;

&lt;p&gt;Heck, I even got features with a couple of items.&lt;/p&gt;

&lt;p&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/rebelchris/pen/WNGpVEZ"&gt;
  CSS Frosted glass creditcard&lt;/a&gt; by Chris Bongers (&lt;a href="https://codepen.io/rebelchris"&gt;@rebelchris&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;And that is the power of CodePen. It not only allows us to try out code right in the browser, it even makes this visible to the rest of the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-free"&gt;
  &lt;/a&gt;
  It's free
&lt;/h2&gt;

&lt;p&gt;Crazy right? They do offer a CodePen pro which is even better, but in essence, you can use it for free.&lt;/p&gt;

&lt;p&gt;You might think, what's the catch, and to be honest, I don't know what the catch is, or If they're even is one?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-no-hassle"&gt;
  &lt;/a&gt;
  It's no hassle
&lt;/h2&gt;

&lt;p&gt;The cool part is that we don't have to go through manual installations to try something out.&lt;/p&gt;

&lt;p&gt;I often help out interns or juniors by providing them with a sample CodePen of something they want to try out but might struggle with.&lt;/p&gt;

&lt;p&gt;This way, I don't have to go through all kinds of installation steps just to run a simple project with Tailwind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codepen-im-just-crazy-about-you"&gt;
  &lt;/a&gt;
  CodePen I'm just crazy about you
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/chriscoyier"&gt;Chris Coyier&lt;/a&gt;, thanks for bringing us CodePen. It's one of my most valued developer tools and so underrated by me at times.&lt;/p&gt;

&lt;p&gt;Even looking at this blog, about half my articles are powered by some CodePen demo.&lt;/p&gt;

&lt;p&gt;You make my life complete. Without you, I wouldn't be able to demo out all these little examples so people can understand and try out code in their browsers.&lt;/p&gt;

&lt;p&gt;To get the point.&lt;/p&gt;

&lt;p&gt;I think I love you...&lt;/p&gt;

&lt;p&gt;❤️ Chris&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Computer Networks: A humble Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Wed, 01 Sep 2021 06:26:22 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/computer-networks-a-humble-introduction-1jin</link>
      <guid>https://dev.to/kathanvakharia/computer-networks-a-humble-introduction-1jin</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;📡Disclaimer: A lot of concepts in this subject are interlinked, so it is completely okay to not understand every bit of jargon thrown at you in this post. The aim is to get the big picture overview.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-textbook-definition"&gt;
  &lt;/a&gt;
  A textbook definition 📚
&lt;/h2&gt;

&lt;p&gt;A computer network is a &lt;strong&gt;group of computers&lt;/strong&gt; that use a set of &lt;em&gt;common&lt;/em&gt; communication &lt;em&gt;protocols&lt;/em&gt; over &lt;em&gt;digital&lt;/em&gt; interconnection to &lt;em&gt;share resources&lt;/em&gt; located on or provided by network nodes.&lt;/p&gt;

&lt;p&gt;Of course, you are bamboozled by the definition 👀🥴 Let me break down the terminology,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;protocol - rules that are needed to be followed while communication/sharing of resources.&lt;/li&gt;
&lt;li&gt;digital - meaning data/resources/message is transferred in the form of 0s and 1s.&lt;/li&gt;
&lt;li&gt;network nodes - various devices that make up the network, for eg: your computer is a node as it is connected to the Internet( a network of networks! ). It is like an endpoint or redistribution point of communication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This all might sound boring so let's understand the working of a real computer network at a high level,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-simple-computer-network-work"&gt;
  &lt;/a&gt;
  How does a simple computer network work?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wlqxwle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjlj9wzbst6mjapp2dy6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wlqxwle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjlj9wzbst6mjapp2dy6.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say you are in some network. (most probably your SIM operator's or wifi's network ).&lt;/p&gt;

&lt;p&gt;Your computer is &lt;strong&gt;host1&lt;/strong&gt; and it has a &lt;strong&gt;chrome(&lt;/strong&gt; browser ) process running inside it.&lt;/p&gt;

&lt;p&gt;Say this process wants to go to GOOGLE. So we typed &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt; in the search bar and pressed enter.&lt;/p&gt;

&lt;p&gt;Our modus operandi would look something like this,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reach google's network - a network somewhere in the US in which google server (&lt;strong&gt;host2&lt;/strong&gt;) is located.&lt;/li&gt;
&lt;li&gt;Then after reaching that network in the US, we need to reach &lt;strong&gt;host2&lt;/strong&gt; - the server itself.&lt;/li&gt;
&lt;li&gt;And finally, we'll need to reach the &lt;strong&gt;process&lt;/strong&gt; in &lt;strong&gt;host2&lt;/strong&gt; which returns google.com's web page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, we aim is to get &lt;em&gt;Network ID&lt;/em&gt; - to reach destination network, &lt;em&gt;Host ID&lt;/em&gt; - to reach destination host and &lt;em&gt;port number&lt;/em&gt; - to reach destination process&lt;/p&gt;

&lt;p&gt;We don't need to worry about port no. because for some standard services like web service, it is fixed.( 80 for HTTP, 25 for FTP ). Thus for most well-known services, they are already defined.&lt;/p&gt;

&lt;p&gt;And to get NID and HID, we need to convert the domain name into a special type of number: &lt;strong&gt;Internet Protocol Address&lt;/strong&gt; short for &lt;em&gt;IP address&lt;/em&gt; because IP address contains the &lt;strong&gt;two&lt;/strong&gt; parts that we need, NID and HID. This is done by the DNS-Domain Name System provided by your ISP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5wnvUjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1eonz5jmnc2dg1ch6qh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5wnvUjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1eonz5jmnc2dg1ch6qh.jpg" alt="Frame 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next post, we shall discuss more about these so called IP addresses :)&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>tutorial</category>
      <category>computernetworks</category>
    </item>
    <item>
      <title>Go Golang Go!</title>
      <author>Uday Yadav</author>
      <pubDate>Wed, 01 Sep 2021 06:20:44 +0000</pubDate>
      <link>https://dev.to/dev117uday/go-golang-go-3eo0</link>
      <guid>https://dev.to/dev117uday/go-golang-go-3eo0</guid>
      <description>&lt;p&gt;This is an old post made on on medium, just porting them to dev.to&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWc8QcvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630396710009/Y-C3pEXS-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWc8QcvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630396710009/Y-C3pEXS-.jpeg" alt="golang.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about Golang, to go the &lt;strong&gt;Golang section on my notes page&lt;/strong&gt; &lt;a href="https://dev117uday.gitbook.io/notes-md/"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hot new server-side high-performance language.&lt;/p&gt;

&lt;p&gt;For those of you who don’t know what Golang is, here is a quick and short intro :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.&lt;/li&gt;
&lt;li&gt;Go is syntactically similar to C.&lt;/li&gt;
&lt;li&gt;It has memory safety ( uses a garbage collector ), structural typing, and CSP [communicating sequential processes]-style concurrency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In simple words, Golang is like Java in terms of processing but written like C&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-golang"&gt;
  &lt;/a&gt;
  Why Golang?
&lt;/h4&gt;

&lt;p&gt;We live in a world where Java handles the majority of critical processes, but the thing is, java is old getting old, in the sense that writing concurrent programs is difficult, as more and more servers are UNIX based, shell scripts to manage servers is limit (that’s where python came in ), poorly implemented generics and no support for unsigned data-types, has hidden relationship between code and hardware. This is where Golang comes in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-i-love-golang"&gt;
  &lt;/a&gt;
  Why I love Golang
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: Golang is compiled to machine code by its compiler, it’s fast, hence faster than java.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern&lt;/strong&gt;: Just like any other modern programming language, Golang’s syntax is relatively easy to understand and write code. It keeps one’s understanding of how memory is used will abstracting out a lot of complex features.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It’s static and dynamic&lt;/strong&gt;: the concept is simple, if the type isn’t defined it will dynamically adjust, else follow the rules.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Safe&lt;/strong&gt;: Golang comes with garbage collector which is open-source (Golang itself is open-source), turns out to be more reliable, hence no need to worry but memory leaks as the garbage collector is smart enough to free unused memory, though you can do it explicitly but come on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Concurrency&lt;/strong&gt;: Golang is known for its great concurrency, but why believe me, here is the explanation simple explanation :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Golang uses something called &lt;strong&gt;Go-routines&lt;/strong&gt;, simply they are Go function. Golang implements its own scheduler that allows many Go-routines to run on the same OS thread. JVM on the other hand uses operating system threads, it relies on the operating system kernel to schedule them, which is a much slower and memory consuming process.&lt;/p&gt;

&lt;p&gt;You can read more about this topic in detail here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rcoh.me/posts/why-you-can-have-a-million-go-routines-but-only-1000-java-threads/"&gt;&lt;strong&gt;Why you can have millions of Goroutines but only thousands of Java Threads&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/rungo/achieving-concurrency-in-go-3f84cbf870ca"&gt;&lt;strong&gt;Achieving concurrency in Go&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#major-other-advantages-"&gt;
  &lt;/a&gt;
  Major Other Advantages :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cross-compiling: The Go compiler allows you to generate executable binaries for different operating systems with simple commands, and because it is a simple executable file, this makes deploying Go applications to production servers or local machines a breeze — all it requires is moving the final executable file. No hassle that comes with JVM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#some-concerns-regarding-go"&gt;
  &lt;/a&gt;
  Some concerns regarding Go
&lt;/h4&gt;

&lt;p&gt;Well it’s not all perfect in Go’s world&lt;/p&gt;

&lt;p&gt;Now, to be completely honest, I looked into a ton of resources to find drawbacks in go but could find any reasonable ones (except for package manager). Consider reading these comments:&lt;/p&gt;

&lt;p&gt;While having interfaces is great, structs implement interfaces implicitly, not explicitly. This is stated as a strength of Go, but we found that it’s difficult to tell from looking at a struct whether or not it implements an interface. You can only really know by attempting to compile the program. This is fine if the program is small, but not if it’s a medium to large size.&lt;/p&gt;

&lt;p&gt;One of Go’s main advantages is also one of its weaknesses. Go may be an easy language to pick up, but that brings with it a lack of versatility. Some of the hottest languages on the market pride themselves on their complexity.&lt;/p&gt;

&lt;p&gt;Languages like Swift and Haskell may be more difficult to learn, but they manage to find their fans by packing in a wealth of smart abstractions that allow coders to achieve complex and clever results with less.&lt;/p&gt;

&lt;p&gt;Well, the stated disadvantages of Golang are more opinion-based rather than actual setbacks that cause problems.&lt;/p&gt;

&lt;p&gt;The Disadvantages are more like design drawbacks which people complain about but Golang says its the part of the new programming language design paradigm.&lt;/p&gt;

&lt;p&gt;Nonetheless, Golang is an amazing programming language. Golang developers are among the highest-paid developer in the industry, it’s also becoming an industry favorite language when it comes to doing real-time data analytics and data science work, deploying production-ready ML models, Yes, you heard (or read it) write. It’s best-suited use it to write scalable, high-performance back-end that can you heavy data lifting.&lt;/p&gt;

&lt;p&gt;I hope you like this article !&lt;/p&gt;

</description>
      <category>programming</category>
    </item>
    <item>
      <title>Tips to become a great programmer</title>
      <author>Christopher Glikpo</author>
      <pubDate>Wed, 01 Sep 2021 06:15:47 +0000</pubDate>
      <link>https://dev.to/cglikpo/tips-to-become-a-great-programmer-471e</link>
      <guid>https://dev.to/cglikpo/tips-to-become-a-great-programmer-471e</guid>
      <description>&lt;p&gt;A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1work-on-basics"&gt;
  &lt;/a&gt;
  1.Work on Basics
&lt;/h1&gt;

&lt;p&gt;As it is true for any industry and any job, the conceptual understanding is the key for success. Unless one has strong conceptual foundation, he/she can never be a good programmer. The core conceptual understanding helps you in designing and implementing the best solutions in the best possible way. If still you feel gap in core computer science and your programming language specific concepts, it’s never too late to go back and review the basics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2start-putting-question-tags-how-what-etc-with-every-set-of-code-you-write"&gt;
  &lt;/a&gt;
  2.Start putting question tags (how, what etc.) with every set of code you write
&lt;/h1&gt;

&lt;p&gt;One thing that I noticed as a distinct dividing line between skilled programmers and the rest is the desire to know what is going on and how it is going on. There is a tiny number of folks who can never leave a code without understanding exactly what happens when it runs. I understand that in tight deadlines, we don’t get this liberty always and hence have to leave the code just knowing that it’s doing its job. Although this is a bit different topic of how to handle such situations, but as a programmer one can always try the level best to dig into as much as one can. And believe me, this becomes a habit with time and then you do it unknowingly every time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3you-learn-more-by-helping-others"&gt;
  &lt;/a&gt;
  3.You learn more by helping others
&lt;/h1&gt;

&lt;p&gt;Most of us have a common tendency of turning our heads towards forums or groups only when we need help. And again a clear separation between the good programmer and rest that the formers visit these places more often to help others. This makes them learn more then they learn getting their problem solved by someone else. Within a team as well, help others to solve their problems. Believe me, understanding others’ problem in their context, investigating on that and providing solutions; will leave you much more learned than before.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4write-simple-understandable-but-logical-code"&gt;
  &lt;/a&gt;
  4.Write simple, understandable but logical code
&lt;/h1&gt;

&lt;p&gt;As in almost every aspect of life, the formula of KISS (Keep it simple and short) works in programming as well. Write more logical code and avoid complexity. Sometimes people do write complex code just to prove their capability to write such codes. My experience says that simple but logical codes always works well, resulted in fewer issues and are more extendable. I remember an excellent quote&lt;/p&gt;

&lt;p&gt;Good code is its own best documentation. As you're about to add a comment, ask yourself, "How can I improve the code so that this comment isn't needed?" ~Steve McConnell&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5spend-more-time-in-analyzing-the-problem-youll-need-less-time-to-fix-it"&gt;
  &lt;/a&gt;
  5.Spend more time in analyzing the problem, you’ll need less time to fix it
&lt;/h1&gt;

&lt;p&gt;Spend more time in understanding and analyzing the problem and designing solutions for it. You will find the rest of the things quite easily doable. Designing not always mean using modeling languages and tools, it can be as simple as looking at sky and thinking solution in your mind. Those who have habits of pressing keyboard (for coding) the moment get the problem, usually ended us something different than the requirement.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-be-the-first-to-analyze-and-review-your-code"&gt;
  &lt;/a&gt;
  6. Be the first to analyze and review your code
&lt;/h1&gt;

&lt;p&gt;Although a bit difficult, but try to break your own code before others can and with the time you will learn to write close-to-bug-free code. Always do a close and unbiased review of your code. Also never hesitate to take others view on your code. Working with good programmers and taking their feedbacks will surely help you become a good programmer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7read-documentation"&gt;
  &lt;/a&gt;
  7.Read documentation
&lt;/h1&gt;

&lt;p&gt;One of the essential habits of good programmer is that they read lots of documentation. May it be specifications, JSR, API documents, tutorials etc. Reading documents helps you creating that essential foundation based on which you program in best of the way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8you-can-learn-from-others-code-as-well"&gt;
  &lt;/a&gt;
  8.You can learn from others code as well
&lt;/h1&gt;

&lt;p&gt;I interacted with some excellent programmers who actually have java source project inside their IDE all the time and read/refer that in daily work. They do it not only to fulfill their appetite of knowing the basics but also to learn ways of writing good programs. Reading and referring reliable and known open source code or your senior’s code, can also help you making your programming better.&lt;/p&gt;

&lt;p&gt;And the last, not listed above: Don’t compare yourself with others&lt;/p&gt;

&lt;p&gt;Your comparison of yourself with others will only result in evolution of negative feelings and un-healthy competition. Everyone has got his or her strengths and weaknesses. It is more important that we understand ours and work on it. I have seen many times that so called ‘fundoo-programmers’ (fundamentally strong programmer) also make silly mistakes. So, analyze yourself, list down your areas of improvement and work on it. Programming is a real fun, enjoy it.&lt;/p&gt;

&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand. ~Martin Fowler&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Quick and Effective Ways to Learn JavaScript</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 01 Sep 2021 05:11:52 +0000</pubDate>
      <link>https://dev.to/suhailkakar/5-quick-and-effective-ways-to-learn-javascript-4l39</link>
      <guid>https://dev.to/suhailkakar/5-quick-and-effective-ways-to-learn-javascript-4l39</guid>
      <description>&lt;p&gt;If you've been studying JavaScript or web development in general but still feel inadequate in your knowledge of the topic. Perhaps you're having trouble remembering or applying all you've learned. This is the article for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9feF7I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630393976596/Fq2Vrttg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9feF7I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630393976596/Fq2Vrttg9.png" alt="screely-1630393932199.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google shows 7,930,000,000 results on "Why JavaScript is hard to learn", Many developers don't learn JavaScript and jump to some other alternative language ( Though each language has its own specialty ) because they think JavaScript is hard. But you shouldn't be among those developers. In this article, you are going to learn about "How can you learn JavaScript". &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-a-wellstructured-curriculum"&gt;
  &lt;/a&gt;
  Follow a Well-structured Curriculum
&lt;/h3&gt;

&lt;p&gt;As a self-taught developer, it's your responsibility to find a standard structure to follow. Avoid learning anything that comes your way at all costs. You must stick to a set of guidelines. This ensures that you are not leaving out anything you should know on the subject.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Freecodecamp&lt;/a&gt; is a non-profile organization that has the best and well-structured curriculum which can help you learn JavaScript. You can start with any of their courses and continue it till the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-complex-code-in-plain-language-first"&gt;
  &lt;/a&gt;
  Write Complex Code in Plain Language First
&lt;/h3&gt;

&lt;p&gt;Write a piece of code in plain language first though it's going to be complicated or unfamiliar. You'll be able to figure out what you want the code to accomplish before writing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-how-to-google"&gt;
  &lt;/a&gt;
  Learn How to Google
&lt;/h3&gt;

&lt;p&gt;This is one of the effective tips that can help you solve many of your questions. if you spend years upon years following tutorials either by watching videos or reading guides, you will still come across problems if you are working on projects.&lt;/p&gt;

&lt;p&gt;Your buddies are Google and Stack Overflow. However, you should always start with Google to discover what possibilities are available to you. You'll be surprised at how much knowledge you can pick up this way.&lt;/p&gt;

&lt;p&gt;Before one week, I have written an  &lt;a href="https://blog.suhailkakar.com/how-to-use-google-like-a-pro"&gt;article&lt;/a&gt;  on "How to use Google like a Pro", which I think, it might be helpful for you If you want to learn tips on how to use Google.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-your-own-projects"&gt;
  &lt;/a&gt;
  Start Your Own Projects
&lt;/h3&gt;

&lt;p&gt;If you don’t put your hard-earned knowledge into practice, what was the point of learning it in the first place?  When you're ready to put your JavaScript abilities to work on a real project, rather than beginning from scratch, consider adding a feature to a program you made in a lesson. If you require assistance, consider collaborating on a project with a friend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-a-goal-for-yourself-and-decide-what-you-want-to-study"&gt;
  &lt;/a&gt;
  Set a goal for yourself and decide what you want to study.
&lt;/h3&gt;

&lt;p&gt;JavaScript has a lot of different branches. For this, it's best if you pick one technology and ignore the rest. However, if you are just getting started, making this option will be hard because it is difficult to know where to begin. You'll need to follow a well-structured curriculum in this situation.&lt;/p&gt;

&lt;p&gt;JavaScript is used for both Frontend and Backend. It means that there is a lot of frameworks for you to learn so in order not to get overwhelmed and bored easily, you should only focus on one thing and leave out all other things outside of that.&lt;/p&gt;

&lt;p&gt;This doesn't mean that you need to learn only one JavaScript framework, You need to learn as much as you need but focus on one framework before starting the other one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope you found this article helpful. If you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it  &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>productivity</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>The big STL Algorithms tutorial: Minimum/maximum operations</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 01 Sep 2021 05:02:53 +0000</pubDate>
      <link>https://dev.to/sandordargo/the-big-stl-algorithms-tutorial-minimum-maximum-operations-1o86</link>
      <guid>https://dev.to/sandordargo/the-big-stl-algorithms-tutorial-minimum-maximum-operations-1o86</guid>
      <description>&lt;p&gt;In this next part of &lt;a href="http://sandordargo.com/blog/2019/01/30/stl-algos-intro"&gt;the big STL algorithm tutorial&lt;/a&gt;, we are going to talk about minimum and maximum operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-max-endraw-raw-min-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;max&lt;/code&gt; / &lt;code&gt;min&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt; have a couple of different forms, all will essentially return the greatest or smallest elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might pass in two elements taken by &lt;code&gt;const&lt;/code&gt; reference, and you'll get back a &lt;code&gt;const&amp;amp;&lt;/code&gt; of the largest/smallest element&lt;/li&gt;
&lt;li&gt;You might pass in an initializer list and you'll get back a copy of the largest/smallest element&lt;/li&gt;
&lt;li&gt;Either way, you can pass in an optional comparator. In its absence, &lt;code&gt;operator&amp;lt;&lt;/code&gt; will be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all the passed in elements are equal, the leftmost one will be returned - both for &lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// std::cout &amp;lt;&amp;lt; std::max(v) &amp;lt;&amp;lt; '\n'; // ERROR: std::vector is not derived from std::initializer_list&lt;/span&gt;
  &lt;span class="c1"&gt;// std::cout &amp;lt;&amp;lt; std::min(v) &amp;lt;&amp;lt; '\n'; // ERROR: std::vector is not derived from std::initializer_list&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
51
42
66
66
66
42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth noting that a &lt;code&gt;vector&lt;/code&gt;, or other standard containers are not derivations of an initializer list, therefore you cannot pass them to &lt;code&gt;std::max&lt;/code&gt;/&lt;code&gt;std::min&lt;/code&gt;. For that, you have to use &lt;code&gt;max_element&lt;/code&gt;/&lt;code&gt;min_element&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-maxelement-endraw-raw-minelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;max_element&lt;/code&gt; / &lt;code&gt;min_element&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt; either take two values or an initializer list, &lt;code&gt;std::max_element&lt;/code&gt; and &lt;code&gt;std::min_element&lt;/code&gt; operates on a range. They resemble more to the standard algorithms we've seen in this series, notably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They take two iterators denoting the beginning and the end of a range&lt;/li&gt;
&lt;li&gt;They take an optional comparator, and when it's not specified &lt;code&gt;operator&amp;lt;&lt;/code&gt; is used&lt;/li&gt;
&lt;li&gt;As an optional 0th parameter, you can pass in an execution policy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The return value will always be an iterator to the largest or smallest element. Interestingly, both &lt;code&gt;max_element&lt;/code&gt; and &lt;code&gt;min_element&lt;/code&gt; returns the leftmost element in case of equal elements are passed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
66
42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-minmax-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;minmax&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;What if you need both the smallest and the largest element of a container? You don't need to call &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; separately, you can simply call &lt;code&gt;std::minmax&lt;/code&gt; and it will return a &lt;code&gt;std::pair&lt;/code&gt; of the smallest and the largest value.&lt;/p&gt;

&lt;p&gt;It's interesting to mention that in the case of equality both &lt;code&gt;std::min&lt;/code&gt; and &lt;code&gt;std::max&lt;/code&gt; return the leftmost element, &lt;code&gt;std::minmax&lt;/code&gt; will return you two different elements all the time (except if you call it an initializer list of one element).&lt;/p&gt;

&lt;p&gt;The algorithm has different forms following &lt;code&gt;std::min&lt;/code&gt; and &lt;code&gt;std::max&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might pass in two elements taken by &lt;code&gt;const&lt;/code&gt; reference, and you'll get back a &lt;code&gt;const&amp;amp;&lt;/code&gt; of the largest/smallest element&lt;/li&gt;
&lt;li&gt;You might pass in an initializer list and you'll get back a copy of the largest/smallest element&lt;/li&gt;
&lt;li&gt;Either way, you can pass in an optional comparator. In its absence &lt;code&gt;operator&amp;lt;&lt;/code&gt; will be used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
42 51
66 66
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-minmaxelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;minmax_element&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Based on the previous section you probably already deduced what &lt;code&gt;std::minmax_element&lt;/code&gt; does and how it works.&lt;/p&gt;

&lt;p&gt;It works on containers and returns a pair of iterators to the smallest and largest elements of that container. In case, all the elements are equal, the smallest will be the leftmost one and the largest is the rightmost.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes two iterators denoting the beginning and the end of a range&lt;/li&gt;
&lt;li&gt;It takes an optional comparator, and when it's not specified &lt;code&gt;operator&amp;lt;&lt;/code&gt; is used&lt;/li&gt;
&lt;li&gt;As an optional 0th parameter, you can pass in an execution policy
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;minmax_v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;minmax_v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
42 66
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-clamp-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;clamp&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;std::clamp&lt;/code&gt; is a relatively new addition to the &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; header, it is available since C++17. It takes 3 &lt;code&gt;const&amp;amp;&lt;/code&gt; parameters by default and an optional comparator. It returns a &lt;code&gt;const&amp;amp;&lt;/code&gt;, one of the three inputs.&lt;/p&gt;

&lt;p&gt;The three inputs are usually referenced as &lt;code&gt;v&lt;/code&gt; (value), &lt;code&gt;lo&lt;/code&gt; (lowest value) and &lt;code&gt;hi&lt;/code&gt; (highest value) in this order.&lt;/p&gt;

&lt;p&gt;First, let's see the pseudo-code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if v &amp;lt; lo:
  return lo
if hi &amp;lt; v:
  return hi
return v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not complicated, but probably it's not very functional to you. Well, it was not for me. So in practice, what does &lt;code&gt;clamp&lt;/code&gt; do? It might help, if you know &lt;a href="https://www.merriam-webster.com/dictionary/clamp"&gt;the meaning of the verb clamp&lt;/a&gt;, but to me either reading the definition is not so helpful.&lt;/p&gt;

&lt;p&gt;In practice, with &lt;code&gt;clamp&lt;/code&gt;, you make sure that the value that you get back will be between the boundaries defined by &lt;code&gt;lo&lt;/code&gt; and &lt;code&gt;hi&lt;/code&gt;. The returned value will be never smaller than &lt;code&gt;lo&lt;/code&gt; and never greater than &lt;code&gt;hi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;hi&amp;lt;lo&lt;/code&gt;, the behaviour is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(42, 51, 66): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(51, 42, 66): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(66,42,51): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"UB: std::clamp(66,51,42): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Undefined Behaviour hi &amp;lt; lo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
std::clamp(42, 51, 66): 51
std::clamp(51, 42, 66): 51
std::clamp(66,42,51): 51
UB: std::clamp(66,51,42): 42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This time, we learned about min/max algorithms. We saw how to get the minimum or maximum elements from multiple variables or from containers. We also saw &lt;code&gt;clamp&lt;/code&gt; that was added in C++17 which makes sure that we'll always have a value between the boundaries we define.&lt;/p&gt;

&lt;p&gt;In the next episode of this series, we'll discuss comparison operators, but before there is something more to discuss.&lt;/p&gt;

&lt;p&gt;Is it okay that &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; return the same element in case the inputs are equal? Is it okay that in that case, both return the leftmost element - or the rightmost depending on your compiler?&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>tutorial</category>
      <category>stl</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>JavaScript - All The Things, Mostly</title>
      <author>Gaurav</author>
      <pubDate>Wed, 01 Sep 2021 04:56:02 +0000</pubDate>
      <link>https://dev.to/gauravbehere/js-know-it-all-5f3b</link>
      <guid>https://dev.to/gauravbehere/js-know-it-all-5f3b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-all-the-things-mostly"&gt;
  &lt;/a&gt;
  JavaScript - All The Things, Mostly
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#curated-list-of-awesome-js-resources"&gt;
  &lt;/a&gt;
  Curated list of awesome JS resources
&lt;/h3&gt;



&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/javascript-the-good/9780596517748/"&gt;JavaScript: The Good Parts - Douglas Crockford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/programming-javascript-applications/9781491950289/"&gt;Programming JavaScript Applications - Eric Elliott&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/javascript-the-definitive/9781491952016/"&gt;JavaScript: The Definitive Guide, 7th Edition - David Flanagan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Learning JavaScript Design Patterns - Addy Osmani&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/you-dont-know/9781491905241/"&gt;You Don't Know JS: ES6 &amp;amp; Beyond - Kyle Simpson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/"&gt;Exploring ES6 - Axel Rauschmayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/high-performance-javascript/9781449382308/"&gt;High Performance JavaScript - Nicholas C. Zakas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/javascript-for-kids/9781457189838/"&gt;JavaScript for Kids - Nick Morgan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/eloquent-javascript/9781593272821/"&gt;Eloquent JavaScript - Marijn Haverbeke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://effectivejs.com/"&gt;Effective JavaScript - David Herman&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#video-tutorials"&gt;
  &lt;/a&gt;
  Video Tutorials
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;What the heck is the event loop anyway? | Philip Roberts | JSConf EU&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour [2020]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qqx_wzMmFeA"&gt;JavaScript Tutorial for Beginners - Full Course in 8 Hours [2020]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=e-5obm1G_FY"&gt;Learning Functional Programming with JavaScript - Anjana Vakil - JSUnconf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hQVTIJBZook"&gt;JavaScript: The Good Parts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t3R3R7UyN2Y"&gt;ES6 and Beyond Workshop Part 1 at PayPal (Jan 2017)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eOKQDh50ECU"&gt;ES6 and Beyond Workshop Part 2 at PayPal (March 2017)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lil4YCCXRYc"&gt;Jafar Husain: Async Programming in ES7 | JSConf US 2015&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Bv_5Zv5c-Ts"&gt;JavaScript: Understanding the Weird Parts - The First 3.5 Hours&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=HF1luRD4Qmk"&gt;Debugging The Web (Chrome Dev Summit 2016)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dxzBZpzzzo8"&gt;Rediscovering JavaScript by Venkat Subramaniam&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=p-iiEDtpy6I"&gt;Franziska Hinkelmann: JavaScript engines - how do they even? | JSConf EU&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=FmiQr4nfoPQ"&gt;Recursion, Iteration, and JavaScript: A Love Story - Anjana Vakil | JSHeroes 2018&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg"&gt;Learn JavaScript - Full Course for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PFmuCDHHpwk"&gt;Object-oriented Programming in JavaScript: Made Super Simple | Mosh&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#courses"&gt;
  &lt;/a&gt;
  Courses
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kentcdodds.com/workshops/javascript-fundamentals"&gt;JavaScript Fundamentals Workshop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;Learn JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-javascript-course/"&gt;The Complete JavaScript Course 2020&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET"&gt;JavaScript Tutorials for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLDyQo7g0_nsX8_gZAB8KD1lL4j4halQBJ"&gt;Getting Started With Javascript | Javascript Tutorial For Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/javascript-best-practices"&gt;JavaScript Best Practices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://hackr.io/tutorials/learn-javascript"&gt;JavaScript Tutorials and Courses&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-blogsarticles"&gt;
  &lt;/a&gt;
  Useful Blogs/Articles
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/previous-versions/msdn10/ff852808(v=msdn.10)"&gt;Prototypes and Inheritance in JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sitepoint.com/proper-error-handling-javascript/"&gt;A Guide to Proper Error Handling in JavaScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/primers/service-workers"&gt;Service Workers: an Introduction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://dev.to/arnavaggarwal/10-javascript-concepts-you-need-to-know-for-interviews"&gt;10 JavaScript concepts you need to know for interviews&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#websites"&gt;
  &lt;/a&gt;
  Websites
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/web"&gt;Google Web Developers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://es6-features.org/"&gt;ECMAScript 6&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/es6/"&gt;Node JS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics"&gt;MDN&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javascript.info/"&gt;JavaScript.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="http://superherojs.com/"&gt;Superhero.js&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dev-channels"&gt;
  &lt;/a&gt;
  Dev Channels
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/JSConfEU/videos"&gt;JSConf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/GoogleChromeDevelopers/videos"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://web.dev/learn/"&gt;web.dev&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://twitter.com/JavaScriptDaily"&gt;JavaScript Daily&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#publicationsmagazines"&gt;
  &lt;/a&gt;
  Publications/Magazines
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/tag/javascript"&gt;JavaScript on Medium&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/category/javascript"&gt;JavaScript on Smashing Magazine&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/t/javascript"&gt;JavaScript on Dev.to&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://nodeweekly.com/"&gt;Node Weekly&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-links"&gt;
  &lt;/a&gt;
  Useful Github Links
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33-js-concepts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;JavaScript Questions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/src/questions/javascript-questions.md"&gt;Front-end-Developer-Interview-Questions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;es6-cheatsheet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;clean-code-javascript&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#people"&gt;
  &lt;/a&gt;
  People
&lt;/h2&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/BrendanEich"&gt;BrendanEich&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/kentcdodds"&gt;Kent C. Dodds&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/addyosmani"&gt;Addy Osmani&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/paul_irish"&gt;Paul Irish&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/douglascrockford"&gt;Douglas Crockford&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/benawad/"&gt;Ben Awad&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/_ericelliott"&gt;Eric Elliott&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/dan_abramov"&gt;Dan Abramov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/MarijnJH"&gt;Marijn Haverbeke&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/getify"&gt;Kyle Simpson&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/wesbos"&gt;Wes Bos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://github.com/DanWahlin"&gt;Dan Wahlin&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;




These resources have helped me a lot in keeping up with JS.
If you have a suggestion, please comment. I would love to read &amp;amp; add to this.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Seeking for Ideas in Building a Course</title>
      <author>Max Ong Zong Bao</author>
      <pubDate>Wed, 01 Sep 2021 04:49:51 +0000</pubDate>
      <link>https://dev.to/steelwolf180/seeking-for-ideas-in-building-a-course-4i79</link>
      <guid>https://dev.to/steelwolf180/seeking-for-ideas-in-building-a-course-4i79</guid>
      <description>&lt;p&gt;Photos is from &lt;a href="https://unsplash.com/photos/BVyNlchWqzs"&gt;Amador Loureiro&lt;/a&gt; through Unsplash&lt;/p&gt;

&lt;p&gt;Hi there this is Max.I am seeking for ideas in building a course for developers that does Web development &amp;amp; Python for startups.&lt;/p&gt;

&lt;p&gt;So I was wondering what might be interesting to you? Here's my list of titles I have thought of for a course that I am building.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test Driven Development with Django&lt;/li&gt;
&lt;li&gt;Breaking Into Startups with Python&lt;/li&gt;
&lt;li&gt;Full Stack Python Development for Startups&lt;/li&gt;
&lt;li&gt;Startup Python Developer's HandBook&lt;/li&gt;
&lt;li&gt;3 Levels of Building a MVP&lt;/li&gt;
&lt;li&gt;Data Scrapping with Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do leave a message in the comments on what you might be interested in learning or creating.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>webdev</category>
      <category>python</category>
      <category>discuss</category>
    </item>
    <item>
      <title>10 Intelligent Movies To Watch Before You Die</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Wed, 01 Sep 2021 04:17:34 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</link>
      <guid>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</guid>
      <description>&lt;p&gt;We’ve brought the clever movies you need to watch for this list, pointing out works with complex stories that always demand more attention from your viewer. Below are films that subvert the order of their plot, question the meaning of existence, work on the aspect of time in our lives, bring plot twists, and so on.&lt;/p&gt;

&lt;h2&gt;Let’s go to the list.&lt;/h2&gt;


&lt;ul&gt;

&lt;li&gt;&lt;b&gt;1 . Memento (Christopher Nolan, 2000)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" alt="1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After his wife is brutally killed and he is beaten by a criminal, a man, now with problems in his short-term memory, decides to embark on a destructive journey behind him. ‘Memento’ is rustic in its conception of plot, subverting the paths trodden by the characters, working with hard philosophical concepts, like the one of ‘eternal return’, resulting in a film that stays in the head of the spectator even after its end.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;2 . The Truman Show (Peter Weir, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrapped in a routine of inexorable habits, a man, by a mere figure of chance, ends up realizing that his whole life had been a big lie and his day-to-day life was actually programmed and controlled by a kind of TV show. Now it’s up to him to go after all the truth behind this story. ‘The Truman Show’ is different in its story arc, promoting situations of the most diverse, provoking a sense of reassessment of life by those who watch the film.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;3 . The Gift (Joel Edgerton, 2015)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" alt="the_gift-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, a couple receives an unexpected visit from a man who had been friends with one of them for a long time. However, the strange man begins, little by little, to bother the couple, doubting their motivations before them. ‘The Gift’ uses a few scenarios to govern the events of its history. Here, everything is guided under a mood of mystery that is maintained until the final moments of the film, letting the viewer formulate theories about what is on screen.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;4 . Psycho (Alfred Hitchcock, 1960)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" alt="4.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After stealing an enormous amount of the place in which works, a young woman initiates a car flight by the country. In the midst of this journey, the young woman decides to stop to rest in a hotel by the roadside, not knowing that this would be a mortal place. Alfred Hitchcock’s masterpiece, ‘Psycho’ is a work that guided the paths of the horror and suspense genres in the following decades, raising a daring story, nourishing one of the most amazing finals of cinema.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;5 . The Sixth Sense (M. Night Shyamalan, 1999)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" alt="5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A psychologist tries to help a little boy who claims to see spirits, starting a journey full of mysteries behind answers. Characterizing itself as one of the films with one of the greatest twists of the seventh art, ‘The Sixth Sense’ is one of those top-quality suspensions. A film that frightens with few details, in an engaging and always pleasant story.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;6 . Double Indemnity (Billy Wilder, 1944)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" alt="6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, an individual who works for an insurance agency falls in love with a woman who persuades him to defraud his job. However, after the crime, he will realize that his choice was not the right one, fighting a clever investigator not to get caught. The biggest Noir movie of all time, ‘Double Indemnity is a film class of the genius Billy Wilder. Exploring a nuance-permeated plot, the film manages to be dynamic while it unravels every meander of its central characters, providing the viewer with a unique experience.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;7 . Zodiac (David Fincher, 2007)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" alt="7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A serial killer terrorized the United States in the late 1960s and early 1970s, leaving authorities and the population in an incomplete state of paranoia. The plot gains its substance when the criminal decides to communicate through codes with a newspaper, arousing the interest of a journalist of the place. Based on a real event, ‘Zodiac’ is a film that shivers by the density of the story presented. Intelligent suspense can cause the most diverse emotions in the viewer without using the clichés characteristic of the genre.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;8 . I Love You, I Love You (Alain Resnais, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" alt="8.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A man serves as a guinea pig for a strange scientific experiment that stirs the character of time. However, something goes wrong, leaving the individual trapped in their own memories. ‘I Love You, I Love You’ is potent in its theme, studying the ephemeral character of life, as well as the most important fragments that our existence understands.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;9 . 2001: A Space Odyssey (Stanley Kubrick, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The film fits into the intricacies of humanity’s evolution, rescuing different periods of our history and building future events. Stanley Kubrick’s masterpiece, this film demands a lot from its viewer because of its slow pace, making itself tiring at times, but rewarding who watches its completion.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;10 . Run Lola Run (Tom Tykwer, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" alt="10.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After her boyfriend gets involved in an unpleasant situation, a young woman takes a few minutes to get a certain amount of money and save the boy. Divided into variations of stories about the same theme, ‘Run Lola Run’ has an unparalleled dynamism to govern its plot, achieving in only 81 minutes to build a unique film.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the article!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;"You can now extend your support by buying me a Coffee.😊👇"&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/koulurunanda"&gt;Buy Me a Coffee&lt;/a&gt; &lt;br&gt;&lt;/p&gt;


&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
