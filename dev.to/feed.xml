<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>20 Best CSS3 Library For Developers.</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 08:32:24 +0000</pubDate>
      <link>https://dev.to/codingmania/20-best-css3-library-for-developers-e6p</link>
      <guid>https://dev.to/codingmania/20-best-css3-library-for-developers-e6p</guid>
      <description>&lt;p&gt;Beautiful CSS was once a time-consuming task for web developers. The CSS libraries have made it easier, quicker, and more efficient to create responsive websites and web apps.&lt;br&gt;Are you still searching for the best CSS libraries available? Are you curious to find out which library is best? This article contains 20 top CSS libraries that will inspire you.&lt;br&gt;&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwi2tZmq3-vyAhUjieYKHVWMAFMQFnoECAoQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS open source news and updates #86</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 18 Oct 2021 08:15:56 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-86-2hpa</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-86-2hpa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#october-18th-2021-instalment-86"&gt;
  &lt;/a&gt;
  October 18th, 2021 - Instalment #86
&lt;/h2&gt;

&lt;p&gt;Newsletter #86.&lt;/p&gt;

&lt;p&gt;This week we have a very broad variety of topics. Starting off with some fresh open source projects such as cfn-diagram, aws-jwt-verify, damo, aws-dotnet-deploy, automated-account-configuration, BayerCLAW and more. For mains, we have new AWS and community authored posts on MySQL, OpenSearch, .NET, miniwdl, OpenMRS, Apache Hudi, Apache Spark, ROS, cdk8s, Jax, Deep Graph Library and more. Finally, for pudding we have this weeks video that provides an insight into contributing to Apache Airflow and we have some new events added so check those out and add them to your diary. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Ian Avilez, Tim Pavlick, Jarek Potiuk, Ash Berlin-Taylor, Norm Johanson, Trivikram Kamat, Madhavan Sriram, Diego Menin, Gabriele Cacciola, Kunal Gautam, Mike Lin, Lee Pang, Krishna Singh, Razvan Ionasec, Archis Joglekar, Sean Morgan, Eddie Zaneski, Rohin Bhargava, Gopala Krishna, Saikumar Karanam, Fran√ßois Bouteruche and Nik Krichko.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;cfn-diagram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/4r"&gt;cfn-diagram&lt;/a&gt; whilst I did cover this project back in Feb, I was &lt;a href="https://aws-oss.beachgeek.co.uk/10b"&gt;notified&lt;/a&gt; by Lars from Mathem that there was now a new capability, ascii graphics.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9lTaOLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/cfn-diagram/master/demo-ascii.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9lTaOLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/cfn-diagram/master/demo-ascii.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-jwt-verify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10c"&gt;aws-jwt-verify&lt;/a&gt; this project provides a NodeJS library for verifying JWTs signed by Amazon Cognito, and any OIDC-compatible IDP that signs JWTs with RS256 (currently, only signature algorithm RS256 is supported)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-appconfig-codepipeline-cdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10d"&gt;aws-appconfig-codepipeline-cdk&lt;/a&gt; this project provides a sample application demos setup of AWS AppConfig using AWS CDK. AWS AppConfig application is set up to use AWS CodePipeline as configuration store. It also sets up AWS Lambda validator to validate the configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jkz3zk6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-appconfig-codepipeline-cdk/blob/main/infrastructure/src/main/resources/asset/arch.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jkz3zk6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-appconfig-codepipeline-cdk/blob/main/infrastructure/src/main/resources/asset/arch.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cloud-map-mcs-controller-for-k8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10e"&gt;aws-cloud-map-mcs-controller-for-k8s&lt;/a&gt; this project that snuck out late last week, AWS Cloud Map multi-cluster service discovery for Kubernetes (K8s) is a controller that implements existing multi-cluster services API that allows services to communicate across multiple clusters. The implementation relies on AWS Cloud Map for enabling cross-cluster service discovery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BayerCLAW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10f"&gt;BayerCLAW&lt;/a&gt; this project from the Bayer Group is a workflow orchestration system for AWS, targeted at bioinformatics pipelines. A workflow consists of a sequence of computational steps, each of which is captured in a Docker container. Some steps may parallelise work across many executions of the same container (scatter/gather pattern).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;damo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10g"&gt;damo&lt;/a&gt; this is a cool project, damo is a user space tool for &lt;a href="https://aws-oss.beachgeek.co.uk/10h"&gt;DAMON&lt;/a&gt;. Using this, you can monitor the data access patterns of your system or workloads and make data access-aware memory management optimisations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3kV6hi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/awslabs/damo/blob/next/images/damo_monitor_water_nsquared.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3kV6hi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/awslabs/damo/blob/next/images/damo_monitor_water_nsquared.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-dotnet-deploy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/b7"&gt;aws-dotnet-deploy&lt;/a&gt; this repository contains the AWS .NET deployment tool for .NET CLI - the opinionated tooling that simplifies deployment of .NET applications with minimum AWS knowledge. The tool suggests the right AWS compute service to deploy your application to. It then builds and packages your application as required by the chosen compute service, generates the deployment infrastructure, deploys your application by using the Cloud Development Kit (CDK), and displays the endpoint. Norm Johanson has put together a couple of blog posts. First we have &lt;a href="https://aws-oss.beachgeek.co.uk/102"&gt;Update on our new AWS .NET Deployment Experience&lt;/a&gt; which provides you with an update of the recent updates to this project. Following that we have &lt;a href="https://aws-oss.beachgeek.co.uk/zz"&gt;Deployment Projects with the new AWS .NET Deployment Experience&lt;/a&gt; that walks you through a new feature of this project, deployment projects[hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;automated-account-configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zy"&gt;automated-account-configuration&lt;/a&gt; this project is the Automated Account Configuration, a sample solution to enable operational scale for AWS customers by automating repeatable steps required before AWS accounts are used for customer workloads. Steps include setting up backups and patching for the resources within the account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LckqUrKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/Solutions/Solutions%2520Category%2520Template%2520Draft/Solution%2520Architecture%2520Diagrams/automated-account-config-architecture.34216591b80a575a38cd215fe59608925054d50f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LckqUrKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/Solutions/Solutions%2520Category%2520Template%2520Draft/Solution%2520Architecture%2520Diagrams/automated-account-config-architecture.34216591b80a575a38cd215fe59608925054d50f.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nik Krichko has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/10i"&gt;Comparing Graviton (ARM) Performance to Intel and AMD for MySQL&lt;/a&gt; that takes a closer look at running MySQL against different instance types on AWS to see what the different performance characteristics are. If you are running MySQL workloads you should check this out - no spoilers, but very interesting indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;headless-recorder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries offer programmatic access to a headless Google Chrome Browser via Puppeteer or Selenium Webdriver. Amazon provides a CloudWatch Synthetics Recorder to help you create canaries more easily. The recorder is a Google Chrome extension and based on the open source project,  &lt;a href="https://aws-oss.beachgeek.co.uk/10a"&gt;Headless recorder&lt;/a&gt;. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/109"&gt;Visual monitoring of applications with Amazon CloudWatch Synthetics&lt;/a&gt; Mahanth Jayadeva and Yesh Ravindra walk through how the visual monitoring blueprint for Amazon CloudWatch Synthetics can be utilised to monitor your applications for visual defects. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rftetKtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/10/04/9-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rftetKtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/10/04/9-1.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My colleague Fran√ßois Bouteruche is back with another instalment of the story of My Local Farmer, a fictional company inspired by customer interactions with AWS Solutions Architects. This episode, &lt;a href="https://aws-oss.beachgeek.co.uk/108"&gt;Migrating our trusty ol‚Äô .NET Framework applications to AWS, I couldn‚Äôt believe it!&lt;/a&gt; takes a look at a number of open source projects you can use to help move your .NET workloads over to AWS. Tres bien!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perfect timing with Kubecon last week, was Eddie Zaneski in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/106"&gt;Announcing the general availability of cdk8s and support for Go&lt;/a&gt;. For those who may not be familiar with cdk8s, this is a CNCF Sandbox project, an open-source software development framework for defining Kubernetes applications using general-purpose programming languages. The output of a CDK8s program is Kubernetes YAML that you can apply directly to any cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rohin Bhargava, Gopala Krishna, and Saikumar Karanam provide a brief overview of the cross-cluster replication feature within OpenSearch, and the thought process behind the design and implementation. Read on in &lt;a href="https://aws-oss.beachgeek.co.uk/107"&gt;Introduction to Cross-Cluster Replication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAX is NumPy on the CPU, GPU, and TPU, with great automatic differentiation for high-performance machine learning research. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/105"&gt;Train and deploy deep learning models using JAX with Amazon SageMaker&lt;/a&gt; Archis Joglekar and Sean Morgan show how you can utilise the Bring Your Own Container (BYOC) paradigm to train ML models on GPUs using the increasingly popular JAX library from Google. As a bonus, the post shows how to serialise trained models into the TensorFlow SavedModel format so that we can use the existing TensorFlow Serving infrastructure provided by SageMaker. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep Graph Library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ian Avilez and Tim Pavlick from HawkEye 360 provide some insights in how they are using the open source Deep Graph Library and Amazon Neptune to find risks for nearby ships in the post &lt;a href="https://aws-oss.beachgeek.co.uk/10j"&gt;HawkEye 360 predicts vessel risk using the Deep Graph Library and Amazon Neptune&lt;/a&gt;. The graph networks in Neptune and GNN models enable HawkEye 360 to reveal hidden relationships among vessels that would otherwise be lost in the vast sea of complexity. Read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umYi_AmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/07/image001-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umYi_AmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/07/image001-1.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenMRS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OpenMRS is a collaborative open-source project to develop software to support the delivery of health care. In the post &lt;a href="https://aws-oss.beachgeek.co.uk/104"&gt;Deploying OpenMRS Electronic Health Record (EHR) system on AWS&lt;/a&gt;, Krishna Singh and Razvan Ionasec explore how to deploy a OpenMRS EHR system on AWS so you can support hundreds of concurrent HCP users and tens of thousands of patients. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVQJzfdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/05/kbs_openmrs-aws_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVQJzfdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/05/kbs_openmrs-aws_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;miniwdl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Workflow Description Language (WDL) is a way to specify data processing workflows with a human-readable and -writeable syntax. WDL makes it straightforward to define analysis tasks, chain them together in workflows, and parallelise their execution. miniwdl is a local runner and developer toolkit for the bioinformatics-focused Workflow Description Language (WDL). In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/103"&gt;Using miniwdl, GWFCore, and SageMaker Studio as a cloud IDE for genomics workflows&lt;/a&gt; written by Mike Lin and Lee Pang, will show you how you can combine these open source tools together with AWS to build workflows and manage ad hoc analysis runs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8zlcFMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/11/VPC-in-Cloud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8zlcFMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/11/VPC-in-Cloud.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Hudi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Hudi is an open-source data management framework used to simplify incremental data processing and data pipeline development. In this case study from Amazon's Transportation service, they share how they enabled near-real-time event analytics at petabyte scale using Apache Hudi tables created by AWS Glue Spark jobs. For data analytics afficiondos, read on in &lt;a href="https://aws-oss.beachgeek.co.uk/101"&gt;How Amazon Transportation Service enabled near-real-time event analytics at petabyte scale using AWS Glue with Apache Hudi&lt;/a&gt; [warning, may contain gratuitous use of graphs!]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKIoCarT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/01/BDB1611-image001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKIoCarT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/01/BDB1611-image001.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SDKs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Trivikram Kamat shares how they were able to reduce the publish size of v3 SDK for Javascript modular packages by ~50% in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/100"&gt;How we halved the publish size of modular AWS SDK for JavaScript clients&lt;/a&gt;. A must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBOKRg4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/10/14/aws_sdk_client_sts_install_size_reduction_packagephobia-1024x787.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBOKRg4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/10/14/aws_sdk_client_sts_install_size_reduction_packagephobia-1024x787.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-data"&gt;
  &lt;/a&gt;
  Open Data
&lt;/h3&gt;

&lt;p&gt;Whilst not open source, open data sets help democratise access to data by making it available to the public for analysis on AWS; develop new cloud-native techniques, formats, and tools that lower the cost of working with data; and encourage the development of communities that benefit from access to shared datasets. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/10k"&gt;Climate data, koala genomes, analysis ready radar data, and highly-queryable genomic data: The latest open data on AWS&lt;/a&gt; Joe Flasher shares 26 new data sets released.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR 6.4 release version now supports Apache Spark 3.1.2 and provides runtime improvements with Amazon EMR Runtime for Apache Spark. Amazon EMR 6.4 provides Presto runtime improvements for PrestoDB 0.254, and runtime improvements for Apache Hive 3.1.2 when you use AWS Glue Data Catalog for your metastore.&lt;/p&gt;

&lt;p&gt;Amazon EMR 6.4 supports Apache Hudi 0.8.0, Trino 359, PrestoDB 0.254, Apache HBase 2.4.4, Apache Phoenix 5.1.2, Apache Flink 1.13.1, Apache Livy 0.7.1, JupyterHub 1.4.1, Apache Zookeeper 3.5.7 and Apache MXNet 1.8.0. Please see our release guide to learn more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch Apache ActiveMQ 5.16.3 brokers on Amazon MQ. This version update to ActiveMQ contains several fixes and improvements compared to the previously supported version, ActiveMQ 5.16.2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During September, 2021, 5 new versions of the AWS Cloud Development Kit  (CDK) for JavaScript, TypeScript, Java, Python, .NET and Go were released (v1.121.0 through v.125.0). With these releases, the CDK CLI now has support for hotswap deployments for faster inner-loop development iterations on the application code in your CDK project. Hotswap initially supports AWS Lambda handler code, but support is planned for additional resource types and a ‚Äúwatch‚Äù mode which continually watches for changes and deploys any updates. Additionally, users can preserve successfully provisioned resources by disabling automatic stack rollbacks, further reducing deployment and iteration time. These releases also resolve 21 issues and introduce 40 new features that span over 30 different modules across the library. Many of these changes were contributed by the developer community.&lt;/p&gt;

&lt;p&gt;Read the full release notes for &lt;a href="https://aws-oss.beachgeek.co.uk/zt"&gt;1.121.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zu"&gt;1.122.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zv"&gt;1.123.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zw"&gt;1.124.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zx"&gt;1.125.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS RoboMaker, a service that allows customers to simulate robotics applications at cloud scale, now supports GPU based simulation jobs for compute-intensive simulation workloads such as high fidelity simulation, vision processing, and machine learning (ML). Previously, AWS RoboMaker simulation jobs ran only on central processing unit (CPU) instances; now you can choose between a CPU based or GPU based simulation job. Developers can run, scale, and automate GPU based simulations. GPU based simulations support higher frames-per-second, higher resolutions, lower sensor latencies, and faster simulation job completion times than CPU based simulation jobs. These capabilities enable improved sensing by cameras and realistic rendering needed for use cases such as ML model training, reinforcement learning, and testing use cases that require high fidelity simulations. When running a GPU based simulation job, the AWS RoboMaker GUI tool viewer now supports higher resolutions, enabling you to see simulated objects in greater detail.&lt;/p&gt;

&lt;p&gt;Also new, AWS RoboMaker now supports expanded configuration for any robot and simulation software. Previously Robot Operating System (ROS) and Gazebo are the only supported robot and simulation software configuration in RoboMaker. This new feature enables customers to use and configure any robot and simulation software of their choice while running simulations in RoboMaker. To use this feature, you select General software suite for Robot application and Simulation runtime for Simulation Application. By choosing the Simulation Runtime configuration, RoboMaker bypasses validations for any specific robot or simulation software, and provides generic simulation features such as sourcing files to the simulation environment, logging, launching simulation tools, and streaming tool GUIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;Want to contribute to Apache Airflow? Find out more as to how this works by checking out this video, where Jarek Potiuk and Ash Berlin-Taylor, Apache Airflow maintainers walk you through why developer and contributor experience matters for Apache Community projects such as Apache Airflow and what they have done together with other members of the community to improve it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7MOuUnCxmt8"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Enterprise Scale NLP with Hugging Face &amp;amp; SageMaker&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th 2021 - 5:00 PM (BST)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this workshop, &lt;a href="https://aws-oss.beachgeek.co.uk/10l"&gt;Getting Started with Amazon SageMaker: Training your first NLP Transformer model with Hugging Face&lt;/a&gt; you will learn how to use Amazon SageMaker to train a Hugging Face Transformer model and deploy it afterwards. The workshop covers preparing and uploading  test dataset to S3, fine-tuning a script to be used with Amazon SageMaker Training jobs, launching a training job and storing the trained model into S3 and then deploying the model after successful training.&lt;/p&gt;

&lt;p&gt;Everything you need will be provided, so &lt;a href="https://aws-oss.beachgeek.co.uk/10l"&gt;read more and register using this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Databricks | AWS Lakehouse Dev Day Live Workshop&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 16th 9:00 AM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Lake is an open source storage layer that provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. You can use Delta Lake on top of your existing data lake. During this workshop you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your existing Amazon S3 data lakes into a lakehouse with Delta Lake.
&lt;/li&gt;
&lt;li&gt;Provide an easy-to-use platform for analysts to directly query data on your data lake using SQL Analytics&lt;/li&gt;
&lt;li&gt;Simplify and automate data pipelines for streaming and batch data to lower costs and boost productivity for your data teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zs"&gt;Read more and sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Build an Ecommerce Store with Next.js, Auth0 and Cloudinary</title>
      <author>nefejames</author>
      <pubDate>Mon, 18 Oct 2021 08:14:51 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-an-ecommerce-store-with-nextjs-auth0-and-cloudinary-dgo</link>
      <guid>https://dev.to/hackmamba/build-an-ecommerce-store-with-nextjs-auth0-and-cloudinary-dgo</guid>
      <description>&lt;p&gt;Multimedia content optimization is the process of delivering high-quality media files in the right dimension, size, and format without sacrificing quality. &lt;/p&gt;

&lt;p&gt;When poorly optimized, the images and videos in your websites can lead to a poor user experience, loss of traffic, and low SEO rankings. &lt;/p&gt;

&lt;p&gt;In this article, we will learn how Cloudinary enables us to serve fast-loading images and videos through their CDN. We will also learn to set up user authentication with Auth0 and create responsive components with Chakra UI. We will combine these technologies to develop an eCommerce application.  &lt;/p&gt;

&lt;p&gt;We completed the project demo in &lt;a href="https://codesandbox.io/s/broken-wood-4vb7o"&gt;a codesandbox&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can find the deployed version &lt;a href="https://hackmamba-project-19or6wbnq-nefejames.vercel.app/"&gt;here&lt;/a&gt; and the codebase in this &lt;a href="https://github.com/nefejames/hackmamba-project"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitesinstallation"&gt;
  &lt;/a&gt;
  Prerequisites/Installation
&lt;/h2&gt;

&lt;p&gt;Having some knowledge of and experience with, React.js and Chakra UI are required to follow the steps in this article. We will use the images and videos hosted on &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; so you will need a &lt;a href="https://cloudinary.com/users/register/free"&gt;Cloudinary account&lt;/a&gt;. &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; will handle the user authentication through their &lt;a href="https://auth0.com/docs/login/universal-login"&gt;universal login&lt;/a&gt; service, so you must &lt;a href="https://auth0.com/signu%20p"&gt;create an account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, we will be using Next.js in this project, so we need to &lt;a href="https://nextjs.org/docs/api-reference/create-next-ap"&gt;scaffold a new Next.js application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will also use the following packages in the application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;cloudinary-react&lt;/a&gt;‚Äôs Video component to display videos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/auth0/nextjs-auth0"&gt;Auth0‚Äôs Next.js SDK&lt;/a&gt; to handle the user authentication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chakra-ui/chakra-ui"&gt;Chakra UI&lt;/a&gt; to create the user interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We install the required packages in our application using the CLI command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i chakra-ui cloudinary-react auth0/nextjs-auth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-homepage"&gt;
  &lt;/a&gt;
  Creating the Homepage
&lt;/h2&gt;

&lt;p&gt;The homepage consists of a header and a hero section; the header consists of the logo and a login/sign-in button, and the hero consists of the website copy on the left and an image on the right.&lt;/p&gt;

&lt;p&gt;We can see the appearance of the homepage in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jp8p1A9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632582978011_homepage.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jp8p1A9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632582978011_homepage.PNG" alt="PetShop Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs begin by creating the layout for the homepage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Box, Container } from "@chakra-ui/react";
    import HomeHeader from "@components/Headers/Home";

    export default function HomeLayout({ children }) {
      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Container maxW={"7xl"}&amp;gt;
            &amp;lt;HomeHeader /&amp;gt;

            {children}
          &amp;lt;/Container&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the homepage layout, we create a component, &lt;code&gt;HomeLayout&lt;/code&gt;. &lt;code&gt;HomeLayout&lt;/code&gt; consists of a &lt;code&gt;HomeHeader&lt;/code&gt; component and the children we will pass into it later. &lt;code&gt;HomeLayout&lt;/code&gt; is where the hero section will sit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Homepage Header&lt;/strong&gt;&lt;br&gt;
Next, we create the homepage header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Box, Flex, Button } from "@chakra-ui/react";
    import Logo from "@svgs/Logo";

    export default function HomeHeader() {
      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Flex&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
          &amp;lt;/Flex&amp;gt;      
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;HomeHeader&lt;/code&gt; component is made up of the Logo. We will add a login button later in the article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Hero Section&lt;/strong&gt;&lt;br&gt;
Now, we move on to the hero section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Stack, Flex, Box, Heading, Text, Image } from "@chakra-ui/react";
    import HomeLayout from "@layout/Home";

    export default function Home() {
      return (
        &amp;lt;HomeLayout&amp;gt;
          &amp;lt;Stack&amp;gt;
            &amp;lt;Stack flex={1} spacing={{ base: 5, md: 10 }}&amp;gt;
              &amp;lt;Heading lineHeight={1.1} fontWeight={600} fontSize={["3xl", "4xl", "6xl"]}
              &amp;gt;
                Get your perfect companion{" "}
                &amp;lt;Text as="span" color="blue.500"&amp;gt;
                  today!
                &amp;lt;/Text&amp;gt;
              &amp;lt;/Heading&amp;gt;
              &amp;lt;Text color="gray.200" fontSize={["lg"]}&amp;gt;
                Buyng a pet is a big decision, and we are here to help you through
                the process. It's time to add a new love to your family. Discover
                the right pet for you. It's time to find your new best friend.
              &amp;lt;/Text&amp;gt;
            &amp;lt;/Stack&amp;gt;
            &amp;lt;Flex&amp;gt;
              &amp;lt;Box&amp;gt;
                &amp;lt;Image alt="Hero Image" fit="cover" align="center" w="100%" h="100%"
                  src=" https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/v1632501665/Hackmamba/Images/hero.jpg"
                /&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/Flex&amp;gt;
          &amp;lt;/Stack&amp;gt;
        &amp;lt;/HomeLayout&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The hero image is gotten from our Cloudinary media repository. Let‚Äôs breakdown the URL of the image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;q_auto&lt;/code&gt;: produces a high quality image with a minimal the file size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f_auto&lt;/code&gt;: delivers the image in the best format supported by the browser.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_auto&lt;/code&gt;: serves images proportional to users‚Äô device resolution and screen sizes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-dashboard"&gt;
  &lt;/a&gt;
  Creating the Dashboard
&lt;/h2&gt;

&lt;p&gt;The dashboard consists of a header, sidebar, and dashboard view that contains the products.&lt;br&gt;
The header consists of the logo and a button to toggle the sidebar.&lt;br&gt;
The sidebar consists of a link to illustrate how a dashboard looks in a full-scale application.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start by creating the layout of the dashboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useMediaQuery, Box, Stack } from "@chakra-ui/react";
    import Header from "@components/Headers/Dashboard/";
    import Page from "./Page";
    import { DesktopSidebar, MobileSidebar } from "@components/DashboardSidebar";

    export default function DashboardLayout({ children }) {
      const [isSmallScreen] = useMediaQuery("(max-width: 768px)");

      return (
        &amp;lt;Box w="full"&amp;gt;
          &amp;lt;Header /&amp;gt;
          &amp;lt;Box pos="relative" h="max-content"&amp;gt;
            &amp;lt;Stack direction="row" spacing={{ md: 5 }}&amp;gt;
              &amp;lt;DesktopSidebar /&amp;gt;
              {isSmallScreen &amp;amp;&amp;amp; &amp;lt;MobileSidebar /&amp;gt;}
              &amp;lt;Page&amp;gt;{children}&amp;lt;/Page&amp;gt;
            &amp;lt;/Stack&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dashboard layout consists of two dashboards, a mobile dashboard, and another for desktops.&lt;br&gt;
We create a &lt;code&gt;DashboardLayout&lt;/code&gt; component and use Chakra‚Äôs &lt;code&gt;[useMediaQuery](https://chakra-ui.com/docs/hooks/use-media-query)&lt;/code&gt; hook to set up a &lt;code&gt;isSmallScreen&lt;/code&gt; boolean. We show the mobile sidebar when &lt;code&gt;isSmallScreen&lt;/code&gt; is true - when the max-width is 768px.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dashboard Context and Interactivity Flow&lt;/strong&gt;&lt;br&gt;
Before we continue building the dashboard, we need to understand its flow. We want to add some interactivity to the dashboard to boost the user experience.&lt;/p&gt;

&lt;p&gt;We want to be able to toggle the width of the desktop sidebar. We also want the mobile sidebar to slide in and out when toggled.  &lt;/p&gt;

&lt;p&gt;A core aspect of this functionality is a sidebar context, which we will create. The value of the sidebar context is gotten from Chakra UI‚Äôs &lt;code&gt;[useDisclosure](https://chakra-ui.com/docs/hooks/use-disclosure)&lt;/code&gt; &lt;a href="https://chakra-ui.com/docs/hooks/use-disclosure"&gt;&lt;/a&gt;hook. &lt;code&gt;useDisclosure&lt;/code&gt; is a custom hook used to help handle common open, close, or toggle scenarios.&lt;/p&gt;

&lt;p&gt;When setting up the sidebar, we will create and export a &lt;code&gt;useSidebarAuth&lt;/code&gt; hook that consumes the sidebar context and makes its values accessible throughout the application.&lt;/p&gt;

&lt;p&gt;We will pass the &lt;code&gt;useSidebarAuth&lt;/code&gt; hook to a &lt;code&gt;SidebarToggleButton&lt;/code&gt; component which we will create later. &lt;code&gt;SidebarToggleButton&lt;/code&gt; will enable us to toggle the sidebar context‚Äôs &lt;code&gt;isOpen&lt;/code&gt; value when clicked. We will pass &lt;code&gt;SidebarToggleButton&lt;/code&gt; to the dashboard header later.&lt;br&gt;
Whenever a user clicks the &lt;code&gt;SidebarToggleButton&lt;/code&gt;, we alter the behavior of the desktop or mobile sidebars based on the current value of &lt;code&gt;isOpen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The flow chart image below shows us how the sidebar context works with the dashboard components and how we will set up the interactivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YsxVirp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632614220694_Untitled%2BDiagram.drawio1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YsxVirp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632614220694_Untitled%2BDiagram.drawio1.png" alt="dashboard context and interactivity flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Sidebar Context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the sidebar context and how it is used in the dashboard, let us set up the context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { createContext, useContext } from "react";
    import { useDisclosure } from "@chakra-ui/react";

    const SidebarContext = createContext(null);
    export const useSidebarAuth = () =&amp;gt; useContext(SidebarContext);

    export default function SidebarContextProvider({ children }) {
      const sidebarState = useDisclosure();

      return (
        &amp;lt;SidebarContext.Provider value={sidebarState}&amp;gt;
          {children}
        &amp;lt;/SidebarContext.Provider&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As stated earlier, we use the &lt;code&gt;useDisclosure&lt;/code&gt; hook to set up the context and export a &lt;code&gt;useSidebarAuth&lt;/code&gt; hook that consumes the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Sidebar Toggle Button&lt;/strong&gt;&lt;br&gt;
The next thing we need to do is create the  &lt;code&gt;SidebarToggleButton&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Icon, IconButton } from "@chakra-ui/react";
    import { CgClose, CgMenu } from "react-icons/cg";
    import { useSidebarAuth } from "@context/sidebarContext";

    export default function SidebarToggleButton() {
      const { onToggle, isOpen } = useSidebarAuth();
      const icon = isOpen ? CgClose : CgMenu;
      return (
        &amp;lt;IconButton
          size="sm"
          fontSize="lg"
          variant="ghost"
          onClick={onToggle}
          icon={&amp;lt;Icon as={icon} /&amp;gt;}
          aria-label="Toggle Actions"
          transition="all .4s ease-in-out"
        /&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As explained earlier, when &lt;code&gt;SidebarToggleButton&lt;/code&gt; is clicked, the &lt;code&gt;isOpen&lt;/code&gt; value of the context is toggled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Dashboard Header&lt;/strong&gt;&lt;br&gt;
Next we set up the dashboard header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Flex, Spacer, Stack, Button, Link } from "@chakra-ui/react";
    import SidebarToggleButton from "./components/SidebarToggleButton";
    import Logo from "@svgs/Logo";

    export default function DashboardHeader() {
      return (
        &amp;lt;Flex
          h="10vh"
          minH="70px"
          pos="sticky"
          top="0"
          zIndex="2"
        &amp;gt;
          &amp;lt;Stack direction="row" w="full" alignItems="center" spacing="8"&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
            &amp;lt;SidebarToggleButton /&amp;gt;

          &amp;lt;/Stack&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I explained with the flow chart, we add the &lt;code&gt;SidebarToggleButton&lt;/code&gt; component to the dashboard header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Desktop Sidebar&lt;/strong&gt;&lt;br&gt;
The dashboard has two sidebars, one for mobile devices, and another for desktop devices. Let‚Äôs start with the desktop sidebar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useRouter } from "next/router";
    import { useSidebarAuth } from "@context/sidebarContext";

    export default function Sidebar() {
      const router = useRouter();

      return (
        &amp;lt;Stack
          minH="full"
          h="90vh"
          pos="sticky"
          top="10vh"
          display={["none", , "initial"]}
          transition="width .4s ease-in-out"
        &amp;gt;
          &amp;lt;NavLink
            active={router.pathname === "/"}
            name="Home"
            href="/"
            icon={IoHomeSharp}
          /&amp;gt;
        &amp;lt;/Stack&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want the desktop sidebar to be hidden on mobile, so we set the display to none. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Mobile Sidebar&lt;/strong&gt;&lt;br&gt;
We make use of Chakra‚Äôs &lt;code&gt;[Drawer](https://chakra-ui.com/docs/overlay/drawe)&lt;/code&gt; component to set up the mobile sidebar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useEffect } from "react";
    import { useRouter } from "next/router";
    import {
      Drawer,
      DrawerCloseButton,
      DrawerContent,
      DrawerOverlay,
    } from "@chakra-ui/react";
    import { useSidebarAuth } from "@context/sidebarContext";
    import FullNavLink from "./FullNavLink";

    export default function MobileSidebar() {
      const router = useRouter();
      const { isOpen, onClose } = useSidebarAuth();

      useEffect(() =&amp;gt; {
        router.events.on("routeChangeComplete", onClose);
        return () =&amp;gt; {
          router.events.off("routeChangeComplete", onClose);
        };
      }, []);
      return (
        &amp;lt;Drawer isOpen={isOpen} onClose={onClose} placement="left"&amp;gt;
          &amp;lt;DrawerOverlay display={["initial", , "none"]}&amp;gt;
            &amp;lt;DrawerContent layerStyle="neutral" py={12} bg="gray.900"&amp;gt;
              &amp;lt;Stack spacing={2} fontSize="sm"&amp;gt;
                &amp;lt;DrawerCloseButton /&amp;gt;
                &amp;lt;FullNavLink
                  active={router.pathname === "/"}
                  name="Home"
                  href="/"
                  icon={IoHomeSharp}
                /&amp;gt;
              &amp;lt;/Stack&amp;gt;
            &amp;lt;/DrawerContent&amp;gt;
          &amp;lt;/DrawerOverlay&amp;gt;
        &amp;lt;/Drawer&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next.js provides a &lt;a href="https://nextjs.org/docs/api-reference/next/router#routerevents"&gt;router event&lt;/a&gt;, &lt;code&gt;routeChangeComplete&lt;/code&gt;, which we use to toggle the mobile sidebar when a link is clicked.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dashboard View&lt;/strong&gt; &lt;br&gt;
Before we proceed, we need to break down the dashboard view. The dashboard view consists of the &lt;code&gt;DashboardLayout&lt;/code&gt; component we set up earlier, a grid of products in a &lt;code&gt;ProductCard&lt;/code&gt; component, and a &lt;code&gt;ModalProduct&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Let‚Äôs set up the dashboard view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useState } from "react";
    import { Box, SimpleGrid } from "@chakra-ui/react";
    import { motion } from "framer-motion";
    import ProductCard from "@components/ProductCard";
    import DashboardLayout from "@layout/Dashboard";
    import ModalProduct from "@components/ModalProduct";
    import data from "@root/data";
    const MotionSimpleGrid = motion(SimpleGrid);
    const MotionBox = motion(Box);

    export default function Dashboard() {
      const [modalData, setModalData] = useState(null);
      return (
        &amp;lt;DashboardLayout&amp;gt;
          &amp;lt;Box&amp;gt;
            &amp;lt;MotionSimpleGrid&amp;gt;
              {data.map((product) =&amp;gt; (
                &amp;lt;MotionBox variants={cardVariant} key={product.id}&amp;gt;
                  &amp;lt;ProductCard product={product} setModalData={setModalData} /&amp;gt;
                &amp;lt;/MotionBox&amp;gt;
              ))}
            &amp;lt;/MotionSimpleGrid&amp;gt;
            &amp;lt;ModalProduct
              isOpen={modalData ? true : false}
              onClose={() =&amp;gt; setModalData(null)}
              modalData={modalData}
            /&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/DashboardLayout&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs breakdown the snippet above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We define a &lt;code&gt;modalData&lt;/code&gt; state where the data of the clicked product will be stored. &lt;/li&gt;
&lt;li&gt;We pass &lt;code&gt;setModalData&lt;/code&gt; and the product data to the &lt;code&gt;ProductCard&lt;/code&gt; component. We will use this to update the &lt;code&gt;modalData&lt;/code&gt; state with the data from the current product being clicked.&lt;/li&gt;
&lt;li&gt;We pass an &lt;code&gt;isOpen&lt;/code&gt; boolean, an &lt;code&gt;onClose&lt;/code&gt; method and and the &lt;code&gt;modalData&lt;/code&gt; state to the &lt;code&gt;ModalProduct&lt;/code&gt; component. The value of &lt;code&gt;isOpen&lt;/code&gt; depends on the value of &lt;code&gt;modalData&lt;/code&gt;. If &lt;code&gt;modalData&lt;/code&gt; is null, then &lt;code&gt;isOpen&lt;/code&gt; is false. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;code&gt;ProductCard&lt;/code&gt; is clicked, it triggers &lt;code&gt;ModalProduct&lt;/code&gt; and causes &lt;code&gt;ModalProduct&lt;/code&gt; to pop up.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a sample of the data we map through and pass to &lt;code&gt;ProductCard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const data = [
      {
        title: "First Pet",
        price: 250,
        img: "https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/Hackmamba/Images/pet1.jpg",
        video: "/Hackmamba/Videos/pet1",
      },
      {
        title: "Second Pet",
        price: 250,
        img: "https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/Hackmamba/Images/pet2.jpg",
        video: "/Hackmamba/Videos/pet2",
      },
      // other data objects below
    ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Creating the&lt;/strong&gt; &lt;code&gt;**ProductCard**&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;**ModalProduct**&lt;/code&gt; &lt;strong&gt;Component&lt;/strong&gt;&lt;br&gt;
Now that we understand how &lt;code&gt;ProductCard&lt;/code&gt; and &lt;code&gt;ModalProduct&lt;/code&gt; work, let‚Äôs create them.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with setting up &lt;code&gt;ProductCard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import Image from "next/image";
    import { Box, Flex } from "@chakra-ui/react";
    import { StarIcon } from "@chakra-ui/icons";

    export default function ProductCard({ product, setModalData }) {
      const { img, beds, baths, title, price } = product;
      const score = Math.floor(Math.random(5) * 5);
      const reviewCount = Math.floor(Math.random(50) * 50);

      return (
        &amp;lt;Flex&amp;gt;
          &amp;lt;Box onClick={() =&amp;gt; setModalData(product)}&amp;gt;
            &amp;lt;Box&amp;gt;
              &amp;lt;Image
                src={img}
                objectFit="cover"
                alt="picture of an animal"
                layout="fill"
                objectFit="cover"
              /&amp;gt;
            &amp;lt;/Box&amp;gt;

            &amp;lt;Box p="6"&amp;gt;
              &amp;lt;Box&amp;gt; {title} &amp;lt;/Box&amp;gt;
              &amp;lt;Box&amp;gt;${price}&amp;lt;/Box&amp;gt;

              &amp;lt;Box d="flex" mt="3" alignItems="center"&amp;gt;
                {Array(5)
                  .fill("")
                  .map((_, i) =&amp;gt; (
                    &amp;lt;StarIcon key={i} color={i &amp;lt; score ? "teal.500" : "gray.300"} /&amp;gt;
                  ))}
                &amp;lt;Box as="span" ml="2" color="gray.600" fontSize="sm"&amp;gt;
                  {reviewCount} reviews
                &amp;lt;/Box&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/Box&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As stated earlier, we pass &lt;code&gt;setModalData&lt;/code&gt; to &lt;code&gt;ProductCard&lt;/code&gt;. When &lt;code&gt;ProductCard&lt;/code&gt; is clicked, the &lt;code&gt;modalData&lt;/code&gt; state is updated with the data of the product card that was clicked.&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs set up &lt;code&gt;ModalProduct&lt;/code&gt;. To do that we use Chakra UI‚Äôs &lt;a href="https://chakra-ui.com/docs/overlay/modal"&gt;Modal&lt;/a&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody,
      ModalCloseButton, Button, useToast } from "@chakra-ui/react";
    import { Video } from "cloudinary-react";

    export default function ModalProduct({ isOpen, onClose, modalData }) {
      const { title, price, video } = modalData || {};
      const toast = useToast();

      const handleModalClose = () =&amp;gt; {
        toast({
          title: "Purchase successsful.",
          description: "One more happy pet.",
          status: "success",
          duration: 3000,
          isClosable: true,
        });
        setTimeout(() =&amp;gt; {
          onClose();
        }, 1000);
      };

      return (
        &amp;lt;Modal isOpen={isOpen} onClose={onClose} size="xl"&amp;gt;
          &amp;lt;ModalOverlay /&amp;gt;
          &amp;lt;ModalContent&amp;gt;
            &amp;lt;ModalCloseButton /&amp;gt;
            &amp;lt;ModalHeader&amp;gt;Pet Details&amp;lt;/ModalHeader&amp;gt;
            &amp;lt;ModalBody&amp;gt;
              &amp;lt;Box w="full" h="full"&amp;gt;
                &amp;lt;Video controls publicId={video} width={300} crop="scale" /&amp;gt;

                &amp;lt;Box pt="3"&amp;gt;
                  &amp;lt;Box&amp;gt; {title} &amp;lt;/Box&amp;gt;
                  ${price}
                &amp;lt;/Box&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/ModalBody&amp;gt;
            &amp;lt;ModalFooter&amp;gt;
              &amp;lt;Button onClick={handleModalClose}&amp;gt;
                Purchase
              &amp;lt;/Button&amp;gt;
            &amp;lt;/ModalFooter&amp;gt;
          &amp;lt;/ModalContent&amp;gt;
        &amp;lt;/Modal&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Earlier, we passed &lt;code&gt;isOpen&lt;/code&gt;, &lt;code&gt;onClose&lt;/code&gt;, and &lt;code&gt;modalData&lt;/code&gt; to &lt;code&gt;ModalProduct&lt;/code&gt; from the dashboard view. In the snippet above, we access them through props. We use &lt;code&gt;isOpen&lt;/code&gt; and &lt;code&gt;onClose&lt;/code&gt; to set up the modal and pass the data from &lt;code&gt;modalData&lt;/code&gt; to the appropriate parts of &lt;code&gt;ModalProduct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also define a function, &lt;code&gt;handleModalClose&lt;/code&gt;, and pass it to the modal‚Äôs purchase button. The &lt;code&gt;handleModalClose&lt;/code&gt; function displays a &lt;a href="https://chakra-ui.com/docs/feedback/toast"&gt;success toast&lt;/a&gt; and closes the modal when it is called. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-authentication"&gt;
  &lt;/a&gt;
  User Authentication
&lt;/h2&gt;

&lt;p&gt;As stated earlier, we will use Auth0 to handle the user authentication in this application. Auth0 has provided &lt;a href="https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0/"&gt;a guide&lt;/a&gt; on how to work with their Next.js SDK. &lt;br&gt;
The &lt;code&gt;useUser&lt;/code&gt; hook exports two objects, user and error, and an isLoading boolean. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;user&lt;/code&gt; contains information about the authenticated user.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;isLoading&lt;/code&gt; to check if the SDK has completed loading.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;error&lt;/code&gt; object to check if there were any authentication errors. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use the logged-in user profile in the following parts of our application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;index.js&lt;/code&gt; page&lt;/li&gt;
&lt;li&gt;the homepage header&lt;/li&gt;
&lt;li&gt;the dashboard header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Index.js Page&lt;/strong&gt;&lt;br&gt;
When the user logs in from the homepage, we want to redirect them to the dashboard route. We set up a &lt;code&gt;useEffect&lt;/code&gt; and check if &lt;code&gt;user&lt;/code&gt; exists. If it does, we redirect the user to the app route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useEffect } from "react";
    import HomePage from "@views/Home";
    import { useUser } from "@auth0/nextjs-auth0";
    import { useRouter } from "next/router";

    export default function Home() {
      const { user } = useUser();
      const router = useRouter();

      useEffect(() =&amp;gt; {
        if (user) {
          router.push("/app");
        }
      }, [user, router]);

      return (
        &amp;lt;div&amp;gt;
          &amp;lt;Head&amp;gt;
            &amp;lt;title&amp;gt;Hackmamba PetShop&amp;lt;/title&amp;gt;
          &amp;lt;/Head&amp;gt;

          &amp;lt;HomePage /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Homepage Header&lt;/strong&gt;&lt;br&gt;
Here, we conditionally show the logout and login buttons. We show the login button if there is no user and the logout button if there is a logged-in user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Box, Flex, Button } from "@chakra-ui/react";
    import Logo from "@svgs/Logo";
    import { useUser } from "@auth0/nextjs-auth0";

    export default function HomeHeader() {
      const { user, isLoading } = useUser();

      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Flex&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;

            {!isLoading &amp;amp;&amp;amp; !user &amp;amp;&amp;amp; (
              &amp;lt;NextLink href="/api/auth/login" passHref&amp;gt;
                &amp;lt;Button as="a" bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;
                  Sign In/Log in
                &amp;lt;/Button&amp;gt;
              &amp;lt;/NextLink&amp;gt;
            )}

            {user &amp;amp;&amp;amp; (
              &amp;lt;NextLink href="/api/auth/logout" passHref&amp;gt;
                &amp;lt;Button as="a" bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;
                  Logout
                &amp;lt;/Button&amp;gt;
              &amp;lt;/NextLink&amp;gt;
            )}
          &amp;lt;/Flex&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Dashboard Header&lt;/strong&gt;&lt;br&gt;
Here, we show the logout button when a user is logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Flex, Spacer, Stack, Button, Link } from "@chakra-ui/react";
    import SidebarToggleButton from "./components/SidebarToggleButton";
    import { useUser } from "@auth0/nextjs-auth0";
    import Logo from "@svgs/Logo";

    export default function DashboardHeader() {
      const { user } = useUser();

      return (
        &amp;lt;Flex&amp;gt;
          &amp;lt;Stack direction="row" w="full" alignItems="center" spacing="8"&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
            &amp;lt;SidebarToggleButton /&amp;gt;

            &amp;lt;Spacer /&amp;gt;

            {user &amp;amp;&amp;amp; (
              &amp;lt;Link href="/api/auth/logout"&amp;gt;
                &amp;lt;Button bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;Logout&amp;lt;/Button&amp;gt;
              &amp;lt;/Link&amp;gt;
            )}
          &amp;lt;/Stack&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how to use Auth0, Next.js, Chakra UI, and Cloudinary to create an eCommerce application. We also learned how to add interactivity to our applications and make them responsive with Chakra UI‚Äôs &lt;code&gt;useDisclosure&lt;/code&gt; and &lt;code&gt;useMediaQuery&lt;/code&gt; hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;You can learn more about the technologies used from the links below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://cloudinary.com/documentation/react_video_manipulation"&gt;React video transformations&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloudinary.com/documentation/image_optimization"&gt;Image optimization&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;&lt;/a&gt;&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;cloudinary-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auth0&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://auth0.com/docs/quickstart/webapp/nextjs/01-login"&gt;How to authenticate Next.js apps with Auth0&lt;/a&gt; &lt;br&gt;
&lt;a href="https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0/"&gt;The ultimate guide to Next.js authentication with Auth0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://nextjs.org/docs/getting-started"&gt;Getting started with Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon&lt;/p&gt;

</description>
      <category>auth0</category>
      <category>cloudinary</category>
      <category>nextjs</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>5 lines of CSS style for disabled elements.(from Material Design)</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Mon, 18 Oct 2021 08:11:52 +0000</pubDate>
      <link>https://dev.to/ksengine/5-lines-of-css-style-for-disabled-elementsfrom-material-design-122d</link>
      <guid>https://dev.to/ksengine/5-lines-of-css-style-for-disabled-elementsfrom-material-design-122d</guid>
      <description>&lt;p&gt;If I are creating a form with HTML, sometimes I wanted to disable a text box for users. Here came the &lt;strong&gt;&lt;code&gt;disabled&lt;/code&gt; attribute&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabled-controls"&gt;
  &lt;/a&gt;
  Disabled Controls
&lt;/h2&gt;

&lt;p&gt;The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.&lt;/p&gt;

&lt;p&gt;If the disabled attribute is specified on a form control, the element and its form control descendants do not participate in constraint validation. Often browsers grey out such controls and it won't receive any browsing events, like mouse clicks or focus-related ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-only-controls"&gt;
  &lt;/a&gt;
  Read only controls
&lt;/h2&gt;

&lt;p&gt;What about &lt;strong&gt;read only&lt;/strong&gt; controls.&lt;br&gt;
The difference between &lt;code&gt;disabled&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt; is that read-only controls can still function and are still focusable, whereas disabled controls can not receive focus and are not submitted with the form and generally do not function as controls until they are enabled.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#required-fields"&gt;
  &lt;/a&gt;
  Required fields
&lt;/h2&gt;

&lt;p&gt;What about &lt;strong&gt;required&lt;/strong&gt; controls.&lt;br&gt;
Because a &lt;code&gt;disabled&lt;/code&gt; field cannot have its value changed, &lt;code&gt;required&lt;/code&gt; does not have any effect on inputs with the disabled attribute also specified. Additionally, since the elements become immutable, most other attributes, such as pattern, have no effect, until the control is enabled.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;code&gt;required&lt;/code&gt; attribute is not permitted on inputs with the &lt;code&gt;disabled&lt;/code&gt; attribute specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#material-design"&gt;
  &lt;/a&gt;
  Material Design
&lt;/h2&gt;

&lt;p&gt;Material Design is a design language developed by Google in 2014. Expanding on the "cards" that debuted in Google Now, Material Design uses more grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.&lt;/p&gt;

&lt;p&gt;According to Material Design&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A disabled state communicates when a component or element isn‚Äôt interactive, and should be deemphasized in a UI. Disabled states are displayed at 38% opacity of the enabled state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Disabled states can also indicate they are not interactive through color changes and reduced elevation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4JO31xY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZWFDVVYAkiFCGvmxT7PQKKyIQz1l_-QKSeXyCCO96cmmXGsNMOmGFFTHzzA0oweCHYgyGv-iF5LCdqR5nVEPxmuE0FDxlQQbAdCWjg%3Dw1064-v0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4JO31xY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZWFDVVYAkiFCGvmxT7PQKKyIQz1l_-QKSeXyCCO96cmmXGsNMOmGFFTHzzA0oweCHYgyGv-iF5LCdqR5nVEPxmuE0FDxlQQbAdCWjg%3Dw1064-v0" alt="(1) Enabled and (2) disabled buttons differentiate through color and elevation changes."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;So here is the Materialized disabled CSS snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:disabled&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/abyNJqQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all. Enjoy it.&lt;br&gt;
Follow me for more tricks.üèÉ‚Äç‚ôÄÔ∏èüèÉ‚Äç‚ôÇÔ∏è&lt;br&gt;
Thanks üíñüíñüíñ.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Spiral lifecycle model Part 2</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 18 Oct 2021 07:54:22 +0000</pubDate>
      <link>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</link>
      <guid>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</guid>
      <description>&lt;p&gt;&lt;strong&gt;In the last post, we studied about the spiral lifecycle model. Let us now continue discussing about the model in this part. Just in case you missed it, you can check it out &lt;a href="https://dev.to/aatmaj/spiral-lifecycle-model-part-1-4cjh"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#advantages-of-the-model"&gt;
  &lt;/a&gt;
  Advantages of the model
&lt;/h3&gt;

&lt;p&gt;The spiral lifecycle model helps you analyze risks and eliminate them before they get too big. One of the moist important advantages of the spiral model is that as the cost increases, the risk decreases. The more time and money you spend, the lesser risk you are actually taking, which is exactly what we all want in any lifecycle model.&lt;/p&gt;

&lt;p&gt;The spiral model provides at least as much management control as the traditional waterfall model, you have the checkpoints ready just from the start of every iteration. Because the model is risk oriented, it provides you with the early indications of any risks possible. If in the worst case, the project cant be done for technical or any other reasons, you will find that out early on. Moreover the users can see the system easily from the start due to &lt;strong&gt;effective prototyping&lt;/strong&gt;. This results in &lt;strong&gt;Early user engagement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The spiral lifecycle model can be coupled with other lifecycle models in a couple of different ways. This is why this model is very adaptable. And yes, the transition from building a project to maintaining it is so smooth that this boosts the overall maintainability of the project &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;p&gt;The only disadvantage of the spiral model is that it's a lot complicated.  It requires conscientious, attentive and knowledgeable management. It can be difficult to define objective, verifiable milestones that indicate weather you're ready to add the next layer to the model or not. In some cases, the product development is straight forward enough and project risks are modest enough that you don't need the flexibility and risk management provided by the spiral model. Not suitable for small or low risk projects and could be expensive for small projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-this-model"&gt;
  &lt;/a&gt;
  When to use this model
&lt;/h3&gt;

&lt;p&gt;Use this model when you have an experienced management staff. Use in projects where user involvement is to be preferred over expected time to complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use For&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#for-medium-to-highrisk-projects"&gt;
  &lt;/a&gt;
  For medium to high-risk projects.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#when-there-is-adequate-to-fair-time"&gt;
  &lt;/a&gt;
  When there is adequate to fair time.
&lt;/h5&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:48:04 +0000</pubDate>
      <link>https://dev.to/codingmania/15-must-have-browser-extensions-for-web-developers-23ni</link>
      <guid>https://dev.to/codingmania/15-must-have-browser-extensions-for-web-developers-23ni</guid>
      <description>&lt;h2&gt;Browsers are increasingly incorporating more¬†&lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on¬†&lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/h2&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt;¬†most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:29:25 +0000</pubDate>
      <link>https://dev.to/codingmania/7-best-tools-for-developers-they-cant-live-without-it-4d7b</link>
      <guid>https://dev.to/codingmania/7-best-tools-for-developers-they-cant-live-without-it-4d7b</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;The&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;best tools for developers¬†&lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;VS Code extensions for JS¬†&lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the¬†&lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>7 Amazing Tips While Redesigning Your Website</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:28:48 +0000</pubDate>
      <link>https://dev.to/codingmania/7-amazing-tips-while-redesigning-your-website-3kdk</link>
      <guid>https://dev.to/codingmania/7-amazing-tips-while-redesigning-your-website-3kdk</guid>
      <description>&lt;p&gt;Redesigning a website may be a stressful, time-consuming, and complex task. It‚Äôs natural if the amount of information you need to know in order to build a new, fresh design repulses you. However, if you take the time to educate yourself and gain hands-on experience, you can avoid making mistakes and achieve your goals. Here are seven golden pointers for redesigning your website to get you started:&lt;/p&gt;
&lt;p&gt;When you consider rebuilding your website, you most likely imagine something huge and powerful. It‚Äôs the ideal opportunity to give your website a bold and dramatic new appearance. However, the world is not what you might assume.¬†&lt;/p&gt;

&lt;p&gt;&lt;b&gt;READ More&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwjCx8Gc_JjzAhXawzgGHeQLBh4QFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 JS tricks you *probably* didn't know</title>
      <author>Shuvo</author>
      <pubDate>Mon, 18 Oct 2021 06:51:33 +0000</pubDate>
      <link>https://dev.to/0shuvo0/10-js-tricks-you-probably-didnt-know-3adf</link>
      <guid>https://dev.to/0shuvo0/10-js-tricks-you-probably-didnt-know-3adf</guid>
      <description>&lt;ol&gt;
&lt;li&gt;You can use &lt;strong&gt;+&lt;/strong&gt; in front of a string to convert it into a number. &lt;code&gt;console.log(typeof +"5") //number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+&lt;/strong&gt; in front of date object will convert in into number of milliseconds. &lt;code&gt;console.log(+new Date()) //1634538267248&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;| 0&lt;/strong&gt; after a floating point number will convert in into a integer. &lt;code&gt;console.log(35.354 | 0) //35&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If an array only contains one number you can use &lt;strong&gt;+&lt;/strong&gt; in front of array to convert it into a number. &lt;code&gt;console.log(typeof +[6]) //number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use es6 to remove duplicates from array. &lt;code&gt;console.log([...new Set([1,2,2,3,4,4,5])]) //[1, 2, 3, 4, 5]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Converting Numbers array to Strings array &lt;code&gt;console.log([1,2,2,3,4,4,5].map(String)) //['1', '2', '2', '3', '4', '4', '5']&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Converting String array to Numbers array &lt;code&gt;console.log(['1', '2', '2', '3', '4', '4', '5'].map(Number)) //[1, 2, 2, 3, 4, 4, 5]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML comment is valid in JavaScript WTF ü§£&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="nx"&gt;Don&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t mind me I am just a comment--&amp;gt;
console.log("Hello")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compare three values without using &lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;. &lt;code&gt;console.log(3 &amp;gt; 2 &amp;lt; 5) //false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deep copy object using &lt;strong&gt;JSON.stringify&lt;/strong&gt; and &lt;strong&gt;JSON.parse&lt;/strong&gt; &lt;code&gt;console.log(obj == JSON.parse(JSON.stringify(obj))) // false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 06:27:28 +0000</pubDate>
      <link>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-34kd</link>
      <guid>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-34kd</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference.¬†&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>Ethical Hacking Roadmap - A Beginners Tutorial</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 06:26:56 +0000</pubDate>
      <link>https://dev.to/codingmania/ethical-hacking-roadmap-a-beginners-tutorial-1god</link>
      <guid>https://dev.to/codingmania/ethical-hacking-roadmap-a-beginners-tutorial-1god</guid>
      <description>&lt;h2&gt;&lt;strong&gt;Who is an Ethical Hacker?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;An ethical hacker is a computer network specialist who deals with the security posture of an organization. His job involves eliciting security flaws in the organization he is working for by testing all aspects of the system and its services for any sort of vulnerabilities. The key point to notice is that all this is done with the permission of the owners of the organization and without any malicious intent. An ethical hacker is also known as a white hat hacker and is the stark opposite of a black hat hacker, a.k.a crackers who hack with the sole purpose of bringing about some sort of disruption, or chaos from the vulnerabilities they find.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjSy6-98ZvzAhXQxTgGHSS8Bu84ChAWegQIGxAB&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;Ethical Hacking Roadmap - A Beginners Guide&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flutter: Interesting widgets, part 2.</title>
      <author>Samuel Wahome</author>
      <pubDate>Mon, 18 Oct 2021 06:21:48 +0000</pubDate>
      <link>https://dev.to/samueldotcloud/flutter-interesting-widgets-part-2-1o35</link>
      <guid>https://dev.to/samueldotcloud/flutter-interesting-widgets-part-2-1o35</guid>
      <description>&lt;p&gt;Welcome one and all to yet another edition of this blog series, that revolves around interesting yet useful &lt;a href="https://flutter.dev/?gclid=CjwKCAjwk6-LBhBZEiwAOUUDpyiFfJ5G96xWuWr-lzfw7y7EseI5e8gpd9qbPai9Zu78jZWSPJxViRoC8Y4QAvD_BwE&amp;amp;gclsrc=aw.ds"&gt;Flutter&lt;/a&gt; widgets that I've encountered in my exploits with the framework. The first part of this series can be found right &lt;a href="https://medium.com/@samuelwahome/flutter-interesting-widgets-part-1-c166c07f3b60"&gt;here&lt;/a&gt;. Enough of the pleasantries, and let's cut straight to the chase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4Epj0XzZbQ4go3Qs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4Epj0XzZbQ4go3Qs/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#icon"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Icon-class.html"&gt;Icon&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever need to render icons in your app? Well, look no further as this widget definitely has your back. Simply put, the &lt;code&gt;Icon&lt;/code&gt; widget is a graphical icon widget, that is able to draw icons as described in its &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/icon.html"&gt;icon&lt;/a&gt; property, that accepts an &lt;a href="https://api.flutter.dev/flutter/widgets/IconData-class.html"&gt;IconData&lt;/a&gt; class, which is a description of an icon fulfilled by a font glyph.&lt;br&gt;
This widget has other properties that can be modified, such as &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/size.html"&gt;size&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/color.html"&gt;color&lt;/a&gt;, all in order to make the UI even more appealing. It is important to note that Icons are not interactive, hence would need to be wrapped with other interactive widgets, or one may also consider material's &lt;a href="https://api.flutter.dev/flutter/material/IconButton-class.html"&gt;IconButton&lt;/a&gt;, which does that work just as efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;Text&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;This widget is responsible for displaying a string of text, but with a single style. This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/Text/data.html"&gt;data&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/maxLines.html"&gt;maxLines&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/overflow.html"&gt;overflow&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/style.html"&gt;style&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/textAlign.html"&gt;textAlign&lt;/a&gt;, and &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;others&lt;/a&gt; that are used to customize how a &lt;code&gt;Text&lt;/code&gt; widget is rendered on the screen.&lt;br&gt;
It is important to note that the &lt;code&gt;Text&lt;/code&gt; widget is not interactive, hence to make &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;Text&lt;/a&gt; react to touch events, wrap it in a &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html"&gt;GestureDetector&lt;/a&gt; widget with a &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector/onTap.html"&gt;GestureDetector.onTap&lt;/a&gt; handler. In a material design application, consider using a &lt;a href="https://api.flutter.dev/flutter/material/TextButton-class.html"&gt;TextButton&lt;/a&gt; instead, or if that isn't appropriate, at least using an &lt;a href="https://api.flutter.dev/flutter/material/InkWell-class.html"&gt;InkWell&lt;/a&gt; instead of &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html"&gt;GestureDetector&lt;/a&gt;. To make sections of the text interactive, use &lt;a href="https://api.flutter.dev/flutter/widgets/RichText-class.html"&gt;RichText&lt;/a&gt; and specify a &lt;a href="https://api.flutter.dev/flutter/gestures/TapGestureRecognizer-class.html"&gt;TapGestureRecognizer&lt;/a&gt; as the &lt;a href="https://api.flutter.dev/flutter/painting/TextSpan/recognizer.html"&gt;TextSpan.recognizer&lt;/a&gt; of the relevant part of the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#richtext"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/RichText-class.html"&gt;RichText&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;This widget is also responsible for displaying text. However, the &lt;code&gt;RichText&lt;/code&gt; widget displays text that uses multiple different styles. The text to display is described using a tree of &lt;a href="https://api.flutter.dev/flutter/painting/TextSpan-class.html"&gt;TextSpan&lt;/a&gt; objects, each of which has an associated style that is used for that subtree.&lt;br&gt;
This widget also has various useful properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/MultiChildRenderObjectWidget/children.html"&gt;children&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/maxLines.html"&gt;maxLines&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/overflow.html"&gt;overflow&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/text.html"&gt;text&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/textAlign.html"&gt;textAlign&lt;/a&gt;, etc, that can be used to customize how the &lt;code&gt;RichText&lt;/code&gt; widget is rendered on the screen. For more information, this &lt;a href="https://www.youtube.com/watch?v=rykDVh-QFfw"&gt;video&lt;/a&gt; will definitely be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streambuilder"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"&gt;Streambuilder&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;According to the official documentation, the &lt;code&gt;Streambuilder&lt;/code&gt; widget is simply a widget that builds itself based on the latest snapshot of interaction with a &lt;a href="https://api.flutter.dev/flutter/dart-async/Stream-class.html"&gt;Stream&lt;/a&gt;. This widget is especially useful when retrieving data asynchronously from a source, and displaying that data via the use of other widgets.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder/builder.html"&gt;builder&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder/initialData.html"&gt;initialData&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilderBase/stream.html"&gt;stream&lt;/a&gt;, etc, that define how a new &lt;code&gt;Streambuilder&lt;/code&gt; widget is built.¬†&lt;br&gt;
For more information on this widget and streams in general, then &lt;a href="https://youtu.be/MkKEWHfy99Y"&gt;this&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilderBase/stream.html"&gt;that&lt;/a&gt; video should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listtile"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/material/ListTile-class.html"&gt;ListTile&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever wanted your app's list display to follow material design guidelines, or you just couldn't find the right combination of widgets to create a whole other widget to be displayed in a list? Well, here comes the &lt;code&gt;ListTile&lt;/code&gt; widget that solves just that predicament.¬†&lt;br&gt;
A &lt;code&gt;ListTile&lt;/code&gt; widget contains one to three lines of text optionally flanked by icons or other widgets, such as &lt;a href="https://api.flutter.dev/flutter/material/Checkbox-class.html"&gt;check boxes&lt;/a&gt;. The icons (or other widgets) for the tile are defined with the &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/ListTile/trailing.html"&gt;trailing&lt;/a&gt; parameters. The first line of text is not optional and is specified with &lt;a href="https://api.flutter.dev/flutter/material/ListTile/title.html"&gt;title&lt;/a&gt;. The value of &lt;a href="https://api.flutter.dev/flutter/material/ListTile/subtitle.html"&gt;subtitle&lt;/a&gt;, which is optional, will occupy the space allocated for an additional line of text, or two lines if &lt;a href="https://api.flutter.dev/flutter/material/ListTile/isThreeLine.html"&gt;isThreeLine&lt;/a&gt; is true. Note that &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/ListTile/trailing.html"&gt;trailing&lt;/a&gt; widgets can expand as far as they wish horizontally, so ensure that they are properly constrained. List tiles are typically used in &lt;a href="https://api.flutter.dev/flutter/widgets/ListView-class.html"&gt;ListViews&lt;/a&gt;, or arranged in &lt;a href="https://api.flutter.dev/flutter/widgets/Column-class.html"&gt;Columns&lt;/a&gt; in &lt;a href="https://api.flutter.dev/flutter/material/Drawer-class.html"&gt;Drawers&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/Card-class.html"&gt;Cards&lt;/a&gt;.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/material/ListTile/contentPadding.html"&gt;contentPadding&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/enabled.html"&gt;enabled&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/hoverColor.html"&gt;hoverColor&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/onTap.html"&gt;onTap&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/selected.html"&gt;selected&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/shape.html"&gt;shape&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/subtitle.html"&gt;subtitle&lt;/a&gt;, etc, that define how the &lt;code&gt;ListTile&lt;/code&gt; widget is rendered on the screen.¬†&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=l8dj0yPBvgQ"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refreshindicator"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator-class.html"&gt;RefreshIndicator&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed to create the 'swipe to refresh feature'? Well, look no further as this has been the widget that you've definitely been searching for. A &lt;code&gt;RefreshIndicator&lt;/code&gt; in simple terms, is a widget that supports the Material "swipe to refresh" idiom.&lt;br&gt;
When the child's &lt;a href="https://api.flutter.dev/flutter/widgets/Scrollable-class.html"&gt;Scrollable&lt;/a&gt; descendant over scrolls, an animated circular progress indicator is faded into view. When the scroll ends, if the indicator has been dragged far enough for it to become completely opaque, the &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/onRefresh.html"&gt;onRefresh&lt;/a&gt; callback is called. The callback is expected to update the scrollable's contents and then complete the &lt;a href="https://api.flutter.dev/flutter/dart-async/Future-class.html"&gt;Future&lt;/a&gt; it returns. The refresh indicator disappears after the callback's &lt;a href="https://api.flutter.dev/flutter/dart-async/Future-class.html"&gt;Future&lt;/a&gt; has completed.&lt;br&gt;
It is also important to note that a &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator-class.html"&gt;RefreshIndicator&lt;/a&gt; can only be used with a vertical scroll view.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/backgroundColor.html"&gt;backgroundColor&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/color.html"&gt;color&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/displacement.html"&gt;displacement&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/onRefresh.html"&gt;onRefresh&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/child.html"&gt;child&lt;/a&gt;, etc, that define where and how the &lt;code&gt;RefreshIndicator&lt;/code&gt; widget shall be rendered on the screen.&lt;br&gt;
In case of further queries, then this &lt;a href="https://www.youtube.com/watch?v=ORApMlzwMdM"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cliprrect"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect-class.html"&gt;ClipRRect&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Need a rounded rectangle shape on a widget? Well, look no further as the &lt;code&gt;ClipRRect&lt;/code&gt; widget is definitely what you've been searching for. In simple terms, this widget works by clipping its child using a rounded rectangle.&lt;br&gt;
With properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect/borderRadius.html"&gt;borderRadius&lt;/a&gt;, etc, one can customize how this widget is rendered on the screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=eI43jkQkrvs"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expanded"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Expanded-class.html"&gt;Expanded&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed a child widget in a &lt;a href="https://api.flutter.dev/flutter/widgets/Row-class.html"&gt;Row&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Column-class.html"&gt;Column&lt;/a&gt;, or &lt;a href="https://api.flutter.dev/flutter/widgets/Flex-class.html"&gt;Flex&lt;/a&gt; to fill and occupy any extra space? Then the &lt;code&gt;Expanded&lt;/code&gt; widget is definitely what you've been searching for. If multiple children are expanded, the available space is divided among them according to the &lt;a href="https://api.flutter.dev/flutter/widgets/Flexible/flex.html"&gt;flex&lt;/a&gt; factor.&lt;br&gt;
With properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/ProxyWidget/child.html"&gt;child&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Flexible/flex.html"&gt;flex&lt;/a&gt;, etc, one can define how this widget is rendered on the screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=_rnZaagadyo"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#padding"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Padding-class.html"&gt;Padding&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Need to add some extra space around a widget? Well, look no further as the &lt;code&gt;Padding&lt;/code&gt; widget may be just what you need. The &lt;code&gt;Padding&lt;/code&gt; widget works by insetting its child by the given padding.&lt;br&gt;
With its properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/SingleChildRenderObjectWidget/child.html"&gt;child&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Padding/padding.html"&gt;padding&lt;/a&gt;, etc, one can customize how the widget is rendered on a screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=oD5RtLhhubg"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gridview"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/GridView-class.html"&gt;GridView&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed to display items in a grid format? Well, look no further as the &lt;code&gt;GridView&lt;/code&gt; widget may be just what you are looking for. A grid view is simply a scrollable, 2D array of widgets. With its various &lt;a href="https://api.flutter.dev/flutter/widgets/GridView-class.html"&gt;constructors&lt;/a&gt; such as &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.builder.html"&gt;builder&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.count.html"&gt;count&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.custom.html"&gt;custom&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.extent.html"&gt;extent&lt;/a&gt;, etc, one is able to customize the functionality of the resulting grid.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=bLOtZDTm4H8"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;




&lt;p&gt;That was all that I had to share for now‚úå. To all readers, cheers to codeü•Ç, and have a blessed day.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>ios</category>
      <category>android</category>
    </item>
  </channel>
</rss>
