<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Send Welcome Emails using Appwrite's Swift Cloud Functions</title>
      <author>Christy Jacob</author>
      <pubDate>Fri, 22 Oct 2021 09:18:55 +0000</pubDate>
      <link>https://dev.to/appwrite/create-and-run-welcome-email-appwrite-cloud-function-with-swift-2m1h</link>
      <guid>https://dev.to/appwrite/create-and-run-welcome-email-appwrite-cloud-function-with-swift-2m1h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6G3eisz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeofzxl2bcjq9t6dfe3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6G3eisz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeofzxl2bcjq9t6dfe3g.png" alt="Cover Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the Swift developers out there, we have good news! We just announced our Swift SDK to work with server side APIs of Appwrite. You can learn more about our Swift SDK in our &lt;a href="https://dev.toswift-SDK-announcement-post"&gt;Swift SDK announcement post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial however, we are going to write, deploy and run our very own &lt;strong&gt;Welcome Email Cloud Function&lt;/strong&gt; with Swift. Let's get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-appwrite-cloud-functions"&gt;
  &lt;/a&gt;
  ü§î What are Appwrite Cloud Functions?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://appwrite.io/docs/functions"&gt;Appwrite Cloud Functions&lt;/a&gt; are a way for you to extend and customize your &lt;a href="https://appwrite.io"&gt;Appwrite BaaS&lt;/a&gt; functionality by allowing you to execute custom code. Appwrite can execute your function either explicitly or in response to any Appwrite system event like account creation, user login, database updates and much more. You can also schedule your functions to run according to a CRON schedule or trigger them manually by hitting an HTTP endpoint using the Appwrite client or server APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  üóíÔ∏è Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you'll need to have the latest version of Appwrite installed and an Appwrite project setup to test this function. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple. Based on your operating system, run one of the following commands and installation should be complete in less than 2 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unix"&gt;
  &lt;/a&gt;
  Unix
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-cmd"&gt;
  &lt;/a&gt;
  Windows CMD
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;//var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"%cd%"&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.11.0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-powershell"&gt;
  &lt;/a&gt;
  Windows PowerShell
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;${pwd}&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.11.0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also find detailed installation instructions in the official Appwrite &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another requirement to follow along is that you have a &lt;a href="https://www.mailgun.com/"&gt;Mailgun account&lt;/a&gt; with a valid &lt;strong&gt;Mailgun Domain&lt;/strong&gt; and &lt;strong&gt;API Key&lt;/strong&gt;. With that aside, we're ready to get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-activate-swift-functions-runtime"&gt;
  &lt;/a&gt;
  üîìÔ∏è Activate Swift Functions Runtime
&lt;/h2&gt;

&lt;p&gt;The Swift runtime needs to be &lt;code&gt;enabled&lt;/code&gt; for you to be able to use it. This can be done easily using environment variables. The environment variables can be found in the &lt;code&gt;.env&lt;/code&gt; file located in the Appwrite installation folder. If it's not present already, you'll need to add the following key-value pair to the &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_APP_FUNCTIONS_RUNTIMES=swift-5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, restart your stack using &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialize-your-swift-function"&gt;
  &lt;/a&gt;
  üîë Initialize Your Swift Function
&lt;/h2&gt;

&lt;p&gt;First, create a project folder where you will create all the necessary files for your function. We will call this folder &lt;code&gt;welcome-email&lt;/code&gt;. Once inside this folder, you can create a new Swift project with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app swift:5.5 swift package init WelcomeEmail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initialize a new Swift package project. It should create bunch of files, important ones to notice are&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ Sources/WelcomeEmail/main.swift
‚îî‚îÄ‚îÄ Package.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-appwrite-swift-sdk-dependency"&gt;
  &lt;/a&gt;
  ‚ûï Add Appwrite Swift SDK dependency
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;welcome-email&lt;/code&gt; folder in your favorite IDE and add the following code to your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;PackageDescription&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WelcomeEmail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/swift-server/async-http-client.git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WelcomeEmail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"AsyncHTTPClient"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"async-http-client"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we add the &lt;code&gt;async-http-client&lt;/code&gt; SDK for swift under dependencies as well as under the executable's target dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-your-function"&gt;
  &lt;/a&gt;
  ‚úçÔ∏è  Write your Function
&lt;/h2&gt;

&lt;p&gt;Open &lt;code&gt;Sources/WelcomeEmail/main.swift&lt;/code&gt; and fill in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;AsyncHTTPClient&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;sendSimpleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throws&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;targetURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.mailgun.net/v3/&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;MAILGUN_DOMAIN&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;/messages"&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"from"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Excited User &amp;lt;hello@appwrite.io&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"to"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"subject"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;targetURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;RAW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"api:&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;MAILGUN_API_KEY&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;using&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="nf"&gt;base64EncodedString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Basic &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nf"&gt;buildMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whenComplete&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Message sent!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MAILGUN_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"MAILGUN_DOMAIN"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MAILGUN_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"MAILGUN_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;APPWRITE_FUNCTION_EVENT_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"APPWRITE_FUNCTION_EVENT_DATA"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;"{}"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eventLoopGroupProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createNew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DispatchGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;APPWRITE_FUNCTION_EVENT_DATA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="kt"&gt;JSONSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse APPWRITE_FUNCTION_EVENT_DATA"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse name"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse email"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nf"&gt;sendSimpleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The environment variables that we are accessing here are either already available or are later set in the Appwrite Function's settings.&lt;/p&gt;

&lt;p&gt;Next create a new file under &lt;code&gt;Sources/WelcomeEmail/File.swift&lt;/code&gt; that will house one of our helper classes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we need to create one more file &lt;code&gt;Sources/WelcomeEmail/Utils.swift&lt;/code&gt; for some of our utility functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;AsyncHTTPClient&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;DASHDASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;boundaryChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz1234567890"&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;randomBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundaryChars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;randomElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;buildMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inout&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"; filename=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Length: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readableBytes&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Length: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;randomBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bodyBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;listValue&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;[]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;listValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Length"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readableBytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"multipart/form-data;boundary=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;byteBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#build-the-function-binary"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è Build the Function Binary
&lt;/h2&gt;

&lt;p&gt;In order to deploy our function, we need to first build the project. Our runtime is based on the &lt;code&gt;slim&lt;/code&gt; version of official &lt;strong&gt;Swift&lt;/strong&gt; docker image, so we'll use the official &lt;strong&gt;Swift&lt;/strong&gt; docker image to build our project.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;welcome-email&lt;/code&gt; directory, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app swift:5.5 swift build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should build the project. Ensure that your folder structure looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ .build/x86_64-unknown-linux-gnu/debug/WelcomeEmail
‚îú‚îÄ‚îÄ Package.swift
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ Sources
    ‚îî‚îÄ‚îÄ WelcomeEmail
        ‚îú‚îÄ‚îÄ File.swift
        ‚îú‚îÄ‚îÄ main.swift
        ‚îî‚îÄ‚îÄ Utils.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There could be other files and folders as well, but you can ignore those.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#create-a-function-in-your-appwrite-console"&gt;
  &lt;/a&gt;
  ‚òÅÔ∏è Create a Function in Your Appwrite Console
&lt;/h2&gt;

&lt;p&gt;Login to your Appwrite console and open the project of your choosing. On the sidebar, tap on the &lt;code&gt;Functions&lt;/code&gt; menu. In the following screen, tap the &lt;code&gt;Add Function&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gbja_zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp55xzrfjp6ztp0a57e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gbja_zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp55xzrfjp6ztp0a57e4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll call our Cloud function &lt;code&gt;WelcomeEmail&lt;/code&gt;. and select &lt;code&gt;swift-5.5&lt;/code&gt; for the environment. Then tap &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-tag"&gt;
  &lt;/a&gt;
  üßë‚Äçüíª Deploy Tag
&lt;/h2&gt;

&lt;p&gt;Once your function is created, you'll be taken to the &lt;strong&gt;Function Overview&lt;/strong&gt; screen. Click the &lt;strong&gt;Deploy Tag&lt;/strong&gt; button at the bottom of the function overview page and then switch to the &lt;strong&gt;Manual&lt;/strong&gt; tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6WRBTcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1gghjzmq0oh8jjkgoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6WRBTcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1gghjzmq0oh8jjkgoy.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's first create a tarfile that contains our function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-zcvf&lt;/span&gt; code.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; .build/x86_64-unknown-linux-gnu/ debug/WelcomeEmail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head back to the &lt;strong&gt;Deploy a New Tag&lt;/strong&gt; dialog and upload the &lt;code&gt;code.tar.gz&lt;/code&gt; that we just created and use &lt;code&gt;./WelcomeEmail&lt;/code&gt; for the &lt;strong&gt;Command&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activate-tag"&gt;
  &lt;/a&gt;
  ‚úÖ Activate tag
&lt;/h2&gt;

&lt;p&gt;Once you deploy your tag, it will be listed under &lt;strong&gt;Tags&lt;/strong&gt; on the &lt;strong&gt;Overview&lt;/strong&gt; page. Activate your most recent tag ( if you have multiple versions ).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-triggers-and-environment-variables"&gt;
  &lt;/a&gt;
  üí° Adding Triggers and Environment Variables
&lt;/h2&gt;

&lt;p&gt;On the &lt;strong&gt;Functions&lt;/strong&gt; page, switch to the &lt;strong&gt;Settings&lt;/strong&gt; tab. A function can be triggered based on an &lt;code&gt;event&lt;/code&gt; or a &lt;code&gt;schedule&lt;/code&gt; you choose. This particular function should be triggered by the &lt;code&gt;users.create&lt;/code&gt; and the &lt;code&gt;account.create&lt;/code&gt; events. Select these events from the events section.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Variables&lt;/strong&gt; section, tap the &lt;strong&gt;Add Variable&lt;/strong&gt; button and add the following variables and click the &lt;strong&gt;Update&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MAILGUN_API_KEY&lt;/strong&gt; - Your Mailgun API Key.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAILGUN_DOMAIN&lt;/strong&gt; - Your Mailgun domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-verify-its-working"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è Verify it's working
&lt;/h2&gt;

&lt;p&gt;It's about time to check if all our hard work has finally paid off! Let's create a user and verify that our Cloud Function has sent them a welcome email! &lt;/p&gt;

&lt;p&gt;Head to the &lt;strong&gt;Users&lt;/strong&gt; page from the Sidebar and click the &lt;strong&gt;Add User&lt;/strong&gt; button. Give your user a &lt;strong&gt;valid name&lt;/strong&gt; and &lt;strong&gt;email ID&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt;. Back in the &lt;strong&gt;Functions page&lt;/strong&gt;, you can now examine the logs of your function execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're using a sandbox Mailgun account, ensure that the email ID is an &lt;a href="https://help.mailgun.com/hc/en-us/articles/217531258-Authorized-Recipients"&gt;Authorized Recipient&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-resources"&gt;
  &lt;/a&gt;
  üìöÔ∏è Resources
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open issues&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans üë©‚Äçüíª.&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>swift</category>
      <category>tutorial</category>
      <category>serverless</category>
      <category>cloud</category>
    </item>
    <item>
      <title>My First Hacktoberfest </title>
      <author>Sujana Kamasany</author>
      <pubDate>Fri, 22 Oct 2021 09:07:23 +0000</pubDate>
      <link>https://dev.to/sujanakamasany/my-first-hacktoberfest-3g9</link>
      <guid>https://dev.to/sujanakamasany/my-first-hacktoberfest-3g9</guid>
      <description>&lt;p&gt;I just completed my first &lt;strong&gt;&lt;em&gt;Hacktoberfest 2021&lt;/em&gt;&lt;/strong&gt; and it feels amazing! Open Source is a great way of learning and i learnt a lot this month in my little contributions to open source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_KfbPZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64gw5vlo3hs5uzhtseqq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_KfbPZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64gw5vlo3hs5uzhtseqq.gif" alt="Minion gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Hacktoberfest 2021, we all made meaningful open-source contributions by improving the code quality of thousands of projects. Not just we learn but earn cute swags to üòâ! Isn't amazing!&lt;/p&gt;

&lt;p&gt;If you are a beginner and want to start with your open source journey! Check this amazing blog by &lt;a href="https://www.freecodecamp.org/news/how-to-contribute-to-open-source-projects-beginners-guide/"&gt;Freecodecamp&lt;/a&gt; and start contributing right away!&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>hacktoberfest2021</category>
      <category>opensource</category>
      <category>contributor</category>
    </item>
    <item>
      <title>Eat your own dogfood: I hosted my father's brewery website on my own hosting product</title>
      <author>Robert Schleinhege</author>
      <pubDate>Fri, 22 Oct 2021 09:06:47 +0000</pubDate>
      <link>https://dev.to/roberts/eat-your-own-dogfood-i-hosted-my-fathers-brewery-website-on-my-own-hosting-product-1hjc</link>
      <guid>https://dev.to/roberts/eat-your-own-dogfood-i-hosted-my-fathers-brewery-website-on-my-own-hosting-product-1hjc</guid>
      <description>&lt;p&gt;Hi, I'm Robert. I'm the Product Owner of &lt;a href="https://docs.ionos.space/"&gt;Deploy Now&lt;/a&gt;, a fresh new hosting product by IONOS. The idea of Deploy Now is to make hosting and coding a seamless process by enabling instant deploys from GitHub. For now, it's pretty much what GitHub Pages does, but we want to expand its functionalities to make it a real hosting service. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-importance-of-eat-your-own-dogfood"&gt;
  &lt;/a&gt;
  The importance of "eat your own dogfood"
&lt;/h1&gt;

&lt;p&gt;As a Product Owner, I'm not a software developer. So basically, I'm not the target group of Deploy Now. My daily job is to make prio decisions and shape the product's vision - based on what I believe customers want. Of course, I can allways interview customers about their experience or ask my dev colleagues about their opinions to get behind the target groups needs. But depending on the methods you choose to get customer insights, you always create a smaller or larger bias between what is meant and what you understood. &lt;/p&gt;

&lt;p&gt;I believe that the least error-prone method is to use your products yourself, on real projects: Eat your own dogfood! Nothing describes the experience of using a product better than making the experience of using a product.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-my-project"&gt;
  &lt;/a&gt;
  About my project
&lt;/h1&gt;

&lt;p&gt;As using Deploy Now in a personal project is more of a weekend thing, I wanted it to be something fun - it shouldn't feel like extra work. And I think that's fair since the majority of my users also use Deploy Now for their hobby projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----iLrsTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h08p6cd0vqrvihvz62un.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----iLrsTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h08p6cd0vqrvihvz62un.JPG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily, my father recently founded a little local brewery together with a friend and they didn't have a website back then. And of course, beer is fun - so I picked this as my project. I'm sorry that the website is in german, but I think you can guess what it's about. A little bit of story telling, a description of the different types of beers they produce and a list of locations where you can purchase it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-and-deploying"&gt;
  &lt;/a&gt;
  Coding and deploying
&lt;/h1&gt;

&lt;p&gt;I decided to build a simple static one pager with HTML and CSS, as I don't need any dynamic elements like payment processes or a CMS. Maybe one day if they decide to open a shop or blog, but not yet. After some research, I decided to use Tailwind CSS and to reuse some modules from &lt;a href="https://tailblocks.cc/"&gt;tailblocks.cc&lt;/a&gt; to not spend too much time on styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtFuJu8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4j3ltphgy0wjs30tiah.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtFuJu8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4j3ltphgy0wjs30tiah.JPG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The objective of Deploy Now is to make coding and hosting a seamless thing, so I set up a project in Deploy Now right after I created &lt;a href="https://github.com/robert-95/landbier-tailwind"&gt;my repository&lt;/a&gt;. I opened two tabs in my browser: One showed the website hosted on Deploy Now (users get a free preview domain) - and the second tab showed the local version. Every five to ten local commits, I did a Git push and checked the website on line. This was real fun. &lt;/p&gt;

&lt;p&gt;Going online with my site that early allowed me to send the link to by dad to get some feedback. He appreciated having a preview and checked the links on various devices. He recognized my site was not quite mobile friendly, so I tried to make it more responsive. After some iterations, we were both happy and I purhased and connected an &lt;a href="https://www.ionos.com/domains/domain-names"&gt;IONOS domain&lt;/a&gt;. You can check out my site under &lt;a href="https://papenburgerbrauerei.de/"&gt;papenburgerbrauerei.de&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you like the project and you would like to create a similar site by yourself, you can just click the button below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ionos.space/setup?repo=https://github.com/robert-95/landbier-tailwind"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0tsBETo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ionos.space/deploy-now-icons/deploy-to-ionos-btn.svg" alt="Deploy to IONOS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h1&gt;

&lt;p&gt;So dispite my father being happy about this nice family story - what did I learn from this?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Better understanding of the overall workflow:&lt;/strong&gt; Getting an impression of the steps you go through when creating a new project, the ratio between local and remote commits and the challenge to view multiple tabs and screens in parallel gave me a better understanding of the product experience and context.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Preview links and Staging Deployments are useful:&lt;/strong&gt; Since I've connected a domain, my father's site is getting around 100 visitors each day. When working on new content or modules, I don't want to harm their experience. This is why I decided to open a seperate feature branch for changes like this - hosted on a Staging Deployment. This was the first real feature we created for Deploy Now - and it was totally worth it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Techies could make fun of you, but you'll learn from it:&lt;/strong&gt; Being a product guy in tech, you sometimes have a hard time working together with devs that have more tech knowledge than you. On the morning after I've put my site live, the dev team recognized my name in the admin tool and of course instantly checked my repo. I got some comments on my technical incapabilities and received a bunch of pull requests :-) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If you wouldn't use your own product, you are doing something wrong:&lt;/strong&gt; So the big question is - would I use my own product if I were a neutral customer? Tough question. Of course it has it's teething problems, but all key functionalites work great. I would love to see visitor statistics in the dashboard directly without the need to install Google Analytics. This might be a topic for our backlog.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;a href="https://docs.ionos.space/"&gt;Deploy Now&lt;/a&gt; sounds interesting to you, I would love to hear your feedback. You can sign up for free. And if you should pay my beatiful hometown Papenburg a visit one day, feel free to grab a beer at my father's brewery :-) &lt;/p&gt;

&lt;p&gt;How about you? Do you use the products your company is building?&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>ionos</category>
      <category>product</category>
      <category>hosting</category>
    </item>
    <item>
      <title>Common mistakes when writing CSS with BEM</title>
      <author>Malte Riechmann</author>
      <pubDate>Fri, 22 Oct 2021 08:48:47 +0000</pubDate>
      <link>https://dev.to/visuellverstehen/common-mistakes-when-writing-css-with-bem-4921</link>
      <guid>https://dev.to/visuellverstehen/common-mistakes-when-writing-css-with-bem-4921</guid>
      <description>&lt;h2&gt;
  &lt;a href="#software-development-is-a-team-effort"&gt;
  &lt;/a&gt;
  Software development is a team effort
&lt;/h2&gt;

&lt;p&gt;When doing software development it is essential to agree on guidelines, technology, and methodologies. Those agreements should be the result of discussions, proof of concepts, knowledge, and sometimes votes. The whole team should be invited to participate because software development is a team effort and everyone likes engaging team members.&lt;/p&gt;

&lt;p&gt;At visuellverstehen, we are divided into multiple teams. Some teams agreed on using &lt;a href="https://css-tricks.com/bem-101"&gt;Block-Element-Modifier (BEM)&lt;/a&gt; and other teams agreed on using &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt;. I think it is super important to agree on one way or the other, while both ways are totally fine for the success of our client projects.&lt;/p&gt;

&lt;p&gt;One thing is for sure. If you do not agree, it will become a mess. I have been there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-proper-bem"&gt;
  &lt;/a&gt;
  Learn proper BEM
&lt;/h2&gt;

&lt;p&gt;Now and then new colleagues join our team. Some of them never have heard about BEM before. So they have to learn it and naturally some mistakes will happen. Mistakes are not a problem at all. They are part of the learning process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#four-most-common-mistakes"&gt;
  &lt;/a&gt;
  Four most common mistakes
&lt;/h2&gt;

&lt;p&gt;To help you learn proper BEM, I wrote down some of the most common mistakes I see in my day-to-day work life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-wrongly-nested-blocks-and-elements"&gt;
  &lt;/a&gt;
  1. Wrongly nested blocks and elements
&lt;/h3&gt;

&lt;p&gt;It is not allowed to nest blocks. If you start a new block, you are not allowed to proceed with elements from another block.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  ‚ùå Wrong
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__headline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#correct"&gt;
  &lt;/a&gt;
  ‚úÖ Correct
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__headline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-greatgrandchildren"&gt;
  &lt;/a&gt;
  2. Great-grandchildren
&lt;/h3&gt;

&lt;p&gt;There are no great-grandchildren in BEM. Instead, ¬ªnormal¬´ elements of the block can be used.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  ‚ùå Wrong
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header__headline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#correct"&gt;
  &lt;/a&gt;
  ‚úÖ Correct
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__headline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-modifiers-without-a-base-class"&gt;
  &lt;/a&gt;
  3. Modifiers without a base class
&lt;/h3&gt;

&lt;p&gt;Modifiers cannot exist without a base block or element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  ‚ùå Wrong
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card--highlight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#correct"&gt;
  &lt;/a&gt;
  ‚úÖ Correct
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card card--highlight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  ‚ùå Wrong
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header--important"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#correct"&gt;
  &lt;/a&gt;
  ‚úÖ Correct
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__header card__header--important"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-too-big-blocks"&gt;
  &lt;/a&gt;
  4. Too big blocks
&lt;/h3&gt;

&lt;p&gt;It is not a good idea to create really big blocks. The idea of BEM is to create modular and reusable blocks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  ‚ùå Wrong
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body__main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body__footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#correct"&gt;
  &lt;/a&gt;
  ‚úÖ Correct
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automate-stuff"&gt;
  &lt;/a&gt;
  Automate stuff
&lt;/h2&gt;

&lt;p&gt;Sometimes it is hard to find mistakes manually. Yesterday I learned there is a &lt;a href="https://github.com/postcss/postcss-bem-linter"&gt;BEM linter&lt;/a&gt;. I will look into it.&lt;/p&gt;

</description>
      <category>css</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I enjoy life-long learning, but...</title>
      <author>Ingo Steinke</author>
      <pubDate>Fri, 22 Oct 2021 08:22:13 +0000</pubDate>
      <link>https://dev.to/ingosteinke/i-enjoy-life-long-learning-but--5efh</link>
      <guid>https://dev.to/ingosteinke/i-enjoy-life-long-learning-but--5efh</guid>
      <description>&lt;p&gt;... there are some aspects of working as a web developer that do not spark joy in my heart. After collecting some notes over time, I have pasted them into this dev rant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-enjoy-lifelong-learning-but-"&gt;
  &lt;/a&gt;
  I enjoy life-long learning, but ...
&lt;/h2&gt;

&lt;p&gt;I enjoy life long learning, especially of front end technology like HTML, CSS, UX, UI, also back-end stuff like SQL, Doctrine, and Symfony. So many things have improved (even JavaScript and PHP), but then there is stuff that I could do without, like spending days configuring Webpack and its plugins only because somebody else decided that every project needs to use Webpack (replace Webpack with any other tool or task you could have done without or delegate it to somebody else).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stuff-that-i-could-do-without"&gt;
  &lt;/a&gt;
  Stuff that I could do without
&lt;/h2&gt;

&lt;p&gt;This rant is basically a collection of some stuff that I had written down to get it out of my mind. Finally decided to publish and share, so maybe it's fun to read, and maybe it is good for you to know that you are not the only one getting annoyed and confused by misleading error messages and the like. So here we go:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;Adapting boilerplate configuration code for Webpack, React, or any other tool, to reflect the latest breaking changes. &lt;br&gt;
 Tasks like this may mean front-end web development to some people. But to me, it means nothing but wasting my time with menial tasks that could have been avoided if developers would actually care not to break things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-it-aintt-broke-dont-fix-it"&gt;
  &lt;/a&gt;
  If it aint't broke, don't fix it
&lt;/h2&gt;

&lt;p&gt;Apart from regular upgrades to node packages, which break other packages' peer dependencies so that those other packages need another upgrade, which breaks another package ... apart from that, we can check for security vulnerabilities automatically using &lt;code&gt;npm audit&lt;/code&gt;, which is, in theory, a good idea, despite occasional irrelevant alerts and false positives. But either there is "no fix available" or if there is, chances are, that &lt;code&gt;npm audit fix&lt;/code&gt; will upgrade (or even downgrade) a dependency that breaks something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#broken-dependencies"&gt;
  &lt;/a&gt;
  Broken Dependencies
&lt;/h2&gt;

&lt;p&gt;Don't even bother checking the error logs and vulnerability details to try and fix the problems yourself. You will find out that half of your software has already been deprecated in favor of another totally different technology, which is either unavailable due to a peer dependency of an indispensable module, or else it will be completely incompatible, poorly documented and still in beta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-assumptions"&gt;
  &lt;/a&gt;
  Hidden Assumptions
&lt;/h2&gt;

&lt;p&gt;Beta or not, even common tools that are supposed to stable, maintained, and popular, sometimes lack the ability and documentation to make them "just work" on your own machine.&lt;/p&gt;

&lt;p&gt;Any tutorial seems to make at least one assumption that does not match my current situation when trying to use any popular tool exactly like advised in their official documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-tell-you-its-easy"&gt;
  &lt;/a&gt;
  "I tell you, it's easy!"
&lt;/h2&gt;

&lt;p&gt;Annoyed also by tutorials trying to tell me that something is easy, all I need to know, or supposed to make me have fun. I am just trying to do my work, okay?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#silly-idiosyncrasies"&gt;
  &lt;/a&gt;
  Silly Idiosyncrasies
&lt;/h2&gt;

&lt;p&gt;Annoyed to see meme gif images of some seemingly popular Hollywood actor, when all I wanted was a solution to a technical problem. Having to read npm idiosyncrasies like "sill" or silly slack phrases like "Sweet potato! Here's a tractor" or "more holy moly!"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0r6hoprP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmp3aloixvmoqgn7dvs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0r6hoprP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmp3aloixvmoqgn7dvs.jpg" alt='Slack screenshot with text "More holy moly! Your friends at slack"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack-trace-novels"&gt;
  &lt;/a&gt;
  Stack Trace Novels
&lt;/h2&gt;

&lt;p&gt;Error messages containing several pages of verbose stack trace details that still omit the actual file name or line number that would help you to trace the error back to your source code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-overflow"&gt;
  &lt;/a&gt;
  Search Overflow
&lt;/h2&gt;

&lt;p&gt;Googling the error message, finding either unrelated or unanswered questions on StackOverflow, and if someone did have the exact same error message, surely their question had been erroneously marked as a duplicate or "downvoted" and closed for any other obscure reason.&lt;/p&gt;

&lt;p&gt;In other cases: not a single matching entry, and Google stating the obvious: that there are not many great search results. You don't say! üò≤&lt;/p&gt;

&lt;p&gt;Alternatively getting a lot of search results, but mostly unrelated, annotated by small blue link with a strike through one of my search terms, stating "missing / must include". These link never provided any single more relevant result when clicked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSvRTgxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eefaatqnvton828rsll4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSvRTgxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eefaatqnvton828rsll4.png" alt="Screenshot showing a failed google search like described in the text above."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting-the-wrong-code"&gt;
  &lt;/a&gt;
  Linting the Wrong Code
&lt;/h2&gt;

&lt;p&gt;All of this only to find out later, after hours of frustrating research, that the actual error was a typo in a completely unrelated file never mentioned by any error message or linter warning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-allowed-to-fix-stackoverflow"&gt;
  &lt;/a&gt;
  Not Allowed to Fix StackOverflow
&lt;/h2&gt;

&lt;p&gt;Try to fix the same typo in the StackOverflow example where it came from, but on submitting an edit, getting the error message from StackOverflow:&lt;/p&gt;

&lt;p&gt;"Edits must be at least 6 characters; is there something else to improve in this post?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#airbnbs-coding-style"&gt;
  &lt;/a&gt;
  AirBnB's Coding Style
&lt;/h2&gt;

&lt;p&gt;Meanwhile, linters keep nagging about missing or superfluous braces, spaces or indentation, again instead of providing any insight about the actual problems of my code. Even more so, if a senior team member or a company coding style guide insisted on using AirBnB's style guide. Their website looks neat, and so did most of the places I ever booked over their platform, but their JavaScript style guide still sucks.&lt;/p&gt;

&lt;p&gt;Most code examples found in official documentation seem to use double quotes for strings. AirBnB doesn't. So after pasting documentation examples into your own code, you have to "fix" the "errors", sorry: 'fix' the 'errors' until you see no more &lt;code&gt;Strings must use single-quote&lt;/code&gt;. But we're not done yet:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dangling-characters"&gt;
  &lt;/a&gt;
  Dangling Characters
&lt;/h2&gt;

&lt;p&gt;Adding dangling commas at the end of any line that would not regularly end with a semicolon! But I did not find it helpful to achieve the intended benefit of getting less verbose &lt;code&gt;git diff&lt;/code&gt; to review, because adherence to indentation rules makes everyone reformat twenty lines of code around even a single character fix on one line anyway.&lt;/p&gt;

&lt;p&gt;Having to add trailing commas mostly everywhere just moves inconsistency to &lt;code&gt;package.json&lt;/code&gt; and any other &lt;code&gt;json&lt;/code&gt; file where there are still some parts of the code that will make your code invalid. Now why won't the ubiquitous Babel handle that as well?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expected-mess"&gt;
  &lt;/a&gt;
  Expected Mess
&lt;/h2&gt;

&lt;p&gt;It still happens, that you copy a well-formatted code snippet and paste it into your editor / IDE where the original format gets messed up to unreadability, does not get fixed, but instead linted and underlined with helpful annotations like "Expected indentation of 8 spaces but found 4".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-mess"&gt;
  &lt;/a&gt;
  Recommended Mess
&lt;/h2&gt;

&lt;p&gt;All of this mess gets more likely, the more recommended tools you try to stick together, especially if any part of the setup or boilerplate code has not been updated during the past eleven months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-closed"&gt;
  &lt;/a&gt;
  Case Closed
&lt;/h2&gt;

&lt;p&gt;Seen the same pattern in GitHub issue, but also in Google's Help Center: there is one single, unhelpful, answer for a problem that  keeps occurring and which is hard to google, and the thread is already closed? "This question is locked and replying has been disabled." Also known as "Can't Reproduce, case closed."&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
      <category>devjournal</category>
      <category>rant</category>
    </item>
    <item>
      <title>simple way to store data in js</title>
      <author>duccanhole</author>
      <pubDate>Fri, 22 Oct 2021 08:19:03 +0000</pubDate>
      <link>https://dev.to/coderduck/simple-way-to-store-data-in-js-1i3</link>
      <guid>https://dev.to/coderduck/simple-way-to-store-data-in-js-1i3</guid>
      <description>&lt;p&gt;&lt;strong&gt;You want a simple way to store data? In javascript, you can use &lt;code&gt;window.localStorage&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
localStoge allows you store any information in browser. It is new feature of HTML5, and using method is similar to hashmap(with key and value). To store data, use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.setItem(key, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get data, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.getItem(key);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;localStorage also provide method to delete data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localStorage.removeItem(value); //delete one
localStorage.clear(); //delete all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Read more about document: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Because it's pretty basic and simple, localStorage only store string data, if data is more complex, it becomes useless. Addition, the limit of data is small(about 5mb);  and it has not security. Therefore, think carefully before use localStorage.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title> 1 way tells how an execution plan is generated</title>
      <author>lisahui</author>
      <pubDate>Fri, 22 Oct 2021 08:16:00 +0000</pubDate>
      <link>https://dev.to/lisahui/1-way-tells-how-an-execution-plan-is-generated-4k9k</link>
      <guid>https://dev.to/lisahui/1-way-tells-how-an-execution-plan-is-generated-4k9k</guid>
      <description>&lt;p&gt;In the last article, we mentioned that Validator will convert an AST generated by Parser to an execution plan. In this article, we will explain how an execution plan is generated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2LyiWQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778731-a9ea1b31-55b6-4b4c-8968-6f53baacb979.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2LyiWQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778731-a9ea1b31-55b6-4b4c-8968-6f53baacb979.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Planner is an execution plan generator. It generates an execution plan based on the semantically valid AST that was validated by Validator, and then passes the plan to Optimizer to generate an optimized execution plan. Finally, Executor will execute the optimized plan. An execution plan is composed of a series of nodes (PlanNode).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-source-files"&gt;
  &lt;/a&gt;
  Structure of Source Files
&lt;/h2&gt;

&lt;p&gt;Here is the structure of source files for Planner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ match/
‚îú‚îÄ‚îÄ ngql/
‚îú‚îÄ‚îÄ plan/
‚îú‚îÄ‚îÄ Planner.cpp
‚îú‚îÄ‚îÄ Planner.h
‚îú‚îÄ‚îÄ PlannersRegister.cpp
‚îú‚îÄ‚îÄ PlannersRegister.h
‚îú‚îÄ‚îÄ SequentialPlanner.cpp
‚îú‚îÄ‚îÄ SequentialPlanner.h
‚îî‚îÄ‚îÄ test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Planner.h file defines the data structure of SubPlan and the interfaces of Planner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct SubPlan {
    // root and tail of a subplan.
    PlanNode*   root{nullptr};
    PlanNode*   tail{nullptr};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PlannersRegister is responsible for registering available planners. So far, SequentialPlanner, PathPlanner, LookupPlanner, GoPlanner, and MatchPlanner have been registered for Nebula Graph.&lt;/p&gt;

&lt;p&gt;The corresponding sentence of SequentialPlanner is SequentialSentences, which is a combined sentence composed of multiple sentences separated with semicolons. Each sentence can be a GO, LOOKUP, or MATCH statement. Therefore, SequentialPlanner generates multiple execution plans by calling other sentence planners and then calling Validator::appendPlan to connect the plans end to end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nx-dcDJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778879-98d71176-15c1-4aff-a7f1-9a03f7d49556.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nx-dcDJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136778879-98d71176-15c1-4aff-a7f1-9a03f7d49556.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The match/ directory defines the planners and connection strategies of SubPlans of some statements and clauses compatible with openCypher, such as MATCH, UNWIND, WITH, RETURN, WHERE, ORDER BY, SKIP, and LIMIT. SegmentsConnector uses an appropriate strategy, such as AddInput, addDependency, or innerJoinSegments, to connect the SubPlans end to end to generate a complete execution plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/match
‚îú‚îÄ‚îÄ AddDependencyStrategy.cpp
‚îú‚îÄ‚îÄ AddDependencyStrategy.h
‚îú‚îÄ‚îÄ AddInputStrategy.cpp
‚îú‚îÄ‚îÄ AddInputStrategy.h
‚îú‚îÄ‚îÄ CartesianProductStrategy.cpp
‚îú‚îÄ‚îÄ CartesianProductStrategy.h
‚îú‚îÄ‚îÄ CypherClausePlanner.h
‚îú‚îÄ‚îÄ EdgeIndexSeek.h
‚îú‚îÄ‚îÄ Expand.cpp
‚îú‚îÄ‚îÄ Expand.h
‚îú‚îÄ‚îÄ InnerJoinStrategy.cpp
‚îú‚îÄ‚îÄ InnerJoinStrategy.h
‚îú‚îÄ‚îÄ LabelIndexSeek.cpp
‚îú‚îÄ‚îÄ LabelIndexSeek.h
‚îú‚îÄ‚îÄ LeftOuterJoinStrategy.h
‚îú‚îÄ‚îÄ MatchClausePlanner.cpp
‚îú‚îÄ‚îÄ MatchClausePlanner.h
‚îú‚îÄ‚îÄ MatchPlanner.cpp
‚îú‚îÄ‚îÄ MatchPlanner.h
‚îú‚îÄ‚îÄ MatchSolver.cpp
‚îú‚îÄ‚îÄ MatchSolver.h
‚îú‚îÄ‚îÄ OrderByClausePlanner.cpp
‚îú‚îÄ‚îÄ OrderByClausePlanner.h
‚îú‚îÄ‚îÄ PaginationPlanner.cpp
‚îú‚îÄ‚îÄ PaginationPlanner.h
‚îú‚îÄ‚îÄ PropIndexSeek.cpp
‚îú‚îÄ‚îÄ PropIndexSeek.h
‚îú‚îÄ‚îÄ ReturnClausePlanner.cpp
‚îú‚îÄ‚îÄ ReturnClausePlanner.h
‚îú‚îÄ‚îÄ SegmentsConnector.cpp
‚îú‚îÄ‚îÄ SegmentsConnector.h
‚îú‚îÄ‚îÄ SegmentsConnectStrategy.h
‚îú‚îÄ‚îÄ StartVidFinder.cpp
‚îú‚îÄ‚îÄ StartVidFinder.h
‚îú‚îÄ‚îÄ UnionStrategy.h
‚îú‚îÄ‚îÄ UnwindClausePlanner.cpp
‚îú‚îÄ‚îÄ UnwindClausePlanner.h
‚îú‚îÄ‚îÄ VertexIdSeek.cpp
‚îú‚îÄ‚îÄ VertexIdSeek.h
‚îú‚îÄ‚îÄ WhereClausePlanner.cpp
‚îú‚îÄ‚îÄ WhereClausePlanner.h
‚îú‚îÄ‚îÄ WithClausePlanner.cpp
‚îú‚îÄ‚îÄ WithClausePlanner.h
‚îú‚îÄ‚îÄ YieldClausePlanner.cpp
‚îî‚îÄ‚îÄ YieldClausePlanner.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ngql/ directory defines the planners of nGQL statements such as GO, LOOKUP, and FIND PATH.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/ngql
‚îú‚îÄ‚îÄ GoPlanner.cpp
‚îú‚îÄ‚îÄ GoPlanner.h
‚îú‚îÄ‚îÄ LookupPlanner.cpp
‚îú‚îÄ‚îÄ LookupPlanner.h
‚îú‚îÄ‚îÄ PathPlanner.cpp
‚îî‚îÄ‚îÄ PathPlanner.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The plan/ directory defines seven categories, with a total of more than 100 plan nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/planner/plan
‚îú‚îÄ‚îÄ Admin.cpp
‚îú‚îÄ‚îÄ Admin.h
‚îú‚îÄ‚îÄ Algo.cpp
‚îú‚îÄ‚îÄ Algo.h
‚îú‚îÄ‚îÄ ExecutionPlan.cpp
‚îú‚îÄ‚îÄ ExecutionPlan.h
‚îú‚îÄ‚îÄ Logic.cpp
‚îú‚îÄ‚îÄ Logic.h
‚îú‚îÄ‚îÄ Maintain.cpp
‚îú‚îÄ‚îÄ Maintain.h
‚îú‚îÄ‚îÄ Mutate.cpp
‚îú‚îÄ‚îÄ Mutate.h
‚îú‚îÄ‚îÄ PlanNode.cpp
‚îú‚îÄ‚îÄ PlanNode.h
‚îú‚îÄ‚îÄ Query.cpp
‚îú‚îÄ‚îÄ Query.h
‚îî‚îÄ‚îÄ Scan.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an introduction to the purpose of plan nodes:&lt;/p&gt;

&lt;p&gt;Admin: For the nodes related to database administration.&lt;br&gt;
Algo: For the nodes related to the algorithms of paths, subgraphs, and so on.&lt;br&gt;
Logic: For the nodes related to logic controlling, such as loop and binary selection.&lt;br&gt;
Maintain: For the nodes related to schema.&lt;br&gt;
Mutate: For the nodes related to DML.&lt;br&gt;
Query: For the nodes related to query computation.&lt;br&gt;
Scan: For the nodes related to indexing and scanning.&lt;br&gt;
In the Executor phase, each PlanNode generates an executor, and each executor is responsible for a specific functionality.&lt;/p&gt;

&lt;p&gt;For example, here is the source code of the GetNeighbors node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static GetNeighbors* make(QueryContext* qctx,
                              PlanNode* input,
                              GraphSpaceID space,
                              Expression* src,
                              std::vector&amp;lt;EdgeType&amp;gt; edgeTypes,
                              Direction edgeDirection,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;VertexProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; vertexProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;EdgeProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; edgeProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;StatProp&amp;gt;&amp;gt;&amp;amp;&amp;amp; statProps,
                              std::unique_ptr&amp;lt;std::vector&amp;lt;Expr&amp;gt;&amp;gt;&amp;amp;&amp;amp; exprs,
                              bool dedup = false,
                              bool random = false,
                              std::vector&amp;lt;storage::cpp2::OrderBy&amp;gt; orderBy = {},
                              int64_t limit = -1,
                              std::string filter = "")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;GetNeighbors is the semantic encapsulation of the KV of an edge in the storage layer. Based on the source vertex of the given edge type, it will find the destination vertex of an edge. During the finding edge course, GetNeighbors can retrieve the properties of the edge (edgeProps). Additionally, the outgoing edge is stored with its source vertex in one partition (shard), so the properties of the source vertex (vertexProps) can be retrieved easily.&lt;/p&gt;

&lt;p&gt;Here is the source code of the Aggregate node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static Aggregate* make(QueryContext* qctx,
                               PlanNode* input, 
                               std::vector&amp;lt;Expression*&amp;gt;&amp;amp;&amp;amp; groupKeys = {},
                               std::vector&amp;lt;Expression*&amp;gt;&amp;amp;&amp;amp; groupItems = {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Aggregate node is for aggregate computing. It groups the table according to groupKeys, and does aggregate calculation on groupItems.&lt;/p&gt;

&lt;p&gt;Here is the source code of the Loop node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static Loop* make(QueryContext* qctx,
                      PlanNode* input,
                      PlanNode* body = nullptr,
                      Expression* condition = nullptr);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Loop node is for looping. It keeps on executing the PlanNode segement between the body and the next Start node until the value of condition is changed to false.&lt;/p&gt;

&lt;p&gt;Here is the source code of the InnerJoin node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static InnerJoin* make(QueryContext* qctx,
                           PlanNode* input,
                           std::pair&amp;lt;std::string, int64_t&amp;gt; leftVar,
                           std::pair&amp;lt;std::string, int64_t&amp;gt; rightVar,
                           std::vector&amp;lt;Expression*&amp;gt; hashKeys = {},
                           std::vector&amp;lt;Expression*&amp;gt; probeKeys = {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The InnerJoin node aims to perform inner join between two tables (Table or DataSet). leftVar and rightVar refer to the two tables respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#entry-functions"&gt;
  &lt;/a&gt;
  Entry Functions
&lt;/h2&gt;

&lt;p&gt;The entry function of Planner is Validator‚à∑toPlan().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Validator::toPlan() {
    auto* astCtx = getAstContext();
    if (astCtx != nullptr) {
        astCtx-&amp;gt;space = space_;
    }
    auto subPlanStatus = Planner::toPlan(astCtx);
    NG_RETURN_IF_ERROR(subPlanStatus);
    auto subPlan = std::move(subPlanStatus).value();
    root_ = subPlan.root;
    tail_ = subPlan.tail;
    VLOG(1) &amp;lt;&amp;lt; "root: " &amp;lt;&amp;lt; root_-&amp;gt;kind() &amp;lt;&amp;lt; " tail: " &amp;lt;&amp;lt; tail_-&amp;gt;kind();
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Calling getAstContext()
Firstly, getAstContext() is called to obtain the validated (by Validator) and rewritten AST contexts. The data structure of these contexts are defined in src/context/.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/context/ast
‚îú‚îÄ‚îÄ AstContext.h
‚îú‚îÄ‚îÄ CypherAstContext.h
‚îî‚îÄ‚îÄ QueryAstContext.h
struct AstContext {
    QueryContext*   qctx; // The context of each query request
    Sentence*       sentence; // The AST of each query statement
    SpaceInfo       space; // The current graph space
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CypherAstContext defines the AST contexts of the openCypher compatible statements. QueryAstContext defines the AST contexts of the nGQL statements.&lt;/p&gt;

&lt;p&gt;2.Calling Planner::toPlan(astCtx)&lt;br&gt;
Secondly, Planner‚à∑toPlan(astCtx) is called. Based on the AST contexts, it will find the registered planners for the query statement in PlannerMap, and then the corresponding execution plan is generated.&lt;/p&gt;

&lt;p&gt;Each plan is composed of a series of PlanNodes. There are two major relationships between PlanNodes, execution dependency and data dependency.&lt;/p&gt;

&lt;p&gt;Execution dependency: From the perspective of execution order, an execution plan is a directed acyclic graph, and the dependencies between nodes are determined when the plan is generated. In the execution phase, the executor generates an operator for each node, and starts scheduling from the root node. If the root node is found dependent on another node, a recursive calling is executed for the node that the root node depends on. The process repeats until it finds a node that is not dependent on any other nodes. And then, the node is executed. After the execution is done, the executor will continue to execute the nodes that depend on it until the root node is reached.&lt;br&gt;
Data dependency: The data dependency between nodes is like the execution dependency, that is, the output of the previous execution is the input of the next execution. Let‚Äôs take the InnerJoin node as an example. The inputs of InnerJoin may be the outputs of some nodes that are not adjacent to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdEkfDWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779022-35344f18-5334-4d2b-ac6b-4deadaccc3c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdEkfDWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779022-35344f18-5334-4d2b-ac6b-4deadaccc3c9.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(In the preceding figure, the solid lines represent the execution dependencies and the dashed lines represent the data dependencies.)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h2&gt;

&lt;p&gt;In this section, I will take MatchPlanner as an example to show how an execution plan is generated.&lt;/p&gt;

&lt;p&gt;Here is the example statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATCH (v:player)-[:like*2..4]-(v2:player)\
WITH v, v2.age AS age ORDER BY age WHERE age &amp;gt; 18\
RETURN id(v), age
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After validated by MatchValidator and rewritten, this statement will be output as a tree composed of contexts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMsMM-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779116-e5ee2fd9-bd24-4532-8b9f-cd63bad8dd7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMsMM-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779116-e5ee2fd9-bd24-4532-8b9f-cd63bad8dd7a.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE0YNJxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779268-49f6dc23-7e66-4f20-b96c-5290d50e22a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE0YNJxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779268-49f6dc23-7e66-4f20-b96c-5290d50e22a7.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each context corresponds to a clause or a subclause.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum class CypherClauseKind : uint8_t {
    kMatch,
    kUnwind,
    kWith,
    kWhere,
    kReturn,
    kOrderBy,
    kPagination,
    kYield,
};

struct CypherClauseContextBase : AstContext {
    explicit CypherClauseContextBase(CypherClauseKind k) : kind(k) {}
    virtual ~CypherClauseContextBase() = default;

    const CypherClauseKind  kind;
};

struct MatchClauseContext final : CypherClauseContextBase {
    MatchClauseContext() : CypherClauseContextBase(CypherClauseKind::kMatch) {}

    std::vector&amp;lt;NodeInfo&amp;gt;                       nodeInfos; // The vertices involved in the pattern
    std::vector&amp;lt;EdgeInfo&amp;gt;                       edgeInfos; // The edges involved in the pattern
    PathBuildExpression*                        pathBuild{nullptr}; // Constructing the expression of Path
    std::unique_ptr&amp;lt;WhereClauseContext&amp;gt;         where; // filter SubClause
    std::unordered_map&amp;lt;std::string, AliasType&amp;gt;* aliasesUsed{nullptr}; // The specified alias
    std::unordered_map&amp;lt;std::string, AliasType&amp;gt;  aliasesGenerated; // The generated alias
};
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, these steps are followed:&lt;/p&gt;

&lt;p&gt;1.Finding Planner for the Statement&lt;br&gt;
This is a MATCH statement, so MatchPlanner is found from the PlannerMap.&lt;/p&gt;

&lt;p&gt;2.Generating a Plan&lt;br&gt;
MatchPlanner::transform is called to generate an execution plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;StatusOr&amp;lt;SubPlan&amp;gt; MatchPlanner::transform(AstContext* astCtx) {
    if (astCtx-&amp;gt;sentence-&amp;gt;kind() != Sentence::Kind::kMatch) {
        return Status::Error("Only MATCH is accepted for match planner.");
    }
    auto* matchCtx = static_cast&amp;lt;MatchAstContext*&amp;gt;(astCtx);

    std::vector&amp;lt;SubPlan&amp;gt; subplans;
    for (auto&amp;amp; clauseCtx : matchCtx-&amp;gt;clauses) {
        switch (clauseCtx-&amp;gt;kind) {
            case CypherClauseKind::kMatch: {
                auto subplan = std::make_unique&amp;lt;MatchClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kUnwind: {
                auto subplan = std::make_unique&amp;lt;UnwindClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                auto&amp;amp; unwind = subplan.value().root;
                std::vector&amp;lt;std::string&amp;gt; inputCols;
                if (!subplans.empty()) {
                    auto input = subplans.back().root;
                    auto cols = input-&amp;gt;colNames();
                    for (auto col : cols) {
                        inputCols.emplace_back(col);
                    }
                }
                inputCols.emplace_back(unwind-&amp;gt;colNames().front());
                unwind-&amp;gt;setColNames(inputCols);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kWith: {
                auto subplan = std::make_unique&amp;lt;WithClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            case CypherClauseKind::kReturn: {
                auto subplan = std::make_unique&amp;lt;ReturnClausePlanner&amp;gt;()-&amp;gt;transform(clauseCtx.get());
                NG_RETURN_IF_ERROR(subplan);
                subplans.emplace_back(std::move(subplan).value());
                break;
            }
            default: { return Status::Error("Unsupported clause."); }
        }
    }

    auto finalPlan = connectSegments(astCtx, subplans, matchCtx-&amp;gt;clauses);
    NG_RETURN_IF_ERROR(finalPlan);
    return std::move(finalPlan).value();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A MATCH statement may be composed of multiple MATCH, UNWIND, WITH, and RETURNclauses. Therefore, with MatchPlanner::transform, the corresponding ClausePlanners are called directly to generate the corresponding SubPlans, and then the SubPlans are connected end to end by SegmentsConnector according to the appropriate connection strategies.&lt;/p&gt;

&lt;p&gt;In the example statement, the first clause is a MATCH clause: MATCH (v:player)-[:like*2..4]-(v2:player), so MatchClausePlanner::transform is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;StatusOr&amp;lt;SubPlan&amp;gt; MatchClausePlanner::transform(CypherClauseContextBase* clauseCtx) {
    if (clauseCtx-&amp;gt;kind != CypherClauseKind::kMatch) {
        return Status::Error("Not a valid context for MatchClausePlanner.");
    }

    auto* matchClauseCtx = static_cast&amp;lt;MatchClauseContext*&amp;gt;(clauseCtx);
    auto&amp;amp; nodeInfos = matchClauseCtx-&amp;gt;nodeInfos;
    auto&amp;amp; edgeInfos = matchClauseCtx-&amp;gt;edgeInfos;
    SubPlan matchClausePlan;
    size_t startIndex = 0;
    bool startFromEdge = false;

    NG_RETURN_IF_ERROR(findStarts(matchClauseCtx, startFromEdge, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(
        expand(nodeInfos, edgeInfos, matchClauseCtx, startFromEdge, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(projectColumnsBySymbols(matchClauseCtx, startIndex, matchClausePlan));
    NG_RETURN_IF_ERROR(appendFilterPlan(matchClauseCtx, matchClausePlan));
    return matchClausePlan;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The MatchClausePlanner::transform method performs these steps:&lt;/p&gt;

&lt;p&gt;Finding the starting vertex of the expansion.&lt;br&gt;
Currently, three strategies are available for finding the starting vertex. They are registered in startVidFinders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// MATCH(n) WHERE id(n) = value RETURN n
startVidFinders.emplace_back(&amp;amp;VertexIdSeek::make);

// MATCH(n:Tag{prop:value}) RETURN n
// MATCH(n:Tag) WHERE n.prop = value RETURN n
startVidFinders.emplace_back(&amp;amp;PropIndexSeek::make);

// seek by tag or edge(index)
// MATCH(n: tag) RETURN n
// MATCH(s)-[:edge]-&amp;gt;(e) RETURN e
startVidFinders.emplace_back(&amp;amp;LabelIndexSeek::make);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of these three strategies, VertexIdSeek is the best, which can locate the specific VID of the starting vertex. PropIndexSeek is the second, which is converted to an IndexScan that filters vertices by the property. LabelIndexSeek will be converted to an IndexScan.&lt;/p&gt;

&lt;p&gt;For each strategy of finding the starting vertex, the findStarts function will traverse all the nodes in the MATCH pattern until it finds a node that can be used as the node of the starting vertex, and generates corresponding PlanNodes for finding the starting vertex.&lt;/p&gt;

&lt;p&gt;For this example statement, LabelIndexScan is used and the starting vertex is v. Finally, an IndexScan node is generated and the indexes on the player tag are used.&lt;/p&gt;

&lt;p&gt;According to the starting vertex and the MATCH pattern, an expansion across multiple steps is executed.&lt;br&gt;
For the example statement, the MATCH pattern is (v:player)-[:like*1..2]-(v2:player). It means v is the starting vertex, and an expansion across one or two steps along the like edge is executed, and the end vertex is of the player tag.&lt;/p&gt;

&lt;p&gt;Here is how the expansion is executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Expand::doExpand(const NodeInfo&amp;amp; node, const EdgeInfo&amp;amp; edge, SubPlan* plan) {
    NG_RETURN_IF_ERROR(expandSteps(node, edge, plan));
    NG_RETURN_IF_ERROR(filterDatasetByPathLength(edge, plan-&amp;gt;root, plan));
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An expansion across multiple steps will generate a Loop node. The body of the Loop node is expandStep , which means a one-step expansion is executed from the given starting vertex and such an expansion generates a GetNeighbors node. The end vertex of each expansion is the starting vertex of the next expansion. It keeps looping until the maximum number of steps specified in the pattern is reached.&lt;/p&gt;

&lt;p&gt;To do the Step M expansion, the end vertex of the M-1 steps long path is used as the starting vertex of the expansion. By expanding one step more, the expansion result is constructed as a 1-step long path consisting of the source vertex of an edge and the edge itself. And then InnerJoin is performed to the 1-step long path and the previous M-1 steps long path to obtain a set of paths of M steps long.&lt;/p&gt;

&lt;p&gt;This set of paths are filtered to remove the paths with duplicate edges, which are not allowed for path expansion in openCypher. Finally, the end vertex is used as the starting vertex of the next expansion. Such expansions continue until the specified maximum number of steps is reached.&lt;/p&gt;

&lt;p&gt;After Loop, a UnionAllVersionVar node is generated. It combines the paths varying from 1-step to M-steps long that are generated from the execution of each loop of the body. The filterDatasetByPathLength() function will generate a Filter node to filter out all the paths that are shorter than the minimum number of steps specified in the MATCH pattern.&lt;/p&gt;

&lt;p&gt;After the expansion, the path looks like (v)-like-()-e-(v)-?, where the properties of the end vertex is still missing. At this point, generating a GetVertices node is needed. When the end vertex is obtained, an InnerJoin is performed to it and the M-steps long path, and then we will have a set of paths that meet the requirements of the MATCH pattern.&lt;/p&gt;

&lt;p&gt;More information about the expansion across multiple steps of MATCH will be introduced in a new article ‚ÄúVariable Length Pattern Match‚Äù.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Build Start node from first step
SubPlan loopBodyPlan;
PlanNode* startNode = StartNode::make(matchCtx_-&amp;gt;qctx);
startNode-&amp;gt;setOutputVar(firstStep-&amp;gt;outputVar());
startNode-&amp;gt;setColNames(firstStep-&amp;gt;colNames());
loopBodyPlan.tail = startNode;
loopBodyPlan.root = startNode;

// Construct loop body
NG_RETURN_IF_ERROR(expandStep(edge,
                              startNode,                // dep
                              startNode-&amp;gt;outputVar(),   // inputVar
                              nullptr,
                              &amp;amp;loopBodyPlan));

NG_RETURN_IF_ERROR(collectData(startNode,           // left join node
                               loopBodyPlan.root,   // right join node
                               &amp;amp;firstStep,          // passThrough
                               &amp;amp;subplan));
// Union node
auto body = subplan.root;

// Loop condition
auto condition = buildExpandCondition(body-&amp;gt;outputVar(), startIndex, maxHop);

// Create loop
auto* loop = Loop::make(matchCtx_-&amp;gt;qctx, firstStep, body, condition);

// Unionize the results of each expansion which are stored in the firstStep node
auto uResNode = UnionAllVersionVar::make(matchCtx_-&amp;gt;qctx, loop);
uResNode-&amp;gt;setInputVar(firstStep-&amp;gt;outputVar());
uResNode-&amp;gt;setColNames({kPathStr});

subplan.root = uResNode;
plan-&amp;gt;root = subplan.root; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A table is output and its column names are determined.&lt;br&gt;
All named symbols specified in the MATCH pattern are used as the column names to generate a table for the subsequent clauses, which will generate a Project node.&lt;/p&gt;

&lt;p&gt;The second clause in the example statement is WITH. It calls WithClause::transform to generate SubPlans.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH v, v2.age AS age ORDER BY age WHERE age &amp;gt; 18
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This WITH clause yields a table with two columns named v and v2.age. These columns are sorted by age, and then the table is used as a filter.&lt;/p&gt;

&lt;p&gt;The YIELD part will generate a Project node. The ORDER BY part will generate a Sort node. And the WHERE part will generate a Filter node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyvr35US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136780267-3e72afd6-5628-48cf-b548-3fae04724079.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyvr35US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136780267-3e72afd6-5628-48cf-b548-3fae04724079.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The third clause is RETURN. It will generate a Project node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RETURN id(v), age
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete execution plan of the example statement is shown as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE103zk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779429-419ce787-a28b-4669-b3e0-8ea675f5d64e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE103zk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/136779429-419ce787-a28b-4669-b3e0-8ea675f5d64e.png" alt="Nebula Graph Source Code Explained: Planner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the end of this article.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Laravel Configurations</title>
      <author>Bazeng</author>
      <pubDate>Fri, 22 Oct 2021 08:14:00 +0000</pubDate>
      <link>https://dev.to/bazeng/laravel-configurations-323l</link>
      <guid>https://dev.to/bazeng/laravel-configurations-323l</guid>
      <description>&lt;p&gt;All of the configuration files for the Laravel framework are stored in the config directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.&lt;/p&gt;

&lt;p&gt;It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different cache driver locally than you do on your production server.&lt;/p&gt;

&lt;p&gt;To make this a cinch, Laravel utilizes the DotEnv PHP library. In a fresh Laravel installation, the root directory of your application will contain a .env.example file that defines many common environment variables. During the Laravel installation process, this file will automatically be copied to .env.&lt;/p&gt;

&lt;p&gt;All of the variables listed in this file will be loaded into the $_ENV PHP super-global when your application receives a request. However, you may use the env helper to retrieve values from these variables in your configuration files.Here is a sample of the env file &lt;strong&gt;(Take note of how the env variable are retrieved in the config file using env() helper function)&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:aL/O2tKpBXjl1Vdc2EUj/3jzPF5E5/5/4XJjNY0cLB0=
APP_DEBUG=true
APP_URL=http://laravel-refresher-app.test

LOG_CHANNEL=stack
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laravel_refresher_app
DB_USERNAME=sail
DB_PASSWORD=password

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DRIVER=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=memcached

REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=null
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

SCOUT_DRIVER=meilisearch
MEILISEARCH_HOST=http://meilisearch:7700

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These values are then retrieved from various Laravel configuration files within the config directory using Laravel's env function.&lt;/p&gt;

&lt;p&gt;Here is an example of the broadcasting config file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' =&amp;gt; env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' =&amp;gt; [

        'pusher' =&amp;gt; [
            'driver' =&amp;gt; 'pusher',
            'key' =&amp;gt; env('PUSHER_APP_KEY'),
            'secret' =&amp;gt; env('PUSHER_APP_SECRET'),
            'app_id' =&amp;gt; env('PUSHER_APP_ID'),
            'options' =&amp;gt; [
                'cluster' =&amp;gt; env('PUSHER_APP_CLUSTER'),
                'useTLS' =&amp;gt; true,
            ],
        ],

        'ably' =&amp;gt; [
            'driver' =&amp;gt; 'ably',
            'key' =&amp;gt; env('ABLY_KEY'),
        ],

        'redis' =&amp;gt; [
            'driver' =&amp;gt; 'redis',
            'connection' =&amp;gt; 'default',
        ],

        'log' =&amp;gt; [
            'driver' =&amp;gt; 'log',
        ],

        'null' =&amp;gt; [
            'driver' =&amp;gt; 'null',
        ],

    ],

];

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;****Environment File Security&lt;br&gt;
Your .env file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt;If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_NAME="My Application"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**** Determining The Current Environment&lt;/p&gt;

&lt;p&gt;The current application environment is determined via the APP_ENV variable from your .env file. You may access this value via the environment method on the App facade(checkout my Laravel Facade Tutorial):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Illuminate\Support\Facades\App;
$environment = App::environment();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also pass arguments to the environment method to determine if the environment matches a given value. The method will return true if the environment matches any of the given values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (App::environment('local')) {
    // The environment is local
}

if (App::environment(['local', 'staging'])) {
    // The environment is either local OR staging...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#accessing-configuration-values"&gt;
  &lt;/a&gt;
  Accessing Configuration Values
&lt;/h4&gt;

&lt;p&gt;You may easily access your configuration values using the global config helper function from anywhere in your application. The configuration values may be accessed using "dot" syntax, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the name of the file &lt;/li&gt;
&lt;li&gt;and option you wish to access.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A default value may also be specified and will be returned if the configuration option does not exist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$value = config('app.timezone');
// Retrieve a default value if the configuration value does not exist...
$value = config('app.timezone', 'Asia/Seoul');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To set configuration values at runtime, pass an array to the config helper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config(['app.timezone' =&amp;gt; 'America/Chicago']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#configuration-caching"&gt;
  &lt;/a&gt;
  Configuration Caching
&lt;/h4&gt;

&lt;p&gt;To give your application a speed boost, you should cache all of your configuration files into a single file using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan config:cache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will combine all of the configuration options for your application into a single file which can be quickly loaded by the framework.&lt;/p&gt;

&lt;p&gt;You should typically run the php artisan config:cache command as part of your production deployment process. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; The command should not be run during local development as configuration options will frequently need to be changed during the course of your application's development.&lt;/p&gt;

&lt;p&gt;Once the configuration has been cached, the .env file will not be loaded; therefore, the env function will only return external, system level environment variables.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#debug-mode"&gt;
  &lt;/a&gt;
  Debug Mode
&lt;/h4&gt;

&lt;p&gt;The debug option in your config/app.php configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the APP_DEBUG environment variable, which is stored in your .env file.&lt;/p&gt;

&lt;p&gt;For local development, you should set the APP_DEBUG environment variable to true. In your production environment, this value should always be false. &lt;br&gt;
&lt;strong&gt;NB&lt;/strong&gt; If the variable is set to true in production, you risk exposing sensitive configuration values to your application's end users.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#maintenance-mode"&gt;
  &lt;/a&gt;
  Maintenance Mode
&lt;/h4&gt;

&lt;p&gt;When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to "disable" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application.&lt;/p&gt;

&lt;p&gt;If the application is in maintenance mode, a Symfony\Component\HttpKernel\Exception\HttpException instance will be thrown with a status code of 503.&lt;/p&gt;

&lt;p&gt;To enable maintenance mode, execute the down Artisan command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would like the Refresh HTTP header to be sent with all maintenance mode responses, you may provide the refresh option when invoking the down command. The Refresh header will instruct the browser to automatically refresh the page after the specified number of seconds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan down --refresh=15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also provide a retry option to the down command, which will be set as the Retry-After HTTP header's value, although browsers generally ignore this header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan down --retry=60
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bypassing-maintenance-mode"&gt;
  &lt;/a&gt;
  Bypassing Maintenance Mode
&lt;/h4&gt;

&lt;p&gt;Even while in maintenance mode, you may use the secret option to specify a maintenance mode bypass token:&lt;/p&gt;

&lt;p&gt;php artisan down --secret="1630542a-246b-4b66-afa1-dd72a4c43515"&lt;br&gt;
After placing the application in maintenance mode, you may navigate to the application URL matching this token and Laravel will issue a maintenance mode bypass cookie to your browser:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515"&gt;https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When accessing this hidden route, you will then be redirected to the / route of the application. Once the cookie has been issued to your browser, you will be able to browse the application normally as if it was not in maintenance mode.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#prerendering-the-maintenance-mode-view"&gt;
  &lt;/a&gt;
  Pre-Rendering The Maintenance Mode View
&lt;/h4&gt;

&lt;p&gt;If you utilize the php artisan down command during deployment, your users may still occasionally encounter errors if they access the application while your Composer dependencies or other infrastructure components are updating. This occurs because a significant part of the Laravel framework must boot in order to determine your application is in maintenance mode and render the maintenance mode view using the templating engine.&lt;/p&gt;

&lt;p&gt;For this reason, Laravel allows you to pre-render a maintenance mode view that will be returned at the very beginning of the request cycle. This view is rendered before any of your application's dependencies have loaded. You may pre-render a template of your choice using the down command's render option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan down --render="errors::503"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redirecting Maintenance Mode Requests&lt;br&gt;
While in maintenance mode, Laravel will display the maintenance mode view for all application URLs the user attempts to access. If you wish, you may instruct Laravel to redirect all requests to a specific URL. This may be accomplished using the redirect option. For example, you may wish to redirect all requests to the / URI:&lt;/p&gt;

&lt;p&gt;php artisan down --redirect=/&lt;br&gt;
Disabling Maintenance Mode&lt;br&gt;
To disable maintenance mode, use the up command:&lt;/p&gt;

&lt;p&gt;php artisan up&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You may customize the default maintenance mode template by defining your own template atresources/views/errors/503.blade.php.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#maintenance-mode-amp-queues"&gt;
  &lt;/a&gt;
  Maintenance Mode &amp;amp; Queues
&lt;/h4&gt;

&lt;p&gt;While your application is in maintenance mode, no queued jobs will be handled. The jobs will continue to be handled as normal once the application is out of maintenance mode.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives-to-maintenance-mode"&gt;
  &lt;/a&gt;
  Alternatives To Maintenance Mode
&lt;/h4&gt;

&lt;p&gt;Since maintenance mode requires your application to have several seconds of downtime, consider alternatives like Laravel Vapor and Envoyer to accomplish zero-downtime deployment with Laravel.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>How to get out of rat-race of learning every new technology (in freelancing).</title>
      <author>Saifullah Usmani</author>
      <pubDate>Fri, 22 Oct 2021 07:39:02 +0000</pubDate>
      <link>https://dev.to/saifullahusmani/how-to-get-out-of-rat-race-of-learning-every-new-technology-in-freelancing-2lgb</link>
      <guid>https://dev.to/saifullahusmani/how-to-get-out-of-rat-race-of-learning-every-new-technology-in-freelancing-2lgb</guid>
      <description>&lt;p&gt;Before reading if you are new to freelancing consider reading this post first: &lt;br&gt;
&lt;a href="https://dev.to/saifullahusmani/what-i-learned-in-freelancing-as-a-self-taught-developer-n2j"&gt;https://dev.to/saifullahusmani/what-i-learned-in-freelancing-as-a-self-taught-developer-n2j&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, my name is Saifullah Usmani. I am a Programmer and a Graphic Designer. I have been programming for 5 years now. And I have worked with several freelance clients.&lt;/p&gt;

&lt;p&gt;If it sounds like a thing that will add value in your life then consider following my page because I keep creating quality content for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ratrace"&gt;
  &lt;/a&gt;
  The rat-race:
&lt;/h2&gt;

&lt;p&gt;The rat-race is a word I am using means the loop in which you get stuck while working as a freelancer of learning every new technology coming in the world.&lt;br&gt;
Mostly startups and young/new entrepreneurs with little to no knowledge about tech, and different technologies used for development likes to work with all the latest/most-loved/near-future-best-technology/glamorous/aggressively-favoring-community's opinionated technologies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a developer who is new in freelance marketplaces has to follow this trend until your opinion means something.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-out-of-this-ratrace"&gt;
  &lt;/a&gt;
  How to get out of this rat-race:
&lt;/h2&gt;

&lt;p&gt;Getting out of this rat-race is sadly not easy because of the fact that more and more people are learning programming and their opinions in terms of proportion overcomes the opinion of developers with decades of experience. &lt;br&gt;
You have to understand that what you are stepping into(freelancing) is a business.&lt;br&gt;
And in business there is a lot of risk, so wise business people tend to listen to advices of professionals or only work with professionals, the rest of them go for trend.&lt;br&gt;
&lt;strong&gt;One thing you can do is go for great businesses or follow the trend&lt;/strong&gt;&lt;br&gt;
Now getting deals with great businesses is not easy as a developer with no strong portfolio so you have to follow the trend and work with the type of clients I referenced before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TIP #1:&lt;/strong&gt; Learn sales communication skill&lt;br&gt;
Well my powerful point was that I had learned sales communication skill(read the article link given above to learn more about it) which made me sound professional even when I was a beginner with no portfolio. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP #2: Become professional&lt;/strong&gt;&lt;br&gt;
Now you have to work with these clients no matter what until you are good enough and valued enough that you can reject clients instead of them rejecting you(not rudely, you can say NO in a beautiful way as well).&lt;br&gt;
&lt;strong&gt;You will ask I don't get orders how can I become professional with no experience.&lt;/strong&gt;&lt;br&gt;
It is simple, you don't have to have a real client to make a website(or any other thing you are involved in). Just be a client for yourself, order yourself to build something. And add that to your portfolio.&lt;br&gt;
Don't wanna do it? &lt;br&gt;
still no problem, you can work with little to no money for someone and have it on a portfolio.&lt;br&gt;
Still don't like the idea?&lt;br&gt;
Learn communication skill, get orders and do it yourself or let other people do it for you.(I discussed about this in-depth in the article I shared the link above)&lt;br&gt;
Still not satisfied?&lt;br&gt;
&lt;strong&gt;Well you have to understand that freelancing is not easy than a job but more harder.&lt;/strong&gt;&lt;br&gt;
In job you have someone to take care of your food but in freelancing you are on the top, which means you are alone and everything's beneath you. You are on an infinite terrain with no whispers or guide. No love or hate. It is just you and you.&lt;br&gt;
so follow the two advices I gave to build your portfolio.&lt;br&gt;
If it is an adventure then there must be some safety precautions, No?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safety-precautions-for-freelancing"&gt;
  &lt;/a&gt;
  Safety precautions for freelancing:
&lt;/h2&gt;

&lt;p&gt;1: Never leave your job for freelancing.&lt;br&gt;
2: Do it part-time.&lt;br&gt;
3: Have at least 6 months of expenses before starting freelancing full-time.&lt;br&gt;
4: If you have no responsibilities and you are  young just start freelancing.&lt;br&gt;
5: If you are older and cannot switch easily, consider learning financial education. Start investing, don't go for freelancing. Have enough from passive investing income so you can do whatever you like i.e freelancing. I recommend reading "Rich dad Poor dad" book. You will thank me later if you analyzed how powerful advice this is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-out-of-the-ratrace"&gt;
  &lt;/a&gt;
  Are you out of the rat-race?
&lt;/h2&gt;

&lt;p&gt;Yes if you are professional or can talk professionally you have to power to convince your client about which tech is best.&lt;br&gt;
I sometime refer clients because the tech that is best for you is not in my expertise.&lt;/p&gt;

&lt;p&gt;The tech you will learn in the  rat-race will be fruitful for you because you can work with clients from multiple backgrounds.&lt;/p&gt;

&lt;p&gt;I know python but I work with everything related to Django and DjangoRestFramework+Frontend(React and React native)&lt;/p&gt;

&lt;p&gt;I learned multiple technologies but I cannot change lanes every now and then.&lt;br&gt;
I know one tech and I am good in it so I convince client if that tech is best for them otherwise I just refer them to other sources.&lt;br&gt;
Or if I know the tech partially that they are interested in and that is best for their product I don't start learning that tech. Remember it is rat-race. Just reject the client or refer them. Remember that is the freedom freelancing has given you. Why don't take advantage of it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-leaving-ratrace-means-i-dont-learn-any-other-new-tech"&gt;
  &lt;/a&gt;
  Does leaving rat-race means I don't learn any other new tech?:
&lt;/h2&gt;

&lt;p&gt;Never.&lt;br&gt;
When I say no to something and yes to something it is not 0 or 1.&lt;br&gt;
You are not a computer who only understands yes or no.&lt;br&gt;
Remember this world is not 0 &lt;strong&gt;OR&lt;/strong&gt; 1.  It is 0 &lt;strong&gt;AND&lt;/strong&gt; 1.&lt;br&gt;
Between 0 and 1 there is infinite amount of numbers meaning possibilities. &lt;br&gt;
So if I say leave the trend of learning every new technology this doesn't mean taking a sacred vow of never accepting the industry's achievements of new tech.&lt;br&gt;
It is not sticking to one tech but learning the best tech or tech that can solve one problem greatly. &lt;br&gt;
In my case python it is general programming language which means I can do a lot with it. &lt;br&gt;
But if you are into php, you can only do desktop apps and website. So if you wanna go into ML or AI learning new tech is your next goal. &lt;br&gt;
But if for example you are into jquery, and it is dying you must switch to it's alternative or go for other framework or learn Nodejs to expand possibilites&lt;/p&gt;

&lt;p&gt;My point was to just limit the randomness and taking things into your hand, and if necessary expanding your possibilities by learning new tech.&lt;br&gt;
Remember this world is &lt;strong&gt;and&lt;/strong&gt; world  not &lt;strong&gt;or&lt;/strong&gt; world. There is always a new way, strategy or solution.&lt;/p&gt;

&lt;p&gt;Accept every change but never be accept change so much that you get lost in it.&lt;br&gt;
Change is like a illusion, people who don't accept it and people who accept it completely are doomed, but people to understands it succeeds. &lt;/p&gt;

&lt;p&gt;I hope I gave you a thing to think about for the rest of your day.&lt;br&gt;
I wanted to give you another perspective to thing from, and I think I have done the jo right.&lt;br&gt;
Let me know if you have any suggestion/query.&lt;/p&gt;

&lt;p&gt;Stay blessed and Happy. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me:
&lt;/h2&gt;

&lt;p&gt;Hire me: &lt;a href="https://www.fiverr.com/saifullah02"&gt;https://www.fiverr.com/saifullah02&lt;/a&gt; (For web development Purposes)&lt;br&gt;
My New Blog: &lt;a href="https://saifullahusmani.blogspot.com/"&gt;saifullahusmani.com&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Follow me here:&lt;/em&gt; &lt;a href="https://dev.to/saifullahusmani"&gt;https://dev.to/saifullahusmani&lt;/a&gt;&lt;br&gt;
&lt;em&gt;YouTube:&lt;/em&gt; &lt;a href="http://bit.ly/saifullahusmani"&gt;http://bit.ly/saifullahusmani&lt;/a&gt; (Programming Tutorials Coming Soon).&lt;br&gt;
&lt;em&gt;Discord:&lt;/em&gt; &lt;a href="https://discord.gg/AKyvy8Y"&gt;https://discord.gg/AKyvy8Y&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Facebook&lt;/em&gt;: &lt;a href="https://www.facebook.com/SaifullahUsmani693"&gt;https://www.facebook.com/SaifullahUsmani693&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Create an underline animation in CSS !</title>
      <author>Ustariz Enzo</author>
      <pubDate>Fri, 22 Oct 2021 07:22:06 +0000</pubDate>
      <link>https://dev.to/ziratsu/create-an-underline-animation-in-css--1kl1</link>
      <guid>https://dev.to/ziratsu/create-an-underline-animation-in-css--1kl1</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let's learn how to create an easy but impactful &lt;em&gt;underline animation&lt;/em&gt; in CSS so that your links look cooler!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8U6x-pDTguU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML Structure.
&lt;/h2&gt;

&lt;p&gt;You only need to add a title to your body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Animation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-the-title"&gt;
  &lt;/a&gt;
  2. Style the title.
&lt;/h2&gt;

&lt;p&gt;Start by choosing whichever font you want for your body. I'll use Arial here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, center the title in the middle of the page and style it a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, your H1 needs to have its width equal to its content, to do so, you can simply add :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inline&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXTC1Plk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nil3z08o00k8vz1xibkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXTC1Plk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nil3z08o00k8vz1xibkg.png" alt="Inspecter on Chrome"&gt;&lt;/a&gt;&lt;br&gt;
If it doesn't, &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-time-to-animate-it"&gt;
  &lt;/a&gt;
  3. Time to animate it!
&lt;/h2&gt;

&lt;p&gt;The animation will run with the pseudo-element after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To trigger the animation, you need to hover over the title. So, once you do (with "h1:hover"), the animation will happen ("::after"), like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You can also replace "scale" with "scaleX", but it will only provoke a minor difference.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You're done.&lt;/strong&gt; And yes, it's &lt;em&gt;that&lt;/em&gt; easy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPjWH_Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ppg186dpmrvswfsrjm.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice animation to use on links for instance, because it will allow users to understand that it's a link.&lt;/p&gt;

&lt;p&gt;Come and take a look at my fancy &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on my &lt;strong&gt;social medias&lt;/strong&gt;:&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/learn_to_create1"&gt;https://www.instagram.com/learn_to_create1&lt;/a&gt;&lt;br&gt;
TikTok : &lt;a href="https://www.tiktok.com/@learn_to_create"&gt;https://www.tiktok.com/@learn_to_create&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/Learn_To_Create"&gt;https://twitter.com/Learn_To_Create&lt;/a&gt;&lt;br&gt;
The Discord's link : &lt;a href="https://discord.gg/8DNmW2eK"&gt;https://discord.gg/8DNmW2eK&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Make sure to take a look at my &lt;strong&gt;online courses&lt;/strong&gt;:&lt;br&gt;
Front-End Courses : &lt;a href="https://www.front-end-school.com/"&gt;https://www.front-end-school.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon for other quick and easy tutorials !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo.&lt;/p&gt;

</description>
      <category>css</category>
      <category>animation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Freelance Marketplace App Like Upwork and Fiverr</title>
      <author>Oliver Jones</author>
      <pubDate>Fri, 22 Oct 2021 07:07:05 +0000</pubDate>
      <link>https://dev.to/oliverj82225769/freelance-marketplace-app-like-upwork-and-fiverr-3bcl</link>
      <guid>https://dev.to/oliverj82225769/freelance-marketplace-app-like-upwork-and-fiverr-3bcl</guid>
      <description>&lt;p&gt;Build the best freelance marketplace platform like Upwork and Fiverr with Code Brew Labs and get the team of skilled professionals that help transforming your dreams into reality by building a Fiverr and Upwork Clone as per your requirement.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Competitive self-play with Unity ML-Agents</title>
      <author>Joy</author>
      <pubDate>Fri, 22 Oct 2021 06:47:04 +0000</pubDate>
      <link>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</link>
      <guid>https://dev.to/joooyz/competitive-self-play-with-unity-ml-agents-1nh6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-overview-of-selfplay"&gt;
  &lt;/a&gt;
  An overview of self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openai.com/blog/competitive-self-play/"&gt;Competitive self-play&lt;/a&gt; involves training an agent against itself. It was used in famous systems such as &lt;a href="https://deepmind.com/research/case-studies/alphago-the-story-so-far"&gt;AlphaGo&lt;/a&gt; and &lt;a href="https://openai.com/blog/dota-2/"&gt;OpenAI Five (Dota 2)&lt;/a&gt;. By playing increasingly stronger versions of itself, agents can discover new and better strategies.&lt;/p&gt;

&lt;p&gt;In this post, we walk through using competitive self-play in Unity ML-Agents to train agents to play volleyball. This article is also part 5 of the series '&lt;strong&gt;&lt;a href="https://dev.to/joooyz/a-hands-on-introduction-to-deep-reinforcement-learning-using-unity-ml-agents-4f8i"&gt;A hands-on introduction to deep reinforcement learning using Unity ML-Agents&lt;/a&gt;&lt;/strong&gt;'. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-selfplay"&gt;
  &lt;/a&gt;
  The case for self-play
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;We previously trained agents using PPO&lt;/a&gt; with the following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Symmetric environment&lt;/li&gt;
&lt;li&gt;Both agents shared the same policy&lt;/li&gt;
&lt;li&gt;Observations: velocity, rotation, and position vectors of the agent and ball&lt;/li&gt;
&lt;li&gt;Reward function: +1 for hitting the ball over the net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This resulted in agents that were able to successfully volley the ball back-and-forth after ~20M training steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5M0puDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmoyaw03cwnheu96dk3f.gif" alt="PPO trained agents" title="Trained agents playing volleyball"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that the agents make 'easy' passes by aiming the ball towards the centre of the court. This is because we set the reward function to incentivize keeping the ball in play.&lt;/p&gt;

&lt;p&gt;Our aim now is to train &lt;em&gt;competitive&lt;/em&gt; agents that are rewarded for &lt;em&gt;winning&lt;/em&gt; (i.e. landing the ball in the opponent's court). We expect this will lead to agents that learn interesting strategies and make passes that are harder to return.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-setup-in-mlagents"&gt;
  &lt;/a&gt;
  Self-play setup in ML-Agents
&lt;/h2&gt;

&lt;p&gt;To follow along this section, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity ML-Agents Release 18+ (&lt;a href="https://dev.to/joooyz/an-introduction-to-machine-learning-with-unity-ml-agents-3an5"&gt;getting started instructions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The latest version of the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball repo&lt;/a&gt; (or, you can use your own volleyball environment if you've been following the tutorial series)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-put-the-agents-on-opposing-teams"&gt;
  &lt;/a&gt;
  Step 1: Put the agents on opposing teams
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the Ultimate Volleyball environment in Unity&lt;/li&gt;
&lt;li&gt;Open &lt;strong&gt;Assets&lt;/strong&gt; &amp;gt; &lt;strong&gt;Prefabs&lt;/strong&gt; &amp;gt; &lt;code&gt;2PVolleyballArea.prefab&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select either the &lt;code&gt;PurpleAgent&lt;/code&gt; or &lt;code&gt;BlueAgent&lt;/code&gt;  object&lt;/li&gt;
&lt;li&gt;In Inspector &amp;gt; Behavior Parameters, set &lt;code&gt;TeamId&lt;/code&gt; to 1 (the actual value doesn't matter, as long as the PurpleAgent and BlueAgent have different Team ID's):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpYnme_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bofa2dc0j4uagfiybfiw.jpg" alt="ML-Agents Team ID" title="Team ID setting in ML-Agents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-set-up-the-selfplay-reward-function"&gt;
  &lt;/a&gt;
  Step 2:  Set up the self-play reward function
&lt;/h3&gt;

&lt;p&gt;Our previous reward function was +1 for hitting the ball over the net.&lt;/p&gt;

&lt;p&gt;For self-play, we'll switch to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;+1 to the winning team&lt;/li&gt;
&lt;li&gt;-1 to the losing team&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;VolleyballEnvController.cs&lt;/code&gt; and add the rewards to the &lt;code&gt;ResolveEvent()&lt;/code&gt; method:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitBlueGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// blue wins&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor blue&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blueGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HitPurpleGoal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// purple wins&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddReward&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// turn floor purple&lt;/span&gt;
    &lt;span class="nf"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;GoalScoredSwapGroundMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;volleyballSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purpleGoalMaterial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RenderersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// end episode&lt;/span&gt;
    &lt;span class="n"&gt;blueAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;purpleAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EndEpisode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;ResetScene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Remove &lt;code&gt;AddReward&lt;/code&gt; from the other cases&lt;/li&gt;
&lt;li&gt;You can also set penalties for hitting the ball out of the court (in &lt;code&gt;case Event.HitOutOfBounds&lt;/code&gt;). From my experience, this may take longer for the agents to learn to hit the ball.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-selfplay-training-parameters-to-the-trainer-config"&gt;
  &lt;/a&gt;
  Step 3: Add self-play training parameters to the trainer config
&lt;/h3&gt;

&lt;p&gt;Create a new &lt;code&gt;.yaml&lt;/code&gt; file and copy in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;behaviors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Volleyball&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;trainer_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ppo&lt;/span&gt;
    &lt;span class="na"&gt;hyperparameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;batch_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2048&lt;/span&gt;
      &lt;span class="na"&gt;buffer_size&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20480&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.0002&lt;/span&gt;
      &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.003&lt;/span&gt;
      &lt;span class="na"&gt;epsilon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;
      &lt;span class="na"&gt;lambd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.93&lt;/span&gt;
      &lt;span class="na"&gt;num_epoch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
      &lt;span class="na"&gt;learning_rate_schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;constant&lt;/span&gt;
    &lt;span class="na"&gt;network_settings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;normalize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;hidden_units&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;
      &lt;span class="na"&gt;num_layers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
      &lt;span class="na"&gt;vis_encode_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simple&lt;/span&gt;
    &lt;span class="na"&gt;reward_signals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;extrinsic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;gamma&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.96&lt;/span&gt;
        &lt;span class="na"&gt;strength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
    &lt;span class="na"&gt;keep_checkpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
    &lt;span class="na"&gt;max_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80000000&lt;/span&gt;
    &lt;span class="na"&gt;time_horizon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
    &lt;span class="na"&gt;summary_freq&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
    &lt;span class="na"&gt;self_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;play_against_latest_model_ratio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;
      &lt;span class="na"&gt;save_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
      &lt;span class="na"&gt;swap_steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
      &lt;span class="na"&gt;team_change&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaining-selfplay-parameters"&gt;
  &lt;/a&gt;
  Explaining self-play parameters
&lt;/h3&gt;

&lt;p&gt;During self-play, one of the agents will be set as the &lt;em&gt;learning agent&lt;/em&gt; and the other as the fixed policy &lt;em&gt;opponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;save_steps=20000&lt;/code&gt; steps, a snapshot of the learning agent's existing policy will be taken. Up to &lt;code&gt;window=10&lt;/code&gt; snapshots will be stored. When a new snapshot is taken, the oldest one is discarded. These past versions of itself become the 'opponents' that the learning agent trains against. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sDCCuqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq14ashtaitzhhgchknw.jpg" alt="Self-play hyperparameters" title="Self-play hyperparameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;swap_steps=10000&lt;/code&gt; steps, the opponent's policy will be swapped with a different snapshot. The snapshot is sampled with a probability of &lt;code&gt;play_against_latest_model_ratio=0.5&lt;/code&gt; that it will play against the &lt;strong&gt;latest&lt;/strong&gt; &lt;strong&gt;policy&lt;/strong&gt; (i.e. the &lt;strong&gt;strongest&lt;/strong&gt; opponent). This helps to prevent &lt;strong&gt;overfitting&lt;/strong&gt; to a single opponent playstyle.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;team_change=100000&lt;/code&gt; steps, the learning agent and opponent teams will be switched. &lt;/p&gt;

&lt;p&gt;Feel free to play around with these default hyperparameters (more information available in the official &lt;a href="https://github.com/Unity-Technologies/ml-agents/blob/main/docs/Training-Configuration-File.md#self-play"&gt;ML-Agents documentation&lt;/a&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-with-selfplay"&gt;
  &lt;/a&gt;
  Training with self-play
&lt;/h2&gt;

&lt;p&gt;Training with self-play in ML-Agents is done the same way as any other form of training:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate the virtual environment containing your installation of¬†&lt;code&gt;ml-agents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to your working directory, and run in the terminal:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;mlagents-learn &amp;lt;path to config file&amp;gt; --run-id=VB_1 --time-scale=1&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you see the message "Start training by pressing the Play button in the Unity Editor", click¬†‚ñ∂¬†within the Unity GUI.&lt;/li&gt;
&lt;li&gt;In another terminal window, run &lt;code&gt;tensorboard --logdir&lt;/code&gt; results from your working directory to observe the training process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#selfplay-training-results"&gt;
  &lt;/a&gt;
  Self-play training results
&lt;/h2&gt;

&lt;p&gt;In a stable training run, you should see the ELO gradually increase. &lt;/p&gt;

&lt;p&gt;In the diagram below, the three inflexion points correspond to the agent:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learning to serve &lt;/li&gt;
&lt;li&gt;Learning to return the ball&lt;/li&gt;
&lt;li&gt;Learning more competitive shots&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIdtbzri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szk3gdbjlwmodfdki1j5.jpg" alt="Tensorboard results" title="ELO and Episode Length"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joooyz/how-to-train-agents-to-play-volleyball-using-deep-reinforcement-learning-417b"&gt;Compared to our previous training results&lt;/a&gt;, I found that even after ~80M steps, the agents trained using self-play don't serve or return the ball as reliably. However, they do learn to hit some interesting shots, like hitting the ball towards the edge of the court:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcCgN1o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mejlpcsil20efq9faj4.gif" alt="Trained agents using self-play playing volleyball" title="Volleyball agents trained using PPO self-play after 80M steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you discover any other interesting playstyles, let me know!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! I hope you found this post useful.&lt;/p&gt;

&lt;p&gt;If you have any feedback or questions, feel free to post them on the &lt;a href="https://github.com/CoderOneHQ/ultimate-volleyball"&gt;Ultimate Volleyball Repo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>unity3d</category>
    </item>
  </channel>
</rss>
