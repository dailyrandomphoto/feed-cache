<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Caching - 101</title>
      <author>Uzair</author>
      <pubDate>Wed, 03 Nov 2021 19:02:36 +0000</pubDate>
      <link>https://dev.to/uzairali10/caching-101-3agp</link>
      <guid>https://dev.to/uzairali10/caching-101-3agp</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/uzairali10/load-balancer-101-4jl9"&gt;Load Balancing&lt;/a&gt; helps you to scale horizontally by increasing resources (increasing number of servers) while caching enables you to make better use the existing resource you have.&lt;/p&gt;

&lt;p&gt;Caching works on the principle that recently requested data is likely to be requested again&lt;/p&gt;

&lt;p&gt;Cache is a hardware or a software component which helps in serving the data which is either frequently requested or is resource expensive to compute, So cache stores the response and serves it when asked to do so.&lt;/p&gt;

&lt;p&gt;Caches can exist at all levels in architecture, but are often found at the level nearest to the client where they are implemented to return data quickly without taxing downstream levels.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;p&gt;A client requests image from a server, Initially the server looks through DB for the image and return it to client but however there are the following possibilities&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The response can be cached in server side (Eg: in reverse proxy)&lt;/li&gt;
&lt;li&gt;The response can be cached client side (Eg: Browser cache, Forward proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way we are saving the copy of response and client do not have to request the server frequently for the same data, This even decrease the time to load data for client and even decreases load for the server.&lt;/p&gt;

&lt;p&gt;If the response for a particular request is saved in cache it is called &lt;code&gt;cache hit&lt;/code&gt; or else it is called &lt;code&gt;cache miss&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improves read Performance (aka Latency)&lt;/li&gt;
&lt;li&gt;Reduce the Load (aka Throughput)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increase complexity of System&lt;/li&gt;
&lt;li&gt;Consumes Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cache-invalidation-amp-eviction"&gt;
  &lt;/a&gt;
  Cache Invalidation &amp;amp; Eviction
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#cache-invalidation"&gt;
  &lt;/a&gt;
  Cache Invalidation:
&lt;/h2&gt;

&lt;p&gt;Updating the cached data is known as cache invalidation. The most common technique used for this purpose is known as TTL (Time To live). A certain time period is defined for cache to live in the memory and after that interval of time cache expires. And new data is requested from server&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-eviction"&gt;
  &lt;/a&gt;
  Cache Eviction:
&lt;/h2&gt;

&lt;p&gt;As cache memory is limited so we have to decide which cached data to keep or not.&lt;/p&gt;

&lt;p&gt;Eg: our storage is capable of only storing only 100 keys and currently all of them are filled and now we want to add an additional key so we have to kick out an older cached key so that room for a new one can be made. This process is know as cache Eviction.&lt;/p&gt;

&lt;p&gt;Below are some parameters considered while Eviction of a cached key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FIFO: First In First Out, In this the oldest cached key gets removed so that latest one can be occupied.&lt;/li&gt;
&lt;li&gt;LRU: Least Recently Used, In this the cached key which hasn't been used in recent time and was used a long time ago gets discarded.&lt;/li&gt;
&lt;li&gt;LFU: Least Frequently Used, In this the cached is used the most less number of times is discarded. Eg: there are 3 keys k1, k2, k3 and they are used 7,3,9 times respectively so k3 will be discarded first as it is used only 3 times which is the least number.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cache-patterns"&gt;
  &lt;/a&gt;
  Cache Patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cache-aside-pattern"&gt;
  &lt;/a&gt;
  Cache Aside pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbwp9R93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt6k16ihp7hd95qognzs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbwp9R93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt6k16ihp7hd95qognzs.jpg" alt="Image description" width="445" height="549"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is the most commonly used technique in this the cache does not interact with DB or Server it only interacts with Application.&lt;/p&gt;

&lt;p&gt;When a client request some data through application, Application looks for it in cache if found then returns it or else request the same to server and then returns to client and also caches it.&lt;/p&gt;

&lt;p&gt;Here there was no interaction between cache and server or DB &lt;/p&gt;

&lt;p&gt;When the data in DB changes corresponding data in cached memory also have to be modified either through some code by application or through TTL method or combination of both can be used&lt;/p&gt;

&lt;p&gt;Pros of cache aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caches only what is needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache Miss are Expensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-through-pattern"&gt;
  &lt;/a&gt;
  Read Through pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7Ok-RZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hatvrac2wge2kbfan7g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7Ok-RZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hatvrac2wge2kbfan7g.jpg" alt="Image description" width="485" height="539"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the cache resides between application and server, in this case application never interacts with server or cache.&lt;/p&gt;

&lt;p&gt;When a client request some data it is first looked by the application in cache and if not found the cache itself request data to server and returns to the application.&lt;/p&gt;

&lt;p&gt;Pros of cache aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caches only what is needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache Miss are Expensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#write-through-pattern"&gt;
  &lt;/a&gt;
  Write Through pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6KN1wYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi79b0ruuicotj38pqnk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6KN1wYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi79b0ruuicotj38pqnk.jpg" alt="Image description" width="495" height="228"&gt;&lt;/a&gt;     &lt;/p&gt;

&lt;p&gt;The write-through strategy adds data or updates data in the cache whenever data is written to the database. Because the data in the cache is updated every time it's written to the database, the data in the cache is always current.&lt;/p&gt;

&lt;p&gt;Pros of Write Through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Up to Date Data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writes are Expensive are Expensive&lt;/li&gt;
&lt;li&gt;There is a chance that we may add certain data to cache that no one ever reads&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#write-behind-pattern"&gt;
  &lt;/a&gt;
  Write Behind pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YEQXpRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr6hujk16stfe9ykl0mg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YEQXpRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr6hujk16stfe9ykl0mg.jpg" alt="Image description" width="495" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is similar to write through and just instead of updating cache instantaneously it waits for some time and sends requests in bulk&lt;/p&gt;

&lt;p&gt;Pros of Write Through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No Write penalty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Lack of consistency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-do-cache-resides"&gt;
  &lt;/a&gt;
  Where Do Cache Resides
&lt;/h2&gt;

&lt;p&gt;Depending on the pattern used for caching and some other parameters cache can be embedded at various levels such as.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client Side (Like Browser cache or OS Cache)&lt;/li&gt;
&lt;li&gt;Forward proxy&lt;/li&gt;
&lt;li&gt;Reverse proxy&lt;/li&gt;
&lt;li&gt;Application layer itself&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>systems</category>
      <category>performance</category>
      <category>redis</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Deno script for adding Tailwind CSS to Next.js project in 4 seconds</title>
      <author>Max</author>
      <pubDate>Wed, 03 Nov 2021 19:01:51 +0000</pubDate>
      <link>https://dev.to/comingalive/deno-script-for-adding-tailwind-css-to-nextjs-project-in-4-seconds-24hg</link>
      <guid>https://dev.to/comingalive/deno-script-for-adding-tailwind-css-to-nextjs-project-in-4-seconds-24hg</guid>
      <description>&lt;p&gt;In your project folder run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deno run --allow-write --allow-read --allow-run https://denos.xyz/add-tailwind-to-next.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default it uses yarn. If you don't have yarn, it will use npm. You can force it by adding --npm after the module name.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>deno</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Nailing Your Next Flutter Interview</title>
      <author>Ayodeji Ogundairo</author>
      <pubDate>Wed, 03 Nov 2021 18:41:38 +0000</pubDate>
      <link>https://dev.to/xclusivecyborg/nailing-your-next-flutter-interview-2c8o</link>
      <guid>https://dev.to/xclusivecyborg/nailing-your-next-flutter-interview-2c8o</guid>
      <description>&lt;p&gt;So I'd like you to think about it, you love building with flutter right? and flutter's like your best friend just like me. What if there's an opportunity for you to get your dream job and then the interview doesn't go as planned due to the "tough" questions that you were asked? Well, the questions are not so tough and this article focuses on answering some of the questions around flutter interviews. &lt;/p&gt;

&lt;p&gt;If you are interviewing for a mid-level role majorly, these are some of the questions that you will be asked. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#interview-questions"&gt;
  &lt;/a&gt;
  Interview Questions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. What is the difference between Stateful and Stateless widgets?&lt;/strong&gt; Stateful widgets are mutable widgets which means that their state can change over time. Stateful widgets for example are used when the part of the UI must change dynamically during runtime. Stateless widgets are the opposite of stateful widgets and they only get called once during runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Is Dart a single-threaded language or a multi-threaded language?&lt;/strong&gt; Dart is a single-threaded language and it makes use of Isolates to run tasks or processes concurrently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. What are Dart Isolates?&lt;/strong&gt; Since dart is a single-threaded programming language, it uses &lt;a href="https://www.youtube.com/watch?v=vl_AaCgudcY&amp;amp;t=4s"&gt;Isolates&lt;/a&gt; to run the concurrent tasks. Isolates are separate parts of your app, they have their own event loops, event queues, and memories. They perform tasks isolated from the main thread and they communicate with the main thread when these tasks are done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. What are event loops in Dart?&lt;/strong&gt; Dart uses  &lt;a href="https://www.youtube.com/watch?v=vl_AaCgudcY&amp;amp;t=4s"&gt;event loops&lt;/a&gt;  to handle events asynchronously. Event loops make asynchronous programming possible in dart. Being a single-threaded language, it is impossible for dart to predict when certain functions will happen in your app and because of this, dart runs an event loop to carry out events. It grabs events or functions from the event queue in your app, processes it and picks the next one, and processes it until the event queue is empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. How does flutter take care of garbage in memory?&lt;/strong&gt; In flutter, Dart uses garbage collection to take care of garbage in memory. Garbage collection is the process of searching dart objects that are dynamically allocated live in a portion of memory to locate and reclaim, regions of "dead" memory—memory that is no longer being used by an application. This process allows the memory to be re-used and minimizes the risk of an application running out of memory, causing it to crash. Garbage collection is performed automatically by the Dart VM (Dart Virtual Machine – It is a piece of software that directly executes dart code). In DevTools, you can perform garbage collection on demand by clicking the GC button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.What is MVVM architecture?&lt;/strong&gt;  &lt;a href="https://medium.com/flutterworld/flutter-mvvm-architecture-f8bed2521958"&gt;MVVM&lt;/a&gt;  which is an abbreviation for MODEL-VIEW-VIEW-MODEL is an architectural pattern that uses property-based data binding to establish a connection between the View-Model and the View and drives the View changes through the View-Model. This architectural design separates your UI from your logic and it helps your app with scalability and maintainability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; Model:&lt;/strong&gt; This component stores application data and it works with the view-model to get and store data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; View:&lt;/strong&gt; This is your user interface and it houses components that are visible to the screen. It provides the visualization to data stores in the model and offers interaction to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; View-Model:&lt;/strong&gt; The view model handles the logic behind your app. It houses the methods, function calls, and other factors that can help to maintain the actual state of the view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. How do you manage Scalability in a Flutter app?&lt;/strong&gt; Scalability in flutter ensures you have the right architecture in place in other to be able to add new features to your app without breaking the rest of it. You can manage scalability by using a good software architectural design e.g. MVVM.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Why is null safety important?&lt;/strong&gt;  &lt;a href="https://dart.dev/null-safety"&gt;Null safety&lt;/a&gt;  in dart ensures nun-nullable fields in your app are not assigned null values. This is important as it helps your app runs faster and it also prevents your app from crashing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. How do you migrate your app to null safety?&lt;/strong&gt;  To migrate your app to null safety, you can open your app in the terminal and run $‘dart migrate’. It is also essential to check the dependencies of your app and ensure they support null safety before migrating to null safety. To do this, you can run $’ pub outdated’ on your terminal and check for the dependencies that need to be upgraded then update them before migrating your app. You can also watch this &lt;a href="https://www.youtube.com/watch?v=bvq7wbn4VAA"&gt;video&lt;/a&gt; for more clarification.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Getting your dream tech job goes beyond your technical skills and it is quite important for you to be inclined about the theoretical background of your preferred programming language and its framework. &lt;br&gt;
I hope this article was helpful and I hope you nail your next flutter interview. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>interview</category>
      <category>dart</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Overview of AWS : Machine learning Services| AWS WhitePaper Summary</title>
      <author>‪Karim Negm‬‏</author>
      <pubDate>Wed, 03 Nov 2021 18:21:32 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/overview-of-aws-machine-learning-services-aws-whitepaper-summary-33h5</link>
      <guid>https://dev.to/awsmenacommunity/overview-of-aws-machine-learning-services-aws-whitepaper-summary-33h5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#machine-learning-services"&gt;
  &lt;/a&gt;
  Machine Learning services
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5xRAej2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tvxhqw6gvj2eomwziv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5xRAej2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tvxhqw6gvj2eomwziv5.png" alt="Image description" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Augmented AI (Amazon A2I)&lt;/strong&gt; is a machine learning service that makes it easy to build the workflows required for human review. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon CodeGuru&lt;/strong&gt; is a developer tool that provides intelligent recommendations to improve code quality and identify an application’s most expensive lines of code. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodeGuru Reviewer&lt;/strong&gt; uses machine learning and automated reasoning to identify critical issues, security vulnerabilities, and hard-to-find bugs during application development and provides recommendations to improve code quality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodeGuru Profiler&lt;/strong&gt; helps developers find an application’s most expensive lines of code by helping them understand the runtime behavior of their applications, identify and remove code inefficiencies, improve performance, and significantly decrease compute costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Comprehend&lt;/strong&gt; is a natural language processing (NLP) service that uses machine learning to find insights and relationships in a text. No machine learning experience is required.&lt;br&gt;
Amazon Comprehend uses machine learning to help you uncover the insights and relationships in your unstructured data. The service identifies the language of the text; extracts key phrases, places, people, brands, or events; understands how positive or negative the text is; analyzes text using tokenization and parts of speech; and automatically organizes a collection of text files by topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon DevOps Guru&lt;/strong&gt; is a Machine Learning (ML) powered service that makes it easy to improve an application’s operational performance and availability. DevOps Guru detects behaviors that deviate from normal operating patterns so you can identify operational issues long before they impact your customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Elastic Inference&lt;/strong&gt; allows you to attach low-cost GPU-powered acceleration to Amazon EC2 and Amazon SageMaker instances to reduce the cost of running deep learning inference by up to 75%. Amazon Elastic Inference supports TensorFlow, Apache MXNet, PyTorch, and ONNX models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Forecast&lt;/strong&gt; is a fully managed service that uses machine learning to deliver highly accurate forecasts.&lt;br&gt;
Amazon Forecast is a fully managed service, so there are no servers to provision, and no machine learning models to build, train, or deploy. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Fraud Detector&lt;/strong&gt; is a fully managed service that uses machine learning (ML) and more than 20 years of fraud detection expertise from Amazon, to identify potentially fraudulent activity so customers can catch more online fraud faster. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon HealthLake&lt;/strong&gt; is a HIPAA-eligible service that healthcare providers, health insurance companies, and pharmaceutical companies can use to store, transform, query, and analyze large-scale health data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Kendra&lt;/strong&gt; is an intelligent search service powered by machine learning. Kendra reimagines enterprise search for your websites and applications so your employees and customers can easily find the content they are looking for, even when it’s scattered across multiple locations and content repositories within your organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lex&lt;/strong&gt; is a service for building conversational interfaces into any application using voice and text. Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout&lt;/strong&gt; for Equipment analyzes the data from the sensors on your equipment (e.g. pressure in a generator, flow rate of a compressor, revolutions per minute of fans), to automatically train a machine learning model based on just your data, for your equipment – with no ML expertise required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout for Metrics&lt;/strong&gt; uses machine learning (ML) to automatically detect and diagnose anomalies in business and operational data, such as a sudden dip in sales revenue or customer acquisition rates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout for Vision&lt;/strong&gt; is a machine learning (ML) service that spots defects and anomalies in visual representations using computer vision (CV). With Amazon Lookout for Vision, manufacturing companies can increase quality and reduce operational costs by quickly identifying differences in images of objects at scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Monitron&lt;/strong&gt; is an end-to-end system that uses machine learning (ML) to detect abnormal behavior in industrial machinery, enabling you to implement predictive maintenance and reduce unplanned downtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Personalize&lt;/strong&gt; is a machine learning service that makes it easy for developers to create individualized recommendations for customers using their applications.&lt;br&gt;
Amazon Personalize is like having your own Amazon.com machine learning personalization team at your disposal, 24 hours a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Polly&lt;/strong&gt; is a service that turns text into lifelike speech. Polly lets you create applications that talk, enabling you to build entirely new categories of speech-enabled products. Polly is an Amazon artificial intelligence (AI) service that uses advanced deep learning technologies to synthesize speech that sounds like a human voice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Rekognition&lt;/strong&gt; makes it easy to add image and video analysis to your applications using proven, highly scalable, deep learning technology that requires no machine learning expertise to use. With Amazon Rekognition, you can identify objects, people, text, scenes, and activities in images and videos, as well as detect any inappropriate content. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GqSdR2vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfwjh41yekm0askwu5kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GqSdR2vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfwjh41yekm0askwu5kv.png" alt="Image description" width="720" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker&lt;/strong&gt; is a fully-managed service that enables developers and data scientists to quickly and easily build, train, and deploy machine learning models at any scale. SageMaker removes all the barriers that typically slow down developers who want to use machine learning.&lt;br&gt;
SageMaker removes the complexity that holds back developer success with each of these steps. SageMaker includes modules that can be used together or independently to build, train, and deploy your machine learning models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker Ground Truth&lt;/strong&gt; helps you build highly accurate training datasets for machine learning quickly. SageMaker Ground Truth offers easy access to public and private human labelers and provides them with built-in workflows and interfaces for common labeling tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Textract&lt;/strong&gt; is a service that automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Transcribe&lt;/strong&gt; is an automatic speech recognition (ASR) service that makes it easy for developers to add speech-to-text capability to their applications. Using the Amazon Transcribe API, you can analyze audio files stored in Amazon S3 and have the service return a text file of the transcribed speech. You can also send a live audio stream to Amazon Transcribe and receive a stream of transcripts in real time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Translate&lt;/strong&gt; is a neural machine translation service that delivers fast, high-quality, and affordable language translation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache MXNet&lt;/strong&gt; on AWS is a fast and scalable training and inference framework with an easy-to-use, concise API for machine learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The AWS Deep Learning AMIs&lt;/strong&gt; provide machine learning practitioners and researchers with the infrastructure and tools to accelerate deep learning in the cloud, at any scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepComposer&lt;/strong&gt; is the world’s first musical keyboard powered by machine learning to enable developers of all skill levels to learn Generative AI while creating original music outputs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepLens&lt;/strong&gt; helps put deep learning in the hands of developers, literally, with a fully programmable video camera, tutorials, code, and pre-trained models designed to expand deep learning skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepRacer&lt;/strong&gt; is a 1/18th scale race car which gives you an interesting and fun way to get started with reinforcement learning (RL). RL is an advanced machine learning (ML) technique which takes a very different approach to training models than other machine learning methods. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Inferentia&lt;/strong&gt; is a machine learning inference chip designed to deliver high performance at low cost. AWS Inferentia will support the TensorFlow, Apache MXNet, and PyTorch deep learning frameworks, as well as models that use the ONNX format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow on AWS&lt;/strong&gt; enables developers to quickly and easily get started with deep learning in the cloud. The framework has broad support in the industry and has become a popular choice for deep learning research and application development, particularly in areas such as computer vision, natural language understanding and speech translation.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>aws</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Welcome Thread - v149</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 03 Nov 2021 18:18:35 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v149-4c6j</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v149-4c6j</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o72EWpXXrrFvEsZPO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o72EWpXXrrFvEsZPO/giphy.gif" alt="Jenny Slate saying Welcome" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Your first Web Application</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Wed, 03 Nov 2021 18:01:40 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/ideas-for-web-applications-for-beginners-344o</link>
      <guid>https://dev.to/vadimkolobanov/ideas-for-web-applications-for-beginners-344o</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@andrewtneel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Andrew Neel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/first-projects?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi guys! When I started studying Web development, my biggest problem was the lack of ideas for home projects. My level was still too low for production, but theory without practice is dead. I want to share with you a list of the first projects that my Web development teacher once made for me. These projects are suitable even for those who have just started learning how to develop Web applications. There is no cool business logic, there are no complex connections in databases and the idea itself is clear from beginning to end. You just take the topic and already see the end result. Believe me, it helps a lot to get started. You will get a lot of experience in bringing your idea to the finish line, you will feel all the steps of working on a real project. But you will do it as a hobby, for yourself, without worrying about the quality or timing, for the requirements of the customer or employer.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An application for creating text RPGs.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The application contains small articles that can be linked using the interface. After receiving the linked text, the application generates a file (book) with page numbers, allowing you to switch between chapters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;An application that allows you to store a lecture plan modularly&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a certain set of files is attached to each lesson, a many-to-many connection, contains a tag subsystem, a search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scrapper of data from the site with saving in the database&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a simple request to the site and get the data from its page. Implement this through a web interface with the ability to substitute different links and change tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pomodoro + telegram bot + vk bot&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No comments =) it's so fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;News site(blog)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are many tutorials on how to make a blog on Django, for example. Even Django's official documentation contains blog creation training. This is the simplest project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Search for deals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple web application that notifies when the desired product for you will be put up for sale at a good price. You can use the web scraper to extract the product page and notify you of the price change. The problem is that it will be difficult to find test data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost tracking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple interface that you can use to add and break down your expenses by category. Generate a monthly report based on incoming data and write custom notifications like "spending too much on coffee... as always."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Financial Independence Calculator&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In essence, financial independence is the preservation and investment of income (investment) as much as possible, which allows you not to need work to get money. Although many financially independent people continue to work, they can afford to work on what they like to do, and not what they pay more for. Build a tool to calculate how far you are from financial independence based on your current savings, investments, income, retirement accounts and expenses. Examples: FIREcalc, cFIREsim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The "breaker" of bill&lt;/strong&gt; (proposed implementation: mobile application).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a simple tool to help you and your friends split the bill when you have lunch together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Application for "micro-learning"&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build an application that sends you one page daily on the topic you want to study. It can be a random page from Wikipedia, from React documentation, about the kanji letter, or a page from the CIA World Factbook. It is assumed that it is possible to create a program for micro-education.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tryst Planner&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most difficult thing about dating and long-term relationships is deciding where to go on a date. Build a tool that looks at restaurant reviews, event calendars, and collects other data to come up with ideas. (parsing google places or something like that) The task is much more difficult than it seems at first glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Some ideas look better on mobile. But we are learning). I hope someone will be able to find a suitable interesting idea here. I wanted to share not the same type of ideas from the Internet, but really exciting projects that will make you think, invent, send your imagination flying! I wish you success, my friends!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Understand Pods communication</title>
      <author>🚀  Vu Dao 🚀 </author>
      <pubDate>Wed, 03 Nov 2021 17:57:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/understand-pods-communication-338c</link>
      <guid>https://dev.to/aws-builders/understand-pods-communication-338c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;When create new Auto scaling group, there were four issues that I faced:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;kubelet&lt;/code&gt; failed to start due to error listing AWS instances from metadata&lt;/li&gt;
&lt;li&gt;IPAM failed to start (no secondary IP addresses in the ASG nodes)&lt;/li&gt;
&lt;li&gt;Pods were not able to connect public URL although outbound allows all traffic to 0.0.0.0&lt;/li&gt;
&lt;li&gt;Outbound is matter for L-IPAMD (IP Address Manager systemD service)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Let's figure out why&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Security-groups-for-your-VPC"&gt;Security groups for your VPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Pod-networking-(CNI)"&gt;Pod networking (CNI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Understand-CoreDNS"&gt;Understand CoreDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#EKS-kubelet-service-need-outbound-rule?"&gt;EKS kubelet service need outbound rule?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#security-groups-for-your-vpc"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Security groups for your VPC&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is one of important things for Pod communications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"&gt;Security groups for your VPC&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security groups are stateful — if you send a request from your instance, the response traffic for that request is allowed to flow in regardless of inbound security group rules. Responses to allowed inbound traffic are allowed to flow out, regardless of outbound rules. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instances&lt;/strong&gt; associated with a security group can't talk to each other unless you add rules allowing the traffic (exception: the default security group has these rules by default).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWdEyDuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/sg-default.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWdEyDuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/sg-default.png%3Fraw%3Dtrue" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By default, when you create a network interface, it's associated with the default security group for the VPC, unless you specify a different security group&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you specify a security group as the source or destination for a rule, the rule affects all instances that are associated with the security group. Incoming traffic is allowed based on the private IP addresses of the instances that are associated with the source security group (and not the public IP or Elastic IP addresses).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you specify a security group as the source for a rule, traffic is allowed from the network interfaces that are associated with the source security group for the specified protocol and port. Incoming traffic is allowed based on the private IP addresses of the network interfaces that are associated with the source security group (and not the public IP or Elastic IP addresses).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pod-networking-cni"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Pod networking (CNI)&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html"&gt;Pod networking (CNI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amazon EKS supports native VPC networking with the Amazon VPC Container Network Interface (CNI) plugin for Kubernetes. This plugin assigns an IP address from your VPC to each pod.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you create an Amazon EKS node, it has one network interface. All Amazon EC2 instance types support more than one network interface. The network interface attached to the instance when the instance is created is called the primary network interface. Any additional network interface attached to the instance is called a secondary network interface. Each network interface can be assigned multiple private IP addresses. One of the private IP addresses is the primary IP address, whereas all other addresses assigned to the network interface are secondary IP addresses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Amazon VPC Container Network Interface (CNI) plugin for Kubernetes is deployed with each of your Amazon EC2 nodes in a Daemonset with the name aws-node. The plugin consists of two primary components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md#local-ip-address-manager-l-ipam"&gt;L-IPAM&lt;/a&gt; daemon

&lt;ul&gt;
&lt;li&gt;When a worker node first joins the cluster, there is only 1 ENI along with all of its addresses in the ENI. Without any configuration, ipamd always try to keep one extra ENI.&lt;/li&gt;
&lt;li&gt;L-IPAM is responsible for creating network interfaces and attaching the network interfaces to Amazon EC2 instances, assigning secondary IP addresses to network interfaces, and maintaining a warm pool of IP addresses on each node for assignment to Kubernetes pods when they are scheduled. When the number of pods running on the node exceeds the number of addresses that can be assigned to a single network interface, the plugin starts allocating a new network interface, as long as the maximum number of network interfaces for the instance aren't already attached.&lt;/li&gt;
&lt;li&gt;L-IPAM requires the IAM policy which is AWS managed policy &lt;a href="https://console.aws.amazon.com/iam/home#/policies/arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy%24jsonEditor"&gt;AmazonEKS_CNI_Policy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Each pod that you deploy is assigned one secondary private IP address from one of the network interfaces attached to the instance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CNI plugin – Responsible for wiring the host network (for example, configuring the network interfaces and virtual Ethernet pairs) and adding the correct network interface to the pod namespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check inside a host&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@ip-172-10-12-55 ec2-user]# ip route show
default via 172.10.12.1 dev eth0
169.254.169.254 dev eth0
172.10.12.0/24 dev eth0 proto kernel scope link src 172.10.12.55
172.10.12.17 dev enib6ba4ad7e6d scope link
172.10.12.175 dev eni65cfa2c6d07 scope link
172.10.12.227 dev enib1effc0b0ce scope link
172.10.12.247 dev eni7b8c0d17d54 scope link
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Starting IPAM daemon&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IPAM failed to start&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ctl:/var/snap/amazon-ssm-agent/4047# kubectl logs -f -n kube-system aws-node-m9jg6
Copying portmap binary ... Starting IPAM daemon in the background ... ok.
Checking for IPAM connectivity ...  failed.
Timed out waiting for IPAM daemon to start:
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPAM started successfully&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ctl:/var/snap/amazon-ssm-agent/4047# kf logs -n kube-system aws-node-x2dh4
{"level":"info","ts":"2021-10-12T17:00:51.749Z","caller":"entrypoint.sh","msg":"Install CNI binary.."}
{"level":"info","ts":"2021-10-12T17:00:51.772Z","caller":"entrypoint.sh","msg":"Starting IPAM daemon in the background ... "}
{"level":"info","ts":"2021-10-12T17:00:51.773Z","caller":"entrypoint.sh","msg":"Checking for IPAM connectivity ... "}
{"level":"info","ts":"2021-10-12T17:00:53.814Z","caller":"entrypoint.sh","msg":"Copying config file ... "}
{"level":"info","ts":"2021-10-12T17:00:53.819Z","caller":"entrypoint.sh","msg":"Successfully copied CNI plugin binary and config file."}
{"level":"info","ts":"2021-10-12T17:00:53.823Z","caller":"entrypoint.sh","msg":"Foregrounding IPAM daemon ..."}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inter-process communication between CNI-plugin and L-IPAM&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUOpRaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/ipam.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUOpRaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/ipam.png%3Fraw%3Dtrue" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understand-coredns"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Understand CoreDNS&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How Pod resolve service DNS and resolve pubilic domains?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://coredns.io/"&gt;CoreDNS&lt;/a&gt; is a flexible, extensible DNS server that can serve as the Kubernetes cluster DNS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In large scale Kubernetes clusters, CoreDNS’s memory usage is predominantly affected by the number of Pods and Services in the cluster. Other factors include the size of the filled DNS answer cache, and the rate of queries received (QPS) per CoreDNS instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are two different ports: 5300 and 53. Internally, each of these ports will result in a dnsserver.Server&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iQKJD19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/coredns-query.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iQKJD19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/security-group/images/coredns-query.png%3Fraw%3Dtrue" width="880" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create pod to test coredns&lt;br&gt;

  dnsutil.yaml
  &lt;br&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
name: dnsutils
namespace: airflow
spec:
containers:
- name: dnsutils
    image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
    command:
    - sleep
    - "3600"
    imagePullPolicy: IfNotPresent
restartPolicy: Always
affinity:
    nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
            - matchExpressions:
            - key: type
                operator: In
                values:
                - airflow-stateless
tolerations:
    - key: 'dedicated'
        operator: 'Equal'
        value: 'airflow'
        effect: 'NoSchedule'
&lt;/code&gt;&lt;/pre&gt;




&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Access pod and run host&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@ctl:/tmp/airflow# kf exec -it dnsutils -- sh
/ # # Before allow traffic of this node to other ones (especially the ones host coredns pod) 
/ # host airflow-web
;; connection timed out; no servers could be reached

/# # After allow traffic
/ # host airflow-web
airflow-web.airflow.svc.cluster.local has address 172.20.21.163
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Further failed to resolve DNS if the pod is not allowed traffic to coredns&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@us-prod-ctl:/tmp/airflow# kf logs -f airflow-scheduler-858854c8b8-6vdb4 dags-git-clone
INFO: detected pid 1, running init handler
I1013 17:30:23.795367      13 main.go:430]  "level"=0 "msg"="starting up"  "args"=["/git-sync"] "pid"=13
I1013 17:30:23.795483      13 main.go:694]  "level"=0 "msg"="cloning repo"  "origin"="https://gitlab.cloudopz.co/airflow.git" "path"="/dags"
E1013 17:30:43.866130      13 main.go:455]  "msg"="too many failures, aborting" "error"="Run(git clone --no-checkout -b us-master --depth 1 https://gitlab.cloudopz.co/airflow.git /dags): exit status 128:
{ stdout: \"\", stderr: \"Cloning into '/dags'...\\nfatal: unable to access 'https://gitlab.cloudopz.co/airflow.git/': Could not resolve host: gitlab.cloudopz.co\\n\" }"  "failCount"=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CoreDNS &lt;code&gt;i/o timeout&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:51594-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:48875-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:60062-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:59339-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:57500-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:33370-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:60125-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. A: read udp 10.0.9.179:46843-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:58067-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. A: read udp 10.0.9.179:44265-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.ec2.internal. A: read udp 10.0.9.179:47068-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:39342-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. A: read udp 10.0.9.179:59117-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:55960-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. CNAME: read udp 10.0.9.179:50490-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.ec2.internal. A: read udp 10.0.9.179:50588-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:53165-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 sqs.us-east-1.amazonaws.com.us-prod.zone. A: read udp 10.0.9.179:40751-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.ec2.internal. A: read udp 10.0.9.179:55001-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.ec2.internal. CNAME: read udp 10.0.9.179:50504-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 dynamodb.ap-southeast-1.amazonaws.com. A: read udp 10.0.9.179:53393-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis. A: read udp 10.0.9.179:46872-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:45351-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. A: read udp 10.0.9.179:58471-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis. CNAME: read udp 10.0.9.179:60881-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 airflow-pgbouncer.airflow.svc.cluster.local.ec2.internal. A: read udp 10.0.9.179:57814-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. AAAA: read udp 10.0.9.179:58696-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 redis.us-prod.zone. A: read udp 10.0.9.179:53841-&amp;gt;10.0.0.2:53: i/o timeout
[ERROR] plugin/errors: 2 kafka32.default.svc.cluster.local.us-prod.zone. A: read udp 10.0.9.179:33357-&amp;gt;10.0.0.2:53: i/o timeout
&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Common issues:

&lt;ul&gt;
&lt;li&gt;CoreDNS not being able to query kubernetes apiserver to resolve internal names&lt;/li&gt;
&lt;li&gt;CoreDNS not being able to forward the queries to internal DNS (10.0.0.2:53: i/o timeout)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#eks-kubelet-service-need-outbound-rule"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;EKS kubelet service need outbound rule?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The EC2 &lt;code&gt;outbound&lt;/code&gt; rule is often open all traffics to &lt;code&gt;0.0.0.0/0&lt;/code&gt;, but in some cases, it is not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;kubelet&lt;/code&gt; with &lt;code&gt;aws&lt;/code&gt; provider will try to get instance metadata at first start by using the URL &lt;code&gt;https://ec2.us-east-1.amazonaws.com&lt;/code&gt; (base on the region)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let see if we not open outbound to port &lt;code&gt;443&lt;/code&gt;, &lt;code&gt;kubelet&lt;/code&gt; failed to start&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Oct 15 15:40:52 ip-10-0-13-157 systemd: Started Kubernetes systemd probe.
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.645085    3111 mount_linux.go:178] Detected OS with systemd
Oct 15 15:40:52 ip-10-0-13-157 systemd: Started Kubernetes systemd probe.
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.651960    3111 subpath_mount_linux.go:157] Detected OS with systemd
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.653042    3111 server.go:418] Version: v1.18.20-eks-c9f1ce
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.653137    3111 feature_gate.go:243] feature gates: &amp;amp;{map[RotateKubeletServerCertificate:true]}
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.653214    3111 feature_gate.go:243] feature gates: &amp;amp;{map[RotateKubeletServerCertificate:true]}
Oct 15 15:40:52 ip-10-0-13-157 kubelet: W1015 15:40:52.655057    3111 plugins.go:115] WARNING: aws built-in cloud provider is now deprecated. The AWS provider is deprecated and will be removed in a future release
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.692989    3111 aws.go:1249] Zone not specified in configuration file; querying AWS metadata service
Oct 15 15:40:52 ip-10-0-13-157 kubelet: I1015 15:40:52.746474    3111 aws.go:1289] Building AWS cloudprovider
Oct 15 15:44:58 ip-10-0-13-157 kubelet: F1015 15:44:58.742363    3378 server.go:274] failed to run Kubelet: could not init cloud provider "aws": error finding instance i-0f4d8d3be0bc8bb79: "error listing AWS instances: \"RequestError: send request failed\\ncaused by: Post https://ec2.us-east-1.amazonaws.com/: dial tcp 52.46.150.88:443: i/o timeout\""
Oct 15 15:44:58 ip-10-0-13-157 systemd: kubelet.service: main process exited, code=exited, status=255/n/a
Oct 15 15:44:58 ip-10-0-13-157 systemd: Unit kubelet.service entered failed state.
Oct 15 15:44:58 ip-10-0-13-157 systemd: kubelet.service failed.
Oct 15 15:45:03 ip-10-0-13-157 systemd: kubelet.service holdoff time over, scheduling restart.
Oct 15 15:45:03 ip-10-0-13-157 systemd: Stopped Kubernetes Kubelet.
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The suceess&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Oct 15 15:55:32 ip-10-0-13-157 systemd: Starting Kubernetes Kubelet...
Oct 15 15:55:32 ip-10-0-13-157 systemd: Started Kubernetes Kubelet.
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.459182    3953 server.go:418] Version: v1.18.20-eks-c9f1ce
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.459263    3953 feature_gate.go:243] feature gates: &amp;amp;{map[RotateKubeletServerCertificate:true]}
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.459371    3953 feature_gate.go:243] feature gates: &amp;amp;{map[RotateKubeletServerCertificate:true]}
Oct 15 15:55:32 ip-10-0-13-157 kubelet: W1015 15:55:32.459526    3953 plugins.go:115] WARNING: aws built-in cloud provider is now deprecated. The AWS provider is deprecated and will be removed in a future release
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.459943    3953 aws.go:1249] Zone not specified in configuration file; querying AWS metadata service
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.461821    3953 aws.go:1289] Building AWS cloudprovider
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.698313    3953 tags.go:79] AWS cloud filtering on ClusterID: us-p2
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.698356    3953 server.go:540] Successfully initialized cloud provider: "aws" from the config file: ""
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.698366    3953 server.go:964] cloud provider determined current node name to be ip-10-0-13-157.ec2.internal
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.721413    3953 dynamic_cafile_content.go:129] Loaded a new CA Bundle and Verifier for "client-ca-bundle::/etc/kubernetes/pki/ca.crt"
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.721533    3953 dynamic_cafile_content.go:167] Starting client-ca-bundle::/etc/kubernetes/pki/ca.crt
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.723631    3953 manager.go:146] cAdvisor running in container: "/sys/fs/cgroup/cpu,cpuacct/system.slice/kubelet.service"
Oct 15 15:55:32 ip-10-0-13-157 kubelet: I1015 15:55:32.808649    3953 fs.go:125] Filesystem UUIDs: map[a2d6f56b-f4f4-4d1a-8df1-9b20ffb3be14:/dev/nvme0n1p1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Conclusion&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In general, solution from the two original issues are:&lt;br&gt;
    1. IAM Worker role need permission to create ENI, assign IP addresses&lt;br&gt;
    2. Pod between nodes between autoscaling groups need to allow traffics in their network interfaces which are assigned to Auto-scaling groups (ASG) SGs&lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;🚀  Vu Dao 🚀 &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;🚀 AWSome Devops | AWS Community Builder | AWS SA || ☁️ CloudOpz ☁️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>eks</category>
      <category>cloudopz</category>
      <category>devops</category>
    </item>
    <item>
      <title>Twitch Streaming Graph Analysis - Part 3</title>
      <author>Katarina Supe</author>
      <pubDate>Wed, 03 Nov 2021 17:43:02 +0000</pubDate>
      <link>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-3-6d8</link>
      <guid>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-3-6d8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This blog is divided into three parts, depending on the part of the application we are building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 1&lt;/strong&gt;: data source and backend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 2&lt;/strong&gt;: frontend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 3&lt;/strong&gt;: streaming data from Kafka cluster&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started, read &lt;a href="https://memgraph.com/blog/twitch-streaming-graph-analysis"&gt;Part 1&lt;/a&gt; and &lt;a href="https://memgraph.com/blog/twitch-streaming-graph-analysis-part-2"&gt;Part 2&lt;/a&gt;. If you want to skip that and hop right on the streaming part, you can find the backend and frontend implementations from the first two parts &lt;a href="https://github.com/memgraph/twitch-analytics-demo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;For streaming, we are going to create a &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/twitch-stream"&gt;&lt;code&gt;twitch-stream&lt;/code&gt;&lt;/a&gt; folder within our project root directory. We will be streaming data made of chatters of one of the current streamers in the database - &lt;em&gt;BadBoyHalo&lt;/em&gt;. This data is in the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/twitch-stream/chatters.csv"&gt;&lt;code&gt;chatters.csv&lt;/code&gt;&lt;/a&gt; file in the &lt;code&gt;twitch-stream&lt;/code&gt; folder. We will use the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/twitch-stream/dummy.py"&gt;&lt;code&gt;dummy.py&lt;/code&gt;&lt;/a&gt; script for connecting to &lt;strong&gt;Memgraph&lt;/strong&gt;, running &lt;strong&gt;Kafka&lt;/strong&gt;, and creating a &lt;strong&gt;producer&lt;/strong&gt; that periodically sends data to Memgraph. Let's explain what we are doing step by step.&lt;/p&gt;

&lt;p&gt;First, we are parsing the arguments which will be provided in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file later. That will be the name of the &lt;code&gt;.csv&lt;/code&gt; file we are sending to Memgraph and the interval between each message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def parse_args():
    """
    Parse input command line arguments.
    """
    parser = ArgumentParser(
        description="A Twitch stream machine powered by Memgraph.")
    parser.add_argument("--file", help="File with chatter data.")
    parser.add_argument(
        "--interval",
        type=int,
        help="Interval for sending data in seconds.")
    return parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we are connecting to &lt;strong&gt;Memgraph&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;memgraph = setup.connect_to_memgraph(MEMGRAPH_IP, MEMGRAPH_PORT)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's check what the &lt;code&gt;connect_to_memgraph&lt;/code&gt; method actually does. In &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/twitch-stream/setup.py"&gt;&lt;code&gt;setup.py&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def connect_to_memgraph(memgraph_ip, memgraph_port):
    memgraph = Memgraph(host=memgraph_ip, port=int(memgraph_port))
    while(True):
        try:
            if (memgraph._get_cached_connection().is_active()):
                return memgraph
        except:
            log.info("Memgraph probably isn't running.")
            sleep(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;a href="https://github.com/memgraph/gqlalchemy"&gt;&lt;code&gt;gqlalchemy&lt;/code&gt;&lt;/a&gt; we are trying to connect to Memgraph, just like we have done before in our backend.&lt;/p&gt;

&lt;p&gt;After connecting with Memgraph, we are running &lt;strong&gt;Kafka&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setup.run(memgraph, KAFKA_IP, KAFKA_PORT)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That means we are connecting to Kafka and creating a new &lt;strong&gt;topic&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def get_admin_client(kafka_ip, kafka_port):
    retries = 30
    while True:
        try:
            admin_client = KafkaAdminClient(
                bootstrap_servers=kafka_ip + ':' + kafka_port,
                client_id="twitch-stream")
            return admin_client
        except NoBrokersAvailable:
            retries -= 1
            if not retries:
                raise
            log.info("Failed to connect to Kafka")
            sleep(1)


def run(memgraph, kafka_ip, kafka_port):
    admin_client = get_admin_client(kafka_ip, kafka_port)
    log.info("Connected to Kafka")

    topic_list = [
        NewTopic(
            name="chatters",
            num_partitions=1,
            replication_factor=1), ]

    try:
        admin_client.create_topics(new_topics=topic_list, validate_only=False)
    except TopicAlreadyExistsError:
        pass
    log.info("Created topics")

    log.info("Creating stream connections on Memgraph")
    memgraph.execute(
        "CREATE STREAM chatter_stream TOPICS chatters
        TRANSFORM twitch.chatters")
    memgraph.execute("START STREAM chatter_stream")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we have created a topic called &lt;em&gt;chatters&lt;/em&gt;, and after that, streamconnection on Memgraph called &lt;code&gt;chatter_stream&lt;/code&gt;. Here we have to create a stream in Memgraph with the topic &lt;em&gt;chatters&lt;/em&gt;, which we have to transform in a certain way so that Memgraph can understand what to do with it. That's why we have created a new query module in &lt;code&gt;memgraph/query_modules&lt;/code&gt; folder called &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/memgraph/query_modules/twitch.py"&gt;&lt;code&gt;twitch.py&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@mgp.transformation
def chatters(messages: mgp.Messages
             ) -&amp;gt; mgp.Record(query=str, parameters=mgp.Nullable[mgp.Map]):
    result_queries = []

    for i in range(messages.total_messages()):
        message = messages.message_at(i)
        comment_info = json.loads(message.payload().decode('utf8'))
        result_queries.append(
            mgp.Record(
                query=("MERGE (u:User:Stream {id: $user_id}) "
                       "MERGE (c:User {name: $chatter_login}) "
                       "CREATE (c)-[:CHATTER]-&amp;gt;(u)"),
                parameters={
                    "user_id": comment_info["user_id"],
                    "chatter_login": comment_info["chatter_login"]}))

    return result_queries
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kafka &lt;strong&gt;cluster&lt;/strong&gt; feeds messages to Memgraph, and the above script transforms those messages. It acts like a translator who translates from Kafka to Memgraph language. Each message that Memgraph receives is being processed here, and appropriate Cypher queries are being made. Since we are streaming chatter data, here we are just merging chatter nodes to the correct streamer node and creating the connection between them. After that, &lt;code&gt;chatter_stream&lt;/code&gt; can be started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerizing-the-stream"&gt;
  &lt;/a&gt;
  Dockerizing the stream
&lt;/h2&gt;

&lt;p&gt;All that is left to do is add the missing services in the&lt;br&gt;
&lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/docker-compose.yml"&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; file and update some details. For this to work, we had to add a few more files. First, we need to create a &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/twitch-stream/Dockerfile"&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;twitch-stream&lt;/code&gt; service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3.8

# Install CMake for gqlalchemy
RUN apt-get update &amp;amp;&amp;amp; \
  apt-get --yes install cmake &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*

# Install packages
COPY requirements.txt ./
RUN pip3 install -r requirements.txt

COPY dummy.py /app/dummy.py
COPY setup.py /app/setup.py
COPY chatters.csv /app/chatters.csv

WORKDIR /app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/twitch-stream/requirements.txt"&gt;&lt;code&gt;requirements.txt&lt;/code&gt;&lt;/a&gt; will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gqlalchemy==1.0.5
kafka-python==2.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added a new query module, so we are changing &lt;code&gt;memgraph-mage&lt;/code&gt; service a bit. We are building from &lt;code&gt;memgraph&lt;/code&gt; folder and copying our query module to Memgraph's query modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM memgraph/memgraph-mage

USER root

# Copy the local query modules and data import files
COPY query_modules/twitch.py /usr/lib/memgraph/query_modules/twitch.py

USER memgraph
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-whole-application"&gt;
  &lt;/a&gt;
  Starting the whole application
&lt;/h2&gt;

&lt;p&gt;To start the app, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up core
docker-compose up twitch-app
docker-compose up react-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By starting the &lt;code&gt;core&lt;/code&gt; service, you are running everything necessary for the application, as well as streaming (&lt;code&gt;memgraph-mage&lt;/code&gt;, &lt;code&gt;kafka&lt;/code&gt; and &lt;code&gt;zookeeper&lt;/code&gt; services). After that, by starting the &lt;code&gt;twitch-app&lt;/code&gt; service you are running the backend. The &lt;code&gt;react-app&lt;/code&gt; service is our frontend service which runs on &lt;code&gt;localhost:3000&lt;/code&gt; - go check it out! To start streaming data, run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose up twitch-stream&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice how the nodes and edges counter is going up. Also, when you refresh &lt;strong&gt;PageRank&lt;/strong&gt; results, you'll see the change since the popularity of &lt;em&gt;BadBoyHalo&lt;/em&gt; is going up! In this photo, you can see the old PageRank results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" alt="memgraph-tutorial-twitch-page-rank" width="880" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After some data has arrived, &lt;em&gt;BadBoyHalo&lt;/em&gt; has taken the first place, as you can see in the photo below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD2DhbE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank-stream.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD2DhbE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank-stream.png" alt="memgraph-tutorial-twitch-page-rank-stream" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've seen that it's pretty easy and useful to stream your data. With just a few alterations and lines of code, we have added a whole new dimension to our application. This way, you can stream any kind of data you want, whatever you think would give you cool insights.&lt;/p&gt;

&lt;p&gt;Also, you can play with the datasets, make this application your own. If you are keener on backend development, play with various queries. On the other side, if you like working on the frontend, you can make different React components that suit you best. In the end, if you want to give feedback, talk about this app, or Memgraph, make sure to join our &lt;a href="https://discord.gg/memgraph"&gt;Discord&lt;/a&gt; Community Server!&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>tutorial</category>
      <category>memgraph</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Router {day 33}</title>
      <author>Al Siam</author>
      <pubDate>Wed, 03 Nov 2021 17:36:03 +0000</pubDate>
      <link>https://dev.to/alsiamworld/react-router-day-33-8b3</link>
      <guid>https://dev.to/alsiamworld/react-router-day-33-8b3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day33"&gt;
  &lt;/a&gt;
  100daysofcode    #day33
&lt;/h1&gt;

&lt;p&gt;Today's learning is React Router. &lt;/p&gt;

&lt;p&gt;React Router is a standard library for routing in React. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps the UI in sync with the URL. ... The application will contain three components: home component, about a component, and contact component.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1rVeDHvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbmb6hwg2egcmsux2b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1rVeDHvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbmb6hwg2egcmsux2b7.png" alt="Image description" width="688" height="608"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity"&gt;
  &lt;/a&gt;
  DEVcommunity
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#react-learning-programming-javascript"&gt;
  &lt;/a&gt;
  react #learning #programming #javascript
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Create an API documentation with insomnia plugin</title>
      <author>Dibin Jose</author>
      <pubDate>Wed, 03 Nov 2021 17:26:46 +0000</pubDate>
      <link>https://dev.to/dibinjose/create-an-api-documentation-with-insomnia-plugin-55dj</link>
      <guid>https://dev.to/dibinjose/create-an-api-documentation-with-insomnia-plugin-55dj</guid>
      <description>&lt;p&gt;Hey, this is my first blog. &lt;br&gt;
API documentation are instructions about how to use and integrate with an API. They are basically just a manual containing all the information required to work with the API. The information includes endpoints, request structure, response structure etc. One of the most commonly used way of API documentation is by using Swagger. But there are other ways to do so.&lt;/p&gt;

&lt;p&gt;In this blog, we will create an API documentation using Insomnia Plugin which is in a human-friendly term.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-server"&gt;
  &lt;/a&gt;
  Create a server
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can avoid this step if you already have a running project or you can clone this &lt;a href="https://github.com/dibinjose/fastify-boilerplate"&gt;fastify-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First we can create a server with 5 sample API endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SignIn&lt;/li&gt;
&lt;li&gt;SignUp&lt;/li&gt;
&lt;li&gt;View User&lt;/li&gt;
&lt;li&gt;Edit User&lt;/li&gt;
&lt;li&gt;Delete User
I am using nodejs and express for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't have nodejs or npm installed in your system, please install it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;
  &lt;a href="#1-create-a-folder"&gt;
  &lt;/a&gt;
  1) Create a folder
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;mkdir sample-api
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#2-initialize-npm"&gt;
  &lt;/a&gt;
  2) Initialize npm
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;cd sample-api
npm init -y
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#3-add-package-and-create-a-js-file"&gt;
  &lt;/a&gt;
  3) Add package and create a JS file
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm i express
touch index.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#4-add-the-following-code-to-indexjs"&gt;
  &lt;/a&gt;
  4) Add the following code to index.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server Running in Port 3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signUp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signUp Route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SignIn Route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Display Route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Update Route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Delete Route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#5-start-the-server"&gt;
  &lt;/a&gt;
  5) Start the server
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;node index.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the message&lt;br&gt;
&lt;strong&gt;Server Running in Port 3000&lt;/strong&gt;&lt;br&gt;
in the terminal&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-with-insomnia"&gt;
  &lt;/a&gt;
  Test with insomnia
&lt;/h2&gt;

&lt;p&gt;Now into the real stuff. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we need to download and install &lt;a href="https://insomnia.rest/"&gt;insomnia&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open insomnia and create a new request collection at top right corner. We will name it &lt;em&gt;sample-api&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can add environment variables in insomnia, but for an easy implementation lets just avoid that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Create a new folder called &lt;em&gt;Auth&lt;/em&gt; using the &lt;strong&gt;+&lt;/strong&gt; icon and create 2 new post requests,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) signUp:- &lt;a href="http://localhost:3000/signUp"&gt;http://localhost:3000/signUp&lt;/a&gt;&lt;br&gt;
2) signIn:- &lt;a href="http://localhost:3000/signIn"&gt;http://localhost:3000/signIn&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;inside the &lt;em&gt;Auth&lt;/em&gt; folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the same way create another folder called &lt;em&gt;User&lt;/em&gt; using &lt;strong&gt;+&lt;/strong&gt; sign and add&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Display:- &lt;a href="http://localhost:3000/user/:id"&gt;http://localhost:3000/user/:id&lt;/a&gt;&lt;br&gt;
2) Edit:- &lt;a href="http://localhost:3000/user"&gt;http://localhost:3000/user&lt;/a&gt;&lt;br&gt;
3) Delete:- &lt;a href="http://localhost:3000/user"&gt;http://localhost:3000/user&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can add JSON body for POST, PUT and DELETE requests as per your interest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final result of insomnia would be as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaHGOIcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djh1mq7wqoxgndr1iyhp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaHGOIcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djh1mq7wqoxgndr1iyhp.png" alt="Final result" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-documentation"&gt;
  &lt;/a&gt;
  Add Documentation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We now need to download and install the plugin called &lt;a href="https://insomnia.rest/plugins/insomnia-plugin-documenter"&gt;insomnia-plugin-documenter&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can add description to the requests in the insomnia, which would be displayed in the documentation.&lt;br&gt;
We can add description by clicking on the arrow on the right side of the request tab.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MI0beA9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmyv36wit4xeq374trrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MI0beA9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmyv36wit4xeq374trrx.png" alt="Add Description" width="329" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add description to the requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oR0R6K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2d5d6ssvvee4kf61ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oR0R6K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2d5d6ssvvee4kf61ev.png" alt="Request description" width="880" height="658"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Export the documentation using &lt;em&gt;Export HTML Documentation...&lt;/em&gt;** on the &lt;em&gt;Dashboard/sample-api&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TthCJ1OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnotlcf06mq972us7l3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TthCJ1OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnotlcf06mq972us7l3n.png" alt="Export Doc" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter the folder and route.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If success you would see a success message that contains path to the generated docs folder and it is ready to be deployed anywhere that support static HTML hosting (e.g. GitHub Pages, Vercel, and Netlify).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-documentation-locally"&gt;
  &lt;/a&gt;
  View Documentation Locally
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to the documentation folder and open the terminal in that folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npx serve
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which will create a server running in &lt;em&gt;&lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; or any other port depending on your system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open a browser and hit the url.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WgvXyLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x5oohyvabj1sd7suvh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WgvXyLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x5oohyvabj1sd7suvh3.png" alt="Final Result" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#well-done"&gt;
  &lt;/a&gt;
  Well Done
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TopaMo7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c21ql3b9a0d2jtvr7km.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TopaMo7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9c21ql3b9a0d2jtvr7km.gif" alt="Image description" width="500" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Formatting and Linting (Lab 7)</title>
      <author>Ahmad</author>
      <pubDate>Wed, 03 Nov 2021 17:15:26 +0000</pubDate>
      <link>https://dev.to/ar/formatting-and-linting-lab-7-5ff0</link>
      <guid>https://dev.to/ar/formatting-and-linting-lab-7-5ff0</guid>
      <description>&lt;p&gt;This lab taught us about the importance of formatters and linters, and how they're used in open source projects. We were asked to pick one of each, so I decided to go with &lt;a href="https://pypi.org/project/black/"&gt;Python Black&lt;/a&gt; and &lt;a href="https://flake8.pycqa.org/en/latest/index.html"&gt;Flake8&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-python-black-and-flake8"&gt;
  &lt;/a&gt;
  Why Python Black and Flake8
&lt;/h1&gt;

&lt;p&gt;I chose Python Black and Flake8 because they are "uncompromising". This means that config is kept to a minimum and the formatter/linter decides how things should go. I liked this idea because the resulting code would be very similar to other projects that use Black or Flake8, which makes it seem familiar to new contributors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h1&gt;

&lt;p&gt;I started by installing black and flake8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install black
pip install flake8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then had to setup config files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flake8"&gt;
  &lt;/a&gt;
  Flake8
&lt;/h3&gt;

&lt;p&gt;Flake8 looks for it's config in &lt;code&gt;.flake8&lt;/code&gt;. I made this file and populated it with some basic rules from the docs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[flake8]
max-line-length = 88
ignore = W503
exclude =
    __pycache__,
    dist
max-complexity = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;max-line-length&lt;/strong&gt;: The maximum number of characters per line, 88 is the default in Python Black&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ignore&lt;/strong&gt;: List of rules to ignore. I set W503 because of &lt;a href="https://github.com/mila-iqia/cookiecutter-pyml/issues/10"&gt;this bug&lt;/a&gt;, which isn't actually solved&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exclude&lt;/strong&gt;: List of paths/files to ignore&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;max-complexity&lt;/strong&gt;: Gives a warning if a function's complexity is higher than the value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#python-black"&gt;
  &lt;/a&gt;
  Python Black
&lt;/h3&gt;

&lt;p&gt;Black's config had to be stored in &lt;code&gt;pyproject.toml&lt;/code&gt;. There weren't too many options here but I added the essentials:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    | __pycache__
    | dist
)/
'''
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;line-length&lt;/strong&gt;: The maximum number of characters per line&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;include&lt;/strong&gt;: Pattern of files to include&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exclude&lt;/strong&gt;: List of paths/files to ignore&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#running-python-black-and-flake8"&gt;
  &lt;/a&gt;
  Running Python Black and Flake8
&lt;/h1&gt;

&lt;p&gt;To run Python Black and Flake8 against my code, I ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m black ssg/
python -m flake8 ssg/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#python-black"&gt;
  &lt;/a&gt;
  Python Black
&lt;/h3&gt;

&lt;p&gt;I was amazed at how much Python Black changed. Apparently it's bad practice to surround if statements in brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tvudC0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdanyiuscffkjbmh5u2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tvudC0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdanyiuscffkjbmh5u2u.png" alt="Image description" width="149" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides that, Black added extra spacing between functions and enforced the line length of 88.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flake8"&gt;
  &lt;/a&gt;
  Flake8
&lt;/h3&gt;

&lt;p&gt;Flake8 didn't really find much (thankfully). This was the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssg/ssg.py:47:17: W503 line break before binary operator
ssg/SSGParser.py:20:1: E302 expected 2 blank lines, found 1
ssg/SSGUtil.py:9:89: E501 line too long (90 &amp;gt; 88 characters)
ssg/SSGUtil.py:10:1: E302 expected 2 blank lines, found 1
ssg/SSGUtil.py:53:18: E711 comparison to None should be 'if cond is None:'
ssg/SSGUtil.py:9:89: E501 line too long (90 &amp;gt; 88 characters)
ssg/SSGUtil.py:10:1: E302 expected 2 blank lines, found 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first rule, &lt;a href="https://www.flake8rules.com/rules/W503.html"&gt;W503&lt;/a&gt;, drove me crazy. It was occurring because of the &lt;code&gt;+&lt;/code&gt; after the new line in this print statement:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juNQmwVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwafiq7a1n6dot249e2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juNQmwVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwafiq7a1n6dot249e2r.png" alt="Image description" width="346" height="79"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After fixing this, I still got an error for this statement, but the rule was now &lt;a href="https://www.flake8rules.com/rules/W504.html"&gt;W504&lt;/a&gt;, which wanted this change reverted. &lt;/p&gt;

&lt;p&gt;Reading their github issues, I came across &lt;a href="https://github.com/mila-iqia/cookiecutter-pyml/issues/10"&gt;this&lt;/a&gt;, which was apparently solved.&lt;/p&gt;

&lt;p&gt;To counter this myself, I added W503 to the ignore list in the Flake8 config.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#onestep-solution"&gt;
  &lt;/a&gt;
  One-step solution
&lt;/h1&gt;

&lt;p&gt;My one-step solution was to make a simple shell script that executes the scripts on the &lt;code&gt;ssg/&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; black ssg/
&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Press enter to continue..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; flake8 ssg/
&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Press enter to continue..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#integrating-into-vscode"&gt;
  &lt;/a&gt;
  Integrating into VSCode
&lt;/h1&gt;

&lt;p&gt;To do this, I simply selected the &lt;code&gt;Workspace&lt;/code&gt; tab of settings and changed the default formatter to &lt;code&gt;Black&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CGZnoJCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsg8t4558oow6wrlzgmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CGZnoJCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsg8t4558oow6wrlzgmf.png" alt="Image description" width="470" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the linter, I pressed &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; and searched for &lt;code&gt;Select Linter&lt;/code&gt;. This brought up a selection of linters, I chose Flake8.&lt;/p&gt;

&lt;p&gt;The final settings.json looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"python.formatting.provider"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"python.linting.flake8Enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"python.linting.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#outcomes"&gt;
  &lt;/a&gt;
  Outcomes
&lt;/h1&gt;

&lt;p&gt;I knew linters and formatters were a thing, but I didn't know you could integrate them into a project and vscode like this. This lab is really going to improve my workflow in the future.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>How To Do Anything in TypeScript With Type Guards</title>
      <author>Cameron McHenry</author>
      <pubDate>Wed, 03 Nov 2021 16:52:19 +0000</pubDate>
      <link>https://dev.to/camchenry/how-to-do-anything-in-typescript-with-type-guards-24h7</link>
      <guid>https://dev.to/camchenry/how-to-do-anything-in-typescript-with-type-guards-24h7</guid>
      <description>&lt;p&gt;This article was originally published on my blog: &lt;a href="https://camchenry.com/blog/typescript-type-guards"&gt;camchenry.com&lt;/a&gt;. If you enjoy this article, please consider joining my mailing list for more content like this one.&lt;/p&gt;




&lt;p&gt;TypeScript is valuable because it enables us to write safe code. Because when every type in the code is known at compile time, we can compile the code with TypeScript and perform type checking, which ensures that the code will not crash or cause errors.&lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;it is not always possible to know every type at compile time&lt;/strong&gt;, such as when accepting arbitrary data from an external API. To check types at run-time or differentiate between different types, we to need narrow the types using a type guard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-narrowing"&gt;
  &lt;/a&gt;
  What is narrowing?
&lt;/h2&gt;

&lt;p&gt;In TypeScript, &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;narrowing&lt;/a&gt; is the process of refining broad types into more narrow types. Narrowing is useful because it allows code to be liberal in the types that it accepts. Then, we can use type guards to narrow the type down to something more useful.&lt;/p&gt;

&lt;p&gt;These are some common examples of narrowing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unknown&lt;/code&gt; or &lt;code&gt;any&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;string | object | number&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;number | null | undefined&lt;/code&gt; to &lt;code&gt;number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;string&lt;/code&gt; to a custom type like &lt;code&gt;NonEmptyString&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-type-guard"&gt;
  &lt;/a&gt;
  What is a type guard?
&lt;/h2&gt;

&lt;p&gt;A type guard is a kind of conditional check that narrows a type. Type guards allow for run-time type checking by using expressions to see if a value is of a certain type or not.&lt;/p&gt;

&lt;p&gt;So, what does a type guard look like? These are all examples of type guards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof value === 'string'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'name' in data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value instanceof MouseEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A type guard is a special kind of expression that changes the type of a variable. We will look at more examples of type guards in practice later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-kinds-of-type-guards-how-to-check-a-type"&gt;
  &lt;/a&gt;
  The kinds of type guards (how to check a type)
&lt;/h2&gt;

&lt;p&gt;Most type guards revolve around regular JavaScript operators, which are given extra abilities in TypeScript that make it possible to narrow types by writing typical JavaScript code. So, it is possible that you've used a type guard before without even realizing it!&lt;/p&gt;

&lt;p&gt;Fundamentally, &lt;strong&gt;every type guard relies on checking that some expression evaluates to true or false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a result, the first kind of type guard which we will look at is a simple truthiness check. But we can utilize more complex type guards like &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, and &lt;code&gt;instanceof&lt;/code&gt; that tell us much more information.&lt;/p&gt;

&lt;p&gt;In addition to all of these built-in type guards, we can can go even further and create our own custom type guards that can check &lt;em&gt;any type&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-type-guard-truthiness"&gt;
  &lt;/a&gt;
  Boolean type guard (truthiness)
&lt;/h3&gt;

&lt;p&gt;As stated previously, checking the truthiness of a value is the essence of all type guards.&lt;/p&gt;

&lt;p&gt;However, a boolean type guard only checks the truthiness of a value, but gives us no additional information beyond that. Other more complex type guards can check more complex types or verify more properties, but the boolean type guard is the most basic type guard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAvailableRooms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`There are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; hotel rooms available to book.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorry, all rooms are currently booked.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getAvailableRooms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Sorry, all rooms are currently booked."&lt;/span&gt;
&lt;span class="nx"&gt;getAvailableRooms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "There are 5 hotel rooms available to book."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using a boolean type guard, the value is implicitly casted to a boolean. This has a logical interpretation most of the time, but not always.&lt;/p&gt;

&lt;p&gt;For example, if use a boolean type guard to check a type of &lt;code&gt;number | undefined&lt;/code&gt;, we might expect that it will only exclude the &lt;code&gt;undefined&lt;/code&gt; case. However, it will also rule out the case where the value is 0, which might not be what you expect in some cases. For more information on this common bug, check out Kent C. Dodd's article, "&lt;a href="https://kentcdodds.com/blog/use-ternaries-rather-than-and-and-in-jsx"&gt;Use ternaries rather than &amp;amp;&amp;amp; in JSX&lt;/a&gt;."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#equality-type-guard"&gt;
  &lt;/a&gt;
  Equality type guard
&lt;/h3&gt;

&lt;p&gt;In the boolean type guard, we checked the &lt;em&gt;truthiness&lt;/em&gt; of an expression. &lt;strong&gt;In an equality type guard, we check the &lt;em&gt;value&lt;/em&gt; of an expression.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This kind of type guard is useful when we know all of the possible values of a type. For example, if we have an enumeration of string or number values, or if we want to know that a value is not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example where we use an equality type guard to &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;undefined&lt;/code&gt; from the type of a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Now the type of `timeOfDay` is narrowed to `morning` | `afternoon`,&lt;/span&gt;
  &lt;span class="c1"&gt;// so we can use string methods on it safely.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Good &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}${&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "Hello!"&lt;/span&gt;
&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Good Afternoon!"&lt;/span&gt;
&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Good Morning!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use a &lt;code&gt;switch&lt;/code&gt; block to accomplish exactly the same thing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Good &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}${&lt;/span&gt;&lt;span class="nx"&gt;timeOfDay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a &lt;code&gt;switch&lt;/code&gt; block like this might be preferable if you have a lot of possible values to check and which might share the same code.&lt;/p&gt;

&lt;p&gt;Discriminated unions deserve their own article, but they are essentially a more powerful version of the equality type guard.&lt;/p&gt;

&lt;p&gt;A discriminated union is a type that has multiple possible types, with a field that allows to us to discriminate (or differentiate) between them. In other words, when we check the value of a single field (like &lt;code&gt;type&lt;/code&gt;), it automatically includes a number of other properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-typeof-endraw-type-guard"&gt;
  &lt;/a&gt;
  &lt;code&gt;typeof&lt;/code&gt; type guard
&lt;/h3&gt;

&lt;p&gt;In contrast to the previous example, where we checked the &lt;em&gt;value&lt;/em&gt; of a variable (or expression), with a &lt;code&gt;typeof&lt;/code&gt; type guard, we check the &lt;em&gt;type&lt;/em&gt; of a variable.&lt;/p&gt;

&lt;p&gt;When there is a value which has several possible types, like &lt;code&gt;string | number&lt;/code&gt;, we can use &lt;code&gt;typeof&lt;/code&gt; to figure out which type it is.&lt;/p&gt;

&lt;p&gt;For example, we can use &lt;code&gt;typeof&lt;/code&gt; to write a comparison function that compares two values to each other and returns the difference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Both a and b are numbers, so we can compare them directly.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use string methods on `a` and `b` safely.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localeCompare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`Cannot compare unrelated types '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' and '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; -1&lt;/span&gt;
&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;321&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; -198&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The biggest limitation of the &lt;code&gt;typeof&lt;/code&gt; guard is that it can only differentiate between &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"&gt;types that JavaScript recognizes&lt;/a&gt;. The types that &lt;code&gt;typeof&lt;/code&gt; can check are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-instanceof-endraw-type-guard"&gt;
  &lt;/a&gt;
  &lt;code&gt;instanceof&lt;/code&gt; type guard
&lt;/h3&gt;

&lt;p&gt;When we have a variable that is an instance of a class, we can use &lt;code&gt;instanceof&lt;/code&gt; to check whether if the variable has that type or not.&lt;/p&gt;

&lt;p&gt;For example, the DOM APIs define many classes and subclasses which can be quickly checked using &lt;code&gt;instanceof&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `event` now has type `MouseEvent`, so we can access mouse-specific properties&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A mouse event occurred at (&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `event` now has type `KeyboardEvent`, so we can access key-specific properties&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A keyboard event occurred: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An event occurred: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is useful when dealing with potentially generic DOM objects, because a single &lt;code&gt;instanceof&lt;/code&gt; check grants access to all of the properties and methods of the class.&lt;/p&gt;

&lt;p&gt;This can also be used to differentiate between common objects in JavaScript, like &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, or &lt;code&gt;Set&lt;/code&gt;. For example, we can create a function to create a lookup table which accepts many possible inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a Map which returns some value given a string key&lt;/span&gt;
&lt;span class="c1"&gt;// (ignoring the fact that the Map constructor already accepts some of these)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createLookupTable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// `db` has type `[string, Value][] | Map&amp;lt;string, Value&amp;gt; | Record&amp;lt;string, Value&amp;gt;`&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `db` now has type `[string, Value][]`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// `db` has type `Map&amp;lt;string, Value&amp;gt; | Record&amp;lt;string, Value&amp;gt;`&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `db` now has type `Map&amp;lt;string, Value&amp;gt;`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// `db` has type `Record&amp;lt;string, Value&amp;gt;`&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;createLookupTable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;14.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shirt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;24.95&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Map (2) {"hat" =&amp;gt; 14.99, "shirt" =&amp;gt; 24.95}&lt;/span&gt;

&lt;span class="nx"&gt;createLookupTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;14.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shirt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;24.95&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Map (2) {"hat" =&amp;gt; 14.99, "shirt" =&amp;gt; 24.95}&lt;/span&gt;

&lt;span class="nx"&gt;createLookupTable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;14.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;shirt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;24.95&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Map (2) {"hat" =&amp;gt; 14.99, "shirt" =&amp;gt; 24.95}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another example using &lt;code&gt;instanceof&lt;/code&gt; to check if a type is a &lt;code&gt;Date&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; and decide whether to construct a new &lt;code&gt;Date&lt;/code&gt; object or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-05-06 03:25:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Date: "2021-05-06T07:25:00.000Z"&lt;/span&gt;
&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-05-06 03:25:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Date: "2021-05-06T07:25:00.000Z"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-in-endraw-type-guard"&gt;
  &lt;/a&gt;
  &lt;code&gt;in&lt;/code&gt; type guard
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; type guard allows us to differentiate between multiple types by checking if an object has a specific property. In JavaScript, the &lt;code&gt;in&lt;/code&gt; operator, like all type guards, returns a boolean value that indicates if the object has the property or not. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, we can use &lt;code&gt;in&lt;/code&gt; to differentiate objects that have different sets of properties. For example, we can use it to differentiate between different types of classes (in this case, events):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MouseEvent&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// event now has type `KeyboardEvent`&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A keyboard event occurred: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// event now has type `MouseEvent`&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A mouse event occurred: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important thing here is that &lt;code&gt;key&lt;/code&gt; is only defined for &lt;code&gt;KeyboardEvent&lt;/code&gt;, but not for &lt;code&gt;MouseEvent&lt;/code&gt;. If the property we check exists in multiple cases, the narrowing will not work. For example, the following code will not work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EventInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleEventInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EventInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This type guard will NOT work:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// event still has type `EventInput`, so the type guard does not&lt;/span&gt;
    &lt;span class="c1"&gt;// do any narrowing in this case&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though not always related to its use for narrowing types, the &lt;code&gt;in&lt;/code&gt; operator is also often used to check for browser support of certain features.&lt;/p&gt;

&lt;p&gt;For example, the guard &lt;code&gt;'serviceWorker' in navigator&lt;/code&gt; checks whether the browser supports service workers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assertion-type-guard-or-assertion-function"&gt;
  &lt;/a&gt;
  Assertion type guard (or assertion function)
&lt;/h3&gt;

&lt;p&gt;In TypeScript 3.7, TypeScript added support for &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions"&gt;assertion functions&lt;/a&gt;. An assertion function is a function that assumes a condition is always true, and throws an error when it does not.&lt;/p&gt;

&lt;p&gt;To create an assertion function, we need to add something called an "assertion signature," which is a formal declaration of what the function will assert. The assertion signature is additional information about a function (like a return type) that lets the TypeScript compiler narrow the type.&lt;/p&gt;

&lt;p&gt;Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;asserts&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Expected 'string', got: '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// x now has type 'string', so it is safe to use string methods&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Previously, we discussed how all type guards are based around a boolean check. That is still true in this case, but the actual usage is slightly different from other type guards.&lt;/p&gt;

&lt;p&gt;With other type guards, we typically used something like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt; to create different branches of execution. With an assertion function, the two branches are: continue as normal, or stop the script (throw an error).&lt;/p&gt;

&lt;p&gt;Other than the difference of how an assertion type guard can throw an exception, assertion type guards are similar to other type guards. However, something that we must be careful about is accidentally creating a type guard which asserts the &lt;strong&gt;wrong&lt;/strong&gt; condition.&lt;/p&gt;

&lt;p&gt;This is one way that we can end up with a &lt;strong&gt;false sense of safety&lt;/strong&gt;. Here is an example where the function asserts something, but the actual code asserts nothing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;asserts&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This check does not match the assertion signature&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We get a run-time exception here (!!!), which TypeScript should&lt;/span&gt;
&lt;span class="c1"&gt;// be able to prevent under normal circumstances:&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// "TypeError: x.toLowerCase is not a function"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#userdefined-custom-type-guard"&gt;
  &lt;/a&gt;
  User-defined (custom) type guard
&lt;/h3&gt;

&lt;p&gt;Most type guards have limitations to what they can check, such as only primitive types for &lt;code&gt;typeof&lt;/code&gt;, or only classes for &lt;code&gt;instanceof&lt;/code&gt;. But with user-defined type guards, there are no limitations on what we can check.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom type guards are the most powerful kind of type guard&lt;/strong&gt;, because we can verify any type, including ones that we defined ourselves, as well as built-in types from JavaScript or the DOM. The main downside of custom type guards is that they are not predefined, so we have to write them ourselves.&lt;/p&gt;

&lt;p&gt;There are a few built-in custom type guards though, such as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"&gt;&lt;code&gt;Array.isArray&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// data now has type "array", so it is safe to use array methods&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next section, we will look at all of the different ways that we can define our own type guard functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-guard-functions"&gt;
  &lt;/a&gt;
  Type guard functions
&lt;/h2&gt;

&lt;p&gt;A type guard function is a function that returns a value and has a &lt;em&gt;type predicate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A type predicate is an additional declaration that is added to a function (like a return type) which gives additional information to TypeScript and allows it to narrow the type of a variable. For example, in the definition of &lt;code&gt;Array.isArray&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the type predicate is &lt;code&gt;arg is any[]&lt;/code&gt;. In spoken word, the signature of this function might be: "&lt;code&gt;isArray&lt;/code&gt; takes one argument of type &lt;code&gt;any&lt;/code&gt; and checks if it is an array." In general, type predicates take the form: &lt;code&gt;variable is type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a function to be eligible as a type guard, it must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Return a boolean value&lt;/li&gt;
&lt;li&gt;Have a type predicate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type predicate replaces the return type, because a function with a type predicate must always return a boolean value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples-of-type-guard-functions"&gt;
  &lt;/a&gt;
  Examples of type guard functions
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#check-if-a-value-is-a-string"&gt;
  &lt;/a&gt;
  Check if a value is a string
&lt;/h4&gt;

&lt;p&gt;This example is essentially a reusable form of the built-in &lt;code&gt;typeof&lt;/code&gt; type guard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#check-if-a-value-is-defined-not-null-or-undefined"&gt;
  &lt;/a&gt;
  Check if a value is defined (not null or undefined)
&lt;/h4&gt;

&lt;p&gt;A common use case for type guards is to refine the type of something like &lt;code&gt;Type | null&lt;/code&gt; or &lt;code&gt;Type | undefined&lt;/code&gt; down to just &lt;code&gt;Type&lt;/code&gt;, effectively eliminating the null or undefined case. We can do this by accepting a generic type which can be null or undefined, and adding a type predicate to remove &lt;code&gt;null | undefined&lt;/code&gt; from the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, it can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// x is defined, so it is safe to use methods on x&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#remove-all-values-raw-null-endraw-or-raw-undefined-endraw-values-from-array"&gt;
  &lt;/a&gt;
  Remove all values &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; values from array
&lt;/h4&gt;

&lt;p&gt;Using the &lt;code&gt;isDefined&lt;/code&gt; type guard we just defined, we can use it with the built-in &lt;code&gt;Array.filter&lt;/code&gt; function, which has special support for type predicates. The &lt;code&gt;Array.filter&lt;/code&gt; function is defined like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Filtered&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Filtered&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Filtered&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(The definition here has been altered slightly for improved understanding and readability). Essentially, every usage of &lt;code&gt;Array.filter&lt;/code&gt; is a type guard, except in most cases the type before and after calling &lt;code&gt;Array.filter&lt;/code&gt; is the same type.&lt;/p&gt;

&lt;p&gt;But if the function passed to &lt;code&gt;Array.filter&lt;/code&gt; &lt;em&gt;narrows&lt;/em&gt; the type (like a type guard), then the return type of &lt;code&gt;Array.filter&lt;/code&gt; changes. So we can use our &lt;code&gt;isDefined&lt;/code&gt; type guard to remove all &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values from the array, as well as removing &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; types from the array items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 'values' is an array of strings, but can have null or undefined values&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// We can safely assign 'filtered' to an array of strings (string[])&lt;/span&gt;
&lt;span class="c1"&gt;// because `isDefined` changes the type of the variable 'values'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#check-if-a-number-is-positive"&gt;
  &lt;/a&gt;
  Check if a number is positive
&lt;/h4&gt;

&lt;p&gt;A common use-case for creating our own types is so that we can ensure certain conditions are met. For example, we might want to ensure that an object has certain properties, a string is not empty, or a number is positive.&lt;/p&gt;

&lt;p&gt;First, we need to create a custom &lt;code&gt;PositiveNumber&lt;/code&gt; type, and a type guard to check for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PositiveNumber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPositive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a new type of number, we use a technique called "type branding." Essentially, we add a phantom property to the number type to differentiate it from all other types of numbers. In this case, I chose to use &lt;code&gt;{ __type: 'PositiveNumber' }&lt;/code&gt;, but we could picked any arbitrary key/value, as long as it is unique and not already defined.&lt;/p&gt;

&lt;p&gt;The important thing is that we cannot create &lt;code&gt;PositiveNumber&lt;/code&gt; by declaring a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ERROR: Type 'number' is not assignable to type 'PositiveNumber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may seem inconvenient, but it is exactly why it allows us to write safe code, because we must always check conditions with the type guard and prevents us from writing code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an example of how we might use this type guard, we can write a square root function which accepts only positive numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;PositiveNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can use the type guard to compute the square root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;squareRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ERROR: ^^^ 'number' is not assignable to parameter of type 'PositiveNumber'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPositive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// OK: Now x has type 'PositiveNumber', so we can take the square root&lt;/span&gt;
  &lt;span class="nx"&gt;squareRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#check-if-a-string-is-a-guid"&gt;
  &lt;/a&gt;
  Check if a string is a GUID
&lt;/h4&gt;

&lt;p&gt;Similar to the previous example, we can create a custom &lt;code&gt;Guid&lt;/code&gt; type that is based on the &lt;code&gt;string&lt;/code&gt; type and write a type guard to check for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Guid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guidPattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9a-f&lt;/span&gt;&lt;span class="se"&gt;]{8}&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9a-f&lt;/span&gt;&lt;span class="se"&gt;]{4}&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-5&lt;/span&gt;&lt;span class="se"&gt;][&lt;/span&gt;&lt;span class="sr"&gt;0-9a-f&lt;/span&gt;&lt;span class="se"&gt;]{3}&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;089ab&lt;/span&gt;&lt;span class="se"&gt;][&lt;/span&gt;&lt;span class="sr"&gt;0-9a-f&lt;/span&gt;&lt;span class="se"&gt;]{3}&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9a-f&lt;/span&gt;&lt;span class="se"&gt;]{12}&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isGuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;guidPattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an example of how to use this type and type guard in practice, we will create a list of users that can be searched by GUID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ERROR:   ^^ Argument of type 'string' is not assignable to parameter of type 'Guid'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isGuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// OK: id now has type `Guid`:&lt;/span&gt;
  &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#check-if-a-value-is-a-valid-react-element-raw-reactisvalidelement-endraw-"&gt;
  &lt;/a&gt;
  Check if a value is a valid React element (&lt;code&gt;React.isValidElement&lt;/code&gt;)
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://reactjs.org/docs/react-api.html#isvalidelement"&gt;&lt;code&gt;isValidElement&lt;/code&gt;&lt;/a&gt; function included with React checks if a value is a valid React element, which can be rendered by React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;ReactElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The implementation of this function is not relevant here, but it is a perfect example of a common type guard function that verifies a custom type that cannot be verified with other type guards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-and-cons-of-custom-type-guard-functions"&gt;
  &lt;/a&gt;
  Pros and cons of custom type guard functions
&lt;/h3&gt;

&lt;p&gt;Custom type guard functions are powerful and sometimes be the only option in order to write type-safe code. However, they can be a tricky to write and are susceptible to mistakes.&lt;/p&gt;

&lt;p&gt;The advantages of custom type guard functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Flexibility&lt;/strong&gt;: can check any type, including custom types that we define&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run-time type checking&lt;/strong&gt;: allows type-checking at run-time, ensuring that safety is ensured both when code is compiled, and also when it is running&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reusable&lt;/strong&gt;: type guard functions allow us to combine multiple type guards into one and easily use them in multiple places&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages of a custom type guard function are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Manual&lt;/strong&gt;: type guard functions have to be written manually (currently no automatic way to generate type guards)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: using type guard functions has a slight overhead to call the function and run the checks (negligible in practice)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fragile&lt;/strong&gt;: custom type guards can be implemented incorrectly on accident, which may provide a false sense of security and safety&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-can-a-type-guard-be-used"&gt;
  &lt;/a&gt;
  Where can a type guard be used?
&lt;/h2&gt;

&lt;p&gt;Now that we know all about the available type guards, we will briefly look at where we can use type guards. There are a limited number of places that type guards can be used. The most common place they are used is in a &lt;code&gt;if/else&lt;/code&gt; block, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// value has type 'string' in this block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// value does NOT have type 'string' in this block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we can use type guards in an &lt;code&gt;if/else&lt;/code&gt; block, then you might expect that we can also use them with the ternary operator, since it's a shorthand for an &lt;code&gt;if/else&lt;/code&gt; block. And you would be correct!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="cm"&gt;/* value has type 'string' in this block */&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="cm"&gt;/* value does NOT have type 'string' in this block */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition, since &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#cfa-aliased-conditions"&gt;TypeScript 4.4&lt;/a&gt;, we can use type guards with aliased conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// value has type 'string' in this block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// value does NOT have type 'string' in this block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beyond just &lt;code&gt;if/else&lt;/code&gt;, type guards can also be used in a &lt;code&gt;while&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// value has type 'string' in this block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, type guards are also compatible with a &lt;code&gt;switch/case&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// value has type 'string' in this block&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Type guards are conditional checks that allow types to be refined from one type to another, allowing us to write code that is type-safe and easy to write at the same time. Since TypeScript is a superset of JavaScript, many common operators like &lt;code&gt;typeof&lt;/code&gt; or &lt;code&gt;instanceof&lt;/code&gt; act as type guards. But, we can also use custom type guards to verify &lt;em&gt;any&lt;/em&gt; condition and &lt;em&gt;any&lt;/em&gt; type, given enough effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;In general, I would recommend using the type guard that feels the most natural, which will come from experience. Don't write a custom type guard function when a simple &lt;code&gt;typeof&lt;/code&gt; check can suffice. However, it may be necessary to write a custom type guard.&lt;/p&gt;

&lt;p&gt;To summarize the strengths of each type guard, here is a summary table.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type guard&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Boolean / truthiness&lt;/td&gt;
&lt;td&gt;Rule out falsy values like &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Equality&lt;/td&gt;
&lt;td&gt;Narrow multiple possible types down to a single type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Narrow a type to a primitive type (like &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Check if a value is an instance of a specific class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Check if a property can be accessed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assertion function&lt;/td&gt;
&lt;td&gt;Assert invariants that should always be true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Custom type guard function&lt;/td&gt;
&lt;td&gt;Check that a type meets some arbitrary conditions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If this article was helpful, let me know on Twitter at &lt;a href="https://twitter.com/cammchenry"&gt;@cammchenry&lt;/a&gt;! If you enjoy guides like this, consider signing up for my mailing list to be notified when new posts are published.&lt;/p&gt;

&lt;p&gt;Good luck, and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
