<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>RoadMap to dive into the world of Machine Learning</title>
      <author>Mansi Saxena</author>
      <pubDate>Fri, 20 Aug 2021 19:23:11 +0000</pubDate>
      <link>https://dev.to/saxenamansi/roadmap-to-dive-into-the-world-of-machine-learning-5179</link>
      <guid>https://dev.to/saxenamansi/roadmap-to-dive-into-the-world-of-machine-learning-5179</guid>
      <description>&lt;p&gt;If you've been reading about the amazing advancements in the world of Artificial Intelligence and Machine Learning but feel overwhelmed by its complexity, this post is just for you! After reading this blog, you should have a clear understanding of how to embark on this journey of learning Machine Learning the right way, so stick with me till the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;First things first, what are the pre-requisites of learning Machine Learning? Just knowing the programming languages are not enough; you must know the mathematics behind each algorithm too. The important topics one must familiarize themselves with are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linear Algebra &lt;/li&gt;
&lt;li&gt;Calculus&lt;/li&gt;
&lt;li&gt;Statistics&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have a mathematical background, &lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; is a good place to get started on the basics. This Coursera Specialization, &lt;a href="https://www.coursera.org/specializations/mathematics-machine-learning"&gt;Mathematics for Machine Learning&lt;/a&gt; is also a good resource if you can devote long hours for MOOCs. Other resources are mentioned in these links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://analyticsindiamag.com/7-top-linear-algebra-resources-for-machine-learning-beginners/"&gt;For Linear Algebra&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.analyticsvidhya.com/resource-statitics/"&gt;For Statistics&lt;/a&gt;&lt;br&gt;
&lt;a href="https://machinelearningmastery.com/calculus-books-for-machine-learning/"&gt;For Calculus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with Calculus, I would recommend you to go through one of the books given in the link above and understand the basics of differentiation and integration as it is essential to the path to becoming a Machine Learning expert. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-fundamentals"&gt;
  &lt;/a&gt;
  Coding fundamentals
&lt;/h2&gt;

&lt;p&gt;Once you have gotten confident with your math, shift your focus to the coding part. Many languages are used for writing Machine Learning programs, like Python, R, Java and so on. However, python is the most recommended because of its several libraries and frameworks that have simplified the task of writing complex code. Another reason I would recommend Python is because there are far more Machine Learning tutorials written in python than there are in R. Thus, it is easier for a python programmer to get help from the data science community than an R programmer. However, R is also known for its various data visualization libraries. Thus, there is no harm in learning both languages and utilizing their best features. You can always learn one and move to the next. For a beginner, I would recommend python. &lt;/p&gt;

&lt;p&gt;There are several resources to learn basic python but my favorite one is this Coursera specialization, &lt;a href="https://www.coursera.org/specializations/python"&gt;Python for Everybody&lt;/a&gt; by Charles Russell Severance of University of Michigan. If this does not suit you, you may try other resources given in this &lt;a href="https://mikkegoes.com/learn-python-online-best-resources/"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voila, you finally have all the pre-requites you need to get started on your journey into the world of Machine Learning!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-the-first-step"&gt;
  &lt;/a&gt;
  Taking the first step
&lt;/h2&gt;

&lt;p&gt;The first step is to complete these two renowned courses. One will teach you about the Mathematics behind each Machine Learning algorithm by none other than the great Andrew NG, and the other one will focus on the programming part. You may choose to do them simultaneously. Take your time with them as this will lay the foundations for this field.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/machine-learning?"&gt;Machine Learning by Andrew NG&lt;/a&gt;, Stanford University. You do not have to buy the course; you may audit it too. Just focus on watching all the videos in this course. There is also a YouTube playlist with all the videos in this course which I will link &lt;a href="https://www.youtube.com/playlist?list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN"&gt;here&lt;/a&gt;. If you really are a ML-nerd, you'll be hooked on this course! (PS: if you do not know who Andrew NG is, google him RIGHT NOW, you won't regret it ;). &lt;/li&gt;
&lt;li&gt;The second course is &lt;a href="https://dev.toPython%20for%20Data%20Science%20and%20Machine%20Learning%20Bootcamp"&gt;Python for Data Science and Machine Learning Bootcamp&lt;/a&gt; by Jose Portilla. This course can be a little heavy as it is introduces you to all the major programming concepts used in Machine Learning. So take your time with it and keep trying out the codes and functions taught in the course yourself, just listening to videos will not help much until you get your hands dirty. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#getting-your-hands-dirty"&gt;
  &lt;/a&gt;
  Getting your hands dirty
&lt;/h2&gt;

&lt;p&gt;While coding, if you get stuck with an error and you are unable to solve it, search the error on &lt;a href="https://stackoverflow.com/"&gt;stack overflow&lt;/a&gt;. There would definitely be someone who has been in your shoes before and has suffered through the error that you are facing now. Read through the answers and solutions that others have suggested to solve the error. On the off chance that the error you are facing is not encountered by anyone else, post your own query. Don't be shy; you'd be surprised at how beginner-friendly and helpful the data science community is. After all - everyone was once a beginner. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-what-you-learnt-starting-with-some-baby-projects"&gt;
  &lt;/a&gt;
  Applying what you learnt - Starting with some baby projects
&lt;/h2&gt;

&lt;p&gt;After completing these courses, you can safely say that you now have a good understanding of the classical algorithms! You can now start working on some baby projects. Find datasets on Kaggle that interest you and put your newly learnt python skills to use. You may also try going through the code that other developers have written. However, some of it might be too complex - so do not be too hard on yourself if you are unable to understand all of it. With each dataset that you work with, you will learn new functions and concepts of data cleaning, data augmentation, preprocessing, data encoding and so on. &lt;/p&gt;

&lt;p&gt;The codes of some of the baby projects that I had made are on my GitHub. They should be easy to follow, not too complex. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saxenamansi/HR_Analytics_Employee_Retention"&gt;HR Analytics Employee Retention using Logistic Regression&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Breast_Cancer_DecisionTree_Classifier"&gt;Breast Cancer Classification using Decision Trees&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Data_Cleaning_Preprocessing/blob/main/DataCleaningPreprocessing.ipynb"&gt;Cleaning Student Profile Data&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Healthcare_dataset_pandas_preprocessing"&gt;Preprocessing and Cleaning Stroke Data&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Recognizing_Hand_Written_Digits"&gt;Recognizing Hand Written Digits using PCA and SVM techniques&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/Credit_Card_Data_Clustering"&gt;Clustering Credit Card Data using Gaussian Mixtures and PCA&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/KMeans_Clustering_Of_GeoLocationsns"&gt;Clustering Geo-Locations using K-Means clustering&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/ImageProcessing_using_Numpy_Matplotlib"&gt;Using Numpy and Matplotlib for Image Processing&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Australian-fires%20(Visualisation).ipynb"&gt;Data Visualization of Australian Wildfires&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Mushroom%20classification%20-%20project.ipynb"&gt;Comparing the classification algorithms for Mushroom Classification&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/C4-projects/blob/master/CreditCard%20fraud%20-%20classification.ipynb"&gt;Comparing the classification algorithms for Credit Card Frauds&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/C4-projects/blob/master/Household%20-electricity-consumption.ipynb"&gt;Data Visualization and Comparing the classification algorithms for Household Electricity Consumption&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/saxenamansi/MSTC_DataScience_Tasks/blob/master/Projects/Math_Portugese_course.ipynb"&gt;Data Visualization and Comparing the classification algorithms for grades of Maths and Portuguese class students&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would urge you to first try them yourselves, and then check my codes for reference. Whenever you come across a new function, read the documentation and check what it does. Make sure you understand all of it. &lt;/p&gt;

&lt;p&gt;And that's it! &lt;/p&gt;

&lt;p&gt;With this, you should now have a concrete understanding of the Machine Learning algorithms and how to use them. You should also be fairly acquainted with some data cleaning, data preprocessing and data visualization techniques. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-learning-the-path-after-machine-learning"&gt;
  &lt;/a&gt;
  Deep Learning - the path after Machine Learning
&lt;/h2&gt;

&lt;p&gt;If you have found the journey up till now interesting, you may dive into the Deep Learning as well. The best way to do so is by getting started with this in-depth &lt;a href="https://www.coursera.org/specializations/deep-learning"&gt;Deep Learning specialization by Andrew NG&lt;/a&gt;. It will require some dedication as it consists of 5 courses, but it is very thorough and you will not need any material apart from this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-path-from-here-to-becoming-a-data-scientist"&gt;
  &lt;/a&gt;
  Your path from here to becoming a Data Scientist
&lt;/h2&gt;

&lt;p&gt;When you start on this path of Data Science, you must be aware that in this domain, learning never stops. Once you complete the above specialization you can continue on this path by - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Participating in Kaggle competitions.&lt;/li&gt;
&lt;li&gt;Reading the best research papers in the topics from your interest. &lt;/li&gt;
&lt;li&gt;Doing more MOOCs from Coursera. I would recommend the courses from the DeepLearning.ai foundation.&lt;/li&gt;
&lt;li&gt;Start working on your own projects. Try developing them into products for common users to use. You may also try publishing it in a reputed journal. &lt;/li&gt;
&lt;li&gt;Share your knowledge with the world - help other beginners on stack overflow and write blogs. &lt;/li&gt;
&lt;li&gt;Push your work to GitHub for others to learn from. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do like this post if it helped you. If you have any other suggestions or recommendations, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Happy Learning! &amp;lt;3 &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Running Containerized Microservices on AWS | AWS White Paper Summary
</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 20 Aug 2021 19:17:57 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/running-containerized-microservices-on-aws-aws-white-paper-summary-54o8</link>
      <guid>https://dev.to/awsmenacommunity/running-containerized-microservices-on-aws-aws-white-paper-summary-54o8</guid>
      <description>&lt;ul&gt;
&lt;li&gt;This whitepaper is intended for architects and developers who want to run containerized applications at scale in production on Amazon Web Services (AWS). &lt;/li&gt;
&lt;li&gt;&lt;p&gt;This document provides guidance for application lifecycle management, security, and architectural software design patterns for container-based applications on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also discusses architectural best practices for adoption of containers on AWS, and how traditional software design patterns evolve in the context of containers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It leverages Martin Fowler’s principles of microservices and map them to the twelve-factor app pattern and real-life considerations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After reading this paper, you will have a starting point for building microservices using best practices and software design patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microservices are an architectural and organizational approach to software development in which software is composed of small, independent services that communicate to each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are diﬀerent ways microservices can communicate, but the two commonly used protocols are HTTP request/response over well-deﬁned APIs, and lightweight asynchronous messaging.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microservices architectures make applications easier to scale and faster to develop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This enables innovation and accelerates time-to-market for new features. Containers also provide isolation and packaging for software, and help you achieve more deployment velocity and resource density.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As proposed by Martin Fowler, the characteristics of a microservices architecture include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Componentization via services&lt;/li&gt;
&lt;li&gt;Organized around business capabilities&lt;/li&gt;
&lt;li&gt;Products not projects&lt;/li&gt;
&lt;li&gt;Smart endpoints and dumb pipes&lt;/li&gt;
&lt;li&gt;Decentralized governance&lt;/li&gt;
&lt;li&gt;Decentralized data management&lt;/li&gt;
&lt;li&gt;Infrastructure automation&lt;/li&gt;
&lt;li&gt;Design for failure&lt;/li&gt;
&lt;li&gt;Evolutionary design&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The twelve factors are a set of best practices for building modern applications that are optimized for cloud computing. The twelve factors cover four key areas: deployment, scale, portability, and architecture:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Codebase - One codebase tracked in revision control, many deploys&lt;/li&gt;
&lt;li&gt;Dependencies - Explicitly declare and isolate dependencies&lt;/li&gt;
&lt;li&gt;Conﬁg - Store conﬁgurations in the environment&lt;/li&gt;
&lt;li&gt;Backing services - Treat backing services as attached resources&lt;/li&gt;
&lt;li&gt;Build, release, run - Strictly separate build and run stages&lt;/li&gt;
&lt;li&gt;Processes - Execute the app as one or more stateless processes&lt;/li&gt;
&lt;li&gt;Port binding - Export services via port binding&lt;/li&gt;
&lt;li&gt;Concurrency - Scale out via the process model&lt;/li&gt;
&lt;li&gt;Disposability - Maximize robustness with fast startup and graceful shutdown&lt;/li&gt;
&lt;li&gt;Dev/prod parity - Keep development, staging, and production as similar as possible&lt;/li&gt;
&lt;li&gt;Logs - Treat logs as event streams&lt;/li&gt;
&lt;li&gt;Admin processes - Run admin/management tasks as one-oﬀ processes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#componentization-via-services"&gt;
  &lt;/a&gt;
  Componentization Via Services
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In a microservices architecture, software is composed of small independent services that communicate over well-deﬁned APIs.&lt;/li&gt;
&lt;li&gt;An analogy can be drawn to the Walkman portable audio cassette players that were popular in the 1980s: batteries bring power, audio tapes are the medium, headphones deliver output, while the main tape player takes input through key presses. Using them together plays music.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly, microservices need to be decoupled, and each should focus on one functionality. Additionally, a microservices architecture allows for replacement or upgrade. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the Walkman analogy, if the headphones are worn out, you can replace them without replacing the tape player. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Through modularization, microservices oﬀer developers the freedom to design each feature as a black box. That is, microservices hide the details of their complexity from other components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any communication between services happens by using well-deﬁned APIs to prevent implicit and hidden dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container images allow for modularity in services. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They are constructed by building functionality onto a base image. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers, operations teams, and IT leaders should agree on base images that have the security and tooling proﬁle that they want. These images can then be shared throughout the organization as the initial building block. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replacing or upgrading these base images is as simple as updating the FROM ﬁeld in a Dockerﬁle and rebuilding, usually through a Continuous Integration/Continuous Delivery (CI/CD) pipeline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are the key factors from the twelve-factor app pattern methodology that play a role in componentization:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies (explicitly declare and isolate dependencies) – Dependencies are self-contained within the container and not shared with other services.&lt;/li&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – Disposability is leveraged and satisﬁed by containers that are easily pulled from a repository and discarded when they stop running.&lt;/li&gt;
&lt;li&gt;Concurrency (scale out via the process model) – Concurrency consists of tasks or pods (made of containers working together) that can be auto scaled in a memory- and CPU-eﬃcient manner.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#organized-around-business-capabilities"&gt;
  &lt;/a&gt;
  Organized Around Business Capabilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Before microservices, system architecture would be organized around technological capabilities such as user interface, database, and server-side logic. &lt;/li&gt;
&lt;li&gt;In a microservices-based approach, as a best practice, each development team owns the lifecycle of its service all the way to the customer. &lt;/li&gt;
&lt;li&gt;For example, a recommendations team might own development, deployment, production support, and collection of customer feedback.&lt;/li&gt;
&lt;li&gt;Organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations. "Conway's Law"&lt;/li&gt;
&lt;li&gt;When architecture and capabilities are organized around atomic business functions, dependencies between components are loosely coupled. As long as there is a communication contract between services and teams, each team can run at its own speed. &lt;/li&gt;
&lt;li&gt;With this approach, the stack can be polyglot, meaning that developers are free to use the programming languages that are optimal for their component.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, the user interface can be written in JavaScript or HTML5, the backend in Java, and data processing can be done in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are key factors from the twelve-factor app pattern methodology that play a role in organizing around capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Codebase (one codebase tracked in revision control, many deploys) –Each microservice owns its own codebase in a separate repository and throughout the lifecycle of the code change.&lt;/li&gt;
&lt;li&gt;Build, release, run (strictly separate build and run stages) – Each microservice has its own deployment pipeline and deployment frequency. This allows the development teams to run microservices at varying speeds so they can be responsive to customer needs.&lt;/li&gt;
&lt;li&gt;Processes (execute the app as one or more stateless processes) – Each microservice does one thing and does that one thing really well. The microservice is designed to solve the problem at hand in the best possible manner.&lt;/li&gt;
&lt;li&gt;Admin processes (run admin/management tasks as one-oﬀ processes) – Each microservice has its own administrative or management tasks so that it functions as designed. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To achieve a microservices architecture that is organized around business capabilities, use popular microservices design patterns. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A design pattern is a general, reusable solution to a commonly occurring problem within a giving context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Popular miscroservice design patterns include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggregator Pattern – A basic service which invokes other services to gather the required information or achieve the required functionality. This is beneﬁcial when you need an output by combining data from multiple microservices.&lt;/li&gt;
&lt;li&gt;API Gateway Design Pattern – API Gateway also acts as the entry point for all the microservices and creates ﬁne-grained APIs for diﬀerent types of clients. It can fan out the same request to multiple microservices and similarly aggregate the results from multiple microservices.&lt;/li&gt;
&lt;li&gt;Chained or Chain of Responsibility Pattern – Chained or Chain of Responsibility Design Patterns produces a single output which is a combination of multiple chained outputs. object.&lt;/li&gt;
&lt;li&gt;Asynchronous Messaging Design Pattern – In this type of microservices design pattern, all the services can communicate with each other, but they do not have to communicate with each other sequentially and they usually communicate asynchronously.&lt;/li&gt;
&lt;li&gt;Database or Shared Data Pattern – This design pattern will enable you to use a database per service and a shared database per service to solve various problems. These problems can include duplication of data and inconsistency, diﬀerent services have diﬀerent kinds of storage requirements, few business transactions can query the data, and with multiple services and de-normalization of data.&lt;/li&gt;
&lt;li&gt;Event Sourcing Design Pattern – This design pattern helps you to create events according to change of your application state.&lt;/li&gt;
&lt;li&gt;Command Query Responsibility Segregator (CQRS) Design Pattern – This design pattern enables you to divide the command and query. Using the common CQRS pattern, where the command part will handle all the requests related to CREATE, UPDATE, DELETE while the query part will take care of the materialized views.&lt;/li&gt;
&lt;li&gt;Circuit Breaker Pattern – This design pattern enables you to stop the process of the request and response when the service is not working. For example, when you need to redirect the request to a diﬀerent service after certain number of failed request intents.&lt;/li&gt;
&lt;li&gt;Decomposition Design Pattern – This design pattern enables you to decompose an application based on business capability or on based on the sub-domains.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#products-not-projects"&gt;
  &lt;/a&gt;
  Products Not Projects
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Companies that have mature applications with successful software adoption and who want to maintain and expand their user base will likely be more successful if they focus on the experience for their customers and end users.&lt;/li&gt;
&lt;li&gt;To stay healthy, simplify operations, and increase eﬃciency, your engineering organization should treat software components as products that can be iteratively improved and that are constantly evolving.&lt;/li&gt;
&lt;li&gt;When software architecture is broken into small microservices, it becomes possible for each microservice to be an individual product. &lt;/li&gt;
&lt;li&gt;For internal microservices, the end user of the product is another team or service. &lt;/li&gt;
&lt;li&gt;For an external microservice, the end user is the customer.&lt;/li&gt;
&lt;li&gt;The core beneﬁt of treating software as a product is improved end-user experience. &lt;/li&gt;
&lt;li&gt;When your organization treats its software as an always-improving product rather than a one-oﬀ project, it will produce code that is better architected for future work.&lt;/li&gt;
&lt;li&gt;The following are key factors from the twelve-factor app pattern methodology that play a role in adopting a product mindset for delivering software:

&lt;ul&gt;
&lt;li&gt;Build, release, run – Engineers adopt a devops culture that allows them to optimize all three stages.&lt;/li&gt;
&lt;li&gt;Conﬁg – Engineers build better conﬁguration management for software due to their involvement with how that software is used by the customer.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Software treated as a product can be iteratively developed in smaller pieces that take less time to complete and deploy than long-running projects, which enables development and production to be closer in parity.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#smart-endpoints-and-dumb-pipes"&gt;
  &lt;/a&gt;
  Smart Endpoints and Dumb Pipes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two primary forms of communication between services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request/Response – One service explicitly invokes another service by making a request to either store data in it or retrieve data from it. For example, when a new user creates an account, the user service makes a request to the billing service to pass oﬀ the billing address from the user’s proﬁle so that that billing service can store it.&lt;/li&gt;
&lt;li&gt;Publish/Subscribe – Event-based architecture where one service implicitly invokes another service that was watching for an event. For example, when a new user creates an account, the user service publishes this new user signup event and the email service that was watching for it is triggered to email the user asking them to verify their email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The core beneﬁt of building smart endpoints and dumb pipes is the ability to decentralize the architecture, particularly when it comes to how endpoints are maintained, updated, and extended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One goal of microservices is to enable parallel work on diﬀerent edges of the architecture that will not conﬂict with each other. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building dumb pipes enables each microservice to encapsulate its own logic for formatting its outgoing responses or supplementing its incoming requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in building smart endpoints and dumb pipes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Port Binding – Services bind to a port to watch for incoming requests and send requests to the port of another service. The pipe in between is just a dumb network protocol such as HTTP.&lt;/li&gt;
&lt;li&gt;Backing services – Dumb pipes allow a background microservice to be attached to another microservice in the same way that you attach a database.&lt;/li&gt;
&lt;li&gt;Concurrency – A properly designed communication pipeline between microservices allows multiple microservices to work concurrently. For example, several observer microservices may respond and begin work in parallel in response to a single event produced by another microservice.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decentralized-governance"&gt;
  &lt;/a&gt;
  Decentralized Governance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Decentralized governance is an approach that works well alongside microservices to enable engineering organizations to tackle this challenge. &lt;/li&gt;
&lt;li&gt;Traﬃc lights are a great example of decentralized governance. &lt;/li&gt;
&lt;li&gt;City traﬃc lights may be timed individually or in small groups, or they may react to sensors in the pavement.&lt;/li&gt;
&lt;li&gt;Decentralized governance helps remove potential bottlenecks that would prevent engineers from being able to develop the best code to solve business problems.&lt;/li&gt;
&lt;li&gt;Decentralized governance means that each team can use its expertise to choose the best tools to solve their speciﬁc problem. &lt;/li&gt;
&lt;li&gt;Forcing all teams to use the same database, or the same runtime language, isn’t reasonable because the problems they’re solving aren’t uniform.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in enabling decentralized governance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies – Decentralized governance allows teams to choose their own dependencies, so dependency isolation is critical to make this work properly.&lt;/li&gt;
&lt;li&gt;Build, release, run – Decentralized governance should allow teams with diﬀerent build processes to use their own toolchains, yet should allow releasing and running the code to be seamless, even with diﬀering underlying build tools.&lt;/li&gt;
&lt;li&gt;Backing services – If each consumed resource is treated as if it was a third-party service, then decentralized governance allows the microservice resources to be refactored or developed in diﬀerent ways, as long as they obey an external contract for communication with other services.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decentralized-data-management"&gt;
  &lt;/a&gt;
  Decentralized Data Management
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All data-bound communication should be enabled via services that encompass the data. As a result, each service team chooses the most optimal data store type and schema for their application.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decentralized data management enhances application design by allowing the best data store for the job to be used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in organizing around capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – The services should be robust and not dependent on externalities. This principle further allows for the services to run in a limited capacity if one or more components fail.&lt;/li&gt;
&lt;li&gt;Backing services (treat backing services as attached resources) – A backing service is any service that the app consumes over the network such as data stores, messaging systems, etc. Typically, backing services are managed by operations. The app should make no distinction between a local and an external service.&lt;/li&gt;
&lt;li&gt;Admin processes (run admin/management tasks as one-oﬀ processes) – The processes required to do the app’s regular business, for example, running database migrations. Admin processes should be run in a similar manner, irrespective of environments.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;To achieve a microservices architecture with decoupled data management, the following software design patterns can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controller – Helps direct the request to the appropriate data store using the appropriate mechanism.&lt;/li&gt;
&lt;li&gt;Proxy – Helps provide a surrogate or placeholder for another object to control access to it.&lt;/li&gt;
&lt;li&gt;Visitor – Helps represent an operation to be performed on the elements of an object structure.&lt;/li&gt;
&lt;li&gt;Interpreter – Helps map a service to data store semantics.&lt;/li&gt;
&lt;li&gt;Observer – Helps deﬁne a one-to-many dependency between objects so that when one object changes state, all of its dependents are notiﬁed and updated automatically.&lt;/li&gt;
&lt;li&gt;Decorator – Helps attach additional responsibilities to an object dynamically. Decorators provide a ﬂexible alternative to sub-classing for extending functionality.&lt;/li&gt;
&lt;li&gt;Memento – Helps capture and externalize an object's internal state so that the object can be returned to this state later.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-automation"&gt;
  &lt;/a&gt;
  Infrastructure Automation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in evolutionary design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Codebase (one codebase tracked in revision control, many deploys) – Because the infrastructure can be described as code, treat all code similarly and keep it in the service repository.&lt;/li&gt;
&lt;li&gt;Conﬁg (store conﬁgurations in the environment) – The environment should hold and share its ow speciﬁcities.&lt;/li&gt;
&lt;li&gt;Build, release, run (strictly separate build and run stages) – One environment for each purpose.&lt;/li&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – This factor transcends the process layer and bleeds into such downstream layers as containers, virtual machines, and virtual private cloud.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Keep development, staging, and production as similar as possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ultimately, the goal is to enable developers to push code updates and have the updated application sent to multiple environments in minutes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are many ways to successfully deploy in phases, including the blue/green and canary methods. With the blue/green deployment, two environments live side by side, with one of them running a newer version of the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traﬃc is sent to the older version until a switch happens that routes all traﬃc to the new environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this case, we use a switch of target groups behind a load balancer in order to redirect traﬃc from the old to the new resources. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another way to achieve this is to use services fronted by two load balancers and operate the switch at the DNS level.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBteOWMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130197899-91a39937-5abb-4024-b795-fd0a434edfea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBteOWMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130197899-91a39937-5abb-4024-b795-fd0a434edfea.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-for-failure"&gt;
  &lt;/a&gt;
  Design for Failure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Everything fails all the time&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are the key factors from the twelve-factor app pattern methodology that play a role in designing for failure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disposability (maximize robustness with fast startup and graceful shutdown) – Produce lean container images and strive for processes that can start and stop in a matter of seconds.&lt;/li&gt;
&lt;li&gt;Logs (treat logs as event streams) – If part of a system fails, troubleshooting is necessary. Ensure that material for forensics exists.&lt;/li&gt;
&lt;li&gt;Dev/prod parity – Keep development, staging, and production as similar as possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modern container management services allow developers to retrieve near real-time, event-driven updates on the state of containers. Docker supports multiple logging drivers. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Ho6yKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248108-20e52ba1-76e3-4fb1-a2e1-adcd57534097.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Ho6yKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248108-20e52ba1-76e3-4fb1-a2e1-adcd57534097.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container monitoring solutions use metric capture, analytics, transaction tracing and visualization.&lt;/li&gt;
&lt;li&gt;Container monitoring covers basic metrics like memory utilization, CPU usage, CPU limit and memory limit. &lt;/li&gt;
&lt;li&gt;Container monitoring also oﬀers the real-time streaming logs, tracing and observability that containers need.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#evolutionary-design"&gt;
  &lt;/a&gt;
  Evolutionary Design
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The following are the key factors from the twelve-factor app pattern methodology that play a role in evolutionary design:&lt;br&gt;
• Codebase (one codebase tracked in revision control, many deploys) – Helps evolve features faster since new feedback can be quickly incorporated.&lt;br&gt;
• Dependencies (explicitly declare and isolate dependencies) – Enables quick iterations of the design since features are tightly coupled with externalities.&lt;br&gt;
• Conﬁguration (store conﬁgurations in the environment) – Everything that is likely to vary between deploys (staging, production, developer environments, etc.). Conﬁg varies substantially across deploys, code does not. With conﬁgurations stored outside code, the design can evolve irrespective of the environment.&lt;br&gt;
• Build, release, run (strictly separate build and run stages) – Help roll out new features using various deployment techniques. Each release has a speciﬁc ID and can be used to gain design eﬃciency and user feedback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following software design patterns can be used to achieve an evolutionary design:&lt;br&gt;
• Sidecar extends and enhances the main service.&lt;br&gt;
• Ambassador creates helper services that send network requests on behalf of a consumer service or application.&lt;br&gt;
• Chain provides a deﬁned order of starting and stopping containers.&lt;br&gt;
• Proxy provides a surrogate or placeholder for another object to control access to it.&lt;br&gt;
• Strategy deﬁnes a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from the clients that use it.&lt;br&gt;
• Iterator provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.&lt;br&gt;
• Service Mesh is a dedicated infrastructure layer for facilitating service-to-service communications between microservices, using a proxy. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment strategies such as a Canary release provide added agility to evolve design based on user feedback. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Canary release is a technique that’s used to reduce the risk inherent in a new software version release. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a canary release, the new software is slowly rolled out to a small subset of users before it’s rolled out to the entire infrastructure and made available to everybody. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the diagram that follows, a canary release can easily be implemented with containers using AWS primitives. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a container announces its health via a health check API, the canary directs more traﬃc to it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The state of the canary and the execution is maintained -using Amazon DynamoDB, Amazon Route 53 , Amazon CloudWatch, Amazon Elastic Container Service (Amazon ECS), and AWS Step Functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuWoGAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248884-5e1cda6e-134c-4871-aec7-83f00a90c31e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuWoGAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130248884-5e1cda6e-134c-4871-aec7-83f00a90c31e.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microservices can be designed using the twelve-factor app pattern methodology and software design patterns enable you to achieve this easily. These software design patterns are well known. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If applied in the right context, they can enable the design beneﬁts of microservices. AWS provides a wide range of primitives that can be used to enable containerized microservices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/running-containerized-microservices/running-containerized-microservices.pdf#welcome"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>microservices</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What do you want to know about how Facebook builds software? Answer to be featured on our podcast 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 20 Aug 2021 18:39:03 +0000</pubDate>
      <link>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</link>
      <guid>https://dev.to/devteam/what-do-you-want-to-know-about-how-facebook-builds-software-answer-to-be-featured-on-our-podcast-2j9o</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-do-you-want-to-know-about-how-facebook-builds-software"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do you want to know about how Facebook builds software?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, August 25th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. A new season launched just a few weeks ago 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>facebook</category>
    </item>
    <item>
      <title>How to setup a headless Raspberry Pi - clearly explained  (beginner's friendly)</title>
      <author>Cecília Coelho </author>
      <pubDate>Fri, 20 Aug 2021 18:34:05 +0000</pubDate>
      <link>https://dev.to/ceciliacoelho/how-to-setup-a-headless-raspberry-pi-clearly-explained-beginner-s-friendly-4aph</link>
      <guid>https://dev.to/ceciliacoelho/how-to-setup-a-headless-raspberry-pi-clearly-explained-beginner-s-friendly-4aph</guid>
      <description>&lt;p&gt;In this beginner's friendly tutorial we will be setting up a Raspberry Pi (aka Pi) without an external monitor and keyboard (some of us just have a laptop 🤷‍♀️) in 4 simple steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1-getting an OS into the microSD card; &lt;/li&gt;
&lt;li&gt;2-allowing remote access in a local network; &lt;/li&gt;
&lt;li&gt;3-discovering the address and connecting in terminal; &lt;/li&gt;
&lt;li&gt;4-viewing the desktop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, a small discussion on how to choose an Operating System (OS) for a headless setup is also given, so you can later play around if you wish too 😉. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-we-will-be-using"&gt;
  &lt;/a&gt;
  📝 What we will be using:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Laptop&lt;/li&gt;
&lt;li&gt;Raspberry Pi 4 &lt;/li&gt;
&lt;li&gt;MicroSD card (whatever size you want, bigger is better)&lt;/li&gt;
&lt;li&gt;Power supply&lt;/li&gt;
&lt;li&gt;Ethernet cable (optional but recommended)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#step-1-getting-an-os-in-the-microsd-card"&gt;
  &lt;/a&gt;
  Step 1: Getting an OS in the microSD card
&lt;/h3&gt;

&lt;p&gt;Install an imaging utility that will get an OS into our microSD card. The easiest, and thanks to the Raspberry Pi Foundation team, is to use the official Raspberry Pi Imager (get it here: &lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/"&gt;https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/&lt;/a&gt;). &lt;br&gt;
After installing, insert your microSD card into your laptop and open the Raspberry Pi Imager, you will be greeted by the screen in Figure 1 (a). &lt;br&gt;
To see the given OS options click the "choose OS" button (Figure 1 (b)), the most straightforward option is to go with the recommended Raspberry Pi OS (32-bit). That's us! 🙋‍♀️🙋‍♂️&lt;br&gt;
Choose the microSD as storage, click the write button and wait till a pop-up message appears stating to remove the card. &lt;br&gt;
Note that the Imager has a whole lot of options including: two more versions of the Raspberry OS (Figure 1 (c)); other general OS (Figure 1 (d)) and several focused OS that we will skip (for now at least).&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPv4_c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awfs5oex6hit9y585wdl.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 1.&lt;/strong&gt;  Raspberry Pi Imager interface: (a) main window; (b) choose OS options; (c) Raspberry Pi OS options; (d) other general OS options.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you are feeling adventurous you can go ahead and Pick other OS, the steps will be identical, you just need to pay attention to some details:&lt;/p&gt;

&lt;p&gt;❗ &lt;strong&gt;You can jump to step 2 if you don't want details about OS choices&lt;/strong&gt; ❗&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Headless friendly&lt;/strong&gt; - Since we are doing a headless setup (no monitor), we need to make sure the OS supports it or you won't be able to access your Pi, in the first boot up, using your laptop. I learned this the hard way after some experimentation (and a lot of headaches) 😓.  The only OS option you need to be careful with is the Manjaro-ARM Linux. If you want to try it make sure to choose the minimal version since all others will require a monitor to do the initial setup. (To check if an OS has headless setup you can check the documentation of the release);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Different distributions&lt;/strong&gt; - All OS available in the Imager are Debian except Manjaro, which is Arch based. The commands used with Debian won't work when using Manjaro;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt; - If you are running low on resources (4GB microSD card) or you are "The Scrooge McDuck" 🤑 of storage, you may have noticed that  there are options that take roughly half the space of others! The Raspberry Pi OS has three versions: Lite, that doesn't include a Graphical User Interface (GUI) so you can only use the terminal (hacker style!); the recommended includes a GUI; Full includes a GUI and some pre-installed software. If you are a beginner and want to try a no-GUI version but are not sure if you will regret it, don't worry, you can always install a GUI using the terminal (coming soon); 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt; - Are you a beginner that wants to discover Linux or have a specific project in mind? If you want to use you Raspberry Pi to host a Git server, a cloud storage or something similar, you won't be needing a GUI, and doing so will just waste resources, so you can choose a version without a desktop environment (like Raspberry Pi OS Lite or Manjaro ARM Minimal).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-2-allowing-remote-access-in-a-local-network"&gt;
  &lt;/a&gt;
  Step 2: Allowing remote access in a local network
&lt;/h3&gt;

&lt;p&gt;Insert the microSD card into your laptop so we can modify it to tell our Pi we are going to access remotely, using what is called SSH. &lt;br&gt;
Open the file explorer, you will see a bunch of folders and files, create a new file without extension called "ssh", you should see something like Figure 2.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVe_hm-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgoyia830cj92nf5h6gc.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 2.&lt;/strong&gt;  The created SSH file should look like this.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This file will make the Pi enable SSH when it turns on, and thus making it possible for us to access it using our laptop's terminal when both are on the same network.&lt;br&gt;&lt;br&gt;
To connect the Pi to the same network as your laptop you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ethernet cable: Plug the cable onto the Pi and your internet router and you're ready to go!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wifi: Just like the ssh file, create a file named "wpa_supplicant.conf". This will store your wifi's name and password so the Pi will read this file when starting and connect to your wifi. Open the created file and copy/paste the following and substitute the "WIFI_NAME" and "WIFI_PASSWORD" fields with the login details:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev

 update_config=1

country=US

network={

    ssid="WIFI_NAME"

    psk="WIFI_PASSWORD"

    scan_ssid=1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-discovering-the-address-and-connecting-in-terminal"&gt;
  &lt;/a&gt;
  Step 3: Discovering the address and connecting in terminal
&lt;/h3&gt;

&lt;p&gt;Remove the microSD card from your laptop, plug it into your Raspberry Pi and connect a power supply. You will see a green light turning on, this means our Pi is now alive! 🤗&lt;br&gt;
Now, go to your laptop and open the terminal (in Windows it's called Command Prompt). &lt;br&gt;
Now we are going to check if the Pi was able to connect to our network, use the command &lt;code&gt;ping raspberrypi&lt;/code&gt; and you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pinging raspberrypi.local [192.168.50.166] with 32 bytes of data:
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64
Reply from 192.168.50.166: bytes=32 time&amp;lt;1ms TTL=64

Ping statistics for 192.168.50.166:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is like the Pi shouting "I'm alive!" 🎉 and it tells where its home is in case we want to go over and say hi (don't forget the 🥧), mine lives at 192.168.50.166. &lt;br&gt;
You now know your Pi's address so let's access it using &lt;code&gt;ssh pi@192.168.50.166&lt;/code&gt;.  It will ask you for a password, since it's the first login then it has to be the default one, use &lt;code&gt;raspberry&lt;/code&gt; (the prompt won't move, it's normal). If you were successful the location on your terminal should have changed to &lt;code&gt;pi@raspberrypi:~ $&lt;/code&gt;, this means we are now working in the Raspberry Pi!&lt;/p&gt;

&lt;p&gt;❗ Note that if you choose an OS other than Raspberry Pi OS (also referred as Raspbian), the default user (pi) and password (raspberry) may be different, you know who to ask 🧐. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-viewing-the-desktop"&gt;
  &lt;/a&gt;
  Step 4:  Viewing the desktop
&lt;/h3&gt;

&lt;p&gt;The terminal is great but we want to see the Graphical User Interface to play around with Linux in a more friendly way. To do this we need a software that allows to control a remote desktop, we are going to use VNC Server. &lt;br&gt;
First let's make sure our Pi has the latest updates, on the terminal do,&lt;br&gt;
&lt;code&gt;pi@raspberrypi:~ $ sudo apt-get update&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pi@raspberrypi:~ $ sudo apt-get upgrade&lt;/code&gt;&lt;br&gt;
and wait (quick, run and grab some coffee 🏃‍♂️☕).&lt;br&gt;
Now we need to install the VNC Server using &lt;code&gt;sudo apt–get install realvnc–vnc–server realvnc–vnc–viewer&lt;/code&gt; (if it gives an error and you copy/paste the command try rewriting the dashes, sometimes it pastes a double dash 🙄).&lt;br&gt;
When the installation finishes we need to enable it, do,&lt;br&gt;
&lt;code&gt;sudo raspi-config&lt;/code&gt;&lt;br&gt;
a pop-up window will appear, Figure 3. Use the arrows and return button to go to "3: Interface Options" -&amp;gt; "P3 VNC" and select "Yes".&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeOWSXrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5idpldpi0qjyq24gv9ec.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 3.&lt;/strong&gt; Configuration options pop-up window.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Almost done! Now we have to install the VNC Viewer in our laptop, I use RealVNC (find it here: &lt;a href="https://www.realvnc.com/en/connect/download/viewer/"&gt;https://www.realvnc.com/en/connect/download/viewer/&lt;/a&gt;).&lt;br&gt;
After installing, launch the software and write your Pi address on the top bar and hit enter, Figure 4. A pop-up window will ask for your credentials to access, after that you will be able to see your Raspberry Pi's desktop! &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBxB_87l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a26i17n9t0wu3zs1y61y.png" alt="Figure"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Figure 4.&lt;/strong&gt; Accessing the Raspberry Pi desktop with VNC Viewer by entering its address. After doing this the first time, an icon will appear to ease future accesses.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;p&gt;❗❗ If all you can see is a black screen go back to the Pi's terminal and do &lt;code&gt;sudo raspi-config&lt;/code&gt;. Navigate to "Display Options" -&amp;gt; "Resolution" and choose an option other than "default". Reboot you Pi &lt;code&gt;sudo reboot&lt;/code&gt; and try accessing again on the VNC Viewer. It should work now!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#thats-it-now-its-play-time"&gt;
  &lt;/a&gt;
  That's it! Now it's play time! 🥳🥳🥳🥳
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#dont-worry-if-you-mess-up-something-you-can-always-redo-all-this-steps-and-youll-have-a-fresh-os-to-destroy-again"&gt;
  &lt;/a&gt;
  Don't worry, if you mess up something you can always redo all this steps and you'll have a fresh OS to destroy again! 😈🔪
&lt;/h2&gt;

</description>
      <category>linux</category>
      <category>raspberrypi</category>
      <category>beginners</category>
      <category>ssh</category>
    </item>
    <item>
      <title>My streaming setups since Dec</title>
      <author>whykay 👩🏻‍💻🐈🏳️‍🌈 (she/her)</author>
      <pubDate>Fri, 20 Aug 2021 18:32:51 +0000</pubDate>
      <link>https://dev.to/whykay/my-streaming-setups-since-dec-2m57</link>
      <guid>https://dev.to/whykay/my-streaming-setups-since-dec-2m57</guid>
      <description>&lt;p&gt;Wow, it's August already! And yip, since December, my streaming setup has gotten a bit more shinier (might be a little bit complex but meant to make life easier for me, I was promising myself 😆)&lt;/p&gt;

&lt;p&gt;So here's a timeline of the ever changing setups, even some seem very small, but it's all experimentation from running PyLadies Dublin (monthly), Dublin Maker virtual Festival, collaborating and participating in various other events. So here we go, lots of piccies coming up with some gifs thrown in. 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#january"&gt;
  &lt;/a&gt;
  January
&lt;/h2&gt;

&lt;p&gt;Playing with the ATEM Mini, connected up my Nintendo Switch and Animal Crossing. I had ideas of running a meetup or conference (inspired by &lt;a href="https://desertedisland.club/"&gt;Deserted Island DevOps&lt;/a&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXCzAAOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86wrnx0rrvte51u6ckpq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXCzAAOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86wrnx0rrvte51u6ckpq.jpeg" alt="1ACC3A05-6980-472F-8264-4CBE3AE5E92B_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My new setup&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zuEYf-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1fiabiz70l4wigvwxwy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zuEYf-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1fiabiz70l4wigvwxwy.jpeg" alt="A9F3D6B4-DB08-4884-B12F-2587F3951E79_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playing with my Elgato Streamdeck&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0GsKQXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp6y4klei4pfn062ijgy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0GsKQXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp6y4klei4pfn062ijgy.jpeg" alt="695C9B80-5AC6-4D42-BC94-1AC220623B37_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My setup for the first PyLadies Dublin of the year with special guest from Imagi Labs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKMmlgnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqln903hx7q96iyvi2u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKMmlgnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lqln903hx7q96iyvi2u.jpeg" alt="21610F2E-97B4-4CE1-85F6-37DD65CE2097_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My OBS scenes all set up just a click away on my Streamdeck.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLoFtBvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67crqt1kr3e3tx3p5wq5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLoFtBvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67crqt1kr3e3tx3p5wq5.jpeg" alt="B8E3592B-1A12-43D3-B905-8EF1F50BA943_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pano pic of my new setup.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3mdkraN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/867z8gaa170wt9n1eq3y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3mdkraN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/867z8gaa170wt9n1eq3y.jpeg" alt="8E85D403-44AB-4E84-ACC5-5B4B195DE2A6_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problems-with-this-new-setup"&gt;
  &lt;/a&gt;
  Problems with this new setup
&lt;/h3&gt;

&lt;p&gt;This looked like a great idea at the time, if you had someone sitting at the iMac looking after OBS. I thought having all the buttons will help when I'm seated at the white table. When we had audio issues, I had to jump out of my seat and tried to fix problems on the main desk where OBS is streaming from zoom to Youtube. I also can't remember if it's this meetup that I had the wrong stream going on Youtube, and before I could tell everyone which stream to jump onto, they were booted out. But they all just went to the main Youtube channel and jumped on the correct live-stream. So lesson learnt that when you remove a live-stream, there's no warning for viewers. I was so proud of the fact before this happened that I had a couple of live-streams scheduled, all smugly prepped. But I clicked on the wrong one. Whoops.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQOcmOYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/grtLXNKvEXmxxfpO14/giphy.gif%3Fcid%3Decf05e474oztxnp6jg5vd1h0cjnhsh7e2my7miradntrdv5i%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQOcmOYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/grtLXNKvEXmxxfpO14/giphy.gif%3Fcid%3Decf05e474oztxnp6jg5vd1h0cjnhsh7e2my7miradntrdv5i%26rid%3Dgiphy.gif%26ct%3Dg" alt="whoops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also learnt people are very forgiving and are very nice. So learning so many things at once and definitely if all hands on deck when things are live-streamed. So I do a more respect for those streamers who run these by themselves and they play games, moderate, answer questions, deal with problems live on air, create content all the time, and more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#march"&gt;
  &lt;/a&gt;
  March
&lt;/h2&gt;

&lt;p&gt;Testing lighting (only had 1 x &lt;a href="https://www.elgato.com/en/key-light-air"&gt;Elgato Key Light Air&lt;/a&gt; LED panel and 1 x &lt;a href="https://www.amazon.co.uk/Ultra-thin-Batteries-3200-5600K-Brightness-Interview/dp/B07TYLGFD5"&gt;Raleno LED Panel&lt;/a&gt;). Before Mick got me the first Elgato LED Panel, I used the Raleno one and a desklamp. I reflected the desklamp light towards a reflector on its silver side. The gold side made my complexion yellower. So it was a lot of trial an error to get colour of my skin tone as close as possible when I'm capturing myself on camera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i22KiA1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d59yodz04hwktj4jyg3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i22KiA1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d59yodz04hwktj4jyg3.jpeg" alt="D080CCF1-3A26-424D-A562-1CD2BA2F8AC8_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36AzJvsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x596i1r3wu5zamvsmmhm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36AzJvsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x596i1r3wu5zamvsmmhm.jpeg" alt="E2BC0B8F-7E9A-417A-9A20-710FFFAEA88D_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#april"&gt;
  &lt;/a&gt;
  April
&lt;/h2&gt;

&lt;p&gt;Cleared the table beside me and we got &lt;a href="https://www.elgato.com/en/multi-mount-system"&gt;Elgato Multi-clap system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also we got ourselves a &lt;a href="https://lumecube.com/products/panel-mini"&gt;Lumecube Panel Mini&lt;/a&gt; which has a diffuser. It's very portable, and you can control its brightness. And did I say it's portable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xz3Hux7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkb0bjgc519yhie4hiys.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xz3Hux7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkb0bjgc519yhie4hiys.jpeg" alt="C7C035E0-4291-4BE9-B247-350A9F9EC3D1_1_105_c"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoTOqDzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2r84bdsnyvluwdauxq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoTOqDzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2r84bdsnyvluwdauxq.jpeg" alt="C232DE5D-6031-4DB9-B571-F870204C2444_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4XWmyby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r2xg26xa1jpqskgi1f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4XWmyby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r2xg26xa1jpqskgi1f.jpeg" alt="CB32D8BF-5721-44BE-9C6C-3A9CAA139BE9_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course Shadow had to check out another new setup.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCyo1rsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qs6j6a6dx0st9ocxvx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCyo1rsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qs6j6a6dx0st9ocxvx.jpeg" alt="84662166-4FE6-4B00-9981-ABB6D317B21C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esSe62Lr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jovwtig99vztbpl3n9e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esSe62Lr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jovwtig99vztbpl3n9e.jpeg" alt="77B317B8-370B-400E-9CED-B4C9F49E742E_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#may"&gt;
  &lt;/a&gt;
  May
&lt;/h2&gt;

&lt;p&gt;After getting new standing desk&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3CMaV8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p0k5va1zf12c8fu0yrv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3CMaV8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p0k5va1zf12c8fu0yrv.jpeg" alt="C92711DE-F4C6-47E4-82F7-3C5ECD67718F_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfIprTR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70g4m20j4vhwvd9s91mj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfIprTR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70g4m20j4vhwvd9s91mj.jpeg" alt="2B36309D-4E3E-4DF6-9117-340367C9931A_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lol, those cables. 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2SEqOd5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf06sl9hop8tz982f57g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SEqOd5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf06sl9hop8tz982f57g.jpeg" alt="79DBE86F-E0BC-434D-A3EF-89ABA7CB126A_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#june-getting-ready-for-dublin-maker"&gt;
  &lt;/a&gt;
  June - Getting ready for Dublin Maker!
&lt;/h2&gt;

&lt;p&gt;It's a month away, but so many bits and pieces and Mick had a great time bringing our &lt;a href="https://shop.pimoroni.com/products/picade?variant=29210087489619"&gt;Picade&lt;/a&gt; upstairs from our living room.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSnCEsxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2xoulk6ilkt8yzv4dug.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSnCEsxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2xoulk6ilkt8yzv4dug.jpeg" alt="EC64582F-7973-4A8D-A293-DCC8B8665128_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spot the black cat!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b17svQCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn7tyc0vpl5gsfr1jmet.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b17svQCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kn7tyc0vpl5gsfr1jmet.jpeg" alt="8233B14A-0B04-447F-9B50-148C0C1C2601_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, easier during day time&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uyx85HeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrn9n2gysaattmg31nx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uyx85HeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrn9n2gysaattmg31nx.jpeg" alt="D45B3820-06B6-482E-A4E2-40AAF0D4CAAC_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DT9bOm3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5snla80m7ngl3bnh5zof.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DT9bOm3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5snla80m7ngl3bnh5zof.jpeg" alt="4A7AF043-52B2-4EA0-865D-CB6CD5673222_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#july-moar-dublin-maker-prepping"&gt;
  &lt;/a&gt;
  July - Moar Dublin Maker prepping
&lt;/h2&gt;

&lt;p&gt;Still working out setup, it's a bit more complex for Dublin Maker, but I was running PyLadies Dublin virtual meetup and also hosted a session during EuroPython. &lt;/p&gt;

&lt;p&gt;Hence the signage I put up, it's upcycled piece of cardboard (already stand-like) and I added a white poster board in front, and then I would add logos of whichever event I'm in to the front. You saw it in the previous pic above.. only started to change it for these events.&lt;/p&gt;

&lt;p&gt;And I found &lt;a href="https://rasterbator.net"&gt;rasterbator.net&lt;/a&gt; to create the large poster (2 x A4), was so cool to see this still around, it's been around for decades afaik.&lt;/p&gt;

&lt;p&gt;Mick found that if you tilt the LED strip (purple pink) instead of pointing up, it gives a nice reflective glow. And we tilted the LED flood light which I now leave changing colours gives a nice blend when all the (blackout) blinds are down. The effect is better when it's much darker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ4WoQmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub55d3mcyonomj49tysw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ4WoQmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub55d3mcyonomj49tysw.jpeg" alt="3042F31A-CA31-4804-BD64-4FD5FC2D866C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lighting"&gt;
  &lt;/a&gt;
  Lighting
&lt;/h3&gt;

&lt;p&gt;LED panels off &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMLbzjh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwh09ntfiu2s3o611xhq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMLbzjh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwh09ntfiu2s3o611xhq.jpeg" alt="DCB30081-104F-437A-A1E1-E7951F5677E1_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ah better, LED panels on (using 2 x Elgato Key Light Air LED panels). Yup, got ourselves a second one as we were super happy with the first one. Very much worth it. And I can control it with a button push on my Streamdeck.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AyoDJNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmuuxeld620yx9vxk5gy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AyoDJNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmuuxeld620yx9vxk5gy.jpeg" alt="89770859-0BCF-4F96-9B54-C27F0B82C376_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aJvjXna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi8pu4rw3ejlhzig2mhb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aJvjXna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi8pu4rw3ejlhzig2mhb.jpeg" alt="1CD9224F-7521-48DF-A722-165253B2F18C_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and an elusive black and white kitteh called Queenie makes a special appearance! 😆&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOjU05VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p900k86hd2ozgazmhb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOjU05VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p900k86hd2ozgazmhb4.png" alt="C879D2CC-82D1-48AD-A255-C0C24DD3EB99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Current setup&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9C2vSXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcultb62v41kxriby8xk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9C2vSXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcultb62v41kxriby8xk.jpeg" alt="8916D892-CAA3-4817-8565-D7BE5A4EE6F4_1_105_c"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#still-found-problems"&gt;
  &lt;/a&gt;
  Still found problems
&lt;/h3&gt;

&lt;p&gt;Still not working as expect like for PyLadies Dublin August meetup.&lt;/p&gt;

&lt;p&gt;I normally run a live-raffle via my announcements scene (on OBS) - just myself and browser. I decided to change last minute to include a guest to announce the prizes over zoom. So when I shared my browser over zoom, only people on zoom saw it but not my live viewers on Youtube Live!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5UnUS2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xT0GqtpF1NWd9VbstO/giphy.gif%3Fcid%3Decf05e47o9v6uf0lv1mb2d5udlci4xkzg5afmr08x3rdolmd%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5UnUS2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xT0GqtpF1NWd9VbstO/giphy.gif%3Fcid%3Decf05e47o9v6uf0lv1mb2d5udlci4xkzg5afmr08x3rdolmd%26rid%3Dgiphy.gif%26ct%3Dg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My normal running order (before that last minute change):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zoom -&amp;gt; OBS -&amp;gt; Youtube Live&lt;/li&gt;
&lt;li&gt;Guest speakers are on Zoom&lt;/li&gt;
&lt;li&gt;Usual running order when live button is clicked:

&lt;ul&gt;
&lt;li&gt;Starting looping video&lt;/li&gt;
&lt;li&gt;Countdown scene&lt;/li&gt;
&lt;li&gt;Announcements and myself (directly in OBS)&lt;/li&gt;
&lt;li&gt;Intermission while getting speaker set up&lt;/li&gt;
&lt;li&gt;Speaker with slides on Zoom&lt;/li&gt;
&lt;li&gt;Intermission for 2nd speaker set up&lt;/li&gt;
&lt;li&gt;Speaker with slides on Zoom&lt;/li&gt;
&lt;li&gt;Everyone on Zoom (gallery view)&lt;/li&gt;
&lt;li&gt;If live-raffle, switch back to Announcements scene&lt;/li&gt;
&lt;li&gt;End with outro video&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What would I do differently?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the ATEM mini and connect up my laptop as another input to share the announcements and live raffle. I've done this before, and it works really well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#future-upcoming-plans"&gt;
  &lt;/a&gt;
  Future upcoming plans
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;More Coding Grace videos - we use the Atem Mini to switch between cameras, feed from the Pi-Top for coding, and our feed from my Nintendo Switch with Animal Crossing (Mick is a visitor to my island). I've uploaded the videos so far here in this series here on Dev: &lt;a href="https://dev.to/whykay/series/12422"&gt;https://dev.to/whykay/series/12422&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I'll say it again, make more use of the &lt;a href="https://www.blackmagicdesign.com/products/atemmini"&gt;ATEM Mini&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;I made a video along with other Makers on how to make your own video, maybe this might be of use to you as well, playlist is at &lt;a href="https://www.youtube.com/playlist?list=PLAagJ_L-cqBEWAn-eUmlqN4wz9368fCBG"&gt;https://www.youtube.com/playlist?list=PLAagJ_L-cqBEWAn-eUmlqN4wz9368fCBG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1HsVQSpxG78"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/THU6n3kbkNg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UujMhooKpJU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MdvOwXYfQ2k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>streaming</category>
      <category>gadgets</category>
    </item>
    <item>
      <title>My Website Development Journey with I4G x HNGi8 (Zuri Team)</title>
      <author>Anne Ojoh</author>
      <pubDate>Fri, 20 Aug 2021 18:24:30 +0000</pubDate>
      <link>https://dev.to/annieoj/my-website-development-journey-with-i4g-x-hngi8-zuri-team-23o9</link>
      <guid>https://dev.to/annieoj/my-website-development-journey-with-i4g-x-hngi8-zuri-team-23o9</guid>
      <description>&lt;p&gt;‘Life is a daring adventure or nothing at all’.&lt;/p&gt;

&lt;p&gt;In this day and age where the world is developing and being more technology inclined, it is only appropriate to be informed, skilled and dispensible to give value.&lt;/p&gt;

&lt;p&gt;I’ve always been a creative-inclined person, what other way to develop on that than learning to build, and design websites. I dived into tech without a single doubt and it’s only one way from here; up!&lt;/p&gt;

&lt;p&gt;Starting this journey of self-improvement, I scrubbed the internet, as you know, the internet is an unending pool of information, I found articles, videos and tutorials that helped me understand the basics of web-development and alot more,( a few of which I will share at the end of this article). While searching, I stumbled upon this amazing opportunity to learn an aspect of tech as an intern with a community called the Zuri Team.&lt;/p&gt;

&lt;p&gt;Zuri Team in partnership with Ingressive For Good are conducting an internship; the HNG Internship is a long running, large scale virtual internship for people learning to code and design. It focuses on the post-training phase, and creates a virtual work environment for participants to grow either as a beginner, intermediate or an expert.&lt;br&gt;
The internship involves tracks in: Front-End Development, Backend Development, Mobile Development, UI/UX design, and Digital Marketing as core tracks, while DevOps and Entrepreneurship as sub-tracks. It is fast paced with access to various mentors of different tracks to guide one through the 8-weeks duration of the internship.&lt;/p&gt;

&lt;p&gt;Hopping on this bandwagon, I enrolled for the Backend development track to begin with and I am more than excited starting this journey of web-development with a growing community. At the end of the 8-weeks duration, I hope to have achieved;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A reasonable skill level working with PHP, Python and JavaScript, and cloud tools such as AWS or Azure cloud services as a Backend Developer.&lt;/li&gt;
&lt;li&gt;Build a wide network of developers and mentors to connect with, share and build projects together.
Build projects easily that solve real world problems and create value to society.&lt;/li&gt;
&lt;li&gt;Have an impressionable portfolio of projects worked on.
It already started as quite an interesting ride and I cannot wait to grab these new skills while sharpening the creative knots in my head ;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The amazing team; The Zuri Team in partnership with Ingressive For Good always come up with great opportunities you wouldn’t want to miss out on, I wouldn’t either! You can read more about them here; &lt;a href="https://internship.zuri.team"&gt;https://internship.zuri.team&lt;/a&gt; and follow their social media pages on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/thezuriteam"&gt;https://twitter.com/thezuriteam&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/thezuriteam"&gt;https://instagram.com/thezuriteam&lt;/a&gt;&lt;br&gt;
Youtube: &lt;a href="https://youtube.com/c/TheZuriTeam"&gt;https://youtube.com/c/TheZuriTeam&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/company/zuri-team"&gt;https://www.linkedin.com/company/zuri-team&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Finally, I’m certain you are as curious minded as I am and would love to emcompass knowledge and gain valuable skills, you can go through the links below for basic beginner’s guide and tutorials to some aspects of tech and web development. See it as an arm from me to you to join me on my tech-knowledge seeking journey!&lt;/p&gt;

&lt;p&gt;Designing with Figma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/FTFaQWZBqQ8"&gt;https://youtu.be/FTFaQWZBqQ8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designing with Git and Github: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/USjZcfj8yxE"&gt;https://youtu.be/USjZcfj8yxE&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learning HTML: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/qz0aGYrrlhU"&gt;https://youtu.be/qz0aGYrrlhU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beginner’s guide to CSS: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/1Rs2ND1ryYc"&gt;https://youtu.be/1Rs2ND1ryYc&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Basic Tutorials in Python:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/rfscVS0vtbw"&gt;https://youtu.be/rfscVS0vtbw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP for beginners: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2eebptXfEvw"&gt;https://youtu.be/2eebptXfEvw&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;JavaScript Beginner’s Course: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/PkZNo7MFNFg"&gt;https://youtu.be/PkZNo7MFNFg&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;NodeJs For Beginners: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TlB_eWDSMt4"&gt;https://youtu.be/TlB_eWDSMt4&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learning Flutter: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/pTJJsmejUOQ"&gt;https://youtu.be/pTJJsmejUOQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin Beginner’s guide: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/SXLmr4Qp4OM"&gt;https://youtu.be/SXLmr4Qp4OM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’re welcome! ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>techtalks</category>
      <category>devops</category>
    </item>
    <item>
      <title>isJsonStructure() CFML User-Defined Function</title>
      <author>James Moberg</author>
      <pubDate>Fri, 20 Aug 2021 18:19:11 +0000</pubDate>
      <link>https://dev.to/gamesover/isjsonstructure-cfml-user-defined-function-1kg9</link>
      <guid>https://dev.to/gamesover/isjsonstructure-cfml-user-defined-function-1kg9</guid>
      <description>&lt;p&gt;Apparently strings, numbers, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered valid JSON even though they consist of a single escaped value. (I recently &lt;a href="https://dev.to/gamesover/isjson-insertescapedstring-true-really-2kdf"&gt;discovered this&lt;/a&gt; while accepting API data from a third-party and they accidentally double-encoded the JSON body payload.&lt;/p&gt;

&lt;p&gt;To prevent this issue from occurring again, I wrote a CFML User-Defined Function (UDF) to test whether a string can successfully parsed to an object and/or array (versus accepting an invalid simple value).  Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isjsonstructurestring-typeany"&gt;
  &lt;/a&gt;
  isJsonStructure(string, type="any")
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/JamoCA/e153c2ea40bfd75b60d180fbb709fe5b"&gt;https://gist.github.com/JamoCA/e153c2ea40bfd75b60d180fbb709fe5b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebdmGVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgrfweicflad1v34c4ky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebdmGVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgrfweicflad1v34c4ky.png" alt="function comparisons between isJson and isJsonStructure"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>coldfusion</category>
      <category>cfml</category>
      <category>json</category>
    </item>
    <item>
      <title>Docker setup for yarn workspaces</title>
      <author>Siddharth Venkatesh</author>
      <pubDate>Fri, 20 Aug 2021 18:06:44 +0000</pubDate>
      <link>https://dev.to/sidv93/docker-setup-for-yarn-workspaces-4pnj</link>
      <guid>https://dev.to/sidv93/docker-setup-for-yarn-workspaces-4pnj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As monorepos seem to be having their moment in the developer community right now, we can see quite a bit of new monorepo tools popping up. npm recently announced &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces"&gt;npm workspaces&lt;/a&gt; with version 7, &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt; has been gaining a lot popularity and &lt;a href="https://github.com/lerna/lerna"&gt;lerna&lt;/a&gt; has been around for quite a while now. I use &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt; in most of my projects now, and thought it would be fun to explore &lt;a href="https://yarnpkg.com/features/workspaces/"&gt;yarn workspaces&lt;/a&gt; with a simple monorepo setup.&lt;/p&gt;

&lt;p&gt;In this workspace, I am going to be adding two React applications. Further, we can also add docker support to make it easier for deployments. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialising-the-workspace"&gt;
  &lt;/a&gt;
  Initialising the workspace
&lt;/h2&gt;

&lt;p&gt;Let's start by creating a folder for our project and initialise yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir yarn-docker-setup
cd yarn-docker-setup
yarn init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you do not have yarn installed already, you can install by &lt;code&gt;npm install yarn -g&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After filling out basic questions, you would have a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To turn this project into a workspace, we need to add &lt;code&gt;workspaces&lt;/code&gt; option in our &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"workspaces": ["apps/*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;apps&lt;/code&gt; is a directory where all our apps live.&lt;br&gt;
Great! We've initialised our workspace, next step is to add applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-apps"&gt;
  &lt;/a&gt;
  Adding apps
&lt;/h2&gt;

&lt;p&gt;We're going to be adding two React applications to this project namely &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt;. I'm using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; to scaffold our apps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create react-app apps/admin
yarn create react-app apps/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would take a couple of minutes to finish and by the end you would have two folders called &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; inside the &lt;code&gt;apps&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Great! We've added two apps to our workspace. The next step is let yarn know about each app's dependencies, so it can optimise and cache them. In the project root folder, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This goes through the dependencies and moves them to a central &lt;code&gt;node_modules&lt;/code&gt; folder in the project's root.&lt;/p&gt;

&lt;p&gt;Let's test out our setup to see everything works. Let's add scripts in our &lt;code&gt;package.json&lt;/code&gt; to start and build our apps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "admin": "yarn workspace admin start",
    "product": "yarn workspace product start",
    "build:admin": "yarn workspace admin build",
    "build:product": "yarn workspace product build"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've also added build scripts to compile our apps into static files.&lt;br&gt;
If we run &lt;code&gt;yarn admin&lt;/code&gt; or &lt;code&gt;yarn product&lt;/code&gt;, we should see the standard create react app screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N35ho9jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5xff49wngki2svk7eeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N35ho9jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5xff49wngki2svk7eeg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-docker-support"&gt;
  &lt;/a&gt;
  Adding Docker support
&lt;/h2&gt;

&lt;p&gt;Docker provides us with a simple and effective way to package our apps into images that could be run anywhere without any dependence on the environment or operating system. With docker-compose, we can orchestrate multiple services(apps) with a simple configuration. Going too much into docker and docker-compose maybe a bit out of reach for this article, so let's dive into the docker setup.&lt;/p&gt;

&lt;p&gt;First step is add a &lt;code&gt;Dockerfile&lt;/code&gt;. We can add individual Dockerfiles for each app, but since the build process is same for both the apps, we can use a single Dockerfile for both of them.&lt;/p&gt;

&lt;p&gt;First, we need a &lt;code&gt;node&lt;/code&gt; environment to compile our React projects, and we need the name of the folder which we need to build, in this case &lt;code&gt;admin&lt;/code&gt; or &lt;code&gt;product&lt;/code&gt;. We get that using the &lt;code&gt;BUILD_CONTEXT&lt;/code&gt; argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:14.17.1 as build
ARG BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to copy over the source code into the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WORKDIR /base
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are defining &lt;code&gt;/base&lt;/code&gt; as our working directory. All our code goes here.&lt;br&gt;
In the next 3 lines, we are copying &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;yarn.lock&lt;/code&gt; and the &lt;code&gt;package.json&lt;/code&gt; file of the particular app into the image.&lt;br&gt;
Then we run &lt;code&gt;yarn install&lt;/code&gt; to install our dependencies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Interesting thing to note here is, we could have copied our entire source code into the container in one go. The reason we don't do that is, every instruction in a Dockerfile is cached in the background. By copying just the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;yarn.lock&lt;/code&gt; files, we can take advantage of this caching system. These files rarely change in the course of the project, so if we install our dependencies once, and if they don't change the next time we build, Docker will use the existing cache and not run &lt;code&gt;yarn install&lt;/code&gt; every-time we build. This will significantly reduce our build times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to copy the app's code and build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, as of now our &lt;code&gt;Dockerfile&lt;/code&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:14.17.1 as build
ARG BUILD_CONTEXT

WORKDIR /fe
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our compilation step is complete. Our React app has been compiled into static files and they are inside the image. But order to serve them, we need a web server. We could use &lt;code&gt;node&lt;/code&gt; as our web server as we are already using it for building. But a node image is significantly bigger(close to a gigabyte) in size compared to a traditional web server like &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll add nginx configuration as part our build step in our &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM nginx:stable-alpine
ARG BUILD_CONTEXT
COPY --from=build /fe/apps/$BUILD_CONTEXT/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two lines are self-explanatory.&lt;br&gt;
The third line is where is gets interesting. If you see the first line of our &lt;code&gt;Dockerfile&lt;/code&gt;, it says &lt;code&gt;as build&lt;/code&gt; next to our node version. This is done so we can refer to this as context in later parts of our build steps.&lt;br&gt;
We have our compiled React app in the &lt;code&gt;node&lt;/code&gt; image. We need to take those files and put it in our &lt;code&gt;nginx&lt;/code&gt; image. That's what this line does. It copies the &lt;code&gt;/fe/apps/$BUILD_CONTEXT/build&lt;/code&gt; folder from &lt;code&gt;build&lt;/code&gt; context into &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;.&lt;br&gt;
The last line is to start our &lt;code&gt;nginx&lt;/code&gt; web server.&lt;/p&gt;

&lt;p&gt;The next step is to define an &lt;code&gt;nginx.conf&lt;/code&gt; config file nginx can use to run our app, which looks like this. This is a barebones nginx web server configuration which can be used for any frontend application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

  listen 80;

  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our entire &lt;code&gt;Dockerfile&lt;/code&gt; now looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#build
FROM node:14.17.1 as build
ARG BUILD_CONTEXT

WORKDIR /base
COPY package.json .
COPY yarn.lock .
COPY ./apps/$BUILD_CONTEXT/package.json apps/$BUILD_CONTEXT/
RUN yarn install
COPY ./apps/$BUILD_CONTEXT apps/$BUILD_CONTEXT
RUN yarn build:$BUILD_CONTEXT

#webserver
FROM nginx:stable-alpine
ARG BUILD_CONTEXT
COPY --from=build /base/apps/$BUILD_CONTEXT/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This setup is enough for us to build a Docker image of our app and run by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run &amp;lt;image-name&amp;gt; -e BUILD_CONTEXT=admin/product
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to go a bit further and add in an orchestration step using &lt;a href="https://docs.docker.com/compose/"&gt;docker-compose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this, we need to add a &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3'

services:
  admin:
    container_name: admin
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=admin
    ports:
      - '8080:80'
  product:
    container_name: product
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=product
    ports:
      - '8082:80'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define two services here, &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; for our two apps.&lt;br&gt;
In our service section, we define three properties, &lt;code&gt;container_name&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;ports&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;container_name&lt;/code&gt; defines the name of the container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;context&lt;/code&gt; in &lt;code&gt;build&lt;/code&gt; refers to the directory this build needs to be executed on, &lt;code&gt;dockerfile&lt;/code&gt; refers to the name and location of the &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; refer to build time arguments. These are the arguments that will be used in the &lt;code&gt;Dockerfile&lt;/code&gt; &lt;code&gt;ARG&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ports&lt;/code&gt; lets us map ports on the host machine to the container port. Value &lt;code&gt;8082:80&lt;/code&gt; indicates that any request on port 8082 on host machine will be routed to port 80 on the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Awesome! We are done with our docker-compose setup. Final thing left to do is run and see for ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;command is used to build out both our apps. This will compile our app using instructions from our &lt;code&gt;Dockerfile&lt;/code&gt; and create an image.&lt;/p&gt;

&lt;p&gt;To run these images,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will take our images and create containers and run them.&lt;/p&gt;

&lt;p&gt;Now we can go to &lt;code&gt;http://localhost:8080&lt;/code&gt; and &lt;code&gt;http://localhost:8082&lt;/code&gt; to see our apps in action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What we have now is a very simple implementation of workspace and docker setup. We can use this as a starting point and start adding backend services and component libraries to this setup. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in setting up a component library from scratch, check out my article on &lt;a href="https://dev.to/sidv93/component-library-setup-with-react-typescript-and-rollup-onj"&gt;Setting up a component library with React, TypeScript and Rollup&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can add new projects into the &lt;code&gt;apps&lt;/code&gt; folder and yarn would take care of the dependency resolutions for us. &lt;/p&gt;

&lt;p&gt;The source code for this setup can be found &lt;a href="https://github.com/sidv93/yarn-worspace-docker"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>yarn</category>
      <category>docker</category>
      <category>react</category>
    </item>
    <item>
      <title>How create Glitch Effect 🤖 Pure CSS</title>
      <author>Roden</author>
      <pubDate>Fri, 20 Aug 2021 17:56:07 +0000</pubDate>
      <link>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</link>
      <guid>https://dev.to/kerthin/how-create-pure-css-glitch-effect-530p</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Today I would like to talk about how to make a Glitch effect using CSS. To do this, I will use one of the most popular options. This is when we use &lt;code&gt;pseudo-elements&lt;/code&gt; to create &lt;code&gt;copies&lt;/code&gt; of the main element.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;HTML&lt;/h1&gt;

&lt;p&gt;In the HTML section, we need to create just 1 tag, inside which you should write the text, and also duplicate it in the &lt;code&gt;data-text&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like that:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Glitch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Glitch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can specify any tag. It is not necessary to use text tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQxcyV3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dffcyd5hxixnjxzbc3w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;CSS&lt;/h1&gt;

&lt;p&gt;We need to take into account that the &lt;code&gt;pseudo-elements&lt;/code&gt; of our text should be located approximately at the same &lt;code&gt;position&lt;/code&gt; as the &lt;code&gt;main text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, for &lt;code&gt;pseudo-elements&lt;/code&gt;, we need to specify the &lt;code&gt;position&lt;/code&gt; property with the value &lt;code&gt;absolute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our text and its copies are on top of each other.&lt;/p&gt;

&lt;p&gt;Before we continue creating the Glitch effect, it would be nice to add styles to our text to make it look more beautiful.&lt;/p&gt;

&lt;p&gt;To do this, I will make our &lt;code&gt;sans-serif&lt;/code&gt; font, the font size is &lt;code&gt;larger&lt;/code&gt;, we create &lt;code&gt;shadows&lt;/code&gt; and a &lt;code&gt;linear gradient&lt;/code&gt; that completely &lt;code&gt;copies&lt;/code&gt; our text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;glitch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;repeating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;005792&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fff&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHjScgaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x019i2uhfa2vxr3j2g9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Changing pseudo-elements&lt;/h3&gt;

&lt;p&gt;Now we need to shift each of our pseudo-elements in different directions. This is necessary in order to create the effect of shifting the text, as it happens during glitches.&lt;/p&gt;

&lt;p&gt;To do this, we need to &lt;code&gt;move&lt;/code&gt; each pseudo-element in the opposite direction from &lt;code&gt;each other&lt;/code&gt; by a couple of &lt;code&gt;pixels&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I decided to make the color of the pseudo-elements shadows the same as the main one, but you can make them different, in order to achieve the effect of a broken TV using &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; colors.&lt;/p&gt;

&lt;h3&gt;Clip&lt;/h3&gt;

&lt;p&gt;Next, we need to use the clip property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The clip property defines the area of the positioned element in which its contents will be displayed. Anything that doesn't fit in this area will be cut off and become invisible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTpMkAmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owlgh73z21ifex7v9kjb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use this property to alternately display the &lt;code&gt;cropped parts&lt;/code&gt; of our pseudo elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(Y1, X1, Y2, X2);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The values are the distance from the edge of the element to the clipping area.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;clip: rect(&lt;code&gt;top&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;bottom&lt;/code&gt;/&lt;code&gt;left&lt;/code&gt;);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, in order to &lt;code&gt;completely crop&lt;/code&gt; our pseudo-elements, we set an indent of &lt;code&gt;900 pixels&lt;/code&gt; on the right side. (You can use any value depending on the size of your element)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$secondaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$primaryColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is very important that the background property of pseudo-elements is exactly the same as that of the background, so that they merge and there are no problems with the display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o65xbm6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0wfmknvx3e87nm3rgi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Clip Animation&lt;/h3&gt;

&lt;p&gt;In order to qualitatively animate our elements, we need to create a step-by-step animation, where we will change the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;third&lt;/code&gt; values in the &lt;code&gt;clip&lt;/code&gt; property, so that our pseudo-elements are displayed only in parts during the animation from top to bottom.&lt;/p&gt;

&lt;p&gt;In this case, the &lt;code&gt;second&lt;/code&gt; and &lt;code&gt;fourth&lt;/code&gt; values of the &lt;code&gt;clip&lt;/code&gt; property must be unchanged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$steps&lt;/span&gt;&lt;span class="p"&gt;))}{&lt;/span&gt;
            &lt;span class="na"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally, I use a &lt;code&gt;20-step&lt;/code&gt; animation, but you can specify any number of steps, since the animation is still &lt;code&gt;random&lt;/code&gt; and generates changes in the values of the &lt;code&gt;clip&lt;/code&gt; property itself. The more steps you specify, the &lt;code&gt;faster&lt;/code&gt; the animation will be.&lt;/p&gt;

&lt;p&gt;And now we just need to attach our animation to our two pseudo-elements. You also need to specify a different animation playback time for each pseudo-element. To achieve a more chaotic glitch animation effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fd5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's all.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/bmrbJW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it. This was a very simple and very popular way to create a glitch effect on pure CSS. Thank you very much for your time on my post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't switch.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n47fwcZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiQyohZdXceENvkcM/giphy.gif%3Fcid%3D790b76118a5d78e9e679d4656834dea41a593b3e721efb63%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Starting a project with Svelte and Azure Static Web Apps</title>
      <author>Christopher Harrison</author>
      <pubDate>Fri, 20 Aug 2021 17:47:26 +0000</pubDate>
      <link>https://dev.to/geektrainer/starting-a-project-with-svelte-and-azure-static-web-apps-1da2</link>
      <guid>https://dev.to/geektrainer/starting-a-project-with-svelte-and-azure-static-web-apps-1da2</guid>
      <description>&lt;p&gt;I love &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=academic-39081-chrhar"&gt;Azure Static Web Apps&lt;/a&gt;. Yes, I know, I work for Microsoft, so you're probably thinking I would say that regardless. However I really do use what I feel works best for me, and Static Web Apps absolutely fits the bill. It's a wonderful service for hosting full-stack web applications. Static Web Apps uses &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=academic-39081-chrhar"&gt;Azure Functions&lt;/a&gt; for server-side code, and provides wonderful functionality including &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization"&gt;authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes time to start doing local development, the initial setup can require a couple of steps as there's a fair bit being provided to you by the service. I want to explore how to setup a project for Azure Static Web Apps. I'm going to use &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, my current favorite front-end framework, but the steps are similar to any other framework you may choose.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog assumes you have &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; already installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install-azure-functions-core-tools"&gt;
  &lt;/a&gt;
  Install Azure Functions Core Tools
&lt;/h2&gt;

&lt;p&gt;Azure Functions is the serverless offering from Azure. By using Azure Functions Core Tools, you can run the service locally on your system for development. The docs show how to &lt;a href="https://www.npmjs.com/package/azure-functions-core-tools"&gt;install Azure Functions Core Tools&lt;/a&gt;. I personally use &lt;a href="https://docs.microsoft.com/windows/wsl/about?WT.mc_id=academic-39081-chrhar"&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt; for all my development. I was able to install by opening a terminal for WSL (Ubuntu in my case) and running the NPM command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; azure-functions-core-tools@3 &lt;span class="nt"&gt;--unsafe-perm&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bootstrap-the-project"&gt;
  &lt;/a&gt;
  Bootstrap the project
&lt;/h2&gt;

&lt;p&gt;It seems every front-end framework has its own bootstrapping tool. Svelte is no different. To create the project we'll use &lt;a href="https://github.com/Rich-Harris/degit"&gt;degit&lt;/a&gt; and the template provided by Svelte. In a terminal window, execute the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx degit sveltejs/template svelte-static-web-apps
&lt;span class="nb"&gt;cd &lt;/span&gt;svelte-static-web-apps
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-api"&gt;
  &lt;/a&gt;
  Create the API
&lt;/h2&gt;

&lt;p&gt;With the front-end project created, let's create the back-end. We'll do this by using &lt;code&gt;func&lt;/code&gt;, which is the command-line tool for managing Azure Functions, and was installed with the core tools. The two commands we'll use are &lt;code&gt;func init&lt;/code&gt; to create the project, and &lt;code&gt;func new&lt;/code&gt; to create a new Azure Function. While we won't use the function, I want to at least demo the process.&lt;/p&gt;

&lt;p&gt;Typically, Azure Functions are stored in a folder named &lt;em&gt;api&lt;/em&gt;. To create the folder and project, run the following in the same terminal window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;func init api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then select the runtime and language. Choose &lt;em&gt;Node&lt;/em&gt; (option 3) and &lt;em&gt;JavaScript&lt;/em&gt; (option 1).&lt;/p&gt;

&lt;p&gt;To create the first function, run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api
func new
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;em&gt;HTTP trigger&lt;/em&gt; (option 10) for the template, and specify &lt;em&gt;sample&lt;/em&gt; for the name of the trigger.&lt;/p&gt;

&lt;p&gt;You have now setup Azure Functions for the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-azure-static-web-apps-cli"&gt;
  &lt;/a&gt;
  Add Azure Static Web Apps CLI
&lt;/h2&gt;

&lt;p&gt;As highlighted earlier, Static Web Apps includes some neat functionality including authentication. If you are going to develop for the platform you'll very likely want to take advantage of this. In addition, because the server-side is running in Azure Functions, local development can be a little trickier because of how the services will run on your system. Fortunately &lt;a href="https://github.com/Azure/static-web-apps-cli#readme"&gt;Azure Static Web Apps CLI&lt;/a&gt; will manage all of this for us, including giving us a great utility to mock the authentication process.&lt;/p&gt;

&lt;p&gt;You can install it as a dev dependency using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @azure/static-web-apps-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-the-start-script"&gt;
  &lt;/a&gt;
  Update the start script
&lt;/h2&gt;

&lt;p&gt;Finally we'll need to update the &lt;em&gt;dev&lt;/em&gt; script. Traditionally &lt;em&gt;dev&lt;/em&gt; or &lt;em&gt;start&lt;/em&gt; scripts launch the project for development purposes. We're going to update the &lt;em&gt;dev&lt;/em&gt; script to start everything we need - Svelte's dev server, our Azure Function, and Azure Static Web Apps to tie everything together.&lt;/p&gt;

&lt;p&gt;Open the project directory in Visual Studio Code by returning to the terminal window and running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; .. &lt;span class="c"&gt;# To return to the root folder of the project&lt;/span&gt;
code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside Visual Studio Code, open &lt;em&gt;package.json&lt;/em&gt;. Replace the &lt;em&gt;dev&lt;/em&gt; script with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup -c -w &amp;amp; swa start http://localhost:5000 --api ./api"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file, and your project is now ready to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-the-project"&gt;
  &lt;/a&gt;
  Run the project
&lt;/h2&gt;

&lt;p&gt;With everything setup, the last thing to do is run the project! Inside of Visual Studio Code, you can open a terminal window by selecting &lt;em&gt;Terminal&lt;/em&gt; &amp;gt; &lt;em&gt;New Terminal&lt;/em&gt;. In the newly opened terminal, run the following to start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You have now setup a project to use Svelte and Azure Static Web Apps with Azure Functions. If you want to continue to explore, you can see how to &lt;a href="https://docs.microsoft.com/learn/modules/publish-app-service-static-web-app-api/?WT.mc_id=academic-39081-chrhar"&gt;deploy the app&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/learn/modules/publish-static-web-app-authentication/?WT.mc_id=academic-39081-chrhar"&gt;manage authentication&lt;/a&gt;. You can also checkout &lt;a href="https://github.com/GeekTrainer/svelte-static-web-apps?WT.mc_id=academic-39081-chrhar"&gt;the sample&lt;/a&gt; I built while putting together this blog. And of course we're doing plenty of other &lt;a href="https://docs.microsoft.com/javascript/?WT.mc_id=academic-39081-chrhar"&gt;fun stuff with JavaScript&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>web</category>
      <category>javascript</category>
      <category>svelte</category>
    </item>
    <item>
      <title>PHP Laravel Development with Kubernetes using DevSpace - Developer Edition</title>
      <author>Rich Burroughs</author>
      <pubDate>Fri, 20 Aug 2021 17:43:07 +0000</pubDate>
      <link>https://dev.to/loft/php-laravel-development-with-kubernetes-using-devspace-developer-edition-305a</link>
      <guid>https://dev.to/loft/php-laravel-development-with-kubernetes-using-devspace-developer-edition-305a</guid>
      <description>&lt;p&gt;by Levent Ogut&lt;/p&gt;

&lt;p&gt;Kubernetes is an excellent open-source container orchestration platform that brings automatic scaling, automatic recovery, observability, and many more features. Since it differs from traditional operations, it has changed the development and deployment workflows as well. Debugging an application on Kubernetes can be a challenge. DevSpace is a tool that helps you develop, deploy, troubleshoot simple or complex applications. We will use a Laravel project to demonstrate its features; Laravel is a popular framework used by the PHP community with great features like extensibility, inheritance, and reusability with high customization options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;We will look at ways to deploy a Laravel based application into a Kubernetes cluster for development and production environments. We will develop our application while the application is running in Kubernetes as if we are developing locally. And we will be able to troubleshoot our application in real-time with ease.&lt;/p&gt;

&lt;p&gt;The desired setup uses four containers, in three pods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP-FPM container, which processes all the PHP assets.&lt;/li&gt;
&lt;li&gt;Nginx container, which serves static files and acts as a reverse proxy for the PHP assets.&lt;/li&gt;
&lt;li&gt;MySQL container, as the database.&lt;/li&gt;
&lt;li&gt;Redis container, as session and cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-devspace"&gt;
  &lt;/a&gt;
  Introduction to DevSpace
&lt;/h2&gt;

&lt;p&gt;Continuous Delivery is a challenge while developing on Kubernetes. Without using a special tool, you need to build and deploy every time code or assets change. &lt;a href="https://devspace.sh/"&gt;DevSpace&lt;/a&gt; handles this seamlessly either by synchronizing files and hot reload of the container in question or automatically rebuilding and deploying the image(s) required. DevSpace allows you to develop in a Kubernetes cluster as if you are developing in your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-highlights"&gt;
  &lt;/a&gt;
  Feature Highlights
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Agile development on local and remote Kubernetes clusters&lt;/strong&gt;. Execution of entire continuous development and deployment pipeline, and a single command to deploy all components of your application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Declarative configuration kept in source code&lt;/strong&gt;, in the devspace.yaml file. All of the development, deployment, and pre/post-deployment actions are defined in a single file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hot Reloading for faster feedback&lt;/strong&gt;. Instead of building and re-deploying artifacts, DevSpace allows you to use high-performance and bi-directional file synchronization. This allows changes to trigger a hot-reload on the deployed container. All of these features are highly configurable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extensibility&lt;/strong&gt;. You can extend the functionality of DevSpace via the plugin system. Hooks and commands are also built-in constructs; you can expand the functionality heavily used in CI/CD pipelines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy clean Up&lt;/strong&gt;. You can delete the resources created via &lt;code&gt;devspace purge\&lt;/code&gt; in a single simple step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Client Only&lt;/strong&gt;. DevSpace doesn't require server/cluster side components. A single executable on a local machine is sufficient to develop, troubleshoot and deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requirements-and-setting-up-development-environment"&gt;
  &lt;/a&gt;
  Requirements and Setting Up Development Environment
&lt;/h2&gt;

&lt;p&gt;The following tools should be installed on your local development machine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kubectl, documentation &lt;a href="https://kubernetes.io/docs/tasks/tools/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Helm, documentation &lt;a href="https://helm.sh/docs/intro/install/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;DevSpace, installation instructions &lt;a href="https://devspace.sh/cli/docs/getting-started/installation"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#developing-with-devspace"&gt;
  &lt;/a&gt;
  Developing with DevSpace
&lt;/h2&gt;

&lt;p&gt;First, let's start with the code. Clone the repository to your local development machine as follows. This code includes a vanilla Laravel installation, a Dockerfile, and a devspace.yaml prepopulated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:loft-sh/devspace-php-laravel-nginx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy .env.example to .env.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; .env.example .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the .env file and modify where necessary, like adjusting port numbers if needed.&lt;/p&gt;

&lt;p&gt;After this, we can generate the Laravel APP_KEY variable via the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run generate-key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Review the variables by running the &lt;code&gt;devspace list vars&lt;/code&gt; command, and set variables where necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace list vars
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DevSpace will ask you a few questions regarding the image repository and other variables not defined in the .env file, and then show the output of the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Variable              Value                                                
 APP_DEBUG             true                                                 
 APP_IMAGE             leventogut/php-laravel-nginx-devspace                
 APP_KEY               xxxxxxxxxxxxxxxx  
 ASSET_VOLUME_NAME     static-asset-volume                                  
 ASSET_VOLUME_SIZE     1Gi                                                  
 DB_DATABASE           laravel                                              
 DB_HOST               mysql                                                
 DB_MYSQL_VERSION      8.0.23                                               
 DB_PASSWORD           xxxxxxxxxxxxxxxx                                     
 DB_PORT               3306                                                 
 DB_ROOT_PASSWORD      xxxxxxxxxxxxxxxx                                     
 DB_USERNAME           laravel                                              
 NGINX_CONFIG_HASH     740941                                               
 NGINX_IMAGE_VERSION   1.9                                                  
 REDIS_PASSWORD        xxxxxxxxxxxxxxxx                                    
 REDIS_VERSION         6.0.12  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-devspace-dev"&gt;
  &lt;/a&gt;
  Running devspace dev
&lt;/h3&gt;

&lt;p&gt;DevSpace is context-aware; it follows your Kubernetes config to determine the Kubernetes cluster to deploy on.  However, It is good practice to set the context and namespace to use with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace use context docker-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Your kube-context has been updated to 'docker-desktop'
         To revert this operation, run: devspace use context maple-staging

[done] √ Successfully set kube-context to 'docker-desktop'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace use namespace laravel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   The default namespace of your current kube-context 'docker-desktop' has been updated to 'laravel'
         To revert this operation, run: devspace use namespace 

[done] √ Successfully set default namespace to 'laravel'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all the variables and the configs, we can start in-cluster development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DevSpace will build the artifacts we have defined in the &lt;code&gt;devspace.yaml&lt;/code&gt;, deploy all components, and start log streaming from the configured containers. This might take a few minutes.&lt;/p&gt;

&lt;p&gt;In a few minutes, DevSpace will open a browser window showing a login screen. Previously, we have installed the laravel/ui package to test MySQL and Redis. Simply register as a new user, and you will be redirected to the index page. The index page has several links, including a link to the ping/pong route we will use in a few steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_X3LIXCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hb4shgy5o9eeaadbx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_X3LIXCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hb4shgy5o9eeaadbx0.png" alt="Screenshot of the PHP app's UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;At this stage, we have deployed our application into the Kubernetes cluster, and DevSpace is watching any changes on the project directory.&lt;/p&gt;

&lt;p&gt;Now, having started DevSpace in development mode, we can change our code and see the immediate effect on our application that is running in the Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Open the web.php file under the routes directory with your favorite editor. And paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ping'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"pong"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any asset added to the repo folder will also be synced (according to the sync rules defined) to the container.&lt;/p&gt;

&lt;p&gt;At this stage, you can try adding controllers, routes, dependencies and observe the ease of development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#port-forwarding-and-reverse-port-forwarding"&gt;
  &lt;/a&gt;
  Port Forwarding and Reverse Port Forwarding
&lt;/h3&gt;

&lt;p&gt;You can reach the application via port forwarding. These can be defined in the &lt;code&gt;devspace.yaml&lt;/code&gt; file. In the current configuration, the Nginx container's port 80 is forwarded to local port 8080. The browser will be automatically opened after a successful deployment and start of the containers.&lt;/p&gt;

&lt;p&gt;You can configure reverse port forwarding as well, which is very useful for certain debugging tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h3&gt;

&lt;p&gt;Our sample &lt;code&gt;devspace.yaml&lt;/code&gt; includes some Laravel and MySQL-specific commands to ease development workflow.&lt;/p&gt;

&lt;p&gt;You can run any artisan, composer, php, and npm commands and additionally drop into a MySQL shell with a single mysql command.&lt;/p&gt;

&lt;p&gt;You can list available commands via:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace list commands
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Name           Command                                                            Description
 artisan        devspace enter -c php -- php artisan                               Entry point for artisan commands.
 composer       devspace enter -c php -- composer                                  Entry point for composer commands.
 php            devspace enter -c php -- php                                       Entry point for PHP commands.
 npm            devspace enter -c php -- npm                                       Entry point for NPM commands.
 generate-key   TMP_FILE=.devspace/app_key.tmp &amp;amp;&amp;amp; docker run --rm -v $PWD:/ap...   Generate APP_KEY.
 mysql          devspace enter -c mysql -- mysql -h'mysql' -P'3306' -u'larave...   Enter to MySQL shell.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try these commands to get familiar with them in your workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://devspace.sh/cli/docs/configuration/hooks/basics"&gt;Hooks&lt;/a&gt; are a quite valuable feature of DevSpace. With hooks, you can run commands before and after certain deployments.&lt;/p&gt;

&lt;p&gt;We have defined several hooks in the devspace.yaml file, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changing MySQL user and password&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;npm run watch&lt;/code&gt; on the PHP container.&lt;/li&gt;
&lt;li&gt;Reloading Nginx to re-read the configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-production"&gt;
  &lt;/a&gt;
  Deploying to Production
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;devspace deploy&lt;/code&gt; command will deploy our application into the environment we define. DevSpace configuration allows us to modify and alter our parameters based on profiles. This flexibility brings numerous configuration options for development, staging, production environments. DevSpace configuration can hold all different parameters and configurations for each environment. Generally speaking, it is a good practice to create a production profile for deployment, which will remove troubleshooting aids and set parameters accordingly.&lt;/p&gt;

&lt;p&gt;Our prepared &lt;code&gt;devspace.yaml&lt;/code&gt; consists of a production profile that will remove the additions we have made to make developing and troubleshooting easy.&lt;/p&gt;

&lt;p&gt;Deploy with production profile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace deploy &lt;span class="nt"&gt;-p&lt;/span&gt; production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#troubleshooting-with-devspace"&gt;
  &lt;/a&gt;
  Troubleshooting with DevSpace
&lt;/h2&gt;

&lt;p&gt;Troubleshooting and debugging are pretty straightforward with DevSpace. DevSpace provides aid for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Entering into containers&lt;/li&gt;
&lt;li&gt;Running commands inside the containers&lt;/li&gt;
&lt;li&gt;Interactive mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#entering-to-and-working-with-containers"&gt;
  &lt;/a&gt;
  Entering to and Working with Containers
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;devspace enter&lt;/code&gt; command allows you to open a shell to any of the running containers by providing the container name, so you don't have to deal with the copy/paste of long pod names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace enter &lt;span class="nt"&gt;-c&lt;/span&gt; php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php
root@app-0:/var/www/html# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a container is not specified, a selector will be displayed, and you can choose from the available containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? Which pod do you want to open the terminal for?
  [Use arrows to move, type to filter]
&amp;gt; redis-master-0:redis  app-0:nginx
  app-0:php
  mysql-0:mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;As you can execute any command in the container, running the tests you have for the application is a breeze.&lt;/p&gt;

&lt;p&gt;You can easily run phpunit or artisan test commands for running your tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run php ./vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php
PHPUnit 9.5.3 by Sebastian Bergmann and contributors.

.F                                                                  2 / 2 (100%)

Time: 00:00.122, Memory: 20.00 MB

There was 1 failure:

1) Tests\Feature\ExampleTest::testBasicTest
Expected status code 200 but received 302.
Failed asserting that 200 is identical to 302.

/var/www/html/vendor/laravel/framework/src/Illuminate/Testing/TestResponse.php:187
/var/www/html/tests/Feature/ExampleTest.php:19

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run &lt;code&gt;artisan test&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;devspace run artisan &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info]   Using namespace 'default'
[info]   Using kube context 'docker-desktop'
[info]   Opening shell to pod:container app-0:php

   PASS  Tests\Unit\ExampleTest
  ✓ basic test

   FAIL  Tests\Feature\ExampleTest
  ⨯ basic test

  ---

  • Tests\Feature\ExampleTest &amp;gt; basic test
  Expected status code 200 but received 302.
  Failed asserting that 200 is identical to 302.

  at tests/Feature/ExampleTest.php:19
     15▕     public function testBasicTest()
     16▕     {
     17▕         $response = $this-&amp;gt;get('/');
     18▕ 
  ➜  19▕         $response-&amp;gt;assertStatus(200);
     20▕     }
     21▕ }
     22▕ 


  Tests:  1 failed, 1 passed
  Time:   0.19s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  CI/CD
&lt;/h2&gt;

&lt;p&gt;DevSpace configuration can hold many profiles and can be used for different deployment options. It is common to see developers use DevSpace for their CI/CD pipeline as well. Deploying your application into the CI/CD pipeline is relatively straightforward. The ability to choose from various profiles makes it a breeze to switch from development to staging and production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;You can easily clean your environment with the &lt;code&gt;devspace purge\&lt;/code&gt; command. This will be deleting all deployments. Please note that purge will not delete persistent storage(s).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have seen DevSpace in action while developing, deploying, and troubleshooting. We have seen that once DevSpace is configured, it can encompass all deployment options within it. So it can be used for development and deployment to any environment. The ability to change profiles, add new commands, and execute any hooks is advantageous.&lt;/p&gt;

&lt;p&gt;The second part of this series will delve into how to configure DevSpace, and we will go over the many possible configuration options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devspace.sh/cli/docs/introduction"&gt;DevSpace Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@benofthenorth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ben&lt;/a&gt; on &lt;a href="https://unsplash.com/@benofthenorth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devspace</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Easiest way to understand Javascript Closure</title>
      <author>khalid ansari</author>
      <pubDate>Fri, 20 Aug 2021 17:36:35 +0000</pubDate>
      <link>https://dev.to/khalid283/easiest-way-to-understand-javascript-closure-7ol</link>
      <guid>https://dev.to/khalid283/easiest-way-to-understand-javascript-closure-7ol</guid>
      <description>&lt;p&gt;Closure is one most discussed topics in javascript for many reasons, but I am going to make it simple to understand. First we will look at the definition of Closure from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let break it down with the most familiar example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--Home
  --Bedroom
  --Office Room
  --Kitchen
    --Fridge
      --Penguin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let look at the above structure, A home, and inside it a Bedroom, an Office room since its 2021, and Kitchen. Also, there is a Fridge inside the kitchen. Now consider there is a penguin in the fridge, yay yay they came back due to global warming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;OfficeRoom&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OfficeRoom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bedroom&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bedroom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Kitchen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oven&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Fridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Penguin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oven&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Bedroom&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;OfficeRoom&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;Penguin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;Fridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;Kitchen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-raw-penguin-endraw-function-can-access"&gt;
  &lt;/a&gt;
  what &lt;code&gt;Penguin()&lt;/code&gt; function can access?
&lt;/h3&gt;

&lt;p&gt;The above is what I converted in javascript code. Let see what penguin has access to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything in fridge&lt;/li&gt;
&lt;li&gt;Everything in Kitchen&lt;/li&gt;
&lt;li&gt;Everything in Home&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let go from the top, can penguin access the office room, in real-world it can access and may fix some of your bugs, But in the javascript world, it can only call &lt;code&gt;OfficeRoom()&lt;/code&gt; since its a function and it can return anything, same goes for &lt;code&gt;Bedroom()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving to &lt;code&gt;Kitchen()&lt;/code&gt; it can access &lt;code&gt;oven&lt;/code&gt; variable and in &lt;code&gt;Fridge()&lt;/code&gt; it can access &lt;code&gt;bread&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-look-at-the-definition-of-closure"&gt;
  &lt;/a&gt;
  Now let's look at the definition of closure
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Kitchen()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;Bedroom()&lt;/code&gt; and &lt;code&gt;OfficeRoom()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Fridge()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;oven&lt;/code&gt;. And everything it has referenced from &lt;code&gt;Home()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Penguin()&lt;/code&gt; function bundled together with reference to its surrounding state that is &lt;code&gt;bread&lt;/code&gt;. And everything it has referenced from &lt;code&gt;Fridge()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In hierarchy it will bundle reference to function until Global scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we have three closure, and let see what chrome dev tool says.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUtMP-EN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tyk564xh6m6c5xizjhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUtMP-EN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tyk564xh6m6c5xizjhb.png" alt="Debugger screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every function that bundled together with references to its surrounding state is closure. In fact, closure is created every time a function is created.&lt;/p&gt;

&lt;p&gt;For more read &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
