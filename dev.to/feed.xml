<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>vsCode Emmet cheatsheet</title>
      <author>computer_geek77</author>
      <pubDate>Mon, 02 Aug 2021 12:54:09 +0000</pubDate>
      <link>https://dev.to/computergeek/vscode-emmet-cheatsheet-1mmf</link>
      <guid>https://dev.to/computergeek/vscode-emmet-cheatsheet-1mmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document /title&amp;gt;
/head&amp;gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-elements"&gt;
  &lt;/a&gt;
  basic elements
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#1-section"&gt;
  &lt;/a&gt;
  1) section
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#2-example"&gt;
  &lt;/a&gt;
  2) .example
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#3-sectionintro"&gt;
  &lt;/a&gt;
  3) section#intro
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"intro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#4-pgtlorem10"&gt;
  &lt;/a&gt;
  4) p&amp;gt;lorem10
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet
consectetur adipisicing elit. Neque,
facere? &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#5-sectionintrogtcontainer"&gt;
  &lt;/a&gt;
  5) section#intro&amp;gt;.container
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"intro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#6-pyour-custom-text"&gt;
  &lt;/a&gt;
  6) p{your custom text}
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;your custom text &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#7-linkcss"&gt;
  &lt;/a&gt;
  7) link:css
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#8-scriptsrc"&gt;
  &lt;/a&gt;
  8) script:src
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#9-h3pp"&gt;
  &lt;/a&gt;
  9) h3+p+p
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#10-ulgtli3p3"&gt;
  &lt;/a&gt;
  10) ul&amp;gt;li*3^p*3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#11-ulgtli4"&gt;
  &lt;/a&gt;
  11) ul&amp;gt;li*4
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#12-h3ulgtli3h3"&gt;
  &lt;/a&gt;
  12) h3+(ul&amp;gt;li*3)+h3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#13-lilistitem3"&gt;
  &lt;/a&gt;
  13) li.list-item-$*3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>JavaScript (Lexical Structure)</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 12:52:08 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/javascript-lexical-structure-3g32</link>
      <guid>https://dev.to/cleancodestudio/javascript-lexical-structure-3g32</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Lexical Structure of a software language:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Specifies a set of basic rules defining how code should or could be written"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As one of the world's most misunderstood programming language as well as a software language with some weird oddities, there are many questions that come up about what is best practice when it comes to writing JavaScript. In this blog we're going to dive into the &lt;strong&gt;Lexical structure&lt;/strong&gt; of JavaScript. Lexical Structure simply specifies a set of basic rules defining how code should be written in a given language.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h3&gt;




&lt;p&gt;JavaScript is written in Unicode. What's this mean? Well, one of the cool, lesser used, and generally considered a poor or bad practice is that we can actually use emojis as variable names. We can use emojis as variable names because JavaScript is written in Unicode.  More importantly, you can write identifiers in any language, for example, Japanese or Chinese, with some rules.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#optional-semicolon"&gt;
  &lt;/a&gt;
  Optional Semicolon
&lt;/h3&gt;




&lt;p&gt;In JavaScript (and most other languages) the semicolon is used to separate one given statement from another. What's weird about JavaScript is that this semi-colon is optional. Personally, I opt out of using the semi-colon and just write my statements on two separate lines. Any two statements that are written on the same line will always need to utilize a semi-colon to separate them - but this in itself is considered bad practice. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whitespaces-and-line-breaks"&gt;
  &lt;/a&gt;
  Whitespaces and Line Breaks
&lt;/h3&gt;




&lt;p&gt;In JavaScript, white space is &lt;strong&gt;NOT&lt;/strong&gt; considered as anything meaningful. Spaces and line breaks can be added as you see fit.&lt;/p&gt;

&lt;p&gt;For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;can also be written as&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or as&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;JavaScript doesn't care about the white space. Personally, I'll go about the former statement using the following syntax.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the real world, you'll definitely want to keep a well-defined style and adhere to that commonly used style. You can and in larger project should enforce this style using a linter or a styling tool like &lt;em&gt;Prettier&lt;/em&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#case-sensitive"&gt;
  &lt;/a&gt;
  Case Sensitive
&lt;/h3&gt;



&lt;p&gt;JavaScript is case sensitive. What's this mean for a software language? If you have two variables spelling the same word and one is capitalized while the other is not - then these are considered two different variables.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heyooo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;HelloWorld&lt;/code&gt; and &lt;code&gt;helloWorld&lt;/code&gt; are two different variables because JS is case sensitive.&lt;/p&gt;

&lt;p&gt;Keywords, variables, function names, and other identifiers must always be typed with a consistent capitalization of letters to be or mean the same thing.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;



&lt;p&gt;Good old comments. In JavaScript we have two types of comments we can utilize or call upon to add notes that are functionally meaningful within our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Line Comments&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is a single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Multiple Line Comments&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
  This is a multiple line
  comment that we can
  use to write a lot 
  of stuff when
  we need to.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#literals-and-identifiers"&gt;
  &lt;/a&gt;
  Literals and Identifiers
&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;Literals&lt;/strong&gt; are defined as a value that is written within the source code. &lt;/p&gt;

&lt;p&gt;For example, a string, a number, a Boolean, an object literal, or an array literal are all literals.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;// a number literal&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// a Boolean literal&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// a string literal&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// an array literal&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// an object literal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;An &lt;strong&gt;identifier&lt;/strong&gt; is simply a sequence of characters used to identify a variable, function, or an object. An &lt;strong&gt;identifier&lt;/strong&gt; can start with a letter, dollar sign ($), underscore (_), and may also contain digits. Using unicode, a letter can be considered any allowed char - thus we can also use an emoji. Another way to understand what an &lt;strong&gt;identifier&lt;/strong&gt; means is to simply ask yourself what allowed variables names can I use in this language.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="nx"&gt;NAME&lt;/span&gt;
&lt;span class="nx"&gt;_name&lt;/span&gt;
&lt;span class="nx"&gt;$name&lt;/span&gt;
&lt;span class="err"&gt;😄&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Are all allowed variable names - aka allowed identifiers within JavaScript. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#reserved-words"&gt;
  &lt;/a&gt;
  Reserved Words
&lt;/h3&gt;



&lt;p&gt;Most (if not every) software language has a list of &lt;strong&gt;reserved words&lt;/strong&gt;. These &lt;strong&gt;reserved words&lt;/strong&gt; do special things that allow the software language to work properly. In JavaScript we have a list of &lt;strong&gt;Reserved Words&lt;/strong&gt; that are not allowed to be used as identifiers due to the language saving these words to implement special functionality. &lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;Reserved Words&lt;/strong&gt; in JavaScript include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;abstract&lt;/li&gt;
&lt;li&gt;arguments&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;case&lt;/li&gt;
&lt;li&gt;catch&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;do&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;else&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;export&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;extends&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;li&gt;final&lt;/li&gt;
&lt;li&gt;goto&lt;/li&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;finally&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;implements&lt;/li&gt;
&lt;li&gt;yield&lt;/li&gt;
&lt;li&gt;import&lt;/li&gt;
&lt;li&gt;in &lt;/li&gt;
&lt;li&gt;instanceof&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;lang&lt;/li&gt;
&lt;li&gt;native&lt;/li&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;super&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;synchronized&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;throw&lt;/li&gt;
&lt;li&gt;throws&lt;/li&gt;
&lt;li&gt;transient&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;try&lt;/li&gt;
&lt;li&gt;typeof&lt;/li&gt;
&lt;li&gt;var
-void&lt;/li&gt;
&lt;li&gt;volatile&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, that not all reserved words do something within JavaScript currently. Many of these reserved words are simply marked as unusable by the language so that future versions of JavaScript where these reserved words add behavior to JavaScript won't cause legacy applications of JavaScript programs to break or need to be changed because they used the keywords that now do something as identifiers before these keywords were able to do anything within JS.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>coding</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Don't make these mistakes when applying for a job</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 02 Aug 2021 12:38:11 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/don-t-make-these-mistakes-when-applying-for-a-job-39oc</link>
      <guid>https://dev.to/alvaromontoro/don-t-make-these-mistakes-when-applying-for-a-job-39oc</guid>
      <description>&lt;p&gt;We've had a couple of openings on our team, and I have been reviewing resumes and running pre-screenings and interviews lately. It's one of the first times that I am fully on this side of the interviewing process, and so far, it has been an insightful and rewarding experience.&lt;/p&gt;

&lt;p&gt;I found a series of "common" mistakes that different candidates made during the hiring process. Some were unfortunate human errors, others were attempts to cheat the system... and they raised eyebrows.&lt;/p&gt;

&lt;p&gt;Right now, it's a great job market for developers, and you probably won't have much trouble finding a new position. Still, try to avoid these mistakes when applying for a job:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't forget to attach your resume&lt;/li&gt;
&lt;li&gt;Don't send the wrong resume&lt;/li&gt;
&lt;li&gt;Don't have everyone else's resume&lt;/li&gt;
&lt;li&gt;Don't link obsolete/unused social media&lt;/li&gt;
&lt;li&gt;Don't copy-paste your test answers&lt;/li&gt;
&lt;li&gt;Don't sell yourself short&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-forget-to-attach-your-resume"&gt;
  &lt;/a&gt;
  1. Don't forget to attach your resume
&lt;/h2&gt;

&lt;p&gt;Sounds ridiculous and far-fetched? Not so much. &lt;strong&gt;Around 5% of the candidates did not attach their resumes to the application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, it was not their fault: it was the system they used to apply. Job sites that claim to "submit your profile" may not integrate correctly and send the information, and without a file to review, the only thing we get is a name and/or email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SoG0Pag6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfoydbbhk4zkqmhkif9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SoG0Pag6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfoydbbhk4zkqmhkif9.jpg" alt="Man looks desperately at computer"&gt;&lt;/a&gt;&lt;/p&gt;
No resume = No application (picture by &lt;a href="https://www.pexels.com/photo/man-in-white-shirt-using-macbook-pro-52608/"&gt;Tim Gouw&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;Initially, I would contact the candidates asking for their resumes... but eventually stopped. Of course, it's not the candidate's fault, but I couldn't be chasing them when I already had many other profiles to review.&lt;/p&gt;

&lt;p&gt;Did I lose great candidates because of that? Maybe. Could I lose great candidates with an attached resume by wasting time chasing other candidates without an attached resume? Probably. It's not fair for anyone.&lt;/p&gt;

&lt;p&gt;When you apply for a job, make sure that the system you use has your resume on file. If not, there's a chance we won't be getting anything at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-send-the-wrong-resume"&gt;
  &lt;/a&gt;
  2. Don't send the wrong resume
&lt;/h2&gt;

&lt;p&gt;It is a bit confusing –and suspicious– when John Doe from Tennessee sends the resume of Michael Smith from Texas (names and locations invented).&lt;/p&gt;

&lt;p&gt;I am not talking about people submitting their resumes with nicknames or their "American names" (&lt;a href="https://www.huffpost.com/entry/jose-joe-job-discrimination_n_5753880"&gt;unfortunately, there's still discrimination and using an &lt;em&gt;easier&lt;/em&gt; name opens many doors&lt;/a&gt;), even I have done it in the past. I am talking about attaching the resume of a completely different person from a completely different place and a completely different background.&lt;/p&gt;

&lt;p&gt;I have seen this a couple of times, and it has been awkward. Especially when one of the profiles matched the job perfectly while the other was completely unrelated (still within IT).&lt;/p&gt;

&lt;p&gt;While talking about wrong names, if you add a cover letter (most people don't), reread it before submitting it with your application. It looks kind of bad when you add a cover letter with the wrong company's name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-have-everyone-elses-resume"&gt;
  &lt;/a&gt;
  3. Don't have everyone else's resume
&lt;/h2&gt;

&lt;p&gt;This point may be more relevant for positions that require a certain level of creativity, but to some extent, it applies to everyone.&lt;/p&gt;

&lt;p&gt;Many resumes have the same template (and almost the same content, too!). As a result, they don't stand out. On the other hand, candidates that have a more original resume are easier to remember.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkZtUbqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnsv3lc39xe0bjonodu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkZtUbqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnsv3lc39xe0bjonodu.jpg" alt="A field full of yellow tulips with a single red tulip focused and centered"&gt;&lt;/a&gt;&lt;/p&gt;
These tulips are equally beautiful, but you'll remember only one (picture by &lt;a href="https://unsplash.com/photos/l37N7a1lL6w"&gt;Rupert Britton&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;After seeing the same resumes repeatedly, most of them with a similar structure, names, and experiences become blurry. It is difficult to tell one apart from the other. Spice your resume up! Add color, use a different template, different fonts and icons...&lt;/p&gt;

&lt;p&gt;In some cases, this is not possible because the company requires a specific format. &lt;strong&gt;This point is not only for presentation; it's about content, too&lt;/strong&gt;. There's always something that you can add to stand out. &lt;/p&gt;

&lt;p&gt;For a long time, I listed on my resume some experience as a cartoonist at a local/university newspaper. Going to interviews, I was often welcomed with "&lt;em&gt;Ah! You are the guy who draws for the newspaper&lt;/em&gt;". My experience was similar to everyone else's, but I had an edge. Something different and quirky that made me stand out and made me memorable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-link-obsoleteunused-social-media"&gt;
  &lt;/a&gt;
  4. Don't link obsolete/unused social media
&lt;/h2&gt;

&lt;p&gt;If you add links to your social media profiles and accounts, chances are we are going to check them. And if they are empty or haven't been updated for 10-15 years, they will leave a sour impression.&lt;/p&gt;

&lt;p&gt;Seriously, why link your Github profile if you only have a repo that hasn't been updated in over a decade? Or your empty LinkedIn? Or a Twitter account with an egg photo and a single tweet from 4 years ago? It won't tell me anything good. &lt;/p&gt;

&lt;p&gt;For developers, Github is an interesting case. They (we) rush to put a la link on their resume, but then the profile is empty or has zero contributions, or (IMHO, even worse) they have way too many contributions.&lt;/p&gt;

&lt;p&gt;One time, we had a candidate who created a script that automatically generated dummy commits and pushes to a repo. That way, their contribution chart looked unrealistically dark green. But, in reality, his unique contribution was... a nicely developed script that generated dummy commits and pushes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiIMyp9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ruhcohoqx1laxs78no.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiIMyp9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ruhcohoqx1laxs78no.jpg" alt="Screenshot of two contribution charts (squares where light color means fewer contributions and dark means lots of contributions). One looks spotty, with more light than dark, many days without contributions. The other looks completely dark. There's a text saying this (arrow pointing to the spotty chart) is better than this (arrow pointing to the full chart)"&gt;&lt;/a&gt;&lt;/p&gt;
One of these contribution charts is fake... I wonder which one?&lt;br&gt; 



&lt;p&gt;I personally love seeing what people develop on Github. It won't affect their eligibility if they don't have anything, but it may make their lives easier. That's because people tend to be more comfortable talking about their passions, and if I see an interesting project, I will likely ask about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dont-copypaste-your-test-answers"&gt;
  &lt;/a&gt;
  5. Don't copy-paste your test answers
&lt;/h2&gt;

&lt;p&gt;...or, at least, be smart about it.&lt;/p&gt;

&lt;p&gt;If you get a take-home programming test, don't just copy-paste the answers senselessly from the Internet. &lt;strong&gt;Google-foo is a great skill to have&lt;/strong&gt; (I think knowing how to find information online is essential and don't have any problem with candidates searching online on interviews), but remember: interviewers also have it... and they have anti-plagiarism software that will flag your results, too.&lt;/p&gt;

&lt;p&gt;In our team, we perform small programming tests on &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;, and as part of the results, we get a plagiarism detection report. And it doesn't look too good if the algorithm flagged all the candidate's answers.&lt;/p&gt;

&lt;p&gt;Plus, if/when you get to the next stage, you may be asked to explain the code later. It is ok if you copied it, but at least you should understand it and be able to explain it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-dont-sell-yourself-short"&gt;
  &lt;/a&gt;
  6. Don't sell yourself short
&lt;/h2&gt;

&lt;p&gt;We had some candidates with 15 relevant years of experience applying to positions requiring 2-4 years. Unfortunately, those candidates were almost automatically discarded by the system. This is because their expectations never match the job description, and convincing Human Resources (HR) to upgrade an open position is tough.&lt;/p&gt;

&lt;p&gt;There are cases in which this experience discrepancy may be justified: people changing careers or trying a different field within software development... but outside of those and a little more, hiring candidates with too much experience doesn't normally fly.&lt;/p&gt;

&lt;p&gt;Be realistic, and don't sell yourself short. If you have the knowledge and experience to be at a higher level, don't apply to lower levels.&lt;/p&gt;

&lt;p&gt;In contrast to the point above, &lt;strong&gt;don't be scared to apply if you don't match all the requirements&lt;/strong&gt;; you may still be a perfect match and get the job. Hiring a candidate with less experience but promising skills is an easier sell to HR than the opposite.&lt;/p&gt;

&lt;p&gt;In the end, it all boils down to: don't sell yourself short and aim high. If you are a match, great. If you are not, the company will tell you if there's a lower position that you would fit into.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://www.pexels.com/photo/upset-young-black-guy-covering-face-with-hand-while-working-remotely-on-netbook-5699826/"&gt;Alex Green on Pexels&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>What is Polymorphism? - Explaining Polymorphism to a Five Year Old</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 02 Aug 2021 12:36:13 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/what-is-polymorphism-explaining-polymorphism-to-a-five-year-old-12dg</link>
      <guid>https://dev.to/ubahthebuilder/what-is-polymorphism-explaining-polymorphism-to-a-five-year-old-12dg</guid>
      <description>&lt;p&gt;In class-oriented languages, a class is simply an organized code which acts as a template or blueprint for creating objects. A &lt;strong&gt;parent class&lt;/strong&gt; can also be ‘copied’ to create a &lt;strong&gt;child class&lt;/strong&gt;. You can think of the parent (super) and child (sub) classes in the same way you would think of the relationship between a real-life parent and its child. Additionally, you could see it as the relationship between more abstract concepts or objects with more specializaed ones, like a superset and subset.&lt;/p&gt;

&lt;p&gt;When a child is born, the characteristics of the parent are copied into the child. In other words, the child inherits behaviours from the parent. This is known as &lt;strong&gt;class inheritance&lt;/strong&gt; in class-oriented languages. Let’s see some code illustrations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Abstract Class: An Aircraft&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Aircraft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Start the engine&lt;/span&gt;
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`turning on my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; engines!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Stand &lt;/span&gt;
  &lt;span class="nx"&gt;stand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`standing on my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; tires!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Run on the tracks&lt;/span&gt;
  &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`moving down the runway on my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; tires!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Fly in the sky&lt;/span&gt;
 &lt;span class="nx"&gt;fly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`soaring the sky on my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wings&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; wings!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// A Child Class: A Helicopter&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Helicopter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Aircraft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propellers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// call the super class constructor and pass in the engines and wheels parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propellers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;propellers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;propel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`spinning my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propellers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; propellers!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;lift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slowly climbing up thanks to my spinning propellers!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Another Child Class: An Aeroplane&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Aeroplane&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Aircraft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passengers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// call the super class constructor and pass in the name parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passengers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passengers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`turning on my &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; balanced engines!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nx"&gt;takeOff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`all of the &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passengers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; passengers are screaming in delight!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define the &lt;code&gt;Aircraft&lt;/code&gt; class to assume two wings, two engines, three wheels, a way to start it's engine, stand, run and also a way to fly. But in real-life cases you wouldn’t ever manufacture just a generic “aircraft,” so it’s really just an abstract concept at this&lt;br&gt;
point. Hence, then we define two specific kinds of aircrafts: &lt;strong&gt;a helicopter&lt;/strong&gt;  and &lt;strong&gt;an aeroplane.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They each inherit some of the general characteristics of an aircraft, but then each of them tailor the characteristics appropriately for themselves. A helicopter needs&lt;br&gt;
two propellers and has to propel while taking off, and a aeroplane is assumed to need three engines because it’s actually conveying lots of passengers.&lt;/p&gt;

&lt;p&gt;Polymorphism implies the existence of a property or method across two or more classes in various levels of the inheritance chain. It involves the referencing of a property or method from classes higher on the inheritance hierarchy. &lt;/p&gt;

&lt;p&gt;In most class-oriented languages, including ES6 &lt;code&gt;class&lt;/code&gt;, this is achieved by calling the &lt;code&gt;super()&lt;/code&gt; keyword along with the name of the property of method you want to access, from any method in the child class. When you do this, the JavaScript engine looks one step up into a parent class for that method. &lt;/p&gt;

&lt;p&gt;Now, let us consider one interesting implication of polymorphism in our class examples. The &lt;code&gt;start()&lt;/code&gt; method was defined in both the &lt;code&gt;Helicopter&lt;/code&gt; class and the &lt;code&gt;Aeroplane&lt;/code&gt;  class. When you define a method of same name in both parent class and child class, then you are said to have overridden that of the parent class. Now if you observed well, you would notice that the &lt;code&gt;takeoff()&lt;/code&gt; method made a reference to the &lt;code&gt;start()&lt;/code&gt; which, as I said, exists in both parent and child. Which version of start() do you think the JavaScript engine will use? Is it the one in &lt;code&gt;Aircraft&lt;/code&gt; or the one in &lt;code&gt;Aeroplane&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This brings us to one vital thing to always keep in mind about polymorphism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you make a reference to any property or method from a subclass, the engine first checks to see if that method already exists in the current subsclass. If it exists, the engine uses that method.  If it doesn’t exist, the engine “looks up” the next (parent) class for it, and that goes on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, to answer the question, the JavaScript engine will use the &lt;code&gt;Aeroplane&lt;/code&gt;s  version of &lt;code&gt;start()&lt;/code&gt;, which will resolve to 3 engines since a passenger plane has 3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Aeroplane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;takeOff&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 

&lt;span class="cm"&gt;/* turning on my 3 balanced engines!
   Standing on my 3 wheels
   Moving down the track on my 3 tires 
   Soaring the sky on my 2 wings
   all the 117 passengers are screaming in delight */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we had instantiated the generic &lt;code&gt;Aircraft&lt;/code&gt; class instead, then its version of &lt;br&gt;
&lt;code&gt;start()&lt;/code&gt; would have been called instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aircraft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Aircraft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Nothing passed  because we had set default parameters&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aircraft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// turning on my two engines!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;True to its name, polymorphism allows you define and use properties and methods in many forms. In our case, The &lt;code&gt;start()&lt;/code&gt; method has two forms, and the form which gets used depends on the class which gets instantiated.&lt;/p&gt;

&lt;p&gt;Polymorphism is a very useful feature of Object oriented programming. You can create one single interface which you can reuse in multiple subclasses. You can save yourself time and write far less code. &lt;/p&gt;

&lt;p&gt;When it comes to polymorphism and inheritance in JavaScript, there is an important behaviour to understand: the &lt;code&gt;[[Prototype]]&lt;/code&gt; Mechanism. This is how the engine traverses upwards looking for the existence of a property or method on the superclasses, up until it reaches the prototype object.&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;[[Prototype]]&lt;/code&gt; mechanism? We’ll leave that for our next episode of the Explain like I’m 5 series.&lt;/p&gt;

&lt;p&gt;YOU MAY ALSO LIKE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/5-habits-to-avoid-as-a-web-developer"&gt;5 Habits To Avoid as a Web Developer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/5-habits-to-avoid-as-a-web-developer"&gt;7 Good Reasons To Start Blogging as a Software Developer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you like articles like this follow this blog to never miss an update. If you are learning JavaScript, you’ll definitely want to check out my  &lt;a href="//gum.co/js-50"&gt;JavaScript Notes.&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why Ruby on Rails is still a good choice in 2021 (+ helpful resources)</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Mon, 02 Aug 2021 11:53:21 +0000</pubDate>
      <link>https://dev.to/forestadmin/why-ruby-on-rails-is-still-a-good-choice-in-2021-helpful-resources-2o6j</link>
      <guid>https://dev.to/forestadmin/why-ruby-on-rails-is-still-a-good-choice-in-2021-helpful-resources-2o6j</guid>
      <description>&lt;p&gt;Are you going to launch a successful digital product? In this article, I will show you &lt;strong&gt;why it's still a good idea to use Ruby on Rails&lt;/strong&gt; and what makes developing web applications with this framework so fast and efficient. You will also find a list of Ruby on Rails tutorials and other resources that help you build and iterate. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-ruby-on-rails-can-be-the-best-framework-for-your-next-product"&gt;
  &lt;/a&gt;
  Why Ruby on Rails can be the best framework for your next product
&lt;/h2&gt;

&lt;p&gt;Admittedly, RoR might have slowly declined in popularity but reports of its death are greatly exaggerated. This most popular framework for the Ruby language is still loved by the web startup community for its time efficiency, cost reduction, stability, and security. All of that makes Ruby on Rails perfect for MVP development and beyond. After all, well-known and established platforms such as Shopify, Airbnb, Fiverr, Github, and Imgur, have been built in Ruby on Rails.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuOkBUIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/tweet-ruby-shopify.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuOkBUIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/tweet-ruby-shopify.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A tweet from Lawrence Mandel, the Director of Engineering at Shopify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-developing-in-ruby-on-rails-so-fast"&gt;
  &lt;/a&gt;
  What makes developing in Ruby on Rails so fast?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTAdh7u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvvx4eg9veup445cyd5z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTAdh7u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvvx4eg9veup445cyd5z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#batteryincluded-framework"&gt;
  &lt;/a&gt;
  Battery-included framework
&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is a complete framework with many out-of-the-box tools readily available. It comes with numerous scripts called generators. They create everything that is necessary to start working on a particular task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-over-configuration"&gt;
  &lt;/a&gt;
  Conversion over Configuration
&lt;/h3&gt;

&lt;p&gt;Ruby on Rails takes an opinionated approach, which means it operates on the assumption that there is the best way of making things. Its Convention over Configuration paradigm decreases the number of decisions a developer is required to make by offering conventions for handling asset management, routing, stateful data, and more. Basically, it provides the baseline functionality for most web applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layered-structure"&gt;
  &lt;/a&gt;
  Layered structure
&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is based on the Model-View-Controller (MVC) architecture that separates an app’s logic (located in models) from the routing and presentation of application information. Such a concept is not limited to Ruby on Rails, though. It is also used by Django, ReactJS, AngularFS, and other frameworks. The MCV connects the frontend and the backend. It consists of a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model: it handles everything related to the database,&lt;/li&gt;
&lt;li&gt;View: it deals with what users can see in the app,&lt;/li&gt;
&lt;li&gt;Controller: it deals with the requests made by users and returns a result, and talks to the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to the MVC, developers don’t need to make decisions on how to organize the code (at least at the early stage of the product), which saves time and makes assembling an MVP more efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gems"&gt;
  &lt;/a&gt;
  Gems
&lt;/h3&gt;

&lt;p&gt;Gems are third-party components, ready to download and use for your project. Does your app require registration and authentication? You can set it up with a Devise gem. Data Visualization? RailRoady, Rails Erd, or Ruby/GraphViz are there for you. Database Tools? Database Cleaner is a set of strategies for cleaning your database in Ruby, while PgHero makes Postgres insights easy. There are plenty of gems that support popular frontend frameworks, such as Angular, Vue.js, React.js, and CSS tools. It’s safe to say that there is a gem for everything, and they save developers tons of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strong-developer-community"&gt;
  &lt;/a&gt;
  Strong developer community
&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is a mature open-source framework, adopted by thousands of developers around the world. Over the years, they have created numerous resources, books, tutorials, and gems. It is relatively easy to find Ruby on Rails developers, and also to train developers who currently work with other technology stacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-tests"&gt;
  &lt;/a&gt;
  Automated tests
&lt;/h3&gt;

&lt;p&gt;The above mentioned community strongly encourages developers to build applications Behavior Driven Development (BDD) and Test Driven Development (TDD). In short, with these approaches, developers write automated tests early in the development process. Thanks to that, bugs can be fixed early, which reduces debugging and saves development time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internal-tools"&gt;
  &lt;/a&gt;
  Internal Tools
&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is often the first choice to build e-commerce applications and SaaS products, especially if the goal is to have an up and running application as fast as possible. Neither e-commerce nor a robust SaaS software can enter the market without internal tools that handle displaying articles, orders, payments, shipping, returns, inventory management, transaction monitoring, data manipulation, and so on.&lt;/p&gt;

&lt;p&gt;In fact, Ruby on Rails has mature admin panel frameworks such as Active Admin or Forest Admin. In this section, we will show you how to build a robust internal tool using Forest Admin. If you’re interested to see how does it compare to Active Admin, we recommend reading this detailed comparison: &lt;a href="https://blog.forestadmin.com/forest-admin-vs-react-admin/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Forest Admin vs. Active Admin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWHaMXRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forestadmin-rails.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWHaMXRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forestadmin-rails.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Forest Admin UI. You can check &lt;a href="https://app.forestadmin.com/livedemo?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;the Forest Admin Live Demo here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Forest Admin is an off-the-shelf solution that can be easily plugged into your Ruby on Rails application and unlike many open source admin panel templates, it can be fully customized to meet your business needs. Once set up, non-technical teams like sales and customer support can easily make edits to the layout and customize it further according to their specific needs.&lt;/p&gt;

&lt;p&gt;How is that possible? Thanks to the unique Forest Admin architecture. Every internal tool built with Forest Admin is composed of two parts: the frontend and the backend. If you choose an existing Rails application as a data source, your Admin Backened is generated within your app. The admin frontend, on the other hand, is managed on Forest Admin servers. Thanks to that, the data is only hosted on your end and it never transits through Forest Admin servers, and even non-technical team members can easily make changes in the layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_MBToVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forest-admin-architecture-rails.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_MBToVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forest-admin-architecture-rails.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The Admin Backend is a Rails Engine mounted on your application &lt;/p&gt;

&lt;p&gt;Many Forest Admin users built their customer-faced applications with Ruby on Rails, including creators of famous &lt;a href="https://blog.forestadmin.com/how-raspberry-pi-uses-forest-admin-to-manage-resellers/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Raspberry Pi&lt;/a&gt; computers and a leading French neobank, &lt;a href="https://blog.forestadmin.com/how-the-neobank-qonto-is-reinventing-business-banking-thanks-to-forest-admin/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Qonto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More Case Studies are available on &lt;a href="https://blog.forestadmin.com/tag/case-study/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Forest Admin blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How to install Forest Admin for Ruby on Rails application&lt;/p&gt;

&lt;p&gt;Installation is hassle-free, using a Forest Admin gem.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Sign up for free&lt;/a&gt;. No credit card is required.&lt;/li&gt;
&lt;li&gt;Forest Admin supports various data sources, so you need to choose Ruby on Rails as yours.&lt;/li&gt;
&lt;li&gt;Verify the application URL (&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; by default).&lt;/li&gt;
&lt;li&gt;Add Forest Admin gem to your application's Gemfile using the gem 'forest_liana' command.&lt;/li&gt;
&lt;li&gt;Bundle it using the bundle install command.&lt;/li&gt;
&lt;li&gt;Install the gem using the rails g forest_liana:install  command — an environment key is provided in the onboarding experience in the first step of the in-app guide.&lt;/li&gt;
&lt;li&gt;Restart your server using the rails s command.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Our own experience shows that Ruby on Rails is a good choice for building reliable, scalable, and secure software, especially SaaS and e-commerce platforms. It is a popular choice for MVPs, but examples of Shopify, Basecamp, Github, Zendesk, and other well-known and established platforms show that an MVP built in Ruby on Rails can easily become a final polished product.&lt;/p&gt;

&lt;p&gt;If we convinced you to build your web application in Ruby on Rails, here is a list of additional resources that will help you start:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-on-rails-resources"&gt;
  &lt;/a&gt;
  Ruby on Rails Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://guides.rubyonrails.org/getting_started.html"&gt;Getting Started with Rails&lt;/a&gt; - the official guide that covers getting up and running with Ruby on Rails in a form of a step-by-step tutorial.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markets/awesome-ruby"&gt;Awesome Ruby&lt;/a&gt; - a community-driven collection of essentials to build web applications in Ruby on Rails: libraries, tools, frameworks, and software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ruby-toolbox.com/"&gt;The Ruby Toolbox&lt;/a&gt; - a comprehensive catalog of Ruby on Rails tools, gems, plug-ins, and resources for developers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.forestadmin.com/rails-migrations-tricks-guide-code-cheatsheet-included/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Rails Migrations Tricks (Guide + Code)&lt;/a&gt; - the ultimate guide to Rails migrations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-ruby-on-rails-application"&gt;How To Build a Ruby on Rails Application&lt;/a&gt; - a detailed tutorial from Digital Ocean.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.forestadmin.com/how-raspberry-pi-uses-forest-admin-to-manage-resellers/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;How Raspberry Pi uses Forest Admin&lt;/a&gt; to manage resellers and design partners with Forest Admin and its Ruby on Rails integration - a detailed case study.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=fmyvWz5TUWg"&gt;Learn Ruby on Rails&lt;/a&gt; - a 4-hour video tutorial from freeCodeCamp.org&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.forestadmin.com/introducing-in-app-ruby-on-rails-support-on-forest-admin/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;How to install Forest Admin for your Ruby on Rails application&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#are-you-looking-for-an-internal-tool-solution-sign-up-on-forest-admin-for-free"&gt;
  &lt;/a&gt;
  Are you looking for an internal tool solution? &lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Sign up on Forest Admin for free&lt;/a&gt;.
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>100+ (Clean Code Studio) Coding Screencasts</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 11:50:12 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/100-clean-code-studio-coding-screencasts-2i9a</link>
      <guid>https://dev.to/cleancodestudio/100-clean-code-studio-coding-screencasts-2i9a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-user-cleancodestudio-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;"How to simplify if statements (Refactoring code smells)" &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fqJiahyRs6A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Programmers - what we SAY vs. what we MEAN"&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0Ii5Oim4OGI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"This is what clean code looks like [tell-tale signs of clean code]" &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7UuQcDs86Uo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Clean Code Studio Live Streaming Test (Messing Around with A Project ~ No Audio)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8bUJQ_IjrLo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Vue 3 Crash Course: Lesson 2 ~ Teleportation Portals (Vue 3 Teleport Component)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hGla9e_b0Zg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Vue 3 Crash Course: Lesson 1 ~ Setup &amp;amp; Multiple Root Nodes (Aka Fragments)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q_9E-euwLm8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"How to Install Laravel Dusk (Showing Browser During Tests)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mhEUZ35_fwA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Install Laravel Homestead (2020 on Windows 10)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QlIc8j5PNnA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 17] Laravel Mix (Whoa) ✅"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3Pu6QJTWZBY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"How to Install Sublime Text on Windows 10 (+Bonus Terminal Shortcut)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/985zH6mWzjs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"How to Install Laravel on Windows 10 (Laragon 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9GSULOjPW9Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Dependency Injection (Simplified)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tW6UHD81SG0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"🏎 Laravel 7 Fluent Strings. All 48 Methods.  (🚀 10 MINUTES!)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8V91KpmdwYo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Corona Layoff (Weird Relief).  Boxes, I looked to check, in Search of My Next Gig  (I Start Monday)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CxCRdY9TeQ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 16] 🤔 Better than Laravel Blade ForEach?  (Plus Blade's $loop variable, it's quite awesome)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8Cwpoi9fyjY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 15] Laravel Blade Foreach ✅  (Laravel 7: Posts Index &amp;amp; Show Views)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3exmyL4RdsE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 14] Integrate HTML Theme into Laravel Blade  (Laravel 7: Themed Views 🏖)" by @CleanCodeStu dio - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Yp_ZQbJvHi4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"🌿[Lesson 13] Laravel Blade Layouts (The View in MVC) 🌿 ☘ 🍀"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SBCS2t2cd5Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"60+ Laravel Collection Methods In (Almost) 15 Minutes 🏎 🚀"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rZvxRQmnw18"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Laravel 7 Lesson 12] Factories &amp;amp; Seeders (Seed database with faker data)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FbARge88vjk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 3] Laravel Nova Relationships (hasOne, belongsTo, hasMany)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bSkfvbaYl7Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 11] Laravel Migrations (Database Basics)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2_lMV1laDoU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 10] Laravel Eloquent Models (Query Builder)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gtk_cE5tVdE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 9] Laravel Database Connection + User Interface (Via PhpMyAdmin)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ij4ZhDiibXY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 8] Laravel Controllers (Simple to Resourceful)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x90WXxY6kPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"[Lesson 7] Route::view(), fallback, redirect, &amp;amp; redirectPermanent (Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Coyz2XssnwM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Route Parameters: Required, Optional, &amp;amp; Constraints (Lesson 6: Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KGz6jLUvfvU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Request Data ~ Ya Mustache It Into Your Views (Lesson 5: Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LBWb0wKQDp8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Routes &amp;amp; Views The Basics (Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/edyf-JMW6vM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Installing Laravel Valet (Lesson 3: Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VUinIGTR60w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"The Laravel Installer (Lesson 2 ~ Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N8mSAJk_JQI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Install Php, Composer, &amp;amp; MySQL (Laravel 7 From The Ground Up)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R6qMg3lhLco"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"How to become a software Engineer Step-by-step (With or Without a Degree)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xI8HRVemqpE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Nova Resources (Lesson 2)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-ZNMy0ZS3O8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Javascript apply, call &amp;amp; bind (Simplified in 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MsUJxQ6jA68"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"My Local Dev Setup ~ Emails, Cron Jobs, AWS S3 Mock, valid SSL (https), xdebug, etc... (Informal)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wDFBnZCCCe4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"14 Must Know JS Array Methods (In 8 minutes)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oN6VZGGGyP4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Array.reduce() -The Most POWERFUL [JavaScript] Function"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WGleM3FeZmU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Javascript...are you sure? Prototype Chains? Immutable Data? First Class Functions? Js, Really?"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dkerCYPRxo4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Built it, life after vue form rabbit whole (vuejs-form package &amp;amp; Laravel Sanctum Gameplan)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_VgLZK9F5qA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel's Crazy (Increibly Crazy)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UljP-d2Y8kw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Getting a job as a software developer (Let's talk ~ Open Discussion Below)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HniHYWqHG8Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 27 ~ "Flash" Success Messages)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/W8nIVEz429g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 26 ~ Reset Password Via Email)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X4omFWhpins"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 25: Mailable Part 2)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IVaKVH-Bt5o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 24: Mailable Part 1)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C0t5iqR9Qvo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 23 ~ Reset Password Foundation)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sWpvb4g47LQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 22: Controllers Cleanup)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/08pi9r2raHg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 21: Old Input Form Population)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fxQS_RTvthg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 20: "Flash" Errors To Form &amp;amp; Validation Rules Dependent on Database)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PPjaIuBXYDQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 19: Validation Messages &amp;amp; Syfony Sessions)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/610jL5ZyOkk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 18: Request Validation)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N6RDYRrZJVQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 17: Csrf Verification)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oEnJthFygII"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 16: Preparatory Refactor)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RZN7CV9Jfkg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 15: Guest &amp;amp; Auth Redirect Middleware)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R4qQofznCHA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 14 ~ Register, Login &amp;amp; Logout)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l662In2_J1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 13: Tailwind CSS Setup)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1F3iI9Vt-GE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 12: Vue js front-end)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aNAMUttK-6s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 11: Slim Console Commands)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ASCk7vZN5L8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php __isset Magic Method  🧙‍♂️(Lesson 7: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bnHGfLNEy5M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 10: Database Migrations, Seeds, &amp;amp; Factories)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/90gukDJXO_w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 9: Eloquent DB Setup)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R3V-cC6jdMM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 8: Http Kernel)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bVBvguUfWy8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 7: Env Variables Files)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hWVDTOD0sP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim 4 Authentication (Lesson 6: Pretty Whoops Error Page)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cuFpVy6Y-IE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Slim Authentication (Lesson 5: Service Providers)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2L0M3lL3jCY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Authentication with Slim 4 (Lesson 4: Controllers)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/udxzHfjZyrA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php __get &amp;amp; __set Methods 🧙‍♂️(Lesson 6: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZDWMeA0sxLI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Foreach Loops (Simplified in 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Pex501nfK8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Authentication with Slim 4 (Lesson 3: Psr-4 Autoloading)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/phOGtIcCYPg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Authentication with Slim 4 (Lesson 2: Views With Blade)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-OGSybfn8zc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Authentication With Slim 4 (Lesson 1: Setup Slim)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3Hg2WPwDyG8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php __invoke Method 🧙‍♂️(Lesson 5: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZXbGfMcFzUM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php _callStatic Method 🧙‍♂️(Lesson 4: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SFdptDojwJ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php _call 🧙‍♂️(Lesson 3: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-UCiPseP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"How to edit wikipedia (Simplified in 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-9FH6XAeNC8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Destruct 🧙‍♂️(Lesson 2: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f8SeAh_pZ80"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Constructors (🧙‍♂️Lesson 1: Php Magic Methods)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4MLA6ssPHGA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Nova Installation 🤟🏻(Simplified in 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t8FCVEV0ll0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Facades 🤯(Simplified in 2021)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Go0JBT98uOw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Validation 🔒(2020 Laravel Authorization ~ Lesson 6)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gulsEppA9e4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Policies 👮(2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/i3jFziRZrkg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Gates 🛡️(2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jVNO-ImrAsc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Brick walls 🧱&amp;amp; software engineering 💻"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VdoN34JaoEc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Route Groups (2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lUXnIEa7eiA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Factories &amp;amp; Seeders (Lesson 2 ~ Laravel 6 Auth)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k7VaQ_sOICU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php for loop (2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MGRYHLSARY4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Middleware 🔐(Laravel 6 authorization)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UaC5plKWXb4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Chain Of Responsibility 🔐(Middleware Design Pattern)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MBTgNEeJEWQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Encapsulation (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yVaVK4QSJYI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Interfaces (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QQvbpJ4kARA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Is php dead? 🤦‍♂️(2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/15a5r3NXtYM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Abstract Classes (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5TauYyZTUjY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Inheritance (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/15jGTgxC8wA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Objects &amp;amp; Static Methods (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_Zd9B_jUwlw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php Classes (Object Oriented Php 2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kwVLTxl1iZI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Homestead (2020)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bLT5v0mmBXs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php slim framework 👩‍💻 👨‍💻(routing, middleware, container, etc...)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Tr_0F_yRIIU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Dependency Inversion Principle (PHP SOLID Design Principles)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dPKFC0PVe8w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Interface Segregation Principle (Php SOLID Design)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8PCjuXvkTNI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Liskov Substitution Principle 🤔(Php SOLID Principles)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fSfNwI6mP0g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel to vuejs (Full Stack Vue.js &amp;amp; Laravel ~ vuejs with Laravel)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ODMTuekriwo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Php class property types, why you mad?  (Pre conditions, post conditions, infectious bugs and types)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BSI57iJ5VII"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"What is your job as a software developer ~ what is complexity (Dependencies and Cognitive load)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CO-nw8DZOHU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"My (unpopular) opinion: TDD tests hurt developer's ability to learn design principles &amp;amp; architecture"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-Rzr8UgUQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"PHP 7.4 ~ Declare (Class Property Strict Type) &amp;amp; Serialization"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gcbAjjgSNyQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Open Closed Principle 💡(Php SOLID Principles)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bjZ3278aXPU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Testing out some green screen video effects with my Brother"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d4CNVI_863c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Vuejs ~ Lesson 10: Vue Life Cyle Hooks &amp;amp; Assets"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lAXakH0IcuM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"PHP Solid Principles ~ Lesson 1: Single Responsibility"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ARxZV8OZ8Cg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"PHP 7.4 ~ Lesson 9: Serialize &amp;amp; Unserialize Magic Methods"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7SQqjgyzFHg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 8: PHP Strip Tags Accepts Array"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bAyWouw_P0Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 7: PHP Numeric literal separator"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iiseIsB1_bk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"PHP 7.4 ~ Lesson 6: PHP Rest Operator (Doesn't exist)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xdsijx661cQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 5: PHP Spread operator (Unpacking arrays)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4rmrGH1MA9A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 4: Null coalescing assignment operator"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XvGrIHJUugE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 3: php short hand functions scope"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nf2KFLTNBEs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"php 7.4 ~ Lesson 2: PHP Short hand functions"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cDggxZI7BmQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"PHP 7.4 ~ Lesson 1: PHP Typed Class Properties"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DG9raLLgQjI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn Vue 2019:  Lesson 9 ~ vue js Props ~ vue js components"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0HMkrrx6krw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn vue js ~ Lesson 8 - Vue Watchers"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TnJp2EEdOZM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn vue js ~ Lesson 7 - Vue Computed Properties"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CgBK4dbVZPY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn vue js ~ Lesson 6 - refactor to data centric design"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S_w69yD5Gko"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn vue js ~ Lesson 5: methods, events, &amp;amp; modifiers"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/q6ydM0VJ_ck"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn Vue ~ Lesson 4: Data Options - 2 Way Bind Data"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/u388ib0KdL8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn Vue ~ Lesson 3: Vue's Virtual DOM"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/F3TQs1pUgzM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn Vue: Lesson 2 ~ Vue's Reactivity System"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/twe-QvJF-x4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Learn Vue ~ Lesson 1: Vue Reactivity &amp;amp; The Virtual DOM"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UATgNA8_X5c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Laravel Tinker (Chrome Console For Laravel &amp;amp; PHP)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vKeBS3JELW0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"phpMyAdmin MySQL Databases Tutorial (cPanel 2019)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0hog1GAPfIo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Create MySQL Database and MySQL User From Inside cPanel 💡(2020 Tutorial)"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/L6TlZUQd7e0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Jordan Bell Rap | Rawls Treats"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rTGL4UTv1YE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;"Text me those questions directly!"  - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FAvfXHrzphw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>php</category>
      <category>software</category>
      <category>programming</category>
      <category>tutorials</category>
    </item>
    <item>
      <title>Easy UI,  a forem.</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Mon, 02 Aug 2021 11:48:48 +0000</pubDate>
      <link>https://dev.to/sidthedev/easy-ui-a-forem-5hin</link>
      <guid>https://dev.to/sidthedev/easy-ui-a-forem-5hin</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-little-history"&gt;
  &lt;/a&gt;
  A little history
&lt;/h2&gt;

&lt;p&gt;I first thought of this idea in March 2021, just when I heard about forem (the open source platform running this website). Flash forward a few months and this community is fully up and running, 100% built with forem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-exactly-is-easy-ui"&gt;
  &lt;/a&gt;
  So what exactly is Easy UI
&lt;/h2&gt;

&lt;p&gt;Although the name may suggest we're about UI design, really, we're a lot more than that. Easy UI is really about building websites and the stuff involved, mostly from a frontend perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-get-started-on-easy-ui"&gt;
  &lt;/a&gt;
  How can you get started on Easy UI
&lt;/h2&gt;

&lt;p&gt;You can create an account &lt;a href="https://easyui.dev"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It would be awesome if you guys on dev could join!&lt;/p&gt;

</description>
      <category>forem</category>
      <category>showdev</category>
      <category>news</category>
      <category>ui</category>
    </item>
    <item>
      <title>S3 file versioning hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 02 Aug 2021 11:22:17 +0000</pubDate>
      <link>https://dev.to/this-is-learning/s3-file-versioning-hands-on-1fcj</link>
      <guid>https://dev.to/this-is-learning/s3-file-versioning-hands-on-1fcj</guid>
      <description>&lt;p&gt;We studied about S3 file versioning in the last part . In this part we will see how to start file versioning in S3 and what are its advantages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHc_AaPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grkyeflchm2gacnauqqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHc_AaPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grkyeflchm2gacnauqqq.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3M60H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xt3feczffvwmdfhrdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3M60H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xt3feczffvwmdfhrdd.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glv_AXvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro3ia7itbt1uxgapqem8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glv_AXvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro3ia7itbt1uxgapqem8.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2eefohR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jvs4tug8gzqapdm4w7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2eefohR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jvs4tug8gzqapdm4w7y.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_54v0oMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8zr3duw0gop8vu062vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_54v0oMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8zr3duw0gop8vu062vv.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MN2Vlzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqrl2j6tw1m6mfqm8ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MN2Vlzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1aqrl2j6tw1m6mfqm8ye.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R45KosDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2knew8avbfc853mzdwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R45KosDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2knew8avbfc853mzdwn.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jmECN0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afx3hxdrfdbgg1mfiwp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jmECN0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afx3hxdrfdbgg1mfiwp1.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VS1SY7XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7011ig7zoakhuwjmzl71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VS1SY7XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7011ig7zoakhuwjmzl71.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7sDkMUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kek897wtnfluvnvos15a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7sDkMUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kek897wtnfluvnvos15a.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oBXCV6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mgp4lxf5fy1ussu4hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oBXCV6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mgp4lxf5fy1ussu4hc.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JwAaLGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5v87tc3cso01w52kuq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JwAaLGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5v87tc3cso01w52kuq8.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDiGBCE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5v6fpkhxmgmls522zdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDiGBCE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5v6fpkhxmgmls522zdu.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to your S3 dashboard &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the bucket that we used in last exercise while deploying a static site in S3&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ag5H2aFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nxf27h5chjeqolx3rdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ag5H2aFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nxf27h5chjeqolx3rdp.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to the properties tag. The first setting is bucket versioning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vucTdAFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3ko7netk8cfl94rxfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vucTdAFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3ko7netk8cfl94rxfb.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on edit in bucket versioning&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9cUIfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2w5pqtlfh3vfnzkxaf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9cUIfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2w5pqtlfh3vfnzkxaf6.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select enable and save changes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P97HAfwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycv6b3bc49b8v664omn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P97HAfwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycv6b3bc49b8v664omn.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bucket versioning is enabled now in the bucket&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let us see what it affects and how it can be useful&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the contents of the index.html file and upload it again I've changes the contents to the following.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Test s3&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Ajit Singh&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world new!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Upload the new file again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable show versions from bucket dashboard you will see that you have two versions of the file&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-9sKO2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9scwlbr2c1vwm73rx4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-9sKO2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9scwlbr2c1vwm73rx4x.png" alt="S3 versioning"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now on checking the website link you will see the contents changes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#now-let-us-see-how-to-recover-our-old-file"&gt;
  &lt;/a&gt;
  Now let us see how to recover our old file
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To recover the old file we can select a specific version on the dashboard and delete it then we will recover our old file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let us again go to our website link. we will see that our file is reverted back.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let us now try to delete the last index.html file but turn off show versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will see that this is not an option of permanently delete but a delete&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you delete the object you will see you bucket is empty &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable show versions you will see that it is not actually deleted but S3 adds a delete marker on it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can now recover the object by deleting the delete marker on the object same way we deleted the other version&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Voila we have recover the version&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here we see why bucket versioning is so important in S3 and why this should definitely be enabled for important buckets. We have already created a S3 bucket but how to see logs if retrieval of file is failing. Next time we will study how to enable logging in S3 buckets.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>VUE + TSX 💖 IDE | How to enable Intellisense with VUE + TS + JSX</title>
      <author>Eugene</author>
      <pubDate>Mon, 02 Aug 2021 11:09:43 +0000</pubDate>
      <link>https://dev.to/sincovschi/vue-tsx-ide-how-to-enable-intellisense-with-vue-ts-jsx-49nc</link>
      <guid>https://dev.to/sincovschi/vue-tsx-ide-how-to-enable-intellisense-with-vue-ts-jsx-49nc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-solution"&gt;The Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-code"&gt;The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-conclusion"&gt;The Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I choose a lazy person to do a hard job.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Because a lazy person will find an easy way to do it.&lt;/em&gt;&lt;br&gt;
― Bill Gates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the quote above implies, the lazier the person is - the merrier. Therefore, having a good &lt;a href="https://code.visualstudio.com/docs/editor/intellisense"&gt;IntelliSense&lt;/a&gt; enabled, makes your life so much easier and lazier.&lt;/p&gt;

&lt;p&gt;After switching from a strongly typed language to a not typed one, the biggest discomfort, the developer is feeling - is the lack of IntelliSense support in VSCode or other IDE.&lt;/p&gt;

&lt;p&gt;Another issue is the way &lt;a href="https://v3.vuejs.org/api/options-api.html"&gt;Vue with Options API&lt;/a&gt; distorts your understanding of how Javascript works. It's very hard to understand what is happening inside the component. Also, IDE is completely useless when it comes to templates. You start to hate it... but this is what it is to be a developer. So, beer with it (pun intended).&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The Solutions:
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-part-1-install-extensions"&gt;
  &lt;/a&gt;
  Solution part 1: install extensions
&lt;/h3&gt;

&lt;p&gt;
  Vue extensions, click here.
  &lt;h4&gt;
  &lt;a href="#vetur-httpsmarketplacevisualstudiocomitemsitemnameoctrefvetur"&gt;
  &lt;/a&gt;
  Vetur: &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;https://marketplace.visualstudio.com/items?itemName=octref.vetur&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This is an officially promoted extension for VSCode. It is good but does not offer full support. You have to install some additional dependencies. And if the folder structure is not standard - it's nearly useless. You even have to turn on an experimental feature to be able to work with templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;.vscode/settings.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"vetur.experimental.templateInterpolationService"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vue-helper-httpsmarketplacevisualstudiocomitemsitemnameshenjiaolongvuehelper"&gt;
  &lt;/a&gt;
  Vue Helper: &lt;a href="https://marketplace.visualstudio.com/items?itemName=shenjiaolong.vue-helper"&gt;https://marketplace.visualstudio.com/items?itemName=shenjiaolong.vue-helper&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;One of the best extensions - it parses your mess of attributes from inside data, props, or computed. Then makes them available inside the template inside double-quotes. Also with this, you are able to Ctrl + Click on props in the template and jump to them inside the script tag. Saves you the whole time of searching "where the heck is this variable comes from".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vue-peek-httpsmarketplacevisualstudiocomitemsitemnamedariofuzinatovuepeek"&gt;
  &lt;/a&gt;
  Vue Peek: &lt;a href="https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek"&gt;https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In case Vetur is not working properly, add this extension. It gives you the superpower of Ctrl + Clicks directly inside the template. &lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-part-2-add-typescript-and-jsx"&gt;
  &lt;/a&gt;
  Solution part 2: add TypeScript and JSX
&lt;/h3&gt;

&lt;p&gt;About TS, I can say that I'm a developer which stands on the side of the barricade that believes that Typescript is the best thing that could ever happen to Javascript. I was working with TS from the very beginning. So, to enable TS in .vue files its enough to specify it on the script tag like this:&lt;br&gt;
&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For JSX, so far, at this point in the history of humankind, JSX is the only HTML interpreter that works with Javascript and IDE understands it. To use it with Vue, a little trick is needed. And I'm going to explain it in-depth inside comments of code that will be attached in this post.&lt;/p&gt;

&lt;p&gt;It was like an epiphany when I realized that I can work with Vue just like I used to do with React. And also to pack along with all the tools that Vue offers out of the box. Using Vue like this takes the best of the two worlds. It's something that I started to love and enjoy working with.&lt;/p&gt;

&lt;p&gt;So, to put it in a few words. You need to write Vue with a style friendly toward TS. This is either &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Vue with Composition API&lt;/a&gt; or &lt;a href="https://class-component.vuejs.org/"&gt;Vue with Class Style Components&lt;/a&gt;. And to use JSX instead of &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://class-component.vuejs.org/"&gt;Vue with Class Style Components&lt;/a&gt; - This is a very good way to write components if you like Class Style. It has the official support of this style for Vue 2. &lt;strong&gt;BEWARE&lt;/strong&gt; Class style is working out of the box in Vue 3. But its support is officially dropped &lt;a href="https://github.com/vuejs/rfcs/pull/17#issuecomment-494242121"&gt;the reasons can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Vue with Composition API&lt;/a&gt; - This is the future of Vue. Just like with Hooks - React has become a lot better. It's the same functional components composition style. With this style, Vue got very much like React, to a point that is hard to say the difference when writing components. And that all comes along with all the awesome features Vue has. For those who are working with Vue 2, there is this official package &lt;a href="https://github.com/vuejs/composition-api"&gt;Vue 2 Composition API&lt;/a&gt;. This package will also prepare you to migrate to Vue 3 with near to no effort.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code:
&lt;/h2&gt;

&lt;p&gt;Either go through the code via Stackblitz or &lt;a href="https://github.com/sincovschi/vuetsx"&gt;clone git repository&lt;/a&gt; locally and open with favorite IDE. But please take a moment and read the comments inside components to understand it better.&lt;/p&gt;

&lt;p&gt;Note: Because I have created Stackblitz on a node project, it takes a while to install dependencies and to launch project.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/vue-tsx?embed=1&amp;amp;&amp;amp;file=src/App.vue" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-conclusion"&gt;
  &lt;/a&gt;
  The Conclusion:
&lt;/h2&gt;

&lt;p&gt;As developers, we must use our time wisely. And being able to have a framework's documentation at the tip of your cursor - means a lot.&lt;/p&gt;

&lt;p&gt;When you return to a project after a while... to understand what is happening there, like you were working there yesterday - means even more.&lt;/p&gt;

&lt;p&gt;Therefore, we must be very lazy. We must not hoard in mind all the technicalities of a project. We must write them down, via self-explanatory code. And that is easily achieved with Typescript and code friendly with TS. The Intellisense will pick it up naturally and will be your best friend and guide you through the &lt;u title="“We like to think we spend our time power typing, but we actually spend most of our time staring into the abyss.” — Douglas Crockford"&gt;abyss*&lt;/u&gt;.&lt;/p&gt;




&lt;p&gt;May the bugs avoid you,&lt;br&gt;
&lt;a href="https://dev.to/sincovschi"&gt;Eugene&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Critical Tips to Learn Programming Language Fast (quickly &amp; easily)</title>
      <author>Programming with Shahan</author>
      <pubDate>Mon, 02 Aug 2021 11:04:11 +0000</pubDate>
      <link>https://dev.to/codewithshahan/10-critical-tips-to-learn-programming-language-fast-quickly-easily-ej3</link>
      <guid>https://dev.to/codewithshahan/10-critical-tips-to-learn-programming-language-fast-quickly-easily-ej3</guid>
      <description>&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;ne of the common and basic question among the students or someone who wants to learn code is &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysL_Dsi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/origin/f7/f748a43312487000f282968b97aa60fe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysL_Dsi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/origin/f7/f748a43312487000f282968b97aa60fe.gif" alt="question gif from gifer.com"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“How can I learn to code fast and make a career  as a programmer?”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether you are a student, fresher or experienced person trying to switch your job into &lt;strong&gt;programming&lt;/strong&gt;, you &lt;em&gt;definitely&lt;/em&gt; trying to find &lt;em&gt;tips&lt;/em&gt; &amp;amp; &lt;em&gt;tricks&lt;/em&gt; to learn programming &lt;strong&gt;quickly&lt;/strong&gt; and &lt;strong&gt;effectively&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#programming-in-reality"&gt;
  &lt;/a&gt;
  👨‍💻Programming in Reality
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qarV7uI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/5eKX.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qarV7uI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/5eKX.gif" alt="exited programmer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Job&lt;/strong&gt; of &lt;strong&gt;programmers&lt;/strong&gt; is one of the &lt;strong&gt;high paid&lt;/strong&gt; job in the  market &amp;amp; one of the &lt;strong&gt;coolest&lt;/strong&gt; job people find to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning&lt;/strong&gt; to code and mastering it can take years for a &lt;strong&gt;&lt;em&gt;beginner&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most people &lt;strong&gt;&lt;em&gt;give up&lt;/em&gt;&lt;/strong&gt; before they &lt;strong&gt;truly&lt;/strong&gt; get started. &lt;/p&gt;

&lt;p&gt;In the beginning, we get very  excited about the concept of learning to &lt;strong&gt;code&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8bBXlXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/Ao.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8bBXlXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/Ao.gif" alt="coding journey"&gt;&lt;/a&gt;&lt;br&gt;
But later in most cases, &lt;em&gt;students&lt;/em&gt; or &lt;em&gt;beginners&lt;/em&gt; give up &lt;strong&gt;&lt;em&gt;quickly&lt;/em&gt;&lt;/strong&gt;. Because they find it &lt;strong&gt;difficult&lt;/strong&gt; to continue. They get stuck, and they face difficulty in finding the &lt;em&gt;solution&lt;/em&gt; for the code.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2cvLdWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giffiles.alphacoders.com/360/36086.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2cvLdWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giffiles.alphacoders.com/360/36086.gif" alt="programmr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-all-about-patience"&gt;
  &lt;/a&gt;
  🎯 It's All About Patience
&lt;/h3&gt;

&lt;p&gt;Learning to program isn’t an &lt;strong&gt;&lt;em&gt;overnight&lt;/em&gt;&lt;/strong&gt; journey. But, it’s also not as &lt;strong&gt;&lt;em&gt;difficult&lt;/em&gt;&lt;/strong&gt; as people think about it.&lt;/p&gt;

&lt;p&gt;All it just requires is &lt;strong&gt;dedication&lt;/strong&gt;, &lt;strong&gt;passion&lt;/strong&gt;,  &lt;strong&gt;interest&lt;/strong&gt;, and definitely &lt;strong&gt;&lt;em&gt;patience&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are so many &lt;strong&gt;online resources&lt;/strong&gt; available to learn to code  &lt;em&gt;easily&lt;/em&gt;, &lt;em&gt;quickly&lt;/em&gt;, and &lt;em&gt;effectively&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, let's talk about👇&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#critical-tips-to-learn-programming-fast"&gt;
  &lt;/a&gt;
  🔟Critical Tips to learn Programming Fast!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2Nlrimn5B50"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt; by &lt;em&gt;doing&lt;/em&gt;. Always play with the code while &lt;strong&gt;learning&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grasp the &lt;strong&gt;fundamentals&lt;/strong&gt; for &lt;em&gt;long-term&lt;/em&gt; benefits,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Code by hand&lt;/em&gt;&lt;/strong&gt;. It's &lt;em&gt;sharpens&lt;/em&gt; proficiency  and you’ll need it to &lt;strong&gt;get a job&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never Get &lt;em&gt;Tired&lt;/em&gt; of &lt;strong&gt;Practicing&lt;/strong&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask for help&lt;/strong&gt;. You’ll need it,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seek out more &lt;strong&gt;online resources&lt;/strong&gt;. There’s a wealth of content,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn From the &lt;strong&gt;Bugs&lt;/strong&gt; or &lt;em&gt;error&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t just read the &lt;strong&gt;sample code&lt;/strong&gt;. &lt;em&gt;Thinker&lt;/em&gt; with it,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take &lt;strong&gt;breaks&lt;/strong&gt; when debugging,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be curious&lt;/strong&gt;. Because, if you are interested in the topic, you will search for additional &lt;em&gt;resources&lt;/em&gt;, like &lt;strong&gt;articles&lt;/strong&gt; or &lt;strong&gt;YouTube&lt;/strong&gt;  videos, to develop your &lt;strong&gt;knowledge&lt;/strong&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#be-confident"&gt;
  &lt;/a&gt;
  🏹Be Confident
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMnACt1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/e0/88/f5/e088f5d03a5c04acf4372c8031d5571e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMnACt1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/e0/88/f5/e088f5d03a5c04acf4372c8031d5571e.gif" alt="confident programmer"&gt;&lt;/a&gt;&lt;br&gt;
Despite these 10 tips, the most important ingredient to learn to &lt;em&gt;program&lt;/em&gt; &lt;strong&gt;faster&lt;/strong&gt; is to remain &lt;strong&gt;confident&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To do so, you should expect to &lt;strong&gt;fail&lt;/strong&gt; &lt;em&gt;repeatedly&lt;/em&gt;, and be patient with your progress.&lt;/p&gt;

&lt;p&gt;Because, becoming an &lt;strong&gt;expert&lt;/strong&gt; at anything requires &lt;strong&gt;hard work&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  📝Conclusion
&lt;/h2&gt;

&lt;p&gt;If a single &lt;em&gt;doubt&lt;/em&gt; ever clouds in your &lt;strong&gt;mind&lt;/strong&gt;, remember, that every &lt;strong&gt;&lt;em&gt;programmer&lt;/em&gt;&lt;/strong&gt; this path before. None of them more &lt;strong&gt;destined to&lt;/strong&gt; become a &lt;em&gt;developer&lt;/em&gt; than &lt;strong&gt;&lt;em&gt;you&lt;/em&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;Whichever path you are currently on, be it college or coding BootCamp, the only barrier to success is your  work ethic and confidence to persevere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendation"&gt;
  &lt;/a&gt;
  🧷Recommendation
&lt;/h2&gt;

&lt;p&gt;If you are interested in &lt;strong&gt;&lt;em&gt;Front-end&lt;/em&gt;&lt;/strong&gt; developments and &lt;em&gt;programming&lt;/em&gt; &lt;strong&gt;tips&lt;/strong&gt; and &lt;strong&gt;tricks&lt;/strong&gt;, feel free to visit my &lt;a href="https://www.youtube.com/channel/UCyQg06zsc9tBtjgpQ_k8wUg/features"&gt;🔗 YouTube Channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/codewithshahan"&gt;🕊&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://www.instagram.com/codewithshahan"&gt;🙄&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-more"&gt;
  &lt;/a&gt;
  🧩Resources to learn more
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.codingdojo.com/blog/7-tips-learn-programming-faster"&gt;coding dojo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://simpleprogrammer.com/critical-programming-tips/"&gt;simple programmer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Object Types in TypeScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 02 Aug 2021 10:26:33 +0000</pubDate>
      <link>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</link>
      <guid>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-ghe</guid>
      <description>&lt;p&gt;In JavaScript, objects are among the most popular ways to work with and pass around data. In TypeScript, there is a special type called "object type" created solely for objects. This tutorial will help you understand what object types in TypeScript are and how to work with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-types-in-a-brief"&gt;
  &lt;/a&gt;
  Object types in a brief
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are basically two types of values. The first type are &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt2/"&gt;primitive data types&lt;/a&gt;. These are the eight basic data types, some of which you will work with quite often. These data types include string, number, boolean, null, symbol and so on. Aside to these primitive data types, there is the second type of values.&lt;/p&gt;

&lt;p&gt;This second type of values are objects. In JavaScript, you can quickly distinguish between a primitive data type and an object by looking at the value. If the value itself has any properties, it is an object. Otherwise, it is one of the eight primitive data types. Each of these types has also corresponding type in TypeScript.&lt;/p&gt;

&lt;p&gt;This applies to objects as well. In TypeScript, there is a new type called object type. This type applies to any value that has some properties, at least one. This new type aims to make working with objects, as well as annotating them, easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anonymous-object-types"&gt;
  &lt;/a&gt;
  Anonymous object types
&lt;/h2&gt;

&lt;p&gt;TypeScript allows you to define two types of object types. The first type is anonymous. This is when you define an object for a specific object without using type or an interface. One example of an anonymous object type can be a function parameter. Let's say you have a function which accepts an object as a parameter.&lt;/p&gt;

&lt;p&gt;If you want to define the object type for this object parameter as anonymous you will define it at the definition of the function. You define what properties the object is supposed to have. For each property, you also define what the type of the property value is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a function with anonymous object type:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, you defined the object parameter called the &lt;code&gt;user&lt;/code&gt;. The anonymous object type of this parameter says that the object has two properties: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;. Both properties are of type string and both are required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-object-types"&gt;
  &lt;/a&gt;
  Named object types
&lt;/h2&gt;

&lt;p&gt;The second way to define an object types is by using a type alias or an interface. In this case, you use one of these two to define the shape of the object. When you want to annotate an object with this shape you reference the type alias or interface. TypeScript will use the alias or interface to infer types for all object properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No.1: type alias&lt;/span&gt;
&lt;span class="c1"&gt;// Create a type alias for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No.2: interface&lt;/span&gt;
&lt;span class="c1"&gt;// Create am interface for user object:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use the type alias or interface to annotate user parameter:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`user: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure of the object type itself is the same. There are still two properties, of a type string. The difference is that now the object type is defined outside the function or place where it is used, independently if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-and-anonymous-object-type-and-reusability"&gt;
  &lt;/a&gt;
  Named and anonymous object type and re-usability
&lt;/h2&gt;

&lt;p&gt;Named object types have one big benefit that is re-usability of your code. When you define object types as named, you can use them as many times as you want. If you also &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"&gt;export&lt;/a&gt; them, you can also use them anywhere you want. Write once, use anywhere, any time. You can't do this with anonymous types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the type alias for Human object once:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for one function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, age: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'name: Tim, age: 44'&lt;/span&gt;

&lt;span class="c1"&gt;// Use Human type alias for another function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;usersNames&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samantha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Joe', 'Jack', 'Samantha' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since anonymous object type has no name you can't reference it elsewhere in your code. If you want to re-use the shape it defines, you have to write it again. This is one reason TypeScript developers use named object types more often than anonymous. However, this doesn't mean you should never use anonymous object type.&lt;/p&gt;

&lt;p&gt;A good rule of thumb is to think about the object and what is the likelihood you will use its shape again. If it is likely you will work with its shape, or similar, it might be a good idea to create a type alias or an interface. Then, whenever you will work with that specific shape you will reference the alias or interface.&lt;/p&gt;

&lt;p&gt;This will make it much easier to make changes as you work. You will have to change only one place, the alias or the interface. Once you make the change, it will propagate everywhere you use the alias or the interface. Compare this to searching for all occurrences of that specific shape in your code and updating them.&lt;/p&gt;

&lt;p&gt;This will also help you keep the probability of bugs at the minimum. When you update the alias or interface TypeScript will be able to immediately warn you if you have to change some code so the code reflects the new shape. This will not happen with anonymous object type because there is no single source of truth TypeScript could use.&lt;/p&gt;

&lt;p&gt;On the other hand, if you are not likely to work with that, or similar, shape again, anonymous object type will do the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-type-and-property-modifiers"&gt;
  &lt;/a&gt;
  Object type and property modifiers
&lt;/h2&gt;

&lt;p&gt;When you define an object type, anonymous or named, all properties are required and changeable. TypeScript allows you to change this with the help of property modifiers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-object-properties"&gt;
  &lt;/a&gt;
  Optional object properties
&lt;/h3&gt;

&lt;p&gt;There is a difference between an object that may have some properties and an object that must have some properties. When you create an object type that specifies some properties, TypeScript expects to find these properties in the object you annotated with that object type.&lt;/p&gt;

&lt;p&gt;If you forget to define all these properties in the object, TypeScript will complain. Along with this, TypeScript will also expect to find only those properties you defined. It will not expect any other. It will actually also complain if it finds some additional properties. There are two ways out of this.&lt;/p&gt;

&lt;p&gt;The first way is to create multiple variations of the object type to cover various use cases. This might work for some cases, when you alter the shape of the object. However, creating new variant just to make one property optional is insane. What you can do instead is to tell TypeScript that some property is optional.&lt;/p&gt;

&lt;p&gt;This will also tell TypeScript that the property may not be defined every time. And, if it is indeed not defined it should complain about it. Well, unless you actually try to use the property. You can achieve this, making some property optional, by putting a question mark symbol (&lt;code&gt;?&lt;/code&gt;) right after the property name in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
  &lt;span class="nl"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This property is optional (the '?' after the property name)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;numberOfLegs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lengthOfTail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dorris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pelican&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;wingSpan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nemo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;// The "species" property is required, but missing.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'species' is missing in type '{ name: string; }' but required in type 'Animal'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-object-properties"&gt;
  &lt;/a&gt;
  Readonly object properties
&lt;/h3&gt;

&lt;p&gt;The second property modifier is &lt;code&gt;readonly&lt;/code&gt;. This modifier helps you specify properties which values should not be change after you initialize them. Note that this modifier works only in TypeScript. If you mark some property as readonly, and later try to change it, TypeScript will complain by throwing an error.&lt;/p&gt;

&lt;p&gt;However, this will not prevent JavaScript from executing that change. For JavaScript, there is no such a thing as a readonly property, at least not now. You can specify a property as a readonly by putting the &lt;code&gt;readonly&lt;/code&gt; keyword just before the property in the object type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with optional properties:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "name" readonly&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Make "email" readonly&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@jack.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234_some_pass_to_test_56789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of property "role" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change value of readonly property "email" on "jack" object:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack@yo.ai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-types-and-index-signatures"&gt;
  &lt;/a&gt;
  Object types and index signatures
&lt;/h2&gt;

&lt;p&gt;So far, we've worked with objects in which we knew all properties beforehand. This may not be true every time. You may find yourself in situations where you will know only what type of property and what type of a value to expect. However, you may not know the exact name of the property.&lt;/p&gt;

&lt;p&gt;In TypeScript, this is not a problem thanks to index signatures. With index signatures, you can specify the type of a property you expect along with the type of its value. This gives you a lot of flexibility because as long as both types are correct TypeScript will not complain about anything.&lt;/p&gt;

&lt;p&gt;When you want to use index signature you have to remember to use a slightly different syntax for defining properties. Normally, you would define some property "X", add colon, and then add some type for its value. This tells TypeScript that there is specific property "X" in the object. Thing is, we don't know this "X".&lt;/p&gt;

&lt;p&gt;To overcome this with index signature, you have to wrap the property with square brackets and add some type. This type says what type the property itself will be. Allowed types for index signatures are string and number. The rest is the same. What follows next are colons and some type for the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create another object type with index signature:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of number:&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a string.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookshelf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Property is always a number.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hackers and Painters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Blitzscaling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumberKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings, not numbers.&lt;/span&gt;
  &lt;span class="na"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;two&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TypeScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type '{ one: string; two: string; }' is not assignable to type 'NumberKey'.&lt;/span&gt;
&lt;span class="c1"&gt;// Object literal may only specify known properties, and 'one' does not exist in type 'NumberKey'.&lt;/span&gt;

&lt;span class="c1"&gt;// This will also not work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties are strings,&lt;/span&gt;
  &lt;span class="c1"&gt;// but the values are numbers and not strings.&lt;/span&gt;
  &lt;span class="na"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type 'number' is not assignable to type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#readonly-index-signatures"&gt;
  &lt;/a&gt;
  Readonly index signatures
&lt;/h3&gt;

&lt;p&gt;Index signatures also allow you to use the &lt;code&gt;readonly&lt;/code&gt; keyword to specify readonly properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object type with index signature and readonly property:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The property will be a type of string and a readonly:&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object with shape of "ReadonlyStringKey":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReadonlyStringKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Suzzy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Abyssinian Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="c1"&gt;// Try to change the value of "name" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change the value of "age" property on "cat":&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Index signature in type 'ReadonlyStringKey' only permits reading.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-introduction-to-object-types-in-typescript"&gt;
  &lt;/a&gt;
  Conclusion: Introduction to Object Types in TypeScript
&lt;/h2&gt;

&lt;p&gt;Objects are fundamental part of JavaScript. TypeScript object types can also make them type safe. Object types can also make it easier to work with objects in general. I hope that this tutorial helped you learn what anonymous and named object types in TypeScript are and how to use property modifiers and index signatures.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Visual Studio Code Keyboard Shortcuts for Windows</title>
      <author>Archit Sharma</author>
      <pubDate>Mon, 02 Aug 2021 10:03:17 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</link>
      <guid>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently. VS Code is Free, built on open source, easy to use code editor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visual Studio Code keyboard shortcuts are helps developers in writing code more efficiently and for boosting their working performance.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#shortcut-keys-are-categorized-in-following-categories-"&gt;
  &lt;/a&gt;
  Shortcut keys are categorized in following categories :-
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;General Shortcuts&lt;/li&gt;
&lt;li&gt;Basic Editing Shortcuts&lt;/li&gt;
&lt;li&gt;Navigation Shortcuts&lt;/li&gt;
&lt;li&gt;Search and replace Shortcuts&lt;/li&gt;
&lt;li&gt;Multi-cursor and selection Shortcuts&lt;/li&gt;
&lt;li&gt;Rich languages editing Shortcuts&lt;/li&gt;
&lt;li&gt;Editor management Shortcuts&lt;/li&gt;
&lt;li&gt;File management Shortcuts&lt;/li&gt;
&lt;li&gt;Debug Shortcuts&lt;/li&gt;
&lt;li&gt;Integrated terminal Shortcuts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Shortcut Key&lt;/code&gt;       -   Description&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-shortcuts"&gt;
  &lt;/a&gt;
  General Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Shift+P, F1&lt;/code&gt;   -   &lt;em&gt;Show Command Palette&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt;        -   &lt;em&gt;Quick Open, Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;      -   &lt;em&gt;New window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+W&lt;/code&gt;      -   &lt;em&gt;Close window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+,&lt;/code&gt;        -   &lt;em&gt;User Settings&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;         -   &lt;em&gt;Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-editing"&gt;
  &lt;/a&gt;
  Basic Editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+X&lt;/code&gt;        -   &lt;em&gt;Cut line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;        -   &lt;em&gt;Copy line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Move line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + ↓ / ↑&lt;/code&gt;  -    &lt;em&gt;Copy line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+K&lt;/code&gt;      -   &lt;em&gt;Delete line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Enter&lt;/code&gt;        -   &lt;em&gt;Insert line below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Enter&lt;/code&gt;   -    &lt;em&gt;Insert line above&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+\&lt;/code&gt;      -   &lt;em&gt;Jump to matching bracket&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+] / [&lt;/code&gt;        -   &lt;em&gt;Indent/outdent line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Home / End&lt;/code&gt;        -   &lt;em&gt;Go to beginning/end of line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home&lt;/code&gt;         -   &lt;em&gt;Go to beginning of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+End&lt;/code&gt;      -   &lt;em&gt;Go to end of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Scroll line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+PgUp / PgDn&lt;/code&gt;    -    &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+[&lt;/code&gt;      -   &lt;em&gt;Fold (collapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+]&lt;/code&gt;      -   &lt;em&gt;Unfold (uncollapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+[&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+]&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+0&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+J&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+C&lt;/code&gt;         -   &lt;em&gt;Add line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+U&lt;/code&gt;         -   &lt;em&gt;Remove line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+/&lt;/code&gt;        -   &lt;em&gt;Toggle line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+A&lt;/code&gt;       -   &lt;em&gt;Toggle block comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Z&lt;/code&gt;                 -   &lt;em&gt;Toggle word wrap&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation-shortcuts"&gt;
  &lt;/a&gt;
  Navigation Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+T&lt;/code&gt; - &lt;em&gt;Show all Symbols&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+G&lt;/code&gt; - &lt;em&gt;Go to Line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt; - &lt;em&gt;Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+O&lt;/code&gt; -   &lt;em&gt;Go to Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+M&lt;/code&gt; -   &lt;em&gt;Show Problems panel&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F8&lt;/code&gt; - &lt;em&gt;Go to the next error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F8&lt;/code&gt; -   &lt;em&gt;Go to previous error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt; - &lt;em&gt;Navigate editor group history&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ← / →&lt;/code&gt; - &lt;em&gt;Go back / forward&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+M&lt;/code&gt; - &lt;em&gt;Toggle Tab moves the focus&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-and-replace"&gt;
  &lt;/a&gt;
  Search and replace
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F&lt;/code&gt; - &lt;em&gt;Find&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+H&lt;/code&gt; - &lt;em&gt;Replace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F3 / Shift+F3&lt;/code&gt;  - &lt;em&gt;Find next/previous&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Enter&lt;/code&gt;  - &lt;em&gt;Select all occurences of Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+D&lt;/code&gt;  - &lt;em&gt;Add selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+D&lt;/code&gt; - &lt;em&gt;Move last selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+C / R / W&lt;/code&gt; - &lt;em&gt;Toggle case-sensitive / regex / whole word&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicursor-and-selection-shortcuts"&gt;
  &lt;/a&gt;
  Multi-cursor and selection Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt+Click&lt;/code&gt; - &lt;em&gt;Insert cursor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Alt+ ↑ / ↓&lt;/code&gt; - &lt;em&gt;Insert cursor above / below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+U&lt;/code&gt; - &lt;em&gt;Undo last cursor operation&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+I&lt;/code&gt; - &lt;em&gt;Insert cursor at end of each line selected&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+L&lt;/code&gt; - &lt;em&gt;Select current line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; - &lt;em&gt;Select all occurrences of current selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+F2&lt;/code&gt;  - &lt;em&gt;Select all occurrences of current word&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+→&lt;/code&gt; - &lt;em&gt;Expand selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+←&lt;/code&gt; - &lt;em&gt;Shrink selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + (drag mouse)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + (arrow key)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + PgUp/PgDn&lt;/code&gt; - &lt;em&gt;Column (box) selection page up/down&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich-languages-editing"&gt;
  &lt;/a&gt;
  Rich languages editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt; - &lt;em&gt;Trigger suggestion&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Space&lt;/code&gt;  - &lt;em&gt;Trigger parameter hints&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+F&lt;/code&gt; - &lt;em&gt;Format document&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+F&lt;/code&gt; - &lt;em&gt;Format selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F12&lt;/code&gt; - &lt;em&gt;Go to Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+F12&lt;/code&gt; - &lt;em&gt;Peek Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F12&lt;/code&gt; - &lt;em&gt;Open Definition to the side&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+.&lt;/code&gt; - &lt;em&gt;Quick Fix&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F12&lt;/code&gt; - &lt;em&gt;Show References&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F2&lt;/code&gt; - &lt;em&gt;Rename Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+X&lt;/code&gt; - &lt;em&gt;Trim trailing whitespace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K M&lt;/code&gt; - &lt;em&gt;Change file language&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editor-management"&gt;
  &lt;/a&gt;
  Editor management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F4, Ctrl+W&lt;/code&gt; - &lt;em&gt;Close editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F&lt;/code&gt; - &lt;em&gt;Close folder&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+\&lt;/code&gt; - &lt;em&gt;Split editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+ 1 / 2 / 3&lt;/code&gt; - &lt;em&gt;Focus into 1st, 2nd or 3rd editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+ ←/→&lt;/code&gt; - &lt;em&gt;Focus into previous/next editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Move editor left/right&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K ← / →&lt;/code&gt; - &lt;em&gt;Move active editor group&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-management"&gt;
  &lt;/a&gt;
  File management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+N&lt;/code&gt; - &lt;em&gt;New File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+O&lt;/code&gt; - &lt;em&gt;Open File...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+S&lt;/code&gt; - &lt;em&gt;Save&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+S&lt;/code&gt; - &lt;em&gt;Save As...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K S&lt;/code&gt; - &lt;em&gt;Save All&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+F4&lt;/code&gt; - &lt;em&gt;Close&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+W&lt;/code&gt; - &lt;em&gt;Close All&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+T&lt;/code&gt; - &lt;em&gt;Reopen closed editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K&lt;/code&gt; - &lt;em&gt;Enter Keep preview mode editor open&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Tab&lt;/code&gt; - &lt;em&gt;Open next&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt; - &lt;em&gt;Open previous&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K P&lt;/code&gt; - &lt;em&gt;Copy path of active file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K R&lt;/code&gt; - &lt;em&gt;Reveal active file in Explorer&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K O&lt;/code&gt; - &lt;em&gt;Show active file in new window/instance&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;F9&lt;/code&gt; - &lt;em&gt;Toggle breakpoint&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F5&lt;/code&gt; - &lt;em&gt;Start/Continue&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F5&lt;/code&gt; - &lt;em&gt;Stop&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F11 / Shift+F11&lt;/code&gt; - &lt;em&gt;Step into/out&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F10&lt;/code&gt; - &lt;em&gt;Step over&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+I&lt;/code&gt; - &lt;em&gt;Show hover&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-terminal"&gt;
  &lt;/a&gt;
  Integrated terminal
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+C&lt;/code&gt; - &lt;em&gt;Copy selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+V&lt;/code&gt; - &lt;em&gt;Paste into active terminal&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt; - &lt;em&gt;Scroll up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home / End&lt;/code&gt; - &lt;em&gt;Scroll to top/bottom&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Other operating systems’ keyboard shortcuts and additional&lt;br&gt;
unassigned shortcuts available at &lt;a href="//aka.ms/vscodekeybindings"&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>windows</category>
      <category>programming</category>
      <category>microsoft</category>
    </item>
  </channel>
</rss>
