<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I built an AI-Powered Image Processor at AWS re:Invent üò± - Day 2</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 30 Nov 2021 20:16:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</link>
      <guid>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</guid>
      <description>&lt;p&gt;Just wrapped up Day 2 of Amazon Web Services (AWS) re:Invent and from the Midnight Madness concert, to building an AI-Powered Image Processor during Talia Nassi's workshop, to catching up with the amazing Adrienne Tacke from MongoDB....there is a TON going on Vegas! &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=kJV-OD_VAJk" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world.&lt;/p&gt;

&lt;p&gt;Also, I built an AI-Powered image processing application that can take images and analyze certain features about the uploaded images‚Ä¶so that was pretty cool üò±&lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a glance at what you‚Äôll learn in this blog post:&lt;br&gt;
üëâ  What AWS re:Invent is all about&lt;br&gt;
üëâ  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
üëâ  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? üí≠&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ‚¨áÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! üöÄ&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How I improved nested arrays performance in our MongoDB</title>
      <author>Anton</author>
      <pubDate>Tue, 30 Nov 2021 20:10:15 +0000</pubDate>
      <link>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</link>
      <guid>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" alt="Photo by [Fotis Fotopoulos](https://unsplash.com/@ffstop?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it started?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In 2019 I started to work on &lt;a href="https://fanficus.com"&gt;fanficus.com&lt;/a&gt;. Which is Russian speaking fiction writers/readers social network. Spent around a month thinking about how to structure the architecture of the web application. In the beginning, I didn‚Äôt know exactly what I am working on. Initially, it seemed a small side project for a few months.&lt;/p&gt;

&lt;p&gt;When starting I decided to choose to MEAN full-stack (MongoDB, Angular, ExpressJs, NodeJs). However, it was a dilemma what to choose MySQL or MongoDB. Because previously I had some experience with MySQL and I knew SQL databases had a major market share in web projects. MongoDB was chosen because it is based on javascript objects, therefore it‚Äôs natural to use on the current stack.&lt;/p&gt;

&lt;p&gt;The largest part of the web app is based on posts. They can be of different types and include a lot of parameters. Such as age rating, genres, tags, etc.&lt;/p&gt;

&lt;p&gt;Understanding that the database has to be flexible I decided to avoid nested arrays of objects. Because that was creating a risk of misalignment between collections. For example, there is a post that has genres array objects. Genre contains title and id. But at the same time, there is a genres collection. Where all genres are listed. We use it when creating new posts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [id1, id2, id3],
  tags: [id1, id2, id3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, what happens if we rename a genre? in the genres collection, it is renamed, but in all posts containing the genre, it remained with the old name. So we end up with a post that contains inexisting genre.&lt;/p&gt;

&lt;p&gt;Yes, you may say each time we update the genre we can update all the posts containing this genre. Though I wanted to avoid this obsolete load on the database.&lt;/p&gt;

&lt;p&gt;The way was chosen is to store in the post only an array of IDs of genres. It seemed the most effective solution. Anyway, it was more optimal than going in an SQL way and having three collections: posts, genres, post-genre.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The website was released and worked well enough. Even on each request, it was populating all the posts with an age rating, genres, etc. As a result on the frontend, I was receiving the full objects and didn‚Äôt need to run additional queries.&lt;/p&gt;

&lt;p&gt;However, after a few months number of posts increased. We started to mention slow loading times. After spending some time on the investigation figured out what was the issue. And the problem was in an ****array of IDs. Each post contained up to ten such nested arrays. Meaning each post had to run ten population commands.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PostModel.find({}).populate(‚Äògenres‚Äô).populate(‚Äòtags‚Äô).populate(‚ÄòageRating‚Äô).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was not the only problem. The way we run search queries on posts also was impacted by the way we store nested IDs. Each time we run a search on the website it was seeking tags titles, then we took IDs and run a posts query.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tagsFound = await TagModel.find({‚Äòtitle‚Äô: { $in: keywordsRegArr }}).exec();
const tagsIdsArr = tagsFound.map( tag=&amp;gt; tag._id );
PostModel.find({tags:tagsIdsArr}).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In addition to page load performance, we saw our MongoDB Atlas server was charging too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it was solved?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After long arguments with myself, I saw that the most optimal solution will be to store the full objects inside each post. Yes, it was increasing database size. However, it was solving the main issue with performance and querying.&lt;/p&gt;

&lt;p&gt;Now posts collection looked this way:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [{id: 1, title: 'one'}, {id: 2, title: 'two'}],
  tags: [{id: 1, title: 'one'}, {id: 2, title: 'two'}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was meaning now each time we search posts we don‚Äôt need to search tags to get their IDs. Now it‚Äôs just running **text search **over all posts.&lt;/p&gt;

&lt;p&gt;One more important thing that was added is &lt;strong&gt;caching&lt;/strong&gt;. For that one, I used node-cache npm package. Part of the queries is cached on the NodeJs. That way we reduce the load on the database. Some requests are cached for hours, some for minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As already was said, now we were able to run a &lt;strong&gt;text search&lt;/strong&gt; query and avoid multiple &lt;strong&gt;populations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Post objects were retrieved from the posts-collection directly without any manipulations.&lt;/p&gt;

&lt;p&gt;As a result query and loading times were reduced at least by four times. And it‚Äôs on the current database which is in comparison to social networks is small.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawbacks&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Now each time we change genres, age ratings, etc, we need to &lt;strong&gt;update all posts&lt;/strong&gt; containing these objects. But these items change rarely, so we can absorb this one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then also I had to modify &lt;strong&gt;search queries&lt;/strong&gt; from the &lt;strong&gt;client app&lt;/strong&gt;. Because post-collection contained a nested array of objects instead of an array of IDs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage size&lt;/strong&gt; increased. In the end, the database size didn‚Äôt increase significantly. We didn‚Äôt even mention it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was released a year ago. At the moment we have 22k users and it‚Äôs growing. We have a lot of features implemented, though a lot more are in development. There are many issues we meet on the road. However, overcoming them and conquering the next mountain peaks.&lt;/p&gt;

&lt;p&gt;Now the database refactoring is tested on our testing server and gonna be released soon.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>angular</category>
    </item>
    <item>
      <title>How to write more readable React code</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 30 Nov 2021 19:55:36 +0000</pubDate>
      <link>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</link>
      <guid>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chakshunyu/"&gt;Chak Shun Yu&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;One of the most important aspects of code is its readability. Easily readable code is the result of well-written code, and it has a lot of long-term benefits. It will be easier to read, understand, maintain, review, less prone to unexpected errors, and generally make the lives of other developers a lot easier when they have to interact with that code.&lt;/p&gt;

&lt;p&gt;The difficulty of code readability is especially prominent in React development due to its composite nature. The resulting code is filled with a lot of code patterns, very fragmented, and generally distributed over multiple places. This further increases the difficulty of writing readable React code.&lt;/p&gt;

&lt;p&gt;However, writing readable React code is not an impossible task. Doing so starts with making the entire process a conscious one. For that, it's important to know what aspects to focus on.&lt;/p&gt;

&lt;p&gt;To help you with this, this article will cover multiple topics that you should consider when writing more readable code and its impact on readability, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#length-code"&gt;Length of the code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-closely-related-code-grouped-together"&gt;How closely-related code is grouped together&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#complicated-javascript-constructions"&gt;Complicated JavaScript constructions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-many-flows-handled-at-once"&gt;How many flows are handled at once&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#variable-naming"&gt;Variable naming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#highlighting-similarities-differences"&gt;Highlighting similarities and differences&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this information will provide you with a solid foundation on how to write more readable React code right now, and in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#length-of-the-code"&gt;
  &lt;/a&gt;
  Length of the code
&lt;/h2&gt;

&lt;p&gt;When discussing code readability, the topic that is most commonly mentioned is the length of the code. Shorter code, in both the vertical and horizontal directions, is often associated with being more readable. The main reason for this is that shorter code equals less code for developers to read through. This results in fewer opportunities that can confuse, which would otherwise make it harder for developers to read through the code.&lt;/p&gt;

&lt;p&gt;In reality, however, it's not that clearly differentiated. While writing less code can contribute a lot to readability, it's not an ultimate guarantee. There also comes a turning point where shortening the code even further turns it from being beneficial to harmful for the readability.&lt;/p&gt;

&lt;p&gt;When pushing for shorter code with the assumption that it's beneficial for the code readability, the other aspect that is often sacrificed is explicitness.&lt;/p&gt;

&lt;p&gt;Take the concept of inline conditional rendering, where it's often between the AND and the ternary operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The former is considered shorter and more concise, while the latter is considered lengthy and only appropriate when both branches of the condition are necessary.&lt;/p&gt;

&lt;p&gt;But using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#:~:text=The%20logical%20AND%20(%20%26%26%20)%20operator,it%20returns%20a%20Boolean%20value."&gt;&lt;code&gt;&amp;amp;&amp;amp; operator&lt;/code&gt;&lt;/a&gt; means that one branch is not explicitly stated, so it's up to the reader to figure out what the expected behavior is for the other branch (even if it's to render nothing), whether it was left out by mistake, and look for information that is not provided to them.&lt;/p&gt;

&lt;p&gt;This is a clear sacrifice of explicitness for the sake of saving on code length. Whether this is more readable depends on the scenario, but it isn't always as straightforward as "the shorter the better".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-closelyrelated-code-is-grouped-together"&gt;
  &lt;/a&gt;
  How closely-related code is grouped together
&lt;/h2&gt;

&lt;p&gt;One of the reasons we create custom components, Hooks, and functions in React is because it groups related code. Instead of scattering code all over the place, it packages everything in one location under a certain context or purpose.&lt;/p&gt;

&lt;p&gt;In the same fashion, the distance at which similar code is grouped also plays a role in the readability.&lt;/p&gt;

&lt;p&gt;One of the biggest examples of this occurrence in React development is the introduction of &lt;a href="https://blog.logrocket.com/react-hooks-the-good-the-bad-and-the-ugly/"&gt;React Hooks&lt;/a&gt;. Before Hooks, the only way to include logic with React components was through using class components. To do so, we had to implement lifecycle methods and put pieces of logic in the appropriate places.&lt;/p&gt;

&lt;p&gt;Unfortunately, these lifecycle methods were scattered across the component and, in certain cases, were written in a specific order ‚Äî your logic was broken up and distributed across the component. This increased the distance between related code blocks and often made it hard to see and understand the logic flow.&lt;/p&gt;

&lt;p&gt;With the introduction of Hooks, we didn't only receive a way to &lt;a href="https://blog.logrocket.com/react-render-props-vs-custom-hooks/"&gt;reuse logic across multiple components&lt;/a&gt;, but also a way to group all the related code closely together. This reduced the distance at which similar code is grouped.&lt;/p&gt;

&lt;p&gt;This is an important factor for code readability and maintainability, and thus should be kept in mind whenever possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complicated-javascript-constructions"&gt;
  &lt;/a&gt;
  Complicated JavaScript constructions
&lt;/h2&gt;

&lt;p&gt;In the end, a major part of React development is JavaScript. Implementing React components, logic, Hooks, and more is all done in JavaScript, which means that all of JavaScript can be used for it. That can be both an advantage and a drawback.&lt;/p&gt;

&lt;p&gt;As a programming language, JavaScript is very extensive and allows for a lot of different implementations. But a major drawback to such an extensive language is that not everyone will be similarly familiar with all the language details.&lt;/p&gt;

&lt;p&gt;Many language features in JavaScript are based on intrinsic details or implicit behavior, which compounds its complexity when coupled with its dynamic nature. These two factors make certain JavaScript constructions more complicated to understand and can negatively impact the readability of your code based on how familiar your developers are with them.&lt;/p&gt;

&lt;p&gt;Let‚Äôs discuss a few common example JavaScript constructions that I've noticed are more difficult to understand. For all of these constructions, understanding the implicit concepts behind them is crucial for understanding the construction itself. Not having that information can significantly negatively affect readability.&lt;/p&gt;

&lt;p&gt;While it's likely that most React developers will be aware of these constructions, it's not a given guarantee, and thus something to keep in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-arrayreduce-endraw-function-for-data-conversion"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Array.reduce&lt;/code&gt; function for data conversion
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idObjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getValueFromId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Array.reduce&lt;/code&gt; function is often used to convert an array into a different data structure, like an object. The code is very compact, but it's also often difficult to understand ‚Äî there's a lot of details to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The original array&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;reduce&lt;/code&gt; call&lt;/li&gt;
&lt;li&gt;  The previous value&lt;/li&gt;
&lt;li&gt;  The current value&lt;/li&gt;
&lt;li&gt;  The initial structure&lt;/li&gt;
&lt;li&gt;  The resulting structure&lt;/li&gt;
&lt;li&gt;  How the different values are combined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order of this information is also unnatural, like the initial structure being defined last. A different structure that improves upon this is the for-loop. Although it‚Äôs considered more ugly and verbose, the resulting code is often more readable due to the more straightforward order of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First comes the initialization of variables&lt;/li&gt;
&lt;li&gt;  Second are the length and limits of the loop&lt;/li&gt;
&lt;li&gt;  Third come all the actions onto the relevant variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-ampamp-endraw-operator-for-conditional-rendering"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator for conditional rendering
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very commonly used construction for &lt;a href="https://www.chakshunyu.com/blog/react-readability-analysis-of-inline-conditional-rendering/"&gt;inline conditional rendering&lt;/a&gt; is the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. Based on the value of the left-hand side operand, the right-hand side operand might be rendered.&lt;/p&gt;

&lt;p&gt;However, this construction only works due to the implicit JavaScript behavior called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;short-circuiting&lt;/a&gt;. When the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expression is evaluated and the left-hand side operator evaluates to a falsy value, then that operand is returned and the evaluation of the right-hand side operand is entirely skipped.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-flows-are-handled-at-once"&gt;
  &lt;/a&gt;
  How many flows are handled at once
&lt;/h2&gt;

&lt;p&gt;Any given web application will have to deal with all types of information flowing around. Together with the ever-increasing complexity of web applications, it's also never about handling just one data or logic flow. Any UI will have a dozen, hundred, or even a thousand smaller pieces. Every single piece will be connected to some kind of information and have multiple flows going through them.&lt;/p&gt;

&lt;p&gt;React provides us with a lot of tools to implement data and logic flows. Think of &lt;a href="https://blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems-af4caf699e70/"&gt;out-of-the-box Hooks&lt;/a&gt; like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, and &lt;code&gt;useLayoutEffect&lt;/code&gt;, and the ability to reuse logic in the form of &lt;a href="https://blog.logrocket.com/advanced-react-hooks-creating-custom-reusable-hooks/"&gt;custom Hooks&lt;/a&gt;. While these tools allow React developers to handle flows very easily and effectively, they also have their drawbacks in certain scenarios.&lt;/p&gt;

&lt;p&gt;It's very easy to entangle a lot of flows in a single location because of how straightforward it is to implement flows into your components. Multiple flows going through a single component or combining pieces of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook is not an uncommon occurrence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Logic...&lt;/span&gt;

    &lt;span class="c1"&gt;// Here, we're combining flows for the data request, empty state, filled logic state, and&lt;/span&gt;
    &lt;span class="c1"&gt;// server error feedback into a single `useEffect`. It feels natural, but is it readable?&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LOADING&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataIsValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// Render...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with combining piece of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook like this is that it can negatively influence code readability. Putting different flows closely together will make them intertwined, difficult to separate, and tightly coupled. The resulting code will thus become more difficult to understand and harder to maintain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-naming"&gt;
  &lt;/a&gt;
  Variable naming
&lt;/h2&gt;

&lt;p&gt;In general, one of the most difficult things in software development is naming things. Proper names can make or break the readability of code. React development is no exception. But due to the composite nature of React, there are a lot of entities to be named. Hooks, components, functions, variables, props, callbacks, contexts ‚Äî and the list goes on.&lt;/p&gt;

&lt;p&gt;Together with the focus on reusability, their names cannot be so specific that they seemingly prevent reusability, but also can‚Äôt be too generic because they should reflect their scope and context.&lt;/p&gt;

&lt;p&gt;Properly naming them can bring you very far in writing more readable code. Not only does it benefit code readability, but it can also enhance the quality of the code and increase future maintainability. A few examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Include a prefix with the component's props to indicate the type of the API ‚Äî this makes it clear to users what behavior is expected of it and how to use it

&lt;ul&gt;
&lt;li&gt;  e.g., instead of naming a boolean prop &lt;code&gt;valid&lt;/code&gt;, consider naming it &lt;code&gt;isValid&lt;/code&gt;; instead of &lt;code&gt;validate&lt;/code&gt;, consider calling it &lt;code&gt;onValidate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  If you have multiple props that configure a similar aspect, then you can most likely simplify the API design. This can quickly be noticed by the names, like having both an &lt;code&gt;isLoading&lt;/code&gt; and an &lt;code&gt;isError&lt;/code&gt; boolean prop

&lt;ul&gt;
&lt;li&gt;  Considering an enumeration prop called that captures both of the previous props could make the API design more clear and less cluttered&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Consider the scope in which components can be used ‚Äî if you have an avatar rendering component that's generic for the whole platform, then it's fine to call it &lt;code&gt;Avatar&lt;/code&gt;, but if it's specifically meant to be used in a section of a card, then it's beneficial to make that explicit in the name and call it &lt;code&gt;CardAvatar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Name callbacks after what they do, not how they will be used: if you need to provide a callback to a component's &lt;code&gt;onChange&lt;/code&gt; prop, then naming that callback &lt;code&gt;onChange&lt;/code&gt; will not add any useful information to the reader

&lt;ul&gt;
&lt;li&gt;  e.g., instead, consider naming it after what they do: &lt;code&gt;updateStateValue&lt;/code&gt; increases the readability because it clarifies what the callback does and what will happen when the appropriate change event occurs in the used component&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are concrete examples of how naming variables differently can change the readability and quality of React code. But it‚Äôs not only limited to these examples ‚Äî the most important thing is to keep this topic in mind when writing, consider the quality and specificity of your naming style, and potentially improve upon it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlighting-similarities-or-differences-in-react-code"&gt;
  &lt;/a&gt;
  Highlighting similarities or differences in React code
&lt;/h2&gt;

&lt;p&gt;There are a lot of different types of code flying around in React development ‚Äî CSS, JS, HTML (or JSX) ‚Äî and because of this, a lot of code is located in a single location. Especially in such a UI-centered development field, it means that there will be many scenarios where the code has either minor similarities or differences.&lt;/p&gt;

&lt;p&gt;Properly highlighting these occurrences can make a world of difference for the readability of the code. Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Edit&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&amp;gt; : null &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When these occurrences are highlighted, you can more easily see how certain flows, branches, or results are related to each other, which parts are connected, which parts are different, and so on.&lt;/p&gt;

&lt;p&gt;If the approach you use to do this isn‚Äôt thoughtful, it can result in duplicate code, or code that requires a higher cognitive load ‚Äî meaning more things to keep track of, disconnected flows, and harder to understand code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Writing readable code is one of the most important aspects of software development, and it isn't a trivial task. Its difficulty is especially prominent in React development because of its composite, fragmented, and distributed nature. There is a lot more code and factors to consider when dealing with code readability, which can be overwhelming and make it very difficult.&lt;/p&gt;

&lt;p&gt;In this article, I went over various React code aspects to consider when writing more readable code. These include the length of the code, how closely related blocks of code are grouped, whether complicated JavaScript constructions are used, how many flows are handled at once, the naming of your variables and entities, and the degree to which similarities or differences are highlighted. For each topic, we went over why they matter, their impact on the code readability, and how their impact can be controlled.&lt;/p&gt;

&lt;p&gt;Using this information, you should have a solid foundation on what aspects to consider and how to write more readable React code. Not only will this have an immediate impact on the readability of your code, but also on its reviewability and long-term maintainability.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you‚Äôre interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps ‚Äî &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Supercharge your Dev.to Blogs - Tips and Tricks!</title>
      <author>Fahad Imran</author>
      <pubDate>Tue, 30 Nov 2021 19:26:39 +0000</pubDate>
      <link>https://dev.to/fahadimran509/supercharge-your-devto-blogs-tips-and-tricks-2b7e</link>
      <guid>https://dev.to/fahadimran509/supercharge-your-devto-blogs-tips-and-tricks-2b7e</guid>
      <description>&lt;p&gt;New to dev.to? Not sure where to get started? &lt;strong&gt;No worries!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I will share &lt;strong&gt;tips&lt;/strong&gt;, &lt;strong&gt;tricks&lt;/strong&gt;, and &lt;strong&gt;resources&lt;/strong&gt; that you can use to write amazing articles in no time. This will apply whether you have never written a blog on dev.to or you're just looking to improve your workflow.&lt;/p&gt;

&lt;p&gt;I will cover quite a lot of information in this post so it might be a bit lengthy, but I'll try my best to not bore you. Here is a &lt;strong&gt;breakdown&lt;/strong&gt; of what I will cover in this blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#choose-a-title"&gt;Choose a Title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tags"&gt;Tags on dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cover-images"&gt;Cover Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown"&gt;Learn Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-to-write-blogs"&gt;Where to write your blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dos-and-donts"&gt;Do's &amp;amp; Don'ts of writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-it-simple"&gt;Keep things simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube-videos"&gt;Embed YouTube videos in blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crosspost"&gt;Properly crosspost blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#series"&gt;Make a Series on dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#publish"&gt;Save, Edit, &amp;amp; Publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#share"&gt;Share on Social Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;So, take a deep breath, grab some coffee and let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-title"&gt;
  &lt;/a&gt;
  Choosing a Title &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first thing you have to choose is the &lt;strong&gt;blog title&lt;/strong&gt;. It is important to have a title that describes what your blog is about. A good title can be the difference between people viewing your blog or skipping over it. Think of your blog title as a one-line summary of your blog.&lt;/p&gt;

&lt;p&gt;What I try to do is find &lt;strong&gt;keywords&lt;/strong&gt; that describe my blog content and include them in the blog title. This ensures that the title is relevant and to the point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tags-on-devto"&gt;
  &lt;/a&gt;
  Tags on dev.to &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;On dev.to, you can add up to &lt;strong&gt;4&lt;/strong&gt; tags on your blogs to help people find them. It is better to use existing tags whenever possible instead of making your own. You can view the existing tags on dev.to &lt;a href="https://dev.to/tags"&gt;here&lt;/a&gt;. It must be noted that some tags have special guidelines that your blog must fulfill before you can include them in your blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cover-images"&gt;
  &lt;/a&gt;
  Cover Images &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Cover images make your blog &lt;strong&gt;standout&lt;/strong&gt;. Blogs with cover images are more likely to be featured in the home feed of the website. Therefore, you must include one in your articles. For finding cover images you can use sites like &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;, and &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; or if you want to design one from scratch, you can try &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these sources have worked great for me so far. Just try to keep your cover image relevant and fun and you'll be fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; If you want to add a GIF as a cover image (like in this blog), just copy the GIF link and add it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------
cover_image: your_gif_link
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A great place to find GIFs for your blogs is &lt;a href="https://giphy.com/"&gt;GIPHY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CY51RKeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omw6icqpzn4mk51sozs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CY51RKeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/omw6icqpzn4mk51sozs8.png" alt="GIPHY Website" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-markdown"&gt;
  &lt;/a&gt;
  Learn Markdown &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before writing your blog you must be familiar with the &lt;strong&gt;basics of markdown&lt;/strong&gt; as you'll be using it to write your blogs on dev.to. Markdown allows you to format your text, images, lists, etc. very easily. It is super easy to learn too. You can find dozens of cheat sheets floating around the web. I would recommend you give &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;this one&lt;/a&gt; a look to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-write-your-blogs"&gt;
  &lt;/a&gt;
  Where to write your blogs? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Once you've got the hang of markdown, the next thing is to write the draft for your blog. Although you can use the built-in editor that dev.to provides, most people prefer to write their blogs on &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. You can also use dedicated note-taking apps like &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; which supports markdown as well.&lt;/p&gt;

&lt;p&gt;Whatever medium you use, I would highly recommend that you install a browser extension called &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;. It is super helpful and will correct most of your grammatical and punctuation errors if not all of them. If you prefer VS Code, use an extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; as it allows you to preview markdown files and provides various editing options as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-and-donts-of-writing"&gt;
  &lt;/a&gt;
  Do's and Don'ts of writing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;While writing your blogs on dev.to, here are some general writing tips to improve the flow of your blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Use short and simple sentences&lt;/strong&gt; as to not overwhelm the reader.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Break up your content&lt;/strong&gt; into smaller paragraphs and add sub-headings to them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use relevant images&lt;/strong&gt; in your blogs to explain a topic and make the blog more engaging (And Yes, memes count too! üòÖ).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add code snippets&lt;/strong&gt; to your blogs to explain programming concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include useful links and references&lt;/strong&gt; to provide additional information in your articles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't spam your social media&lt;/strong&gt; links in your blog. No one wants to follow such a person. Try to provide value to others. If you want, just plug one or two social links at the end of the blog post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#keep-it-simple-stupid"&gt;
  &lt;/a&gt;
  Keep it simple stupid! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" alt="GIPHY Keep it simple GIF" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KISS&lt;/strong&gt; (Keep It Simple Stupid) principle applies here as well. Keep your blog posts short and simple. No one has the time to read blogs that look like research papers. I am guilty of this habit as well. But you should keep your blogs concise and limited to &lt;strong&gt;5-7 min max&lt;/strong&gt; in most cases (although there can be some exceptions).&lt;/p&gt;

&lt;p&gt;Additionally, try to explain the concept in the easiest way possible so people with little to no background knowledge can also understand the concept without pulling their hair out. üò´&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embedding-youtube-videos"&gt;
  &lt;/a&gt;
  Embedding YouTube Videos &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to embed &lt;strong&gt;YouTube videos&lt;/strong&gt; in your blogs, you can easily do so using Liquid tags that dev.to provides. To embed videos, copy the video id from the URL and add it to the blog as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% youtube your_video_id %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how embedded videos look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FG1qbo8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr689f2xcepbxi9m16d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FG1qbo8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr689f2xcepbxi9m16d6.png" alt="YouTube Videos" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: Florin Pop &lt;a class="mentioned-user" href="https://dev.to/florinpop17"&gt;@florinpop17&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;If you want to learn more about Liquid tags check out the &lt;a href="https://dev.to/p/editor_guide"&gt;editor guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#republishing-blogs-from-other-sources"&gt;
  &lt;/a&gt;
  Republishing Blogs from other sources &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you're just writing blogs on dev.to and not republishing from elsewhere, feel free to skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, if you're republishing your blogs from elsewhere whether it be Medium, Hashnode, or your personal website, &lt;strong&gt;read carefully&lt;/strong&gt;. It is important that you add a &lt;strong&gt;Canonical URL&lt;/strong&gt; to your articles published elsewhere on the web.&lt;/p&gt;

&lt;p&gt;A Canonical URL tells the search engines like &lt;strong&gt;Google&lt;/strong&gt;, where the original source of the content/article is. If you don't add a canonical article to your blog, the search engine will consider it as a duplicate content. And there is a high chance that the republished version on dev.to will &lt;strong&gt;rank higher&lt;/strong&gt; on search results as compared to the one originally published on your personal blog. Consequently, you'll get less traffic on your website which is no fun.&lt;/p&gt;

&lt;p&gt;Thankfully, dev.to allows you to easily add a Canonical URL to your blog posts and also displays an &lt;strong&gt;" Originally published on XYZ.com "&lt;/strong&gt; message at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwXPbgsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kux7je8nxawplu72zu37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwXPbgsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kux7je8nxawplu72zu37.png" alt="Canonical URLs" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about republishing and Canonical URLs check out this &lt;a href="https://medium.com/@edithyeghiazaryan/republish-your-content-using-a-canonical-tag-3eb47b68ee2f"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-series"&gt;
  &lt;/a&gt;
  Making a Series &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For topics that require more explaining, you can also &lt;strong&gt;make a series&lt;/strong&gt; on dev.to. Series are great for topics that have different parts. Instead of cramming all the information in a single article, you can split it up into multiple smaller posts.&lt;/p&gt;

&lt;p&gt;In order to make a series, just give it a name and your blog will automatically be added to that series. Dev.to will also show a series list at the top of the blogs in that series for navigation.&lt;/p&gt;

&lt;p&gt;It must be noted that the series will only appear if it has at least &lt;strong&gt;2&lt;/strong&gt; blog posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-the-draft-edit-amp-publish"&gt;
  &lt;/a&gt;
  Save the Draft, Edit, &amp;amp; Publish! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After you've finished writing the blog post, you can &lt;strong&gt;save the draft&lt;/strong&gt; of the post. This will allow you to share the URL of the article with your friends, family, editor, etc. for proof-reading.&lt;/p&gt;

&lt;p&gt;Once you're satisfied with the final result, you can then &lt;strong&gt;publish&lt;/strong&gt; it for everyone to see. The stats on your blog (view, likes, and comments) can be viewed in the &lt;strong&gt;Profile Dashboard&lt;/strong&gt;. You can edit the blog anytime after publishing it, so don't worry if you find any mistake in your blog. Just edit it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmAJRvoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yis2gywq0cjupoekioq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmAJRvoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yis2gywq0cjupoekioq.png" alt="Dev Dashboard" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've published your first blog on dev.to. &lt;strong&gt;Easy, wasn't it?&lt;/strong&gt; After you've done this process a couple of times, it'll become easier and you'll get the hang of it, trust me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-on-social-media"&gt;
  &lt;/a&gt;
  Sharing on Social Media &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After publishing your article on dev.to, you can then share the link on social media accounts like Twitter, Facebook, and Linkedin, etc. The official Twitter account of dev.to &lt;a href="https://twitter.com/ThePracticalDev?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor"&gt;@ThePracticalDev&lt;/a&gt; also shares blog posts that are good and get featured. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOdvCAOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhob2opjr0tjvrk0k0ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOdvCAOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhob2opjr0tjvrk0k0ng.png" alt="Dev Twitter" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very nice gesture, as you can get a &lt;strong&gt;far greater reach&lt;/strong&gt; in this way, especially if you're just starting out and don't have a huge audience.&lt;/p&gt;

&lt;p&gt;And best of all, if your blog gets featured in the &lt;strong&gt;Top 7 Posts of the Week&lt;/strong&gt;, you get a really cool badge added to your profile and a &lt;strong&gt;$50 coupon&lt;/strong&gt; to spend in the Dev Store. How cool is that! So, all you've got to do is to start writing and keep at it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's All Folks!
&lt;/h2&gt;

&lt;p&gt;If you have any questions feel free to ask me in the comments and I will do my best to answer them. Feel free to read some of my other blogs on dev.to &lt;a class="mentioned-user" href="https://dev.to/fahadimran509"&gt;@fahadimran509&lt;/a&gt;
. Till then, thanks for reading, and happy coding! üòÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/fahadimran509"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/in/fahadimran509"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/fahadimran509"&gt;Dev.to&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>writing</category>
    </item>
    <item>
      <title>Announcements from Adam Selipsky Keynote at re:Invent 2021</title>
      <author>Eyal Estrin</author>
      <pubDate>Tue, 30 Nov 2021 18:59:14 +0000</pubDate>
      <link>https://dev.to/aws-builders/announcements-from-adam-selipsky-keynote-at-reinvent-2021-43lf</link>
      <guid>https://dev.to/aws-builders/announcements-from-adam-selipsky-keynote-at-reinvent-2021-43lf</guid>
      <description>&lt;p&gt;New announcement: Graviton 3&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8oYIOlus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnyhqcccoeqx67lxf55.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8oYIOlus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lnyhqcccoeqx67lxf55.JPG" alt="Image description" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New instance type ‚Äì C7g (currently in preview)&lt;br&gt;
&lt;a href="https://aws.amazon.com/blogs/aws/join-the-preview-amazon-ec2-c7g-instances-powered-by-new-aws-graviton3-processors/"&gt;https://aws.amazon.com/blogs/aws/join-the-preview-amazon-ec2-c7g-instances-powered-by-new-aws-graviton3-processors/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8VV0zSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49mpk2cfe9uas94tt6f4.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8VV0zSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49mpk2cfe9uas94tt6f4.JPG" alt="Image description" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New instance ‚Äì Trn1 to train ML models&lt;br&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-trn1-instances/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-trn1-instances/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YROmon8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8utfjuvuh0vsala782je.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YROmon8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8utfjuvuh0vsala782je.JPG" alt="Image description" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Mainframe Modernization (currently in preview)&lt;br&gt;
&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/introducing-aws-mainframe-modernization/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/introducing-aws-mainframe-modernization/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/enterprise-strategy/new-possibilities-seven-strategies-to-accelerate-your-application-migration-to-aws/"&gt;https://aws.amazon.com/blogs/enterprise-strategy/new-possibilities-seven-strategies-to-accelerate-your-application-migration-to-aws/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--301GNYmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7wlr2ewed01ovt57dri.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--301GNYmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7wlr2ewed01ovt57dri.JPG" alt="Image description" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2-W0cIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z1t4wmumqbj8ofpycwf.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2-W0cIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z1t4wmumqbj8ofpycwf.JPG" alt="Image description" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Private 5G (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/private5g/"&gt;https://aws.amazon.com/private5g/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/preview-aws-private-5g/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/preview-aws-private-5g/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0YYOPeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igi1de2sfw2rwsbt6lq7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0YYOPeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igi1de2sfw2rwsbt6lq7.JPG" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3GEnHDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v9g1qeniumz9h108w62.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3GEnHDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v9g1qeniumz9h108w62.JPG" alt="Image description" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Row and cell-level security for Lake Formation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lake-formation-governed-tables-storage-security/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lake-formation-governed-tables-storage-security/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/aws-lake-formation-general-availability-of-cell-level-security-and-governed-tables-with-automatic-compaction/"&gt;https://aws.amazon.com/blogs/aws/aws-lake-formation-general-availability-of-cell-level-security-and-governed-tables-with-automatic-compaction/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7eOBKp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k77booqivf1n538h1uez.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7eOBKp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k77booqivf1n538h1uez.JPG" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdsbZe3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7ha3qtgz2jvrcqb9opc.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdsbZe3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7ha3qtgz2jvrcqb9opc.JPG" alt="Image description" width="880" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transactions for governed tables in Lake Formation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knbHn82C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbsvgivhyxmyjphvc6dc.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knbHn82C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbsvgivhyxmyjphvc6dc.JPG" alt="Image description" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Serverless and on-demand analytics (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPZd1cFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz1m5w7yj36i7ydcb3.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPZd1cFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1wz1m5w7yj36i7ydcb3.JPG" alt="Image description" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR Serverless (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-emr-serverless-preview/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-emr-serverless-preview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/big-data/announcing-amazon-emr-serverless-preview-run-big-data-applications-without-managing-servers/"&gt;https://aws.amazon.com/blogs/big-data/announcing-amazon-emr-serverless-preview-run-big-data-applications-without-managing-servers/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon MSK Serverless (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-msk-serverless-public-preview/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-msk-serverless-public-preview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Redshift Serverless (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-redshift-serverless/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-redshift-serverless/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/introducing-amazon-redshift-serverless-run-analytics-at-any-scale-without-having-to-manage-infrastructure/"&gt;https://aws.amazon.com/blogs/aws/introducing-amazon-redshift-serverless-run-analytics-at-any-scale-without-having-to-manage-infrastructure/&lt;/a&gt;&lt;br&gt;
‚ÄÉ&lt;br&gt;
Amazon SageMaker Canvas&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-sagemaker-canvas-machine-learning-models/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-sagemaker-canvas-machine-learning-models/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WcpnhzLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlzmmjkso0r3ajovvne2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcpnhzLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlzmmjkso0r3ajovvne2.JPG" alt="Image description" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Goldman Sachs Financial Cloud for Data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cnbc.com/2021/11/30/goldman-sachs-unveils-amazon-backed-cloud-service-for-wall-street-trading-firms.html"&gt;https://www.cnbc.com/2021/11/30/goldman-sachs-unveils-amazon-backed-cloud-service-for-wall-street-trading-firms.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RHOW4nxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru7nv5k6so782btva1ba.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RHOW4nxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru7nv5k6so782btva1ba.JPG" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS IoT TwinMaker (Currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ezvy5tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkf4x6ey588ztzdy60wk.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ezvy5tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkf4x6ey588ztzdy60wk.JPG" alt="Image description" width="880" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS IoT FleetWise (currently in preview)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-iot-fleetwise-transferring-vehicle-data-cloud/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/aws-iot-fleetwise-transferring-vehicle-data-cloud/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcgo2cVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wdh2rzj7z5ktbkma39.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcgo2cVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wdh2rzj7z5ktbkma39.JPG" alt="Image description" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>news</category>
    </item>
    <item>
      <title>DScan: Decentralized QR code generator chrome extension | Use Web3 for File Sharing</title>
      <author>Akhilesh Thite</author>
      <pubDate>Tue, 30 Nov 2021 18:59:12 +0000</pubDate>
      <link>https://dev.to/akhileshthite/dscan-decentralized-qr-code-generator-use-web3-for-file-sharing-2lp8</link>
      <guid>https://dev.to/akhileshthite/dscan-decentralized-qr-code-generator-use-web3-for-file-sharing-2lp8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;DScan is a chrome extension that uploads the content to &lt;a href="https://ipfs.io/"&gt;IPFS&lt;/a&gt; and generates decentralized QR codes. It is compatible with chromium-based browsers.&lt;/p&gt;

&lt;p&gt;One of the most significant benefits of decentralization is the transformation towards being able to access the data from anywhere and is mainly driven by the heavy usage of smartphone and cloud applications. &lt;strong&gt;The vision is to ensure the user can have access to information as much as possible from anywhere in the world.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;DScan allows you to quickly upload images, audio, video, and any type of files (including NFTs and static websites) to IPFS and get a QR code with IPFS &lt;a href="https://docs.ipfs.io/concepts/content-addressing/#:~:text=A%20content%20identifier%2C%20or%20CID,on%20the%20content's%20cryptographic%20hash."&gt;CID&lt;/a&gt; and hosted &lt;a href="https://infura.io/"&gt;Infura&lt;/a&gt; link. Later you can share the QR code or Infura link with everyone.&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Decentralized&lt;/strong&gt;&lt;br&gt;
‚úÖ &lt;strong&gt;No upload limits&lt;/strong&gt;&lt;br&gt;
‚úÖ &lt;strong&gt;Permanent storage&lt;/strong&gt;&lt;br&gt;
‚úÖ &lt;strong&gt;No compression (original quality)&lt;/strong&gt;&lt;br&gt;
‚úÖ &lt;strong&gt;Private&lt;/strong&gt;&lt;br&gt;
‚úÖ &lt;strong&gt;User friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Large-size files may take a longer time to upload (we're working on this).&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use"&gt;
  &lt;/a&gt;
  Use
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install the extension from &lt;a href="https://chrome.google.com/webstore/detail/dscan-decentralized-qr-co/idpfgkgogjjgklefnkjdpghkifbjenap"&gt;Chrome web store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Click on the "upload file" button and select the file that you want to upload.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---77hXTcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yjl63chqtgpbetz9lmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---77hXTcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yjl63chqtgpbetz9lmf.png" alt="Image description" width="399" height="600"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; It'll show generated QR code, IPFS CID, and infura link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DqUa8Tdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n96tkx0m4ywvh6afk9ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DqUa8Tdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n96tkx0m4ywvh6afk9ev.png" alt="Image description" width="398" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can download the generated QR code and then, it's ready for scanning!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbgkcPnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw20keeigi0qtcv5fzgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbgkcPnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw20keeigi0qtcv5fzgz.png" alt="Image description" width="285" height="152"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You also have an option to copy the Infura URL.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnPrki9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmgzo3aiflthv9bjr7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnPrki9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmgzo3aiflthv9bjr7m.png" alt="Image description" width="385" height="141"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#working"&gt;
  &lt;/a&gt;
  Working
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vria-ykk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6jvekqys6zq87anv15s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vria-ykk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6jvekqys6zq87anv15s.png" alt="Image description" width="880" height="539"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-goals"&gt;
  &lt;/a&gt;
  Future goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We're working on adding support to &lt;strong&gt;text&lt;/strong&gt; and &lt;strong&gt;multiple directory&lt;/strong&gt; uploads.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TCnwBjk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngozccl1d6cwgrr0eiun.png" alt="Image description" width="880" height="306"&gt;
&lt;/li&gt;
&lt;li&gt;In future extension updates, we're planning for major UI improvements such as button loader, QR code download button, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-to-contribute"&gt;
  &lt;/a&gt;
  Want to contribute?
&lt;/h2&gt;

&lt;p&gt;We highly encourage you to add new features and fix bugs. Here are some &lt;a href="https://github.com/AkhileshThite/dscan/issues"&gt;issues&lt;/a&gt; to get started.&lt;/p&gt;

&lt;p&gt;Have any suggestions? Leave a comment down below.&lt;br&gt;
Thank you!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>extension</category>
      <category>ipfs</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Music Visualiser with Three.JS</title>
      <author>Temp-insta</author>
      <pubDate>Tue, 30 Nov 2021 18:43:42 +0000</pubDate>
      <link>https://dev.to/harryholland/music-visualiser-with-threejs-5002</link>
      <guid>https://dev.to/harryholland/music-visualiser-with-threejs-5002</guid>
      <description>&lt;p&gt;In an attempt to learn THREE.js ‚Äî the 3D rendering WebGL framework and WebAudio API, I made something that visualises the music in a very simple way. This article documents the whole process.&lt;br&gt;
Final thing first:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/n3rkF0el0AQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;(Just use a .mp3 / .mp4 / .wav file to see it work. If you are out, you can use this)&lt;br&gt;
A Primer on WebAudio API&lt;br&gt;
The HTML5‚Äôs  tag when combined with the WebAudio API, becomes quite powerful. It‚Äôs a dynamic tool that lets you process and adds audio effects dynamically to any kind of audio.&lt;/p&gt;

&lt;p&gt;The Web Audio API involves handling audio operations inside an audio context and has been designed to allow modular routing. Basic audio operations are performed with audio nodes, which are linked together to form an audio routing graph. Several sources ‚Äî with different types of channel layouts ‚Äî are supported even within a single context. This modular design provides the flexibility to create complex audio functions with dynamic effects.&lt;/p&gt;

&lt;p&gt;The audio pipeline starts by creating an audio context. It should have at least a single audio source ‚Äî which can be thought of as an entry point for external files, mic input, oscillators, etc. Once we have a source in place, the signal is processed and moved ahead in the pipeline using audio nodes. After processing, the signal(s) are routed to the audio destination, which can only be a single one in the whole context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72l_IWBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58qub21ma7j23xtczpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72l_IWBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58qub21ma7j23xtczpc.png" alt="Image description" width="422" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modular Routing&lt;/p&gt;

&lt;p&gt;The simplest illustration has a single source and a destination, without any effects or processing, inside the context. Why would anyone use this? Maybe they just want to play the sound without any changes.&lt;/p&gt;

&lt;p&gt;Refer the complete article here:- &lt;a href="https://www.epicprogrammer.com/2021/11/music-visualiser-with-threejs-web-audio.html"&gt;https://www.epicprogrammer.com/2021/11/music-visualiser-with-threejs-web-audio.html&lt;/a&gt;&lt;br&gt;
Content Inspired by &lt;a href="//youtube.com/c/epicprogrammer?sub_confirmation=1"&gt;Epic Programmer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Real Job: Managing Uncertainty and The Unknown</title>
      <author>Katie-Lynn </author>
      <pubDate>Tue, 30 Nov 2021 18:43:02 +0000</pubDate>
      <link>https://dev.to/jobber/the-real-job-managing-uncertainty-and-the-unknown-18c8</link>
      <guid>https://dev.to/jobber/the-real-job-managing-uncertainty-and-the-unknown-18c8</guid>
      <description>&lt;p&gt;There are an endless amount of &lt;em&gt;things&lt;/em&gt; to learn as a software developer. It can be difficult to know what to focus on to ensure you advance in your career. Learning to manage uncertainty and the unknown is one of the most important skills to master. Experienced developers quickly (and effectively) identify, reduce, and plan for uncertainty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does managing uncertainty look like?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Early on in a developer‚Äôs career the amount of what is not known can be overwhelming. To combat that feeling one can become eager to learn as much as possible as fast as possible. This will lead to burn out and can even cause stagnation. Instead start by identifying the specific uncertainty that needs addressing.&lt;/p&gt;

&lt;p&gt;Let‚Äôs use a made up example: Christine is a junior developer who is two months into her first software development role at Company ABC. She is uncertain about many things, including how to use her new tools, the processes that Company ABC has for releasing features, and just general best practices. Christine lists out everything she doesn't know and selects the top 3. Christine uses &lt;a href="https://www.linkedin.com/in/effectiveengineer"&gt;Edmond Lau‚Äôs&lt;/a&gt; definition of leverage to decide what is most important (to learn more check out his book &lt;a href="https://www.effectiveengineer.com/book"&gt;The Effective Engineer&lt;/a&gt;). There will be a long-lasting impact on Christine‚Äôs team if she can resolve or reduce these 3 uncertainties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can I better use my integrated development environment (IDE) to read and write code faster?&lt;/li&gt;
&lt;li&gt;How can I write better tests to ensure quality code coverage?&lt;/li&gt;
&lt;li&gt;How can I understand a new area of the code base to prepare for upcoming work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next she refines this list to be more specific:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can I better use my IDE to read and write code faster?&lt;/li&gt;
&lt;li&gt;What are the quick keys to search and find code in my IDE?&lt;/li&gt;
&lt;li&gt;What are the code completion and templating tools in my IDE?&lt;/li&gt;
&lt;li&gt;What add-ons or tooling can I add in my IDE to auto generate common code snippets?&lt;/li&gt;
&lt;li&gt;How can I write better tests to ensure quality code coverage?&lt;/li&gt;
&lt;li&gt;What resources can I use to practice working within our testing framework?&lt;/li&gt;
&lt;li&gt;What is Company ABC‚Äôs testing strategy?&lt;/li&gt;
&lt;li&gt;What golden examples do we have available to reference?&lt;/li&gt;
&lt;li&gt;How can I understand a new area of the code base to prepare for upcoming work?&lt;/li&gt;
&lt;li&gt;What current resources and subject matter experts are available?&lt;/li&gt;
&lt;li&gt;What does the data structure look like and how is it displayed to our users?&lt;/li&gt;
&lt;li&gt;What do the tests say about how this code should work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be easy to address! Christine can search existing developer blog posts and technical guides on the internet. She can also use company resources and ask her coworkers for support. She schedules 30 minutes everyday, for the next two weeks, to investigate these questions. She also uses that time to practice what she learns. Christine does a walk through of the new area of code with Jerry, who is very familiar with the code. She now understands at a high level how that code works. She is prepared for the upcoming work.&lt;/p&gt;

&lt;p&gt;It's now time to estimate and plan the next increment of work with her team. Christine shares what she understands of the work and what she knows she still needs to learn. She also shares her new reduced capacity and that she will be taking 30 minutes everyday to learn and improve.&lt;/p&gt;

&lt;p&gt;The team strategizes about how to tackle that upcoming work. They decide a senior developer will pair with Christine. This plan will ensure that the work gets done on time. It also ensures she has immediate support in understanding the remaining code uncertainty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do experienced developers manage uncertainty?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The uncertainty grows as software developers progress in their career. The resources available to reduce that uncertainty shrink. And the type of uncertainty changes.&lt;/p&gt;

&lt;p&gt;Let's fast forward 10 years and Christine is now a senior developer tackling new problems. She is ready for the unknown. She is currently investigating how to integrate SMS into Company ABC‚Äôs mobile app. She suspects that delivering this project will require significant effort. To prepare for this project Christine starts to list out everything she doesn‚Äôt know.&lt;/p&gt;

&lt;p&gt;There are many techniques to identify and prioritize project uncertainty. One great way is story and assumption mapping explained by &lt;a href="https://www.linkedin.com/in/teresatorres"&gt;Teresa Torres&lt;/a&gt; in her book &lt;a href="https://www.producttalk.org/2021/05/continuous-discovery-habits/"&gt;Continuous Discovery Habits&lt;/a&gt;. Christine generates her list by considering her past projects. The ‚Äúsurprises'' in other large projects were great learning opportunities. Checkout how &lt;a href="https://getjobber.com/"&gt;Jobber&lt;/a&gt; learns from ‚Äúsurprises'' in &lt;a href="https://www.linkedin.com/pulse/incident-post-mortems-jobber-jesse-van-herk?trk=public_post-content_share-article"&gt;this article about Post Mortems&lt;/a&gt;. Christine also asks her Designer, her Product Manager and subject matter experts at Company ABC to refine and add to this list.&lt;/p&gt;

&lt;p&gt;SMS in the mobile app project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can we immediately show new SMS in the UI when user is looking at the app? Does our existing infrastructure enable this?&lt;/li&gt;
&lt;li&gt;How can we send a push notification to our users when they receive a new SMS?&lt;/li&gt;
&lt;li&gt;How can/should we track usage of SMS in the app?&lt;/li&gt;
&lt;li&gt;How can we ‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next Christine works with her team to identify the riskiest uncertainty in the list. These are questions that, if answered "no" or "not possible", would stop the project. They are often about the feasibility of a solution. By answering these questions up front the team won‚Äôt waste time on an impossible project.&lt;/p&gt;

&lt;p&gt;Christine schedules time for her team to answer these specific questions. The answers look promising so she then organizes a mini-hackathon. This is a time-boxed event for her team to build a working prototype as fast as possible. Christine and her team complete this work with a better understanding of the code. They also reduced some secondary uncertainties, including the decision on whether to use a library or build a UI to display SMS. And lastly, they add new uncertainties they discovered to the list.&lt;/p&gt;

&lt;p&gt;Christine can use what she now knows (and what she now knows she doesn't know) to better estimate and plan work. Her team estimates the work considering time to develop, resources and the remaining uncertainty. She assigns higher estimates to the parts of work with higher uncertainty. Next she provides a realistic project timeline to her stakeholders. The SMS in the mobile app project will take 3 to 4 months considering existing commitments.&lt;/p&gt;

&lt;p&gt;It's unrealistic to reduce all uncertainty up front. Christine plans to tackle the parts of the project with the highest uncertainty first. Christine and her team can inform their stakeholders about new discoveries as early as possible. Then together they can decide to adjust the project timelines or pivot to a different project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is this important?¬†&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Identifying, reducing, and planning for uncertainty allows companies to better compare projects. Companies can identify the higher leverage projects to work on now. Managing uncertainty well also allows teams to build and maintain trust with stakeholders.&lt;/p&gt;

&lt;p&gt;Christine has successfully delivered on her last two projects. Her stakeholders at Company ABC are confident she will meet her commitment with this new project. They can appropriately plan their own work around the 3 to 4 month timeline.&lt;/p&gt;

&lt;p&gt;To be successful like Christine, start accepting and welcoming the unknown. It‚Äôs in this uncertain space where important growth opportunities live.¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How well do you manage the unknown?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-jobber"&gt;
  &lt;/a&gt;
  About Jobber
&lt;/h2&gt;

&lt;p&gt;We are hiring for remote positions across Canada at all software engineering levels!¬†&lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL.¬†&lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;careers site&lt;/a&gt; to learn more!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>discuss</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Failure at 80%</title>
      <author>Roger Gentry</author>
      <pubDate>Tue, 30 Nov 2021 18:24:47 +0000</pubDate>
      <link>https://dev.to/validrouteerror/failure-at-80-1gk5</link>
      <guid>https://dev.to/validrouteerror/failure-at-80-1gk5</guid>
      <description>&lt;p&gt;I  like coming up with new ideas or creative ways to solve a problem. I  build projects as a solution to a problem that I  identify. The problem with having a lot of projects is the failure rate in building them. There comes a point when the technical complexities of what you are working on are solved and the next part of the project is just wrapping everything together.&lt;/p&gt;

&lt;p&gt;I tend to refer to this as the &lt;strong&gt;80% rule&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When working on a project I have found myself getting caught into a trap where 80% of the work is completed but the remaining 20% needed to actually complete the project feels unattainable. If you are working alone on something this is the biggest hurdle to jump past. So much of my time is spend in this agonizing period.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúThe project is almost done I  just need to do X to finish‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When do you consider something successful? When is the project completed? How do you determine when something is actually complete?&lt;/p&gt;

&lt;p&gt;Often I find myself stuck in the last 20% of the project wanting to make the thing perfect before it gets released. The fear of success and the fear of failure are paralyzing. This keeps the unfinished projects on a shelf occupying the brain space that would otherwise be spent on something far more productive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When do you consider a project a failure?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A project that gets stuck in the final stretch never produces an outcome. The results are never delivered. Part of the struggle for me is that a project can not fail if it never releases. This is how I  trick myself into not finishing anything. That fear of both success and failure causes a stagnation to occur. So now I  am trying to rethink and change how I  define the goal posts.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say that a successful project is something that is shipped with a minimal set of features. The minimal viable product or MVP is considered the first release and the first version of the project being completed at 100%. Next we will make the project a ‚Äúfailure‚Äù if we do not ship the MVP.  The last thing that needs to be resolved is the fear of both success and failure of the project.&lt;/p&gt;

&lt;p&gt;This concept of the fear of success has been something I  have struggled with constantly. But it only surrounds itself when it comes to my own personal projects. These are the projects that I  feel a strong connection to. I  want to showcase my best work and show how great I can do things but that is also the problem. By trying to make the project perfect I end up not working on it at all and instead allow myself to get stuck in an endless cycle of crashing at the 80% spot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoiding the 80% trap with accountability and documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Working on a project as a single developer is challenging, one of the things that makes it difficult is the lack of accountability outside of yourself. It‚Äôs very easy for me to disappoint myself by not hitting a deadline I have set or a milestone I created on a project. When you have someone else involved in the project you suddenly have someone waiting for you to complete the work that you promised to deliver so they can keep working on their part. While it‚Äôs not always possible to work in a team or have someone that can hold you accountable I have found that keeping a blog about the project to be the most helpful compromise to not having a teammate to pair accountability with.&lt;/p&gt;

&lt;p&gt;Writing into the void that is the internet gives me a place to talk about the project that I am working on, the goals I want to achieve, and the milestones that I am setting out to reach.  By writing these things out you make a commitment to more than just yourself. There‚Äôs a chance that you never meet or talk to any of your users. The idea that they exist and are waiting for the next update is enough drive to keep me going.&lt;/p&gt;

&lt;p&gt;Documentation is the other important step to building successful projects. When you are working on a passion project it‚Äôs easy to keep building and never document what you are building. I am very guilty of doing this a lot even though I practically preach the power of documentation. From my personal experience the projects that I have completed successfully were also the ones that I took the time to write out the documentation. ‚Ä®‚Ä® &lt;/p&gt;

&lt;p&gt;While it may not be the most glamorous part of the project, writing out what you want to accomplish and breaking that goal down even further is what has helped me overcome the failure at 80%. &lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Send Action Data to the Store</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 30 Nov 2021 18:19:56 +0000</pubDate>
      <link>https://dev.to/rthefounding/send-action-data-to-the-store-gg5</link>
      <guid>https://dev.to/rthefounding/send-action-data-to-the-store-gg5</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Actions usually come from some user interaction and they tend to carry some data with them which Redux store needs to know.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_NOTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_NOTE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notesReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Initial State&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Change code below this line&lt;/span&gt;

    &lt;span class="c1"&gt;// Change code above this line&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNoteText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Change code below this line&lt;/span&gt;

  &lt;span class="c1"&gt;// Change code above this line&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesReducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNoteText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We have a &lt;code&gt;notesReducer()&lt;/code&gt; and an &lt;code&gt;addNoteText()&lt;/code&gt; action creator defined in the code editor. We first have to finish the body of the &lt;code&gt;addNoteText()&lt;/code&gt; function so that it returns an &lt;code&gt;action&lt;/code&gt; object with a &lt;code&gt;type&lt;/code&gt; property&lt;code&gt;with a value of&lt;/code&gt;ADD_NOTE. As well as, a &lt;code&gt;text&lt;/code&gt; property set to the &lt;code&gt;note&lt;/code&gt; data that's passed into the action creator.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that we gotta finish writing the &lt;code&gt;switch&lt;/code&gt; statement in the &lt;code&gt;notesReducer()&lt;/code&gt;. We need a case that handles the &lt;code&gt;addNoteText)&lt;/code&gt; actions. The case should be executed whenever there is an action of type &lt;code&gt;ADD_NOTE&lt;/code&gt; and it should return the &lt;code&gt;text&lt;/code&gt; property on the incoming &lt;code&gt;action&lt;/code&gt; as the new &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Answer:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notesReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Initial State&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;ADD_NOTE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNoteText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ADD_NOTE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Initial State&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNoteText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Hello!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Initial State&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>redux</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Add Web Monetization to a Gridsome Blog</title>
      <author>Tyler V. (he/him)</author>
      <pubDate>Tue, 30 Nov 2021 17:48:20 +0000</pubDate>
      <link>https://dev.to/terabytetiger/how-to-add-web-monetization-to-a-gridsome-blog-2ph6</link>
      <guid>https://dev.to/terabytetiger/how-to-add-web-monetization-to-a-gridsome-blog-2ph6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#register-for-web-monetization-with-coil"&gt;
  &lt;/a&gt;
  Register for Web Monetization with Coil
&lt;/h2&gt;

&lt;p&gt;I'm sure there are more options out there, but in my experience &lt;a href="https://coil.com/creator"&gt;Coil&lt;/a&gt; was easy to get set up with and has been what I've been using since my &lt;a href="https://terabytetiger.com/lessons/articles/my-first-game-jam-in-13k-or-less/"&gt;JS13K development&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Note that while you'll need to set up an account for money to be deposited to, you &lt;em&gt;do not&lt;/em&gt; need to pay for a monthly membership in order to get paid via web monetization with Coil (at least as of the time of writing). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-your-payment-location"&gt;
  &lt;/a&gt;
  Get your payment location
&lt;/h2&gt;

&lt;p&gt;Once your Coil account is set up, login and head to &lt;a href="https://coil.com/settings/monetize"&gt;https://coil.com/settings/monetize&lt;/a&gt; to get your &lt;code&gt;meta&lt;/code&gt; tag - it should look something like this (it will be a bit different if you setup your payment account with something other than Uphold):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"monetization"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"$ilp.uphold.com/FYGWHFNNRHg8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll be injecting this into the &lt;code&gt;head&lt;/code&gt; tag of the pages in our blog! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inject-your-monetization-meta-tag-into-your-head-tags"&gt;
  &lt;/a&gt;
  Inject your monetization meta tag into your head tags
&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;main.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Imports/component registration still goes here&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isClient&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Component registration/other config work&lt;/span&gt;
  &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;monetization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$ilp.uphold.com/FYGWHFNNRHg8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="c1"&gt;// Replace with your monetization endpoint from the "Content" from the previous step &lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that you're ready to publish and start getting paid! üí∞&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-content-behind-a-paywall"&gt;
  &lt;/a&gt;
  Adding Content behind a paywall
&lt;/h2&gt;

&lt;p&gt;I'm going to cover two ways to check if the user has web monetization. Each has it's pros and cons, but if you know a way to do it without either of the cons I list, &lt;a href="https://twitter.com/TerabyteTiger"&gt;tweet at me about it&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-check-for-monetization-on-mount"&gt;
  &lt;/a&gt;
  Method 1: Check for monetization on mount
&lt;/h3&gt;

&lt;p&gt;The first way you can check if the user is using a form of web monetization is to check on mount (or create - they both work, but you may want to use one or the other depending on your exact use case).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"showMonetization"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Paywall blocked content goes here
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;showMonetization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showMonetization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monetization&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monetization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;started&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key part of what's happening here is &lt;code&gt;document.monetization&lt;/code&gt; checking if there is a monetization element in the document and if there is, checking if it's state is set to "started" with &lt;code&gt;document.monetization.state === "started"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The state of monetization can be one of &lt;code&gt;stopped&lt;/code&gt;, &lt;code&gt;pending&lt;/code&gt;, or &lt;code&gt;started&lt;/code&gt;(&lt;a href="https://webmonetization.org/docs/api/"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-downside-to-method-1"&gt;
  &lt;/a&gt;
  The downside to method 1
&lt;/h4&gt;

&lt;p&gt;When using this approach, I've had an issue where a user navigating directly to a page with paywall content will never see the content, even if they have a service enabled and running without navigating to another page then back to the page with the monetized content. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-add-an-event-listener-to-the-monetization-element"&gt;
  &lt;/a&gt;
  Method 2: Add an event listener to the monetization element
&lt;/h3&gt;

&lt;p&gt;To counter the issue listed above with requiring users to navigate away and back to the page you can add an event listener to the monetization element instead of immediately checking if it's ready when the component loads. &lt;/p&gt;

&lt;p&gt;This works because adding the listener will wait for the monetization to load in, then once it's ready update our data flag and start showing the content at that point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"showMonetization"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Paywall blocked content goes here
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;showMonetization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monetization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;monetizationstart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showMonetization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monetization&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monetization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;started&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-downside-to-method-2"&gt;
  &lt;/a&gt;
  The downside to method 2
&lt;/h4&gt;

&lt;p&gt;Unfortunately, this comes with it's own slight downside. When a user &lt;em&gt;doesn't&lt;/em&gt; have monetization, this method throws a console error and could potentially cause other portions of your app to not load in properly. &lt;/p&gt;

&lt;p&gt;I believe the risk of this can be minimized by adding the event listener after any other mounted logic you may be calling on the page. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now you know how to add web monetization to your content and how to use that to put some of your content behind a webmon paywall. Personally, I'm a huge fan of the &lt;a href="https://coil.com/p/coil/The-100-20-Rule-for-Premium-Content/3l1ALJ3M6"&gt;100 + 20 philosophy  outlined by Coil&lt;/a&gt; which proposes that the best approach to maximize paid content is to offer 100% of your normal content for free, then adding in an additional 20% bonus content for your paid subscribers. Thanks for reading ‚úåüèª&lt;/p&gt;

</description>
      <category>webmon</category>
      <category>gridsome</category>
      <category>blogging</category>
    </item>
    <item>
      <title>WordPress REST API as a Back-end with React and Docker (Part 1)</title>
      <author>Daniel Emod Kovacs</author>
      <pubDate>Tue, 30 Nov 2021 17:46:47 +0000</pubDate>
      <link>https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-1-2gb2</link>
      <guid>https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-1-2gb2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#about-this-project"&gt;
  &lt;/a&gt;
  About This Project
&lt;/h1&gt;

&lt;p&gt;About a month ago, I was faced with a challenge. At my workplace I was asked to work on a project as a single developer, responsible for the complete technical development of the entire thing, and what‚Äôs even better, I was offered a very strict schedule. A little under a month in fact. At first it seemed like a stretch, but it was definitely doable, so I complied. Taking into account the scope of the project and the amount of time I had on my hands I made some snappy decisions about the technologies I was going to use. Here are some of the features I needed to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CRUD capability on several different types of content (news, media, promotions, etc).&lt;/li&gt;
&lt;li&gt;Multimedia uploads, including files and pictures.&lt;/li&gt;
&lt;li&gt;Different permission groups of users.&lt;/li&gt;
&lt;li&gt;User submitted responses to posts.&lt;/li&gt;
&lt;li&gt;Multi-platform front-end, including a special use case, where the whole software had to behave completely differently on Smart TVs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those all lead to the conclusion, that what was needed is a basic CMS (Content Management System). There are multiple routes to take in this situation, like picking a huge, popular CMS, written by a team of experienced developers, or looking at some cool open source Flavour of the Month style project, usually written in Node JS and Express, or thirdly I could have gone and created my own from scratch, using one of the many languages and back-end technologies that I am proficient in, like Java with Spring Boot, or GoLang and the Gin framework. Assuming that the scope will stay relatively similar to the initial proposal and realising I did not really have time to learn a new CMS or develop my own from scratch, I decided to go the first route and pick the dreaded WordPress platform. I already could do most of what I needed with little to no modifications, it has great support, official forms, a massive community, a &lt;a href="https://w3techs.com/technologies/overview/content_management/all"&gt;third of the Internet using it&lt;/a&gt;, and last but not least a convenient RESTful API, covering most, if not all functionality, meaning I could take advantage of the admin user interface, while being able to deliver something cool and unique to the people using the front-facing interfaces.&lt;/p&gt;

&lt;p&gt;So I needed to decide on two more things. What should I do about the front-end and how should I ensure that my development process stays smooth throughout? The answer to the first one was &lt;a href="https://www.reactjs.org/"&gt;React&lt;/a&gt; because I ‚ù§Ô∏è React, and have been an absolute fan for a long while now, which means I can deliver applications using React as a base very quickly. In terms of development environment I decided to go with &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;. Again, I absolutely üêã the simplicity Docker provides, while also reducing overhead by allowing for development and deployment, using the same exact stack.&lt;/p&gt;

&lt;p&gt;In my original project I could not take advantage of Docker once development was done, due to the customer‚Äôs reluctancy to deploy with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-this-part"&gt;
  &lt;/a&gt;
  In This Part
&lt;/h2&gt;

&lt;p&gt;We will get as far as installing WordPress using a portable Docker Compose setup and looking at how to handle modifications to our installation, being able to modify each file we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h2&gt;

&lt;p&gt;First of all I wanted to set up the development environment, before I took a look at any code. The current version of WordPress requires PHP version 5.4, but it is no longer supported, so PHP v7+ is probably a better choice to go with. I also needed to have a MySQL-compliant database, like MySQL Server or MariaDB. To keep things in sync and working within the same virtual network, I decided to use &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;, which is a nice little utility built on top of Docker, that helps organising and connecting images that are related. Compose uses YAML as the format of its configuration, which is sort of easy to work with and is pretty clear on what it does. It follows Docker‚Äôs naming convention for most things. At this point I also decided to work with the basic &lt;code&gt;wordpress&lt;/code&gt; image from DockerHub, which is a community where you can get a ton of pre-made images from. For the data image I picked the &lt;code&gt;mysql&lt;/code&gt; image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql:5.7&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./db_data:/var/lib/mysql&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress123&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;

  &lt;span class="na"&gt;wordpress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress:latest&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;80:80'&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db:3306&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;db_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this config file, we see that we are deploying two services: &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;wordpress&lt;/code&gt;. The important thing to note here is the way Docker Compose wires together the virtual network. It provides domains to the services with the names of the service, for example out MySQL Server will be available at &lt;code&gt;mysql://db:3306&lt;/code&gt;, while our WordPress would be reachable at &lt;code&gt;http://wordpress&lt;/code&gt;. Of course outside of the network (which is where we actually are) we can‚Äôt see that, so what we need to do is what you‚Äôd do with Docker: expose port &lt;code&gt;80&lt;/code&gt;, which is taken by the Apache running within the container to some of our ports, in this example port &lt;code&gt;8000&lt;/code&gt;. This means that we‚Äôll be able to see our WordPress installation at &lt;code&gt;http://localhost:8000&lt;/code&gt; or in cases where Docker is running within a container (like on Windows), we need to use our &lt;code&gt;$DOCKER_IP&lt;/code&gt; variable or something similar.&lt;/p&gt;

&lt;p&gt;Another thing to note is that the &lt;code&gt;db&lt;/code&gt; image has its working folder mapped to a local folder called &lt;code&gt;db_data&lt;/code&gt;. For this to work, we need to create this folder. If there is no such folder, nothing will happen, however it is handy to have all development data saved locally also.&lt;/p&gt;

&lt;p&gt;We can start up this configuration by entering the following command in the directory, where our &lt;code&gt;docker-compose.yml&lt;/code&gt; is saved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The -d flag is handy as it will start the containers in detached mode, meaning we can get log output by using docker-compose logs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Upon visiting &lt;code&gt;http://localhost:8000&lt;/code&gt;, we should see the following screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M1O8Sa6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj6x2k6myxb93ig0jxz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M1O8Sa6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj6x2k6myxb93ig0jxz4.png" alt="Image description" width="880" height="840"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Screenshot of WordPress install screen&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What‚Äôs more, upon completing the famous 5 second install process, whereby giving our credentials, such as username and password both set to &lt;code&gt;admin&lt;/code&gt; (please do not do this in actual production builds), we should be greeted with the below screen upon logging in. Note that if you‚Äôve mounted the volume &lt;code&gt;db_data&lt;/code&gt; to an actual folder, you should see MySQL server spitting out files related to our new WordPress installation. This is cool because you can just bundle this up at a later point and install it under an actual instance of MySQL Server or another Docker image and it will work fine with the same WordPress configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tboMaFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0mltn3u6qsm2s40yuze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tboMaFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0mltn3u6qsm2s40yuze.png" alt="Image description" width="880" height="840"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Screenshot of WordPress admin screen&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-the-wordpress-installation-configurable"&gt;
  &lt;/a&gt;
  Making the WordPress Installation Configurable
&lt;/h2&gt;

&lt;p&gt;The next thing we should probably do is making it so that we can actually change the files that are served via WordPress. This helps because we do want to touch our &lt;code&gt;functions.php&lt;/code&gt; for our own theme, to add custom post types later on.&lt;/p&gt;

&lt;p&gt;For this all we need to do is add the following two lines to our &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./wordpress:/var/www/html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like we did with the MySQL service, we also need to add this directory to our workspace, otherwise this will not work.&lt;/p&gt;

&lt;p&gt;Refer to the &lt;code&gt;db&lt;/code&gt; service config if you‚Äôre unsure which lines to put this on. We also need to restart our Docker Compose network for these changes to take effect. To do that, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose down&lt;span class="p"&gt;;&lt;/span&gt; docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that there is a &lt;code&gt;docker-compose restart&lt;/code&gt;, but that will not reload configurations sadly.&lt;/p&gt;

&lt;p&gt;A perk of this approach is that because WordPress runs on PHP, which is a run-time evaluated per-invokation scripting language, we can simply update any of the PHP files and press refresh in our browser for immediate effect. This is actually what we‚Äôll be taking advantage of in the next part, where we‚Äôll install plugins, slim down the overall installation size and also start our React project with the REST API.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>react</category>
      <category>docker</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
