<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Contributing to back-end codebase as a front-end for first time.</title>
      <author>Eulier Gonzalez</author>
      <pubDate>Thu, 20 May 2021 19:13:22 +0000</pubDate>
      <link>https://dev.to/eulier/contributing-to-back-end-codebase-as-a-front-end-for-first-time-3i27</link>
      <guid>https://dev.to/eulier/contributing-to-back-end-codebase-as-a-front-end-for-first-time-3i27</guid>
      <description>&lt;p&gt;I’ve 4 years of experience working with client-side code (HTML, CSS, JS and Node.js). Thanks to &lt;a href="https://zerotomastery.io/"&gt;Zero To Mastery&lt;/a&gt; i could deep dive in the some major computer science concepts through &lt;a href="https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/"&gt;Data Structure and Algorithm Course on Udemy&lt;/a&gt;, &lt;a href="https://www.udemy.com/course/advanced-javascript-concepts/"&gt;JS Advanced Concepts&lt;/a&gt; and improve my journey as a Software Developer by following the &lt;a href="https://www.udemy.com/course/the-complete-junior-to-senior-web-developer-roadmap"&gt;Junior to Senior Web Development 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It took me (as a non-native english speaker) from april 2020 to feb 2021 to improve myself, daily on it, and eventually i got hired by a startup.&lt;/p&gt;

&lt;p&gt;So, after a month of bootstrap the roadmap in which I made some proof of concepts about chat &amp;amp; authentication systems for Node.js and Django respectively, we finally now gonna build this app.&lt;/p&gt;

&lt;p&gt;There is a backend developer that sets up the basis.&lt;br&gt;
So I want to be effective on learning/understanding the concepts so i can give value to the codebase as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Investigate/Read through each package at the package.json&lt;/li&gt;
&lt;li&gt;Learn the “why” and “how” it works&lt;/li&gt;
&lt;li&gt;Listen concepts’s pronunciation and verbalize out loud&lt;/li&gt;
&lt;li&gt;Apply those concepts by following the conventions and good practices to our needs (tasks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let see how it works.&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>node</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>File sharing web app made using React.Js</title>
      <author>Ayaan Farooqui</author>
      <pubDate>Thu, 20 May 2021 19:10:56 +0000</pubDate>
      <link>https://dev.to/thecoderelite/file-sharing-web-app-made-using-react-js-322p</link>
      <guid>https://dev.to/thecoderelite/file-sharing-web-app-made-using-react-js-322p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Etso3c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z7iuiqaqa94cd53q00q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Etso3c4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z7iuiqaqa94cd53q00q.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;This is a file-sharing web app I have made using react.js and firebase!&lt;/h1&gt;

&lt;p&gt;Checkout the web app and the code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://swift-share.web.app/"&gt;Link to web app (swift-share.web.app)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/thecoder-elite/SwiftShare"&gt;Link to GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using this web app the user can share any type of file with anyone using the internet.&lt;/p&gt;

&lt;p&gt;when the user uploads a file a QR code and a text code is generated along with a shareable URL any of which can be shared and used to download the files by the other user/s.&lt;/p&gt;

&lt;p&gt;Please leave your feedback below in the comments. I would love to hear your thoughts on this❤️.&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Builder's Guide to Note-Taking</title>
      <author>Tim Connors ⚡️Pearl</author>
      <pubDate>Thu, 20 May 2021 18:55:13 +0000</pubDate>
      <link>https://dev.to/itstimconnors/a-builder-s-guide-to-note-taking-2gam</link>
      <guid>https://dev.to/itstimconnors/a-builder-s-guide-to-note-taking-2gam</guid>
      <description>&lt;p&gt;Your brain is a leaky bucket. If you're dedicated to filling it with knowledge, you should be equally dedicated to sealing the leak. Here's how.&lt;/p&gt;

&lt;p&gt;I'm Tim. I'm a builder. I've been building companies since I was in college. Along my journey I've met hundreds of people, discovered hundreds of cool companies, taken hundreds of meetings - you get the point, there's been a lot of sh*t to keep track of.&lt;/p&gt;

&lt;p&gt;A year ago I realized my leaky bucket problem while trying to do some market research for my latest project. People would say, "Have you heard of X company?" The name sounded familiar, but I couldn't place where I'd heard it before. "Oh! I met someone who used to work there! What was their name..."&lt;/p&gt;

&lt;p&gt;I had been taking notes but the knowledge wasn't easily retrievable. It wasn't organized. It wasn't navigable. I was storing knowledge like I stored my clothing: in a crumpled heap at the back of my closet, tossed in haphazardly from the doorway.&lt;/p&gt;

&lt;p&gt;If your knowledge closet looks like this, you've come to the right place. Some call me the Marie Kondo of knowledge (not really, but feel free to start the trend).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-intro-to-knowledge-management%E2%84%A2"&gt;
  &lt;/a&gt;
  An Intro to Knowledge Management™
&lt;/h2&gt;

&lt;p&gt;When you write code, you don't just write it once, deploy the application, and never touch it again. Over time, bugs will pop up, code will become outdated, and things will start to fail. Untouched code depreciates by default. Useful code is actively managed to stay useful.&lt;/p&gt;

&lt;p&gt;The same is true with knowledge. Welcome to knowledge management. I define knowledge management as the process of capturing, codifying, and exploiting knowledge for long term use. Let's break down those three processes to explore them more:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Knowledge management is the process of &lt;em&gt;capturing&lt;/em&gt;, &lt;em&gt;codifying&lt;/em&gt;, and &lt;em&gt;exploiting&lt;/em&gt; knowledge for long term use&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-capture"&gt;
  &lt;/a&gt;
  Knowledge Capture
&lt;/h3&gt;

&lt;p&gt;Knowledge capture is the act of bookmarking an idea for your future self. It needs to be easy and seamless, so as to not interrupt your day. Too much friction here and the capture won't happen. A descent knowledge capturing mechanism is the lifeblood of any good note-taking system.&lt;/p&gt;

&lt;p&gt;You can assess the quality of a knowledge capturing mechanism by asking questions like: "How many clicks does it take to open a new note?", "How long does it take to jot something down?", "How often are these new notes revisited to further develop?"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-codification"&gt;
  &lt;/a&gt;
  Knowledge Codification
&lt;/h3&gt;

&lt;p&gt;Knowledge codification is the act of representing and arranging your knowledge in a systemic form, such as adhering to specific formatting (like tags or headers), or creating collections of notes (like folders or indexes). This is done to make exploitation of knowledge easier. If codification is too cumbersome, or systems too difficult to change, knowledge will become trapped, unable to be exploited.&lt;/p&gt;

&lt;p&gt;Codification is, in my opinion, the most important process, and designing the perfect set of rules for your use-case is where knowledge management becomes an art. We'll discuss this more later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-exploitation"&gt;
  &lt;/a&gt;
  Knowledge Exploitation
&lt;/h3&gt;

&lt;p&gt;Knowledge exploitation is the act of leveraging your knowledge to further your goals. This of course involves knowledge retrieval: When you have a question, how easy is it to find an answer? But it also involves knowledge emergence: How easily can entirely new knowledge be created from within your existing system? The best knowledge management systems will make this easy.&lt;/p&gt;

&lt;p&gt;These three processes are vitally important to get right, and with these measuring sticks in mind, not every tool is created equal. Here's how to pick the best one:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-tool"&gt;
  &lt;/a&gt;
  Choosing the Right Tool
&lt;/h2&gt;

&lt;p&gt;There's a lot of tools in this space, so I'm going to highlight the four most popular. To understand how well each tool performs for knowledge management, we're going to rate each with respect to the three processes I've outlined above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evernote"&gt;
  &lt;/a&gt;
  Evernote
&lt;/h3&gt;

&lt;p&gt;Launched in 2004, Evernote has been around for a long time. It's reliable and it's feature-set is mature. Thanks to a great web-clipper and a quick-capture feature, it performs well for knowledge capture. However, it's UX encourages a highly structured approach to knowledge organization, and unlike the other tools we'll discuss, there's no way to create dynamic references to other content, so your content is a lot more siloed. Thus it performs poorly for knowledge codification and exploitation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h3&gt;

&lt;p&gt;Notion is probably the most talked about note-taking tool today. It's biggest strength is it's UX/UI - a combination of a powerful feature-set with a gorgeous interface. This makes knowledge codification pretty easy. Notion's weakness is its slowness, which is a huge problem in knowledge management (slowness creates friction that discourages action). This means it performs poorly for knowledge capture and exploitation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roam"&gt;
  &lt;/a&gt;
  Roam
&lt;/h3&gt;

&lt;p&gt;Roam has led the charge on "networked thought". You can link to other notes inline [[Like This]] and navigate through those links with a click. It's kind of like making your own Wikipedia. This type of user experience performs well for knowledge codification and exploitation. As a capturing mechanism it can be slow (not as slow as Notion), but it does the trick.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#obsidian"&gt;
  &lt;/a&gt;
  Obsidian
&lt;/h3&gt;

&lt;p&gt;Obsidian is a competitor to Roam, also focused on "networked thought", but instead of being hosted online, Obsidian runs locally as it's own desktop application and works with local markdown files. This, in my opinion, is a huge advantage that manifests in two primary ways: (1) it makes the app incredibly fast - Obsidian will always be faster than its web-hosted counterparts; and (2) it makes the app incredibly extensible - you can write your own scripts or tap into a growing collection of community plug-ins. For these reasons, it performs incredibly well for knowledge codification and exploitation. It performs less well for knowledge capture (mobile app is still in beta, and there's no web clipper or anything), but it's only a matter of time until the right plug-in solves this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPApULUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u0t9y3woub7uqxdpurj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPApULUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u0t9y3woub7uqxdpurj.png" alt="Obsidian vs Roam vs Notion vs Evernote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-obsidian"&gt;
  &lt;/a&gt;
  Getting Started (Obsidian)
&lt;/h2&gt;

&lt;p&gt;If you're looking for one lesson to take from this essay, let is be this: Your perfect knowledge management system is discovered, not planned. When starting out, prioritize simplicity and flexibility at all costs. Only formalize a system when it's absolutely necessary. In other words, pavement follows dirt.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Your perfect knowledge management system is discovered, not planned. When starting out, prioritize simplicity and flexibility at all costs. Only formalize a system when it's absolutely necessary. In other words, &lt;em&gt;pavement follows dirt&lt;/em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That being said, since this is a "Builder's Guide", there's a bit of structure we can safely assume will be necessary for our use.&lt;/p&gt;

&lt;p&gt;The remainder of this essay will review some of this suggested structure. As you can probably tell, I favor Obsidian, so that'll be the focus of my specific examples. Some of what follows will not be applicable to other tools (With Roam, it's pretty much all the same, Notion and Evernote not so much).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h3&gt;

&lt;p&gt;Obsidian allows you to make inline links out to other notes as well as review what other notes link back to it (called "backlinks"). Given this, notes can function similarly to tags, except they have the added benefit of holding content themselves. This begs the question: &lt;em&gt;why use tags at all?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I like to use tags as metadata. My tags denote either the type of note (#person #meeting #company) or the status of a note (#todo, #pending-contact). I could use notes to do this, but I appreciate having an entirely separate level of information for these high-level categories. It makes scripting and searching easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entity-notes"&gt;
  &lt;/a&gt;
  Entity Notes
&lt;/h3&gt;

&lt;p&gt;One of the most common types of notes you'll have is those that describe a discrete entity, like a person, or a company. I use #person and #company respectively.&lt;/p&gt;

&lt;p&gt;Obsidian supports parent tags, so you could do #entity/person and #entity/company if you want to keep your tags more organized, but I don't have that many tags, plus I think it looks cleaner when it's shorter.&lt;/p&gt;

&lt;p&gt;Here's an example of how I like to format my #person and #company notes. Obsidian offers a templating plugin to help speed up the note setup. You'll see a few things in here that we haven't talk about yet - like "PQ" and "CQ" as well as that section of code - we'll get to those soon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPWd_CaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fr7xl9iva1gnseurqsc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPWd_CaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fr7xl9iva1gnseurqsc.png" alt="Examples of a #person note (left) and a #company note (right)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-notes"&gt;
  &lt;/a&gt;
  Source Notes
&lt;/h3&gt;

&lt;p&gt;Source notes are for taking notes on primary sources of information, such as books, podcasts, meetings, conferences, videos, etc. My most common type of source note by far is meetings (#meeting). Here's an example of how you might want to format meeting notes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9kYdes---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx1jf14uj4bpswoyj6lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9kYdes---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx1jf14uj4bpswoyj6lg.png" alt="Example of a #meeting note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The double colon ("::") it's for scripting purposes. I use that to set key-value pairs that I can later collect programmatically if I wish to. I don't do a lot of programmatic searching, but it's nice to know that I can if I need to. Plus, some of the plugins can interpret this formatting as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qualifier-notes"&gt;
  &lt;/a&gt;
  Qualifier Notes
&lt;/h3&gt;

&lt;p&gt;Qualifier notes are a concept I created for my own use, so it takes a bit of explaining. It grew from the desire to denote a specific relationship between two notes, rather than simply associating them vaguely.&lt;/p&gt;

&lt;p&gt;The presence of a link like [[Google]] does not in itself clarify the relationship between that link and the note where it's been written. Perhaps the note says "This is a competitor of [[Google]]", or maybe it says "This is a product of [[Google]]". Until there's an Obsidian plugin to assign relationships (it's being talked about), links will only ever denote weak associations.&lt;/p&gt;

&lt;p&gt;I made up the "Qualifier" note type to help with this. When Note X is linked to a qualifier note, it means that the Note X can be described, at least in part, by that qualifier. Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C53St-Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5ixjyeea78sle7dirtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C53St-Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5ixjyeea78sle7dirtg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Startup Founder" is a title of a note that describes a general topic. Any notes linked to that note are simply associated in some way to the concept of a "Startup Founder". "Startup Founder (PQ)", on the other hand, is the title of a note that describes a specific qualification. Any notes linked to that note are people who are startup founders.&lt;/p&gt;

&lt;p&gt;By now you've probably guessed that "PQ" stands for Person Qualifier. I also use "CQ" notes for Company Qualifiers. Here's an example of what a Qualifier note looks like when you open it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_kt3Ynq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11f74cx48zf2wg9ftjbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_kt3Ynq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11f74cx48zf2wg9ftjbp.png" alt="An example of a #qualifier/people note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The drawer on the right shows all the backlinks, which is a list of startup founders. Sometimes that's good enough, but I can also drag those links onto the page and organize the list more manually as you can see I've done here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;The community plug-ins is where Obsidian really shines. My favorites are Calendar, Dataview, Imgur Plugin, Kanban, Sliding Panes, and Templater. I highly recommend them. In particular, Dataview really changes the game. It allows you to query your notes with SQL-esque code. If you're a developer, you'll love this. If you're not, it's a great way to dip your toes into programming! Here's an example of what you can do with it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yebv43TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kevlhmh40ngrevrfawgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yebv43TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kevlhmh40ngrevrfawgf.png" alt='Example of the Dataview plugin. The top half is "Edit mode", bottom is "preview mode"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That section of code in yellow generates a list of meetings you've had with John Smith. The code is run when you shift from "edit mode" to "preview mode" (Ctrl + E). Another one of my favorite use-cases is generating a list of people meeting a certain query who I've met with at least once. That's super handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hard-part"&gt;
  &lt;/a&gt;
  The Hard Part
&lt;/h2&gt;

&lt;p&gt;Here's what's going to happen: you're going to get super excited and take a bunch of notes. You're going to set some basic formatting ground rules to stay organized. And one day you're going to realize that something's just not working well. Maybe your note titles are too vague. Maybe your tagging system is too confusing. Maybe your formatting is too cumbersome. You'll want to make a change to your system.&lt;/p&gt;

&lt;p&gt;This is okay. This is progress. This is you discovering your ideal approach.&lt;/p&gt;

&lt;p&gt;The bad news is that it's going to be annoying to make systemic changes no matter what. The good news is because you've chosen Obsidian you can do so much more easily than with any other tool by writing code or using a plugin.&lt;/p&gt;

&lt;p&gt;My most recent systemic change was when I created the "Qualifier" notes. I had previously been using tags for the same use-case and realized that tags were way worse than notes for this job. So I programmatically converted all instances of these tags from this: #tag-tile, to this: [[Tag Title (PQ)]].&lt;/p&gt;

&lt;p&gt;If you end up doing something like this: make a backup of your notes.&lt;/p&gt;

&lt;p&gt;If you hit this point and you're having trouble making a bulk change, feel free to &lt;a href="https://twitter.com/itstimconnors"&gt;hit me up&lt;/a&gt; or ask your question to the &lt;a href="https://obsidian.md/community"&gt;Obsidian community&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're feeling overwhelmed by everything you just read, don't be. This is the system that makes sense for me at this point. Yours may be way simpler. And mine was way simpler when I started out. These rules and techniques emerged from necessity only when I started collecting hundreds of notes. So feel free to skip these techniques and revisit them in 6 months. They may make more sense to you then. Whatever you do: &lt;em&gt;just start&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Effective knowledge management sounds incredibly dull and nerdy but it's truly one of the most useful practices you can have as a builder. Since starting, I've collected over 3,000 notes related to my startup journey. I never forget a person or a company or a meeting I have. I jump around my knowledge base like a monkey and I'm constantly discovering new things within it.&lt;/p&gt;

&lt;p&gt;Here's a picture of all my notes, with Obsidian's graph visualizer. There's something almost organic-looking about it, right? One might call it a second brain...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_QLQJjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t60etdmusdit7odz0nai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_QLQJjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t60etdmusdit7odz0nai.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions or want to hear more you can reach me on twitter at &lt;a href="https://itstimconnors"&gt;@itstimconnors&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>Create a React drag and drop file upload component from scratch 🥊</title>
      <author>milindsoorya</author>
      <pubDate>Thu, 20 May 2021 18:55:00 +0000</pubDate>
      <link>https://dev.to/milindsoorya/create-a-react-drag-and-drop-file-upload-component-from-scratch-2494</link>
      <guid>https://dev.to/milindsoorya/create-a-react-drag-and-drop-file-upload-component-from-scratch-2494</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, we'll learn how to create our own drag-and-drop component in React, and we'll use the HTML5 native DnD API for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-what-you-need-to-know"&gt;
  &lt;/a&gt;
  Prerequisites - What You Need To Know
&lt;/h2&gt;

&lt;p&gt;To follow along, you should have a basic understanding of react hooks and functional components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;React hooks overview - official documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-the-app-well-build"&gt;
  &lt;/a&gt;
  Overview of the app we’ll build
&lt;/h2&gt;

&lt;p&gt;The final code for the app is &lt;a href="https://stackblitz.com/edit/react-me7tka?file=src%2FFileUploaderDND.js"&gt;here&lt;/a&gt;&lt;br&gt;
The preview of the app is &lt;a href="https://react-me7tka.stackblitz.io/"&gt;here&lt;/a&gt;. And here's how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtYdKHFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621535872796/KS7dvI5AN.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtYdKHFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621535872796/KS7dvI5AN.gif" alt="react-drag-and-drop-folder-working.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-draganddrop-html5-api"&gt;
  &lt;/a&gt;
  The drag-and-drop HTML5 API
&lt;/h2&gt;

&lt;p&gt;How it work is quite simple an element will take the &lt;strong&gt;draggable&lt;/strong&gt; role and another element will be the drop target or &lt;strong&gt;drop zone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for draggable element, the available events include: ****&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ondragstart&lt;/code&gt; - this event fires when you start dragging the element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ondragend&lt;/code&gt; - fires when the drag action is complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, for the drop area, you can use the following events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ondragenter&lt;/code&gt; - this event fires when the draggable element is moved into a drop area&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ondragover&lt;/code&gt; - this event fires when you drag an element over a drop area&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ondragleave&lt;/code&gt; - this is the opposite of &lt;code&gt;ondragenter&lt;/code&gt;, and fires when the draggable element is pulled out of the drop area&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ondrop&lt;/code&gt; - this event fires when you drop the element into the drop area&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-now-the-react-way"&gt;
  &lt;/a&gt;
  And now The React way
&lt;/h2&gt;

&lt;p&gt;Here I used useReducer hook. It  takes in a reducer function and an initial state as input, and returns the current state and a dispatch function as output. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6owzwsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621535964652/9yt1BWDNh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6owzwsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621535964652/9yt1BWDNh.png" alt="react-drag-and-drop-folder-structure.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FileUploaderDND.js&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FileUploaderDND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;inDropZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToDropZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;inDropZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inDropZone&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragEnter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToDropZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;inDropZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataTransfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dropEffect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;move&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToDropZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;inDropZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataTransfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;files_with_preview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`image_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endraw&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;files_with_preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AddToDropZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;inDropZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;latestImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;latestImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;latestImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;latestImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onloadend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;base64data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeInputFile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;base64data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fileuploaderdnd-container"&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fileuploaderdnd-container"&lt;/span&gt;
      &lt;span class="na"&gt;onDrop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDrop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onDragOver&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDragOver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onDragEnter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDragEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fileuploaderdnd-container-button"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fileuploaderdnd-container-text"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          drag and drop an image here to see output 👉🏼
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;App.js&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FileUploaderDND&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FileUploaderDND&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setImageAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;File Uploader Drag and Drop&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FileUploaderDND&lt;/span&gt; &lt;span class="na"&gt;changeInputFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setImageAction&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"placeholder"&lt;/span&gt;
            &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://www.milindsoorya.site"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;milindsoorya.site&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;style.scss&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileuploaderdnd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;87879231&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileuploaderdnd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileuploaderdnd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;caf50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;👉🏼 checkout my website,  &lt;a href="https://milindsoorya.site/"&gt;milindsoorya.site&lt;/a&gt;  for more updates and getting in touch.&lt;/p&gt;

&lt;p&gt;Thank you very much for reading, liking and commenting on my articles. 🎊 If you have enjoyed my article or if it was helpful please support me by  &lt;a href="https://www.buymeacoffee.com/milindsoorya"&gt;buying me a coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programmingtips</category>
    </item>
    <item>
      <title>Babel’s Money Challenges, What It's Like to Work on Rails, &amp; more on DevNews!</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 20 May 2021 18:44:47 +0000</pubDate>
      <link>https://dev.to/devteam/babel-s-money-challenges-what-it-s-like-to-work-on-rails-more-on-devnews-124o</link>
      <guid>https://dev.to/devteam/babel-s-money-challenges-what-it-s-like-to-work-on-rails-more-on-devnews-124o</guid>
      <description>&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I are back for another week of developer news commentary 🗣 &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E6 - Babel’s Money Challenges, What It's Like to Work on Rails, and Coinbase’s End to Salary Negotiations&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e6-babel-s-money-challenges-what-it-s-like-to-work-on-rails-and-coinbase-s-end-to-salary-negotiations"&gt;
      &lt;img id="episode-profile-image" alt="S4:E6 - Babel’s Money Challenges, What It's Like to Work on Rails, and Coinbase’s End to Salary Negotiations" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#in-this-episode-youll-hear-about"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In this episode, you’ll hear about...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cryptocurrency company CoinBase refusing to negotiate job offers &lt;/li&gt;
&lt;li&gt;A blog post by the Babel core team titled, “Babel is used by millions, so why are we running out of money?” which created a bit of a Twitter storm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, we spoke with Babel Core Maintainer, &lt;a href="//twitter.com/NicoloRibaudo"&gt;Nicolò Ribaudo&lt;/a&gt;, about paying for open source software and why the popular Javascript project is running out of money.&lt;/p&gt;

&lt;p&gt;Finally, we spoke with Rails Core Contributor &lt;a href="//twitter.com/schneems"&gt;Richard Schneeman&lt;/a&gt;, about what it’s like to work on Rails in the aftermath of Basecamp co-founders Jason Fried and Rails creator David Heinemeier [High-Nemer] Hansson’s highly criticized blog post, which raised concerns about Rails' independence from its creator.&lt;/p&gt;

&lt;p&gt;I hope you enjoy!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e6-babels-money-challenges-what-its-like-to-work/id1525581923?i=1000522461260"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/7JlOAnVWuZwIHdVYAQkL27"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzMw?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjgnqHF7NjwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e6-babels-money-challenges-what-its-like-to-work-on-rails-and-coinbases-end-to-salary-negotiations-84092032"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=163183906"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/164"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JxYcC04MT2Noc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JxYcC04MT2Noc/giphy.gif" alt="Speaker"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Data types in Java</title>
      <author>Kumar Sanskar</author>
      <pubDate>Thu, 20 May 2021 18:25:36 +0000</pubDate>
      <link>https://dev.to/kumarsanskar/data-types-in-java-lcn</link>
      <guid>https://dev.to/kumarsanskar/data-types-in-java-lcn</guid>
      <description>&lt;p&gt;Another day in the journey of learning Java, well it's &lt;strong&gt;day 4&lt;/strong&gt; and today I will talk about the very essential component in any programming language &lt;em&gt;'data types'&lt;/em&gt;, it can be thought as that important label without which we won't be able to identify the type of food kept in a container in kitchen.&lt;br&gt;
Like every programming language, Java too has data types in order to facilitate the working on data and operations to be performed upon the data input by the user. &lt;br&gt;
Java being a &lt;em&gt;strongly typed language&lt;/em&gt; makes sure that all operations are checked for data type compatibility and illegal operations are rejected by the compiler. Furthermore the presence of data types makes it easier to determine what kind of operation are allowed on each type of data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java has two kinds of data types :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;u&gt; Primitive Data type&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt; Reference Data type&lt;/u&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1&gt;
  &lt;a href="#primitive-data-types-"&gt;
  &lt;/a&gt;
  Primitive Data Types -
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;they are also called the built-in data type.&lt;/li&gt;
&lt;li&gt;Java has eight types of data defined as primitive data types and they are:-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i. Byte &lt;br&gt;
 ii. Short&lt;br&gt;
 iii. Char&lt;br&gt;
 iv. Int&lt;br&gt;
 v. Long&lt;br&gt;
 vi. Float&lt;br&gt;
 vii. Double&lt;br&gt;
 viii. Boolean&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;h1&gt;
  &lt;a href="#reference-data-type-"&gt;
  &lt;/a&gt;
  Reference Data Type -
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;it is also called as derived data type or non-primitive data type in Java.&lt;/li&gt;
&lt;li&gt;they refer to objects and are created by programmer.&lt;/li&gt;
&lt;li&gt;it has two subtypes :-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i. String, arrays, classes, intefaces.&lt;br&gt;
ii. BigInteger,BigDecimal......and so on.&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it for today my readers, see you in the next blog till then keep learning keep growing, also you can put any suggestion or remarks if you feel or point mistake that may have crept in.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>goal</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Secure GET and POST requests using PHP</title>
      <author>Danilo César</author>
      <pubDate>Thu, 20 May 2021 18:21:22 +0000</pubDate>
      <link>https://dev.to/danilo/secure-get-and-post-requests-using-php-k50</link>
      <guid>https://dev.to/danilo/secure-get-and-post-requests-using-php-k50</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is also available in the following languages:  &lt;a href="https://medium.com/@danilocsar/requisi%C3%A7%C3%B5es-get-e-post-de-maneira-segura-usando-php-b2978af162e8"&gt;Portuguese&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In this article, we will cover two request methods: the&lt;/em&gt; GET &lt;em&gt;and the&lt;/em&gt; POST &lt;em&gt;methods, for sending and receiving data from an HTML form using PHP. Also, we will examine the most common problems involving information security, such as&lt;/em&gt; Cross-Site Scripting (XSS) &lt;em&gt;and&lt;/em&gt; SQL Injection, &lt;em&gt;and how to solve them with adequate sanitization.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's start with the theory: what are&lt;/em&gt; GET &lt;em&gt;and&lt;/em&gt; POST &lt;em&gt;requests, and how do they differ? – if you want to, you can skip to the next section, where we will start with the practice.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-get-and-post-methods"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Understanding the &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt; methods&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Hypertext Transfer Protocol&lt;/em&gt; (&lt;em&gt;HTTP&lt;/em&gt;) was developed as a protocol to serve the transmission of documents, and works as an intermediary between internet browsers and web servers. You are used to reading it in the addresses of web pages – as well as its “brother”, the &lt;em&gt;HTTPS&lt;/em&gt;, a more secure encrypted version (hence the “S” at the end, meaning “Secure”).&lt;/p&gt;

&lt;p&gt;In other words, &lt;em&gt;HTTP&lt;/em&gt; is a protocol that serves as a “bridge”: it collects a request from the internet browser; sends it to the server; waits for an answer; and, finally, it returns the new information to the &lt;em&gt;browser&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Generally, these requests keep some metadata in their “header”, that contains messages used to perform certain behavior on the client or on the server. In addition, &lt;em&gt;HTTP&lt;/em&gt; requests can assume different models.&lt;/p&gt;

&lt;p&gt;The most used &lt;em&gt;HTTP&lt;/em&gt; request types are &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt;, but there are other types in their technical specification, such as &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;. For the purposes of this article, we will focus only on the two most common.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-get-request"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The &lt;em&gt;GET&lt;/em&gt; request&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://tools.ietf.org/html/rfc7231#section-4.3.1"&gt;&lt;em&gt;GET request&lt;/em&gt; method&lt;/a&gt; is used when you want to obtain data from a specific source or resource. It should only be used to retrieval data, because its query string are sent and displayed at &lt;em&gt;URL&lt;/em&gt;, for example: &lt;code&gt;https://www.youtube.com/watch?v=fJ9rUzIMcZQ&amp;amp;t=3m5s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we insert this &lt;em&gt;URL&lt;/em&gt; into the &lt;em&gt;browser&lt;/em&gt;, we are asking the YouTube server for a specific resource: to retrieve the data from the video &lt;code&gt;v&lt;/code&gt; identified as &lt;code&gt;fJ9rUzIMcZQ&lt;/code&gt;. As soon as the server “returns” the request, the &lt;em&gt;HTTP&lt;/em&gt; protocol will tell the &lt;em&gt;browser&lt;/em&gt; how to display the video, in this example, the official video for the song “Bohemian Rhapsody”, by the British band Queen.&lt;/p&gt;

&lt;p&gt;Note that in our example, the second parameter of the &lt;em&gt;GET&lt;/em&gt; request, the &lt;code&gt;t&lt;/code&gt; parameter, informs the start time that we expect in our response, in this case, from 3min and 5s. The parameters &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; are separated by the character &lt;code&gt;&amp;amp;&lt;/code&gt;, which indicates to the &lt;em&gt;HTTP&lt;/em&gt; protocol where the “key-value” pairs of these parameters begin and end. So, the server knows exactly that you search for the video &lt;code&gt;v=fJ9rUzIMcZQ&lt;/code&gt; at the time &lt;code&gt;t=3m5s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GET&lt;/em&gt; requests are generally limited in length — for most &lt;em&gt;browsers&lt;/em&gt;, it is up to &lt;a href="https://stackoverflow.com/a/2659995"&gt;8 KB, or 8192 bytes&lt;/a&gt; in &lt;em&gt;URI&lt;/em&gt; — and, because they only serve to request data, they are not able to modify it. In addition, they can be stored in &lt;em&gt;cache&lt;/em&gt;, in the browser's history and also in the bookmarks. That's why you should &lt;strong&gt;never&lt;/strong&gt; use it to send sensitive data, such as Social Security Numbers and user passwords.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Some developers, however, ignore it and expose personal and sensitive data of people on the internet. In Brazil, due to the &lt;a href="http://www.planalto.gov.br/ccivil_03/_ato2015-2018/2018/lei/l13709.htm"&gt;General Personal Data Protection Law (LGPD)&lt;/a&gt;, this practice may cause big inconveniences, such as serious penalties to the company or to the ones who operate and manage this data, when a leak happens. So, the best practice is to &lt;strong&gt;never&lt;/strong&gt; send sensitive personal data via the &lt;em&gt;GET&lt;/em&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-post-request"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The &lt;em&gt;POST&lt;/em&gt; request&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://tools.ietf.org/html/rfc7231#section-4.3.3"&gt;&lt;em&gt;POST request&lt;/em&gt; method&lt;/a&gt; is used to send data to the server, to update or create a new resource.&lt;/p&gt;

&lt;p&gt;Unlike the &lt;em&gt;GET&lt;/em&gt; method, the &lt;em&gt;POST&lt;/em&gt; method does not expose the information at the &lt;em&gt;URL&lt;/em&gt; address. In this case, the data is transmitted in the &lt;em&gt;HTTP&lt;/em&gt; request body, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST /update/webform.php HTTP/1.1
Host: youtube.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 42
user=Stevie&amp;amp;playlist=British&amp;amp;v=fJ9rUzIMcZQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we are informing the &lt;code&gt;Host: youtube.com&lt;/code&gt; server that we will make a &lt;code&gt;POST&lt;/code&gt; method request to the &lt;code&gt;/update/webform.php&lt;/code&gt; address, using the technical specifications of the &lt;code&gt;HTTP/1.1&lt;/code&gt; protocol. We are also indicating that there is a 42 character information (&lt;code&gt;Content-Length: 42&lt;/code&gt;), in the standard &lt;code&gt;Content-Type&lt;/code&gt; content format, whose value is &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. Finally, our information is on the bottom line, containing 3 parameters: &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;playlist&lt;/code&gt;, and &lt;code&gt;v&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 The information traveling in the body of the &lt;em&gt;HTTP&lt;/em&gt; request can be intercepted by bad agents. The best practice, then, is to make these transmissions using encryption, via the &lt;em&gt;HTTPS&lt;/em&gt; protocol, so it makes harder to them read this information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's assume the YouTube server recognized our request, and this address is valid. In our example, the informed video, which we received previously, will be added to the &lt;code&gt;British&lt;/code&gt; playlist of the user identified as &lt;code&gt;Stevie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that this is a one-time request, which is unlikely to be repeated. As a rule, the &lt;em&gt;POST&lt;/em&gt; method, unlike &lt;em&gt;GET&lt;/em&gt;, is not stored in &lt;em&gt;cache&lt;/em&gt; or in the client's browser history, nor can it be saved in bookmarks. &lt;em&gt;POST&lt;/em&gt; requests have no restrictions on the size of messages, which allows us to send complete articles, such as this one, through an electronic HTML form, for example. Also, the &lt;em&gt;POST&lt;/em&gt; method supports a wide variety of &lt;code&gt;Content-Type&lt;/code&gt;s, including binary documents, &lt;em&gt;strings&lt;/em&gt;, and numbers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;em&gt;POST&lt;/em&gt; method is generally preferable over &lt;em&gt;GET&lt;/em&gt;. However, there are situations in which we should include the requisition data in the address &lt;em&gt;URL&lt;/em&gt;: for example, in search forms or by displaying documents and videos, because we want the client to be able to repeat it easily and to re-access the address through the browser's history.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-forms-with-html-and-php"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating forms with HTML and PHP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we understand how the &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;POST&lt;/em&gt; methods work in the theory, let's go to the practices: let's create an HTML form, and have it to send and to receive information using PHP.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 There are several ways to do this, like via JavaScript and &lt;em&gt;AJAX&lt;/em&gt;, where the user don't have to refresh the page, because we are transmitting the information asynchronously. For the purposes of this article, we will focus only on HTML and PHP technologies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#inserting-the-form-on-the-page"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Inserting the form on the page&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The first step to create our web page is to inform the structure of the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element that will contain the fields where user types the data, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- origin.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"webform"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"webform"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"target.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this fragment, we are using the &lt;em&gt;GET&lt;/em&gt; method, defined in &lt;code&gt;method="GET"&lt;/code&gt;, to send the information that will be inserted into the form, whose name was defined in &lt;code&gt;name="webform"&lt;/code&gt;, to the target page (&lt;code&gt;action="target.php"&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inserting-the-fields-to-the-form"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Inserting the fields to the form&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The next step is to insert the fields, or &lt;code&gt;input&lt;/code&gt;s to our form, where users can type the values. Let's update our source file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- origin.html --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Electronic form&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"webform"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"webform"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"target.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"iduser"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;User ID:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"iduser"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"iduser"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"idplaylist"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Playlist ID:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"idplaylist"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"idplaylist"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"v"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video ID:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"v"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"v"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fJ9rUzIMcZQ"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send data&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We inserted 3 fields, defined by the &lt;em&gt;HTML&lt;/em&gt; tag &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, and also 1 button that sends the form's data, using &lt;code&gt;&amp;lt;button type="submit"&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also add labels to the text fields, using the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags. Notice that each values on the &lt;code&gt;for&lt;/code&gt; attributes, on each &lt;code&gt;label&lt;/code&gt; element corresponds to an &lt;code&gt;id&lt;/code&gt; attribute of one the &lt;code&gt;input&lt;/code&gt; fields, like this: &lt;code&gt;&amp;lt;label for="idplaylist"&amp;gt;&lt;/code&gt; refers specifically to the field that contains the corresponding &lt;code&gt;id="idplaylist"&lt;/code&gt; attribute, and vice versa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 It is possible to insert predefined values to the fields, adding the data corresponding to the &lt;code&gt;value&lt;/code&gt; attribute in each HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, the &lt;code&gt;name&lt;/code&gt; attribute in each &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field will be used to obtain the values inserted by the user in the corresponding field when we move to PHP.&lt;/p&gt;

&lt;p&gt;The final result, displayed in the client's &lt;em&gt;browser&lt;/em&gt;, should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiTkEMZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621533203977/gA6-X-OJP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiTkEMZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621533203977/gA6-X-OJP.png" alt="en_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-data-with-php"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reading data with PHP&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;After completing our HTML form, we can move on to the next step. Let's define the elements of the target page using PHP.&lt;/p&gt;

&lt;p&gt;The source code below, inserted in the file &lt;code&gt;target.php&lt;/code&gt;, will be executed by PHP as soon as the user submits the form data that we created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- target.php --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="c1"&gt;// Prints the values of each field on the page&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"The user identified as "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"iduser"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" added the video whose ID is "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"v"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" to the playlist "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"idplaylist"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we use the &lt;em&gt;superglobal&lt;/em&gt; &lt;code&gt;$_GET[]&lt;/code&gt; variable to obtain the values inserted by the user, that were transmitted using the &lt;em&gt;HTTP&lt;/em&gt; protocol. For each &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field that we previously created on the form, its corresponding &lt;code&gt;name&lt;/code&gt; attribute must be informed within the &lt;em&gt;superglobal variable&lt;/em&gt;. For example: the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field that shows the attribute &lt;code&gt;name="iduser"&lt;/code&gt; can be found in PHP by using &lt;code&gt;$_GET["iduser]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;PHP has some &lt;a href="https://www.php.net/manual/en/language.variables.superglobals.php"&gt;native &lt;em&gt;superglobals&lt;/em&gt; variables&lt;/a&gt;, such as &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, and &lt;code&gt;$_REQUEST&lt;/code&gt;. Remember that we use them &lt;strong&gt;according to the &lt;em&gt;HTTP&lt;/em&gt; request method that we are using&lt;/strong&gt; for data transmission, so it must correspond to what been defined in the &lt;code&gt;method&lt;/code&gt; attribute of our &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 PHP's &lt;code&gt;$_REQUEST&lt;/code&gt; &lt;em&gt;superglobal&lt;/em&gt; variable can carry information from both &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt; methods, in addition to any &lt;em&gt;cookies&lt;/em&gt; transmitted in &lt;code&gt;$_COOKIE&lt;/code&gt;. However, its use &lt;strong&gt;is not&lt;/strong&gt; always recommended: the best practice is that developers know the methods used for inputs and outputs traveling on their server, in order to avoid more generic commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, we separate the &lt;em&gt;strings&lt;/em&gt; and the variables in PHP with the &lt;code&gt;.&lt;/code&gt; character, so each fragment of text is contained between the &lt;code&gt;"&lt;/code&gt; characters, at the beginning and at the end of the sentence. Finally, we print on the user's screen the entire expression within the parentheses with the &lt;code&gt;echo()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-by-doing"&gt;
  &lt;/a&gt;
  📝 Learn by doing
&lt;/h3&gt;

&lt;p&gt;Did you notice that the &lt;em&gt;URL&lt;/em&gt; address on &lt;code&gt;target.php&lt;/code&gt; page shows the values typed in the source page?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test #1:&lt;/strong&gt; Rewrite the source code of the form we coded, using another requisition method, so that the information stays safe from reading by eavesdroppers and unauthorized people. After you finish, you can check &lt;a href="https://gist.github.com/DaniloCeesar/b49ec6a77f3d75380fe0b689afbfe065"&gt;the final answer&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increasing-html-form-security"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Increasing HTML form security&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Our HTML form is finally done! However, we can increase the security of our page, protecting the reading of the information on PHP.&lt;/p&gt;

&lt;p&gt;This is our last step. We will add an extra layer of security, although basic, to prevent PHP from executing commands at the moment it receives and displays the values reported by the client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 The rule in programming is to &lt;strong&gt;never blindly trust the values inserted by the user&lt;/strong&gt;. Unfortunately, many bad agents have exploited technical problems on websites in order to collect sensitive information, or to damage servers by executing unexpected commands. For those reasons, it is very important that you &lt;strong&gt;protect, beforehand, the transmitted requests and the server&lt;/strong&gt;, after all, if the users' interests are legitimate, they will also benefit from the increased security of your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The technique that filters and transforms the values entered by the user into simpler &lt;em&gt;strings&lt;/em&gt; is called &lt;strong&gt;sanitization&lt;/strong&gt;. By default, PHP has a collection of native functions that helps us on this step, such as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;htmlspecialchars()&lt;/code&gt; - Converts special characters, such as &lt;code&gt;&amp;amp;“”&amp;lt;&amp;gt;&lt;/code&gt;, to HTML entities;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;htmlentities()&lt;/code&gt; - Similar to the previous one, but it converts a larger number of characters to HTML entities;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strip_tags()&lt;/code&gt; - Removes HTML and PHP &lt;em&gt;tags&lt;/em&gt; from a &lt;em&gt;string&lt;/em&gt;, such as &lt;em&gt;hyperlinks&lt;/em&gt; and comments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we use adequate sanitization, as soon as the server receives an improper information — for example, &lt;code&gt;&amp;lt;script&amp;gt;alert('Intrusive alert');&amp;lt;/script&amp;gt;&lt;/code&gt; — it will be transformed, “sanitized”, and should not display a warning message on the users' screen in this case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Notice that, in our example, we use a harmless, in theory, &lt;em&gt;script&lt;/em&gt; — at most, uncomfortable for the user. However, it is important to reiterate: you must &lt;strong&gt;always protect and sanitize information&lt;/strong&gt;. In other cases, a bad agent could transmit malicious &lt;em&gt;scripts&lt;/em&gt; — this technique is known as &lt;em&gt;Cross-Site Scripting&lt;/em&gt;, or &lt;em&gt;XSS&lt;/em&gt; — or execute harmful commands to the database (usually called &lt;em&gt;SQL Injection&lt;/em&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's edit the source code of our page, by adding one of these sanitizing functions. Our final code should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- target.php --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="c1"&gt;// Prints the values of each field on the page&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"The user identified as "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;htmlspecialchars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"iduser"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;ENT_QUOTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" added the video whose ID is "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;htmlspecialchars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"v"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;ENT_QUOTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" to the playlist "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;htmlspecialchars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"idplaylist"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;ENT_QUOTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result, displayed in the browser, should look like the figure below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Sf39swu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621533214749/2elZdyIK4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Sf39swu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621533214749/2elZdyIK4.png" alt="en_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-by-doing"&gt;
  &lt;/a&gt;
  📝 Learn by doing
&lt;/h3&gt;

&lt;p&gt;Have you ever noticed that the majority of sites and search engines use the &lt;code&gt;q&lt;/code&gt; parameter to transmit the data inserted by the user in the query requests to the server?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test #2:&lt;/strong&gt; Create a search form, using HTML and PHP, that contains at least 1 text field and 1 button to send the data, so that the address &lt;em&gt;URL&lt;/em&gt; on the target page displays the &lt;code&gt;q&lt;/code&gt; (or “query”) parameter. It should receive the values, sanitized, inserted by the user in the text field. After you finish, you can check &lt;a href="https://gist.github.com/DaniloCeesar/95c63e7c93e56deb05fb150923d03fe8"&gt;the final answer&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So, we're done! We made our electronic form in HTML that is capable of transmitting data via &lt;em&gt;HTTP&lt;/em&gt; request methods, in this case, &lt;em&gt;GET&lt;/em&gt; or &lt;em&gt;POST&lt;/em&gt; — and we also understand how they work —, and send them to the target page written in PHP. Then, it receives, handles the data, and displays the information on the user's screen. Also, we sanitized the values informed by the user in order to avoid serious problems of information security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Next steps&lt;/strong&gt; 🚶
&lt;/h3&gt;

&lt;p&gt;Internet security it is never too much, so there is always something more to learn and apply. In order to build safer applications, be sure to follow the next article on this series, and read the &lt;a href="https://www.php.net/manual/en/security.php"&gt;Security topic in the PHP Manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions on how to build more secure applications using PHP, share it in the comments. 📣&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;[1] “HTTP Request Methods”, from &lt;em&gt;w3schools&lt;/em&gt;: &lt;a href="https://www.w3schools.com/tags/ref_httpmethods.asp"&gt;https://www.w3schools.com/tags/ref_httpmethods.asp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[2] “HTTP”, from &lt;em&gt;MDN Web Docs&lt;/em&gt; (&lt;em&gt;Mozilla Developer Network&lt;/em&gt;): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[3] “GET”, from &lt;em&gt;MDN Web Docs&lt;/em&gt; (&lt;em&gt;Mozilla Developer Network&lt;/em&gt;): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[4] “POST”, from &lt;em&gt;MDN Web Docs&lt;/em&gt; (&lt;em&gt;Mozilla Developer Network&lt;/em&gt;): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[5] “htmlspecialchars”, from &lt;em&gt;PHP Manual&lt;/em&gt;: &lt;a href="https://www.php.net/htmlspecialchars"&gt;https://www.php.net/htmlspecialchars&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[6] “htmlentities”, from &lt;em&gt;PHP Manual&lt;/em&gt;: &lt;a href="https://www.php.net/htmlentities"&gt;https://www.php.net/htmlentities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[7] “strip_tags”, from &lt;em&gt;PHP Manual&lt;/em&gt;: &lt;a href="https://www.php.net/strip_tags"&gt;https://www.php.net/strip_tags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[8] “Superglobals”, from &lt;em&gt;PHP Manual&lt;/em&gt;: &lt;a href="https://www.php.net/manual/en/language.variables.superglobals.php"&gt;https://www.php.net/manual/en/language.variables.superglobals.php&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>php</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Unboxing Apple AirTag with engraving and testing it out </title>
      <author>Michael Crump</author>
      <pubDate>Thu, 20 May 2021 18:16:25 +0000</pubDate>
      <link>https://dev.to/mbcrump/unboxing-apple-airtag-with-engraving-and-testing-it-out-5222</link>
      <guid>https://dev.to/mbcrump/unboxing-apple-airtag-with-engraving-and-testing-it-out-5222</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I just got my hands on the new Apple AirTag and wanted to share a  quick review with you. Hopefully you'll find it interesting or funny! &lt;/p&gt;

&lt;p&gt;Video (12 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/exBMOkWoCzI"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>airtag</category>
      <category>productivity</category>
      <category>apple</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Incorporating Accessibility Into Web Applications</title>
      <author>Lauren Conrad</author>
      <pubDate>Thu, 20 May 2021 18:15:47 +0000</pubDate>
      <link>https://dev.to/mural/incorporating-accessibility-into-web-applications-5bi6</link>
      <guid>https://dev.to/mural/incorporating-accessibility-into-web-applications-5bi6</guid>
      <description>&lt;p&gt;&lt;em&gt;On May 20th, we're celebrating Global Accessibility Awareness Day (GAAD). This significant day is here to remind us all that even though the journey toward accessibility can take years, we’re still committed to making our websites and apps accessible to all people and to continue advocating for accessibility in every aspect of our lives. The Design Systems &amp;amp; Accessibility team at MURAL has been working on incorporating accessibility (&lt;a href="https://adrianroselli.com/2016/11/a11y-accessibility.html"&gt;also known as a11y&lt;/a&gt;) into our product. Along this journey to make MURAL’s product accessible, we’ve learned quite a few tips and tricks. Today, we're sharing what we've learned with you about incorporating accessibility into designs and products.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-accessibility"&gt;
  &lt;/a&gt;
  What is accessibility?
&lt;/h2&gt;

&lt;p&gt;Accessibility is the practice of ensuring that any person, particularly people with disabilities, can use a website or web application. When someone considers accessibility, they might think only about a set of disabilities that they are familiar with, but the people who are impacted have a broad range of disabilities, which can be permanent, temporary, or even situational. For instance, if a person is holding a baby in one arm, how easily can they write an email? If a person is blind, how easily can they navigate your website?&lt;/p&gt;

&lt;p&gt;Now that we’ve defined accessibility, you might be wondering, why is accessibility important? How do I convince others that it’s important? Who on my team should be working on accessibility? Some key points the Design Systems &amp;amp; Accessibility team kept top of mind while thinking about these questions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;“Opt-in” by default:&lt;/strong&gt; Accessibility needs to be the default standard, not something that would be nice to have. Everyone uses the web differently. Making products accessible ensures that more users can access your product. In other words, enabling more people to use your product, grants you access to a bigger market place. Working on implementing accessibility from the start also costs exponentially less than retrofitting a production-facing application/site, or worse yet, a lawsuit.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Teamwork, Dreamwork:&lt;/strong&gt; Creating an accessible app is a huge project, and having only one person responsible for accessibility can create bottlenecks and burnout. By collectively assuming accessibility goals, everyone can focus on how their own roles contribute to accessibility. For instance, UX designers specifically are focused on developing the usability and interactions of an application/site. They also do things like user research, testing, feedback etc. These skill sets are not ones that developers typically have, so bringing designers into the discussion early on can make accessibility-focused development less overwhelming and difficult to achieve. Ultimately, to incorporate accessibility practices into the development lifecycle long term, the entire organization needs to actively prioritize accessibility, from development and design all the way to QA, management, and customer support. This is why the Design Systems &amp;amp; Accessibility team codified a universal pledge to encourage commitment to accessibility and inclusion. As of today, every MURAL employee has been asked to sign this pledge.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://feather.ca/shift-left/"&gt;&lt;strong&gt;Shift Left:&lt;/strong&gt;&lt;/a&gt; Think about accessibility at the start of the product development process, not after. Implementing accessibility into an existing app can be especially challenging for organizations that have been around for a long time. It’s easier to incorporate accessible elements while developing a product than to create a potentially inaccessible product and try to fix it afterward.  So whenever possible, start early.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started
&lt;/h2&gt;

&lt;p&gt;In case you’re wondering how to begin, here are some ways to start incorporating accessibility into your app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use a plugin or a linter to scan your code for accessibility issues.&lt;/strong&gt; For example, for React applications, you can use &lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;eslint-plugin-jsx-a11y&lt;/a&gt; to catch approximately 30% of &lt;a href="https://www.24a11y.com/2017/reacts-accessibility-code-linter"&gt;issues that make an app inaccessible&lt;/a&gt;, like missing alt text on images. What a quick win! However, it’s important to also run a full accessibility audit including manual processes, to help identify usability issues. See the bottom of this section for details.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run an automated testing audit using an accessibility browser extension.&lt;/strong&gt; Free extensions like &lt;a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US"&gt;aXe&lt;/a&gt; and &lt;a href="https://wave.webaim.org/extension/"&gt;Wave&lt;/a&gt; can scan your app for accessibility issues that the linter may have missed, like low contrast color schemes. While this can be a great way to check for automatically detectible issues, it’s no replacement for usability testing, so be sure to still do a full manual audit.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Familiarize yourself with the &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag"&gt;Web Content Accessibility Guidelines&lt;/a&gt; (WCAG).&lt;/strong&gt; WCAG is the go-to standard reference for implementing accessibility features and is maintained by the &lt;a href="https://en.wikipedia.org/wiki/World_Wide_Web_Consortium"&gt;W3C&lt;/a&gt;, and is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG"&gt;guided by four principles&lt;/a&gt; to ensure a broad range of accessibility: Perceivability, Operability, Understandability, and Robustness. Although they can also be overwhelming due to their thoroughness, they are the official resource on accessibility.
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a checklist based on your product’s existing or planned features and make strategies to adapt those features to be more accessible.&lt;/strong&gt; Here’s a sample checklist from the Design Systems &amp;amp; Accessibility team that you can take inspiration from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that users can fully navigate your app with a keyboard.&lt;/li&gt;
&lt;li&gt;Test your software using common assistive technologies, such as a screen reader.&lt;/li&gt;
&lt;li&gt;Ensure users can zoom in to 200% (&lt;a href="https://www.w3.org/WAI/WCAG21/quickref/#resize-text"&gt;the zoom percentage that the WCAG recommends&lt;/a&gt;) and that all content is still easily readable.&lt;/li&gt;
&lt;li&gt;Check that images and text meet color contrast levels of 4.5:1 to help ensure they’re still readable. Here is a &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;color contrast checker&lt;/a&gt; you can use to test your designs.&lt;/li&gt;
&lt;li&gt;Make sure that language is clear and understandable. Check out the &lt;a href="https://www.plainlanguage.gov/guidelines/"&gt;Plain Language Guidelines&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Ensure you have no images that &lt;a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/seizure-does-not-violate.html"&gt;flash more than three times per second&lt;/a&gt;, because quick-moving graphics could be an issue for users with epilepsy or attention deficit disorder.&lt;/li&gt;
&lt;li&gt;Write &lt;a href="https://supercooldesign.co.uk/blog/how-to-write-good-alt-text"&gt;alt text&lt;/a&gt; for functional images. These are descriptions of &lt;a href="https://sheribyrnehaber.com/context-is-the-most-critical-aspect-of-alt-text-everyone-seems-to-miss"&gt;non-decorative graphics&lt;/a&gt; that a screen reader can read aloud to users with visual impairments.&lt;/li&gt;
&lt;li&gt;Add captions for videos and audio.&lt;/li&gt;
&lt;li&gt;Ensure that videos and sounds do not play automatically. &lt;a href="https://www.boia.org/blog/why-autoplay-is-an-accessibility-no-no"&gt;Autoplay can cause a number of issues for users&lt;/a&gt;, and even prevent them from being able to navigate your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about accessibility and the above recommendations, check out the &lt;a href="https://www.w3.org/WAI/WCAG21/quickref/"&gt;Web Content Accessibility Quick Reference Guide&lt;/a&gt; that summarizes the &lt;a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines"&gt;Web Content Accessibility Guidelines&lt;/a&gt;. The guidelines contain extensive lists of standards to enable a variety of users to access web products more easily. For more digestible checklists and write ups on the topic, check out &lt;a href="https://www.ibm.com/able/toolkit"&gt;IBM’s breakdown of the WCAG checklist by role&lt;/a&gt; and &lt;a href="https://www.and.org.au/articles.php/43/how-to-write-more-accessible-social-media-posts"&gt;this article on making images and other media incorporated into a website or app accessible&lt;/a&gt;.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do a full manual audit of your product to ensure it is usable in real life situations.&lt;/strong&gt; This is the biggest and most important step, because automated programs can’t test apps for the ways users will navigate them. Teach yourself how to navigate your website or application using only your keyboard, and then only a screen reader, and then show the rest of the team how it’s done. Bake in time for local testing using these approaches on even small product changes. If possible, include testing and feedback from users with disabilities, or hire an accessibility expert to augment your routine manual audits For more info, check out this &lt;a href="https://www.smashingmagazine.com/2018/09/importance-manual-accessibility-testing"&gt;Smashing Magazine article on the importance of manual testing&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve defined accessibility and reviewed key guidelines, we hope you’ve got a lot more ideas on how to make apps accessible to everyone and, as a result, how to create a more inclusive world.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Linux CLI tool</title>
      <author>endormi</author>
      <pubDate>Thu, 20 May 2021 18:12:49 +0000</pubDate>
      <link>https://dev.to/endormi/linux-cli-tool-2en3</link>
      <guid>https://dev.to/endormi/linux-cli-tool-2en3</guid>
      <description>&lt;p&gt;I have created a tool for linux called tilux (work in progress) that has multiple scripts you can run. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The idea
&lt;/h3&gt;

&lt;p&gt;I as also many others (probably) as well have a ton of useful scripts for Linux, that just happen to be all over the system and not in one specific folder. So this is where this project comes handy, everything is in one CLI.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/endormi/tilux"&gt;project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have included multiple scripts such as. monitoring (cpu, memory etc.), networking (ip pinging and server pinging, system scripts (add alias, clean logs and trash etc.) and many more.&lt;/p&gt;

&lt;p&gt;You can the scripts individually from any folder, but to run the CLI you need to be inside the &lt;code&gt;tilux&lt;/code&gt; folder. This hopefully will be updated so that you can run it from any folder later.&lt;/p&gt;

&lt;p&gt;The CLI is built with Ruby and it calls the scripts that you choose either by using arguments or by running interactively. If you know a better way to call the scripts, feel free to implement it!&lt;/p&gt;

&lt;p&gt;Feel free to check out the &lt;a href="https://github.com/endormi/tilux"&gt;project&lt;/a&gt;. New script ideas are always welcome and stars are appreciated 😄.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>linux</category>
    </item>
    <item>
      <title>Pyenv, Multiple Users, and a Plugin Solution</title>
      <author>John McDowell</author>
      <pubDate>Thu, 20 May 2021 18:12:24 +0000</pubDate>
      <link>https://dev.to/macdub/pyenv-multiple-users-and-a-plugin-solution-3k16</link>
      <guid>https://dev.to/macdub/pyenv-multiple-users-and-a-plugin-solution-3k16</guid>
      <description>&lt;p&gt;In today's enterprise world it likely that when developing in python there will be a need to have multiple versions of python living on a system in parallel. There are a number of solutions to manage multiple versions on the same machine: *conda (miniconda, anaconda, etc.), different install directories, and pyenv to name a few.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-python-version-solutions"&gt;
  &lt;/a&gt;
  Multiple Python Version Solutions
&lt;/h2&gt;

&lt;p&gt;I have found that the conda style setups can be heavy weight and introduce their own package management interfaces. I am not a big fan of having to bounce between the two or providing the option to those that are not as technically savvy. In my experience, this has always ended up very messy.&lt;/p&gt;

&lt;p&gt;The manual setup of different install directories is a solution that requires more manual intervention from setting the PATH correctly, installing new versions, and providing instruction on how to use each version. This easily leads to different methodologies being used between the more advanced users and the less advanced users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt; is light weight in that it is purely implemented in bash. It provides an interface for creating virtual python environments and installing different python versions along side one another. The project states that it "follows the UNIX tradition of single-purpose tools that do one thing well." Through my use, I have to agree that it succeeds there.&lt;/p&gt;

&lt;p&gt;The one short coming that pyenv has is it is focused more on a single user environment, which for the individual developer is perfectly fine. In the enterprise realm, it is often desired to have a unified development environment when working on projects to limit the number of third party libraries in use, keeping internal libraries synced, and knowing that each developer's environment is the same to eliminate the "it worked on my system" retort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyenv-and-multiple-users"&gt;
  &lt;/a&gt;
  Pyenv and Multiple Users
&lt;/h2&gt;

&lt;p&gt;I introduced pyenv to my team as a solution for version management as well as python virtualenv management. The early adoption work went smoothly and there were no apparent issues, but the number of users and projects being worked was small. Often the users were working on the same project and using the same environments and it was not until we started to use pyenv on a wider scale that issues arose.&lt;/p&gt;

&lt;p&gt;Incidences of file locks crept in as more virtual environments were setup and started to be used. Then there was the issue of activating an environment and suddenly your binaries changed from underneath you because another user activated a drastically different environment.&lt;/p&gt;

&lt;p&gt;These issues were due to the "shims" directory being shared across all users. When an environment was activate, the shims directory would have the binaries updated to the latest activate environment binaries or in the case of the file lock issue, not updated at all. This is where the &lt;a href="https://github.com/macdub/pyenv-multiuser"&gt;pyenv-multiuser&lt;/a&gt; plugin was originated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyenvmultiuser-plugin"&gt;
  &lt;/a&gt;
  Pyenv-multiuser Plugin
&lt;/h2&gt;

&lt;p&gt;This plugin resolves the shared shims directory issue of pyenv. It does this by make some modifications to the pyenv base code regarding where it looks for and where it sets up the shims. The shims directory becomes local to the user. With the shims directory now under the user's control and not shared the file lock issue is resolved. The binaries under the shims directory issue is resolved. At least in part as the user could technically   open a secondary shell and source another environment and cause issues for themselves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-a-plugin"&gt;
  &lt;/a&gt;
  Why a plugin?
&lt;/h3&gt;

&lt;p&gt;One may be wondering, why make a plugin rather than alter the pyenv code? This is a good question. I opted to make a plugin because it would not change the way most users work with pyenv, which is in the single user space. This, unfortunately, is not completely avoidable.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, the plugin makes changes to the pyenv code anyhow. There is another plugin &lt;em&gt;pyenv-update&lt;/em&gt; which performs updates on pyenv and any installed plugins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pyenv update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is basically doing a pull from the git repositories. Since this plugin makes changes to the code, the local repository is dirty and thus cannot perform the pull. In order to account for this, an update command was implemented in the pyenv-multiuser plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pyenv multiuser update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command restores backed up versions of the files that were changed prior to executing the standard pyenv-update command. After the update is complete, the plugin creates new backups and re-applies the code changes.&lt;/p&gt;

&lt;p&gt;Using the plugin approach, it should be easier to account for issues like these with other plugins as they may arise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-forward"&gt;
  &lt;/a&gt;
  Looking Forward
&lt;/h2&gt;

&lt;p&gt;Currently, I have deployed this within my company's development environment. I expect to see issues come up as more users and projects interact with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-links"&gt;
  &lt;/a&gt;
  Quick Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/macdub/pyenv-multiuser"&gt;pyenv-multiuser plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>bash</category>
      <category>pyenv</category>
    </item>
    <item>
      <title>Have the frost glass effect on your website. See How?</title>
      <author>Areeb ur Rub</author>
      <pubDate>Thu, 20 May 2021 18:05:18 +0000</pubDate>
      <link>https://dev.to/areeburrub/have-the-frost-glass-effect-on-your-website-see-how-hok</link>
      <guid>https://dev.to/areeburrub/have-the-frost-glass-effect-on-your-website-see-how-hok</guid>
      <description>&lt;p&gt;Actually, doing this pretty easy there's a css property called &lt;code&gt;backdrop-filter&lt;/code&gt; this property add a graphical effect to background and you can add many things to background one of them is a blur effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply"&gt;
  &lt;/a&gt;
  How to Apply
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/areeburrub/embed/oNZYRQJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So, to apply a backdrop blur filter first you have to choose a perfect color for background you can even add a image it will make it blur, but to make the see-through glass part work we have to make the color transparent.&lt;br&gt;
&lt;em&gt;I use VS Code todo stuff so it gives a color picker option&lt;/em&gt;&lt;br&gt;
The color I used is a translucent white &lt;code&gt;#ffffff3f&lt;/code&gt; , I tried to find an online color picker and fund this &lt;a href="https://rgbacolorpicker.com/#picker"&gt;RGB COLOR PICKER&lt;/a&gt; , you can use this to get a transparent color.&lt;/p&gt;

&lt;p&gt;so after setting up background no use put &lt;code&gt;backdrop-filter:blur(5px);&lt;/code&gt; add the blur radius as much you want and this will add a frost glass effect to your div.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#here-are-some-other-filterfunctions-of-backdropfilter"&gt;
  &lt;/a&gt;
  here are some other filter-functions of backdrop-filter:
&lt;/h3&gt;



&lt;p&gt;&lt;code&gt;backdrop-filter: brightness(60%);&lt;br&gt;
backdrop-filter: contrast(40%);&lt;br&gt;
backdrop-filter: drop-shadow(4px 4px 10px blue);&lt;br&gt;
backdrop-filter: grayscale(30%);&lt;br&gt;
backdrop-filter: hue-rotate(120deg);&lt;br&gt;
backdrop-filter: invert(70%);&lt;br&gt;
backdrop-filter: opacity(20%);&lt;br&gt;
backdrop-filter: sepia(90%);&lt;br&gt;
backdrop-filter: saturate(80%);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Try these too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-this-to-use-sometime"&gt;
  &lt;/a&gt;
  Save this to use sometime
&lt;/h2&gt;

&lt;p&gt;Source: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
