<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS Card Hover Effects | Html CSS</title>
      <author>ali-dev-hash</author>
      <pubDate>Thu, 06 May 2021 18:54:17 +0000</pubDate>
      <link>https://dev.to/alidevhash/css-card-hover-effects-html-css-33ml</link>
      <guid>https://dev.to/alidevhash/css-card-hover-effects-html-css-33ml</guid>
      <description>&lt;p&gt;CSS Card Hover Effects | Html CSS&lt;br&gt;
Demo == &amp;gt; &lt;a href="https://codepen.io/Bilal1909/pen/zYZOKQw?editors=1100"&gt;https://codepen.io/Bilal1909/pen/zYZOKQw?editors=1100&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>codepen</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>See the errors your users are experiencing. From your IDE. Live.</title>
      <author>Neeraj Kashyap</author>
      <pubDate>Thu, 06 May 2021 18:47:41 +0000</pubDate>
      <link>https://dev.to/zomglings/see-the-errors-your-users-are-experiencing-from-your-ide-live-19id</link>
      <guid>https://dev.to/zomglings/see-the-errors-your-users-are-experiencing-from-your-ide-live-19id</guid>
      <description>&lt;p&gt;If you have built a library, command line tool, or API, Bugout helps you understand:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Who your users are&lt;/li&gt;
&lt;li&gt;How they are using your software&lt;/li&gt;
&lt;li&gt;What errors they experience&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you &lt;a href="https://bugout.dev/app/public/d550eb09-7c85-4fdc-b687-9f04b730f6e1/entries/07b21356-2e3f-4fa9-bd77-764fe903a640?sidebar=true"&gt;set up an integration&lt;/a&gt; and &lt;a href="https://github.com/bugout-dev/humbug"&gt;instrument your code&lt;/a&gt;, you can access your user reports at &lt;a href="https://bugout.dev"&gt;https://bugout.dev&lt;/a&gt;. This gives you a live view of what your users are experiencing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ia5-Pd37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/static.simiotics.com/bugout-dev-docs/humbug-journal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ia5-Pd37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/static.simiotics.com/bugout-dev-docs/humbug-journal.png" alt="Live view of user reports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week, we released the latest version of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=bugout.Bugout"&gt;Bugout VSCode extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you can see the latest issues your users have had from VSCode. Just hover over an exception to see how many users were affected by it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ws_j3wX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3oz8m6ngdl3p6oam301.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ws_j3wX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3oz8m6ngdl3p6oam301.png" alt="Hover over an exception to see how many users were affected by it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even click through to see their stack traces:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPAdhI3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/static.simiotics.com/bugout-dev-docs/bugout-vscode-exception-traceback.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPAdhI3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/static.simiotics.com/bugout-dev-docs/bugout-vscode-exception-traceback.png" alt="See your users' stack traces right in VSCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just a taste of things to come. If you use VSCode and would like to try this out, Bugout supports Python, Go, and Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bugout.dev/register"&gt;Sign up and get started!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Performance Measurement</title>
      <author>Samanvi Thota</author>
      <pubDate>Thu, 06 May 2021 17:52:56 +0000</pubDate>
      <link>https://dev.to/221910304050/performance-measurement-4e53</link>
      <guid>https://dev.to/221910304050/performance-measurement-4e53</guid>
      <description>&lt;p&gt;&lt;strong&gt;Performance Measurement:&lt;/strong&gt; It is based on space and time requirements of a particular algorithm. These quantities depend on the compiler and options used, and the system on which the algorithm runs. The space and time needed for compilation are important during program testing. To obtain the run time of a program, we need a clocking procedure. We assume the existence of a program GetTime() that returns the current time in milliseconds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suppose if we want to measure the worst-case performance of the sequential search algorithm&lt;br&gt;
we need to follow these:&lt;br&gt;
1.decide on the values of n for which the times are to be obtained &lt;br&gt;
2.determine for each of the above values of the data that exhibit the worst-case behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Algorithm:&lt;/strong&gt;&lt;br&gt;
SeqSearch(a,x,n)&lt;br&gt;
//search for x in a[1:n]. a[0] is used as additional space.&lt;br&gt;
{&lt;br&gt;
   i:=n; a[0] :=x;&lt;br&gt;
   while (a[i]=!x) do i := i-1;&lt;br&gt;
   return i;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=I-vw0aIZ4FI"&gt;click here, for more detailed explanation with example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>coding</category>
    </item>
    <item>
      <title>Bootcamp! My experience - Part 1 (Intro)</title>
      <author>Cal Costanza</author>
      <pubDate>Thu, 06 May 2021 17:37:51 +0000</pubDate>
      <link>https://dev.to/calcostanza/bootcamp-my-experience-part-1-intro-52pl</link>
      <guid>https://dev.to/calcostanza/bootcamp-my-experience-part-1-intro-52pl</guid>
      <description>&lt;p&gt;First of all, let’s start with a little bit about me.&lt;br&gt;
I'm Cal (Calogero), I'm a 34-year-old passionate about tech, solving problems and love learning new stuff. For the past 9 years, I have worked for a major travel company and decided in 2020 that it was time to do something I've always been curious about, coding.&lt;/p&gt;

&lt;p&gt;Prior to that I had no knowledge about software development, no seriously… I had no clue. I didn’t even know where to start. I had done a little bit of html about 13 years ago but that’s it. I also didn’t know that many people who had a developer job which could have helped me to get on the right path faster. However, we all know someone that has the answers to everything (well, almost everything). That’s right, Google. &lt;br&gt;
I started my research about software developer roles and I was faced with hundreds of different programming languages and tools that developers use on a daily basis. &lt;br&gt;
The confusion level had increased so much that I started looking for apps and courses I could use to figure out if I even liked it. &lt;/p&gt;

&lt;p&gt;At that point, I had downloaded Mimo and Codecademy and started my coding journey. Most of these apps seem to start with HTML and CSS. Which was great! I love being creative and I love visuals, let’s do this! I quickly fell in love with the fact that I was able to create something with simple code. Weeks after, I knew that this is what I wanted to do for a living. Every time I opened my apps I was so happy to learn something new. I knew I couldn’t do this while working full-time. I wanted to be fully committed into learning how to code. I then decided to leave my job in the middle of a pandemic. &lt;br&gt;
Crazy, right? Yes, crazy about coding. &lt;br&gt;
At this point I wanted to do a real course, something where I could interact with people, ask questions, share ideas and be part of a team. I continued researching and I was soon faced with another obstacle… Which course do I choose? &lt;br&gt;
I spent so many hours doing research and found so many negative reviews I didn’t feel like I wanted to make a choice. I started wondering, which one is genuine? Do they just want my money? Will they forget about me once I have paid them? &lt;br&gt;
I then decided to speak to a careers coach. The person I spoke to knew someone that had previously worked as a careers coach at one of these bootcamps (“I always say everything happens for a reason”). She immediately got in touch with them and a few days later I received an email of them telling me about 2 bootcamps she knew had good reputation. One of which I had heard of before and found some not so positive reviews of and the other one was &lt;a href="https://northcoders.com/"&gt;Northcoders&lt;/a&gt;. How could I have not seen these guys before? First thing… let’s find some reviews! Wow! Every review I found was talking about how supportive they were, lots of praise to the tutors and the overall positive feel of the bootcamp.&lt;br&gt;&lt;br&gt;
On the same day I got in touch and was told I had to learn javascript (which is a programming language) and pass an entry challenge in order to get into the bootcamp. &lt;br&gt;
Let the learning continue! After 2 weeks of non stop freecodecamp I was able to write some basic code and resolve some katas (katas are challenges where you write code to resolve a problem or get to the expected result). I never had so much fun! I was loving it!&lt;br&gt;
I then started joining their weekly sessions where one could bring some more challenging katas and a tutor would coach you to get to the answer yourself or with the help of other people who also wanted to join the bootcamp. This was possibly the bit where I was able to learn the most before doing my entry challenge. The tutors took their time to explain and go through how and why but not without you getting to the solution first. I loved how passionate everyone was and the high level of support that was available at this stage. &lt;br&gt;
4 weeks later it was time to do the entry challenge. It was 1 hour long and I had to resolve 7 challenges. I was very nervous! I really didn’t want to mess up. I didn’t! &lt;br&gt;
I was offered a spot in the march cohort and now I’m 8 weeks through the bootcamp! &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>bootcamp</category>
      <category>selftaught</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I want to be an "expert"....</title>
      <author>Ernesto Cabañas</author>
      <pubDate>Thu, 06 May 2021 17:32:58 +0000</pubDate>
      <link>https://dev.to/ernestoca/i-want-to-be-an-expert-4goc</link>
      <guid>https://dev.to/ernestoca/i-want-to-be-an-expert-4goc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kER6H0x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwvlihgqowm47n7kvnhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kER6H0x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwvlihgqowm47n7kvnhs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi everyone! the purpose of this post is because I have a question about kotlin and java, recently I had a interview about  deep tech in java and kotlin, as threads, co-routines and almost how java and kotlin works, so, please, someone can recomend me a book, online course or posts or all of that to be a "expert" in those programing languajes in android?, I really love to do apps but if I just know the superficial concepts to do good apps I never know about how to handle deep problems in memory, garbage, threads, synchronized, etc. &lt;/p&gt;

&lt;p&gt;I hope someone can recomend me something.&lt;br&gt;
Thanks!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>java</category>
      <category>android</category>
    </item>
    <item>
      <title>Video Game Studio Instability, Basecamp’s Mass Resignations, Apple’s Monopoly &amp; more on DevNews!</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 06 May 2021 17:24:59 +0000</pubDate>
      <link>https://dev.to/devteam/video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-more-on-devnews-28b</link>
      <guid>https://dev.to/devteam/video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-more-on-devnews-28b</guid>
      <description>&lt;p&gt;There’s a lot of fascinating developer news this week! &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I are here to break it down 👇&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E4 - Video Game Studio Instability, Basecamp’s Mass Resignations, Apple’s Monopoly, and Donald Trump’s Facebook&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e4-video-game-studio-instability-basecamp-s-mass-resignations-apple-s-monopoly-and-donald-trump-s-facebook"&gt;
      &lt;img id="episode-profile-image" alt="S4:E4 - Video Game Studio Instability, Basecamp’s Mass Resignations, Apple’s Monopoly, and Donald Trump’s Facebook" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#in-this-episode-youll-hear-about"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In this episode, you’ll hear about...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Facebook Oversight Board’s decisions about the (formerly) indefinite ban on Donald Trump’s account&lt;/li&gt;
&lt;li&gt;The European Union ruling that Apple has an unfair advantage when it comes to the distribution of music streaming apps&lt;/li&gt;
&lt;li&gt;The departure of many Basecamp employees following problematic statements made by the company’s co-founders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also chatted with &lt;a href="https://twitter.com/jasonschreier"&gt;Jason Schreier&lt;/a&gt;, reporter at Bloomberg and the author of “Blood, Sweat, and Pixels” and now “Press Reset: Ruin and Recovery in the Video Game Industry” — coming out next week! Our conversation centered around video game studio instability (something we definitely enjoy talking about frequently on the show). &lt;/p&gt;

&lt;p&gt;Thanks for listening!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e4-video-game-studio-instability-basecamps-mass/id1525581923?i=1000520445546"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/7EKjc9nJPi0sCnA1Nj6adI"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzI4?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjw9q3iyLXwAhUAAAAAHQAAAAAQAg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e4-video-game-studio-instability-basecamps-mass-resignations-apples-monopoly-and-donald-trumps-facebook-83751060"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=162857332"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devnews/episodes/160"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" alt="Microphone"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Top 10 YouTube Shorts Video Ideas in 2021</title>
      <author>Aman Chourasia</author>
      <pubDate>Thu, 06 May 2021 16:44:27 +0000</pubDate>
      <link>https://dev.to/amanchourasia/top-10-youtube-shorts-video-ideas-in-2021-2bi8</link>
      <guid>https://dev.to/amanchourasia/top-10-youtube-shorts-video-ideas-in-2021-2bi8</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 10 YouTube Shorts Video Ideas in 2021&lt;/strong&gt; – If you are following the news then you know that in some countries like the USA, India, YouTube has launched an option on the YouTube app where people can upload short videos.&lt;/p&gt;

&lt;p&gt;If you are not in India or the USA then you can still upload a short video up to 60 seconds but make sure to use the hashtag short of your YouTube video title or description to help the YouTube system and recommend your shorts videos across YouTube.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-10-youtube-shorts-video-ideas-in-2021"&gt;
  &lt;/a&gt;
  Top 10 YouTube Shorts Video Ideas in 2021
&lt;/h1&gt;

&lt;p&gt;Those of you who are not sure about where to start from and what types of video would you make the not to worry, today in this article I am going to share with you, Ten YouTube Shorts videos ideas. Excited? Let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-quick-hacks"&gt;
  &lt;/a&gt;
  1. Quick Hacks
&lt;/h2&gt;

&lt;p&gt;We all servitude of time no matter what we do we can not stop time. We are in a busy world where we all like to do things as faster as could possible if can share interesting hacks that can be related to any topics that you are interested in or it can be trending topic that’s going on around the world and show same of tricks that viewers can follow which will save their time.&lt;/p&gt;

&lt;p&gt;This could also be sharing a piece of knowledge but more on the tutorial way instead of just speaking from of the camera.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-myth-busting"&gt;
  &lt;/a&gt;
  2. Myth Busting
&lt;/h2&gt;

&lt;p&gt;This is where you take a commonly held belief about your niche or your industry and you bust it an excellent example of, this would be if you’re doing something in more of the lifestyle or the organization's niches there are a lot of life hacks where they show hey if you do this, little cheap little thing it will make your life so much easier.&lt;/p&gt;

&lt;p&gt;If you could test those things and myth bust does this work does this not work within a 60 second short, people would eat that up next one amazing fact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-amazing-facts"&gt;
  &lt;/a&gt;
  3. Amazing Facts
&lt;/h2&gt;

&lt;p&gt;The whole idea of ridleys believe it or not is built on this idea or the Guinness world records, you can use an example here of did you know that if you apply this certain leather conditioner to the seats in your car then they will actually last twice as long and show, make sure give some proof before and after.&lt;/p&gt;

&lt;p&gt;Not only that you can make any different types of facts videos, that you are interested in, do research on the internet, read books on that topic and tell those facts in shirt single video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-story-time"&gt;
  &lt;/a&gt;
  4. Story Time
&lt;/h2&gt;

&lt;p&gt;This one I’m a little bit curious about because I haven’t seen this done so much but my thought here is this could be very good and that is storytime if you were to take 60 seconds and tell a compelling story it could actually even be an emotional story or an outrageous story or a humorous story, but if you took 60 seconds to say.&lt;/p&gt;

&lt;p&gt;Hey this happened to focus on only the key points and say this happened then this happened, then this is how I got out, this is where I am today or this is how they got out and this is where they, even you can read a storybook and tell the key points of that story or share what you have learned from reading that book or doing a particular thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-pure-entertainment"&gt;
  &lt;/a&gt;
  5. Pure Entertainment
&lt;/h2&gt;

&lt;p&gt;When I say pure entertainment, I mean creating videos that have only entertainment purposes, for example, you can make videos on what happened when your dog sow snow, or it playing outside taking videos for the only entertainment part and upload on YouTube shorts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-micro-reviews"&gt;
  &lt;/a&gt;
  6. Micro Reviews
&lt;/h2&gt;

&lt;p&gt;You have seen a lot of long YouTube reviews videos that’s can be any sort of products, foods, and other things. The micro review will be the short review of something that you have been using or you have bought something new. For example, if you want a restaurant now in 15 seconds you can explain the key difference or best thing about the previous restaurant you have wanted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-experiments"&gt;
  &lt;/a&gt;
  7. Experiments
&lt;/h2&gt;

&lt;p&gt;This one would do very well if for example you had a baking channel and you wanted to do experiments things that you make for example, what happens when I add a cup of baking soda to this cake recipe and you show here’s the experiment here’s the results.&lt;/p&gt;

&lt;p&gt;This would be so good if you were able to pull in ideas like that for whatever your subject is and look at it and ask yourself the question what would happen if I do this, or if I try this, and overall this will be interesting as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-comparing"&gt;
  &lt;/a&gt;
  8. Comparing
&lt;/h2&gt;

&lt;p&gt;If you are bought something new or if you want to compare your favorite football players vs your friends' favorite football player then you can simply do that just by adding some text animation, also if you are playing games with your family, friends then you can compare which is better at gaming and make short entertainment types of videos. &lt;/p&gt;

&lt;p&gt;You can apply this comparison in many different subjects depending on how you make the video. Hope you understood everything till now in this article “ Top 10 YouTube Shorts Video Ideas in 2021“.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-recycled-content"&gt;
  &lt;/a&gt;
  9. Recycled Content
&lt;/h2&gt;

&lt;p&gt;If you have already YouTube channel, where you have lost videos, now you can take the best part of those videos or just take the most interesting part from a single video and re-edit and upload it on YouTube. &lt;/p&gt;

&lt;p&gt;Please note do not copy other videos, if you are copying other videos then you are breaking YouTube policy, godliness, only use this trick on your own video and only when you don’t have any videos making ideas try not to use your own videos as well, lastly, remember to re-edit don’t just copy and paste the best of from your video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-whats-inside-the-video"&gt;
  &lt;/a&gt;
  10. What’s inside the video
&lt;/h2&gt;

&lt;p&gt;If you are following YouTube for a long time then you have might be seen a lot of people creating what’s inside videos, for example, what’s inside expensive football, what’s inside this build, what’s inside my tech backpack, what’s inside my school backpack and other interesting videos that answer the question what is inside of something.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Hope this article “ Top 10 YouTube Shorts Video Ideas in 2021” was helpful for you and give you some ideas for making YouTube short videos. &lt;/p&gt;

&lt;p&gt;If you have any other making any different unique types of video or if you have any other YouTube shorts videos making suggestions, please don’t forget to share with us in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html"&gt;Top 10 YouTube Shorts Video Ideas in 2021&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;a href="https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html"&gt;https://www.amanchourasia.in/2021/04/top-10-youtube-shorts-video-ideas-in-2021.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ideas</category>
      <category>youtube</category>
      <category>shorts</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Next.js, integrate React Context only in certain pages</title>
      <author>enoch ndika</author>
      <pubDate>Thu, 06 May 2021 16:43:31 +0000</pubDate>
      <link>https://dev.to/enochndika/next-js-integrate-react-context-only-in-certain-pages-2igc</link>
      <guid>https://dev.to/enochndika/next-js-integrate-react-context-only-in-certain-pages-2igc</guid>
      <description>&lt;p&gt;Next.js is one of the most popular and widely used React frameworks.&lt;/p&gt;

&lt;p&gt;Using the Context API in Next.js is very simple but there are specific cases where you may need to wrap only certain pages by the provider.&lt;/p&gt;

&lt;p&gt;To do this, create a new next project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to create a context that will increment and decrement a number.&lt;/p&gt;

&lt;p&gt;Create a new folder &lt;code&gt;components&lt;/code&gt; and inside create a new file named &lt;code&gt;context.js&lt;/code&gt; then paste this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CountProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the custom hook &lt;code&gt;useCount()&lt;/code&gt; will allow us to use the values passed to the context provider.&lt;/p&gt;

&lt;p&gt;In the _app.js file, add this new component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Noop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in &lt;code&gt;MyApp&lt;/code&gt; component which is exported by default, we will add a prop named &lt;code&gt;provider&lt;/code&gt; which will be accessible in all pages and its value will be &lt;code&gt;&amp;lt;Noop/&amp;gt;&lt;/code&gt;if no context provider is passed as a value.&lt;/p&gt;

&lt;p&gt;Now the _app.js file will be like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Noop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ContextProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;Noop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ContextProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ContextProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will consume the provider in the home page like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CountProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try it in the browser, you won't be able to increment or decrement a number because we don't have the provider as a prop in the page.&lt;/p&gt;

&lt;p&gt;To make it work, add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CountProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After reloading the page, you can increment and decrement the number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/enochndika/next-with-context-on-certain-pages"&gt;Source code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Answer this hardware hacking question to be featured on our podcast 👀 </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 06 May 2021 16:37:48 +0000</pubDate>
      <link>https://dev.to/devteam/answer-this-hardware-hacking-question-to-be-featured-on-our-podcast-1e78</link>
      <guid>https://dev.to/devteam/answer-this-hardware-hacking-question-to-be-featured-on-our-podcast-1e78</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the actual voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-coolest-hardware-hacking-project-youve-seen-or-done"&gt;
  &lt;/a&gt;
  &lt;strong&gt;“What is the coolest hardware hacking project you've seen — or done?”&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, May 12th at Midnight, ET (9 PM PT, 4 AM UTC)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Multiple onClick Events in React (With Examples)</title>
      <author>Dimer BWimBA</author>
      <pubDate>Thu, 06 May 2021 16:28:28 +0000</pubDate>
      <link>https://dev.to/dimer191996/multiple-onclick-events-in-react-with-examples-3lfc</link>
      <guid>https://dev.to/dimer191996/multiple-onclick-events-in-react-with-examples-3lfc</guid>
      <description>&lt;p&gt;&lt;strong&gt;There are several ways to call muliple onClick events in React, each with its own pros and cons. Let’s explore each one and learn how they work in React!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.Call a Function onClick in React&lt;br&gt;
2.Call Multiple Functions onClick in React&lt;br&gt;
3.Write Logic Inside of onClick Event Handler in React&lt;/p&gt;

&lt;p&gt;Calling multiple functions after clicking a button is a very common thing for a React developer to want to perform.&lt;/p&gt;

&lt;p&gt;As a result, React provides the onClick event handler to attach to a UI element to detect when it is clicked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Call a separate, single function and include all of your actions inside of that function (Best option).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use an inline function inside of the onClick event handler and call multiple functions onClick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write your logic inside of an inline function that’s inside of the onClick event handler (Worst option).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first way to perform multiple onClick events in React is to write your logic in a single function, and then call that function inside of the onClick event handler.&lt;/p&gt;

&lt;p&gt;The second way to is to call multiple functions inside of the onClick event handler in React.&lt;/p&gt;

&lt;p&gt;The third and frankly, worst option, is to write your logic inside of an inline function that’s inside of the onClick event handler. I do not recommend you use this option. I’m only including here so that you know every way to make multiple actions inside of an onClick event handler.&lt;/p&gt;

&lt;p&gt;Each solution has its own pros and cons. Let’s take a look at code samples for all three, and the reasons why you’d want to perform each one over the other.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#call-a-function-onclick-in-react"&gt;
  &lt;/a&gt;
  Call a Function onClick in React
&lt;/h1&gt;

&lt;p&gt;✔ Good&lt;/p&gt;

&lt;p&gt;The first solution to perform multiple onClick events in React is to include all of your actions inside of a function and then call that single function from the onClick event handler.&lt;/p&gt;

&lt;p&gt;Let’s explore how to do that in a React Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

function App() {

  function greeting() {
    console.log('hello!');
    waveHello();
  }

  function waveHello() {
    console.log('👋');
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button
        onClick={greeting}&amp;gt;
        I'm a button
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several reasons why you’d want to perform multiple onClick events using this method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Your code is easier to read and understand&lt;/li&gt;
&lt;li&gt;Logic code is seperate from view code&lt;/li&gt;
&lt;li&gt;The React Component’s onClick handler is not re-compiled when the Component re-renders (unlike with inline functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s extremely important to remember the second point, that logic code should be separated from view code.&lt;/p&gt;

&lt;p&gt;De-coupling view code from logic code is extremely important as there will be a time when your UI changes but your logic does not. Therefore, you won’t need to re-write your components as often if logic code is not closely coupled to view code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#call-multiple-functions-onclick-in-react"&gt;
  &lt;/a&gt;
  Call Multiple Functions onClick in React
&lt;/h1&gt;

&lt;p&gt;This isn’t the best option out of the three, but there may be situations where it is necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

function App() {

  function greeting() {
    console.log('hello!');
  }

  function waveHello() {
    console.log('👋');
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button
        onClick={() =&amp;gt; {
          greeting();
          waveHello();
        }}&amp;gt;
        I'm a button
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above may look similar to the first solution, but it’s very different. Take a look at the button onClick event handler. We use an inline function inside of the onClick to call multiple functions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-logic-inside-of-onclick-event-handler-in-react"&gt;
  &lt;/a&gt;
  Write Logic Inside of onClick Event Handler in React
&lt;/h1&gt;

&lt;p&gt;❌ Bad&lt;/p&gt;

&lt;p&gt;Your view and logic code should be de-coupled as much as possible. This promotes cleaner, modular code, and allows your View library to be switched out if necessary.&lt;/p&gt;

&lt;p&gt;I’m only showing you how to do this so you are aware that writing code like this in React is a bad idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button
        onClick={() =&amp;gt; {
          console.log('hello!');
          console.log('👋');
        }}&amp;gt;
        I'm a button
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, there you have it. Three solutions to the same problem. Don’t you just love web development?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Make Your First Open Source Contribution</title>
      <author>Ceora Ford</author>
      <pubDate>Thu, 06 May 2021 16:25:37 +0000</pubDate>
      <link>https://dev.to/codesandboxio/how-to-make-your-first-open-source-contribution-2oim</link>
      <guid>https://dev.to/codesandboxio/how-to-make-your-first-open-source-contribution-2oim</guid>
      <description>&lt;p&gt;Open source software is a huge part of the tech industry. Over and over, we hear about the power of open source. In &lt;a href="https://codesandbox.io/podcasts/codesandbox-podcast/elizabet-oliveira"&gt;episode 2 of The CodeSandbox Podcast&lt;/a&gt;, guest Elizabet Oliveira discussed open source and how it has impacted her career. This article will focus on getting you up and running as an open source contributor. Let's start by discussing why you should be interested in getting involved with open source. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-start-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Why you should start contributing to open source projects
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I think, yes [open source has helped me in my career], because I think it's easier to have interviews... And also I ended up talking in react conf in Las Vegas. And after that, I started talking in other conferences. And so I think it opened a lot of doors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We don't have an infinite amount of time and I'm sure there are tons of things on your to-do list. So you might be wondering why you should even be thinking about contributing to open source software. Is it really worth the time and effort?&lt;/p&gt;

&lt;p&gt;There are many benefits of contributing to open source projects. Assess your career and development goals and you might be able to accomplish them by contributing to open source software. Here's a brief and non-exhaustive list of some of the benefits of getting involved with open source:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarize yourself with Git&lt;/li&gt;
&lt;li&gt;Gain experience&lt;/li&gt;
&lt;li&gt;Get attention from employers and recruiters&lt;/li&gt;
&lt;li&gt;Connect with other developers in the community&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-git-and-github-basics"&gt;
  &lt;/a&gt;
  Learn Git and GitHub Basics
&lt;/h2&gt;

&lt;p&gt;Before you can go scouting for an open source project to work on, you should know the basics of Git and GitHub. You don't need to be an expert. But there are a few commands you should definitely know and understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git checkout -b&lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit -m&lt;/li&gt;
&lt;li&gt;git merge&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article won't discuss what these commands do or how they work. This is a checklist for you to measure your understanding. If you are unfamiliar with any of these Git commands, check out this helpful &lt;a href="https://www.git-tower.com/blog/git-cheat-sheet/"&gt;Git cheat sheet&lt;/a&gt;. To make sure you understand when and how to use each command, I suggest you create your own project locally using Git and push your project to GitHub. This will help you to become familiar with how Git and GitHub work together. Once you feel comfortable, you can move on to the next step. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-a-project-you-feel-comfortable-working-on"&gt;
  &lt;/a&gt;
  Find a project you feel comfortable working on
&lt;/h2&gt;

&lt;p&gt;This step may seem intimidating at first. Sometimes, you see a project that can seem complex or beyond your skill level. Some projects on GitHub are very robust and extensive. Not to mention the sheer number of open source projects on GitHub. How can you find something to work on that interests you and fits your skill level?&lt;/p&gt;

&lt;p&gt;There are a few ways to do this. You might have already found an open source product or project that you're interested in. If this is the case check for Issues with the &lt;strong&gt;good first issue&lt;/strong&gt; or &lt;strong&gt;first timers only&lt;/strong&gt; tag. These have been specifically marked for beginners or those with little open source experience. If you don't already have a project in mind, check &lt;a href="https://www.firsttimersonly.com/"&gt;First Timers Only&lt;/a&gt; and the &lt;a href="https://github.com/MunGell/awesome-for-beginners"&gt;Awesome for Beginners&lt;/a&gt; repository for more options. You can also ask other developers that you know or people in the community for suggestions.&lt;/p&gt;

&lt;p&gt;Once you find a project, there's still more you need to do to make meaningful contributions to a project. You'll need to know how to communicate when getting involved with a project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-guidelines"&gt;
  &lt;/a&gt;
  Communication guidelines
&lt;/h2&gt;

&lt;p&gt;First and foremost, make sure that you're being polite and kind when talking to anyone involved with the project. This rule goes for all online communication. It's important to remember that maintainers are busy people and may have multiple responsibilities to tackle at one time. So be patient with them and always communicate respectfully.  &lt;/p&gt;

&lt;p&gt;Most projects will have communication guidelines specifically outlined for the project. These can usually the &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file. Make sure to read through the whole document and when the time comes to actually contribute your code to the project, be sure that you're following the structure and guidelines that maintainers have specified.&lt;/p&gt;

&lt;p&gt;Aside from reading and following the [CONTRIBUTING.md] guidelines, here are some general rules that you should try to adhere to when opening up issues, submitting pull requests (both of which will be covered soon), and any other communication between you and others involved in the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you open an issue, be sure to thoroughly describe the bug or problem you've run into. Include information that will help maintainers or others to reproduce the bug locally on their end.&lt;/li&gt;
&lt;li&gt;It's also good to provide a possible solution if you have one in mind. This streamlines communication and will help maintainers to quickly determine whether or not your possible contribution fits the direction of the project.&lt;/li&gt;
&lt;li&gt;Try including comments in your code. Other people working on the project likely aren't familiar with your coding style or how you think. Including explanatory comments in your code will make your logic clear and thus, others will be able to quickly understand how your code works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have chosen the project you would like to work with and you've read the &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; and/or &lt;code&gt;README.md&lt;/code&gt; thoroughly, you're ready to actually contribute your code to the project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-your-first-project"&gt;
  &lt;/a&gt;
  Contribute to Your First Project
&lt;/h2&gt;

&lt;p&gt;With your open source project already chosen, there are a few ways you can decide on what you would like to add to the project. You can work on pre-existing issues which can be found under the "Issues" tab on GitHub. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0qU5c68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8359uc3r4iif2317hng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0qU5c68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8359uc3r4iif2317hng.png" alt="Issues tab on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When going through existing issues, you can look for things marked with the &lt;strong&gt;good first issue&lt;/strong&gt; or &lt;strong&gt;first timers only&lt;/strong&gt; tag (as previously mentioned). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekABniNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heks8ogy4b9cj3dwgbla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekABniNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heks8ogy4b9cj3dwgbla.png" alt="Good First Issue tag on an issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find an issue that you're interested in, it may be useful to leave a comment on the issue outlining the solution you would like to implement. &lt;/p&gt;

&lt;p&gt;You can also create an issue based on a bug you've noticed or a feature you think needs to be improved. Do this by clicking the "New Issue" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAMhAQgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su1ptzg7h8anorakztgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAMhAQgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su1ptzg7h8anorakztgc.png" alt="New Issue button on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you decide to open a new issue, be sure to provide relevant information that will allow maintainers to understand the bug you've run into and/or the feature you would like to add or improve and why. Remember the communication tips that were mentioned earlier. &lt;/p&gt;

&lt;p&gt;You can skip creating an issue and just submit a pull request. This will cut out some communication that goes with creating and submitting an issue. This means you can get right to work. But keep in mind that the project maintainer may decide to decline your pull request. So the work you've done may not be used in the end. If this is the route you'd like to go, you can move on to the following steps which will cover the process of submitting a pull request.&lt;/p&gt;

&lt;p&gt;Of all the options, I recommend working on a pre-existing issue. Make sure that no matter what route you decide to take, follow the guidelines set out by maintainers in the &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-fork-your-project-of-choice"&gt;
  &lt;/a&gt;
  1. Fork your project of choice
&lt;/h3&gt;

&lt;p&gt;On GitHub, fork the repository you've chosen to work with. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z9wKdcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sifejoxn8iqf557k5998.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z9wKdcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sifejoxn8iqf557k5998.png" alt="Forking a repository on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a copy of the project that will be saved under your GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykEnLVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohjjhypi737x9d5dofe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykEnLVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohjjhypi737x9d5dofe.png" alt="Copy of forked repository on your GitHub account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-clone-your-fork"&gt;
  &lt;/a&gt;
  2. Clone your fork
&lt;/h3&gt;

&lt;p&gt;To clone the fork you've created, click the "Code" button and copy the URL that's provided.&lt;/p&gt;

&lt;p&gt;In your terminal, change into the directory that you want to hold your forked project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now clone your forked repository using git clone and the URL you just copied&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change into the folder that was just created. This will likely match the name of the project you forked. So if we're using the Sandpack repo as an example, that would be [sandpack]:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-a-branch-locally"&gt;
  &lt;/a&gt;
  3. Create a branch locally
&lt;/h3&gt;

&lt;p&gt;Before you start working, create a separate branch that will hold all the code that you add or edit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-make-your-changes"&gt;
  &lt;/a&gt;
  4. Make your changes
&lt;/h3&gt;

&lt;p&gt;Now you can finally code! You may also be editing copy, fixing grammatical errors, or improving documentation. Whatever changes you're looking to make, you can finally do it at this step!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-commit-and-push-your-changes"&gt;
  &lt;/a&gt;
  5. Commit and push your changes
&lt;/h3&gt;

&lt;p&gt;Before you commit and push your changes, make sure to run and test your code. Once your sure that your code is functioning as desired, you can commit and push your changes to GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'commit message here'&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin &lt;span class="nb"&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-create-a-pull-request"&gt;
  &lt;/a&gt;
  6. Create a pull request
&lt;/h3&gt;

&lt;p&gt;Go to the original project on GitHub and you should see a prompt encouraging you to open a new pull request from the branch you created. Click the "Compare and pull request" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0y9CXSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4tnxgdu5uthhe1otcpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0y9CXSk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4tnxgdu5uthhe1otcpg.png" alt="Compare and pull request button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you do this you will be shown a text editor. Fill this in with all the relevant information needed to understand the work you've just done. When you do this, click the "Create pull request" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jR67ycOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/768u0gie4xjvgi8csgkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jR67ycOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/768u0gie4xjvgi8csgkd.png" alt="Text editor and Create pull request button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create your pull request, you'll have to wait on maintainers to respond. If the work you've done is error free and fits the scope and direction of the project, maintainers might merge your work into the project. They may request that you make changes to the work you've done. They might also decide to reject your pull request. If this happens, don't be discouraged. Maintainers will probably have a good reason for doing this and it's likely that will let you know. You can decide to work on another issue in the same project or you can find a new project to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Open source can seem intimidating. But once you dive into it, you'll see how rewarding it can be and you'll quickly reap the benefits. Here's a quick summary of the steps you need to take when you contribute to open source: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Thoroughly read through the &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fork the project repository&lt;/li&gt;
&lt;li&gt;Clone the project locally&lt;/li&gt;
&lt;li&gt;Create a feature branch for your work&lt;/li&gt;
&lt;li&gt;Once you finish make changes, commit and push your work&lt;/li&gt;
&lt;li&gt;Open a PR&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you've done this, you'll officially become an open source contributor! If you'd like to prepare yourself more before getting started or if you want to learn more about open source, here are some resources I found very useful. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/how-to-contribute/"&gt;Open Source Guide - How to Contribute to Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.katherinempeterson.com/how-to-contribute-to-your-first-open-source-project"&gt;How to Contribute to Your First Open Source Project by Katherine Peterson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/open-source-etiquette-guidebook/"&gt;An Open Source Etiquette Guidebook by Sarah Drasner and Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/devteam/hacktoberfest-etiquette-for-contributors-ec6"&gt;Hacktoberfest Etiquette for Contributors by Christina Gorton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>coding</category>
    </item>
    <item>
      <title>Monkey CSS</title>
      <author>Julien Maury</author>
      <pubDate>Thu, 06 May 2021 16:17:59 +0000</pubDate>
      <link>https://dev.to/jmau111/monkey-css-3n6h</link>
      <guid>https://dev.to/jmau111/monkey-css-3n6h</guid>
      <description>&lt;p&gt;Sometimes CSS seems to act crazy while it's not. Let's see why with practical examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zindex-and-the-devil"&gt;
  &lt;/a&gt;
  z-index and the devil
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt; allows setting how some elements pile up on the page. Not all elements are concerned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only positioned elements can have a &lt;code&gt;z-index&lt;/code&gt; (for example, relative, absolute, fixed)&lt;/li&gt;
&lt;li&gt;an element with &lt;code&gt;z-index: 1&lt;/code&gt; is theoretically below an element with &lt;code&gt;z-index: 2;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In those conditions, the following rule should "ensure" the element in the first plan:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.myelement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it's a typical case where it might not work, and here is why: the z-index value does not determine what's on top.&lt;/p&gt;

&lt;p&gt;Let's rewind:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;an element with &lt;code&gt;z-index: 1&lt;/code&gt; is theoretically below an element with &lt;code&gt;z-index: 2;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not all the time. When you use very simple layouts that do not trigger &lt;strong&gt;offscreen rendering&lt;/strong&gt;, the stacking order is pretty much the same as the order of appearance of the HTML elements.&lt;/p&gt;

&lt;p&gt;When you have more complex layouts that involve CSS positions, z-index values, CSS transforms, or elements with an opacity value under 1, additional rules apply.&lt;/p&gt;

&lt;p&gt;Each context will have those rules, and it take precedence over any super high z-index value you might add. It's called a &lt;strong&gt;stacking context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I did not realize how complex it can be before writing this post, and I doubt there is an ultimate solution.&lt;/p&gt;

&lt;p&gt;I would say you don't have to use &lt;code&gt;z-index&lt;/code&gt;, but if for some reason you need to, be aware of the stacking context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hell-of-undoing"&gt;
  &lt;/a&gt;
  The hell of undoing
&lt;/h2&gt;

&lt;p&gt;It's something I've seen (and used a lot at the beginning). The "tricks" consists of defining classes that cancel other CSS rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.no-text-decoration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.no-padding&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach is not efficient. Even the gain for refactor is questionable, as you have to add meaningless HTML classes multiple times.&lt;/p&gt;

&lt;p&gt;IMHO, it's better to use specific classes for specific elements and apply rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hell-of-margins"&gt;
  &lt;/a&gt;
  The hell of margins
&lt;/h2&gt;

&lt;p&gt;Margins and paddings are essential for any style. Roughly speaking, margins set external spaces (~ space around), and paddings are for internal white spaces.&lt;/p&gt;

&lt;p&gt;It's pretty straighforward, but it's not that easy. Be aware of the &lt;strong&gt;margin collapsing&lt;/strong&gt; that happens vertically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The margins won't work as you might expect. Between two adjacent paragraphs, you won't get 30px but 15px.&lt;/p&gt;

&lt;p&gt;To get 30px, you would have to use the following rule instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's because the bigger margin wins when margins collapse vertically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"&gt;Source: MDN - margin collapsing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hell-of-prefixes"&gt;
  &lt;/a&gt;
  The hell of prefixes
&lt;/h2&gt;

&lt;p&gt;If you need larger support than modern browsers but still want to use fancy effects and properties, there's a good chance you will spend your life on &lt;a href="https://caniuse.com"&gt;caniuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you don't have that time, &lt;a href="https://github.com/postcss/autoprefixer"&gt;autoprefixer&lt;/a&gt; is your friend.&lt;/p&gt;

&lt;p&gt;Be careful. It won't automatically polyfill all cases. The idea is to add prefixes.&lt;/p&gt;

&lt;p&gt;The principle is simple, but don't forget to add unprefixed property. For example, the tool won't work if you only write that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.myelement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;-webkit-animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spinMeRound&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you add the unprefixed property instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.myelement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spinMeRound&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-hell-of-css-units"&gt;
  &lt;/a&gt;
  The hell of CSS units
&lt;/h2&gt;

&lt;p&gt;You have many ways to measure elements and assign values in CSS. For example, there are &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Which one should you use?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-magical-answer"&gt;
  &lt;/a&gt;
  The magical answer
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It depends&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🎉 Thanks buddy, very helpful ^^.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  The good practice
&lt;/h3&gt;

&lt;p&gt;Not all CSS units are equivalents. Some of them are relative, some of them are absolute.&lt;/p&gt;

&lt;p&gt;In this responsive era, relative units are more appropriate. Absolute units can be used for areas that don't need responsive such as print or desktop applications.&lt;/p&gt;

&lt;p&gt;With relative units, elements resize according to the device. I prefer using &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; as a general rule, but asserting there are the ultimate units would be silly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hell-of-inconsistencies"&gt;
  &lt;/a&gt;
  The hell of inconsistencies
&lt;/h2&gt;

&lt;p&gt;Even if browsers are now much more standardized than before (it was chaos back then ^^), there are still some inconsistencies.&lt;/p&gt;

&lt;p&gt;Every browser has its default styles for HTML elements. &lt;/p&gt;

&lt;p&gt;It can be tedious to handle that manually. Fortunately, you can use a &lt;a href="https://dev.to/hankchizljaw/a-modern-css-reset-6p3"&gt;CSS reset&lt;/a&gt;. As the name suggests, it resets styles, stopping annoying differences in padding and margin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#respect-the-normal-flow"&gt;
  &lt;/a&gt;
  Respect the normal flow
&lt;/h2&gt;

&lt;p&gt;Of course, you sometimes need to handle floating elements, positions, and offscreen rendering.&lt;/p&gt;

&lt;p&gt;I'm not saying you should never use them or replace any occurrence, but my point is you must use them sparingly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;modern CSS with flexbox and grid probably can do the job&lt;/li&gt;
&lt;li&gt;it can have a significant impact on performances&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The classic example would be centering in CSS. If you don't need strong compatibility with ancient browsers, use grid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mycontainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems way more comfortable than absolute positions, especially if you need to handle various screen sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Is CSS hell? I don't know, &lt;a href="https://csshell.dev/"&gt;this website would say yes ^^&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS is also fun, but like any other language, there are complex parts.&lt;/p&gt;

&lt;p&gt;However, CSS is one of a kind, and it's worth learning.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@andremouton?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Andre Mouton&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/monkey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
