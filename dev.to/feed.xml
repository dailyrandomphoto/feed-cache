<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:42:54 +0000</pubDate>
      <link>https://dev.to/f79sd/7-best-tools-for-developers-they-can-t-live-without-it-j8n</link>
      <guid>https://dev.to/f79sd/7-best-tools-for-developers-they-can-t-live-without-it-j8n</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>What is Hacking? Types of Hackers | Introduction to Cybercrime</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:38:55 +0000</pubDate>
      <link>https://dev.to/f79sd/what-is-hacking-types-of-hackers-introduction-to-cybercrime-46c1</link>
      <guid>https://dev.to/f79sd/what-is-hacking-types-of-hackers-introduction-to-cybercrime-46c1</guid>
      <description>&lt;p&gt;&lt;span&gt;Hacking&lt;/span&gt; is the activity of identifying weaknesses in a computer system or a network to exploit the security to gain access to personal data or business data. An example of computer hacking can be: using a password cracking algorithm to gain access to a computer system.&lt;/p&gt;
&lt;p&gt;Computers have become mandatory to run a successful businesses. It is not enough to have isolated computers systems; they need to be networked to facilitate communication with external businesses. This exposes them to the outside world and hacking. System hacking means using computers to commit fraudulent acts such as fraud, privacy invasion, stealing corporate/personal data, etc. Cyber crimes cost many organizations millions of dollars every year. Businesses need to protect themselves against such attacks. &lt;/p&gt;

&lt;p&gt;READ More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/what-is-hacking-types-of-hackers/&amp;amp;ved=2ahUKEwjwxemH_ZjzAhV2wjgGHRsSCHUQFnoECAcQAQ&amp;amp;usg=AOvVaw3DB9EkvJieotIl99lrXj3B"&gt;What is Hacking? Types of Hackers | Introduction to Cybercrime&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Amazing Tips While Redesigning Your Website</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 02:37:29 +0000</pubDate>
      <link>https://dev.to/f79sd/7-amazing-tips-while-redesigning-your-website-1dkn</link>
      <guid>https://dev.to/f79sd/7-amazing-tips-while-redesigning-your-website-1dkn</guid>
      <description>&lt;p&gt;Redesigning a website may be a stressful, time-consuming, and complex task. It’s natural if the amount of information you need to know in order to build a new, fresh design repulses you. However, if you take the time to educate yourself and gain hands-on experience, you can avoid making mistakes and achieve your goals. Here are seven golden pointers for redesigning your website to get you started:&lt;/p&gt;
&lt;p&gt;When you consider rebuilding your website, you most likely imagine something huge and powerful. It’s the ideal opportunity to give your website a bold and dramatic new appearance. However, the world is not what you might assume. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;READ More&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwjCx8Gc_JjzAhXawzgGHeQLBh4QFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Making a Toggle Switch into a New HTML Element</title>
      <author>Timothy Foster</author>
      <pubDate>Sat, 25 Sep 2021 01:40:05 +0000</pubDate>
      <link>https://dev.to/auroratide/making-a-toggle-switch-into-a-new-html-element-425c</link>
      <guid>https://dev.to/auroratide/making-a-toggle-switch-into-a-new-html-element-425c</guid>
      <description>&lt;p&gt;Hey, let's build a light bulb!&lt;/p&gt;

&lt;p&gt;Or, at least the on/off switch part of the light bulb... The &lt;strong&gt;toggle switch&lt;/strong&gt; is a super common user interface element to indicate whether some feature is active or not.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/JjJBKrW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Switches like these are in fact so common, it would sure be nice if they were their own HTML element...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Lightbulb&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Well, through the magic of &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;web components&lt;/a&gt;&lt;/strong&gt;, it's actually possible to make this!&lt;/p&gt;

&lt;p&gt;My goal is to illustrate one way how to both &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; a web component. However, instead of going step-by-step "here's the code for making a toggle switch," we're gonna acutally (in some sense) assemble a light bulb representing the &lt;strong&gt;key aspects to building a reusable web component&lt;/strong&gt;, which apply when creating &lt;em&gt;any&lt;/em&gt; reusable element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" alt="Light bulb, with parts represented by accessibility, attributes, javascript, events, and styling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we assemble this light bulb piece by piece, we will also be making the &lt;code&gt;toggle-switch&lt;/code&gt; component we know and love!&lt;/p&gt;

&lt;p&gt;So all that said, let's build a light bulb!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#inventing-a-light-bulb"&gt;Inventing a Light Bulb&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#semantics-the-schematic"&gt;Semantics: The Schematic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility-the-cap"&gt;Accessibility: The Cap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attributes-the-contact-wires"&gt;Attributes: The Contact Wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript-the-filament"&gt;Javascript: The Filament&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#events-the-inert-gas"&gt;Events: The Inert Gas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#styling-the-globe"&gt;Styling: The Globe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#we-invented-a-light-bulb"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code"&gt;Full Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;For the code bits, I will be assuming some familiarity with the following:&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;small&gt;HTML, CSS, and Javascript (see &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web"&gt;Getting Started with the Web&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;small&gt;Using &lt;a href="https://docs.npmjs.com/about-npm"&gt;npm&lt;/a&gt; to install dependencies (see &lt;a href="https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/"&gt;Beginner's Guide to Using npm&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;small&gt;Testing code with code (see &lt;a href="https://www.freecodecamp.org/news/how-to-start-unit-testing-javascript/"&gt;How to start unit testing&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;p&gt;Here's a bit of a tl;dr showing all the big points to think about when creating web components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here are all the web component coding ideas that are touched by implementing the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component. See how we use them to build the component, or just reference the resources below!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have also created a &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; web component you can install and use on your projects or use as reference:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/toggle-switch"&gt;
        toggle-switch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inventing-a-light-bulb"&gt;
  &lt;/a&gt;
  Inventing a Light Bulb
&lt;/h2&gt;

&lt;p&gt;In each section, I will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discuss an aspect of web components, including why it is important&lt;/li&gt;
&lt;li&gt;Apply that aspect to building the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component, with code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#semantics-the-schematic"&gt;
  &lt;/a&gt;
  Semantics: The Schematic
&lt;/h3&gt;

&lt;p&gt;All good inventions start off with a drawing showing the design! Before building the web component, we need to think about &lt;em&gt;why&lt;/em&gt; we're building it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JXNUam7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp028j63tr98cizsegap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JXNUam7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp028j63tr98cizsegap.png" alt="Schematic of a light bulb, labelled with 'Semantics'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, what is a &lt;strong&gt;web component&lt;/strong&gt; anyway?&lt;/p&gt;

&lt;p&gt;To answer that question, we need to answer a different question: What is a &lt;strong&gt;block quote&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Well, it's pretty common for articles like this one to want to quote someone or something, for instance Thomas Edison:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To invent, you need a good imagination and a pile of junk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can tell it's a quote of some kind by its formatting. And thankfully, the code to make this happen is quite simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To invent, you need a good imagination and a pile of junk.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; bit is an HTML tag with special meaning. When a developer uses it, they are declaring that the following text is a &lt;q&gt;section that is quoted from another source&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;You see, to achieve the formatting of a block quote, I didn't need to use the &lt;code&gt;blockquote&lt;/code&gt; element at all. I could have used some other HTML element and forced it to look like a quote, but while that may be useful for visual readers, it would not be useful to bots or to readers relying on assistive technology to read the page out loud.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;assistive technology&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Many people have disabilities which hinder them from using a site in common ways, and so they rely on assistive technology to navigate the internet. An example of such a technology is a screen reader, which verbally reads the page so vision-impaired people can understand the content.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;In other words, that &lt;code&gt;blockquote&lt;/code&gt; tag has special meaning, called &lt;strong&gt;semantics&lt;/strong&gt;, and those semantics allow anything reading the page to understand what the contents represent. Just like block quotes, most HTML elements have special semantics associated with them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok Timothy, what do block quotes have to do with web components?&lt;/p&gt;

&lt;p&gt;So, our goal is to create a new HTML element, &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt;. Keeping in mind that most HTML elements have associated semantics, this leads us to an interesting insight:&lt;/p&gt;

&lt;p&gt;Web components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom HTML elements.&lt;/p&gt;

&lt;p&gt;This is not normally the way I see web components described. Usually, web components are thought of in developer-centric terms like reusability and encapsulation. While those are indeed great goals and outcomes, framing a web component in terms of its semantics really helps capture why we are making it and what it will do.&lt;/p&gt;

&lt;p&gt;So, when it comes to building a new component, the first step is to understand what is its &lt;strong&gt;purpose&lt;/strong&gt;, and that helps you decide what its responsibilities and scope are.&lt;/p&gt;

&lt;p&gt;For our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component, it's pretty similar to a native HTML checkbox, but with one distinction: whereas a checkbox is either checked or unchecked, our switch element is either &lt;strong&gt;on or off&lt;/strong&gt;, which is a subtly different semantic.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Also, checkboxes have a third "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/checkbox#indeterminate"&gt;indeterminate&lt;/a&gt;" value that is neither checked nor unchecked. Such a third value does not make sense for an on/off switch.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have defined the what and why of the web component, we can create a bit of scaffolding! Let's start with a skeleton component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// toggle-switch.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;elementName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elementName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;customElements.define&lt;/code&gt; global function is what actually defines a web component, and it must be supplied with both the name of the element and a class extending an &lt;code&gt;HTMLElement&lt;/code&gt;. All of our eventual functionality will go into the &lt;code&gt;ToggleSwitch&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;As for testing, we are going to rely on two libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@open-wc/testing&lt;/code&gt;: A testing library providing useful helpers for mounting our component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@web/test-runner&lt;/code&gt;: A program that will actually run our tests against a real browser
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm highlighting the "against a real browser" bit because doing so provides the highest confidence that the element as it behaves in tests will be the same as it behaves in the wild. This is opposed to using something like &lt;a href="https://github.com/jsdom/jsdom"&gt;jsdom&lt;/a&gt;, which has classically had poor support for web components.&lt;/p&gt;

&lt;p&gt;These libraries can be installed with npm:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D @open-wc/testing @web/test-runner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With that, all we need now is a skeletal test file and the ability to run said test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// toggle-switch.spec.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./toggle-switch.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;works&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running the test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wtr --node-resolve ./**/*.spec.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And with that, we are finally ready to start building out our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#accessibility-the-cap"&gt;
  &lt;/a&gt;
  Accessibility: The Cap
&lt;/h3&gt;

&lt;p&gt;The light bulb's cap is where it &lt;em&gt;accesses&lt;/em&gt; its power. Therefore, the cap represents &lt;strong&gt;accessibility&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BVdPVZ8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlqgy96lpr3y31d59jbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BVdPVZ8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlqgy96lpr3y31d59jbq.png" alt="The cap of a light bulb marked as 'Accessibility'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; is the practice of making things usable by as many people as possible, regardless of ability or disability. For example, if a blind person is relying on a screen reader to read the page out loud to them, then when they reach the toggle switch, they need to be made aware that the element is indeed a switch.&lt;/p&gt;

&lt;p&gt;It is a fairly broad topic that I cannot possibly cover in full here, but when it comes to web components, there are some key questions we can ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"&gt;role&lt;/a&gt; or set of roles does our component serve?&lt;/li&gt;
&lt;li&gt;How will readers know what this component is and how to use it?&lt;/li&gt;
&lt;li&gt;In what ways might people use this component, and do we need to do anything special to accommodate those?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/p&gt;

&lt;p&gt;Personally, I like using accessibility as a starting point so that good practices are built into the component earlier rather than later. Let's apply this concretely to the toggle switch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For coding, let's start by answering the key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What role or set of roles does our component serve?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WAI-ARIA defines a &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#switch"&gt;role called "switch"&lt;/a&gt; which actually fits our component perfectly. If we specify this role on our component, assistive technologies such as screen readers can inform their listeners that they can toggle something on and off.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;WAI-ARIA&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;&lt;a href="https://www.w3.org/WAI/standards-guidelines/aria/"&gt;WAI-ARIA&lt;/a&gt; stands for Accessible Rich Internet Applications, and it essecially provides a framework for making advanced website stuff more accessible to people with disabilities.&lt;/small&gt; 

&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How will readers know what this component is and how to use it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes special labelling is needed to properly inform people who can't see the element what it is. In our case, we can rely on the switch role to do that: when a screen reader encounters an element marked as a switch, it should announce that the element is a switch without us having to do any extra work!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In what ways might people use this component, and do we need to do anything special to accommodate those?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides clicking on the switch, some people might not have or cannot use a mouse, and hence the switch should be interactable via keyboard.&lt;/p&gt;

&lt;p&gt;Taking these two concerns together, this means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We should set the &lt;code&gt;role&lt;/code&gt; attribute to &lt;code&gt;switch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We should make the element focusable, which can be done by setting &lt;code&gt;tabindex&lt;/code&gt; (see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex"&gt;tabindex attribute&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To take care of the first item, let's first &lt;strong&gt;write a test&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accessibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This test does two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;strong&gt;fixture&lt;/strong&gt; which contains our new &lt;code&gt;toggle-switch&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;Assert whether the element's accessible role is a switch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;fixture&lt;/code&gt; function provided by &lt;code&gt;@open-wc/testing&lt;/code&gt; is rather nifty! It essentially sets up an HTML document and puts our element onto the page, allowing us to mess with and inspect it.&lt;/p&gt;

&lt;p&gt;Our test implies we should set up our element to have the "switch" role immediately. To do that, we will rely on a &lt;strong&gt;lifecycle method&lt;/strong&gt; called &lt;code&gt;connectedCallback&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;
  &lt;small&gt;What are &lt;strong&gt;lifecycle methods&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Just like how all living things are born and eventually die, elements on a web page may come and go. Lifecycle methods represent key moments for an element, such as when it gets inserted on the page, removed from the page, or updated.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback&lt;/code&gt; function is called every time an element gets inserted into the page, which is great for initialization!&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is different between &lt;strong&gt;connectedCallback&lt;/strong&gt; and the constructor?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;The constructor is called when an element is created for the first time, whereas the &lt;code&gt;connectedCallback&lt;/code&gt; is called just after the element is added to a page. One way to think of it is if the &lt;em&gt;same&lt;/em&gt; element is added to and removed from a page over and over again, the constructor is only called once, wherease &lt;code&gt;connectedCallback&lt;/code&gt; is called each time it's added back to the page.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Here's a good summary of what to do with the &lt;a href="https://stackoverflow.com/questions/59970043/custom-element-setup-constructor-vs-connectedcallback"&gt;constructor vs connectedCallback&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;For our tabbable requirement, the test and initialization is very similar. Setting &lt;code&gt;tabindex="0"&lt;/code&gt; is all that's needed to make an element tabbable, allowing keyboard users to access our switch!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, for our aria role, there's actually &lt;em&gt;a little bit more&lt;/em&gt; we need to do for our component to actually be an accessible switch. Conveniently, we'll be talking about that in the very next section...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#attributes-the-contact-wires"&gt;
  &lt;/a&gt;
  Attributes: The Contact Wires
&lt;/h3&gt;

&lt;p&gt;Next on our light bulb are the contact wires which supply power to the part that lights up. This will represent &lt;strong&gt;attributes&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olZvX0m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpxpo4u723z547xw5bkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olZvX0m8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpxpo4u723z547xw5bkz.png" alt="The contact wires of a light bulb marked as 'Attributes'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML elements have &lt;strong&gt;attributes&lt;/strong&gt; which basically tell more about the element's current state or how it should work. For example, the &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; element has an attribute called &lt;code&gt;cite&lt;/code&gt; which is a link to the source of the quote.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class="na"&gt;cite=&lt;/span&gt;&lt;span class="s"&gt;"https://html.spec.whatwg.org/#the-blockquote-element"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If the cite attribute is present, it must be a valid URL. . .&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As such, custom elements are also able to expose attributes! Their three key uses are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;State&lt;/strong&gt;: Such as an element's initial or current value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt;: Such as whether the element is disabled, has input boundaries, and so forth&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuanced Meaning&lt;/strong&gt;: Specifying more details to an element's semantic value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Regarding &lt;strong&gt;nuanced meaning&lt;/strong&gt;, a good example is the &lt;code&gt;cite&lt;/code&gt; attribute on &lt;code&gt;blockquote&lt;/code&gt;. It doesn't have a functional purpose, nor does it configure the element in any way. It just enhances the element's meaning: it's not just any quote, but a quote from a particular source.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building out the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element, there is at least one important state we want to convey with an attribute: whether the switch is on or off. Let's follow these three steps for creating that attribute:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine a &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;allowed values&lt;/strong&gt; for the attribute.&lt;/li&gt;
&lt;li&gt;Set a &lt;strong&gt;property&lt;/strong&gt; for the attribute.&lt;/li&gt;
&lt;li&gt;Determine whether a &lt;strong&gt;change&lt;/strong&gt; in the attribute triggers a change on the element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To mimic a bit how the vanilla checkbox input element works, we'll call our attribute &lt;code&gt;checked&lt;/code&gt;, and it will be a boolean attribute, meaning its presence or absence will represent true or false respectively.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- off --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- on --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;toggle-switch&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/toggle-switch&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Setting a &lt;strong&gt;property&lt;/strong&gt; for the element's class essentially declares the attribute is important. In truth, any element can have any attribute, so by creating a property we communicate that &lt;code&gt;checked&lt;/code&gt; is important for the toggle switch.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the interesting question: does a change in &lt;code&gt;checked&lt;/code&gt; require a change on the element?&lt;/p&gt;

&lt;p&gt;I can think of at least two things that should change when the &lt;code&gt;checked&lt;/code&gt; attribute is added or removed from the toggle switch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The switch should animate (but we'll get to that when we discuss &lt;a href="#styling-the-globe"&gt;styling&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;aria-checked&lt;/code&gt; attribute should reflect the &lt;code&gt;checked&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;em&gt;what&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Recall from earlier that we are relying on the &lt;a href="https://www.w3.org/TR/wai-aria-1.1/#switch"&gt;switch role&lt;/a&gt; for accessibility. That role &lt;em&gt;requires&lt;/em&gt; that an accessibility attribute called &lt;code&gt;aria-checked&lt;/code&gt; be set to either "true" or "false".&lt;/p&gt;

&lt;p&gt;So, when &lt;code&gt;checked&lt;/code&gt; is present, &lt;code&gt;aria-checked&lt;/code&gt; must be "true", and when &lt;code&gt;checked&lt;/code&gt; is absent, &lt;code&gt;aria-checked&lt;/code&gt; must be "false".&lt;/p&gt;

&lt;p&gt;Let's write a test for that!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked attribute is updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this test, we first ensure that an unchecked toggle switch starts with an &lt;code&gt;aria-checked&lt;/code&gt; of "false", indicating it is off to accessibility stuff. Then, we add the &lt;code&gt;checked&lt;/code&gt; attribute and verify that &lt;code&gt;aria-checked&lt;/code&gt; has changed to "true".&lt;/p&gt;

&lt;p&gt;Now, to actually accomplish this in code requires using a cool feature of web components: &lt;code&gt;observedAttributes&lt;/code&gt; and &lt;code&gt;attributeChangedCallback&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;observedAttributes&lt;/code&gt; is just a list of attributes that the element should react to if changed.&lt;/li&gt;
&lt;li&gt;And &lt;code&gt;attributeChangedCallback&lt;/code&gt; is the function that gets fired when any of the listed attributes change.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;observedAttributes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And finally, we will want to make sure the initial state is taken care of in &lt;code&gt;connectedCallback&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#javascript-the-filament"&gt;
  &lt;/a&gt;
  Javascript: The Filament
&lt;/h3&gt;

&lt;p&gt;And now for the part of the bulb that actually glows: the filament! As the heart of the light bulb, it's fitting for the filament to represent the heart of our component, the &lt;strong&gt;javascript API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNL3tt4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3y3dcxxswtdld7c3vh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNL3tt4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3y3dcxxswtdld7c3vh9.png" alt="The filament of a light bulb marked as 'Javascript'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is an &lt;strong&gt;API&lt;/strong&gt;?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;API stands for Application Programming Interface. If you think of a car as a program, then its API would be the steering wheel, gas pedal, and brake. You cannot directly manipulate what the engine does and can only do so through those three accessible things.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;As such, an API exposes ways to use an element without needing to know all of its messy guts.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;Although a web component could be as simple as just coloring text, custom elements are additionally useful for bundling complex functionality into a single doodad. For example, the toggle switch component must allow someone to toggle it on and off, and so a click action must be bound to do that.&lt;/p&gt;

&lt;p&gt;Perhaps that's not surprising, so what I find useful is to think of those potential actions as &lt;strong&gt;public javascript functions&lt;/strong&gt;. Another way of putting it, if a reader is able to click the component to toggle it, then there should be a &lt;code&gt;toggle()&lt;/code&gt; function available so that &lt;em&gt;other javascript code&lt;/em&gt; can simulate the reader's action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the toggle switch, when someone clicks on it, the element should go from off to on, or from on to off. As usual, we start with a test!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via clicking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are able to use the &lt;code&gt;click()&lt;/code&gt; function to simulate someone clicking the element.&lt;/p&gt;

&lt;p&gt;To make this test pass, all we have to do is listen for a "click" event and toggle the &lt;code&gt;checked&lt;/code&gt; state. We will do this in &lt;code&gt;connectedCallback&lt;/code&gt; since that's a good place to handle initialization.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Looks great, except! Remember our key point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Key element behaviours are exposed as &lt;strong&gt;Javascript functions&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means we should have a &lt;code&gt;toggle()&lt;/code&gt; method exposing this is a key way not only readers can interact with the component, but other javascript code can too.&lt;/p&gt;

&lt;p&gt;In fact, we'll make test for this as well!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via the api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This test is extremely similar to the previous test, with the primary difference this uses a public function (&lt;code&gt;toggle()&lt;/code&gt;) rather than a user action (clicking).&lt;/p&gt;

&lt;p&gt;Doing this allows two things. First, we can actually simplify the event listener from above to use our new function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But additionally, we can now &lt;strong&gt;clean up&lt;/strong&gt; the event listener with the &lt;code&gt;disconnectedCallback&lt;/code&gt; hook!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;disconnectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As a mirror to &lt;code&gt;connectedCallback&lt;/code&gt;, the &lt;code&gt;disconnectedCallback&lt;/code&gt; function is called every time the element is removed from the document. It is most useful for cleaning up listeners it may have set up elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#events-the-inert-gas"&gt;
  &lt;/a&gt;
  Events: The Inert Gas
&lt;/h3&gt;

&lt;p&gt;So it turns out there's a part of a light bulb you can't see but is nonetheless important for it to work: the inert gas! The bulb is filled with special air that extends the lifetime of the filament.&lt;/p&gt;

&lt;p&gt;Continuing our Light Bulb of Web Components, the gas is represented by the &lt;strong&gt;event API&lt;/strong&gt;, stuff happening under the surface but significant for other things to react to changes in our component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Nafk5hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onlbr7ty80d04am46kl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Nafk5hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onlbr7ty80d04am46kl0.png" alt="The empty part of a light bulb marked as 'Events'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;event&lt;/strong&gt; is essentially a tidbit of code declaring that something happened, for instance "Hey, somebody toggled me on!" By emitting an event like this, &lt;strong&gt;listeners&lt;/strong&gt; can react with some appropriate action.&lt;/p&gt;

&lt;p&gt;When building a web component, we should think about what events it should emit that other elements may need to react to. In fact, this is the primary mechanism by which our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element will even be useful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/p&gt;

&lt;p&gt;In essence, our goal is for our element to be used like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;toggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code toggling light/dark mode&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thinking about our &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; component again, what are the key events we want it to emit? For the most part, there's just one: whether its state changes from off to on or vice versa.&lt;/p&gt;

&lt;p&gt;So, whenever the &lt;code&gt;checked&lt;/code&gt; state changes, the element should emit an event!&lt;/p&gt;

&lt;p&gt;To write a test, we must ask three questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the event's &lt;strong&gt;name&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When&lt;/strong&gt; does the event occur?&lt;/li&gt;
&lt;li&gt;What &lt;strong&gt;details&lt;/strong&gt; should be shipped with the event?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answers to these questions will fit into this nice testing template:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/* (2) WHEN */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* (1) NAME */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="cm"&gt;/* (3) ASSERT DETAILS */&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Answering the questions...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;: Since our event represents a &lt;em&gt;change&lt;/em&gt; in the state, we'll call the event "toggle-switch:change".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When&lt;/strong&gt;: Let's emit the event any time &lt;code&gt;checked&lt;/code&gt; is added or removed from the element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Details&lt;/strong&gt;: Events can carry additional information so that listeners know both &lt;em&gt;what&lt;/em&gt; happened and anything else that may be relevant. For our one event, it's probably important to know whether the switch was toggled on or toggled off, so we'll add that to details.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we plug these things into our testing template, we get a decent test!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The two important functions in this test are &lt;code&gt;setTimeout&lt;/code&gt; (provided by Javascript) and &lt;code&gt;oneEvent&lt;/code&gt; (provided by open-wc).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;oneEvent&lt;/code&gt; just waits for one event to occur, and times out with a failure if the event never occurs.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setTimeout&lt;/code&gt; adds our toggle to a list of things for Javascript to do eventually. It's needed because if we &lt;em&gt;didn't&lt;/em&gt; use it, our event could potentially fire before we even started listening for it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let's actually emit the event now!&lt;/p&gt;

&lt;p&gt;Since our event is custom to our new element, we will dispatch a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Event&lt;/a&gt;, and since we want to do it any time &lt;code&gt;checked&lt;/code&gt; changes, we'll perform the dispatch with the code that reacts to when that attribute changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#styling-the-globe"&gt;
  &lt;/a&gt;
  Styling: The Globe
&lt;/h3&gt;

&lt;p&gt;So, we've done &lt;em&gt;all this coding&lt;/em&gt; so far, but we can't actually &lt;em&gt;see&lt;/em&gt; the switch yet... Let's finally put the globe on our light bulb by adding some &lt;strong&gt;styling&lt;/strong&gt; to our element!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev8dvVE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy3wkbrrotcv7qwg2k64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev8dvVE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy3wkbrrotcv7qwg2k64.png" alt="The globe of a light bulb marked as 'Styling'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be honest, styling web components is entirely deserving of its own article, made both interesting and complicated by a tiny thing called the &lt;strong&gt;Shadow DOM&lt;/strong&gt;. MDN covers &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;using the shadow dom&lt;/a&gt; in good detail, so for the purposes of this article we'll talk about it just enough to style the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Shadow DOM allows web components to, in essence, carry around their own personal document hidden from the primary web page document. It's kind of like... &lt;strong&gt;flowers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjBqJ3ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdd9q6kchhklq9uiqy40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjBqJ3ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdd9q6kchhklq9uiqy40.png" alt="Yellow flowers."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a gardener, you can't tell a flower what shape to take or how many petals to have, as that's determined by its own DNA. You &lt;em&gt;can&lt;/em&gt; determine how many flowers are in your garden, and maybe you can influence some of the flower's colors by feeding it colored water, but beyond that you don't get much say.&lt;/p&gt;

&lt;p&gt;Similarly, an element's shadow dom (flower) is &lt;em&gt;encapsulated&lt;/em&gt; from the rest of the document, meaning the document (gardener) cannot directly influence elements defined in the shadow dom; neither can different web components clash with each other.&lt;/p&gt;



&lt;p&gt;This turns out to be rather important for &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; because we now have competing concerns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We must use the shadow dom to give our element a decent default "switch look"&lt;/li&gt;
&lt;li&gt;But we also want developers to customize it &lt;em&gt;from outside the component&lt;/em&gt; to fit their website's look and feel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These competing concerns are incredibly common, and therefore the shadow dom is actually not &lt;em&gt;completely&lt;/em&gt; impenetrable. Although the parent document can never arbitrarily customize stuff in the shadow dom, there are a few exceptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variables&lt;/a&gt; can take on values from beyond the shadow dom.&lt;/li&gt;
&lt;li&gt;Elements within the shadow dom can be assigned &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;shadow part names&lt;/a&gt; which can be directly selected with CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These exceptions form a web component's &lt;strong&gt;Styling API&lt;/strong&gt;, specifically defined opportunities for customization. And just like how we have to intentionally decide what attributes, javascript functions, and events to expose, we also have to choose what CSS variables or parts can be styled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;Earlier I said we "must" use the shadow dom. Why?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;In our case, we want to maintain the &lt;em&gt;internal structure&lt;/em&gt; of the element, which means it shouldn't be exposed to the outside. Deciding what goes in shadow dom or not is important for creating an element's style API, but is complex enough to merit its own article.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://stackoverflow.com/questions/61626493/slotted-css-selector-for-nested-children-in-shadowdom-slot/61631668#61631668"&gt;This stack overflow post&lt;/a&gt; helped me understand this concept and links to other useful resources.&lt;/small&gt;&lt;/p&gt; 



&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR7ATXLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qz4b1c6ifsklt0rn2wl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At long last, let's style this web component!&lt;/p&gt;

&lt;p&gt;To make the switch easy to customize, we are going to minimally style it. Our base switch is gonna be just a square that moves back and forth along a track like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/RwgeKOj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;First, we must attach a &lt;strong&gt;shadow root&lt;/strong&gt; to the element and create a basic template for our element.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;style&amp;gt;
    /* CSS HERE */
  &amp;lt;/style&amp;gt;
  &amp;lt;span part="track"&amp;gt;
    &amp;lt;span part="slider"&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
`&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Of note, we want developers using this toggle switch to be able to customize both the sliding bit and the track underneath it, so to make that possible we are assigning &lt;strong&gt;shadow parts&lt;/strong&gt; to each element. This will make it possible for users to style those specific components like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;toggle-switch&lt;/span&gt;&lt;span class="nd"&gt;::part&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;slider&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the basic template structure done, all that's left is adding CSS! All CSS added will go into the &lt;code&gt;style&lt;/code&gt; tag in the template above.&lt;/p&gt;

&lt;p&gt;First, let's give the element some basic sizing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Two things of interest here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;:host&lt;/code&gt; selector is special in the context of shadow dom. It basically means "style the thing &lt;em&gt;that contains&lt;/em&gt; the shadow dom", which is the web component itself. In our case, this styles the &lt;code&gt;toggle-switch&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;span&lt;/code&gt; only selects spans &lt;em&gt;within the shadow dom&lt;/em&gt; of the element. It does &lt;em&gt;not&lt;/em&gt; globally style all spans on the page! That's part of the power of encapsulation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we'll style the track and slider to look like our squareish examples:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"track"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dddddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#777777&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text-top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And for the last part, we need to style what the component looks like when it has been checked. Recall that the &lt;code&gt;checked&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; tag determines its on/off state. This can be selected for with an attribute selector using &lt;code&gt;:host&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"track"&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;256ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;:host&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;part&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"slider"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Code Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#we-invented-a-light-bulb"&gt;
  &lt;/a&gt;
  We Invented a Light Bulb!
&lt;/h2&gt;

&lt;p&gt;And with that, we just covered the &lt;strong&gt;six key aspects&lt;/strong&gt; to building great web components! And in the process we built both a light bulb &lt;em&gt;and&lt;/em&gt; a toggle switch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUGrJwuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r2nq00x9t96i6id2tto.png" alt="Light bulb, with parts represented by accessibility, attributes, javascript, events, and styling."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Components create &lt;strong&gt;new semantics&lt;/strong&gt; through custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt; components allow for multiple methods of interaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attributes&lt;/strong&gt; surface important state, configuration, and nuanced meaning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Javascript functions&lt;/strong&gt; expose key element behaviours and actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; communicate key actions or changes for other elements to react to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Styling&lt;/strong&gt; is made available through carefully chosen CSS variables and shadow parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But... is it truly complete?&lt;/p&gt;

&lt;p&gt;Almost! There are a few things I skipped over to simplify the tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility: How do we label the switch? Can we integrate this with the HTML &lt;code&gt;label&lt;/code&gt; element?&lt;/li&gt;
&lt;li&gt;Javascript: When someone tabs to the toggle, can they activate it by pressing Enter or Space?&lt;/li&gt;
&lt;li&gt;Attributes: Can a toggle switch be &lt;code&gt;disabled&lt;/code&gt; like other HTML input controls?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to try to tackle these issues yourself! Or, see how it all works in my implementation of the &lt;code&gt;&amp;lt;toggle-switch&amp;gt;&lt;/code&gt; element on Github.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/toggle-switch"&gt;
        toggle-switch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;style&amp;gt;
    :host {
      display: inline-block;
      width: 2em;
      height: 1em;
      cursor: pointer;
    }

    span {
      box-sizing: border-box;
      display: inline-block;
      line-height: 1;
    }

    [part="track"] {
      width: 100%;
      height: 100%;
      background-color: #dddddd;
      text-align: left;
    }

    [part="slider"] {
      width: 50%;
      height: 100%;
      background-color: #777777;
      vertical-align: text-top;
    }

    [part="track"], [part="slider"] {
      transition: all 256ms;
    }

    :host([checked]) [part="slider"] {
      transform: translateX(100%);
    }
  &amp;lt;/style&amp;gt;

  &amp;lt;span part="track"&amp;gt;
    &amp;lt;span part="slider"&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;elementName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;observedAttributes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;disconnectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;attributeChangedCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elementName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@open-wc/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accessibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabbing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabindex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attributes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked attribute is updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-checked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggling on and off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via clicking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;via the api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;toggle-switch&amp;gt;&amp;lt;/toggle-switch&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;oneEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-switch:change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;Constructing web components&lt;/a&gt;&lt;/strong&gt; like a pro.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/testing-package/"&gt;@open-wc/testing&lt;/a&gt;&lt;/strong&gt; provides useful testing helpers for putting our component on a web page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/guides/developing-components/testing/"&gt;@web/test-runner&lt;/a&gt;&lt;/strong&gt;  runs our tests in a real browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#test-fixtures"&gt;Test Fixtures&lt;/a&gt;&lt;/strong&gt; set up an element on a page for testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;connectedCallback&lt;/a&gt;&lt;/strong&gt;  initializes an element when inserted onto the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/"&gt;Attributes and properties&lt;/a&gt;&lt;/strong&gt;  can be set on custom elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://alligator.io/web-components/attributes-properties/#listening-for-changed-attributes"&gt;observedAttributes and attributeChangedCallback&lt;/a&gt;&lt;/strong&gt;  react to changes in attributes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks"&gt;disconnectedCallback&lt;/a&gt;&lt;/strong&gt;  cleans up after an element when it is removed from the document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://open-wc.org/docs/testing/helpers/#testing-events"&gt;oneEvent&lt;/a&gt;&lt;/strong&gt;  tests that an event has occurred.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events"&gt;Custom Events&lt;/a&gt;&lt;/strong&gt;  let you dispatch events specific to your component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;  encapsulates structure, style, and behaviour from the overall document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part"&gt;Shadow Parts&lt;/a&gt;&lt;/strong&gt;  allow outside CSS to customize specific inner elements of a web component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:host"&gt;:host&lt;/a&gt;&lt;/strong&gt;  lets you style the web component itself from its shadow dom.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>webcomponents</category>
    </item>
    <item>
      <title>dependencies? devDependencies? 🤔</title>
      <author>Takuya Kikuchi</author>
      <pubDate>Sat, 25 Sep 2021 01:11:37 +0000</pubDate>
      <link>https://dev.to/takuyakikuchi/dependencies-devdependencies-3nog</link>
      <guid>https://dev.to/takuyakikuchi/dependencies-devdependencies-3nog</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-differentiate-them"&gt;
  &lt;/a&gt;
  How to differentiate them
&lt;/h2&gt;

&lt;p&gt;The basic criteria is whether a package is only needed for development or not. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dependencies&lt;/code&gt;: Packages required to execute the application&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;devDependencies&lt;/code&gt;: Packages required for development/testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react, react-dom&lt;/li&gt;
&lt;li&gt;next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;devDependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;eslint&lt;/li&gt;
&lt;li&gt;husky&lt;/li&gt;
&lt;li&gt;prettier&lt;/li&gt;
&lt;li&gt;typescript&lt;/li&gt;
&lt;li&gt;jest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-good-about-differentiating-them"&gt;
  &lt;/a&gt;
  What's good about differentiating them
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A developer can easily distinguish what packages needed for development or production&lt;/li&gt;
&lt;li&gt;When production build, faster installation time, less disk usage
=&amp;gt; &lt;code&gt;$ npm install --production&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-a-package-to-dependencies"&gt;
  &lt;/a&gt;
  Add a package to dependencies
&lt;/h3&gt;

&lt;p&gt;npm&lt;br&gt;
&lt;code&gt;$ npm install &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;br&gt;
Short: &lt;code&gt;$ npm i &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yarn&lt;br&gt;
&lt;code&gt;$ yarn add &amp;lt;package-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-package-to-devdependencies"&gt;
  &lt;/a&gt;
  Add a package to devDependencies
&lt;/h3&gt;

&lt;p&gt;npm&lt;br&gt;
&lt;code&gt;$ npm install &amp;lt;package-name&amp;gt; --save-dev&lt;/code&gt;&lt;br&gt;
Short: &lt;code&gt;$ npm i &amp;lt;package-name&amp;gt; -D&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yarn&lt;br&gt;
&lt;code&gt;$ yarn add &amp;lt;package-name&amp;gt; --dev&lt;/code&gt;&lt;br&gt;
Short: &lt;code&gt;$ yarn add &amp;lt;package-name&amp;gt; -D&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;EN&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file"&gt;Specifying dependencies and devDependencies in a package.json file | npm Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JP&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/chihiro/items/ca1529f9b3d016af53ec?utm_source=pocket_mylist"&gt;【いまさらですが】package.jsonのdependenciesとdevDependencies - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mo-gu-mo-gu.com/about-dependencies-devdependencies/"&gt;【package.json】dependenciesとdevDependenciesの違いとnpmとyarnのコマンド解説 | モグモグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/karur4n/items/3d9d28f6f21c3533020d"&gt;【package.json】dependencies, devDependencies の使い分けを考える - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>npm</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Move you angular cli app to Nx</title>
      <author>Ajit Singh</author>
      <pubDate>Sat, 25 Sep 2021 00:48:25 +0000</pubDate>
      <link>https://dev.to/this-is-angular/move-you-angular-cli-app-to-nx-3ej4</link>
      <guid>https://dev.to/this-is-angular/move-you-angular-cli-app-to-nx-3ej4</guid>
      <description>&lt;p&gt;Help me improve these updates by giving suggestions.&lt;br&gt;
Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week I was sick so there was no updates last week.&lt;/p&gt;

&lt;p&gt;This week I mostly focused on my moving my clone to Nx monorepo. While converting it here are some of my findings on how to convert an Angular cli app to Nx monorepo&lt;/p&gt;

&lt;p&gt;To convert an angular cli app to nx follow the steps below:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the automatic nx generator in you app whoch will convert the angular cli project to an nx workspace
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @nrwl/workspace &lt;span class="nt"&gt;--preserveAngularCLILayout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After that remember project should never be imported into the library. Environments, common models, common components, common services move to an entirely different lib.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of moving &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Environments to a library can be found &lt;a href="https://github.com/ajitsinghkaler/devto-clone/tree/main/libs/environments"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components to a library can be found &lt;a href="https://github.com/ajitsinghkaler/devto-clone/tree/main/libs/global-components"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Global Services to a library &lt;a href="https://github.com/ajitsinghkaler/devto-clone/tree/main/libs/global-services"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Global Styles here &lt;a href="https://github.com/ajitsinghkaler/devto-clone/tree/main/libs/styles"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To move them to a library generate anew library by &lt;code&gt;nx g lib &amp;lt;lib-name&amp;gt;&lt;/code&gt; after that move everything to lib and export everything via the index.ts file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To import the dependencies the paths are added to the tsconfig.base.json from there you can check what shorthand property to use for what imports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are done with all this you can now divide your modules into smaller libs like a module into its ui, data-access etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dividing the libs is on you its just like the angular module system you can make any module as big as possible and and small as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just remember don't create circular dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also moved most of my components to single file components as it was easier to read and most of my components don't need to be multiple file.&lt;/p&gt;

&lt;p&gt;Form next time I'll start adding unit tests and integration tests, e2e tests after that this project will be done.&lt;/p&gt;

&lt;p&gt;Commits&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/cbf7a957f1db53c64bddf8828a7f26b3cdf7854b"&gt;feat: migrate to nx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/a4265775140d259f742e76af8a108a310cf467d1"&gt;fix: add global services and global components lib&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/bfcf05110000851428dd2d80416353bec1b53302"&gt;feat: move all pages to nx libs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/8a2169d16487cf01c9d13d7ddd1a03f825db5b0e"&gt;feat: move global styles to a library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/ef75badcffbe0c1b128f245345aac4438ca83991"&gt;feat: convert into single file components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me know if you ant to see any new experiments in the repo.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>New Open Source Contribution</title>
      <author>Hung Nguyen</author>
      <pubDate>Fri, 24 Sep 2021 23:22:32 +0000</pubDate>
      <link>https://dev.to/nguyenhung15913/new-open-source-contribution-9k9</link>
      <guid>https://dev.to/nguyenhung15913/new-open-source-contribution-9k9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#open-source-community-contribution"&gt;
  &lt;/a&gt;
  Open Source Community Contribution
&lt;/h3&gt;

&lt;p&gt;This week of OSD600 is amazing. I had a chance to contribute to the project of someone else and had another programmer work on my project. &lt;br&gt;
In more detail, I sent Luigi, who is the project owner, a request to work on his project through the issues channel, and after getting accepted by him, I started forking and cloning his project. In general, his tool was working well, there were also some errors but they did not affect the tool much. &lt;br&gt;
My task was supporting his tool by adding some features or functions that could allow the software to read not only &lt;code&gt;.txt&lt;/code&gt; file, but also &lt;code&gt;.md&lt;/code&gt; file. An &lt;code&gt;.md&lt;/code&gt; file is a markdown file which has some features of formatting the text. For example:&lt;br&gt;
&lt;code&gt;# hello&lt;/code&gt; &lt;br&gt;
will be converted into&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After testing and making sure the function was working well, I sent Luigi the pull request and my work got accepted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;One of the challenges for me was fitting my codes with his style of coding. I have my own logic, Luigi has his own logic about the release 0.1, our styles were completely different. However, Luigi did a good job and his codes were clear enough for me to understand. &lt;br&gt;
I am a type of person who does not like to use semicolon in JavaScript so I set up my Visual Studio Code to get rid all of the semicolons at the end of each line, this accidentally removed all the semicolons of Luigi's codes, and another same issue happened that changed double quotes to single quotes. Moreover, when I created a new function, my codes conflicted with some of his codes so I asked Luigi to make some changes. Also, I used Regular Expression in the project. And as you can probably guess, Regex is a nightmare for most of the programmers, I was struggling a lot with finding the appropriate regex to read the markdown file, but the tool worked eventually and I was really happy about that. Next time, I have to be more careful with code formatting, and I need to check my Visual Studio Code setting before touching someone else's project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experiences"&gt;
  &lt;/a&gt;
  Experiences
&lt;/h3&gt;

&lt;p&gt;I was having a blast working with someone else's project. Last week, I gave feedbacks to Menghi to fix some of his errors code and also to improve his codes. This week, I can fix and write codes directly to Luigi's project. So far, I have learnt 2 more new different coding styles. This is a great progress because in the future, if I work for a company, I definitely need to understand more and more coding styles of my co-workers as well as previous codes of the senior developers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-project-got-developed-by-another-programmer"&gt;
  &lt;/a&gt;
  My Project Got Developed By Another Programmer
&lt;/h3&gt;

&lt;p&gt;There was a good news that my project got supported by Emily, one of the Open Source developers in my OSD600 group. Emily helped me on creating a new function that allows my tool to read markdown files input. Her contribution was amazing with a professional coding style, my software now is even better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projects-link"&gt;
  &lt;/a&gt;
  Projects Link:
&lt;/h3&gt;

&lt;p&gt;Luigi's Octo: &lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;https://github.com/LuigiZaccagnini/octo&lt;/a&gt;&lt;br&gt;
Octo's Markdown issue: &lt;a href="https://github.com/LuigiZaccagnini/octo/issues/7"&gt;https://github.com/LuigiZaccagnini/octo/issues/7&lt;/a&gt;&lt;br&gt;
Pull request to Octo: &lt;a href="https://github.com/LuigiZaccagnini/octo/pull/8"&gt;https://github.com/LuigiZaccagnini/octo/pull/8&lt;/a&gt;&lt;br&gt;
My OSD600-SSG: &lt;a href="https://github.com/nguyenhung15913/OSD600-SSG"&gt;https://github.com/nguyenhung15913/OSD600-SSG&lt;/a&gt;&lt;br&gt;
OSD600-SSG Markdown issue: &lt;a href="https://github.com/nguyenhung15913/OSD600-SSG/issues/10"&gt;https://github.com/nguyenhung15913/OSD600-SSG/issues/10&lt;/a&gt;&lt;br&gt;
Emily's pull request: &lt;a href="https://github.com/nguyenhung15913/OSD600-SSG/pull/11"&gt;https://github.com/nguyenhung15913/OSD600-SSG/pull/11&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>osdssg</category>
      <category>octo</category>
    </item>
    <item>
      <title>Sending Slack Messages with Images using Go</title>
      <author>John Pham</author>
      <pubDate>Fri, 24 Sep 2021 23:05:40 +0000</pubDate>
      <link>https://dev.to/johnphamous/sending-slack-messages-with-images-using-go-23ao</link>
      <guid>https://dev.to/johnphamous/sending-slack-messages-with-images-using-go-23ao</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I was building a feature on &lt;a href="https://highlight.run"&gt;Highlight&lt;/a&gt; that allows you to create a comment on a video. This comment is special because it has not only the author and the text but also the video's x-coordinate, y-coordinate, and current time. You can create a comment by clicking anywhere on the video at any point during playback.&lt;/p&gt;

&lt;p&gt;When writing a comment, you can tag individuals or Slack channels. When you create a comment that has tags, then the things that are tagged will get a notification in Slack.&lt;/p&gt;

&lt;p&gt;The first version of notifications we shipped only showed the comment's author and text. This wasn't ideal because since the comment is related to the video's coordinates and time, any context in the comment text is lost. By adding a screenshot, we bring the whole context of the comment to the notification. Now the recipient doesn't have to go into Highlight to get the full context, they'll have all of it with the notification.&lt;/p&gt;

&lt;p&gt;Here's what I ended up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFwofMgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pham.codes/images/blog/slack-message-with-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFwofMgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pham.codes/images/blog/slack-message-with-image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/slack-go/slack"&gt;Slack Go SDK&lt;/a&gt; is a community SDK and not officially maintained by Slack. This means it doesn't get the same care or attention in terms of documentation and code examples.&lt;/p&gt;

&lt;p&gt;It took me a bit to figure out how to send a Slack message with an image so I'm hoping this blog will save you time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;From the browser, I'm sending the image as a base64 image. This isn't required. I'm using base64 instead of a file because of other reasons.&lt;/p&gt;

&lt;p&gt;Here's a simplified version of the code I ended up using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/base64"&lt;/span&gt;
    &lt;span class="s"&gt;"errors"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/slack-go/slack"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;SendSlackAlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taggedSlackUsers&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commentText&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64Image&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;slackClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SLACK_ACCESS_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;// For every tagged user, join the channel and send the message.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slackUser&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;taggedSlackUsers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;slackUser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebhookChannelID&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The Slack API handles:&lt;/span&gt;
            &lt;span class="c"&gt;// 1. Joining a channel the bot is already a member of&lt;/span&gt;
            &lt;span class="c"&gt;// 2. Joining a Slack user&lt;/span&gt;
            &lt;span class="c"&gt;// Because of this, we can skip checking for this in our application code.&lt;/span&gt;
            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slackClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JoinConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slackUser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebhookChannelID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"failed to join slack channel"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slackClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slackUser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebhookChannelID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgOptionBlocks&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"error posting slack message via slack bot"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// We need to write the base64 image as a png on disk to upload to Slack.&lt;/span&gt;
    &lt;span class="c"&gt;// We create a unique file name for the image.&lt;/span&gt;
    &lt;span class="n"&gt;uploadedFileKey&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"slack-image-%d.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StdEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecodeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;base64Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to decode base64 image"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uploadedFileKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to create file on disk"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to write file on disk"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to sync file on disk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// We need to write the base64 image to disk, read the file, then upload it to Slack.&lt;/span&gt;
    &lt;span class="c"&gt;// We can't send Slack a base64 string.&lt;/span&gt;
    &lt;span class="n"&gt;fileUploadParams&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileUploadParameters&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Filetype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Upload.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// These are the channels that will have access to the uploaded file.&lt;/span&gt;
        &lt;span class="n"&gt;Channels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;uploadedFileKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slackClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileUploadParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"failed to upload file to Slack"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;uploadedFileKey&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uploadedFileKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to remove temporary session screenshot"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h2&gt;

&lt;p&gt;The above code will result in 2 messages being sent:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the comment text&lt;/li&gt;
&lt;li&gt;For the uploaded image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ideally, we only send 1 message with the image attached. The Slack API doesn't allow you to do this unless you are attaching the image with a URL. This means the image has to exist somewhere on the internet already.&lt;/p&gt;

&lt;p&gt;In the above code, we send the messages then we upload the images. What if we upload the images first then use the URLs for the uploaded images to attach to each message?&lt;/p&gt;

&lt;p&gt;That will work but will lead to this behavior:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The image is posted in the channel&lt;/li&gt;
&lt;li&gt;The comment is posted in the channel with the attached image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This isn't the experience I wanted. The code as-is is closer to the desired experience of showing the comment, then the image to provide context.&lt;/p&gt;

&lt;p&gt;The Slack API doesn't provide a way to upload a file "silently". Each upload to a channel will result in a message with a preview of the uploaded content.&lt;/p&gt;

</description>
      <category>go</category>
      <category>slack</category>
      <category>api</category>
    </item>
    <item>
      <title>Problemas comuns, soluções simples</title>
      <author>Guilherme Ventura de Souza</author>
      <pubDate>Fri, 24 Sep 2021 21:27:59 +0000</pubDate>
      <link>https://dev.to/venturalp/problemas-comuns-solucoes-simples-5gmd</link>
      <guid>https://dev.to/venturalp/problemas-comuns-solucoes-simples-5gmd</guid>
      <description>&lt;p&gt;Bom, a idéia aqui é compartilhar algumas lições e aprendizados que tirei ao longo dos anos trabalhando como desenvolvedor, e que boa parte de quem ler isso aqui vai achar bem óbvio, e &lt;strong&gt;É&lt;/strong&gt;, mas muitas vezes no meu dia a dia eu esqueci de pensar no óbvio na hora de resolver um problema e acabei gastando um tempo a mais por pura teimosia.&lt;/p&gt;

&lt;p&gt;Quero abordar aqui alguns problemas comuns e como eu os classifico:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entendimento de negócio;&lt;/li&gt;
&lt;li&gt;Lógica/Código;&lt;/li&gt;
&lt;li&gt;Ferramentas e bibliotecas;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#entendimento-de%C2%A0neg%C3%B3cio"&gt;
  &lt;/a&gt;
  Entendimento de negócio
&lt;/h2&gt;

&lt;p&gt;Aqui está algo que considero muito importante para um bom rendimento como desenvolvedor. Pra mim, desenvolvedor deixou de ser há muito tempo "digitador de código", na verdade nunca deveria ser visto só assim, mas o ponto é, desenvolver algo sem entender do que se trata, do propósito e dos objetivos, é péssimo e pode ocasionar várias situações, tais quais: retrabalho, quebra de expectativas na entrega e em alguns casos prejuízo. &lt;/p&gt;

&lt;p&gt;Pois bem, o que aprendi até então é que é sempre importante entender o que estou fazendo, e pra isso eu pergunto, bastante, é de novo, muito óbvio né? &lt;strong&gt;SIM&lt;/strong&gt;, mas ainda assim muitas vezes deixamos passar batido. Não hesite em buscar respostas na fonte, com o responsável pelo projeto/produto, nem sempre você vai conseguir cobrir tudo em uma &lt;em&gt;planning&lt;/em&gt; ou refinamento, releia os requisitos da tarefa atentamente e se for preciso pergunte e ouça/leia com atenção, vai te poupar lá na frente de refazer algo "só" porque entendeu errado, ou na dúvida fez da forma que achava melhor sem saber que não era a melhor forma para a tarefa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#l%C3%B3gicac%C3%B3digo"&gt;
  &lt;/a&gt;
  Lógica/Código
&lt;/h2&gt;

&lt;p&gt;Sabe aquela pausa pro &lt;strong&gt;café&lt;/strong&gt;? Quantas vezes foi ela quem me deu o estalo de como solucionar um problema que eu estava enroscado, então sim, pra essa pausa também é importante, por muitas vezes quando me vejo patinando pra resolver um problema, uma pausa pra refrescar a cabeça ajuda, volto para o problema mais calmo, me ajuda a ter uma perspectiva diferente para tentar resolver.&lt;/p&gt;

&lt;p&gt;Por muitas vezes tive vergonha de perguntar e insisti em tentar resolver algo sozinho. Se você trabalha em equipe, saiba pedir ajuda, saiba perguntar, não tenha vergonha disso, pra mim não existe pergunta errada, se você tem dúvidas, sua pergunta é genuína, ela pode até ser "boba" pra quem já sabe, mas não é pra você. Mas não espere soluções prontas, isso não é pedir ajuda e não vai te fazer aprender nada ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;E por último e não menos importante, valorizo muito &lt;a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_pareada"&gt;pair programming&lt;/a&gt;, é legal o quanto isso pode ajudar na hora de resolver um problema, de encontrar uma solução, com a perspectiva de outra pessoa, pensando juntos, e isso pode poupar algumas horas muitas vezes. Ok as vezes não vai passar de um &lt;a href="https://pt.wikipedia.org/wiki/Debug_com_Pato_de_Borracha"&gt;rubber duck&lt;/a&gt; e tudo bem, não é o ideal mas acontece.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ferramentas-e-bibliotecas"&gt;
  &lt;/a&gt;
  Ferramentas e bibliotecas
&lt;/h2&gt;

&lt;p&gt;No item anterior eu digo que toda pergunta é válida certo? E aqui vou eu me contradizer um pouco ou complementar… Sim toda pergunta é válida, mas é importante ter em mente que se você tem recursos que podem resolver sua dúvida e você simplesmente sai perguntando ao invés de fazer uso disso, pra mim isso é só o caminho mais fácil/preguiçoso. Mas isso não é legal, você pode interromper, sem necessidade, o raciocínio de alguém, pra perguntar algo que você já tinha acesso a resposta, é aí que quero chegar. &lt;/p&gt;

&lt;p&gt;Para uma linguagem, alguma ferramenta ou biblioteca, sempre se atente a documentação, ela existe e não é atoa. Stackoverflow é bom? Sim claro, mas as vezes é tão mais simples olhar o repositório da lib e encontrar nas issues alguém passando pelo mesmo problema, ou que já passou por isso e até já tem resposta pra isso, então, mesmo sendo óbvio, lembre-se disso, eventualmente você vai cair em algum post de stackoverflow que vai te mandar exatamente pra uma issue do repositório.&lt;/p&gt;

&lt;p&gt;E se você não encontrar nada? Bom, pergunte, e use as issues pra isso também, assim você ainda colabora com a comunidade!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b%C3%B4nus"&gt;
  &lt;/a&gt;
  Bônus
&lt;/h2&gt;

&lt;p&gt;Não é bem sobre um problema que eu quero falar aqui mas sim de algo que ajuda a evitar problemas futuros, que é a documentação, que muitas vezes é negligenciada e não deveria. Duas perguntas sobre isso: &lt;em&gt;Por quê?&lt;/em&gt; e &lt;em&gt;Pra quem?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Por quê?&lt;/strong&gt; Você ganha tempo, você e seu time. A depender de qual extenso é um projeto, a documentação pode ser útil inclusive pra quem tem todo o contexto do projeto, aquele detalhe mais específico, bem documentado, te ajuda a não se perder. Além disso, é uma boa prática e te deixa treinado/preparado para fazer o mesmo ao colaborar na comunidade open source, uma biblioteca mal documentada dificilmente vai pra frente, fica difícil atingir muita gente se as pessoas não conseguem usar direito sua biblioteca, né?!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pra quem?&lt;/strong&gt;  Além de ser ótimo para você e para o time, é importantíssimo para novos membros do time, ajuda no &lt;em&gt;onboarding&lt;/em&gt;, consequentemente vai ser alguém que vai poder colaborar com o projeto mais rápido. E tem mais, imagine que você mude de projeto dentro da empresa, e deixa um projeto mal documentado para trás, o qual você tem bastante conhecimento, eventualmente isso vai te "assombrar" e você vai ter que parar pra resolver/ajudar em algo que se tivesse bem documentado não seria um problema.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A good way to set up SSH keys for Git on Macbooks</title>
      <author>scottshipp</author>
      <pubDate>Fri, 24 Sep 2021 20:58:53 +0000</pubDate>
      <link>https://dev.to/scottshipp/a-good-way-to-set-up-ssh-keys-for-git-on-macbooks-56l4</link>
      <guid>https://dev.to/scottshipp/a-good-way-to-set-up-ssh-keys-for-git-on-macbooks-56l4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#motivation-for-this-article"&gt;
  &lt;/a&gt;
  Motivation for this article
&lt;/h1&gt;

&lt;p&gt;At least once or twice a year, I either set up new SSH keys for access to a new Git repository or else I set up the same keys on a new Macbook. Every time, I feel like I learn something new and this last time, I finally felt like I got it right. These are the notes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-an-ssh-keypair"&gt;
  &lt;/a&gt;
  Creating an SSH keypair
&lt;/h1&gt;

&lt;p&gt;Creating a keypair is the easy part. Generally, you can follow exactly whatever help documentation is provided by your particular Git platform, whether that's &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"&gt;GitHub&lt;/a&gt;, &lt;a href="https://docs.gitlab.com/ee/ssh/"&gt;Gitlab&lt;/a&gt;, or &lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-password-problem"&gt;
  &lt;/a&gt;
  The Password Problem
&lt;/h1&gt;

&lt;p&gt;Once you create the keypair, and store it into the platform, the first problem occurs, which is that you always have to enter your password to unlock the key.&lt;/p&gt;

&lt;p&gt;For a long time, I would add the following to my &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;, simply because other developers told me to do this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do this.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD IDEA: adding the following to the .zshrc file&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;ssh-agent&lt;span class="si"&gt;)&lt;/span&gt;
ssh-add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main reason not to do that is that although this lets you avoid entering your SSH key password every time you try to use the git cli, it still requires you to enter your password every time you open a new terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;At some point, I read Danila Vershinin's excellent article &lt;a href="https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x"&gt;Proper use of SSH client in Mac OS X&lt;/a&gt;. It blew my mind 🤯 because I didn't realize that Mac OS has a built-in integration between the &lt;a href="https://support.apple.com/guide/keychain-access/welcome/mac"&gt;Keychain&lt;/a&gt; and OpenSSH.&lt;/p&gt;

&lt;p&gt;You can use this integration with a one-time configuration ("set it and forget it").&lt;/p&gt;

&lt;p&gt;First, add the following to &lt;code&gt;$HOME/.ssh/config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UseKeychain    yes
AddKeysToAgent yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add each key with the &lt;code&gt;-K&lt;/code&gt; argument, which is Mac-specific and will save the key password into the Keychain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-add &lt;span class="nt"&gt;-K&lt;/span&gt; ~/.ssh/&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;YOUR_KEY_FILE&lt;/span&gt;&lt;span class="sh"&gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all there is to it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a good way to set up SSH keys for Git on Macbooks. There's also a way to configure for multiple keys and multiple Git platforms which you can check out &lt;a href="https://stackoverflow.com/a/17158985/16879897"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you have anything to add, I'd be glad to hear it in the comments below. 👍&lt;/p&gt;

</description>
      <category>bash</category>
      <category>security</category>
      <category>programming</category>
    </item>
    <item>
      <title>React Native Mobile Apps, Integrating Expo Camera, Supabase Buckets and Image Upload</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 24 Sep 2021 20:56:36 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/react-native-mobile-apps-integrating-expo-camera-supabase-buckets-and-image-upload-1mp6</link>
      <guid>https://dev.to/aaronksaunders/react-native-mobile-apps-integrating-expo-camera-supabase-buckets-and-image-upload-1mp6</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RmlekGDv8RU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Working with expo camera in React Native to take pictures and upload the images to Supabase Bucket. We also created an UI to show the thumbnail of the photo as a way to see the image.&lt;/p&gt;

&lt;p&gt;Join with me on my journey of refreshing my memory with React Native and building mobile applications&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-series-react-native-refresher"&gt;
  &lt;/a&gt;
  Video Series - React Native Refresher
&lt;/h2&gt;

&lt;p&gt;Part 1 - Intro to Working with React-Navigation - &lt;a href="https://youtu.be/uqH00SEmKxg"&gt;https://youtu.be/uqH00SEmKxg&lt;/a&gt;&lt;br&gt;
Part 2 - React Navigation Drawer Navigator And Authentication Flow - &lt;a href="https://youtu.be/5e67b0PBcn4"&gt;https://youtu.be/5e67b0PBcn4&lt;/a&gt;&lt;br&gt;
Part 3 - Authentication And Supabase Login - &lt;a href="https://youtu.be/aBuB-Q6vHDE"&gt;https://youtu.be/aBuB-Q6vHDE&lt;/a&gt;&lt;br&gt;
Part 4 - Authentication, Supabase, And React Hook Form - &lt;a href="https://youtu.be/ZU3lXTm9nVY"&gt;https://youtu.be/ZU3lXTm9nVY&lt;/a&gt;&lt;br&gt;
Part 5 - Supabase Create Account, And React Hook Form - &lt;a href="https://youtu.be/lu1JzyBfSOQ"&gt;https://youtu.be/lu1JzyBfSOQ&lt;/a&gt;&lt;br&gt;
** Part 6 - Expo Camera, Supabase Buckets and Image Upload - &lt;a href="https://youtu.be/RmlekGDv8RU"&gt;https://youtu.be/RmlekGDv8RU&lt;/a&gt;&lt;/p&gt;

</description>
      <category>camera</category>
      <category>supabase</category>
      <category>reactnative</category>
      <category>video</category>
    </item>
    <item>
      <title>My first contribution  </title>
      <author>jjung99</author>
      <pubDate>Fri, 24 Sep 2021 20:52:50 +0000</pubDate>
      <link>https://dev.to/jjung99/my-first-contribution-1jp4</link>
      <guid>https://dev.to/jjung99/my-first-contribution-1jp4</guid>
      <description>&lt;p&gt;This week, for the first time, I contributed to another project for code update. It was about allowing markdown file and turning it into HTML regarding their syntax.&lt;/p&gt;

&lt;p&gt;First, I created a new issue to let the project's owner know that I updated his code. After that, I created a new branch with my issue number and did &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository"&gt;clone&lt;/a&gt; my &lt;a href="https://github.com/DerekJxy/My-First-SSG.git"&gt;partner's git repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, I took a look at the code. For me, the code was easy to read and understand. It wasn't a complicated process, but some lines came along with the new line when I sliced the line. So it took a while to realize what the problem was and solve it. Plus, I had forgotten so many javascript syntax and functions I struggled a little bit. But, other than that, his code was clear, and I just texted him when I had any confusion. What I did was pretty much using his code snap and added if-statements for the file type and feature of markdown heading syntax. &lt;/p&gt;

&lt;p&gt;Finally, I &lt;a href="https://git-scm.com/docs/git-add"&gt;added&lt;/a&gt; all the files that I made changes, &lt;a href="https://git-scm.com/docs/git-commit"&gt;committed&lt;/a&gt; and &lt;a href="https://github.com/git-guides/git-push"&gt;pushed&lt;/a&gt; to my new branch, &lt;a href="https://github.com/jjung99/My-First-SSG.git"&gt;issue-19&lt;/a&gt;. The process of git was smooth. I didn't have trouble with git throughout this lab. I think the &lt;a href="https://www.youtube.com/watch?v=xHR_owLgiEU"&gt;week-2 lecture &lt;/a&gt;  helped me understand how git works and how to use it appropriately (effective use of git)&lt;/p&gt;

&lt;p&gt;When my pull request was merged, I felt good and achieved something from what I contributed. Throughout this lab, everything related to git wasn't a problem. I felt more confident and comfortable using git now, although I wanted to avoid it a month ago. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>contribution</category>
    </item>
  </channel>
</rss>
