<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üé¨Awesome CSS Button Hover Effects Using HTML &amp; CSS‚ú®
</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 28 Oct 2021 22:49:23 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/awesome-css-button-hover-effects-using-html-css-52p8</link>
      <guid>https://dev.to/robsonmuniz16/awesome-css-button-hover-effects-using-html-css-52p8</guid>
      <description>&lt;p&gt;Lets create from from scratch, step-by-step an ‚ÄúAwesome CSS Button Hover Effects Using HTML &amp;amp; CSS‚Äù using just HTML and CSS!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IjQEn7g5mdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>List of Emmet keyboard shortcuts for quickly generating HTML</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 28 Oct 2021 22:12:54 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/list-of-emmet-keyboard-shortcuts-for-quickly-generating-html-38ll</link>
      <guid>https://dev.to/ubahthebuilder/list-of-emmet-keyboard-shortcuts-for-quickly-generating-html-38ll</guid>
      <description>&lt;p&gt;Like many others, I started my coding journey with Notepad. Few days ago, I tried building a basic HTML page using my NotePad text editor. It took me over 10 minutes to get everything set up.&lt;/p&gt;

&lt;p&gt;This made me realize just how useful Emmet is. Emmet is arguably one of the best extensions for web developers, productivity-wise.&lt;/p&gt;

&lt;p&gt;Though I am not quite sure of NotePad, other popular code editors like VSCode and Atom all have their own Emmet plugins which can be installed from respective marketplaces.&lt;/p&gt;

&lt;p&gt;With the Emmet plugin installed on your text editor , you can quickly generate HTML code by using a couple of predefined keyboard shortcuts, saving you a lot of time in development.&lt;/p&gt;

&lt;p&gt;You can generate a huge tree of HTML markup with along with their attributes on the fly.  Emmet uses conventional CSS selectors to structure HTML and define attributes.&lt;/p&gt;

&lt;p&gt;Below are some of my go-to shortcuts for quickly generating HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-boilerplate-for-html"&gt;
  &lt;/a&gt;
  Generate boilerplate for HTML
&lt;/h3&gt;

&lt;p&gt;Key: &lt;code&gt;!&lt;/code&gt;+&lt;code&gt;tab&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Imagine if you had to type out the boilerplate markup for every HTML document you created. That's an exhausting task.&lt;/p&gt;

&lt;p&gt;With Emmet, you can create the structure of your document with just two keys:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyulXsn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635348970058/IDWGvbAr4X.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyulXsn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635348970058/IDWGvbAr4X.gif" alt="Generate HTML boilerplate" width="600" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-opening-and-closing-tags-with-some-key-attributes"&gt;
  &lt;/a&gt;
  Create opening and closing tags (with some key attributes)
&lt;/h3&gt;

&lt;p&gt;Key: &lt;code&gt;&amp;lt;tagname&amp;gt;&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; or &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can simultaneously create the opening and closing tags of any HTML element. &lt;/p&gt;

&lt;p&gt;In addition, Emmet abbreviations automatically expands a list of related tags (with their attributes)  as you start typing the tag name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYRT7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412612882/10W37gaUW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYRT7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412612882/10W37gaUW.gif" alt="Emmet abbreviation" width="600" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-html-tag-with-two-or-more-of-the-same-attributes"&gt;
  &lt;/a&gt;
  Create a HTML tag with two or more of the same attributes
&lt;/h3&gt;

&lt;p&gt;You can specify two values to the same HTML property. For example, you can set two class names on the same element using the class CSS selector (.), like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQLxQavw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413452002/yhC6o97KkO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQLxQavw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413452002/yhC6o97KkO.gif" alt="Same class names" width="600" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-html-element-with-different-attribute-types"&gt;
  &lt;/a&gt;
  Create a HTML element with different attribute types
&lt;/h3&gt;

&lt;p&gt;You can specify two different types of attributes on the same tag. For example, you can specify a class attribute and an id attribute on a &lt;code&gt;div&lt;/code&gt; tag by combining &lt;code&gt;.classname&lt;/code&gt; + &lt;code&gt;#id-name&lt;/code&gt; , like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3lsyP0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412807030/13AwnmHUY.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3lsyP0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412807030/13AwnmHUY.gif" alt="HTML element with different attributes" width="600" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-nested-tags"&gt;
  &lt;/a&gt;
  Create nested tags
&lt;/h3&gt;

&lt;p&gt;You can create a tree of nested tags with Emmet. To nest a tag, simply precede the child with the greater than symbol (&amp;gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCB5bSRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413353822/Upe6tzA3u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCB5bSRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413353822/Upe6tzA3u.gif" alt="simplenesting.gif" width="586" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nest-different-tags-with-different-classnames"&gt;
  &lt;/a&gt;
  Nest different tags with different classnames
&lt;/h3&gt;

&lt;p&gt;You cannot just nest the same kind of element with same attribute, but also nest different tags with different attributes. In the second markup, we nest an image with an &lt;code&gt;id&lt;/code&gt; inside of a &lt;code&gt;div&lt;/code&gt; with a &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfxo_CKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413662637/8c65Jnc6a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfxo_CKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413662637/8c65Jnc6a.gif" alt="diff attributes" width="600" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiply-children-html-tags"&gt;
  &lt;/a&gt;
  Multiply children HTML tags
&lt;/h3&gt;

&lt;p&gt;You can multiply a specific type of tag to a specified number, using the multiplication symbol (*). For example, we can create multiple list items inside of an unordered list:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4t_ljaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414079927/h4HR5p1s7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4t_ljaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414079927/h4HR5p1s7.gif" alt="multiply children tags" width="470" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-autoincrementing-attribute-value"&gt;
  &lt;/a&gt;
  Create auto-incrementing attribute value
&lt;/h3&gt;

&lt;p&gt;Another awesome thing we can do with Emmet is to auto-increment an attribute on a list of HTML children tags:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3WqBmvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414348298/8Ps3A9Way.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3WqBmvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414348298/8Ps3A9Way.gif" alt="Auto increment atributes" width="558" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complex-nesting-of-html-tags"&gt;
  &lt;/a&gt;
  Complex nesting of HTML tags
&lt;/h3&gt;

&lt;p&gt;You can create a complex nesting structure in just a single line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hz1O-cS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413924643/fBfWna_Ge.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hz1O-cS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413924643/fBfWna_Ge.gif" alt="complex nesting" width="600" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-sibling-elements-on-same-level"&gt;
  &lt;/a&gt;
  Create sibling elements (on same level)
&lt;/h3&gt;

&lt;p&gt;You can create two or more sibling HTML tags (adjacent to each other) using the plus symbol (+):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHYpnUcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414509018/X-oKiGjd2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHYpnUcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414509018/X-oKiGjd2.gif" alt="sibling elements" width="476" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The Emmet plug-in is an indispensable tool for web developers. The tool helps you create simple and complex HTML markup structure with a couple of pre-defined keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;Did I miss out any keyboard shortcut? Please let me know in the comments.&lt;/p&gt;

</description>
      <category>html</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>October: Forem Twitch Events Roundup üëæ</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 28 Oct 2021 20:26:59 +0000</pubDate>
      <link>https://dev.to/devteam/october-forem-twitch-events-roundup-4em9</link>
      <guid>https://dev.to/devteam/october-forem-twitch-events-roundup-4em9</guid>
      <description>&lt;p&gt;In October, Nick Taylor and I kicked off Hacktoberfest. We were also joined by 4 awesome guests throughout the month who taught us about GitHub actions, Terraform, DivOps, Framer Motion and more! This is a round up of all the wonderful guests who joined us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-hacktoberfest-kickoff"&gt;
  &lt;/a&gt;
  DEV Hacktoberfest Kick-off
&lt;/h2&gt;

&lt;p&gt;If you are interested in contributing to open source, Nick and I chatted about &lt;a href="https://github.com/forem/forem/issues"&gt;open issues&lt;/a&gt; in Forem, how to get started contributing, and how you can use GitPod for your development environment. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8w1AXyIWiks"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-brian-douglas"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Brian Douglas
&lt;/h2&gt;

&lt;p&gt;Brian Douglas , Director of Developer Advocacy at GitHub, joined us to talk about Open Sauced and the GitHub features it leverages, GitHub Actions and packages, project tables, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d1KCS6C4Rus"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to Follow Brian:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saucedopen"&gt;Open Sauced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/bdougieYO"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bdougie.live/"&gt;Personal Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-learn-terraform-with-andrew-brown"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday: Learn Terraform with Andrew Brown
&lt;/h2&gt;

&lt;p&gt;Andrew Brown taught us how to use Terraform with AWS. We talked about resources, providers, modules, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wHWzxGD_cRk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For Andrew's full Terraform course check out their article/video on &lt;a href="https://www.freecodecamp.org/news/hashicorp-terraform-associate-certification-study-course-pass-the-exam-with-this-free-12-hour-course/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Andrew:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/andrewbrown"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/andrew-wc-brown/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/andrewbrown"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-jonathan-creamer"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Jonathan Creamer
&lt;/h2&gt;

&lt;p&gt;Jonathan Creamer, Senior Engineer at Microsoft, joined us to chat about mono repos, npm workspaces, DivOps and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Waw_SZPT_VI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Jonathan:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jcreamer898"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jonathancreamer.com/announcing-div-ops/"&gt;DivOps Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-will-johnson"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Will Johnson
&lt;/h2&gt;

&lt;p&gt;Will Johnson joined us to chat about DevRel, Auth0, Framer Motion, content creation, their new course, and RenderATL .&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wZdYhsLqdLE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Will:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/willjohnsonio"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://motion.williamjohnson.dev/"&gt;Framer Motion Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to be notified when future streams begin and check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;Be sure to join us next week as we chat with &lt;a href="https://twitter.com/5t3ph"&gt;Stephanie Eckles&lt;/a&gt; about CSS, Front-end development and more. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We will be winding down streams toward the end of the year as we take vacations and enjoy the holidays. But we will be back at the beginning of 2022!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
      <category>twitch</category>
    </item>
    <item>
      <title>Desplegando Bot de Telegram a AWS ECS con AWS Copilot [paso a paso] para principiantes</title>
      <author>Christian Prado Ciokler</author>
      <pubDate>Thu, 28 Oct 2021 20:18:47 +0000</pubDate>
      <link>https://dev.to/chrisciokler/desplegando-bot-de-telegram-a-aws-ecs-con-aws-copilot-paso-a-paso-para-principiantes-2lld</link>
      <guid>https://dev.to/chrisciokler/desplegando-bot-de-telegram-a-aws-ecs-con-aws-copilot-paso-a-paso-para-principiantes-2lld</guid>
      <description>&lt;p&gt;Copilot es una herramienta joven para crear e implementar servicios en contenedores sin manejar todos los problemas de configuraci√≥n de ECS, EC2 y Fargate. Tal vez haya una mejor manera de implementar este tipo de proyecto, pero esta es una mas, quiz√°s a alguien le resulte de √∫til.&lt;/p&gt;

&lt;p&gt;üôè Espero que les sea de ayuda üëç este articulo, as√≠ que vamos al grano. üöÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tabla-de-contenido"&gt;
  &lt;/a&gt;
  Tabla de contenido &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stack"&gt;El Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#node"&gt;Instalando Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;Instalando AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copilot"&gt;Instalando Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Instalando Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Configurando el proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bot"&gt;Creando el bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coding"&gt;Escribiendo c√≥digo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Probando el c√≥digo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Configurando dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Desplegando a ECS con Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring"&gt;Refactorizando y actualizando&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;The End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#el-stack-pointup"&gt;
  &lt;/a&gt;
  El Stack &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Para este proyecto vamos a utilizar las siguientes herramientas, no se preocupen si no saben c√≥mo utilizarlas, le dejo los enlaces de la documentaci√≥n a continuaci√≥n. De todos modos, esta es una gu√≠a paso a paso hasta el final.&lt;/p&gt;

&lt;p&gt;OS: Windows -debe funcionar con otros sistemas-&lt;br&gt;
Node &lt;a href="https://nodejs.org/es/docs/"&gt;docs&lt;/a&gt; &lt;a href="https://nodejs.org/es/download/"&gt;Instalaci√≥n&lt;/a&gt;&lt;br&gt;
AWS CLI v2 &lt;a href="https://docs.aws.amazon.com/cli/index.html"&gt;docs&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;Instalaci√≥n&lt;/a&gt;&lt;br&gt;
Copilot Cli &lt;a href="https://aws.github.io/copilot-cli/docs/overview/"&gt;docs&lt;/a&gt; &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;Instalaci√≥n&lt;/a&gt;&lt;br&gt;
Docker &lt;a href="https://docs.docker.com/"&gt;docs&lt;/a&gt; &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Instalaci√≥n&lt;/a&gt;&lt;br&gt;
Telegraf &lt;a href="https://telegraf.js.org/"&gt;docs&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/telegraf"&gt;Instalaci√≥n&lt;/a&gt;&lt;br&gt;
Binance API &lt;a href="https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md"&gt;docs&lt;/a&gt;&lt;br&gt;
Axios &lt;a href="https://axios-http.com/docs/intro"&gt;docs&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-node-pointup"&gt;
  &lt;/a&gt;
  Instalando Node &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Primero, instalamos Node, no hay mucho que decir al respecto, solo sigan este enlace &lt;a href="https://nodejs.org/es/download/"&gt;aqu√≠&lt;/a&gt; para descargar Node y el instalador los guiar√° a trav√©s del proceso. En el momento en que se crea esta publicaci√≥n, estamos usando la versi√≥n 16.11.0.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-aws-cli-pointup"&gt;
  &lt;/a&gt;
  Instalando AWS CLI &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;En primer lugar, debemos tener una cuenta de AWS, por lo que si no la tienen pueden crear una &lt;a href="https://aws.amazon.com/resources/create-account/"&gt;aqu√≠&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una vez creada la cuenta instalamos &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;AWS CLI v2&lt;/a&gt; y revisamos si funciona con el comando &lt;strong&gt;aws help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Con todo en orden, el siguiente paso es configurar las credenciales de AWS. Entonces necesitamos crear claves de acceso para un usuario de IAM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Inicie sesi√≥n en la Consola de administraci√≥n de AWS y abra la consola de IAM &lt;a href="https://console.aws.amazon.com/iam/"&gt;aqu√≠&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En el panel de navegaci√≥n, escoge &lt;strong&gt;Users&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elija el nombre del usuario cuyas claves de acceso desea crear y luego selecciona &lt;strong&gt;Security credentials&lt;/strong&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En la secci√≥n &lt;strong&gt;Access keys&lt;/strong&gt; , selecciona &lt;strong&gt;Create access key&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para ver el nuevo par de claves de acceso, elija &lt;strong&gt;Show&lt;/strong&gt; . No tendr√° acceso a la clave secreta nuevamente despu√©s de que se cierre este cuadro de di√°logo. Sus credenciales se ver√°n as√≠:&lt;br&gt;
Access key ID: AKIAIOSFODNN7EXAMPLE&lt;br&gt;
Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para descargar el par de claves, selecciona &lt;strong&gt;Download .csv file&lt;/strong&gt;. Guarde las llaves en un lugar seguro. No tendr√° acceso a la clave secreta nuevamente despu√©s de que se cierre este cuadro de di√°logo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mantenga las claves confidenciales para proteger su cuenta de AWS y nunca las env√≠e por correo electr√≥nico. No las comparta fuera de su organizaci√≥n, incluso si una consulta parece provenir de AWS o Amazon.com. Nadie que represente leg√≠timamente a Amazon jam√°s le pedir√° su clave secreta.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Despu√©s de descargar el archivo .csv, elija &lt;strong&gt;Close&lt;/strong&gt;. Cuando crea una clave de acceso, el par de claves est√° activo de forma predeterminada y puede usar el par de inmediato.&lt;br&gt;
Para agregar las credenciales a la AWS CLI escribimos el comando &lt;strong&gt;aws configure --profile myprofilename&lt;/strong&gt; en la terminal y seguimos los pasos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Access Key ID [None]:¬†AKIAI44QH8DHBEXAMPLE¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Secret Access Key [None]:¬†je7MtGbClwBF/EXAMPLEKEY¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default region name [None]:¬†us-east-1¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default output format [None]:¬†json&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eso es todo, ¬°haz configurado con √©xito AWS CLI!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Instalando Copilot Cli  &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Las instrucciones para la instalaci√≥n est√°n &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;aqu√≠&lt;/a&gt;, una vez que haya terminado escriba &lt;strong&gt;copilot --help&lt;/strong&gt; en su terminal si todo funciona como se supone,! Felicidades, tu pc es m√°s inteligente que la m√≠a, si tuviste un error no te preocupes yo tuve el mismo problema. As√≠ es como puede solucionarlo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recuerde esta soluci√≥n fue probada en el sistema operativo Windows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Busque los archivos instalados y elim√≠nelos, copilot.exe, copilot.asc y ecs-cli.asc.&lt;/li&gt;
&lt;li&gt;Vuelva a instalarlos usando la terminal como administrador pero en esta carpeta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.exe' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe.asc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\ecs-cli.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Presione &lt;strong&gt;Win + R&lt;/strong&gt; y escriba esto &lt;strong&gt;rundll32.exe sysdm.cpl, EditEnvironmentVariables&lt;/strong&gt;, se abrir√° su panel de variables de entorno.&lt;/li&gt;
&lt;li&gt;Vaya a las variables del sistema, seleccione path y haga clic en editar, agregue una nueva ruta &lt;strong&gt;C:\Program Files\Amazon\Copilot&lt;/strong&gt; o la ruta donde est√° el archivo copilot.exe.&lt;/li&gt;
&lt;li&gt;Guarde los cambios y reinicie.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Escribe el comando &lt;strong&gt;copilot --help&lt;/strong&gt; en tu terminal y deber√≠a funcionar.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-docker-pointup"&gt;
  &lt;/a&gt;
  Instalando Docker &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Descargue Docker &lt;a href="https://www.docker.com/products/docker-desktop"&gt;aqu√≠&lt;/a&gt; y siga las instrucciones.&lt;/p&gt;

&lt;p&gt;Antes de instalar el backend de Docker Desktop WSL 2, debe completar los siguientes pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Instale Windows 10, versi√≥n 1903 o superior, o Windows 11.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Habilite la funci√≥n WSL 2 en Windows. Para obtener instrucciones detalladas, consulte &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;la documentaci√≥n de Microsoft&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Descargue e instale &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update%20-package"&gt;el paquete de actualizaci√≥n del kernel de Linux&lt;/a&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#configurando-el-proyecto-pointup"&gt;
  &lt;/a&gt;
  Configurando el proyecto &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Crea una carpeta y dale un nombre de tu elecci√≥n, el m√≠o ser√° crypto-bot-app, abre tu carpeta en tu IDE y escribe &lt;strong&gt;npm init -y&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agrega los paquetes. Escribe en la terminal &lt;strong&gt;npm i telegraf axios&lt;/strong&gt;&lt;br&gt;
¬°¬°¬°Todo listo!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creando-el-bot-pointup"&gt;
  &lt;/a&gt;
  Creando el bot &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abra su aplicaci√≥n de Telegram y busque el &lt;a href="https://t.me/botfather"&gt;BotFather&lt;/a&gt; e inicie el bot.&lt;/li&gt;
&lt;li&gt;Escribe el comando /newbot y dale un nombre, el m√≠o ser√° crypto-bot y el nombre de usuario crptobot&lt;/li&gt;
&lt;li&gt;Deber√≠a recibir un token como este 2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4, gu√°rdelo para m√°s tarde.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¬°Creaste tu primer bot !! ¬°¬°Felicitaciones !!, ahora vamos a agregarle c√≥digo.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#escribiendo-c%C3%B3digo-pointup"&gt;
  &lt;/a&gt;
  Escribiendo c√≥digo &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Cree un archivo index.js en la carpeta del proyecto donde vamos a poner este c√≥digo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="c1"&gt;// START-----------------------------------------------&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// COMMANDS===============================================================&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#probando-el-c%C3%B3digo-pointup"&gt;
  &lt;/a&gt;
  Probando el c√≥digo &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Antes de correr el bot, agreguemos el siguiente fragmento de c√≥digo a nuestro package.json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;¬†&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;¬†&lt;/span&gt; &lt;span class="err"&gt;¬†¬†&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//here&lt;/span&gt;
&lt;span class="err"&gt;¬†¬†&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;¬†¬†&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora ejecute el comando &lt;strong&gt;npm start&lt;/strong&gt;, vaya a telegram, abra su bot y escriba &lt;strong&gt;/start&lt;/strong&gt; o &lt;strong&gt;/price btc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Una vez que reciba la respuesta esperada, podemos continuar este viaje.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#configurando-dockerfile-pointup"&gt;
  &lt;/a&gt;
  Configurando dockerfile &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Crea un archivo en el directorio de su proyecto y as√≠gnele el nombre &lt;strong&gt;Dockerfile&lt;/strong&gt;, agregue este c√≥digo de configuraci√≥n.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM¬†node:16.9.1

WORKDIR¬†/app

COPY¬†package*.json¬†./

RUN¬†npm¬†install

COPY¬†.¬†.

EXPOSE¬†80

CMD¬†["npm","start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adem√°s, cree un archivo con el nombre .dockerignore y agregue este:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copilot
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#desplegando-a-ecs-con-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Desplegando a ECS con Copilot Cli &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ahora que tenemos el dockerfile configurado correctamente, vamos a subir el bot en ECS para que funcione 24 horas al d√≠a, 7 d√≠as a la semana.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Escriba el comando &lt;strong&gt;copilot init&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Nombre de la aplicaci√≥n, crypto-bot-app.&lt;/li&gt;
&lt;li&gt;Elegimos la carga de trabajo, en mi caso Backend Service.&lt;/li&gt;
&lt;li&gt;Nombre el servicio de backend como bot-main-service.&lt;/li&gt;
&lt;li&gt;Despliegue la aplicaci√≥n con el comando &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#refactorizando-y-actualizando-pointup"&gt;
  &lt;/a&gt;
  Refactorizando y actualizando &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;En este punto, podemos hacer una refactorizaci√≥n para optimizar nuestro c√≥digo. Primero, crearemos una carpeta "src" con un archivo javascript llamado "bot-functions.js" y agregaremos este c√≥digo.&lt;/p&gt;

&lt;p&gt;bot-functions.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;luego vaya a index.js y realice algunos cambios.&lt;/p&gt;

&lt;p&gt;index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/bot-functions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora probamos que todo est√° funcionando correctamente, agregamos los cambios con el comando &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-end-pointup"&gt;
  &lt;/a&gt;
  The End &lt;a href="#table"&gt;‚òùÔ∏è&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ten en cuenta que este es un proyecto de desarrollo con fines educativos, en el mundo real debe almacenar tokens e informaci√≥n importante en variables del entorno, y todas las buenas pr√°cticas que el trabajo exige. Si te gusto, dale un pulgar arriba: +1: y comp√°rtelo.&lt;/p&gt;

&lt;p&gt;hasta la pr√≥xima publicaci√≥n ...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Discoveries in Ruby(and Rails): Enumerable#minmax</title>
      <author>Ahmad khattab</author>
      <pubDate>Thu, 28 Oct 2021 20:04:26 +0000</pubDate>
      <link>https://dev.to/rockwell/discoveries-in-rubyand-rails-arrayminmax-6m7</link>
      <guid>https://dev.to/rockwell/discoveries-in-rubyand-rails-arrayminmax-6m7</guid>
      <description>&lt;p&gt;Hi. I'm ahmed, a Rails enthusiastic and i use in my daily life as a developer. This will hopefully be a series in which i write on small(tiny-tips) i discover while coding Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enumerableminmax"&gt;
  &lt;/a&gt;
  Enumerable#minmax
&lt;/h2&gt;

&lt;p&gt;Whenever you need to get the maximum and minimum value in any enumerable list. It returns a tuple which is an array of exactly two items(because tuples are not types in Ruby!). The first item being the &lt;code&gt;min&lt;/code&gt; and the second being the &lt;code&gt;max&lt;/code&gt; in &lt;code&gt;minmax&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;minmax&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [1,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list does not even have to be in any specific order, you can also use it with enumerables that are not ordered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;minmax&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [0,10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the farthest between a group of dates(with Rails extensions)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;today&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;minmax&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; [Thu, 28 Oct 2021, Sun, 31 Oct 2021 15:00:38.694977000 CDT -05:00] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you have a great day!. Happy Coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apidock.com/ruby/v2_5_5/Enumerable/minmax"&gt;Enumerable#minmax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://boringrails.com/tiny-tips"&gt;Rails Tiny tips&lt;/a&gt; by &lt;a href="https://twitter.com/_swanson"&gt;@matt swanson&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Pentest/networking project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Thu, 28 Oct 2021 19:58:56 +0000</pubDate>
      <link>https://dev.to/medpaf/pentestnetworking-project-22ha</link>
      <guid>https://dev.to/medpaf/pentestnetworking-project-22ha</guid>
      <description>&lt;p&gt;MedSec is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;/p&gt;

&lt;p&gt;Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;/p&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;/p&gt;

&lt;p&gt;If you want to become a contributor, make a pull request or issue.&lt;/p&gt;

&lt;p&gt;Waiting for your feedback. Kudos&lt;/p&gt;

&lt;p&gt;Link to the repository: &lt;a href="https://github.com/medpaf/medsec"&gt;https://github.com/medpaf/medsec&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>python</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>Type | Treat 2021 - Day 4</title>
      <author>Orta</author>
      <pubDate>Thu, 28 Oct 2021 19:20:37 +0000</pubDate>
      <link>https://dev.to/orta/type-treat-2021-day-4-3iie</link>
      <guid>https://dev.to/orta/type-treat-2021-day-4-3iie</guid>
      <description>&lt;h2&gt;
  &lt;a href="#type-treat-challenge-4"&gt;
  &lt;/a&gt;
  Type | Treat Challenge 4
&lt;/h2&gt;

&lt;p&gt;Welcome to the fourth &lt;code&gt;Type | Treat&lt;/code&gt; challenge! These challenges are a series of blog posts which have 2 code challenges in, one for beginners and one for intermediate TypeScript programmers. We're on day four, which means going over the answers from &lt;a href="https://devblogs.microsoft.com/typescript/type-treat-2021-day-3/"&gt;yesterday&lt;/a&gt; and have 2 new challenges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterdays-solution"&gt;
  &lt;/a&gt;
  Yesterday's Solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#beginnerlearner-challenge"&gt;
  &lt;/a&gt;
  Beginner/Learner Challenge
&lt;/h3&gt;

&lt;p&gt;I wonder if we over-indexed on the difficulty here, and we're interested if you dropped off somewhere through this task because we had less submissions than usual for this challenge. The goal was to have you build out a &lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;template string literal&lt;/a&gt; type which accounted for string input which &lt;em&gt;roughly&lt;/em&gt; matched how CSS's stringy variables worked.&lt;/p&gt;

&lt;p&gt;You started with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which accepts all possible strings, next we show some examples which should always fail. The key one here being that an empty string should fail: &lt;code&gt;""&lt;/code&gt;. Next we provided some valid input for you to work with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;in`&lt;/span&gt;

&lt;span class="c1"&gt;// Works with:&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Giving you a sense that a number can be used in the template slot - which allows for all sorts of possibilities. &lt;/p&gt;

&lt;p&gt;Next we gave samples with different prefixes, so &lt;code&gt;"in"&lt;/code&gt; and &lt;code&gt;"cm"&lt;/code&gt; would need to be handled. To get that right, you would need to use a union:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// Works with:&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we threw a curve ball - &lt;code&gt;"0"&lt;/code&gt; should also be acceptable, this is a bit of a curve ball, but also it's a bit of a trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// Works with:&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The lack of a unit is just an empty string unit! Only one more thing now, and that is allowing a space inbetween the number and unit. This could be done via another type also:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// Works with:&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12 cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;14 in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was is for the easy parts of the challenge. It's pretty tricky, because it requires that you understand that &lt;code&gt;number&lt;/code&gt; can be anything in the template string and to understand how a union can allow for different types of strings inside the type. That's all in the main docs, but it could be a lot of ideas to learn at once.&lt;/p&gt;

&lt;p&gt;This challenge also had a set of complications, cases where the version of the the &lt;code&gt;Length&lt;/code&gt; type we expected people to build would provide interesting edge cases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mf"&gt;0.3e21&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-12 cm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Click to learn about these cases&lt;/b&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mf"&gt;0.3e21&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Acted as a potential clue to an alternative answer for these failing cases:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;cm`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;number&lt;/code&gt; can be switched out with &lt;code&gt;bigint&lt;/code&gt; in the type of &lt;code&gt;Length&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- type Length = `${number}${Space}${Unit}`
&lt;/span&gt;&lt;span class="gi"&gt;+ type Length = `${bigint}${Space}${Unit}`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This meant you couldn't pass in &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt; but also broke &lt;code&gt;req("1.5cm")&lt;/code&gt; because you can't have point values. This could be fixed via:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bigint&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bigint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bigint&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Which describes both possible cases with a "." and without. This technique still doesn't handle the &lt;code&gt;req("-12 cm")&lt;/code&gt;, and actually, it introduces a whole new problem: &lt;code&gt;req("-12.-12cm")&lt;/code&gt; is allowed!&lt;/p&gt;

&lt;p&gt;We spotted a good answer from &lt;a href="https://twitter.com/danvdk/status/1453503071087169536"&gt;@danvdk&lt;/a&gt; which revolved around using string manipulation instead, by introducing a &lt;code&gt;Digit&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Digit&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Whitespace&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This solution correctly handles the case of &lt;code&gt;req("-12 cm")&lt;/code&gt; but via that &lt;code&gt;number&lt;/code&gt; would allow something like &lt;code&gt;req("1-22 cm")&lt;/code&gt; - which you can pretend is to handle an input range.  It wouldn't be hard to take this solution and reasonably cover additional edge cases. Very cool solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?#code/PTAEE0HsFcHICcCmoDul4GsCWA7A5qJDqAJ4zyjQBGi8AtAGbp0AukWANoi3QA4CGvWrjx1+dABYwAzsmkt+8FtF4AoEKH44AJqCGReXUBkSJeoPFgBuI0jFA4isnLNBd8LCdNBMKUlKAAttAAxhKgbJzc6mACQhSeiCSaSBbs+BGQDqbaAHQQ9rhYLFj8HBzJePxWyImguLzQLJoxbpDNkAw+XAAeWFScxSQANKBUTT6IHM0cWCZB-CQ0oAAG8vAiK-Xe-GPFmVmtwWE+SIjakIH5qq1QcDWgEoiKup0RiIGG-CzIsz-wZWko0Ci2WiWSIRgHF0y2gsgY0A4AH4biwSEJQABVHD7AC8oAARCFAgTQAAfQm4UkUgkE1RojEAZQEIWQ+NJ1MJdIZyAAMogPOF8SsACQAbxw0ECNHgAF9xcz+Kz5WLscVZSsbho7hQAIIABQAkj5oDgQiUiKMUIhYOUxsg4bY6g0JmwIhIsN4EWaLThWm6rGUsNpvsgsF0yNAEuiw94NngJB0KI4WDdveasERQEgAI4AChdLAAXKB+YKAJSgMWqUC10AaABKH0gDwAcvxW8DcHDQIGONBEEDQDW6xoACJZaSXZBoTCqWVasAAFSyeG4oHkih+2lGTyQsG8U8CyEQPX4ny43hQHpO0ikiN0ZRQiy9URukJczTvUO0ADF+JwoD4nmla4gAfFWI65nmtLllBiD5gSgg9AScG1tBBJICSaHZghMH8FQISofOi6gIyChKI8tCIKMkalgKeCeJk9qaFQRhumEiAhBgPjoJoDhSjKmg6MJlI4KSvBIAwWA9O+ThflgF6IIaOCNCw3jAaBEHVnWuGIQADFSOHoXhBIAIwAExGSRrQAOoSN8rEwM0gToLUDnEEQyCSYg0k9LxCRPLxHAYFeUjurgPG4KAxIoqoH7yKAp4sACarqUBoAgUB2kjiZiFmbkACsxLEbpGEWfpJVwQurSGs0DCmBwcZYAmzSeI54Z2NAej8NI3gEvpBK0fY34PixBHsauWSmsUdCXtIcmfo8WjaFwABatBZJp2WQWVpmDdVpH2Y5BHOZo5SQCgtjXsUg4ssgNAsNaArusgkrSrQwm6HUM0sHFCXNB5q2IPZt3SPdGVZeBu11hhlkxdhuV6TBZkACz1OJh21RG9gOQ8ZQcIQXR1KdDwCH1IijB+eAAupACEoBLg5LAHkEbnuloSWONACb+lkePIJCSnbq9MUOeUDGIPkTOemLBOS8tOwblxSDNAAVKe8TqWrysZkQrS+HoiAGEY15ZEgBPJM+OBtVkPyJYkgSyBwNTSLki0Ox6+DSKDYQAMKXIYWAhKGTOIAAst8-yQ1pMMaDL3iy5zBOXecAkfRQjoZAMlg2w47TfJmOCjMUrMp9aO6gAAVnCzQjhoJM4CmhdZrLM05gOJfaM85TJHRIcsCcOfpzKifEHUABSjLwfmopivpuQAMyIBZZmysSKxwfXYDh923jvaPoAXDgsAufw8zOK40XkDFvU0bfxB0QK0hRu53zb-UHQ4BUmghKyvDpV4JAaQxRrBvUErQaQKI8owToPDKqNxawaDqtsPQwCQFsVqObACrhOa0HgHxK6TFEiuCepAKmnNIwf2kngV+hAJj+CRKAWyyAMCOACG8Mh9QlLHhti3FwowvIbkUoYT6RCJAf05rgf4g4SgZBSvwbudBOgMFGCtYS7Q9yoBvOEJUIQoyhh-iHYgA8TgkMQB-EOsgrzFHvG1ZmEQARKJUe7GBc8VLSRxGidegRN4zzzHPdsrYfF+JqjcIAA"&gt;Our answer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intermediateadvanced-challenge"&gt;
  &lt;/a&gt;
  Intermediate/Advanced Challenge
&lt;/h3&gt;

&lt;p&gt;The intermediate challenge was on type literals mixed with generics functions. The challenge started with this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The goal was to keep track of string literals through this function. To do this, you need to switch the &lt;code&gt;str: string&lt;/code&gt; to be a type argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTitle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You know that the type argument has to be a string, which you can tell TypeScript via &lt;code&gt;&amp;lt;Str extends string&amp;gt;&lt;/code&gt;, then you can re-use the &lt;code&gt;Str&lt;/code&gt; in the return position:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTitle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Uppercase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'd think this would be it, but &lt;code&gt;str.toUpperCase&lt;/code&gt; actually converts the &lt;code&gt;str&lt;/code&gt; to a string! Tricky, you'd need to think creatively here and you have three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use an &lt;code&gt;as&lt;/code&gt; because you know better than the compiler:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTitle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Uppercase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Uppercase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;spooky&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;shouty&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/spooky&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Override &lt;code&gt;toUpperCase&lt;/code&gt; to support template literals:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Uppercase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or create a new function which supports template literals.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This would take the &lt;code&gt;"party"&lt;/code&gt; used on line 19 and convert it to &lt;code&gt;"&amp;lt;spooky&amp;gt;PARTY&amp;lt;/spooky&amp;gt;"&lt;/code&gt;. That change would remove the compiler error on &lt;code&gt;addTadaEmoji&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second part was about re-using the type parameters inside argument for the function. The challenge started with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupFooter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// validate string etc&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would lose string literals passed in as &lt;code&gt;str&lt;/code&gt;. You knew ahead of time that there were three separate parts of information you were interested in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupFooter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These could then be used inside the replacement for &lt;code&gt;string&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupFooter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which would correctly set up these variables for re-use later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupFooter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// validate string etc&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Successfully completing this challenge would show that &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; were not &lt;code&gt;string&lt;/code&gt; but the strings passed in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?#code/PTAEE0HsFcHIDcCmoDOiAupoAdQENQAbAS3XUOW0hXUQCdQBbPAa2IDsBzUAI2hQ6IUKADT52AE1AAzSAwAWeQoUgB3RInYAoEKACeMWHWQTIHbimyIAxsSUpQq+ZtBXI2CqEVIvSlepdsPDp0YiEAOlAAFWdeIXQdMGlEPHRoY1BiB3RFTANoJlZkHOLSCgdEAA90OgJLSEgWPQBCLUSIGFB2SFDrRCkc1NBrSAlkJ2JreX1OnJhOeUxVGEIpZboWTIdarPNxdvo6ORkjxmi9KwBlazpibExTVXZ8TBLQAAM8CQkor7wAUUYkAAVsR3pEAJKYNCIRjZXIfZgsRBRMqId7tLLsWCYZGIbB7N7oC7ILJEBoCLigN40W5Uki0WqERzOZ6kYaQRhCTLPAC0oHa1jwz3yhWRmUwQWEvD0w0UXEJsTG0g4pGIkGekGkiKKqPI6IA-G1pNB2NZQhqxSi0QAeS41UBVWiSBy08wAPgAFLSAFyge10ACUfveNvqjT07oAJABvACq2CsdCFaDtNXdAF8bcBw013e9QDGtKASxz2DRUPIYMTQABeVA1cLoSAJpMAYTwaE9gfwDlb9BTiDTdHdxdLxjSdGeodzkdjKCr0GJWZzVAj+a0GbaI3LmGMAEdoMRjChfhIAUDQXXQN6an63Vwe7X3YXQBP0s9aXXa-WAERhtc8wABQAQQAJSicBs1nd1fy3HcKy+H4-kBEFiGvW86D9f8YNAiCoNXBo81-J8X3eH10D+H15xqDMfSCEI9B9DEEMwJCokgIDqEZDDfQbOlOFI18ty0VjUAwHAAAkUjGBh627OsXyLUsywrUJ9WvJFrX1T1fwY4kSLaFTiG1T0DyPE8zwvNDPXUihAx7QsxxUkt2JQy9iFstFA2c0ARJU9jOO4+gvP1HyRN0AAZDBYAcHhkCrdh4jEHIyRQPQaFhGY4B8NBMBwLZ8CIUgNOBYUmnaeKhX4UlMEUbJIB5Rk8HNRxSGmAhmCmQQiBSKc9mwI5OFqRhIhiRB2kGyBhrwM5OGIJAHFFHgWs2AgRkYZheTQBjUn6fi9lkBg3lkHp6ExdgjuYC12EiKACh3JAQmpeQyQ4ZsitOni+EwFVJGyug0EIaR2hUSluGJKweSu1J1WeJwXFFGqXrJE0zRuv1jVNc04fEtJsAAMQaRkbQAOVm5AnU0CRXRqcwxAAET2x1qmp2mBLEEDvhPCpWZdA6uC9Pj3ljcmuQzERYyZ2gJdjLmJB5jN3h7ZTS10eAlGIc9aAF7gMGsXz3ynV9fJU9gKfvRtLAZXSRBIgBtAAGABdXtQDFxARFN0ttcQS26HCa3SFth2AEZXc7UBpc973XO5oQUH9wOPGD387cDe2ACYI4ceWed8rcIrACExj8WUUEawY8k6TgMBe5BbgWV4STixB-G3DUKy++hrzynAibOuhdKZrge4AWWsS55U9yS-DUDRnkzx3M9DkRxtACF2EZJL0EM7uA-Nrl2hcgA9I19-CX3j5Us+tAvpD890U+jS0IA"&gt;Our answer&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The Challenge
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#beginnerlearner-challenge"&gt;
  &lt;/a&gt;
  Beginner/Learner Challenge
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?#gist/927ccc66ae3022dc64c4f650109b937a-13"&gt;Make some candy bowls. Then make some very specific bowls&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intermediateadvanced-challenge"&gt;
  &lt;/a&gt;
  Intermediate/Advanced Challenge
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?#gist/927ccc66ae3022dc64c4f650109b937a-14"&gt;Run a set of pumpkin competitions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-share-your-solution"&gt;
  &lt;/a&gt;
  How To Share Your Solution
&lt;/h2&gt;

&lt;p&gt;Once you feel you have completed the challenge, you will need to select the &lt;strong&gt;Share&lt;/strong&gt; button in the playground. This will automatically copy a playground URL to your clipboard.&lt;/p&gt;

&lt;p&gt;Then either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to Twitter, and create a tweet about the challenge, add the link to your code and mention the &lt;a href="https://twitter.com/typescript"&gt;@TypeScript&lt;/a&gt; Twitter account with the hashtag &lt;a href="https://twitter.com/search?q=%23TypeOrTreat"&gt;#TypeOrTreat&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Leave us a comment with your feedback on here!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#best-resources-for-additional-help"&gt;
  &lt;/a&gt;
  Best Resources for Additional Help
&lt;/h3&gt;

&lt;p&gt;If you need additional help you can utilize the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The New TypeScript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://discord.com/invite/typescript"&gt;TypeScript Community Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The comments on each &lt;a href="https://dev.to/typescript"&gt;Dev.to&lt;/a&gt; post!&lt;/li&gt;
&lt;li&gt;Our previous &lt;a href="https://www.typescriptlang.org/play/#gist/303ebff59a6fc37f88c86e86dbdeb0e8-0"&gt;&lt;code&gt;Type | Treat&lt;/code&gt; 2020 challenges&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Typing :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How to Create a Weather App in 5 mins</title>
      <author>Ro</author>
      <pubDate>Thu, 28 Oct 2021 19:14:32 +0000</pubDate>
      <link>https://dev.to/iamrosalp/how-to-create-a-weather-app-in-5-mins-27f3</link>
      <guid>https://dev.to/iamrosalp/how-to-create-a-weather-app-in-5-mins-27f3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Weather is something that greatly affects our life. Wherever we are if we know what is coming like snow or rain, we can make inform decisions. Undoubtedly, people find weather forecasting helpful to know about the weather conditions which explains why the need for weather app is growing. Weather applications make sure that users are informed to be prepared for the weather conditions.&lt;/p&gt;

&lt;p&gt;So if you're planning to create you own weather application you're in the right place. By the end of this article, you‚Äôd have learned how to build a Weather App using Appsmith. We‚Äôre going learn the following concepts-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connecting to the GraphQL API&lt;/li&gt;
&lt;li&gt;Writing queries to fetch data from API&lt;/li&gt;
&lt;li&gt;Binding query data to widgets&lt;/li&gt;
&lt;li&gt;Writing Javascript in Appsmith&lt;/li&gt;
&lt;li&gt;Sharing your application and managing permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you‚Äôve got a good overview of what we‚Äôre going to be building, so let‚Äôs get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-appsmith"&gt;
  &lt;/a&gt;
  Why to use Appsmith
&lt;/h2&gt;

&lt;p&gt;Coding a weather app is difficult and time consuming. To make our development easier and faster we'll be using Appsmith.&lt;/p&gt;

&lt;p&gt;Appsmith is an open-source platform that lets you create powerful apps, admin panels, dashboards quickly using a simple drag and drop interface. You can also connect your app to various Datasources like Firestore, REST APIs, MySQL, Postgres, MongoDB and many more.&lt;/p&gt;

&lt;p&gt;So now head over to appsmith.com and sign in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-application"&gt;
  &lt;/a&gt;
  Creating the Application
&lt;/h2&gt;

&lt;p&gt;We're going to build a simple weather app so lets start creating our app. We want our weather app to display details like weather description, wind speed, temperature, weather icon and many more.&lt;/p&gt;

&lt;p&gt;For this application we're using GraphQL weather API. You can checkout the api &lt;a href="https://graphql-weather-api.herokuapp.com/"&gt;here&lt;/a&gt;. Its free and gives accurate weather conditions.&lt;/p&gt;

&lt;p&gt;We‚Äôre going to be creating a new application, so click on the create new button. This will redirect you to our newly created application. Rename the application as &lt;strong&gt;Weather App&lt;/strong&gt; by simply double-clicking on the existing name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-ui-and-accessing-widget-properties"&gt;
  &lt;/a&gt;
  Building UI and Accessing Widget Properties
&lt;/h2&gt;

&lt;p&gt;To build our beautiful UI we'll be using a Container widget, so that we can group our other widgets inside this.&lt;/p&gt;

&lt;p&gt;We want a Image Widget and eight Text Widgets. Click on the + icon next to the Widgets from entity explorer. You‚Äôll find a list of UI widgets that you can use to build the applications. Drag and drop a Text widget inside the container and add their associated names like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Temperature&lt;/li&gt;
&lt;li&gt;City Name&lt;/li&gt;
&lt;li&gt;Humidity&lt;/li&gt;
&lt;li&gt;Min Temp&lt;/li&gt;
&lt;li&gt;Max Temp&lt;/li&gt;
&lt;li&gt;Wind Speed&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make our UI look great we'll set the styling properties of Text Widgets as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cell Background Color: #2E3D49&lt;/li&gt;
&lt;li&gt;Text Color: #FFF&lt;/li&gt;
&lt;li&gt;Border Color: #FFF&lt;/li&gt;
&lt;li&gt;Text Size: #Heading2&lt;/li&gt;
&lt;li&gt;Text Align: Center&lt;/li&gt;
&lt;li&gt;Border Width: 1px&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our basic UI is done, now lets create our first API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-with-graphql"&gt;
  &lt;/a&gt;
  Connecting with GraphQL
&lt;/h2&gt;

&lt;p&gt;To establish a new connection, follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a connection to API by clicking the plus icon under API section or you can even use CURL import.&lt;/li&gt;
&lt;li&gt;Lets rename our query to FetchWeather.&lt;/li&gt;
&lt;li&gt;We‚Äôll write a POST request and use GraphQL query to list down all weather details.&lt;/li&gt;
&lt;li&gt;Next, paste the URL of GraphQL weather API that I mentioned earlier.&lt;/li&gt;
&lt;li&gt;We‚Äôll have to set headers in order to access the API. Set content-type to application/json.&lt;/li&gt;
&lt;li&gt;Now, we‚Äôll have to write a GraphQL query in the request body to list all the database games. This will require an object with query as key and the GraphQL query value associated with it to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy-paste the below code snippet in request body-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{
JSON.stringify({
    variables: {
            city: cityName.text
    },
    query: `
        query ($city: String!){
            getCityByName(name: $city){
   name
   country
   coord {
     lon
     lat
   }
   weather {
     summary {
       title
       description
       icon
     }
     temperature {
       actual
       min
       max
     }
     wind {
       speed
       deg
     }
     clouds {
       all
       visibility
       humidity
     }
     timestamp
   }
 }
        }
    `
})
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have to give the city name in the query to fetch weather info. We are taking the city name from our app UI and accessing it here using &lt;em&gt;cityName.text&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, hit the Run button to run the query. You should see a the weather details in a JSON format in the response tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxWmJQxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywy495f9yhkt8pk42gc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxWmJQxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywy495f9yhkt8pk42gc7.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we're done fetching weather details. Lets head to the next section to complete our app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#completing-onclick-action-for-submit-button"&gt;
  &lt;/a&gt;
  Completing onClick action for Submit Button
&lt;/h2&gt;

&lt;p&gt;Now, we'll see how to load data from API to our main page app after click the submit button.&lt;/p&gt;

&lt;p&gt;Inside the property pane of Submit Button, we‚Äôll find a onClick Action, and here we‚Äôll have to bind the data from FetchWeather API. Use the moustache syntax and add the below code snippet-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{FetchWeather.run()}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this the data is fetched lets bind this data with our main page app. We have eight text widgets as follows-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Temperature&lt;/li&gt;
&lt;li&gt;City Name&lt;/li&gt;
&lt;li&gt;Humidity&lt;/li&gt;
&lt;li&gt;Min Temp&lt;/li&gt;
&lt;li&gt;Max Temp&lt;/li&gt;
&lt;li&gt;Wind Speed&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now head to the property pane of Humidity Text widget and set the text property to the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Humidity
{{FetchWeather.data.data.getCityByName.weather.clouds.humidity}}%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the screenshot of how the response looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5bl4X-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wt3eydc0ywfz9g7egsc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5bl4X-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wt3eydc0ywfz9g7egsc.png" alt="humidity" width="630" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, we can now see our data from the GraphQL API on our Text widget; similarly, let‚Äôs set the Text property of other text widgets to show the contents from the API:&lt;/p&gt;

&lt;p&gt;Wind speed text widget set the Text property to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Wind Speed
{{FetchWeather.data.data.getCityByName.weather.wind.speed}} mps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Min Temp text widget set the Text property to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Min Temp
{{Math.round(FetchWeather.data.data.getCityByName.weather.temperature.min - 273.15)}} ¬∞C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Temperature fetched from API is in Kelvin to convert it into degree celsius we're subtracting the value from 273.15 and using Math.round() to round the value.&lt;/p&gt;

&lt;p&gt;Max Temp text widget set the Text property to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Max Temp
{{Math.round(FetchWeather.data.data.getCityByName.weather.temperature.max - 273.15)}} ¬∞C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly setting other text values.&lt;/p&gt;

&lt;p&gt;In the API we also get a weather icon, but these are codes like 50d or 200 and we cannot use them to display image. So set the image property with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ `http://openweathermap.org/img/w/`+`${FetchWeather.data.data.getCityByName.weather.summary.icon}`+`.png`
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're concatenating openweather's url with our api code &lt;strong&gt;"FetchWeather.data.data.getCityByName.weather.summary.icon"&lt;/strong&gt; this will give us image of the corresponding code. Below image shows response-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx_ODyem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1by8eyvyqmfyobxyh7gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx_ODyem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1by8eyvyqmfyobxyh7gb.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-weather-app"&gt;
  &lt;/a&gt;
  Complete Weather App
&lt;/h2&gt;

&lt;p&gt;Here's how our completed App looks like-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6lpJQO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0iexsu7f7om7ldxzkah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6lpJQO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0iexsu7f7om7ldxzkah.png" alt="Image description" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Deploy your application and share it with friends. And thats it, we're done!&lt;/p&gt;

&lt;p&gt;In this tutorial we learn how to connect our app to a GraphQL API and how to create and read data. We also learned to use Image, Text widget and how to customize them for our purposes.&lt;/p&gt;

&lt;p&gt;If you found this tutorial helpful, checkout their &lt;a href="https://github.com/appsmithorg/awesome-appsmith"&gt;Appsmith Github&lt;/a&gt; page for more such blogs.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>graphql</category>
    </item>
    <item>
      <title>3 Stages of Design thinking </title>
      <author>Bryan Ferguson</author>
      <pubDate>Thu, 28 Oct 2021 19:12:24 +0000</pubDate>
      <link>https://dev.to/bryanalphasquad/3-stages-of-design-thinking-4n14</link>
      <guid>https://dev.to/bryanalphasquad/3-stages-of-design-thinking-4n14</guid>
      <description>&lt;h1&gt;
  &lt;a href="#design-thinking"&gt;
  &lt;/a&gt;
  Design thinking
&lt;/h1&gt;

&lt;p&gt;Design thinking is a strategy-making process that avoids making mistakes by applying the use of certain tools from the world of design and shifting the focus to human behavior and analyzing how certain things will affect different individuals. It was popularized by David M. Kelly and Tim Brown of IDEO and Roger Martin of the Rotman School. Generally, whenever web developers set strategies to design a product based on what their clients/users want they often stumble. Either they collect a lot of backward-looking data, which doesn‚Äôt tell them what future customers really want. Or they make risky bets based on instinct instead of evidence. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-3-major-stages"&gt;
  &lt;/a&gt;
  The 3 Major Stages
&lt;/h1&gt;

&lt;p&gt;The major stages of the design thinking process ensure that your design will be able to meet your future customers‚Äô wants. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-stage-invent-the-future"&gt;
  &lt;/a&gt;
  First stage: Invent the Future
&lt;/h2&gt;

&lt;p&gt;In the first stage, you start with forming a few theories about what your users might want, by immersing yourself in their lives. Instead of polling them about specific design features, you observe and ask questions about their behavior. The process stops at realizing what they might want (that you currently don‚Äôt have), and you move on to the next step. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-stage-test-your-ideas"&gt;
  &lt;/a&gt;
  Second stage: Test Your Ideas
&lt;/h2&gt;

&lt;p&gt;Use iterative prototyping on the designs you‚Äôve created and conduct a few quick experiments to see how users respond. Iterative prototyping is basically a repeating cycle of designing, prototyping, testing, and refining multiple ‚Äúversions‚Äù of a product (in this case a web design). After you‚Äôre done with the iterative prototyping process, you can make the necessary changes and move on to the final stage of the design thinking process.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-stage-bring-it-to-life"&gt;
  &lt;/a&gt;
  Third stage: Bring it to Life
&lt;/h2&gt;

&lt;p&gt;The last stage of the design thinking process involves bringing the new design to life. After you‚Äôre done with the iterative prototyping process and picking a winner, you start developing the final product based on all the points collected in the previous two stages. &lt;br&gt;
Organizing your workflow makes way for improvement and innovation. Design thinking is about solving problems. The same was the case for the manufacturing industry when Total Quality Management was introduced in the 1980s by Toyota. Design thinking has the potential to do for innovation in web development exactly what TQM did for manufacturing. By strategically structuring your whole design process, you can not only improve the process as is but also make room for innovation. Because in the first stage instead of asking the user/client for what they want, what you do is you observe their behaviors and analyze them based on what they would want but not know yet. What this does is that it makes room for innovation because you usually end up making a design the client didn‚Äôt actually ask for but wanted and didn't know that they wanted that design. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Human-centered problem solving requires a fair bit of imagination. Design thinking can help you unlock new creative avenues that later help you come up with new strategies for designing a product. In a nutshell, Design Thinking is about improving products by analyzing user behavior and understanding how they interact with products along with the conditions where they operate the product.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build A Modern Discord Bot from Scratch. Learn the basics</title>
      <author>Elijah Trillionz</author>
      <pubDate>Thu, 28 Oct 2021 18:49:24 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/build-a-modern-discord-bot-from-scratch-learn-the-basics-973</link>
      <guid>https://dev.to/elijahtrillionz/build-a-modern-discord-bot-from-scratch-learn-the-basics-973</guid>
      <description>&lt;p&gt;Discord bots help you interact with members of a server as well as moderate the server. A discord bot can send messages on the server, message a user directly (DM), ban a user, promote and demote a user and so much more.&lt;/p&gt;

&lt;p&gt;As a server owner, you are not always going to be present to monitor your server, but a bot can, and it does it way faster.&lt;/p&gt;

&lt;p&gt;You may not be a server owner, but you want to create a bot for a server you belong to or maybe for public use (available for other servers) this article will help you do that.&lt;/p&gt;

&lt;p&gt;Before we jump right into code, let's see how Discord bot works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audience Intended for&lt;/strong&gt;&lt;br&gt;
This article is mainly focused on beginners who don't know how Discord bots work, and how to build them. So if you're already familiar with building discord bots, you may not find something new here.&lt;/p&gt;

&lt;p&gt;Though it's for beginners I do expect you to know a little about working with NodeJS and npm.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-discord-bot-works"&gt;
  &lt;/a&gt;
  How Discord bot works
&lt;/h2&gt;

&lt;p&gt;If you're in a server where there are bots you may have noticed that these bots are similar to users account.&lt;/p&gt;

&lt;p&gt;They usually have these bot-looking profile pictures, seem to always be online, reply to messages very fast. These are cool, but how do all these things work?&lt;/p&gt;

&lt;p&gt;There is a type of user dedicated for automation called bot accounts. They look a lot like the user's account.&lt;/p&gt;

&lt;p&gt;The bot accounts are authenticated using a token (rather than a username, password), and this token gives these accounts full access to all Discord API routes.&lt;/p&gt;

&lt;p&gt;So basically,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create a bot on Discord developers website (more details soon)&lt;/li&gt;
&lt;li&gt;Assign roles to the bot i.e granting permissions to the bot&lt;/li&gt;
&lt;li&gt;Create an OAuth scope for the bot (simply, a link for authentication)&lt;/li&gt;
&lt;li&gt;Add the bot to one of our servers&lt;/li&gt;
&lt;li&gt;Boom! The bot starts performing magic like replying to messages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pretty easy. Though I must mention before the bots start to perform magic you'd need to have connected to Discord API, and logged the bot in. This is how we will create this bot&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the bot in Discord&lt;/li&gt;
&lt;li&gt;Create permissions for our bot&lt;/li&gt;
&lt;li&gt;Generate an OAuth link and use it to connect to our discord server&lt;/li&gt;
&lt;li&gt;We will then create a folder for the bot in our computer, open VSCode&lt;/li&gt;
&lt;li&gt;Install some dependencies, write some code to connect to Discord API&lt;/li&gt;
&lt;li&gt;With that our bot is online&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don't fret if you don't get it now. More will be explained in detail later.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-can-you-build-with-a-discord-bot"&gt;
  &lt;/a&gt;
  What can you build with a discord bot?
&lt;/h2&gt;

&lt;p&gt;Discord bots can span from a hubby-friendly bot to a very powerful bot. You can build anything with a discord bot. But here are some ideas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A YouTube video fetcher&lt;/li&gt;
&lt;li&gt;Interesting Tweet fetcher&lt;/li&gt;
&lt;li&gt;A meme fetcher from Reddit&lt;/li&gt;
&lt;li&gt;A game&lt;/li&gt;
&lt;li&gt;A scheduler with a calendar&lt;/li&gt;
&lt;li&gt;A music player and song fetcher&lt;/li&gt;
&lt;li&gt;Server manager&lt;/li&gt;
&lt;li&gt;Quiz bot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so much more. Here are some more &lt;a href="https://turbofuture.com/internet/Discord-Bot-Ideas"&gt;Discord bot ideas&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-bot"&gt;
  &lt;/a&gt;
  About bot
&lt;/h2&gt;

&lt;p&gt;The bot we will create for this article is going to be very basic, but it will contain almost all you need to build that super bot of yours.&lt;/p&gt;

&lt;p&gt;With this bot, we will be able to reply to messages (commands), view message history, send DM's.&lt;/p&gt;

&lt;p&gt;So try to follow along as much as you can. I will use my discord server for this project.&lt;/p&gt;

&lt;p&gt;If you don't have a server you own or manage, you should create one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-create-our-first-bot"&gt;
  &lt;/a&gt;
  Let's Create Our First Bot
&lt;/h2&gt;

&lt;p&gt;Just a quick reminder that this is a follow along with this article. So try to do what I do/did as you read.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-bot"&gt;
  &lt;/a&gt;
  Create Bot
&lt;/h3&gt;

&lt;p&gt;The first step we will take is to create the bot on Discord developers page. To create a bot you first need to create an application.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;So head up to &lt;a href="https://discord.com/developers/applications"&gt;https://discord.com/developers/applications&lt;/a&gt;, click create &lt;strong&gt;New Application&lt;/strong&gt; at the top right corner.&lt;/li&gt;
&lt;li&gt;Enter the name of the app. You can name it whatever you want, but for the sake of this tutorial, I'll name it &lt;em&gt;Buddy&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hurray! You just created your first discord application. Now let's create the bot.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Bot&lt;/strong&gt; in the left side nav&lt;/li&gt;
&lt;li&gt;Now click &lt;strong&gt;Add Bot&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;A modal will pop up, simply click the blue button to continue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yahoo! A wild bot has appeared! Ready to give this bot life?.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bot-permissions-and-oauth"&gt;
  &lt;/a&gt;
  Bot Permissions and OAuth
&lt;/h3&gt;

&lt;p&gt;Now we need to define some permissions for this bot, but to do this we have to create an OAuth scope first. It's simple&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;OAuth2&lt;/strong&gt; in the left sidenav.&lt;/p&gt;

&lt;p&gt;Here you will find some checkboxes with a sub-heading called "SCOPES".&lt;/p&gt;

&lt;p&gt;Look for bot in the middle column, tick it.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#defining-permissions"&gt;
  &lt;/a&gt;
  Defining Permissions
&lt;/h4&gt;

&lt;p&gt;Another set of checkboxes under a sub-heading called "BOT PERMISSIONS" will display (only if you clicked tick in the first set of checkboxes)&lt;/p&gt;

&lt;p&gt;Now select the permissions you want for your bot, again for the sake of this tutorial we will select.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View channels (this is required).&lt;/li&gt;
&lt;li&gt;Send messages.&lt;/li&gt;
&lt;li&gt;Embed links.&lt;/li&gt;
&lt;li&gt;Manage messages.&lt;/li&gt;
&lt;li&gt;Read message history.&lt;/li&gt;
&lt;li&gt;Mention everyone.&lt;/li&gt;
&lt;li&gt;Add reactions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That would be all the permissions we need for this bot.&lt;/p&gt;

&lt;p&gt;Once you're done, scroll back to the first set of checkboxes ("SCOPES") and copy the link below.&lt;/p&gt;

&lt;p&gt;Open a new tab in your browser and paste that link, next thing is to select the server you want the bot in. Then click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, you will see a list of permissions that we selected, you can simply click &lt;strong&gt;Authorize&lt;/strong&gt; to move on, verify you are a human and that will be all.&lt;/p&gt;

&lt;p&gt;If you check the Discord server you invited this bot into, you'd see that the bot is there but offline. Now it's time to make it come alive.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-to-discord-api"&gt;
  &lt;/a&gt;
  Connecting to Discord API
&lt;/h2&gt;

&lt;p&gt;I believe you already have a folder set up on your local machine. If not do that now.&lt;/p&gt;

&lt;p&gt;For this tutorial, I will make use of NodeJS. You can use other languages like Python to build Discord bots too.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-our-environment"&gt;
  &lt;/a&gt;
  Setting up our environment
&lt;/h3&gt;

&lt;p&gt;Since we have our folder ready, open up a terminal and run &lt;code&gt;npm init -y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this to run you need to have NodeJS and NPM installed in your local machine (specifically NodeJS 16.6.0 or newer).&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h4&gt;

&lt;p&gt;We will need just two dependencies. - Discord.js: &lt;code&gt;npm install discord.js&lt;/code&gt; - Nodemon (dev dependency): &lt;code&gt;npm install -D nodemon&lt;/code&gt;&lt;br&gt;
Run the commands above to install the dependencies.&lt;/p&gt;

&lt;p&gt;Discord.js allows us to interact with the Discord API in NodeJS.&lt;/p&gt;

&lt;p&gt;Nodemon restarts the app whenever will make and save new changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a file called &lt;em&gt;app.js&lt;/em&gt;. You can call it anything like bot.js or index.js.&lt;/p&gt;

&lt;p&gt;Open your &lt;em&gt;package.json&lt;/em&gt; file and change &lt;strong&gt;main&lt;/strong&gt; to the name of the file you just created.&lt;/p&gt;

&lt;p&gt;Next copy these JSON scripts into the scripts property in the  &lt;em&gt;package.json&lt;/em&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node app"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;em&gt;config&lt;/em&gt; and a file called &lt;em&gt;default.js&lt;/em&gt;; we will store our secrets here.&lt;/p&gt;

&lt;p&gt;Copy the following into &lt;em&gt;config/default.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;DISCORD_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR TOKEN HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace 'YOUR TOKEN HERE' with your discord token.&lt;/p&gt;

&lt;p&gt;You can find your discord token in the discord developers. Click your application, click &lt;em&gt;Bot&lt;/em&gt; at the left side nav, now click &lt;em&gt;Copy&lt;/em&gt; (close to the bot's profile pic).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a file in the config folder, call it &lt;em&gt;config.js&lt;/em&gt;. So you have &lt;em&gt;config/config.js&lt;/em&gt;. In this file, we will have all of our configurations.&lt;/p&gt;

&lt;p&gt;These configurations include commands, prefix(es), and Intents.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Commands are simply commands that the bot will respond to. So whenever a user types a command in the discord server, the bot will respond accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prefix or prefixes (can vary) is a command prefix. For this bot, we will have just one prefix. A prefix is used just before a command, e.g !get-meme. ! Is a prefix while get-meme is the command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can as well call !get-meme as the command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intents are new, but they state the permissions your bot requires. Without these intents stated, your bot will not function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-a-discord-bot"&gt;
  &lt;/a&gt;
  Build a Discord Bot
&lt;/h3&gt;

&lt;p&gt;Let's first make the bot come online.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;config/config.js&lt;/em&gt; and import Intents as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and paste the code below afterward&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGE_REACTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGE_TYPING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGE_TYPING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGE_REACTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the permissions we want our bot to have, so we are simply destructuring it from Intents.FLAGS provided by 'discord.js'.&lt;/p&gt;

&lt;p&gt;Create an array, call it "botIntents", and copy-paste the variables above into it, so you have something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;botIntents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGE_REACTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DIRECT_MESSAGE_TYPING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGE_TYPING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GUILD_MESSAGE_REACTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now export botIntents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;botIntents&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;app.js&lt;/em&gt; import the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;botIntents&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then paste this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;intents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;botIntents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;partials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CHANNEL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we simply create a new client through the &lt;code&gt;Client&lt;/code&gt; class from 'discord.js', and pass in some props.&lt;/p&gt;

&lt;p&gt;The first prop is intents which are our botIntents, and the last is partials; an array, this is so our bot can be able to send direct messages. If you don't need this feature you can remove the prop&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have access to the Discord API, we can now make listen for events.&lt;/p&gt;

&lt;p&gt;The first event we will listen for is onready. In other words, when the bot is ready to go online&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged in as &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply log to the console the name of the bot when the bot is ready to come online.&lt;/p&gt;

&lt;p&gt;We are almost there. Before our bot will come online, we will need to log in with our Discord token.&lt;/p&gt;

&lt;p&gt;At the bottom of &lt;em&gt;app.js&lt;/em&gt; copy-paste this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DISCORD_TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall, the config file is an object that holds our Discord token.&lt;/p&gt;

&lt;p&gt;Now run the app, go to your discord server and you'll see the bot online.&lt;/p&gt;

&lt;p&gt;Though the bot is online, it cannot send any messages or reply to any messages. So let' work on that next.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-commands"&gt;
  &lt;/a&gt;
  Setting up Commands
&lt;/h4&gt;

&lt;p&gt;I usually use RegEx to set up commands and use switch and case to check for what command was used. This is when the bot listens for different commands.&lt;/p&gt;

&lt;p&gt;But this bot is a simple one, so we will keep things simple.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;config/config.js&lt;/em&gt;, let's register some commands. Create an object called &lt;code&gt;commands&lt;/code&gt; and paste in the following like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tellJoke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tell-a-joke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastMsgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;last-messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So these are the commands our bot will listen for.&lt;/p&gt;

&lt;p&gt;Before we export, create a variable and call it &lt;code&gt;prefix&lt;/code&gt;, assign '!' to it. You can use any other prefix of your choice like '$'. So we have &lt;code&gt;const prefix = '!';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Export both the commands and prefix as commands and prefix respectively.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;app.js&lt;/em&gt;, import commands and prefix from &lt;em&gt;config/config.js&lt;/em&gt;. Simply add &lt;code&gt;commands, prefix&lt;/code&gt; to the curly braces around &lt;code&gt;botIntents&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy-paste the following into &lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;messageCreate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// do nothing if prefix isn't used&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I do not understand your command&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh wow, a lot is going on here. Let's break it down, shall we?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We listened for an event called &lt;code&gt;messageCreate&lt;/code&gt;, there are others like &lt;code&gt;messageDelete&lt;/code&gt;, &lt;code&gt;messageReactionAdd&lt;/code&gt;, etc. Check the &lt;a href="https://discord.js.org/#/docs/main/stable/class/Client"&gt;docs&lt;/a&gt; for all.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;messageCreate&lt;/code&gt; event returns a msg parameter containing the message info.&lt;/li&gt;
&lt;li&gt;Next thing we did is check if the message is from a bot in &lt;code&gt;msg.author.bot&lt;/code&gt;. Here we want to make sure we ignore messages that are from bots.&lt;/li&gt;
&lt;li&gt;Also we ignore messages that do not contain our declared prefix ('!').&lt;/li&gt;
&lt;li&gt;Next stop is to get the actual message without the prefix, that's why we slicing out the prefix. And then we assign it to userCmd (as in user command).&lt;/li&gt;
&lt;li&gt;Finally, we checked if the content of the message (without the prefix now) is the same thing as our first command (i.e getName). If it is the same then&lt;/li&gt;
&lt;li&gt;we replied to the user with his/her username using (msg.author.username). Find more on &lt;a href="https://discord.js.org/#/docs/main/stable/class/Message"&gt;messages in the docs&lt;/a&gt;. If it's not the same&lt;/li&gt;
&lt;li&gt;we replied with another message "I do not understand your command".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the changes. Go to your discord server, type in any message with the prefix and see the response. Now type in '!get-name' and see the response as well.&lt;/p&gt;

&lt;p&gt;You can make the message a little nicer with &lt;code&gt;Your discord username is ${msg.author.username}&lt;/code&gt;. This is not exactly useful in real life bot; returning the user's username. But at least it shows you what's possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;br&gt;
To add the rest commands, we will just add more &lt;code&gt;else if&lt;/code&gt; to the initial if-chain. Like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tellJoke&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HTML is a programming language&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bad joke i guess, unless i don't have any jokes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't be sad! This is not the end of the road&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userCmd&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastMsgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getLastMsgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I do not understand your command&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the last messages we will create a function in &lt;em&gt;app.js&lt;/em&gt; called &lt;code&gt;getLastMsgs&lt;/code&gt; and pass in one argument.&lt;/p&gt;

&lt;p&gt;Traditionally if each command your bot listens to has an ambiguous amount of things to do, it is often recommended to break these tasks into functions, for readability.&lt;/p&gt;

&lt;p&gt;Also, you could put the functions in a separate file inside the same folder, you can call the folder &lt;em&gt;actions&lt;/em&gt; or something.&lt;/p&gt;

&lt;p&gt;Am not saying you should do this now, am just saying it's better to do it this way if the bot has a lot to do. But this bot doesn't do much so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Elijah-trillionz/advanced-discord-bot"&gt;Here is an example&lt;/a&gt;. The bot's project was canceled though, but it should show you how bots with lots of tasks get structured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving on&lt;/strong&gt;&lt;br&gt;
Copy-paste this into the &lt;code&gt;getLastMsgs&lt;/code&gt; function, (You can create an asynchronous function if you haven't) like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLastMsgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fetching the last 10 messages&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Last ten messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Technically we are passing the msg parameter we received from the &lt;code&gt;onmessageCreate&lt;/code&gt; event. So in the current channel where the command was received (could be a DM or server), the last ten messages will be fetched.&lt;/p&gt;

&lt;p&gt;The fetch method is provided by the &lt;a href="https://discord.js.org/#/docs/main/stable/class/MessageManager?scrollTo=fetch"&gt;Discord API&lt;/a&gt;, you should read about it after this.&lt;/p&gt;

&lt;p&gt;The result of this is an array of ten messages, it's not like a traditional array that you can access each item using an index. For example, if you want to get the first message in the array, you'd have to use the &lt;code&gt;.first()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;So the first messages' content would be accessed like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// don't add this to the function, just a showcase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another good thing is, we can loop through each array item. So before the &lt;code&gt;return&lt;/code&gt; statement in the &lt;code&gt;getLastMsgs&lt;/code&gt; function, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastTenMsgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can loop through with &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt;, we also have access to the &lt;code&gt;filter&lt;/code&gt; method&lt;/p&gt;

&lt;p&gt;Now change the &lt;code&gt;return&lt;/code&gt; statement to lastTenMsgs. In other words, your function should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLastMsgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// fetching the last 10 messages&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastTenMsgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;lastTenMsgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before you save, remember to pass in &lt;code&gt;async&lt;/code&gt; in your &lt;code&gt;messageCreate&lt;/code&gt; event function. I.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;messageCreate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save the app, and test the new commands. The "!last-messages" command will throw an array, we will fix that soon. But for now, let's spice up the bot a little&lt;/p&gt;

&lt;p&gt;First thing is first, not all messages would be replied, rather a message would be created by the bot. Let's do that with the "!tell-a-joke" command.&lt;/p&gt;

&lt;p&gt;Instead of msg.reply, do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HTML bla bla bla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will know more of these when you study the docs, the docs is well written.&lt;/p&gt;

&lt;p&gt;Another thing is, we said the bot should be able to send direct messages. So let's do that with the "!last-messages" command.&lt;/p&gt;

&lt;p&gt;Instead of msg.reply, do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't fix the error yet. We are getting to that now.&lt;/p&gt;

&lt;p&gt;Lastly, you must have noticed some bots in Discord sending/replying messages with colors by the side, bold words, with footers and headers like it's a blog post.&lt;/p&gt;

&lt;p&gt;Well, it's not difficult to do. But before we do that, I should let you know that you can make a word or text bold traditionally.&lt;/p&gt;

&lt;p&gt;It's almost like it's markdown, but not all recognized markdown syntax can be used. Let's make the "!tell-a-joke" text bold with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**HTML** bla bla bla.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;I really don't have a joke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you test the command, you'd notice HTML is now bold, and "I really don't have a joke" on a new line.&lt;/p&gt;

&lt;p&gt;With that being said let's move on.&lt;/p&gt;

&lt;p&gt;To make our messages like it's a blog post with nice colors, let's use the "!last-messages" command for this.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;app.js&lt;/em&gt;, first import &lt;code&gt;MessageEmbed&lt;/code&gt; from 'discord.js'. So you have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MessageEmbed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;getLastMsgs&lt;/code&gt; function, add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embeds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;lastTenMsgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MessageEmbed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ORANGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// can be hex like #3caf50&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Message &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFooter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buddy says Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;embeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;embeds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are simply creating a new message embed and using some methods on it. For each message (from the ten messages), we will create an embed and push it to an array of embeds which we later returned.&lt;/p&gt;

&lt;p&gt;The methods &lt;code&gt;setColor&lt;/code&gt;, &lt;code&gt;setTitle&lt;/code&gt;, etc are pretty descriptive. Learn more on &lt;a href="https://discord.js.org/#/docs/main/stable/class/MessageEmbed"&gt;embeds here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our reply for the "!last-messages" command will now change to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;embeds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to let discord know that it's an embed for it to work.&lt;/p&gt;

&lt;p&gt;If it was just one embed you should also make sure you wrap it in an array i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;onlyEmbed&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save the changes and test your command. Now the error is gone. Now that we have all of these working. Let's now publish the bot and make it online forever!&lt;/p&gt;

&lt;p&gt;I will use Heroku's free plan for this. But the thing is, our &lt;a href="https://dev.to/elijahtrillionz/your-heroku-app-is-slow-to-load-because-of-this-4lep"&gt;Heroku's dyno will go to sleep&lt;/a&gt; after 30 minutes of inactivity.&lt;/p&gt;

&lt;p&gt;The solution to that is Uptime robot. Uptime robot will keep your app alive. There is a side effect of doing this though, so usually, the best alternative to Heroku is Replit.&lt;/p&gt;

&lt;p&gt;But whatever the case, you'd still need Uptime robot to keep the server alive, and you'd need a server (not a discord server).&lt;/p&gt;

&lt;p&gt;So whether you are using Replit or Heroku, you need to have a server first and connect your bot to the server. So let's create a server in our local machine.&lt;/p&gt;

&lt;p&gt;Since this is NodeJS let's use 'express'. Install express with &lt;code&gt;npm i express&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file in the root directory called &lt;em&gt;server.js&lt;/em&gt;. In your &lt;em&gt;package.json&lt;/em&gt; change your main to "server.js" and your scripts to point to "server.js" not "app.js".&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;server.js&lt;/em&gt; paste the following;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buddy bot is running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not a lot going on here, we only just created a server with express.&lt;/p&gt;

&lt;p&gt;We created just one route with a simple reply message. If you've never worked with express or NodeJS servers, trust me you really don't have much to worry about here.&lt;/p&gt;

&lt;p&gt;Just copy-paste that in and you are good to go.&lt;/p&gt;

&lt;p&gt;If you save. Rerun the program with &lt;code&gt;npm run app&lt;/code&gt; and you'd see the log message 'Server running on port 5000'.&lt;/p&gt;

&lt;p&gt;If you go to your web browser, open a new tab, and enter '&lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;' you'd receive the message 'Buddy bot is running'.&lt;/p&gt;

&lt;p&gt;Now the server is working fine. But the bot doesn't seem to be working with it. Let's fix this&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;app.js&lt;/em&gt;, where we have &lt;code&gt;client.login&lt;/code&gt;, create a function called &lt;code&gt;startBot&lt;/code&gt; and wrap it around the &lt;code&gt;client.login&lt;/code&gt;. So you have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startBot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DISCORD_TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// export startBot as default&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startBot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;server.js&lt;/em&gt;, import &lt;code&gt;startBot&lt;/code&gt; from './app.js'.&lt;/p&gt;

&lt;p&gt;Now call the function just before the first route i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;startBot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// before app.get()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can call the function anywhere though, as long as it's before the listen method. But I prefer doing it before the routes.&lt;/p&gt;

&lt;p&gt;Before you push, don't forget to great a &lt;em&gt;.gitignore&lt;/em&gt; file to ignore node*modules. And be careful where you push to. If you're going to push to GitHub, add &lt;em&gt;/config/default.js&lt;/em&gt; to _gitignore*.&lt;/p&gt;

&lt;p&gt;Now push to Heroku or Replit. I already wrote an article on &lt;a href="https://dev.to/elijahtrillionz/your-heroku-app-is-slow-to-load-because-of-this-4lep"&gt;using uptime robot&lt;/a&gt;. So check that out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I believe this is clear enough and can help you get started making bots for dozens of servers or just a server. If you have any challenges, just let me know in the comments.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/Elijah-trillionz/discord-bot-buddy/tree/master"&gt;source code for this project&lt;/a&gt; is on GitHub, please give it a star, and you know give me a follow if you enjoyed this.&lt;/p&gt;

&lt;p&gt;Finally, before I go, I really do make tweets daily on Twitter (&lt;a href="https://twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt;) on web development tips and resources. You should give me a follow, turn on notification, and let's stay connected.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I'll see you and your bot next time.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Beware of Promise.all</title>
      <author>Jeremy Dorn</author>
      <pubDate>Thu, 28 Oct 2021 18:26:46 +0000</pubDate>
      <link>https://dev.to/jdorn/beware-of-promiseall-3pph</link>
      <guid>https://dev.to/jdorn/beware-of-promiseall-3pph</guid>
      <description>&lt;p&gt;In Javascript, &lt;code&gt;Promise.all&lt;/code&gt; lets you execute a bunch of Promises in parallel and get an array of results back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty straight forward.  However, if you were to do the above with 100 fetch calls instead, you might accidentally take down your server in a self-inflicted Denial of Service attack. Even if you protect against this in the API with rate-limiting, you're still going to see a lot of errors for failed requests as you scale up.&lt;/p&gt;

&lt;p&gt;APIs are the exception.  Most types of external calls have no concept of rate-limiting at all - filesystem operations, system calls, etc.&lt;/p&gt;

&lt;p&gt;For example, in NodeJS you can spawn new shells to call out to other programs on the computer. I use this in my open source A/B testing platform &lt;a href="https://github.com/growthbook/growthbook"&gt;GrowthBook&lt;/a&gt; to call a Python script.  Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;callPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above will happily spawn hundreds of Python shells if given a large array and start executing them all in parallel. My dev machine is pretty powerful, so I didn't notice during testing that all 8 CPU cores would go to 100% for a couple seconds. When I deployed the code to a Docker container on AWS though, I definitely noticed when it started crashing and restarting all the time.&lt;/p&gt;

&lt;p&gt;The solution is to add rate-limiting or concurrency limits to your &lt;code&gt;Promise.all&lt;/code&gt; calls.  There are a few ways to do this.&lt;/p&gt;

&lt;p&gt;For API calls where you want to limit the number of calls per second, you can use the simple &lt;a href="https://github.com/sindresorhus/p-throttle"&gt;p-throttle&lt;/a&gt; library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pThrottle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p-throttle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Limit to 2 calls per second&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pThrottle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For system calls where you want to limit the number of parallel executions, no matter how long they take, there is the simple &lt;a href="https://github.com/sindresorhus/p-limit"&gt;p-limit&lt;/a&gt; library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pLimit&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p-limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Only 5 promises will run at a time&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pLimit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;callPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more advanced use cases, you might want to look into using a full-featured job queue instead like &lt;a href="https://github.com/breejs/bree"&gt;bree&lt;/a&gt;, &lt;a href="https://github.com/taskforcesh/bullmq"&gt;bull&lt;/a&gt;, or &lt;a href="https://github.com/agenda/agenda"&gt;agenda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As developers we spend a lot of time worrying about external attacks and not enough time on protecting our apps from naive internal code.  I hope this helps others avoid the same CPU crashing bugs in production that I had to work through. Good luck out there!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>performance</category>
    </item>
    <item>
      <title>My first PR in hacktoberfest 2021</title>
      <author>Tuan Thanh Tan</author>
      <pubDate>Thu, 28 Oct 2021 18:06:27 +0000</pubDate>
      <link>https://dev.to/tuanthanh2067/my-first-pr-in-hacktoberfest-2021-2dcf</link>
      <guid>https://dev.to/tuanthanh2067/my-first-pr-in-hacktoberfest-2021-2dcf</guid>
      <description>&lt;p&gt;Hello every, my name is Dustin. I'd like to talk about my experience of solving very first and simple issues on github that are labelled as hacktoberfest 2021. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons"&gt;
  &lt;/a&gt;
  Reasons
&lt;/h2&gt;

&lt;p&gt;The reason behind why I decided to contribute to open sources project is because I will learn a bunch of new things and coding styles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-pull-request"&gt;
  &lt;/a&gt;
  First pull request
&lt;/h2&gt;

&lt;p&gt;My very first pull request was pretty simple and short in terms of coding but reading the code and finding where it is to fix was difficult enough. &lt;/p&gt;

&lt;p&gt;The project can be found &lt;a href="https://github.com/code4romania/seismic-risc"&gt;here&lt;/a&gt;&lt;br&gt;
My pull request can be found &lt;a href="https://github.com/code4romania/seismic-risc/pull/748"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#detail"&gt;
  &lt;/a&gt;
  Detail
&lt;/h2&gt;

&lt;p&gt;Interesting enough though, when I understood the issue clearly and started to fork the project, I got into a problem where I cannot clone the project locally. You can find the issue &lt;a href="https://github.com/code4romania/seismic-risc/issues/746"&gt;here&lt;/a&gt; but it turned out that there a little space after a file name. A project maintainer resolved it immediately so that I could clone the project.&lt;/p&gt;

&lt;p&gt;The issue was actually about a url link. There's a few buttons that allow users to copy, or share the post on their social platforms. But the link was assigned to a static url that points straight to the main landing page. So what I did was that I pull the current url off of &lt;code&gt;window.location.href&lt;/code&gt; and set it to the URL. Every worked just fine. The process of fixing code was quite easy but I had to go through a lot of files and folders to find the issue because this project is quite huge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://seismic-risc.now.sh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>hacktoberfest</category>
    </item>
  </channel>
</rss>
