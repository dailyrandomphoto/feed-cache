<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using SVGs in Vuejs made simple</title>
      <author>Jacqueline Binya</author>
      <pubDate>Fri, 29 Jan 2021 16:25:39 +0000</pubDate>
      <link>https://dev.to/jacqueline/using-svgs-in-vuejs-made-simple-2e1a</link>
      <guid>https://dev.to/jacqueline/using-svgs-in-vuejs-made-simple-2e1a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#images-of-the-web" class="anchor"&gt;
  &lt;/a&gt;
  Images of the web
&lt;/h2&gt;

&lt;p&gt;The most commonly used image formats in the web include bitmap, svg and webp.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bitmap" class="anchor"&gt;
  &lt;/a&gt;
  Bitmap
&lt;/h3&gt;

&lt;p&gt;Bitmap images are made up from tiny dots called pixels. Each pixel is actually a square which is assigned a specific color and is arranged in a pattern to form the image. When you zoom in on a bitmap you can actually see each pixel. Image formats like JPEG, PNG and GIF are all bitmap. Bitmap format is suited for highly detailed images like photographs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webp" class="anchor"&gt;
  &lt;/a&gt;
  Webp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/speed/webp"&gt;Webp&lt;/a&gt; is a highly perfomant image format create by Google it was created to replace bitmap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg" class="anchor"&gt;
  &lt;/a&gt;
  SVG
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIb1KKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611902092/svg-pic_qexrsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIb1KKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611902092/svg-pic_qexrsj.png" alt="SVG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scalable Vector Graphics (svg) is a vector image format are created from mathematical formula they don't come bundled with information about how they should be painted that can be computed in the rendering device. SVGs are lighter than bitmap and they are used to create sharp images which scale e.g icons, illustrations etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-syntax-of-svg" class="anchor"&gt;
  &lt;/a&gt;
  The syntax of SVG
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;SVG are defined in XML: a markup language.&lt;/li&gt;
&lt;li&gt;The diagram below shows an example of a SVG in raw code:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqJnoKzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1610570036/svg-sample_k7bupk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqJnoKzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1610570036/svg-sample_k7bupk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lets analyse the definition:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;💡SVG usually consists of a variety of elements e.g. &amp;lt;path&amp;gt;, &amp;lt;/style&amp;gt;,&amp;lt;circle&amp;gt; etc. nested inside an svg element. The inner elements enclosed inside the svg tags are used to describe specific properties of the SVG whereas the outer svg element which is normally referred to as the root element basically instantiate and terminate an instance of SVG.The root element may contain attributes like viewBox,  class, id, fill, height, width and xmlns. The id and class attributes are usually used to extend functionality in Javascript or to style the svg element. The id attribute may also be used in XML specific configurations like the setting up of links. The xmlns attribute is a XML namespace, it is used by the browser to determine how to render the SVG.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-svgs-in-vuejs" class="anchor"&gt;
  &lt;/a&gt;
  Using SVGs in Vuejs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Generally SVGs can can be incorporated in an HTML document:

&lt;ul&gt;
&lt;li&gt;inline or,&lt;/li&gt;
&lt;li&gt;as external standalone files.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The above listed methods can be used in Vuejs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But before we explore how we can incorporate SVG in a Vuejs web app. First let us create a simple Vuejs application we will use to demonstrate how to embed SVG in Vuejs.&lt;/p&gt;

&lt;p&gt;We will be using Vue CLI to bootstrap our project.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cli.vuejs.org/"&gt;Vue CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a Vuejs project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On your terminal type:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; with a unique name for your project. My project is name &lt;code&gt;svg-tutorial&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will then be prompted to pick a preset for your app, just press Enter to choose the default preset which at the time of publishing this article is: &lt;code&gt;Default ([Vue 2] babel, eslint)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then wait as Vue CLI creates a Vuejs project for you.&lt;/li&gt;
&lt;li&gt;When you project is successfully created🎉, you will get the message below in your terminal:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0SGI-3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611909294/sucesssful-vuejs-install_ddlvl7.png" alt="Successful vuejs project created"&gt;
The message contains handy commands to get you started!&lt;/li&gt;
&lt;li&gt;Let's take a look at our project's file structure paying special attention to the &lt;code&gt;src&lt;/code&gt; folder since most of our work pertaining to SVG will be restricted to that folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
.
├── babel.config.js
├── node_modules
├── package.json
├── package-lock.json
├── public
├── README.md
└── src
    ├── App.vue
    ├── assets
    │   └── logo.png
    ├── components
    │   └── HelloWorld.vue
    └── main.js
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;I have created a sample SVG to use in the interactive examples provided.. You may go ahead and download it by clicking this
&lt;a href="https://raw.githubusercontent.com/JackieBinya/svg-resource-blog/main/sample.svg" class="article-link"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may choose to rename the file, then proceed to add it to the root of the &lt;code&gt;src/assets&lt;/code&gt; folder, such that the structure of the &lt;code&gt;src&lt;/code&gt; folder is similar to the one below:&lt;/p&gt;

&lt;pre&gt;
.
├── App.vue
├── assets
│   ├── logo.png
│   └── sample.svg
├── components
│   └── HelloWorld.vue
└── main.js
&lt;/pre&gt;

&lt;h4&gt;
  &lt;a href="#inline-svg" class="anchor"&gt;
  &lt;/a&gt;
  Inline SVG
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcxXkeiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611922129/inline-svg_jlerxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcxXkeiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611922129/inline-svg_jlerxx.png" alt="Inline SVG in Vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using this method you include the &lt;code&gt;svg&lt;/code&gt; directly in your markup. It's important to mention that when the &lt;code&gt;svg&lt;/code&gt; is directly embedded in the document or template as in the case of Vuejs ,there is no need to include the &lt;code&gt;xlmns&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;The pros of using this method are that you can use CSS to style your &lt;code&gt;svg&lt;/code&gt; and use Javascript to extend its functionality just as you would a normal HTML element.&lt;/p&gt;

&lt;p&gt;The main drawback of this method is that if your &lt;code&gt;svg&lt;/code&gt; is large or when you have a lot of &lt;code&gt;svg&lt;/code&gt; your template, your template becomes cluttered. In that case it would be better incorporate SVGs as standalone files as it is explained in the next section.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#external-svg" class="anchor"&gt;
  &lt;/a&gt;
  External SVG
&lt;/h4&gt;

&lt;p&gt;To embed an external SVG in your Vuejs template you use the methods listed below and always ensure that the &lt;code&gt;xlmns&lt;/code&gt; attribute is included in the root element of the SVG otherwise none of the methods provided will work!&lt;/p&gt;

&lt;p&gt;(i) Embedding an external svg as an image element in a Vuejs template:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQR4giFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611904084/svg-img-implementantion_bhxx8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQR4giFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611904084/svg-img-implementantion_bhxx8s.png" alt="Embedding an external svg as an image element in a Vuejs template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Replace the &lt;code&gt;&amp;lt;file-name&amp;gt;&lt;/code&gt; with the unique name you gave to the svg resource you downloaded above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using this method limits how you can manipulate the &lt;code&gt;svg&lt;/code&gt; as it really doesn't exist in the document but it is encapsulated in the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element. So at most you can only manipulate it as you would a normal image.&lt;/p&gt;

&lt;p&gt;The cons of this method include limitations in styling and in extending the functionality of SVGs and in addition to that if you are dealing with a lot of SVGs in your template it becomes rather cumbersome to keep wrapping them in image elements.&lt;/p&gt;

&lt;p&gt;(ii) Using &lt;code&gt;SVG Loaders&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vuejs uses Webpack as an asset bundler. Webpack uses a loader for each file type it handles. The loaders for the common file types usually come pre-configured whenever you use Vue CLI to bootstrap your project. What that means is that when you import those file types they can be automatically read. But unfortunately &lt;code&gt;.svg&lt;/code&gt; loaders do not come pre-configured so you have to download them from &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; then configure them manually.&lt;/p&gt;

&lt;p&gt;There are many modules available on npm which are svg vuejs loaders. In this example we will be using the &lt;a href="https://www.npmjs.com/package/vue-svg-loader"&gt;vue-svg-loader&lt;/a&gt;. The set up instructions are listed in the link provided, for those who have never installed and configured a module in Vuejs follow the instructions below:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The instructions below are only suited for a project bootstrapped with Vue CLI.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To install the module type the command below in your terminal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D vue-svg-loader vue-template-compiler
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the root of you project directory, create a &lt;code&gt;vue.config.js&lt;/code&gt; file and copy and paste the code below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  chainWebpack: (config) =&amp;gt; {
    const svgRule = config.module.rule('svg');

    svgRule.uses.clear();

    svgRule
      .use('babel-loader')e
      .loader('babel-loader')
      .end()
      .use('vue-svg-loader')
      .loader('vue-svg-loader');
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ensure that you save your changes.&lt;/p&gt;

&lt;p&gt;Congrats!!!🎊 &lt;/p&gt;

&lt;p&gt;You have successfully installed and configured the settings of the &lt;code&gt;vue-svg-loader&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Now, let's proceed to learn how we can use the &lt;code&gt;vue-svg-loader&lt;/code&gt; module to embed SVG in Vuejs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMbqC0Ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611925461/using-svg-loader_ximunw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMbqC0Ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/di70zcupa/image/upload/v1611925461/using-svg-loader_ximunw.png" alt="using SVG loaders to embed svg in Vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You first remove all the boilerplate code from the &lt;code&gt;App.vue&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Then you copy and paste the code  in diagram above in &lt;code&gt;App.vue&lt;/code&gt;, and save your changes.&lt;/li&gt;
&lt;li&gt;The SGV, I used exists as a standalone file in the assets folder as is named &lt;code&gt;sample.svg&lt;/code&gt;, so depending on what you named your .svg file you may need to tweak the code above.&lt;/li&gt;
&lt;li&gt;Run the command below on your terminal, and then on your browser visit &lt;code&gt;http://localhost:8080/&lt;/code&gt; to view the Vuejs app with the embedded SVG 🚀.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The pros of using this method are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your template is kept clean,&lt;/li&gt;
&lt;li&gt;And there are no limitations on how you can style or extend the functionality of your svg.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/hA7ESX7FsE4" class="article-link"&gt;What are Scalable Vector Graphics (SVG) &amp;amp; how are they special? | Web Demystified Episode 4&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>newbie</category>
      <category>vue</category>
      <category>svg</category>
    </item>
    <item>
      <title>Errors Are Not Exceptions</title>
      <author>swyx</author>
      <pubDate>Fri, 29 Jan 2021 15:18:16 +0000</pubDate>
      <link>https://dev.to/swyx/errors-are-not-exceptional-1g0b</link>
      <guid>https://dev.to/swyx/errors-are-not-exceptional-1g0b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Errors are unrecoverable, Exceptions are routine. &lt;/li&gt;
&lt;li&gt;Some languages (JavaScript, Python) treat them as synonyms. Others (Java, PHP) build the distinction into the language. Yet others (Go) get it the other way round.&lt;/li&gt;
&lt;li&gt;No matter what way you name things, you should handle Errors and Exceptions separately in your code or bad things happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because I started out in JS/Python and then went to Go, without touching Java, getting this distinction right took me a few hours of thinking and research. It's not self-evident!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context" class="anchor"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;If you've ever &lt;code&gt;throw&lt;/code&gt;n an error in a function &lt;em&gt;expecting&lt;/em&gt; its invoker to &lt;code&gt;catch&lt;/code&gt; it, &lt;strong&gt;you're doing it wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok, I'll admit I'm just hamming up a mere opinion for a more eye-catching opening. But I do feel strongly about this so...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was recently reminded of this while going through the Go FAQ and being reminded that &lt;a href="https://golang.org/doc/faq#exceptions"&gt;Go does not have exceptions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What?&lt;/em&gt; If you've always coded in a language that has exceptions, this ought to jump out at you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go does not have &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/strong&gt; Despite those language constructs existing for decades, Go chose to have &lt;a href="https://blog.golang.org/defer-panic-and-recover"&gt;Defer, Panic, and Recover&lt;/a&gt; instead. By convention and design, Go encodes an extremely strong opinion that &lt;strong&gt;errors should be returned, not thrown&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why" class="anchor"&gt;
  &lt;/a&gt;
  But Why
&lt;/h2&gt;

&lt;p&gt;Relying on &lt;em&gt;exception&lt;/em&gt; handling to handle &lt;em&gt;errors&lt;/em&gt; either leads to convoluted code or unhandled errors.&lt;/p&gt;

&lt;p&gt;This kind of code is common in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;trySomethingRisky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalid string!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;trySomethingRisky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;enter valid name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle exceptions&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're thinking that you don't write this sort of code very often, you're probably not thinking through your failure modes enough. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript doesn't have a native way to indicate whether a function can throw, if you invoke it. So &lt;strong&gt;you cannot lint against it&lt;/strong&gt; — you must either pay this cost earlier in manual code review or later in bug reports.&lt;/li&gt;
&lt;li&gt;An innocent &lt;code&gt;fs.readFileSync&lt;/code&gt; call can bring down a whole server (&lt;a href="https://github.com/mcollina/make-promises-safe"&gt;or memory-leak descriptors&lt;/a&gt;) given the wrong string.&lt;/li&gt;
&lt;li&gt;Promise calls without a &lt;code&gt;catch&lt;/code&gt; in the browser will simply log silent errors (a terrible user experience).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more function and module boundaries you cross, the more you need to think about defensively adding &lt;code&gt;try&lt;/code&gt;/ &lt;code&gt;catch&lt;/code&gt; and handling the gamut of errors that can happen, and the harder it is to trace where errors begin and where they are handled. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aside - some authors like &lt;a href="https://www.reddit.com/r/golang/comments/9t7con/why_no_trycatch_in_golang_whats_the_theory_behind/e8ust3m/"&gt;this Redditor&lt;/a&gt; and &lt;a href="https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/"&gt;Matt Warren&lt;/a&gt; make a performance driven argument for encouraging developers to not overuse exceptions. Exceptions involve a memory and compute intensive stack search. This matters at scale, but most of us will never run into this so I choose not to make a big deal out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#errors-vs-exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Errors vs Exceptions
&lt;/h2&gt;

&lt;p&gt;Let's attempt a definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Exceptions are expected failures&lt;/strong&gt;, which we should recover from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Errors are unexpected failures&lt;/strong&gt;. By definition, we cannot recover elegantly from &lt;em&gt;unexpected&lt;/em&gt; failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might notice the ironic inversion - it is &lt;em&gt;errors&lt;/em&gt; that are "exceptional", while &lt;em&gt;exceptions&lt;/em&gt; are routine. This was very confusing to your humble author.&lt;/p&gt;

&lt;p&gt;This is no doubt due to the fact that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://docs.python.org/3/tutorial/errors.html"&gt;Python&lt;/a&gt;, and other languages treat errors and exceptions as synonyms. So we throw &lt;code&gt;Error&lt;/code&gt;s when we really mean to throw exceptions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.guru99.com/error-handling-and-exceptions.html"&gt;PHP&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/5813614/what-is-difference-between-errors-and-exceptions"&gt;Java&lt;/a&gt; seem to have this difference baked into the language. &lt;/p&gt;

&lt;p&gt;To make things extra confusing, Go uses &lt;code&gt;error&lt;/code&gt; where other languages would call exceptions, and relies on &lt;code&gt;panic&lt;/code&gt; to "throw" what other languages would call errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exception-handling-vs-error-checking" class="anchor"&gt;
  &lt;/a&gt;
  Exception Handling vs Error Checking
&lt;/h2&gt;

&lt;p&gt;The realization that we need different paradigms for handling errors and exceptions is of course not new. &lt;a href="https://en.wikipedia.org/wiki/Exception_handling#Criticism"&gt;Wikipedia's entry on Exception Handling&lt;/a&gt; quotes Tony Hoare (&lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare"&gt;creator of QuickSort, CSP and the null reference&lt;/a&gt;) saying that exception handling is "&lt;strong&gt;dangerous. Do not allow this language in its present state to be used in applications where reliability is critical.&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;That was said in 1980, yet here we are 40 years later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-checking-in-go" class="anchor"&gt;
  &lt;/a&gt;
  Error Checking in Go
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Go seems to have a strong opinion that "Errors" are routine and Errors are Exceptional - in direct opposition to other languages. I have opted to use Go-native terminology - minimizing confusion locally at the cost of increasing global confusion.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.golang.org/errors-are-values"&gt;Errors are values&lt;/a&gt; in Go — made to be passed, not thrown. Go's FAQ is worth quoting here:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We believe that coupling exceptions to a control structure, as in the try-catch-finally idiom, results in convoluted code. It also tends to encourage programmers to label too many ordinary errors, such as failing to open a file, as exceptional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When something goes wrong, your default choice should be using multi-value returns to report errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"42"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't convert number: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Converted integer:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This pattern would be subject to the same weaknesses I outlined above, except for the fact that Go will refuse to compile if you 1) don't assign all returned values at the callsite or 2) don't use values that you assign. These two rules combined guide you to handle all errors explicitly near their origin.&lt;/p&gt;

&lt;p&gt;Exceptions still have a place — but the language reminds you how rarely you should use it, by calling it &lt;code&gt;panic()&lt;/code&gt;.  You can still &lt;code&gt;recover()&lt;/code&gt; and treat it like a backdoor &lt;code&gt;try&lt;/code&gt;/ &lt;code&gt;catch&lt;/code&gt; in Go, but you will get judgy looks from all Gophers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-checking-in-node" class="anchor"&gt;
  &lt;/a&gt;
  Error Checking in Node
&lt;/h3&gt;

&lt;p&gt;JavaScript lacks the 2 features I mention above to force you to handle errors.&lt;/p&gt;

&lt;p&gt;To work around this and gently nudge you, Node uses &lt;a href="https://nodejs.org/api/errors.html#errors_error_first_callbacks"&gt;error-first callbacks&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There was an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some/file/that/does-not-exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some/file/that/does-exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorFirstCallback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This pattern is idiomatic in most Node libraries, but the further we get away from Node, the more we tend to forget that there is an alternative to throwing errors, when writing libraries and app code.&lt;/p&gt;

&lt;p&gt;Lastly, it is tempting to &lt;code&gt;promisify&lt;/code&gt; those callbacks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promisify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// i am using fs.stat here, but could be any error-first-callback userland function&lt;/span&gt;

&lt;span class="c1"&gt;// assuming top-level await&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with stats&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we are right back where we started - being able to fling errors and exceptions arbitrarily high up and having to handle both in the same place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-reads" class="anchor"&gt;
  &lt;/a&gt;
  Other Reads
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dave.cheney.net/2015/01/26/errors-and-exceptions-redux"&gt;Dave Cheney on Go Errors and Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Haskell Wiki on &lt;a href="https://wiki.haskell.org/Error_vs._Exception"&gt;Errors vs Exceptions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://twitter.com/charlieyouai"&gt;Charlie You&lt;/a&gt; and &lt;a href="https://twitter.com/robincsl?lang=en"&gt;Robin Cussol&lt;/a&gt; for reviewing drafts of this post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>languages</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The name is Script, JavaScript</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 29 Jan 2021 14:39:49 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/the-name-is-script-javascript-2j2a</link>
      <guid>https://dev.to/alvaromontoro/the-name-is-script-javascript-2j2a</guid>
      <description>&lt;p&gt;My name is Álvaro (pronounced AL-bah-roh), and for a really long time, people have called me Alvero, Alberto, Arturo, Alvarado, Salvador, and even Alejandro!&lt;/p&gt;

&lt;p&gt;My last name is Montoro, which is commonly mistaken for Montero, Montes, Monteiro, or Montoya, which has led to recurring jokes with friends and family.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srqIty9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kn7gia00hc8vi9c1lofd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srqIty9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kn7gia00hc8vi9c1lofd.jpeg" alt='Snapshot from the movie The Princess Bride, showing the character Iñigo Montoya (famous for his catchphrase: "My name is Iñigo Montoya. You killed my father. Prepare to die")'&gt;&lt;/a&gt;&lt;/p&gt;
...You killed my last name... (source: &lt;a href="https://www.imdb.com/title/tt0093779/"&gt;The Princess Bride&lt;/a&gt;)



&lt;p&gt;I am happy and proud of my name, even if many people seem to have problems pronouncing it. Honestly, I'm fine as long as they try. &lt;a href="https://ideas.ted.com/have-you-mispronounced-someones-name-heres-what-to-do-next/"&gt;And I am not the only one who appreciates the effort&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Failing at even trying can be a costly mistake. Check what happened to Nike and how &lt;a href="https://www.nbcsports.com/washington/washington-wizards/nike-lost-curry-under-armour-embarrassing-fashion-report"&gt;they lost the sponsorship for Stephen Curry&lt;/a&gt;, one of the best sportspeople at the moment:&lt;/p&gt;

&lt;p&gt;During a meeting between the sports brand and Curry's representatives, one of Nike's officials pronounced Stephen's name as Stephon (like the character from &lt;a href="https://www.imdb.com/title/tt0096579/"&gt;Family Matters&lt;/a&gt;). And no comment or correction was made... which ultimately meant the end of a really profitable deal. Later, Curry went to sign a huge contract with Under Armour.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XslLRVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ilh6e2dyj2vvgemhaer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XslLRVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ilh6e2dyj2vvgemhaer.png" alt='Collage showing Stephan Urquelle, Stephen Curry, the words "Stephan? Stephen? Stephon?" and a logo of Nike with a forbidden sign on top'&gt;&lt;/a&gt;&lt;/p&gt;
Nike lost a contract with this great player because of what?



&lt;p&gt;You may be asking yourself now, &lt;em&gt;What does this have to do with a career in software development? I am not Stephen Curry! I won't be dealing with a problem like this!&lt;/em&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note. If you happen to be Stephen Curry... Hi! Big fan here! What are you doing reading web dev posts? Anyways, join the Spurs. We could use a player of your talent on the team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You actually may find yourself with a problem like this. Maybe not in a situation involving millions of dollars, but with a job on the line. &lt;/p&gt;

&lt;p&gt;We would not call an interviewer Luisa if her name is Keesha. Or Brandon if his name is London. We would be careful to pronounce and write their name correctly during the interview or in a thank-you note.&lt;/p&gt;

&lt;p&gt;So, if when we refer to a person, we use the spelling and capitalization that they use, &lt;strong&gt;why don't we do the same with the names of technologies and programming languages in our résumés?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0PrCzg1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/acf62qilt3pmq0ykraar.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PrCzg1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/acf62qilt3pmq0ykraar.jpg" alt='Screenshot from a sketch titled "Substitute teacher" from Key and Peele. A teacher looks threatening while pointing a finger to a student.'&gt;&lt;/a&gt;&lt;/p&gt;
You've done mess up J.Qu. Ery (source: &lt;a href="https://www.youtube.com/watch?v=Dd7FixvoKBw"&gt;Key &amp;amp; Peele&lt;/a&gt;)



&lt;p&gt;&lt;strong&gt;Our résumés will most likely be the first thing a recruiter and interviewer see and learn from us&lt;/strong&gt;. &lt;a href="https://www.monster.com/career-advice/article/Avoid-the-Top-10-Resume-Mistakes"&gt;Avoiding typos and grammatical mistakes is essential&lt;/a&gt;... and that includes names of technologies.&lt;/p&gt;

&lt;p&gt;Writing the names incorrectly may not be a big issue, though. Résumés are normally vetted by people who want to check experience points. Once we are at the technical interview, what really matters is technical knowledge and skills (among other things).&lt;/p&gt;

&lt;p&gt;To first get to the technical interview, we want our résumé not to end in the recycling bin of a picky recruiter or HR person. Extra negative points if the company's stack is based on the language/technology we wrote incorrectly.&lt;/p&gt;

&lt;p&gt;So avoid a Nike moment: write jQuery instead of jquery or JQuery; JavaScript instead of javascript or JAVAScript; PHP instead of Php or php; and please, &lt;strong&gt;never use Java and JavaScript as interchangeable terms&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---oqX5Mbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8y9q047h5jzo418r454r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---oqX5Mbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8y9q047h5jzo418r454r.gif" alt='Animated GIF from the tv show Parks and Recreation, showing a man dressed in military attire saying "right to jail!"'&gt;&lt;/a&gt;&lt;/p&gt;
...Mixing Java and JavaScript... (source: &lt;a href="https://www.imdb.com/title/tt1266020/"&gt;Parks and Recreation&lt;/a&gt;)



&lt;p&gt;It may sound petty and small, but it may be the difference between leaving a good or a bad impression. And between getting a job interview or being turned down even before a phone screening.&lt;/p&gt;

&lt;p&gt;We check our résumés for typos. Let's check them for the correct spelling of technologies and programming languages.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Database Migrations: A Complete Guide  </title>
      <author>Mia Liang</author>
      <pubDate>Fri, 29 Jan 2021 14:34:32 +0000</pubDate>
      <link>https://dev.to/mia_liang/database-migrations-a-complete-guide-1jca</link>
      <guid>https://dev.to/mia_liang/database-migrations-a-complete-guide-1jca</guid>
      <description>&lt;p&gt;The world of application development is continually changing. Since the early 2000s, agile development processes introduced controlled change (not chaos) into the development process. Instead of long-run development projects that are difficult to change, agile projects make incremental changes in short sprints, from a few days to a few weeks. Database changes are a part of the agile process, and the migration process from one version to the next must be carefully documented along the way. &lt;a href="https://martinfowler.com/articles/evodb.html"&gt;Database migration&lt;/a&gt; processes and tools are critical ingredients in the agile methodology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-database-migration" class="anchor"&gt;
  &lt;/a&gt;
  What is Database Migration?
&lt;/h2&gt;

&lt;p&gt;Any change in a relational database requires a migration to the new design. This process includes any changes or modifications to the current database table. Keeping track of the database changes is an essential step in development and testing. Developers can write migration code in the programming language or use a migration tool to manage the process and write notes (aka artifacts) in the code to track those changes. &lt;/p&gt;

&lt;p&gt;There are two types of database migration processes. The state-based migration process starts with a blank database and tracks the changes until the new database features are coded. Change-based migration begins with the current database table and adds the incremental stages on top of that table. The advantage of using change-based migration is the speed of development. The drawback is the need to look at each incremental step to fully view the database evolution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-database-migration" class="anchor"&gt;
  &lt;/a&gt;
  Benefits of Database Migration
&lt;/h2&gt;

&lt;p&gt;As applications are incrementally changed, databases need to be changed too. The database migration process keeps track of these changes to aid in the development and testing process. Migration tools create clear documentation of this process helps developers and users keep track of new versions for quality control purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/dataguide/types/relational/what-are-database-migrations"&gt;Database migrations&lt;/a&gt; are made for many reasons. One reason may be to improve application performance. Saving money is another reason for migrating to a new database structure. An application may have an old database structure, and upgrading to a new database may lower operating costs. Technology improvements are another way to migrate databases. A typical business case includes moving an on-premise application to a cloud-based application. The new cloud technology may have different data needs, and there needs to be a process to track and control these changes.&lt;/p&gt;

&lt;p&gt;Cyber threats often target database tables. Security concerns are another reason to initiate database migrations. If the database structure is left unchanged, it may make it easier for hackers to make future attacks. Updating the data structure on a regular basis will help prevent future attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-migration-challenges" class="anchor"&gt;
  &lt;/a&gt;
  Database Migration Challenges
&lt;/h2&gt;

&lt;p&gt;Complex applications with multiple databases make the migration process difficult. It can be challenging to identify all of the databases that need updating. If the data isn’t correctly identified, schema mapping can prevent problems and extend the time and cost involved with the migration process.&lt;/p&gt;

&lt;p&gt;According to Simform, “Enterprise database migration projects can cost up to $875K and experience more than $250K in cost overruns.” A significant reason for these overruns is the lack of an integrated strategy and project plan. Without proper advanced planning, change orders can add considerable time and costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-during-database-migration" class="anchor"&gt;
  &lt;/a&gt;
  What Happens During Database Migration?
&lt;/h2&gt;

&lt;p&gt;Database applications need to be upgraded and migrated regularly. For instance, the database might need to add new properties or objects. Perhaps the business logic changed, and the dataset needs to be adjusted. These types of upgrades happen regularly for SaaS applications that use databases to power their server-side applications. Well organized migrations will create a cleaner database and even improve the response and productivity of the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-database-migrations" class="anchor"&gt;
  &lt;/a&gt;
  Why use Database Migrations?
&lt;/h2&gt;

&lt;p&gt;Database migrations can be used in the development stage of an application and the testing and deployment stage. Migration tools generate documentation threads from an empty state to an initial-level schema. During the testing and development stage, migration tools keep track of the test results and database changes until the application is deemed secure and ready for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-perform-a-database-migration" class="anchor"&gt;
  &lt;/a&gt;
  How do you Perform A Database Migration?
&lt;/h2&gt;

&lt;p&gt;Most developers use migration tools to create the scripts and artifacts necessary to track the database state changes. Many tools are available in the development platform you are using to write the program and SQL code. These tools tend to be popular since they integrate with the platform making it convenient for the developer.&lt;/p&gt;

&lt;p&gt;Beyond the tools, database migration projects require planning and coordination between the entire development and testing team. If the team uses an agile strategy, daily stand-up calls and one to two-week sprints split the migration steps into manageable steps. The migration tool will create migration code in the platform’s language—the migration code is written in the same development language you are using. Artifacts should be clearly written, and you should avoid tools that create difficult to understand artifacts.&lt;/p&gt;

&lt;p&gt;There are several features and factors to consider before investing in a database migration tool. The development platform you are using may include migration software. These tools are often a good choice because they integrate with the other development tools. The maturity of the tool is another consideration. The tool should have a good track record and a lot of positive reviews. It should also come with adequate documentation and technical support in case you run into technical snags. Another consideration is the artifacts the migration tool creates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-migration-best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Database Migration Best Practices
&lt;/h2&gt;

&lt;p&gt;Best practices develop based on the trials and errors experienced by fellow developers. For starters, migration scripts should be kept separate from the production code. Complex projects need pre-planning, which will make the process more efficient and less costly. Keeping your data clean will pay off with a smoother migration process. Conduct your cleansing and normalizing operations before you start your database migration project. You should test each migration step separately so you don’t confuse test results. It will be easier to run your migration project if you use a strategic plan and include data migration as part of your agile development process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Database structures and schemas evolve as the applications they support change. Using an agile development process requires database migrations to happen on a continual basis to keep up with application updates. Providing a path of well-defined artifacts will keep you from missing critical steps during the development, test, and deployment stages. To improve the process, you can use migration tools integrated with popular development platforms. There are third-party tools that can be downloaded or purchased separately. You should keep your migration code separate from your development code and maintain accurate records to keep pace with the rapid development process.&lt;/p&gt;

</description>
      <category>database</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>migration</category>
    </item>
    <item>
      <title>Updating Laravel 8 User profile information using bootstrap livewire and fortify</title>
      <author>Jasmine Tracey</author>
      <pubDate>Fri, 29 Jan 2021 14:09:42 +0000</pubDate>
      <link>https://dev.to/jasminetracey/updating-laravel-8-user-profile-information-using-bootstrap-livewire-and-fortify-1cdo</link>
      <guid>https://dev.to/jasminetracey/updating-laravel-8-user-profile-information-using-bootstrap-livewire-and-fortify-1cdo</guid>
      <description>&lt;p&gt;In part one of this article, we created our authentication setup using fortify, laravel and bootstrap.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jasminetracey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqTLkgbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VsdnSP2b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/409783/dbabd320-b6f3-4b0a-83c1-209fd6a1c66a.jpg" alt="jasminetracey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jasminetracey/laravel-8-with-bootstrap-livewire-and-fortify-5d33" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Laravel 8 authentication with Bootstrap and Fortify&lt;/h2&gt;
      &lt;h3&gt;Jasmine Tracey ・ Oct 10 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fortify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bootstrap&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#auth&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this tutorial, We will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updating your profile information using livewire&lt;/li&gt;
&lt;li&gt;changing your password from your profile page using livewire&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clone-part-one-of-our-project" class="anchor"&gt;
  &lt;/a&gt;
  Clone part one of our project
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="nt"&gt;--branch&lt;/span&gt; starter git@github.com:jasminetracey/lara8auth.git
&lt;span class="nb"&gt;cd &lt;/span&gt;lara8auth
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Open your newly created project in IDE of choice I will be using &lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-livewire" class="anchor"&gt;
  &lt;/a&gt;
  Install &lt;a href="https://laravel-livewire.com/docs/2.x/installation"&gt;Livewire&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require livewire/livewire
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, we will load livewire assets in our layout files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...

&lt;span class="c"&gt;&amp;lt;!-- Styles --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;livewire:styles&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

...

&lt;span class="nt"&gt;&amp;lt;livewire:scripts&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;also, we will publish the config file &lt;code&gt;php artisan livewire:publish --config&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-profile-page" class="anchor"&gt;
  &lt;/a&gt;
  Create profile page
&lt;/h2&gt;

&lt;p&gt;Add profile page &lt;code&gt;touch resources/views/profile.blade.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After doing that we will add a route in our &lt;code&gt;routes/web.php&lt;/code&gt; file so that we can access the page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'verified'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'profile'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'profile'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now we will update our navbar section in our &lt;code&gt;resources/layouts/app.blade.php&lt;/code&gt; file so will we have a visible link to navigate to our page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
@else
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item {{ request()-&amp;gt;routeIs('home') ? 'active' : '' }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ route('home') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ __('Home') }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item {{ request()-&amp;gt;routeIs('profile') ? 'active' : '' }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ route('profile') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ __('Profile') }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-livewire-profile-information-form" class="anchor"&gt;
  &lt;/a&gt;
  Create livewire profile information form
&lt;/h2&gt;

&lt;p&gt;If you are are new to livewire Caleb the creator of laravel-livewire have created some tutorial videos &lt;a href="https://laravel-livewire.com/screencasts/installation"&gt;here&lt;/a&gt; to get you started &lt;/p&gt;

&lt;p&gt;From your terminal run the following command&lt;br&gt;
&lt;code&gt;php artisan livewire:make profile-form&lt;/code&gt;&lt;br&gt;
This will create our first livewire component.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;resources/views/livewire/profile-form.blade.php&lt;/code&gt; add the following code to create our form fields.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @if (session()-&amp;gt;has('status'))
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success alert-dismissible fade show"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ session('status') }}
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    @endif

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update Profile Information&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;

            @if ($errors-&amp;gt;any())
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                        @foreach ($errors-&amp;gt;all() as $error)
                            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ $error }}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                        @endforeach
                    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            @endif

            &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;wire:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"updateProfileInformation"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"state.email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"state.name"&lt;/span&gt; &lt;span class="na"&gt;wire:model=&lt;/span&gt;&lt;span class="s"&gt;"state.name"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"state.email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email Address&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"state.email"&lt;/span&gt;  &lt;span class="na"&gt;wire:model=&lt;/span&gt;&lt;span class="s"&gt;"state.email"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update Info&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;After adding our view we need to add the code in the livewire component file &lt;code&gt;app\Http\Livewire\ProfileForm.php&lt;/code&gt; to interact with fields.&lt;/p&gt;

&lt;p&gt;We will first add a public array which will store the fields that we will interact with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Then we will add the &lt;code&gt;mount&lt;/code&gt; method. This is a function that runs when the component is populated. We will use this method to populate the &lt;code&gt;state&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withoutRelations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, we will add the &lt;code&gt;updateProfileInformation&lt;/code&gt; method that will use the UpdateUserProfileInformation action that comes with Fortify.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateProfileInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;UpdateUserProfileInformation&lt;/span&gt; &lt;span class="nv"&gt;$updater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resetErrorBag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nv"&gt;$updater&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Profile successfully updated'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Remember to import the UpdateUserProfileInformation action&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will add our component to the &lt;code&gt;resources/views/profile.blade.php&lt;/code&gt; page so that we can see the form when we visit the profile page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;livewire:profile-form&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-livewire-password-change-form" class="anchor"&gt;
  &lt;/a&gt;
  Create livewire password change form
&lt;/h2&gt;

&lt;p&gt;From your terminal run the following command&lt;br&gt;
&lt;code&gt;php artisan livewire:make password-change-form&lt;/code&gt;&lt;br&gt;
This will create our livewire component.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;resources/views/livewire/password-change-form.blade.php&lt;/code&gt; add the following code to create our form fields.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @if (session()-&amp;gt;has('status'))
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success alert-dismissible fade show"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ session('status') }}
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    @endif

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update Password&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;

            @if ($errors-&amp;gt;any())
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                        @foreach ($errors-&amp;gt;all() as $error)
                            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ $error }}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                        @endforeach
                    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            @endif

            &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;wire:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"updateProfileInformation"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"state.current_password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Current Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"state.current_password"&lt;/span&gt; &lt;span class="na"&gt;wire:model=&lt;/span&gt;&lt;span class="s"&gt;"state.current_password"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"state.password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;New Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"state.password"&lt;/span&gt; &lt;span class="na"&gt;wire:model=&lt;/span&gt;&lt;span class="s"&gt;"state.password"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"state.password_confirmation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Confirm Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"state.password_confirmation"&lt;/span&gt; &lt;span class="na"&gt;wire:model=&lt;/span&gt;&lt;span class="s"&gt;"state.password_confirmation"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Change Password&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;After adding our view we need to add the code in the livewire component file &lt;code&gt;app/Http/Livewire/PasswordChangeForm.php&lt;/code&gt; to interact with fields.&lt;/p&gt;

&lt;p&gt;We will first add a public array which will store the fields that we will interact with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="s1"&gt;'current_password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'password_confirmation'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, we will add the &lt;code&gt;changePassword&lt;/code&gt; method that will use the UpdateUserPassword action that comes with Fortify.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateProfileInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;UpdateUserPassword&lt;/span&gt; &lt;span class="nv"&gt;$updater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resetErrorBag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nv"&gt;$updater&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'current_password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'password_confirmation'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Password successfully changed'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Remember to import the UpdateUserPassword action&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will add our component to the &lt;code&gt;resources/views/profile.blade.php&lt;/code&gt; page so that we can see the form when we visit the profile page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;livewire:profile-form&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;livewire:password-change-form/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now when you go to &lt;code&gt;/profile&lt;/code&gt; you should have two working forms for updating user info and changing their password.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To find out more about laravel fortify features you can go the the github respository &lt;a href="https://github.com/laravel/fortify"&gt;Fortify&lt;/a&gt; and for livewire documentation you can go to &lt;a href="https://laravel-livewire.com/"&gt;livewire&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading please comment below and share if you found this article helpful. &lt;/p&gt;

&lt;p&gt;In my next article, I will cover Two Factor Authentication.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jasminetracey"&gt;
        jasminetracey
      &lt;/a&gt; / &lt;a href="https://github.com/jasminetracey/lara8auth"&gt;
        lara8auth
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a simple auth starter setup for laravel 8 projects using bootstrap and laravel fortify
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/jasminetracey/laravel-8-with-bootstrap-livewire-and-fortify-5d33" rel="nofollow"&gt;BOOTSTRAP 4 LARAVEL FORTIFY AUTHENTICATION&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;This is a simple auth starter setup for laravel 8 projects&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 User Login&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 User Registration&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Email Verification&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Forget Password&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Reset Password&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Change Password&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Update User Profile&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 TwoFactor Authentication&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Browser Session Management&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jasminetracey/lara8auth"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>bootstrap</category>
      <category>laravel</category>
      <category>livewire</category>
      <category>fortify</category>
    </item>
    <item>
      <title>How to choose your first front-end framework without losing your mind </title>
      <author>Supantha Paul</author>
      <pubDate>Fri, 29 Jan 2021 13:37:59 +0000</pubDate>
      <link>https://dev.to/supanthapaul/how-to-choose-your-first-front-end-framework-without-losing-your-mind-1eee</link>
      <guid>https://dev.to/supanthapaul/how-to-choose-your-first-front-end-framework-without-losing-your-mind-1eee</guid>
      <description>&lt;p&gt;The javascript ecosystem is huge and when you see the sheer amount of tools, libraries, frameworks there are for front-end development, it can be overwhelming - especially for beginners. In this article, I'll try to help you choose your first front-end javascript framework by following a simple route.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-factors-to-consider" class="anchor"&gt;
  &lt;/a&gt;
  Key factors to consider
&lt;/h2&gt;

&lt;p&gt;I see a lot of articles comparing front-end frameworks by their popularity or GitHub stars, which is fine. You don't wanna be learning a framework that no one uses or where there's little to no learning resources. But for your first framework, you should be picking the one which you think you'll be the most comfortable with. Once you're comfortable with a framework of your choice, you'll find it really easy to transition to another framework that is &lt;em&gt;trendy&lt;/em&gt; or &lt;em&gt;better for jobs&lt;/em&gt;.&lt;br&gt;
With that being said, some of the things you should consider when choosing your first framework are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Availability of learning resources&lt;/li&gt;
&lt;li&gt;Ease of use&lt;/li&gt;
&lt;li&gt;Does it work for you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm not going to be sharing any stats of each framework since there are already really great articles on this topic, what I'm going to do is list the top 5 frameworks that are all &lt;em&gt;safe&lt;/em&gt; to learn and help you find for yourself which one you like the most.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-top-5-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  The Top 5 frameworks
&lt;/h2&gt;

&lt;p&gt;Here are my top 5 front-end frameworks in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emberjs.com/"&gt;EmberJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-the-framework-that-works-for-me" class="anchor"&gt;
  &lt;/a&gt;
  How to find the framework that works for me?
&lt;/h2&gt;

&lt;p&gt;This part is actually surprisingly simple that I don't see many people doing. For example, when I got started I was attracted to learn React because of how popular it was and how the big companies are using it. But after trying out Svelte, I immediately fell in love with it. I have nothing against React, I love it and it's still my go-to framework for any web project. But I think if I started out with Svelte, I don't think I would switch to another framework unless I had to. &lt;br&gt;
The point I'm trying to make here is, just because a lot of people like a particular framework doesn't mean you'll like it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-want-you-to-do" class="anchor"&gt;
  &lt;/a&gt;
  What I want you to do
&lt;/h3&gt;

&lt;p&gt;Each one of the frameworks that I've listed above has an excellent step-by-step getting started guide where it goes through some of the most important features and syntax of the framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go through the getting started guide of each framework and continue with the one you like the most.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the guides are very simple and short and can be completed in the span of an evening. Take it slow and steady and at the end, you'll have a basic idea of how each of them works. Then go deeper with the one which you liked the most and build cool projects!&lt;br&gt;
I'm linking the getting started guides for each one for you here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;Intro to React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/start"&gt;Getting started with Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/v2/guide/"&gt;Vue Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/tutorial/basics"&gt;Svelte interactive tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.emberjs.com/release/tutorial/part-1/"&gt;Ember tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;Make sure to complete each one and see what you like and don't like about each, and pick your favorite. Everyone is different and it's okay if you like a framework that doesn't have the most GitHub stars, what matters is that you enjoy the process! I'll try to post my view on each of these here in the future. Let me know which one you like the most!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>From Designer to Software Engineer to Solutions Architect: my journey</title>
      <author>Natalia Venditto</author>
      <pubDate>Fri, 29 Jan 2021 13:19:17 +0000</pubDate>
      <link>https://dev.to/this-is-learning/from-designer-to-software-engineer-to-solutions-architect-my-journey-2p5b</link>
      <guid>https://dev.to/this-is-learning/from-designer-to-software-engineer-to-solutions-architect-my-journey-2p5b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I want to start this post with the regular disclaimer: this is my journey, and everything about it, is intrinsically bound to my nature as a person. A different person, under the same circumstances, may experience something totally different and get different results.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To explain how I got here, I have to go all the way back to when I was studying to be a draftswoman, and was supposedly going to continue my education as a (buildings) architect. Somewhere down the road I fell in love with CAD, with computers and graphic design, and even got a job at a printshop after a Photoshop, Quark and Freehand crash course.&lt;/p&gt;

&lt;p&gt;In 2003 I moved to Spain. Immigrating is difficult, especially when you have to support yourself entirely. But when I did I was lucky to have over 5 years of experience as a graphic designer, and it was easy for me to get a job working for a small agency as soon as I moved here. We published a magazine focusing on real estate and after a few months I was promoted to Creative Director to be in charge of the magazine and the corporate image of a few clients. I had a couple of designers in my team, and it was fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plot-twist" class="anchor"&gt;
  &lt;/a&gt;
  Plot twist
&lt;/h2&gt;

&lt;p&gt;One year later, it was evident all business was moving online. Youtube was about to be born, Facebook was in diapers, and everyone wanted to have online presence. I convinced the manager we should have a website, and we should try to build an online version of the magazine as a portal. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"We need a web developer for that" -he said. "I will be the web developer". I answered.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started spending all my spare time learning Action Script. I was amazed at those full screen Flash websites, featuring gorgeous animations and graphics. I wanted to learn to do that. For the portal, I learned HTML, CSS, Javascript, PHP and mySQL. I was amongst the first avid consumers of online tutorials and web development books.&lt;/p&gt;

&lt;p&gt;I experimented with Joomla, Wordpress, and finally Drupal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-then-the-2007-crisis-hit-us-hard" class="anchor"&gt;
  &lt;/a&gt;
  And then the 2007 crisis hit us hard
&lt;/h2&gt;

&lt;p&gt;We could keep the boat afloat selling websites, exclusively. I would be in charge of designing the websites, managing the databases, the hosting, setting DNS records, configuring htaccess, installing the CMS and plugins, developing frontend, and doing the maintenance. I was a true "webmaster" of the time. I loved it! &lt;/p&gt;

&lt;p&gt;But in 2011, we hit rock bottom. Most of our clients were developers and real estate agents, that bursted together with the real estate bubble. They had to close business, and so did we. I started freelancing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-a-freelance-web-developer-is-a-247-job" class="anchor"&gt;
  &lt;/a&gt;
  Being a freelance web developer, is a 24/7 job
&lt;/h2&gt;

&lt;p&gt;If you're not working as a consultant for a much larger company and you have your own clients like I did, it's tough work. You're the sales person, the architect, the PM, the designer, the developer, the quality engineer, the tier 1 to 4 support person, the systems person, and the back office cashing the checks...you're it all. There are no evenings, no weekends... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Being a mom and a freelancer, was the most challenging thing I ever did. I breastfed my kid while patching 10 Drupal sites for &lt;a href="https://www.drupal.org/project/heartbleed"&gt;heartbleed&lt;/a&gt;. I ran to school while holding a call with a client.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-a-job-in-enterprise" class="anchor"&gt;
  &lt;/a&gt;
  Getting a job in enterprise
&lt;/h2&gt;

&lt;p&gt;So in 2014 I sent my CV to a consultant company (the same one I work for right now), with little hope. I had no CS degree, and all I had read around was I stood no chance to land a job in that league. &lt;/p&gt;

&lt;p&gt;But I did land the job as a Frontend Developer for Adobe Experience Manager projects. I had to move to Barcelona, with my family. It was an immense bet. And you can say fortunately, it went well. Although it was not only fortune: there was always a lot of hard work involved. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It was not only fortune. There was always a lot of hard work and persistence involved.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The enterprise context has particularities, also. Working on enterprise you also learn a lot about politics, policies and processes. ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-acquainted-with-adobe-experience-manager" class="anchor"&gt;
  &lt;/a&gt;
  Getting acquainted with Adobe Experience Manager
&lt;/h2&gt;

&lt;p&gt;Up until that day, Adobe was for me the company behind Photoshop, period. (Aaaand the company that had bought Macromedia and decommissioned my favorite ever vectors editor, Freehand ... :/ ) I had no idea they had also bought Day Software and had a CMS. &lt;/p&gt;

&lt;p&gt;I was very comfortable with content management systems, and it did not take me too long to wrap my head around how it worked. Some frontend developers want to stick to frontend code only, and it's respectable. But I was coming from a different kind of dynamics (see the freelancer part!) and I was happy to traverse the whole stack.&lt;/p&gt;

&lt;p&gt;My first role was as a Frontend Tech Lead for a very large platform being built from scratch. One year later, I was moved to a banking platform where I stayed for 6 months. Then I was assigned to a new account we had just gotten, as a tier 3 support and solutions engineer for a massive legacy platform. I was again in the role of Frontend Tech Lead, and I know a lot of people dislike working with legacy software, but I can promise you the amount of knowledge I was getting every single day working with it, was priceless.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The amount of knowledge I was getting every single day working with legacy code was priceless; the problems I had to solve were unique.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion, no other experience is better to understand coupling, dependencies, and acquire an overall overview of a system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plot-twist-again" class="anchor"&gt;
  &lt;/a&gt;
  Plot twist, again
&lt;/h2&gt;

&lt;p&gt;Apart from support, we were integrating new features, and at some point we decided we did not want the risk to build anymore on top of it, we wanted to go for cutting edge technologies. So a little bit more than a year later I got my first architect gig, working in the conceptualization and definitions of the 2.0 version for the same platform.&lt;/p&gt;

&lt;p&gt;I fell in love with designing systems. It is a lot like building with legos. And I could apply principles learned while studying to be a buildings architect. After all, you want the same for your buildings than you want for your systems, for them to meet quality standards, to be resilient, secure and durable, amongst other things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-presales-experience-was-intense" class="anchor"&gt;
  &lt;/a&gt;
  My first pre-sales experience was intense
&lt;/h2&gt;

&lt;p&gt;In August 2017 I also attended my first RfP workshop. A global leading brand issued a RfP (request for proposal) for a very large enterprise project and I helped in putting together the whole DevOps strategy, and then travelled onsite, together with the Account Manager, a UX Engineer, and two C-levels, to defend our proposal.&lt;/p&gt;

&lt;p&gt;I had to present the whole DevOps offer. &lt;/p&gt;

&lt;p&gt;We won.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conferences-and-public-speaking-and-how-they-help-me-in-being-a-better-architect" class="anchor"&gt;
  &lt;/a&gt;
  Conferences and public speaking and how they help me in being a better architect
&lt;/h2&gt;

&lt;p&gt;Being an architect is a lot about communicating. You have to communicate your ideas and definitions or decisions to a team, other project leads and the clients. Translating those very technical concepts into simpler words and concepts any audience can understand demands highly developed communication skills. You need to be able to articulate and convey with simplicity, what sometimes are very abstract ideas.&lt;/p&gt;

&lt;p&gt;Speaking at conferences and other technical events, has definitely helped me grow more comfortable into that presenter role. But I have to admit it is never the same talking to a crowd of peers or other developers, than to a customer.&lt;/p&gt;

&lt;p&gt;The key is, no matter who you are addressing, you need to build rapport. And the most optimal way to build rapport is to identify with the more human side by providing structure to your narrative in a way that it becomes a story your audience can relate to.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Always, always put some work in your communication skills. Especially if you want to become an architect in the future.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#collaborating-with-sales-teams" class="anchor"&gt;
  &lt;/a&gt;
  Collaborating with sales teams
&lt;/h2&gt;

&lt;p&gt;Typically, Solutions Architects have more of a backend/systems background. 4 years ago, it was already obvious to me that as the volume of frontend work was growing, the integrations were more complex, and there was a lot more to put together nicely. The role of a frontend expert during discovery phases was not only necessary, it was essential. I started paving the way to get there.&lt;/p&gt;

&lt;p&gt;I joined a sales squad operating in northern Europe, in parallel to being a hybrid Tech Lead/Architect at the project I was assigned to (the one we won!).&lt;/p&gt;

&lt;p&gt;As part of that team, I review code bases of potential clients/leads, join meetings to understand their problems and requirements, write architecture vision papers from infrastructure to tech stack, estimate and define timelines, estimate staffing needs, etc. Before COVID, I was traveling places to present those analysis or gather more information, or to build a connection with the clients, or to educate them on a certain subject.&lt;/p&gt;

&lt;p&gt;Sometimes I would fly for the day only to Amsterdam or Copenhagen, sit in a meeting, and come back in the evening right on time to have dinner with my family. It was exciting, but also intense, and if you want that, you have to be prepared. On the way there, I was putting together slides and documentation for that meeting. On the flight back, I was reviewing PR's from my own project.(Thank you Norwegian and all the airlines that have wi-fi onboard!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leaving-the-tech-lead-role-behind" class="anchor"&gt;
  &lt;/a&gt;
  Leaving the tech lead role behind
&lt;/h2&gt;

&lt;p&gt;At some point last year, we started working on a brand new concept that required a lot of high level definitions and I was officially anchored to the Solutions Architect pathway. In the context of the project I work at, I already had the architect role officially for 2 years, as part of our Holocracy organization. &lt;/p&gt;

&lt;p&gt;Every company has their own role definitions and people energizing them are expected to deliver in different ways. At my current company, architects are definitely very hands-on. Our culture promotes and celebrates the intersection of architect and lead developer.&lt;/p&gt;

&lt;p&gt;However, the domains where architects and tech leads work, although intersecting, are on opposite sides of the high-level design imaginary line. For those that are not familiar with the differences, this diagram may shed some light.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6bkQz82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/njcuqf2nnumvu5u3l034.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6bkQz82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/njcuqf2nnumvu5u3l034.jpg" alt="architect-vs-tech-lead"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-an-architect-do" class="anchor"&gt;
  &lt;/a&gt;
  What does an architect do?
&lt;/h2&gt;

&lt;p&gt;Architects are in charge of high level definitions of a system. They are the connecting point between the business vision and requirements, and the technical know-how. Even if they can, architects will not care about the nitty gritty details of the implementation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Architects are the connecting point between the business vision and requirements, and the technical know-how&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is probably the part that is more difficult to detach yourself from, when you transition from being a tech lead. When you review a pull request, your input is not really so necessary in terms of "You could've used this method here, instead of this other one".  Your concern is the big picture.&lt;/p&gt;

&lt;p&gt;In fact, you will find yourself less and less in contact with other developers, and working more on your own or with other architects, requirement engineers, system engineers, and quality assurance leads. That is probably the hardest part of the transition. &lt;/p&gt;

&lt;p&gt;Also if you come from a frontend technical lead position, you will be less in the spotlight. Work at a high-level is less tangible and visible, but equally important.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-day-to-day" class="anchor"&gt;
  &lt;/a&gt;
  The day to day
&lt;/h3&gt;

&lt;p&gt;As an architect, most of my (project) day is spent on client calls, team meetings to align the rest of the team on decisions made, partner calls, working on diagrams and documentation, and executing proof of concepts. I am more concerned about  API design and integrations, data storage, security, performance, CD/CI pipelines, releases and rollouts. I care about my client's system being legally and standards compliant.&lt;/p&gt;

&lt;p&gt;I am no longer part of the development sprint, and I don't deliver tasks in the scope of it. Do I miss it? I have to admit that I miss it less and less every time: for once, I really like what I do now. And I also enjoy tremendously the ability of delegating and seeing other people grow in the same direction I did.&lt;/p&gt;

&lt;p&gt;My sales support day is spent supporting proposals and discovery, attending meetings with leads, writing architecture visions, reviewing concepts by other architects, and preparing educational material pre and post sales. So everything I used to do before COVID, minus the traveling. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-skills-required-to-become-a-solutions-architect" class="anchor"&gt;
  &lt;/a&gt;
  The skills required to become a solutions architect
&lt;/h2&gt;

&lt;p&gt;Let's map what I do, to the skills I find the most useful. The soft skills required to do a great architect job are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication skills (ability to articulate but also to listen)&lt;/li&gt;
&lt;li&gt;Presentation skills (put together great diagrams, and concise slide decks)&lt;/li&gt;
&lt;li&gt;Diplomacy (you're at the front line with the client. It's all about business and especially in enterprise, you have to use a lot of patience and good manners)&lt;/li&gt;
&lt;li&gt;Manoeuvring (because of working together with the client, you have to have the capacity to manoeuvre and respond fast)&lt;/li&gt;
&lt;li&gt;Analytical skills (your job is all about solving abstract problems, designing or fixing systems that many not even exist yet)&lt;/li&gt;
&lt;li&gt;Leadership skills (you have to lead your team and your client's team. You have to bring everyone onboard with what's best and the decisions made -which is a complex topic, sometimes, may not be the absolute best, but the most convenient in terms of parameters like time and budget-)&lt;/li&gt;
&lt;li&gt;Ability to estimate and staff a project&lt;/li&gt;
&lt;li&gt;Ability to prioritize &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technical knowledge is also different than the one you needed to have as a tech lead. Apart from mastering a programming language, right now in 2021 I recommend you specialize in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cloud providers and their offerings&lt;/li&gt;
&lt;li&gt;concepts like horizontal and vertical scaling&lt;/li&gt;
&lt;li&gt;concepts like replication and sharding&lt;/li&gt;
&lt;li&gt;serverless computing&lt;/li&gt;
&lt;li&gt;databases&lt;/li&gt;
&lt;li&gt;API patterns and contracts&lt;/li&gt;
&lt;li&gt;CD/CI and how to build your pipelines effectively&lt;/li&gt;
&lt;li&gt;automation&lt;/li&gt;
&lt;li&gt;containerization&lt;/li&gt;
&lt;li&gt;orchestration&lt;/li&gt;
&lt;li&gt;architecture trends (like micro-services)&lt;/li&gt;
&lt;li&gt;design patterns&lt;/li&gt;
&lt;li&gt;UML and different types of diagrams (flow, mindmaps)&lt;/li&gt;
&lt;li&gt;security and protocols (networks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a frontend focus, you can check this mindmap of useful skills I put together a bit ago&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzab8gM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cschryvfuc1t8gweb0l7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzab8gM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cschryvfuc1t8gweb0l7.jpeg" alt="frontend architecture mindmap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/AnfibiaCreativa/status/1331565865196777472/photo/1"&gt;https://twitter.com/AnfibiaCreativa/status/1331565865196777472/photo/1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, stay up to date! These are some of the architects I follow to keep myself informed on architectural trends. This list is relevant for me, you may need to find your own good sources ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lucamezzalira.com/"&gt;Luca Mezzalira&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.angulararchitects.io/en/team/manfred-steyer-gde/"&gt;Manfred Steyer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://martinfowler.com/aboutMe.html"&gt;Martin Fowler&lt;/a&gt;&lt;br&gt;
&lt;a href="https://danwahlin.me/"&gt;Dan Wahlin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/gabrielwalt?lang=en"&gt;Gabriel Walt&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-feel-like-my-coding-skills-are-suffering" class="anchor"&gt;
  &lt;/a&gt;
  Do I feel like my coding skills are suffering?
&lt;/h2&gt;

&lt;p&gt;Not for now, for sure. I spend a lot of time coding, and being a GDE and other community activities I do, help with that. I see myself coding for a very long time, and my new focus only adds value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally" class="anchor"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;Another very important skill is the one of receiving feedback and acting upon it. If you want to become a great architect, find people that have been doing the job for a long time (this is valid for any profession, of course) and ask them for feedback and mentorship. Ask them to assign you tasks in areas where they see you're the weakest, so you have the chance to gain experience. &lt;/p&gt;

&lt;p&gt;And...enjoy the ride!&lt;/p&gt;

&lt;p&gt;PS: Thanks to Mario, Ina, Conrad, Tomasz, Andreas and Georg, who have been those mentors for me, from infrastructure, to architecture to soft-skills.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>3 Ways to create a Navbar (CSS Grid Layout)</title>
      <author>crayoncode</author>
      <pubDate>Fri, 29 Jan 2021 10:54:55 +0000</pubDate>
      <link>https://dev.to/crayoncode/3-ways-to-create-a-navbar-css-grid-layout-4kal</link>
      <guid>https://dev.to/crayoncode/3-ways-to-create-a-navbar-css-grid-layout-4kal</guid>
      <description>&lt;p&gt;Today let's build three different navbar layouts using the CSS grid layout and I'll show you, how easy it is to change the arrangement of the items without actually touching the markup.&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube (TL;DW):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IrjSsWOuie4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/OJbLdpX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;The markup is basically a &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a logo (the feather)&lt;/li&gt;
&lt;li&gt;three navigation items and&lt;/li&gt;
&lt;li&gt;a highlighted item for the user menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we're going to produce three different layout versions, the for loop is there to prevent us from copy-pasting ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main
  // generates the navbar three times
  // each with different version classes
  // version-1, version-2 &amp;amp; version-3
  - for (let i=0; i&amp;lt;3; i++)
    header(class="version-" + (i+1))
      .logo
        i.fas.fa-feather-alt
      nav
        ul.nav
          li 
            a(href="#") 
              i.far.fa-chart-bar
              | Dashboard
          li 
            a(href="#") 
              i.far.fa-edit
              | Projects
          li 
            a(href="#") 
              i.far.fa-envelope-open
              | Posts
      a.user(href="#") 
        i.far.fa-user
        | Jane Doe
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basics-background-amp-variables" class="anchor"&gt;
  &lt;/a&gt;
  Basics, Background &amp;amp; Variables
&lt;/h2&gt;

&lt;p&gt;Let's first setup a few basic variables that define the background and foreground color, as well as some transition paramters which are used in multiple spots:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="na"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#2b2b2b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--foreground-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each navbar is also having its own highlight colors, which is why the &lt;code&gt;--color&lt;/code&gt; variable is defined within the scope of each version's own CSS class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#22d1d3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's also reset padding, margin and box-sizing on each element. Alternatively you can include a pre-made normalization/reset CSS file like normalize.css or sanitize.css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a fancy bonus, here's the code for the background which is just three different gradients stacked on top of each other in different angles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;322deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
      &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;178deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;35%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#header-grid-configuration-outer-grid" class="anchor"&gt;
  &lt;/a&gt;
  Header Grid Configuration (Outer Grid)
&lt;/h2&gt;

&lt;p&gt;We're going to use two nested grid layouts. The outer one on the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element  is simply there for providing the general layout of the navbar, so in order to tell where the logo, the navbar and the user menu is located:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;750px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Lato"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The basic principle is to provide for each version of a navbar a different configuration for the columns and areas of the grid layout. A template area is a named section of the grid layout and an element can be assigned to it by providing the name of the area to it. And that's why it works, to change position of elements purely based on the CSS code, because only by switching or changing the values in &lt;code&gt;grid-template-areas&lt;/code&gt; the browser adapts the places of the element and the order inside the markup becomes irrelevant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logo (left), nav items (left), user menu (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"logo nav user"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// logo (left), nav items (centered), user menu (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"logo nav user"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// user menu, nav items (centered), logo (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"user nav . logo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pay close attention to the values in &lt;code&gt;grid-template-columns&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;min-content&lt;/code&gt; is used mostly for the logo because it should always consume as less space as possible / needed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;max-content&lt;/code&gt; is used mostly for the user menu, since there are two words, &lt;code&gt;min-content&lt;/code&gt; word produce a word wrap, because in that case the column with is minimized. &lt;code&gt;max-content&lt;/code&gt; behaves that way that it maximizes the space for the content, but uses only as much space, as required.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;auto&lt;/code&gt; in our case means that it takes the remaining space, which is just what we want for the navigation items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in the end, all we need to do is to assign those identifiers mentioned in the &lt;code&gt;grid-template-areas&lt;/code&gt; to the parts of the navbar and that's all being needed to setup the basic layout of the navbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#navigation-grid-configuration-inner-grid" class="anchor"&gt;
  &lt;/a&gt;
  Navigation Grid Configuration (Inner Grid)
&lt;/h2&gt;

&lt;p&gt;The grid for the navigation items (&lt;code&gt;.nav&lt;/code&gt;) is a nested grid layout inside the outer grid that defines the general arrangement (logo, navigation items, user menu) in the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element. It uses the CSS grid's auto flow mechanics. This means that no explicit order of columns is defined, but each direct descendant element of the grid container (&lt;code&gt;.nav&lt;/code&gt;) is given its own column. We can tell the grid layout how to deal with elements that are not assigned to a certain cell or group of cells in the grid. &lt;code&gt;grid-auto-flow: column&lt;/code&gt; tells it to create a new column for each unassigned element. Setting it to &lt;code&gt;row&lt;/code&gt; would cause it to create a new row.&lt;br&gt;
&lt;code&gt;grid-auto-columns&lt;/code&gt; is there to tell the grid which size auto-generated columns have, which is pretty awesome in our case, since we can simply tell it, to fit the content without wrapping it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-amp-icon-styling" class="anchor"&gt;
  &lt;/a&gt;
  Link &amp;amp; Icon Styling
&lt;/h2&gt;

&lt;p&gt;Now, let's get into the finer details of the styling. Each link in the header navbar is a flex-box that centers its content vertically and also having a little bit of padding and rounded corners.&lt;/p&gt;

&lt;p&gt;The markup makes use of a few font-awesome icons, so each &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is given the highlight color and rendered slightly smaller, such that it doesn't "overpower" the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// align content vertically&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;foreground-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-hover-effect" class="anchor"&gt;
  &lt;/a&gt;
  Link Hover Effect
&lt;/h2&gt;

&lt;p&gt;For the hover effect we're going to use a nice &lt;code&gt;clip-path&lt;/code&gt; effect. Each link is given an &lt;code&gt;::after&lt;/code&gt; pseudo-element having the highlight color as background color and a &lt;code&gt;clip-path&lt;/code&gt; that slightly cuts of the bottom right corner. If the link is not hovered, its positioned to the left (invisible) and on hover it's shifted to the right such that it covers the link's area. The &lt;code&gt;z-index&lt;/code&gt; setup makes sure that the hightlight does not cover the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--slantness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logo-amp-user-menu" class="anchor"&gt;
  &lt;/a&gt;
  Logo &amp;amp; User Menu
&lt;/h2&gt;

&lt;p&gt;The logo is simply a feather icon from font awesome and is colored on hover. To give it a little bit of a prettier shape, the top left and right bottom corner is strongly rounded off, which fits the shape of the feather and provides a nice effect on hover.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make the user menu stand out a little, is given a slight box shadow to the inside using the highlight color. The same effect could have been achieved using a border, but the advantage of a box shadow is, that it does not affect the box-model and therefore keeps the size of the element consistent with the others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>ui</category>
    </item>
    <item>
      <title>JavaScript News and Updates of January 2021 </title>
      <author>Pavel Lazarev</author>
      <pubDate>Fri, 29 Jan 2021 10:34:13 +0000</pubDate>
      <link>https://dev.to/plazarev/javascript-news-and-updates-of-january-2021-1jj0</link>
      <guid>https://dev.to/plazarev/javascript-news-and-updates-of-january-2021-1jj0</guid>
      <description>&lt;p&gt;Hello everyone! The new year has just begun but the JavaScript world is already buzzing with exciting news and updates. While exploring various sources I have learned some interesting JavaScript stuff and eager to share it with you.&lt;/p&gt;

&lt;p&gt;Get ready to learn about key findings from two fresh reports on JavaScript trends, a new micro-framework from the DHTMLX team, a major update of the Snowpack build tool, and the latest web initiatives. In addition, I have also collected some tips and articles that will help to broaden your knowledge and skills in JavaScript.&lt;/p&gt;

&lt;p&gt;Let’s roll!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-tools-and-updates" class="anchor"&gt;
  &lt;/a&gt;
  New Tools and Updates
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#highlighting-new-javascript-trends" class="anchor"&gt;
  &lt;/a&gt;
  Highlighting New JavaScript Trends
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGg_UGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6d9o19zrlhgoa0vqwww.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGg_UGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6d9o19zrlhgoa0vqwww.jpg" alt="JavaScript Trends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The turbulent year of 2020 is over, but we continue analyzing changes that have been reshaping the JavaScript landscape over the last twelve months to better understand the upcoming trends. For this purpose, I offer to take advantage of two recently released JavaScript surveys.&lt;/p&gt;

&lt;p&gt;State of JS is one of the most popular and insightful JavaScript research projects based on real user feedback. The 2020 edition reveals some interesting facts. First of all, the majority of responders (more than 88%) still love using JavaScript for building apps, but at the same time, a considerable part of the survey participants (39%) think that JavaScript is overcomplicated. When talking about the state of things in JavaScript technologies, it is worth mentioning the growing popularity of Svelte and Snowpack, stable advancement of TypeScript and Next.js, as well as rising dissatisfaction with Angular, Redux, and Mocha. It is also nice to mention that dev.to is ranked in the top 3 of Blogs &amp;amp; Magazines read by developers. Get more valuable info on the &lt;a href="https://2020.stateofjs.com/en-US/"&gt;State of JS page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JavaScript Rising Stars 2020 is another interesting source of information on the JavaScript trends based on the number of stars added to various tools on GitHub during the last year. The most starred JavaScript instruments of 2020 are Deno (+30.2k☆), Vue.js (+22.5k☆), React (+19.8k☆), Playwright (+19.7k☆), VS Code (+19.1k☆). Due to a different approach used for the preparation of this report, the results in key categories may differ from the State of JS outcomes, but it still can be useful to take a look at the &lt;a href="https://risingstars.js.org/2020/en"&gt;full report&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introducing-dhtmlx-optimus" class="anchor"&gt;
  &lt;/a&gt;
  Introducing DHTMLX Optimus
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9W2D7Afk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j4x3e3dswjli761r4icp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9W2D7Afk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j4x3e3dswjli761r4icp.png" alt="DHTMLX Optimus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DHTMLX Suite is a popular JavaScript library that provides a collection of lightweight and highly customizable UI widgets for implementing various functionalities in web projects. From now on, this library can be utilized more conveniently and productively with DHTMLX Optimus. It is a new micro-framework enabling web developers to build DHTMLX-based applications of any complexity with less time and effort.&lt;/p&gt;

&lt;p&gt;The framework allows making the most of modern coding technologies such as ES6 classes, JS modules, and Webpack bundler. Thus, it is possible to define the front-end structure of a specific web app with a set of independent components (modules) and reuse them later in other projects. Optimus can also be employed in combination with any server-side technology. Here is a &lt;a href="https://github.com/DHTMLX/optimus-starter-app"&gt;step-by-step&lt;/a&gt; instruction on how to start using Optimus in real-case scenarios. If you want to learn more about this framework, check out the &lt;a href="https://dhtmlx.com/blog/dhtmlx-optimus-micro-framework-boosting-web-development-suite-ui-widgets/"&gt;release article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meet-snowpack-v30" class="anchor"&gt;
  &lt;/a&gt;
  Meet Snowpack v3.0
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsJUVx3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvklcvg1yqreu0iz00ld.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsJUVx3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvklcvg1yqreu0iz00ld.jpg" alt="Snowpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fast, simple, efficient – these are three words that vividly describe a bundle-free and JavaScript ESM-powered build tool named Snowpack. The popularity of this tool is growing really fast and it is already considered by many as a viable alternative to more intricate and well-established tools such as Webpack. Earlier this month, Snowpack was updated to version 3.0.&lt;/p&gt;

&lt;p&gt;This major release provides a set of powerful new features for faster web development. For instance, it offers a new way of loading any packages directly into your project via steaming imports. Another remarkable feature of this update is a build-in optimizer based on esbuild. This novelty helps to prepare production builds much faster than Webpack or Rollup. Starting from v3.0, Snowpack also comes with a modified JavaScript API and Node.js runtime. Find more details in the &lt;a href="https://www.snowpack.dev/posts/2021-01-13-snowpack-3-0"&gt;release article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#w3c-launches-miniapps-working-group" class="anchor"&gt;
  &lt;/a&gt;
  W3C Launches MiniApps Working Group
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDRUcH9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/temzi5wv9x7lbns4pjp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDRUcH9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/temzi5wv9x7lbns4pjp9.png" alt="W3C"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;World Wide Web Consortium (W3C), one of the main driving forces behind the evolution of web standards, has recently established the MiniApps Working Group. MiniApp is a relatively new and promising format of mobile apps combining advantages of web technologies (CSS, JavaScript, etc.) and enhanced user experience of native apps.&lt;/p&gt;

&lt;p&gt;The primary goal of the W3C’s initiative is to work out specifications that will ensure maximal integration of MiniApps with the web architecture, better interoperability between various MiniApp platforms, and more active promotion of this technology among web developers. Read this &lt;a href="https://www.w3.org/blog/2021/01/w3c-launches-the-miniapps-working-group/"&gt;material&lt;/a&gt; to get a deeper insight into the plans of the MiniApps Working Group.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#open-web-docs-a-new-project-for-improving-web-documentation" class="anchor"&gt;
  &lt;/a&gt;
  Open Web Docs – a New Project for Improving Web Documentation
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LjWICmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hcfxdo3gaduip6gauqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LjWICmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hcfxdo3gaduip6gauqf.png" alt="Open Web Docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A coalition of large technology companies has recently announced the launch of the Open Web Docs project. This undertaking aims to provide better maintainability and sustainability of Web-API and JavaScript documentation for web platform technologies. The list of founders and contributors to this project includes Google, Microsoft, Mozilla, W3C, and others. It is expected that Open Web Docs will support and closely cooperate with the main documentation platforms such as MDN Web Docs. Additional information on the project and its strategy for 2021 can be found in this &lt;a href="https://opencollective.com/open-web-docs/updates/introducing-open-web-docs"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-tips-and-articles" class="anchor"&gt;
  &lt;/a&gt;
  Useful Tips and Articles
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#selecting-development-tools-for-business-web-apps" class="anchor"&gt;
  &lt;/a&gt;
  Selecting Development Tools for Business Web Apps
&lt;/h4&gt;

&lt;p&gt;There are many reasons why JavaScript is continuously ranked high among programming languages in various surveys. One of the key factors in favor of JavaScript is its huge ecosystem and plenty of tools that significantly simplify various development stages. But the abundance of coding technologies raises a serious question of choice for developers. &lt;/p&gt;

&lt;p&gt;When talking about building business apps, standard technology stacks are also frequently complemented with special JavaScript UI libraries. Such UI components help to implement comprehensive functionalities for project management, scheduling, data visualization, etc. This &lt;a href="https://hackernoon.com/top-web-development-tools-for-building-business-applications-in-2021-0n1234pe"&gt;article&lt;/a&gt; contains a lot of useful information on top web development tools, including JS UI libraries, that suit well for developing business apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#comprehensive-guide-to-frontend-performance-optimization-in-2021" class="anchor"&gt;
  &lt;/a&gt;
  Comprehensive Guide to Front-End Performance Optimization in 2021
&lt;/h4&gt;

&lt;p&gt;High performance is probably one of the key success indicators of any web application. As web development technologies are becoming more sophisticated, web developers have to consider a growing number of metrics, tools, and front-end techniques to achieve optimal application performance. Otherwise, it is hard to expect that end-users will get quick and seamless experience. Where to start improving performance? What are possible bottlenecks? And how to keep your app fast enough on a long-term basis? These and many other related questions are addressed in this great &lt;a href="https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/"&gt;front-end performance checklist for 2021&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-javascript-charting-tools-for-visualizing-data-in-business-apps" class="anchor"&gt;
  &lt;/a&gt;
  Best JavaScript Charting Tools for Visualizing Data in Business Apps
&lt;/h4&gt;

&lt;p&gt;It is hard to imagine any modern business web application without data visualization capabilities. Using various types of charts, it is possible to present complex data in a straightforward way. However, it may take a lot of time to implement a charting functionality from scratch. Therefore, web developers frequently utilize ready-made JavaScript charting components to save time and exclude unnecessary coding errors. This &lt;a href="https://dzone.com/articles/8-javascript-chart-components-for-business-apps"&gt;article&lt;/a&gt; highlights the most popular JavaScript libraries dedicated specifically to visualizing data in web apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-deal-with-memory-leaks-in-web-apps" class="anchor"&gt;
  &lt;/a&gt;
  How to Deal with Memory Leaks in Web Apps
&lt;/h4&gt;

&lt;p&gt;When building a single-page application (SPA) some web developers pay little attention to keeping the app’s memory usage low. It can lead to memory leaks. This kind of issue can cause increased resource consumption in users’ devices, poor runtime performance, or even program crashes. If you are interested in learning techniques that will help to detect and fix memory leaks in SPAs, the &lt;a href="https://nolanlawson.com/2020/02/19/fixing-memory-leaks-in-web-applications/"&gt;blog post&lt;/a&gt; prepared by Nolan Lowson is exactly what you need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#insight-into-javascript-seo" class="anchor"&gt;
  &lt;/a&gt;
  Insight into JavaScript SEO
&lt;/h4&gt;

&lt;p&gt;All owners of online businesses are undoubtedly interested in getting the highest search engine rankings to attract more potential customers. It can be hardly achieved without proper JavaScript SEO optimization. But SEO specialists frequently face many challenges on the way to making JavaScript content SEO-friendly. To do the job right, it is necessary to clearly understand how search engines crawl and index JavaScript, ways to facilitate this process, common obstacles in JavaScript SEO, and their solutions. The author of this &lt;a href="https://www.semrush.com/blog/javascript-seo/"&gt;article&lt;/a&gt; has a lot of experience in search marketing and shares valuable tips on optimizing JavaScript code for SEO.&lt;/p&gt;

&lt;p&gt;That’s it for now. Hope that you’ve enjoyed this news digest and deepened your knowledge of JavaScript. Stay tuned for more JavaScript stuff in February.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>news</category>
    </item>
    <item>
      <title>You Don't Know JS: Scope &amp; Closures: What's the Scope?</title>
      <author>Rajat Verma</author>
      <pubDate>Fri, 29 Jan 2021 10:21:25 +0000</pubDate>
      <link>https://dev.to/rajat2502/you-don-t-know-js-scope-closures-what-s-the-scope-g12</link>
      <guid>https://dev.to/rajat2502/you-don-t-know-js-scope-closures-what-s-the-scope-g12</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-1-whats-the-scope" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 1: What's the Scope?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;While working with JS, have you ever thought, How does it know which variables are accessible by any given statement, and how does it handle two variables of the same name?&lt;/li&gt;
&lt;li&gt;The answers to questions like these take the form of well-defined rules called scope. In this book, we will dig deeper into all the aspects of scope.&lt;/li&gt;
&lt;li&gt;Let's first uncover how the JS engine processes our programs: &lt;/li&gt;
&lt;li&gt;As we studied in the last book that JS is a compiled language and it is first parsed before the execution begins.&lt;/li&gt;
&lt;li&gt;The code author's decisions on where to place variables, functions, and blocks with respect to each other are analyzed according to the rules of scope, during the initial parsing/compilation phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#compiled-vs-interpreted" class="anchor"&gt;
  &lt;/a&gt;
  Compiled vs. Interpreted
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code compilation is a set of steps that process the text of your code and turn it into a list of instructions the computer can understand. Typically, the whole source code is transformed at once, and those resulting instructions are saved as output that can later be executed.&lt;/li&gt;
&lt;li&gt;In case of interpretation, the source code is transformed line by line; each line or statement is executed before immediately proceeding to process the next line of the source code.&lt;/li&gt;
&lt;li&gt;Here is an image showing the difference between the two: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMU26PM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/106129194-0ad25300-6186-11eb-9ca8-d0b7ebc32f88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMU26PM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/106129194-0ad25300-6186-11eb-9ca8-d0b7ebc32f88.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now learn about the compilation of a program:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compiling-code" class="anchor"&gt;
  &lt;/a&gt;
  Compiling Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scope is primarily determined during compilation, so understanding how compilation and execution relate is key in mastering scope.&lt;/li&gt;
&lt;li&gt;There are mainly three stages of compilation:

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Tokenizing/Lexing&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tokenizinglexing" class="anchor"&gt;
  &lt;/a&gt;
  Tokenizing/Lexing
&lt;/h4&gt;

&lt;p&gt;Breaking up a string of characters into meaningful (to the language) chunks, called tokens. For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  var a = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This program would likely be broken up into the following tokens: &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , and &lt;code&gt;;&lt;/code&gt;. Whitespace may or may not be persisted as a token,     depending on whether it's meaningful or not. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parsing" class="anchor"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h4&gt;

&lt;p&gt;Parsing is the process of taking a stream of tokens and turning it into a tree of nested elements, called the &lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt; or &lt;strong&gt;AST&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;For example, the tree for &lt;code&gt;var a = 2;&lt;/code&gt; might start with a top-level node called &lt;code&gt;VariableDeclaration&lt;/code&gt; , with a child node called &lt;code&gt;Identifier&lt;/code&gt; (whose value is a ), and another child called &lt;code&gt;AssignmentExpression&lt;/code&gt; which itself has a child called &lt;code&gt;NumericLiteral&lt;/code&gt; (whose value is 2 ).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-generation" class="anchor"&gt;
  &lt;/a&gt;
  Code Generation
&lt;/h4&gt;

&lt;p&gt;Code generation involves taking an AST and turning it into executable code. This part varies greatly depending on the language, the platform it's targeting, and other factors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The implementation details of a JS engine (utilizing system memory resources, etc.) are much deeper than we will dig here. We'll keep our focus on the observable behavior of our programs and let the JS engine manage those deeper system-level abstractions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#required-two-phases" class="anchor"&gt;
  &lt;/a&gt;
  Required: Two Phases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The most important observation we can make about the processing of JS programs is that it occurs in (at least) two phases: parsing/compilation first, then execution.&lt;/li&gt;
&lt;li&gt;The separation of a parsing/compilation phase from the subsequent execution phase is an observable fact, There are three program characteristics you can observe to prove this to yourself: syntax errors, early errors, and hoisting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax-errors-from-the-start" class="anchor"&gt;
  &lt;/a&gt;
  Syntax Errors from the Start
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consider the program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting = "Hello";
console.log(greeting);
greeting = ."Hi";
// SyntaxError: unexpected token .
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When we try to execute this program it shows no output, but instead throws a &lt;code&gt;SyntaxError&lt;/code&gt; about the unexpected &lt;code&gt;.&lt;/code&gt; token right before the &lt;code&gt;"Hi"&lt;/code&gt; string.&lt;/li&gt;
&lt;li&gt;Since, JS is a compiled language and not interpreted (line by line), the string was not printed, and the program was executed as a whole.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#early-errors" class="anchor"&gt;
  &lt;/a&gt;
  Early Errors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now, consider:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Howdy");
saySomething("Hello", "Hi");
// Uncaught SyntaxError: Duplicate parameter name not
// allowed in this context
function saySomething(greeting, greeting) {
  "use strict";
  console.log(greeting);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;"Howdy"&lt;/code&gt; message is not printed, despite being a well-formed statement. Instead, just like the snippet in the previous section, the SyntaxError here is thrown before the program is executed. &lt;/li&gt;
&lt;li&gt;In this case, it's because strict-mode (opted in for only the saySomething(..) function here) forbids, among many other things, functions to have duplicate parameter names; this has always been allowed in non-strict-mode.&lt;/li&gt;
&lt;li&gt;Here also, we can observe that the code was first fully parsed and then only the execution began. Otherwise, the string &lt;code&gt;"Howdy"&lt;/code&gt; would be printed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoisting" class="anchor"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finally, consider:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function saySomething() {
  var greeting = "Hello";
  {
    greeting = "Howdy"; // error comes from here
    let greeting = "Hi";
    console.log(greeting);
  }
}
saySomething();
// ReferenceError: Cannot access 'greeting' before initialization
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The noted ReferenceError occurs from the line with the statement &lt;code&gt;greeting = "Howdy"&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;What's happening is that the greeting variable for that statement belongs to the declaration on the next line, &lt;code&gt;let greeting = "Hi"&lt;/code&gt;, rather than to the previous var greeting = "Hello" statement.&lt;/li&gt;
&lt;li&gt;Here also, we can notice that the JS engine could only know, at the line that error is thrown, that the next statement would declare a block-scoped variable of the same name ( greeting ) is if the JS engine had already processed this code in an earlier pass, and already set up all the scopes and their variable associations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#compiler-speak" class="anchor"&gt;
  &lt;/a&gt;
  Compiler Speak
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's now learn how the JS engine identifies the variables and determines their scopes as the program is compiled.&lt;/li&gt;
&lt;li&gt;Let's first see an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var students = [
  { id: 14, name: "Kyle" },
  { id: 73, name: "Suzy" },
  { id: 112, name: "Frank" },
  { id: 6, name: "Sarah" },
];

function getStudentName(studentID) {
  for (let student of students) {
    if (student.id == studentID) {
      return student.name;
    }
  }
}

var nextStudent = getStudentName(73);

console.log(nextStudent);
// Suzy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;All occurrences of variables/identifiers in a program serve in one of two "roles": either they're the target of an assignment or they're the source of a value.&lt;/li&gt;
&lt;li&gt;If a variable is being assigned a value, then it is a &lt;strong&gt;target&lt;/strong&gt; otherwise a &lt;strong&gt;source&lt;/strong&gt; of value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#targets" class="anchor"&gt;
  &lt;/a&gt;
  Targets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In the above code, since the &lt;code&gt;students&lt;/code&gt; and &lt;code&gt;nextStudent&lt;/code&gt; variables are assigned a value so they are both targets.&lt;/li&gt;
&lt;li&gt;There are three other target assignment operations in the code that are perhaps less obvious. One of them:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let student of students) {
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This statement assigns a value to &lt;code&gt;student&lt;/code&gt; for each element of the array &lt;code&gt;students&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another target reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getStudentName(73);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the argument &lt;code&gt;73&lt;/code&gt; is assigned to the parameter &lt;code&gt;studentID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last target reference in the program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getStudentName(studentID) {
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;function&lt;/code&gt; declaration is a special case of a target reference. Here the identifier &lt;code&gt;getStudentName&lt;/code&gt; is assigned a function as a value.&lt;/p&gt;

&lt;p&gt;So, we have identified all the targets in the program, let's now identify the sources!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sources" class="anchor"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The sources are as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let student of students)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;student&lt;/code&gt; is a target but the array &lt;code&gt;students&lt;/code&gt; is a source reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (student.id == studentID)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this statement, both the &lt;code&gt;student&lt;/code&gt; and &lt;code&gt;studentID&lt;/code&gt; are source references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return student.name;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;student&lt;/code&gt; is also a source reference in the &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;getStudentName(73)&lt;/code&gt;, &lt;code&gt;getStudentName&lt;/code&gt; is a source reference (which we hope resolves to a function reference value). In &lt;code&gt;console.log(nextStudent)&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt; is a source reference, as is &lt;code&gt;nextStudent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In case you were wondering, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;log&lt;/code&gt; are all properties, not variable references.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheating-runtime-scope-modifications" class="anchor"&gt;
  &lt;/a&gt;
  Cheating: Runtime Scope Modifications
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scope is determined as the program is compiled, and should not generally be affected by runtime conditions.&lt;/li&gt;
&lt;li&gt;However, in non-strict-mode, there are technically still two ways to cheat this rule, modifying a program's scopes during runtime.&lt;/li&gt;
&lt;li&gt;The first way is to use the &lt;code&gt;eval(..)&lt;/code&gt; function that receives a string of code to compile and execute on the fly during the program runtime. If that string of code has a &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt; declaration in it, those declarations will modify the current scope that the &lt;code&gt;eval(..)&lt;/code&gt; is currently executing in:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function badIdea() {
eval("var oops = 'Ugh!';");
console.log(oops);
}

badIdea(); // Ugh!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;eval(..)&lt;/code&gt; function was not present, the program would throw an error that the variable &lt;code&gt;oops&lt;/code&gt; was not defined. But eval(..) modifies the scope of the &lt;code&gt;badIdea()&lt;/code&gt; function at runtime.&lt;/li&gt;
&lt;li&gt;The second way to cheat is the &lt;code&gt;with&lt;/code&gt; keyword, which essentially dynamically turns an object into a local scope — its properties are treated as identifiers in that new scope's block:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var badIdea = { oops: "Ugh!" };

with (badIdea) {
  console.log(oops); // Ugh!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The global scope was not modified here, but badIdea was turned into scope at runtime rather than compile-time, and its property oops becomes a variable in that scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; At all costs, avoid &lt;code&gt;eval(..)&lt;/code&gt; (at least, &lt;code&gt;eval(..)&lt;/code&gt; creating declarations) and &lt;code&gt;with&lt;/code&gt;. Again, neither of these cheats is available in strict-mode, so if you just use strict-mode (you should!) then the temptation goes away!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexical-scope" class="anchor"&gt;
  &lt;/a&gt;
  Lexical Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JS's scope is determined at compile-time, the term for this kind of scope is &lt;strong&gt;lexical scope&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;"Lexical" is associated with the "lexing" stage of compilation, as discussed earlier in this chapter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It's important to note that compilation doesn't do anything in terms of reserving memory for scopes and variables.&lt;/p&gt;

&lt;p&gt;That's it for this chapter. I will be back with the notes of the next chapter. &lt;/p&gt;

&lt;p&gt;Till then, &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading these notes or have any suggestions or doubts, then do let me know your views in the comments. &lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/rajat2502"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/rajat2502"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/rajatverma2502"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Starting my first job in tech - Week 1</title>
      <author>lauracharvey</author>
      <pubDate>Fri, 29 Jan 2021 09:46:07 +0000</pubDate>
      <link>https://dev.to/lauracharvey/starting-my-first-job-in-tech-week-1-2f2g</link>
      <guid>https://dev.to/lauracharvey/starting-my-first-job-in-tech-week-1-2f2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;For this blog series I've teamed up with &lt;a class="comment-mentioned-user" href="https://dev.to/emmarslight"&gt;@emmarslight&lt;/a&gt;
/&lt;a href="https://twitter.com/SlightEmma"&gt;@SlightEmma&lt;/a&gt; to give you an insight of what it's like starting your first job in tech but on opposite sides of the world!&lt;/p&gt;

&lt;p&gt;I’m in the UK and started in my role as Developer Relations Lead for Veeqo on the 18th January 2021.&lt;/p&gt;

&lt;p&gt;Emma is in New Zealand and also started her role as Apprentice Software Engineer for Next Chapter Studio on the 18th.&lt;/p&gt;

&lt;p&gt;Each week we’ll be giving you the low down of what we learnt, what it’s like being part of a virtual team and of course any advice for getting and starting your first role. &lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to leave them in the comments or tweet us &lt;a href="https://twitter.com/lauracharvey"&gt;@lauracharvey&lt;/a&gt; or &lt;a href="https://twitter.com/SlightEmma"&gt;@SlightEmma&lt;/a&gt; and we’ll do our best to answer them in the next post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#laura" class="anchor"&gt;
  &lt;/a&gt;
  Laura
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#who-am-i" class="anchor"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h3&gt;

&lt;p&gt;I'm Laura, a career changer at age 29. I just started my first role in tech after graduating from the General Assembly Software Engineering "bootcamp".&lt;/p&gt;

&lt;p&gt;I wrote about my journey here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lauracharvey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7f_W5vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5UH3XW3a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398346/b5f9b419-8ded-4c41-96d9-8095d5d772d0.jpg" alt="lauracharvey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lauracharvey/my-journey-through-space-time-and-tech-so-far-248a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My journey through space, time and tech (so far).&lt;/h2&gt;
      &lt;h3&gt;lauracharvey ・ Aug 19 '20 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;and here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lauracharvey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7f_W5vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5UH3XW3a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398346/b5f9b419-8ded-4c41-96d9-8095d5d772d0.jpg" alt="lauracharvey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lauracharvey/how-i-went-from-newbie-to-dream-role-in-225-days-2lal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I went from newbie to dream role in 225 days...&lt;/h2&gt;
      &lt;h3&gt;lauracharvey ・ Jan 15 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#what-my-new-role" class="anchor"&gt;
  &lt;/a&gt;
  What my new role?
&lt;/h3&gt;

&lt;p&gt;I’m working at Veeqo as Developer Relations Lead. &lt;/p&gt;

&lt;p&gt;DevRel has existed in large tech companies for a long time but is now being adopted by smaller companies and therefore becoming more widely seen in the industry. The role itself can vary greatly from company to company but in my role, I will be looking after the Veeqo public API, improving on it, making error messages easier to understand, ensuring the documentation is top notch and also improving relationships with 3rd party developers, making developer experience the best it can be, offering them support with queries and speaking publicly about Veeqo and our API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-veeqo" class="anchor"&gt;
  &lt;/a&gt;
  What's Veeqo?
&lt;/h3&gt;

&lt;p&gt;Veeqo is a platform for e-commerce retailers to manage their business, we integrate with companies/platforms such a Shopify, Magento, WooCommerce, Amazon, Ebay, Etsy, Royal Mail, DHL, DPD, Xero and Quickbooks so e-commerce retailers can manage things like buying, selling, returns, picking, packing, shipping, inventory and accounting across multiple channels.&lt;/p&gt;

&lt;p&gt;For example, an omnichannel retailer has their own Shopify store but they also sell stock through Amazon and Ebay. They can make Veeqo “master of stock” and control all 3 stores through Veeqo.&lt;/p&gt;

&lt;p&gt;Not all retailers want to use Veeqo in its entirety or they may want to integrate with some in house software they already have, that’s where our public API comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-was-my-first-week-like" class="anchor"&gt;
  &lt;/a&gt;
  What was my first week like?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Monday&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Starting a new job from the comfort of my living room was very strange, I missed finding a new coffee shop on my new daily commute and getting those first day butterflies, but it was also nice to feel at ease straight away.&lt;/p&gt;

&lt;p&gt;Veeqo’s onboarding process was a breeze and as someone who has started in lots of temporary positions over the last few years it was a breath of fresh air to see how seamless it was from job offer to first day.&lt;/p&gt;

&lt;p&gt;They posted all my equipment to me the week before I started and also sent my logins for my email and HR portal so as soon as I logged in, I had access to various meeting requests and the company Slack channels.&lt;/p&gt;

&lt;p&gt;My first meeting of the day was with my manager, she gave me a brief introduction and laid out my onboarding plan for the next 4-weeks, Veeqo is a platform of many parts so I will be spending a week on each section initially.&lt;/p&gt;

&lt;p&gt;She also suggested that I use my self-learning times to learn Ruby with the aim of building a small application using Ruby and the Veeqo API once I have got to grips with it. I was also told that every Friday afternoon our engineering team get time to work on side projects and/or learn a new topic.&lt;/p&gt;

&lt;p&gt;I was assigned my “Coffee Buddy” through Slack who is another employee of the company assigned at random, I am looking forward to meeting them this coming Monday (25th).&lt;/p&gt;

&lt;p&gt;Also, the third Monday of January is known as “Blue Monday” and is said to be the most depressing day of the new year. To help everyone feel more chipper our Head of People created a whiteboard and asked us to tell our colleagues why we love them. It was really beautiful and uplifting to see the messages of love and really helped me feel like I’d chosen the right place in Veeqo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent time with the Support Manager going through an overview of the platform and understanding what 1st, 2nd &amp;amp; 3rd Line Support do. The morning was spent on a Zoom call with a platform run through and then in the afternoon I was given a list of tasks to attempt in the platform as if I was a retailer such as setting up an order or creating a new stock item.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wednesday&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I watched some videos going over the platform in more detail and certain things that are more challenging to achieve in the platform. In the afternoon I shadowed someone from 1st Line Support while they were dealing with customer queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thursday&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was my first day dedicated to “self-learning”. It felt nice to be trusted and have the autonomy to structure my learning myself. I spent my morning going over some more product videos, the developer forum and learning some Ruby.&lt;/p&gt;

&lt;p&gt;I was assigned my “Veeqo Buddy” who is now my go to person should I have any problems. We scheduled catch ups for Mondays, Wednesdays and Fridays.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Friday&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another day of self-learning but with a few breaks for meeting members of the team.&lt;/p&gt;

&lt;p&gt;My first meeting of the day was with my Veeqo Buddy, we had a really nice chat for half an hour about both work and non-work-related topics.&lt;/p&gt;

&lt;p&gt;I then met with the Head of Sales and had to wrack my brain for non-technical ways to describe APIs, Developers and Developer Relations. We chatted about my role and how it might link in with their team and what they're working on.&lt;/p&gt;

&lt;p&gt;I had a quick Slack chat with the CEO.&lt;/p&gt;

&lt;p&gt;Then in the afternoon I met with Head of People who just wanted to check in to see how my first week had been and make sure I was settling in well.&lt;/p&gt;

&lt;p&gt;I finished off the day learning about Hashes and Symbols in Ruby.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;My first week was great, I’m learning more about Veeqo as a company and their product and I’m so glad I made the decision to work with them. I’m excited to get more stuck in but I feel like I’ve got a lotttttt to learn first.&lt;/p&gt;

&lt;p&gt;Looking forward to heading back to work on Monday (it’s been a while since I’ve said that!).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#emma" class="anchor"&gt;
  &lt;/a&gt;
  Emma
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#who-am-i" class="anchor"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h3&gt;

&lt;p&gt;Emma... a proud Kiwi, living in Mount Maunganui, NZ.&lt;/p&gt;

&lt;p&gt;A year ago almost to the day of writing this I wrote my first line of code. Up until that point I had little  interest in computer programming and certainly never considered a career as a software engineer something I would want to pursue. I'll write a more detailed blog post about how I ended up in tech if anyone is interested, but here are the highlights..&lt;/p&gt;

&lt;p&gt;With a goal to learn what was involved in building a website (I’m a nerd, I like to know how things work!)  and the discovery of websites such as edX and Coursera (offering free, college level courses) my adventures in online learning began. The first course was a basic Computer Science 101, a good introduction to how computers and the internet worked but I wanted something a bit more challenging. Which led me to the (infamous?) free Harvard CS50, Introduction to Computer Science . Although there were definitely moments where I felt out of my depth, I also discovered there is nothing like that feeling when you press enter, your code runs (after days spent debugging) and it passes all the tests successfully. Hallelujah!!&lt;/p&gt;

&lt;p&gt;Deciding that software development was a career I wanted to pursue, I enrolled in Enspiral Dev Academy's 14 week web development Bootcamp, graduating at the end of September.&lt;/p&gt;

&lt;p&gt;Since then I have met great people online, read articles about web development, watched youtube videos and tried to code everyday. In the end all the hard work payed off and I was offered a job a couple of days before Christmas(2020).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-job" class="anchor"&gt;
  &lt;/a&gt;
  The job...
&lt;/h3&gt;

&lt;p&gt;I am working as an Apprentice Software Engineer at Next Chapter Studio.&lt;/p&gt;

&lt;p&gt;Next Chapter is a new creative agency of around 10-12 people, 5 developers + our tech director and the rest are product/graphic designers. We are a remote company with everyone living in different parts of the country. Although the company is an agency with the design team working with different clients, the software team has a single client and are working on a large project for the foreseeable future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-first-week" class="anchor"&gt;
  &lt;/a&gt;
  The first week...
&lt;/h3&gt;

&lt;p&gt;The week before I started work I had received my company laptop and had along with all the necessary logins for the company online workspaces(bit.ai, Google, Jira, BitBucket and Miro). My weekly schedule was setup in google calendar with a link to each zoom meeting already filled. I had also received a fantastic email from the tech lead welcoming me to the company. The email outlined what  to expect on Monday and he gave me a couple of tasks to complete during my first week of work. I couldn't ask for a better start to a new job let alone a whole new career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monday:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got up a bit earlier than usual, actually dressed up a little (even though i would be working from home)and put some product in my hair. Then logged in to my my first zoom meeting of the day.&lt;/p&gt;

&lt;p&gt;After a brief meeting with the Tech Lead, there was a company wide meeting at 9:30 where everyone reconnected after the weekend. After introductions and learning what everyone's favourite desert is, I was surprised to find myself playing Pictionary.&lt;/p&gt;

&lt;p&gt;In the company "Masterpiece" space on Figma (where every work of art is preserved for prosperity!) we played a couple of rounds of Pictionary. Everyone is making guesses from the first pen stroke... a lot of fun, and I think it will always be a great way to start the week!&lt;/p&gt;

&lt;p&gt;Following this i met with the Senior Engineer for the project I would be working on. We had a chat about the tech stack that the project used and that I would need to become familiar with the CMS that is used, a piece of Open Source software called Strapi. I was then given a list of articles/tutorials and videos to go through so I could learn how to use Strapi with a Next.js application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Rest of the Week:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rest of the week I spent going through the tutorials and docs for Strapi and when I needed a break from that, I tried to familiarise myself with the code base of the project.&lt;/p&gt;

&lt;p&gt;I will admit at times i didn't feel like I was at work, sitting on the couch while watching youtube videos or reading articles has been an almost daily activity for me for months now!&lt;/p&gt;

&lt;p&gt;That is not to say that I was given a task on Monday and that was all the contact I had all week. There are 3, 15 min stand-ups a week for the engineering team to learn what everyone is working on that day, ask for help if needed that sort of thing. I also had my first 1 on 1 meeting with my tech lead, obviously as it was my first week we just spent the time getting to know each other a bit, and talking about the goals of the project.&lt;/p&gt;

&lt;p&gt;The only other thing of note for the week was a meeting with one of software engineers who has been working on the project since the beginning. It was set for Friday giving me time to start going through the code-base and forming a basic impression of how things would fit together. It worked out brilliantly, I learned how each of the repositories fit together and about some of the complexities that come up trying to get a project to production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lesson-of-the-week" class="anchor"&gt;
  &lt;/a&gt;
  Lesson of the week:
&lt;/h3&gt;

&lt;p&gt;You are not expected to hit the ground running, contributing code and adding value to the company in your first week on the job!! Give yourself time to settle in, get to know the people you are working with! No one expects you to know the ins and outs of the code-base week one!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>8 Things I wish I knew as a Junior Developer</title>
      <author>Simon Holdorf</author>
      <pubDate>Fri, 29 Jan 2021 09:03:07 +0000</pubDate>
      <link>https://dev.to/simonholdorf/8-things-i-wish-i-knew-as-a-junior-developer-4g7d</link>
      <guid>https://dev.to/simonholdorf/8-things-i-wish-i-knew-as-a-junior-developer-4g7d</guid>
      <description>&lt;p&gt;Being a junior developer is not easy. You have a lot of work to do, and you're expected to know everything that's going on in your company. These tips will help you get started on the right foot.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-dont-be-afraid-to-ask-questions" class="anchor"&gt;
  &lt;/a&gt;
  1. Don't be afraid to ask questions
&lt;/h2&gt;

&lt;p&gt;Asking questions is probably one of the most critical skills for any programmer. You should always try to learn something new when working on a problem or feature, even if it's just some new concept that might come in handy later. &lt;/p&gt;

&lt;p&gt;Besides, there are times when you will encounter issues that have already been solved by someone else (such as Stack Overflow). In these cases, don't be afraid to ask for help! It's better to spend 10 minutes googling and asking questions than spending 2 hours debugging an issue that someone else has already solved. &lt;/p&gt;

&lt;p&gt;I think this is true for &lt;a href="https://thesmartcoder.dev/the-road-from-junior-to-senior-developer/"&gt;senior developers&lt;/a&gt;. You never know what obscure problem someone else might run into that will save them time down the road (or even give them ideas for features they could implement). Even if it doesn't help anyone directly, every question asked and answered helps everyone indirectly by increasing our collective knowledge base. &lt;/p&gt;

&lt;p&gt;If your company has a mentorship program or internal forums where you can ask questions, take advantage of them! Even if they aren't related to your specific project or team, asking about general issues will likely still help you out in the long run.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-dont-worry-about-seniority" class="anchor"&gt;
  &lt;/a&gt;
  2. Don't worry about seniority
&lt;/h2&gt;

&lt;p&gt;This is probably the most critical point on this list. It's straightforward to get caught up in the idea of seniority and worry about whether or not you are "senior enough" to do a particular task. There is no such thing as being "senior enough" for anything in my experience. If you think you are ready, then go ahead and try it! &lt;/p&gt;

&lt;p&gt;Even if you fail at first, learn from your mistakes and move on. You can always ask for help if you need it. Just remember that seniority is all relative. There will always be someone who has more experience than you, so don't let that hold you back from doing something because of how it will look on your resume or portfolio.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-be-proactive" class="anchor"&gt;
  &lt;/a&gt;
  3. Be proactive
&lt;/h2&gt;

&lt;p&gt;To be successful in software development, immensely as a junior developer, it helps to take the initiative when solving problems or implementing features. This means going above and beyond what was asked of you and making sure that things are done the first time correctly (it also makes it easier for other developers to review your code).&lt;/p&gt;

&lt;p&gt;I personally find this approach useful because it allows me to learn more about the problem domain I am working in (which is often a requirement when working with larger projects). Asking questions during these times can be helpful, too, since they often lead to discussions about why individual decisions were made or why certain approaches were taken (this may help guide future decision-making). &lt;/p&gt;

&lt;p&gt;Even if your ideas aren't implemented right away, they might inspire others or even make their way into future versions of the product (I have seen this happen many times before). &lt;/p&gt;

&lt;p&gt;This also helps build trust with your team members since they know that you will do what needs to be done without continually asking them for guidance.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-write-good-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Write good code
&lt;/h2&gt;

&lt;p&gt;This may seem obvious, but it's straightforward to get caught up in the idea of shipping features and not worrying about how they are implemented. This is especially true when working on a team with many developers (or even working alone). &lt;/p&gt;

&lt;p&gt;However, writing good code makes it easier for other developers to read and review your work (which saves time in the long run). It also makes it easier for you to understand your own code later on (saving time in the short run). &lt;/p&gt;

&lt;p&gt;If you have never written tests before, this is another area where you can take the initiative and learn more about your language or framework by reading about testing strategies or writing some simple tests yourself. If you write tests, they will help you catch bugs early on instead of debugging them after a feature has been shipped. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-read-code" class="anchor"&gt;
  &lt;/a&gt;
  5. Read code
&lt;/h2&gt;

&lt;p&gt;This one is pretty obvious, but it's still essential. Reading code is a great way to learn how things are done in other projects and languages. It also allows you to see what kinds of problems developers face when writing software, which will help you with problem-solving later on in your career.&lt;/p&gt;

&lt;p&gt;If you ever get stuck on something and need help from someone else, being able to explain the problem is extremely important. This helps with communication between developers as well as collaboration on projects (which should be the primary goal of any developer). Also, reading code may just give you some ideas for your own project! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-learn-from-others" class="anchor"&gt;
  &lt;/a&gt;
  6. Learn from others
&lt;/h2&gt;

&lt;p&gt;This point should be obvious too, but I think it's important enough that I wanted to mention it anyway. Take advantage of opportunities to learn from others! For example, if someone asks a question on Stack Overflow that you know the answer, go ahead and answer it! You might also consider sharing your knowledge by blogging or speaking at meetups/conferences. Even if your answer isn't directly related to your job duties, there is still value in answering questions since you are likely learning something new while doing so (this might help solve future problems that come up as well). &lt;/p&gt;

&lt;p&gt;Also, keep an eye out for articles/videos/podcasts/books that might be relevant to what you are working on. These can often explain why certain decisions were made and how they could be improved upon. &lt;/p&gt;

&lt;p&gt;Finally, don't forget about books! Books are probably one of the best ways to learn new things because they allow you to read at your own pace without being interrupted by meetings or interruptions from coworkers. &lt;/p&gt;

&lt;p&gt;There are so many great books out there that cover a wide range of topics. Ensure that whatever book(s) you choose covers topics relevant to what you do day-to-day!   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-practice-what-you-learn" class="anchor"&gt;
  &lt;/a&gt;
  7. Practice what you learn
&lt;/h2&gt;

&lt;p&gt;This is a great way to solidify your knowledge of a topic, and it's also an easy way to show off what you have learned to others (such as interviewers or potential employers). You could start doing some &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;JavaScript practice projects&lt;/a&gt;, for example.&lt;/p&gt;

&lt;p&gt;It might be a little more difficult if you are working on a large project, but there are still opportunities to practice what you learn. For example, maybe you can implement some features using the latest technology that your company just started using. If not, you can try implementing some small feature using this new technology and sharing it with your team members. &lt;/p&gt;

&lt;p&gt;The point is that even if you aren't able to use the new stuff at work, there are plenty of opportunities outside of work where you can show off what you have learned (such as meetups/conferences or hackathons). You might even consider writing blog posts about the technologies/frameworks that interest you. I have found many useful articles/videos on blogs before!   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-dont-worry-about-experience" class="anchor"&gt;
  &lt;/a&gt;
  8. Don't worry about experience
&lt;/h2&gt;

&lt;p&gt;I think this one applies more to junior developers who have recently graduated from college or Bootcamp. It's very easy for junior developers who just graduated to focus too much on building up their resume and acquiring "senior level" experience instead of focusing on learning new things and developing their skillset. &lt;/p&gt;

&lt;p&gt;However, this approach doesn't always work out well in the long run because it leads to junior developers trying to do things they aren't ready for yet (and then getting frustrated when they fail). &lt;/p&gt;

&lt;p&gt;Instead, I would recommend focusing on learning new things regardless of whether or not they will help your resume in the short term. If anything, take advantage of opportunities to build your skillset and give yourself an edge over other candidates during interviews (even if they don't lead directly to a job offer). &lt;/p&gt;

&lt;p&gt;Also, don't worry about whether or not something counts as "senior-level experience". Only worry about whether or not something will help you become a better developer!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Junior developers should really focus on the fundamentals of programming and building projects while also improving their problem-solving skills. This will help you develop into a better developer over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me and my work, please follow me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; to learn more about programming, making, writing &amp;amp; careers🥰&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>career</category>
    </item>
  </channel>
</rss>
