<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Parse LIVE Website - Extract component and convert to React</title>
      <author>Sm0ke</author>
      <pubDate>Fri, 21 May 2021 17:04:57 +0000</pubDate>
      <link>https://dev.to/sm0ke/parse-live-website-extract-component-and-convert-to-react-5761</link>
      <guid>https://dev.to/sm0ke/parse-live-website-extract-component-and-convert-to-react-5761</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article explains how to parse and extract components from a LIVE website using open-source libraries and tools. Personally, I'm using HTML parsing to convert automatically components from one technology (Bootstrap) to others like React, Vue, Svelte with less manual work and better quality. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - The article is heavily inspired from here: &lt;strong&gt;&lt;a href="https://docs.appseed.us/content/tutorials/parse-html-components"&gt;Parse HTML Components&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;




&lt;p&gt;Parsing LIVE websites or lifeless HTML files might be useful in many scenarios. I will mention only a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code a pricing scanner to detect changes&lt;/li&gt;
&lt;li&gt;check health for a LIVE system &lt;/li&gt;
&lt;li&gt;extract components and reuse previous work for evolutions&lt;/li&gt;
&lt;li&gt;extract texts from a LIVE website and check text errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, I will mention an &lt;a href="https://github.com/app-generator/django-pixel-lite"&gt;open-source Django product&lt;/a&gt; that uses a UI built with components extracted from a Bootstrap 5 Kit using parsing code quite similar to the one presented in this article. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tools-we-need"&gt;
  &lt;/a&gt;
  Tools we need
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; - the interpreter &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt; - a well-known parsing library &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://lxml.de/"&gt;Lxml&lt;/a&gt; - used to compensate BS4 limitations&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;The process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Load the HTML content - this can be done from a local file or using a LIVE website&lt;/li&gt;
&lt;li&gt;Analyze the page and extract XPATH expression for a component&lt;/li&gt;
&lt;li&gt;Use Lxml library to extract the HTML using &lt;em&gt;Xpath&lt;/em&gt; selector&lt;/li&gt;
&lt;li&gt;Format the component and save it on disk&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Install tools&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests 
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;lxml
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all tools and libraries are installed and accessible in the terminal, we can start coding using &lt;code&gt;Python console&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ENTER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML content can be a local file or a remote one, deployed and rendered by a LIVE system. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load the HTML from a local file&lt;/strong&gt; (a simple file read)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./app/templates/index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Load content from a live website&lt;/strong&gt; - &lt;a href="https://demo.themesberg.com/pixel-lite/index.html"&gt;Pixel Lite&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://demo.themesberg.com/pixel-lite/index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, &lt;code&gt;html_page&lt;/code&gt; variable contains the entire HTML content (string type) and we can use it in BS4 or Lxml to extract the components. To visualize the page structure we can use browser tools:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmUDCzLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck60uqemtra5p1g8mseb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmUDCzLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck60uqemtra5p1g8mseb.png" alt="HTML Parser - Target Component Inspection."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The target component will be extracted using an &lt;code&gt;XPATH expression&lt;/code&gt; provided by the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//*[@id="features"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the selector, let's extract the components using LXML library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'//*[@id="features"]'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;XPATH selector&lt;/code&gt; returns a valid component, we should have a valid LXML object that holds the HTML code - Let's use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml.etree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tostring&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;component_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tostring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To have a nice formatted component and gain access to all properties like nodes, &lt;code&gt;css style&lt;/code&gt;, texts .. etc, the HTML is used to build a &lt;code&gt;Beautiful Soup&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;component_html&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is now fully parsed and we can traverse all information and proceed further with a conversion to React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section section-lg pb-0"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"features"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     ...

     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-box text-center mb-5 mb-md-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon icon-shape icon-lg bg-white shadow-lg border-light rounded-circle icon-secondary mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-box-open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-3 h5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        80 components
       &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-lg-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Beatifully crafted and creative components made with great care for each pixel
       &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

     ...

     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tool-chain will check and validate the component to be a valid HTML block with valid tags. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;The extracted component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TJ9H1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo3l8vtvpd6y5ie6x34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TJ9H1JR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo3l8vtvpd6y5ie6x34.png" alt="HTML Parser - Extracted Component."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;React component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Comp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;COMPONENT_HTML_GOES_HERE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React Component usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Comp&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;This process can be extended for more tasks and automation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;detect page layouts&lt;/li&gt;
&lt;li&gt;validate links (inner and outer)&lt;/li&gt;
&lt;li&gt;check images size&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To see a final product built using a component extractor please access &lt;a href="https://github.com/app-generator/django-pixel-lite"&gt;Pixel Lite Django&lt;/a&gt;, an open-source product that uses a Bootstrap 5 design. &lt;/p&gt;

&lt;p&gt;The project can be used by anyone to code faster a nice website  using Django as backend technology and Bootstrap 5 for styling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://django-pixel-lite.appseed-srv1.com/"&gt;Django Pixel Lite&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demo.themesberg.com/pixel-lite/index.html"&gt;Pixel Lite&lt;/a&gt; - the original HTML design &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LokJi_YT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx9yfsoylsnpk7a45r6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LokJi_YT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx9yfsoylsnpk7a45r6k.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/11465555/can-we-use-xpath-with-beautifulsoup"&gt;Use XPath in Beautiful Soup&lt;/a&gt; - related article published on StackOverflow&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.python-guide.org/scenarios/scrape/"&gt;Web Scraping&lt;/a&gt; - the right way (with sample)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>My Top 10 Visual Studio Code Extensions for Web Development</title>
      <author>Atul Vishwakarma</author>
      <pubDate>Fri, 21 May 2021 16:52:08 +0000</pubDate>
      <link>https://dev.to/jerry45/my-top-10-visual-studio-code-extensions-for-web-development-2hn8</link>
      <guid>https://dev.to/jerry45/my-top-10-visual-studio-code-extensions-for-web-development-2hn8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Visual Studio Code or VS Code is the most popular editor for Web Development in 2021. One of the most impressive parts of Visual Studio Code is customizability, especially with the extensions. Today, I will show you my 10 favourite VS Code extenions for web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-vs-code-and-vs-code-extensions"&gt;
  &lt;/a&gt;
  Installing VS Code and VS Code Extensions
&lt;/h3&gt;

&lt;p&gt;In order to use VS Code's extensions, you need to download VS Code. You can download it &lt;a href="https://code.visualstudio.com/"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To  install extensions press &lt;strong&gt;CTRL+SHIFT+X&lt;/strong&gt; or just click on the extension icon of Visual Studio Code. Search for the extension and press install.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfQDEK0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is1hrznajbtolqbyh53h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfQDEK0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is1hrznajbtolqbyh53h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The choices of the extensions are my of personal opinion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. ESLint&lt;/strong&gt;&lt;br&gt;
Want to write better code? Want consistent formatting across your team? Install ESLint. This extension can be configured to auto format your code as well as 'yell' with linting errors/warnings. VS Code specifically is also perfectly configured to show you these errors/warnings. &lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uGtPO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ll3chb3svwy9bwsjzqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uGtPO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ll3chb3svwy9bwsjzqw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;2. Live Server&lt;/strong&gt;&lt;br&gt;
Make changes in code editor, switch to browser, and refresh to see changes. That's the endless cycle of a developer, but what if your browser would automatically refresh anytime you make changes? That's where Live Server comes in!  On a click of a button, your site is up and running locally. It provides the live preview of our web application right within your editor.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhT9qING--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eqptyt8aka34b53nvbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhT9qING--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eqptyt8aka34b53nvbs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;3. Prettier - Code formatter&lt;/strong&gt;&lt;br&gt;
Prettier is a lifesaver when it comes to formatting and productivity. Prettier formats your files on a save once you configure it in your settings. Instead of spending hours a day making your code look clean, use Prettier.  This extension performs the formatting of the JavaScript, CSS, and HTML code.&lt;/p&gt;

&lt;p&gt;Never worry about formatting again!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jqVi2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxglf0ukyyi6497bxbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3jqVi2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxglf0ukyyi6497bxbx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;4. Material Icon Theme&lt;/strong&gt;&lt;br&gt;
Fan of Google's Material design? Then, check out this Material themed icon pack. There's hundreds of different icons and they are pretty awesome looking!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhD_C_wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ymvcy8n0aawv703dzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhD_C_wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ymvcy8n0aawv703dzb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;5. Better Comments&lt;/strong&gt;&lt;br&gt;
This extension helps you to create more human-friendly and easy-to-read comments.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULLglYdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t58zbicvag6jckmoqior.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULLglYdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t58zbicvag6jckmoqior.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;6. Path Intellisense&lt;/strong&gt;&lt;br&gt;
Remembering specific file names and the directories your files are in can get tricky. This extension will provide you intellisense for just that. As you start typing a path in quotations, you will get intellisense for directories and file names. This will save you from spending a lot of time in the file explorer &lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLm6Iuzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54afut14pmvq9km5o66g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLm6Iuzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54afut14pmvq9km5o66g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;7. Polacode&lt;/strong&gt;&lt;br&gt;
You know those fancy code screenshots you see in articles and tweets? Well, most likely they came from Polacode. It's super simple to use. Copy a piece of code to your clipboard, open up the extension, paste the code, and click to save your image!&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode"&gt;https://marketplace.visualstudio.com/items?itemName=pnp.polacode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q9_DFxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rugpzo31kxkkrkedb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q9_DFxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5rugpzo31kxkkrkedb6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;8. Debugger for Chrome&lt;/strong&gt;&lt;br&gt;
Believe it or not, debugging JavaScript means more than just writing console.log() statements (although that's a lot of it). Chrome has features built in that make debugging a much better experience. This extension brought the powerful chrome debugger right into the visual studio code. It is very useful for front-end developers to perform the testing and debugging.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome"&gt;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFWECgPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aok0zxbegn6vz98dahyz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFWECgPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aok0zxbegn6vz98dahyz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;9. Bracket Pair Colorizor&lt;/strong&gt;&lt;br&gt;
This extension gives the same colour to matching brackets and parenthesis. This extension prevents you from taking too long looking for the correct closing bracket. This is a must-have if you are using a language which uses brackets and not indentation (sorry python users).&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEsXE-mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i736bbtb5c16yg7r3w8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEsXE-mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i736bbtb5c16yg7r3w8k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;10. Settings Sync&lt;/strong&gt;&lt;br&gt;
Developers, myself included, spend a lot of time customizing their dev environment, especially their text editors. With the Settings Sync extension, you can save your setting off in Github. Then, you can load them to any new version of VS Code with one command. Don't get caught without your amazing setup ever again!&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jt9Ob8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/123z5a5yszqftwu31tcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jt9Ob8oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/123z5a5yszqftwu31tcu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Hope this post will help you in web development. Thank you for reading the post.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>html</category>
    </item>
    <item>
      <title>Launching Pixiko on Product Hunt</title>
      <author>Павел Шульга</author>
      <pubDate>Fri, 21 May 2021 16:31:00 +0000</pubDate>
      <link>https://dev.to/kinga2281/launching-pixiko-on-product-hunt-53i7</link>
      <guid>https://dev.to/kinga2281/launching-pixiko-on-product-hunt-53i7</guid>
      <description>&lt;p&gt;Hey everyone 👋&lt;/p&gt;

&lt;p&gt;We’re developing an online video editor and maker and today we’re launched on Product Hunt 💪&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZZJnskL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogd6inanw5thiclmoies.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZZJnskL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogd6inanw5thiclmoies.jpg" alt="Pixiko"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pixiko is cool at:&lt;br&gt;
👉Apply filters (Glitch, BW, RGB splitter and etc.) to any period of time (all together and at the same time)&lt;br&gt;
👉Add text with motion and animated letter effects, neon, rainbow and so on&lt;br&gt;
👉Loop, reverse, trim, speed up and down your video at any time period&lt;/p&gt;

&lt;p&gt;Surely, you can create animated posts, ads, stories, videos using your images on Pixiko 😝&lt;/p&gt;

&lt;p&gt;We will be very grateful for the support on PH, and even more so for the use and feedback about Pixiko 😎&lt;/p&gt;

&lt;p&gt;P.S. Our Product Hunt link - &lt;a href="https://www.producthunt.com/posts/pixiko"&gt;https://www.producthunt.com/posts/pixiko&lt;/a&gt;&lt;/p&gt;

</description>
      <category>help</category>
      <category>startup</category>
      <category>saas</category>
    </item>
    <item>
      <title>😲 ZERO CSS and just 1 HTML element to build a fully interactive SPA???!!?? 😱 Abusing the internet once more! [Extreme SSR!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 21 May 2021 16:28:02 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-built-a-3-page-interactive-spa-with-a-single-image-element-and-no-css-extreme-ssr-4knk</link>
      <guid>https://dev.to/inhuofficial/i-built-a-3-page-interactive-spa-with-a-single-image-element-and-no-css-extreme-ssr-4knk</guid>
      <description>&lt;p&gt;I am back at it again, abusing the internet and this one should really blow you away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8cmpgNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceu1nrfg1hmf5hr2x1zf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8cmpgNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceu1nrfg1hmf5hr2x1zf.gif" alt='"hold onto your butts" from Jurassic Park 1'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time I really do think I have outdone myself.&lt;/p&gt;

&lt;p&gt;I present to you:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;A 3 page SPA with an interactive poll and a contact form, with no CSS and one DOM element - just a single image! (go on, inspect the page!)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I call it "Extreme Server Side Rendering (SSR)" 🤣&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE NOTE:&lt;/strong&gt; - if using a mobile you cannot use the contact form, I couldn't find a way of opening the keyboard without an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; I am afraid! Try it on PC instead!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FINAL THING:&lt;/strong&gt; Due to the round-trip time to the server the page feels "laggy", if you are on a 3G connection it might be unusable so wait until you are on a better connection before trying it!&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; &amp;gt; &amp;gt; &lt;a href="https://inhu.co/demos/single-image-spa/"&gt;Try the single image SPA here! (best viewed on PC)&lt;/a&gt; &amp;lt; &amp;lt; &amp;lt; &amp;lt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-can-i-do-in-the-spa"&gt;
  &lt;/a&gt;
  What can I do in the SPA?
&lt;/h2&gt;

&lt;p&gt;There are some fun bits for you to try:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-kind-of-works-with-a-keyboard"&gt;
  &lt;/a&gt;
  It kind of works with a keyboard
&lt;/h3&gt;

&lt;p&gt;Well, you can Tab to elements to highlight them. You can even activate them with "Enter". &lt;/p&gt;

&lt;p&gt;Just don't expect a smooth experience (and I have only tested it in Chrome so it may not work in other browsers!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-home-page-is-responsive"&gt;
  &lt;/a&gt;
  The home page is responsive
&lt;/h3&gt;

&lt;p&gt;Yup, if you try it on your mobile the home page actually has two different versions, a mobile one and a desktop one.&lt;/p&gt;

&lt;p&gt;On mobile you can even open and close the menu!&lt;/p&gt;

&lt;p&gt;I sadly didn't have time to make the other two pages responsive (this silly project took ages already!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-poll-actually-works"&gt;
  &lt;/a&gt;
  The poll actually works!
&lt;/h3&gt;

&lt;p&gt;Cast your vote on the SPA as to what you think of my silly experiments!&lt;/p&gt;

&lt;p&gt;The current results are as follows:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;This has to be the stupidest thing I have ever seen - I love it!&lt;/strong&gt;&lt;br&gt;
45%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quite silly, &lt;a href="https://dev.to/inhuofficial/animations-without-js-or-css-or-images-pure-html-animation-45di"&gt;being rick rolled by ASCII text&lt;/a&gt; was sillier though!&lt;/strong&gt;&lt;br&gt;
18%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is silly? I thought this was what server side rendering was!&lt;/strong&gt;&lt;br&gt;
36%&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-contact-form-works"&gt;
  &lt;/a&gt;
  The contact form "works"
&lt;/h3&gt;

&lt;p&gt;It is one of if not the worst experiences you will ever have on the web, but it works!&lt;/p&gt;

&lt;p&gt;In fact you can see the messages people have posted via the SPA in the final section!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-actually-going-on-here"&gt;
  &lt;/a&gt;
  What is actually going on here?
&lt;/h2&gt;

&lt;p&gt;Oh loads! &lt;/p&gt;

&lt;p&gt;Essentially every interaction with the page is being tracked with JavaScript and cookies.&lt;/p&gt;

&lt;p&gt;I am then sending that to a script on my server that renders an image based on mouse position, current focused item, keys pressed and more. I then send the constructed image back so you can view it!&lt;/p&gt;

&lt;p&gt;Needless to say I now have a much greater appreciation for browser developers as there are so many little things that I just take for granted!&lt;/p&gt;

&lt;p&gt;To give you an idea of how difficult this is, from the X and Y coordinates of the mouse I calculate if an item is hovered. To do that I need the X, Y, width and Height of each item on the page. I also need to know what state to turn that button to. &lt;/p&gt;

&lt;p&gt;Now if you click, I have to check if the click is within the bounds of a button and what action should be performed!&lt;/p&gt;

&lt;p&gt;Multiply that by 3 pages worth of buttons and inputs and a few other features and there is an awful lot I had to plumb together!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words-before-the-comments"&gt;
  &lt;/a&gt;
  Final words before the comments
&lt;/h2&gt;

&lt;p&gt;As with all of my silly experiments, there is no real point to this, just a bit of fun for you on a Friday!&lt;/p&gt;

&lt;p&gt;Have a fantastic weekend!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-comments-submitted-via-the-contact-page-may-be-disabled-if-people-cannot-behave-"&gt;
  &lt;/a&gt;
  User comments submitted via the contact page (may be disabled if people cannot behave 😋)
&lt;/h2&gt;

&lt;p&gt;Here are a few comments that people have added via the single image SPA! &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;InHuOfficial&lt;/strong&gt; - 17:11 21/05/2021&lt;br&gt;
I look forward to seeing the messages you all post! Don't forget that you have to wait one minute before refreshing this page to see your comment!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;asdfsadf&lt;/strong&gt; - 17:40 21/05/2021&lt;br&gt;
asdfasdfasdfasdfsaf&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;testt&lt;/strong&gt; - 17:41 21/05/2021&lt;br&gt;
est&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this article, give it a ❤🦄 and don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! (even if it is just to say how silly I am 😋!)&lt;/p&gt;
&lt;/blockquote&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>html</category>
    </item>
    <item>
      <title>A importância da matemática para a programação</title>
      <author>Fabrícia Diniz</author>
      <pubDate>Fri, 21 May 2021 16:18:05 +0000</pubDate>
      <link>https://dev.to/fabriciadiniz/a-importancia-da-matematica-para-a-programacao-329e</link>
      <guid>https://dev.to/fabriciadiniz/a-importancia-da-matematica-para-a-programacao-329e</guid>
      <description>&lt;p&gt;&lt;em&gt;Esse artigo surgiu a partir de uma palestra que eu dei para pessoas de ensino médio. O intuito era mostrar que a matemática existe no mundo real da profissão.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quando eu decidi abandonar a carreira de biotecnologista e virar programadora, instintivamente eu voltei a estudar cálculo, geometria... &lt;strong&gt;Não que eu esperasse encontrar esses assuntos no dia a dia do trabalho&lt;/strong&gt;, mas porque eu achava os desafios interessantes e via similaridade entre eles e os desafios impostos pela programação.&lt;/p&gt;

&lt;p&gt;A matemática se apoia na lógica, que é uma qualidade essencial para um bom profissional de TI, a geometria é uma aliada no processo criativo, ajudando na abstração do mundo real e estatística nem se fala (alô ciência de dados). É possível trabalhar com TI sem saber nada além do básico de matemática, &lt;strong&gt;mas saber conceitos de matemática mais avançados te ajuda a ser uma pessoa profissional de destaque.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pessoa que possui conhecimento em matemática é capaz de resolver problemas profundos, oferecendo soluções mais claras, organizadas e eficientes. Empresas como Amazon, Facebook e Google olham muito mais para a lógica no código que você escreve do que conhecimentos de tecnologias específicas. Elas te pedem para resolver desafios de lógica, resolver problemas apontando também a complexidade e a rapidez do código que você fez além da lógica que te levou à resposta apresentada.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uaqdUr5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmlxyqtk4u7t9ys9t6jr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaqdUr5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmlxyqtk4u7t9ys9t6jr.jpeg" alt="Sapinhos de porcelana trabalhando no computador, com um computador entre eles mostrando a logo do Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando estamos aprendendo matemática, nós aprendemos as operações básicas e depois evoluímos para as letrinhas, para achar x, achar y, e isso são funções, que é a base da computação todinha. Como na escola evoluímos de operações básicas só com números para funções que têm umas letras no meio, quando entramos no campo da programação os números e letras evoluem para &lt;strong&gt;qualquer coisa&lt;/strong&gt;. O que nós nos apoiamos para lidar com esses desafios mais complexos é na lógica que vem bem do início. Partimos de números para letras e depois para coisas como carros, naves espaciais… umas coisas mais legais e diferenciadas.&lt;/p&gt;

&lt;p&gt;Falando em naves espaciais, vocês sabiam que o programa que possibilitou o pouso do homem na lua pela primeira vez foi escrito por uma mulher? Foi a Margaret Hamilton que fez esse feito. &lt;strong&gt;Imaginem o TANTO de matemática que não é necessário para fazer uma nave espacial voar?&lt;/strong&gt; Ou então, pra fazer um joguinho como Minecraft?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfRTI-66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4urd4zbcb6lgs3ey4s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfRTI-66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4urd4zbcb6lgs3ey4s.jpeg" alt="Minecraft"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse jogos mais legais de hoje em dia as pessoas precisam simular no computador a física do mundo, uma bala ou uma flecha sendo lançadas, o seu personagem caindo muito rápido de um lugar alto e se estabacando no chão e você morrendo. Tudo isso envolve bastante matemática (e física). Meu marido começou a aprender design de jogos ano passado e eu o estava ajudando com a parte de programação puramente dita. A gente tinha que definir a velocidade do personagem quando ele andava, a velocidade quando ele corria, a aceleração para ele mudar de andando pra correndo pra parado. &lt;strong&gt;Tinha que definir a gravidade, a força do pulo do personagem pra definir quão alto ele ia pular e quão rápido ele ia cair no chão.&lt;/strong&gt; Foi bem divertido, e mostrou pra nós que tem muita matemática e física envolvida em fazer joguinhos legais.&lt;/p&gt;

&lt;p&gt;Hoje em dia ainda existem outras profissões dentro da TI que são bem legais e demandam bastante matemática, como ciência de dados que é estatística pura (&lt;em&gt;e uma das profissões de TI com os maiores salários&lt;/em&gt;), como inteligência artificial, robótica e o próprio desenvolvimento de jogos. Isso sem contar todas as profissões que envolvem hardware. A matemática permeia toda a base dos trabalhos em TI e definitivamente não é algo que fica na escola e deixa de impactar o nosso dia a dia no trabalho.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lembrete para quem chegou até aqui: matemática não é um pré-requisito, é apenas um bônus. Ainda é possível ser um excelente profissional em diversas áreas sem saber bulhufas de matemática.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>gamedev</category>
      <category>programming</category>
      <category>math</category>
    </item>
    <item>
      <title>Let's start the journey to learn together Full-Stack Development</title>
      <author>scotty252</author>
      <pubDate>Fri, 21 May 2021 15:59:06 +0000</pubDate>
      <link>https://dev.to/scotty252/let-s-start-the-journey-to-learn-together-full-stack-development-40a0</link>
      <guid>https://dev.to/scotty252/let-s-start-the-journey-to-learn-together-full-stack-development-40a0</guid>
      <description>&lt;p&gt;Hello, My name is James Scott and I am a students of CS, as most students would know just got into college for Bachelors.&lt;/p&gt;

&lt;p&gt;I will be utilizing this summer to learn Web development basic languages like HTML, CSS, JavaScript and more...&lt;/p&gt;

&lt;p&gt;🙏 🌍, I decided to create this space with the aim of documenting my programming road, organizing materials and inspirations that I have saved in millions of folders 🗂️ and notes 📚.&lt;/p&gt;

&lt;p&gt;You want to join me?👀&lt;/p&gt;

&lt;p&gt;I am working hard towards becoming a Full Stack Web Developer, learning programming is a bit tough for me because I have to reconcile it with my daily Online Classes and work.&lt;/p&gt;

&lt;p&gt;I will be happy to make contact with Dev community (dev.io)! 👩‍💻 🏦 Ohh, I would like to add English is not my native language, please understand. This is another challenge for me.&lt;/p&gt;

&lt;p&gt;Today onwards I will be sharing my Coding Journey with you guys. Be the part of my this journey.&lt;/p&gt;

&lt;p&gt;If you like to Be the part of my this journey and follow me: Instagram : &lt;a href="https://instagram.com/devscott20"&gt;https://instagram.com/devscott20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devscott20: GET INSPIRED!&lt;/p&gt;

&lt;p&gt;Happy Coding! ✌️&lt;/p&gt;

&lt;p&gt;Learning Resources :&lt;br&gt;
&lt;a href="https://freecodecamp.org"&gt;https://freecodecamp.org&lt;/a&gt; Responsive Web Design Certification &lt;a href="https://freecodecamp.org/learn"&gt;https://freecodecamp.org/learn&lt;/a&gt;&lt;br&gt;
“Put Down the Javascript: Learn HTML &amp;amp; CSS first“ &lt;a href="https://freecodecamp.org/news/put-down-the-javascri"&gt;https://freecodecamp.org/news/put-down-the-javascri&lt;/a&gt;..&lt;br&gt;
MDN Intro to Javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaSc"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaSc&lt;/a&gt;..&lt;br&gt;
Just Javascript email course &lt;a href="https://justjavascript.com"&gt;https://justjavascript.com&lt;/a&gt;&lt;br&gt;
JSRobot Learning Game &lt;a href="https://lab.reaal.me/jsrobot"&gt;https://lab.reaal.me/jsrobot&lt;/a&gt;&lt;br&gt;
reactjs.org Intro to React &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;https://reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;br&gt;
gatsbyjs.org Tutorials &lt;a href="https://gatsbyjs.org/tutorial"&gt;https://gatsbyjs.org/tutorial&lt;/a&gt;&lt;br&gt;
So you can check out this blog regularly and let's do this journey together.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;br&gt;
Which Course will you Choose?&lt;/p&gt;

&lt;p&gt;Please share your thoughts in comments!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build Serverless Applications using CDK and SAM</title>
      <author>Lorenz Vanthillo</author>
      <pubDate>Fri, 21 May 2021 15:56:56 +0000</pubDate>
      <link>https://dev.to/aws-builders/build-serverless-applications-using-cdk-and-sam-4oig</link>
      <guid>https://dev.to/aws-builders/build-serverless-applications-using-cdk-and-sam-4oig</guid>
      <description>&lt;p&gt;AWS recently announced the public preview of Serverless Application Model (SAM) support for CDK. SAM is an open-source framework that can be used to build, test and deploy serverless applications on AWS. It provides a Lambda-like execution environment that lets you locally build, test, and debug applications. Previously this could only be defined by SAM templates but now it is also possible through the AWS Cloud Development Kit (CDK)!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eCNL4LMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k2bhe9sr1ukxxusudvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eCNL4LMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k2bhe9sr1ukxxusudvo.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will guide you through a small demo project to demonstrate how to build a serverless application with AWS CDK and test it locally with AWS SAM.&lt;/p&gt;

&lt;p&gt;We will build a simple REST API which shows the current bid or ask price of a certain cryptocurrency on Binance (exchange), expressed in the value of Bitcoin. &lt;/p&gt;

&lt;p&gt;The API expects two query parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coin: (ETH, DOG, LINK, DOT, ...)&lt;/li&gt;
&lt;li&gt;price: (bid or ask)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of the API call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl "http://127.0.0.1:3000/crypto?type=ask&amp;amp;coin=ETH"
{"coin": "ETH", "price": 0.066225}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The setup in AWS will also be pretty straight forward. &lt;br&gt;
We will set up a Lambda proxy integration in API Gateway&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2mVOqkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jeqxpod37dzyst85djr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2mVOqkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jeqxpod37dzyst85djr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get started, we need to install the AWS CDK CLI and create a new CDK project. I use Python as client language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g aws-cdk
$ cdk init app --language python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The project structure looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── README.md
├── app.py
├── cdk.json
├── requirements.txt
├── sam_cdk_demo
│   ├── __init__.py
│   └── sam_cdk_demo_stack.py
└── setup.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file &lt;code&gt;sam_cdk_demo/sam_cdk_demo_stack.py&lt;/code&gt; should contain our code to define the AWS cloud resources we need but first let's start with writing our Lambda.&lt;/p&gt;

&lt;p&gt;Create a folder inside the root of the project called &lt;em&gt;"lambda"&lt;/em&gt; and add a &lt;code&gt;handler.py&lt;/code&gt;. The &lt;a href="https://github.com/ccxt/ccxt"&gt;ccxt&lt;/a&gt; library is used by our Lambda to interact with the Binance API. The Lambda itself is very basic on purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ccxt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;


&lt;span class="c1"&gt;# use CCXT library to connect with Binance API
&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ccxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'binance'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
    &lt;span class="s"&gt;'timeout'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'enableRateLimit'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coin_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# fetch latest ticker data for coin pair xxx/BTC
&lt;/span&gt;    &lt;span class="n"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_ticker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'{}/BTC'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coin_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# get ask/bid price from ticket data
&lt;/span&gt;    &lt;span class="n"&gt;current_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;price_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_price&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# get values from query string parameters
&lt;/span&gt;    &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'queryStringParameters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'coin'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'queryStringParameters'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# CCXT exchange expects coin in uppercase
&lt;/span&gt;    &lt;span class="n"&gt;valid_coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# get current price based on coin name and price type (ask/bid)
&lt;/span&gt;    &lt;span class="n"&gt;current_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'statusCode'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'headers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;'coin'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;valid_coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add a &lt;code&gt;requirements.txt&lt;/code&gt; inside the folder to make the ccxt library available to the Lambda.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ccxt==1.50.13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Lambda is ready! Now we will use AWS CDK to define our AWS infrastructure. We need to deploy the Lambda and create an API Gateway in front of it. Update the file &lt;code&gt;demo/demo_stack.py&lt;/code&gt;. We keep the code pretty basic again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aws_cdk&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;aws_lambda&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_lambda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;aws_apigateway&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;apigw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CdkLambdaSamStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;construct_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;construct_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# creating Lambda function that will be triggered by the API Gateway
&lt;/span&gt;        &lt;span class="n"&gt;get_price_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'CryptoFunction'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'handler.lambda_handler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PYTHON_3_8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lambda'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# create REST API
&lt;/span&gt;        &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apigw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RestApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'crypto-api'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# add resource /crypto
&lt;/span&gt;        &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'crypto'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# create Lambda integration 
&lt;/span&gt;        &lt;span class="n"&gt;get_crypto_integration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apigw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LambdaIntegration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_price_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# add method which requires two query string parameteres (coin and type)    
&lt;/span&gt;        &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;http_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;integration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_crypto_integration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;request_parameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'method.request.querystring.coin'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'method.request.querystring.type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;request_validator_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;apigw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestValidatorOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validate_request_parameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;requirements.txt&lt;/code&gt; in the project root with the necessary modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws-cdk.core
aws-cdk.aws_lambda
aws-cdk.aws_apigateway
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the Python virtual environment which is created by CDK and install the modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ source .venv/bin/activate
(.venv)$ pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use AWS SAM to test our setup locally. It's important to mention that you need to have &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; installed. We will use Docker to build our code. The Lambda will also run inside as a  Lambda-like Docker container.&lt;/p&gt;

&lt;p&gt;Prepare the deployment artifact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(.venv)$ sam-beta-cdk build --use-container
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the local API Gateway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sam-beta-cdk local start-api
...
* Running on http://127.0.0.1:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a tool like &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; (or &lt;code&gt;curl&lt;/code&gt; or just your browser) to perform calls against our API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8jK3RLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa74mjmgtbvj1prmbg5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8jK3RLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa74mjmgtbvj1prmbg5k.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes a few seconds to execute the function because AWS SAM is spinning up a Docker container to execute our code. After the execution the container is destroyed. &lt;/p&gt;

&lt;p&gt;When everything looks fine we can deploy it to AWS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(.venv)$ cdk bootstrap
(.venv)$ cdk deploy -a .aws-sam/build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now test against the deployed API.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1nF0ibb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5wwbqs1kech0j05bmli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1nF0ibb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5wwbqs1kech0j05bmli.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2zB4RVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r49pzbb9scyg77dlj5zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2zB4RVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r49pzbb9scyg77dlj5zn.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were able to test our API and Lambda using the new Serverless Application Model integration with CDK! You can find all code &lt;a href="https://github.com/lvthillo/sam-cdk-demo"&gt;on my GitHub&lt;/a&gt;. Be aware that this feature is in preview. Feel free to do more extensive testing. You can report bugs and submit feature requests to the &lt;a href="https://github.com/aws/aws-sam-cli"&gt;SAM opensource repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>cdk</category>
      <category>sam</category>
    </item>
    <item>
      <title>Sublime Text 4 is here, can it convert you? (Snack Pack #6)</title>
      <author>Blake Campbell</author>
      <pubDate>Fri, 21 May 2021 15:42:21 +0000</pubDate>
      <link>https://dev.to/blaketweeted/sublime-text-4-is-here-can-it-convert-you-snack-pack-6-53p0</link>
      <guid>https://dev.to/blaketweeted/sublime-text-4-is-here-can-it-convert-you-snack-pack-6-53p0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#it-hasnt-converted-me"&gt;
  &lt;/a&gt;
  It hasn't converted me.
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#benefits-large-files-and-memory"&gt;
  &lt;/a&gt;
  Benefits Large files and memory
&lt;/h2&gt;

&lt;p&gt;VSCode is without a doubt a fantastic experience when you get your workflow set up. VSCode also is a memory hog in comparison to Sublime Text 4. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not an extensive test&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;My VSCode has extensions running vs. a clean install of Sublime Text 4. The same project and tabs are open in each editor.&lt;/p&gt;

&lt;p&gt;The difference in memory is vast. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNIx-57N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v367ir84c17y2idr86x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNIx-57N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v367ir84c17y2idr86x.png" alt="Screen Shot 2021-05-21 at 11.19.49 AM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkDXsez4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dscg6lqgzivbozbu137c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkDXsez4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dscg6lqgzivbozbu137c.png" alt="Screen Shot 2021-05-21 at 11.20.29 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This doesn't bug me. My laptop has plenty of memory to use. If your workstation is limited, it's worth the mention. VSCode also has many more things I use, from the git integration to a snippet library I've written. Again not a fair comparison for memory usage.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-history-with-text-editors"&gt;
  &lt;/a&gt;
  My history with Text editors
&lt;/h2&gt;

&lt;p&gt;Sublime Text 2 -&amp;gt; Atom -&amp;gt; VSCode&lt;/p&gt;

&lt;p&gt;Starting with Sublime then moving to Atom. Atom was my favorite for years with the extensions. I even bought the coffee mug.&lt;/p&gt;

&lt;p&gt;After arriving at VSCode, I don't think I'm changing anytime soon. There are too many tools and plugins that make my job easier. There are a million articles about the extension marketplace and making your own.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#when-would-i-switch-fulltime"&gt;
  &lt;/a&gt;
  When would I switch full-time?
&lt;/h3&gt;

&lt;p&gt;Honestly, if Sublime Text integrated with VSCode's marketplace, that'd be the only thing to get me to switch. I'm not even sure if that's possible, but my entire flow has been built around VSCode. &lt;/p&gt;

&lt;p&gt;Even then, I need to buy a license. &lt;/p&gt;

&lt;p&gt;What do you think about the new version of Sublime Text? Is it worth the download?&lt;/p&gt;




&lt;p&gt;My snack pack reads are intended for a quick read without any fluff and provide actionable items.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>JavaScript tricky interview questions</title>
      <author>SABBIR AHMMED</author>
      <pubDate>Fri, 21 May 2021 15:37:29 +0000</pubDate>
      <link>https://dev.to/sabbir185/javascript-tricky-interview-questions-26ho</link>
      <guid>https://dev.to/sabbir185/javascript-tricky-interview-questions-26ho</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-the-truthy-and-falsy-values-of-javascript"&gt;
  &lt;/a&gt;
  What are the truthy and falsy values of javascript?
&lt;/h2&gt;

&lt;p&gt;JavaScript falsy means false of boolean condition context. Mainly, six expressions are called falsy. They are false, ‘’(empty string), undefined, null, NaN and 0. And the rest of the expression treats truthy. For example –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let value = NaN;

if(value) {
    console.log( “Truthy value”);
} else {
    console.log( “Falsy value” );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: False value, because here boolean condition expression is false.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-null-and-undefined"&gt;
  &lt;/a&gt;
  What is the difference between null and undefined?
&lt;/h2&gt;

&lt;p&gt;null and undefined both are reserve keywords of javascript. In javascript null is used to assign an empty value, that’s means nothing. On the other hand, if we declare a variable but not define it yet at that time, the variable will show undefined. For example –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let value;
console.log( value );     // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Else, if we don’t return anything from the function, it will show undefined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-and-"&gt;
  &lt;/a&gt;
  What is the difference between == and === ?
&lt;/h2&gt;

&lt;p&gt;Double equal ( == ) is used for comparing two variables, but it doesn't check their data types. If one is an integer and another is a string but both contain the same value then it will be true. For example — -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = 4 ;
let y = “4” ;
if ( x == y ) {
    console.log( “ condition is true “ );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, three equal not only compare two variables but also check their data types. If data types are the same both, so they are truthy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-scope-and-block-scope"&gt;
  &lt;/a&gt;
  Define scope and block scope
&lt;/h2&gt;

&lt;p&gt;The scope is just like the area. One is global scope and another is local scope. In general, when we declare a variable following by ES6 rules such as let and const in the function that variable is called function scoped variable or local variable. But if we want to declare a variable outside of a function is called global variable and its access is everywhere. For example –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const x = 15       // this is global variable or global scope

function doSomething() {
    const y = 15 ;           // local or function scoped variable
    const sum = x + y ;     // the variable which are inside of 
    return sum;            // curly braces are called block scope variable
}

console.log( doSomething() ); // 30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noted that, you can’t access y and sum variables outside of doSomething() function. The scope of y and sum are only in doSomething().&lt;/p&gt;

&lt;p&gt;let and const are called block scope keywords. You can’t access outside of block &lt;code&gt;curly braces { }&lt;/code&gt;. And var is a keyword that is called function scope variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hoisting"&gt;
  &lt;/a&gt;
  What is hoisting?
&lt;/h2&gt;

&lt;p&gt;Hoisting in javascript is so interesting part. In javascript, var is a keyword that is used to declare variables. This var allows hoisting, hoisting means you can access a variable from anywhere in the parent scope. Hoisting set a reference of variable in the global scope or immediate parent scope. But doesn’t carry assigned value. For example –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const playFootball = () =&amp;gt; {

    console.log("gameName hoisting : ", gameName );     // undefined

    let rain = true;

    var gameName = "Football";

    console.log("status hoisting : ", status );       // undefined

    if( rain ) {
        var status = "continue game" ;
    }

    console.log("status : ", status );               // continue game

}

playFootball();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-closure-in-js"&gt;
  &lt;/a&gt;
  What is Closure in JS?
&lt;/h2&gt;

&lt;p&gt;The closure is a hot topic of JS. I’m going to discuss this here briefly. In JavaScript, closures are created when the inner function is created inside of a function. That inner function holds the reference from its parent function scope. For example –&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJVIwA7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fs2cpqjd22b1utqruta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJVIwA7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fs2cpqjd22b1utqruta.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Here, num2 is used by the inner function that time closure appears. And num1 comes from global scope, global variables are always reserved and any function can use them. But a variable in the function when it is used by an inner function that time closure is created.&lt;/p&gt;

&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6</category>
      <category>interviewquestions</category>
    </item>
    <item>
      <title>A smooth transition from developer to Developer Relations</title>
      <author>SlashData</author>
      <pubDate>Fri, 21 May 2021 15:31:07 +0000</pubDate>
      <link>https://dev.to/slashdatahq/a-smooth-transition-from-developer-to-developer-relations-1797</link>
      <guid>https://dev.to/slashdatahq/a-smooth-transition-from-developer-to-developer-relations-1797</guid>
      <description>&lt;p&gt;By Anna Tsolakou&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you a developer who loves to build relationships with developer communities? Do you like to wear different hats and be involved in diverse tasks? Do you seek a transition from a full-time coding role to a Developer Relations one?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Thanks to the growth of the developer population, which has risen by 28.6% over the past two years to &lt;a href="https://www.devrelx.com/trends?lightbox=comp-kisqd0fz3__20871230-f323-4927-9b3a-0d058a0d1306_runtime_dataItem-kisqd0g0"&gt;24.3M developers according to SlashData research&lt;/a&gt;, the Developer Relations (DevRel) market has also rapidly evolved. There is a higher demand for DevRel teams in comparison to years ago when I got my first DevRel job. DevRel teams act as the link between a developer product and its users and our mission is to help them be successful. At &lt;a href="https://developers.amadeus.com/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;Amadeus for Developers&lt;/a&gt; we perform various tasks to achieve this mission by improving the developer experience, building relationships with our users, and ensuring we raise their voice internally in order to provide an attractive product.&lt;/p&gt;

&lt;p&gt;If you are a developer who shares the same purpose and seeks to get into the DevRel industry, I would love to share with you some practical advice to help you start your journey. Even though each journey is unique I hope you find them useful for a smooth transition from developer to DevRel.&lt;/p&gt;

&lt;p&gt;Let’s get into it! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#educate-yourself-around-developer-relations"&gt;
  &lt;/a&gt;
  Educate yourself around Developer Relations
&lt;/h1&gt;

&lt;p&gt;Keep learning and educating yourself will only guide you to be a better professional, which applies to both new and older DevRels.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Join communities&lt;/strong&gt;: being part of DevRel communities not only will encourage your growth and keep you up to date about the market, but it’s a great way to exchange resources, knowledge and experiences. &lt;a href="https://devrelcollective.fun/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;DevRel collective&lt;/a&gt; is one of these communities with a lot of great people to welcome you. Don’t be shy!
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Read books&lt;/strong&gt;: books are great resources to let us gain all the knowledge and guidance from industry experts. I would definitely recommend the &lt;a href="https://dev.toDeveloper%20Marketing%20+%20Relations%20Essential%20guide"&gt;Developer Marketing + Relations Essential Guide&lt;/a&gt; and the &lt;a href="https://www.apress.com/gp/book/9781484237472?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;Business Value of Developer Relations&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscribe to newsletters&lt;/strong&gt;: to always be up to date with the latest DevRel news, articles and trends. I  would recommend you to subscribe to the &lt;a href="https://www.devrelx.com/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;DevRelX&lt;/a&gt;, &lt;a href="https://devrelweekly.com/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;DevRel weekly&lt;/a&gt; and &lt;a href="https://developeravocados.net/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;Developer Avocados Weekly&lt;/a&gt; newsletters. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#practice-public-speaking"&gt;
  &lt;/a&gt;
  Practice Public Speaking
&lt;/h1&gt;

&lt;p&gt;It’s almost inevitable in a DevRel role to avoid public speaking even if it’s not your main duty. For this reason, it’s necessary to work on your public speaking skills, and below are some tips that I found certainly useful in my journey.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Attend a training&lt;/strong&gt;: a public speaking training can be the first step to teach you the fundamental principles and skills. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Find a mentor&lt;/strong&gt;: a mentor can guide you through your public speaking journey. There are even communities out there that provide voluntarily coaching such as &lt;a href="https://www.apidays.global/initiatives-women-in-apis/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;Women in APIs&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Practice&lt;/strong&gt;: in my opinion, this is the key to apply your knowledge and get the most out of it. Take opportunities in your current work and meetups to present topics you’ve worked on. The more you practice, not only you’ll get better but you’ll feel more confident. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be open to feedback&lt;/strong&gt;: every time you do a presentation seek feedback to get to know your strengths and your weaknesses. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#contribute-to-the-developer-community"&gt;
  &lt;/a&gt;
  Contribute to the developer community
&lt;/h1&gt;

&lt;p&gt;Developers will be your customers so it’s crucial to understand them and be part of the community. With the points below, you’ll be more familiar with the developer community and you’ll also be able to build your portfolio. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Contribute to open-source&lt;/strong&gt;: find projects that you like and contribute to them, or publish a tool you built and you believe could be useful for developers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build blog articles&lt;/strong&gt;: building developer content is one of our main responsibilities as DevRels so this is going to benefit you a lot for your day-to-day job. You can start writing your own articles about topics you like, technical solutions you found, or something you learned. Be creative and build even other types of content such as videos if you wish. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be active on developer forums&lt;/strong&gt;: places such as &lt;a href="https://stackoverflow.com/?utm_source=DevRelX_Blog&amp;amp;utm_medium=AnnaTsolakou&amp;amp;utm_campaign=DevtoDevRel"&gt;Stack Overflow&lt;/a&gt; will allow you to be in touch with developers and help them with their questions. At a DevRel position, it will also be your responsibility to solve developer questions so being active on developer forums will make you familiar with your tasks as DevRel. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be accessible on social media&lt;/strong&gt;: I used to be this person avoiding social media until I recognized it’s a good path to spread communication and knowledge. It’s one of the channels to keep you connected with developers and help you build a network. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#apply-devrel-practices-in-your-job"&gt;
  &lt;/a&gt;
  Apply DevRel practices in your job
&lt;/h1&gt;

&lt;p&gt;Even though you most probably work as a full-time developer you can see this as an opportunity to build your DevRel skills if your current environment permits you. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Build internal tools and docs&lt;/strong&gt;: as developers, we work out technical challenges by building new tools and solutions. Build and share developer tools and documentation that are going to be beneficial for your team. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be curious&lt;/strong&gt;: The DevRel role is transversal which means you are going to work closely with people from several departments such as marketing, strategy and product. You need to get a good understanding of other departments and learn many aspects of your product, not only related to the technical part. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#see-interviews-as-opportunities"&gt;
  &lt;/a&gt;
  See interviews as opportunities
&lt;/h1&gt;

&lt;p&gt;Who enjoys going through job interviews? They are stressful and energy-consuming for many of us. Yet my experience taught me interviews can be constructive and let us grow. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;See the positive side&lt;/strong&gt;: the purpose of the interview is not only for the company to evaluate your skills, but is the perfect way for you to know more about a product and a team and to discover if you’d like to work with them eventually. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn from assignments&lt;/strong&gt;: similarly to developer roles, DevRel hiring processes contain assignments. Take these tasks as an opportunity to learn and strengthen your skills. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don’t be afraid&lt;/strong&gt;: when you try to get your first job as DevRel, keep in mind that the interviewers have already an idea of your previous experiences. DevRel tools and processes can be developed but character traits and competencies are hard to teach. Don’t be afraid to show what you know and what you don’t know and just be yourself. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#remember-its-all-about-empathy"&gt;
  &lt;/a&gt;
  Remember it’s all about empathy
&lt;/h1&gt;

&lt;p&gt;There are a lot of characteristics you need to have as a DevRel such as good communication, curiosity, ability to learn fast but in my opinion, the key one is empathy. Even if you are an excellent public speaker, or you write great technical content, if you don’t have empathy this is not going to work for you. Our purpose is to understand developers and help them be successful. Being empathetic by nature is great but applying empathy in a professional environment is not trivial. These are my suggestions to improve your empathy once you get into the DevRel industry.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Get your hands dirty&lt;/strong&gt;: use the product you represent the way your customers do. This approach will allow you to get into their shoes and empathize with their struggles. For example, at Amadeus for Developers we build demo apps using our APIs and it lets us identify what our users experience. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do customer support&lt;/strong&gt;: by solving customer support inquiries you will be in touch with a lot of developers daily and you will get to know first hand how they feel about your product. You’ll feel more empathy when you get the message directly from them instead of other teams. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be open-minded&lt;/strong&gt;: when it comes to developer feedback you have to be open-minded and understand the power of people outside of your company; they have different points of view, diverse needs and even fresh ideas that may be from inside you can’t see. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are a few practical tips to help developers transition from a developer role to a DevRel one. I believe these points could also be useful for DevRels who already are in the industry and want to discover ways to improve in their profession. &lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anna Tsolakou&lt;/strong&gt; is a software engineer working as a Developer Advocate at Amadeus. She loves to wear different hats and DevRel is the ideal world for her to fulfil her expectations; software development and connecting with people at the same time. Passionate about open-source and AI.  &lt;/p&gt;

</description>
      <category>devrel</category>
      <category>career</category>
    </item>
    <item>
      <title>Data binding in Svelte</title>
      <author>Scott Spence</author>
      <pubDate>Fri, 21 May 2021 15:28:48 +0000</pubDate>
      <link>https://dev.to/graphcms/data-binding-in-svelte-2odp</link>
      <guid>https://dev.to/graphcms/data-binding-in-svelte-2odp</guid>
      <description>&lt;p&gt;Over the last few weeks, I have been getting familiar with Svelte and SvelteKit in particular. Coming from a React background there are many similarities using Svelte and some that are not.&lt;/p&gt;

&lt;p&gt;One thing that came up when using Svelte was passing values from a child to parent component and how that worked. I'm not going to go into detail on Svelte in particular, more some patterns to use.&lt;/p&gt;

&lt;p&gt;As with many things in programming, there are several ways to do any one thing, in this post I'll go over some of the approaches I have used and when to use them.&lt;/p&gt;

&lt;p&gt;I've created examples of these in the Svelte &lt;a href="https://svelte.dev/repl/"&gt;REPL&lt;/a&gt; so you can have a play around with them to familiarise yourself with them. I'd also recommend checking out the Svelte documentation; it's an awesome source of information.&lt;/p&gt;

&lt;p&gt;First up, it might be important to talk about props (short for properties) and how they are passed between components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passing-props-down-to-a-child"&gt;
  &lt;/a&gt;
  Passing props down to a child
&lt;/h2&gt;

&lt;p&gt;So here's a super simple &lt;code&gt;App.svelte&lt;/code&gt; (parent) that is importing the child component and passing a value, (in this case) &lt;code&gt;propValue&lt;/code&gt; down to a &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Child&lt;/span&gt; &lt;span class="na"&gt;propValue=&lt;/span&gt;&lt;span class="s"&gt;"Pass this to the child!"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much the same way as you would want to define a variable in React if the variable is scoped to the component then it's defined there.&lt;/p&gt;

&lt;p&gt;Svelte is a superset of HTML with the &lt;code&gt;.svelte&lt;/code&gt; extension so whereas in React a prop would be brought in as a parameter in the case of Svelte it's defined in script tags and exported. This means that the variable can be wrapped in some curly boys &lt;code&gt;{}&lt;/code&gt; in the markup (HTML) so it can be interpreted and read out by JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;propValue&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm taking this from the parent: {propValue}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what's this &lt;code&gt;export&lt;/code&gt;? I struggled with this initially, ultimately it's a way to make &lt;code&gt;propValue&lt;/code&gt; available to the parent. If you think that's weird, just wait until I detail reactive declarations! More on that soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passing-props-back-to-a-parent"&gt;
  &lt;/a&gt;
  Passing props back to a parent
&lt;/h2&gt;

&lt;p&gt;As a general rule data flow goes from the parent to the child but what if you want to pass a value back from the child to the parent?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-bindvalue-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;bind:value&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In Svelte using the &lt;code&gt;bind:value&lt;/code&gt; directive (command) to, a'hem bind the value of the text input to a variable &lt;code&gt;value&lt;/code&gt;, this is the shortest example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Input.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{value}!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although &lt;code&gt;value&lt;/code&gt; isn't a great variable name so it can be changed further:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Input.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;descriptiveVariableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{descriptiveVariableName}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{descriptiveVariableName}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a drawback with doing it this way which I'll come onto in a bit. For now, I have the data bound to that input, and changing the text will update the &lt;code&gt;p&lt;/code&gt; tag with what is added to the text input.&lt;/p&gt;

&lt;p&gt;Ok, now I'm treating that input as its own component so, say I want to access the input value from a parent? "How to pass the bound value back up to the parent?" I'm going to go back to the previous example with the less descriptive variable name now and remove the &lt;code&gt;p&lt;/code&gt; tag as I want to display the value in the parent, I'm also going to rename it from &lt;code&gt;Input.svelte&lt;/code&gt; to &lt;code&gt;Child.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can now access the bound value of &lt;code&gt;Child.svelte&lt;/code&gt; by defining a variable in the parent (&lt;code&gt;App.svelte&lt;/code&gt;) component, &lt;code&gt;inputValue&lt;/code&gt; in this case and pass that to the child:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Child&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{inputValue}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Input value is: {inputValue}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm adding &lt;code&gt;inputValue&lt;/code&gt; to a &lt;code&gt;p&lt;/code&gt; tag on the parent now to get that value. Changing the input in the parent now updates the &lt;code&gt;inputValue&lt;/code&gt; wrapped in the &lt;code&gt;p&lt;/code&gt; tag in the parent.&lt;/p&gt;

&lt;p&gt;So I'm updating the &lt;code&gt;Child&lt;/code&gt; component on the parent and getting that value back in the &lt;code&gt;inputValue&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now, I'm going to go back to the input example with the descriptive variable and try the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;descriptiveVariableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{descriptiveVariableName}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now changing the value in the parent doesn't seem to trigger any changes, but if I add a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag to the child and make some changes I can see that the changes are going from the parent to the child but aren't coming back to the parent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;descriptiveVariableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{descriptiveVariableName}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Child received props: {descriptiveVariableName}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In summary, you can pass down named props to components but if you want to pass the props back up to the parent then you'll need to use &lt;code&gt;bind:value&lt;/code&gt; alone. Something to keep in mind when taking this approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-callback"&gt;
  &lt;/a&gt;
  Using a callback
&lt;/h3&gt;

&lt;p&gt;This approach will be familiar if you are used to doing this in React with adding a callback function. Here an &lt;code&gt;onChange&lt;/code&gt; is defined in the &lt;code&gt;Child&lt;/code&gt; for the parent to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait! What's that &lt;code&gt;$&lt;/code&gt; doing there? That's a &lt;em&gt;reactive declaration&lt;/em&gt; which I touched on earlier but didn't give any explanation. This is how Svelte can keep track of a component's state change, so whenever &lt;code&gt;value&lt;/code&gt; is changed it updates &lt;code&gt;onChange&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the parent I can use the &lt;code&gt;onChange&lt;/code&gt; from the child to update the parent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputBoxValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Child&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{newValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; inputBoxValue = newValue} /&amp;gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Input box value is: {inputBoxValue}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't have to be bound to the value of an input though; another way to achieve this could be to do some validation on the input &lt;code&gt;on:blur&lt;/code&gt; so that when the user comes out of the input some validation can happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;onBlur&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value&lt;/span&gt; &lt;span class="na"&gt;on:blur=&lt;/span&gt;&lt;span class="s"&gt;"{onBlur}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as mentioned previously, with &lt;code&gt;onBlur&lt;/code&gt; (or whatever you want to call this function) this can trigger a function in the parent. I've added a &lt;code&gt;parentValidation&lt;/code&gt; function to be triggered in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputBoxValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentValidation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// validation here&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputBoxValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Child&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{inputBoxValue}"&lt;/span&gt; &lt;span class="na"&gt;onBlur=&lt;/span&gt;&lt;span class="s"&gt;"{parentValidation}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Input box value is: {inputBoxValue}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-forwarding-dispatching-an-action"&gt;
  &lt;/a&gt;
  Event forwarding / dispatching an action
&lt;/h3&gt;

&lt;p&gt;Last up is the event forwarding in Svelte because Svelte doesn't use a virtual DOM like Vue and React component events don't &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture"&gt;bubble&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this instance, I'm using the &lt;code&gt;createEventDispatcher&lt;/code&gt; from Svelte to create a &lt;code&gt;dispatch&lt;/code&gt; function for use in the child component and giving it the label &lt;code&gt;child-blur&lt;/code&gt; and passing the input &lt;code&gt;value&lt;/code&gt; back with the dispatcher.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Child.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;bind:value&lt;/span&gt; &lt;span class="na"&gt;on:blur=&lt;/span&gt;&lt;span class="s"&gt;{dispatch("child-blur",&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="err"&gt;)}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the parent much like with doing it with a callback but now in place of the &lt;code&gt;onBlur&lt;/code&gt; callback I'm using the &lt;code&gt;on:child-blur&lt;/code&gt; event to trigger the &lt;code&gt;parentValidation&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- App.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputBoxValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentValidation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// validation here&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Child&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;"{inputBoxValue}"&lt;/span&gt; &lt;span class="na"&gt;on:child-blur=&lt;/span&gt;&lt;span class="s"&gt;"{parentValidation}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Input box value is: {inputBoxValue}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd say as a project grows then this method will be the goto with a little boilerplate and a lot of flexibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I said at the beginning, there are a few ways to do this, and depending on your use case there may be a need to use any of these approaches.&lt;/p&gt;

&lt;p&gt;I hope you found it useful and that I helped identify some of the bumps you may come across when doing this for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I've added all the example code here to the [Svelte.dev] [REPL] so you can play around with them if you're so inclined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/repl/b350218ccfa146fca65e766f05dfd235?version=3.38.2"&gt;Passing props down to a child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/repl/116ab042341d48bda2232eae2b6f41a6?version=3"&gt;Using &lt;code&gt;bind:value&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/repl/5f4a327999cd49e5a79e91f6fbe994c8?version=3"&gt;Using a callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/repl/47e44c5f8fd648a586333d953260664d?version=3"&gt;Event forwarding / dispatching an action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>svelte</category>
      <category>sveltekit</category>
    </item>
    <item>
      <title>Building REST API using AWS with Serverless, Node.js, Express</title>
      <author>Salah856</author>
      <pubDate>Fri, 21 May 2021 15:14:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/building-rest-api-using-aws-with-serverless-node-js-express-2bk3</link>
      <guid>https://dev.to/aws-builders/building-rest-api-using-aws-with-serverless-node-js-express-2bk3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;p&gt;To get started, you'll need the Serverless Framework installed. You'll also need your environment configured with AWS credentials. &lt;/p&gt;

&lt;p&gt;Then, let's install a few dependencies. We'll install the express framework, as well as the serverless-http:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="nx"&gt;serverless&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a file index.js and initialize it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverless&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serverless-http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serverless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The serverless-http package is a handy piece of middleware that handles the interface between your Node.js application and the specifics of API Gateway.&lt;/p&gt;

&lt;p&gt;Then create a file serverless.yml:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;

&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nodejs6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ANY&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ANY {proxy+}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now deploy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;sls&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hooray! congratulations :D &lt;/p&gt;

&lt;p&gt;Coming part for how to use Dyanmodb as a data resource for enriching API. &lt;/p&gt;

&lt;p&gt;resources : &lt;br&gt;
Book: Full Stack Serverless: Modern Application Development for Nader Dabit &lt;br&gt;
&lt;a href="https://www.serverless.com/blog/serverless-express-rest-api"&gt;https://www.serverless.com/blog/serverless-express-rest-api&lt;/a&gt; &lt;/p&gt;

</description>
      <category>serverless</category>
      <category>node</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
