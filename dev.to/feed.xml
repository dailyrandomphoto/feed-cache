<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I love the way knowledge is shared in the programming world</title>
      <author>Francisco  Inoque</author>
      <pubDate>Wed, 07 Apr 2021 23:54:27 +0000</pubDate>
      <link>https://dev.to/frantchessico/i-love-the-way-knowledge-is-shared-in-the-programming-world-12kh</link>
      <guid>https://dev.to/frantchessico/i-love-the-way-knowledge-is-shared-in-the-programming-world-12kh</guid>
      <description>&lt;p&gt;Hello guys, today I want to share something with you that I love so much. So ...., I love to read code from other programmers and developers, I like to spend some time reading posts about the best programming practices, that somehow I feel better, sometimes I find myself discussing the code of another developer. And I feel that every time I read how my skills increase, my sense of criticism becomes smarter, how my practices improve and not like that, code from other programmers has served as inspiration for. I confess to you, everything I learned from programming I learned on the web, reading, watching video lessons and always practicing. I realize that there is no way to improve without seeing how others do it, without having feedback from other people, even though they don't know you, but through their codes you will have feedback, and this is what I love in the programming world, the way how knowledge is shared without any restrictions, without selfishness or self-centeredness. There are code projects all over the world, communities forming around technology ... I love it, I love this way of transmitting knowledge. For me, being a software engineer, programmer or developer is very noble. "I love how knowledge is shared in the programming world."&lt;/p&gt;

&lt;p&gt;Francisco Inoque.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>I love the way knowledge is shared in the programming world</title>
      <author>SavanaPointOfficial</author>
      <pubDate>Wed, 07 Apr 2021 23:40:21 +0000</pubDate>
      <link>https://dev.to/savanapointofficial/i-love-the-way-knowledge-is-shared-in-the-programming-world-40ed</link>
      <guid>https://dev.to/savanapointofficial/i-love-the-way-knowledge-is-shared-in-the-programming-world-40ed</guid>
      <description>&lt;p&gt;Hello guys, today I want to share something with you that I love so much. So ...., I love to read code from other programmers and developers, I like to spend some time reading posts about the best programming practices, that somehow I feel better, sometimes I find myself discussing the code of another developer. And I feel that every time I read how my skills increase, my sense of criticism becomes smarter, how my practices improve and not like that, code from other programmers has served as inspiration for. I confess to you, everything I learned from programming I learned on the web, reading, watching video lessons and always practicing. I realize that there is no way to improve without seeing how others do it, without having feedback from other people, even though they don't know you, but through their codes you will have feedback, and this is what I love in the programming world, the way how knowledge is shared without any restrictions, without selfishness or self-centeredness. There are code projects all over the world, communities forming around technology ... I love it, I love this way of transmitting knowledge. For me, being a software engineer, programmer or developer is very noble. "I love how knowledge is shared in the programming world."&lt;/p&gt;

&lt;p&gt;Francisco Inoque.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Generate Swagger for your Rails project, with no code changes, in 2 ¹/₂ minutes</title>
      <author>Kevin Gilpin</author>
      <pubDate>Wed, 07 Apr 2021 21:54:06 +0000</pubDate>
      <link>https://dev.to/appland/generate-swagger-for-your-rails-project-with-no-code-changes-in-2-minutes-3abj</link>
      <guid>https://dev.to/appland/generate-swagger-for-your-rails-project-with-no-code-changes-in-2-minutes-3abj</guid>
      <description>&lt;p&gt;In this 2 1/2 minute video, I'm introducing a new tool for Ruby called &lt;a href="https://github.com/applandinc/appmap_swagger-ruby#appmap_swagger"&gt;&lt;code&gt;appmap_swagger&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appmap_swagger&lt;/code&gt; eliminates the need to manually write &lt;a href="https://swagger.io/specification/"&gt;Swagger&lt;/a&gt;. It works by generating Swagger directly from your test cases. It doesn’t just look at your tests though; that’s not enough information to generate Swagger. It actually runs them. It sees every request, every mime type, every parameter, every header and every response. This information is generated by recording your test cases using a Ruby gem called &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Try using &lt;code&gt;appmap_swagger&lt;/code&gt; as you work! As you write your code and run test cases, re-generate AppMaps by running the tests with &lt;code&gt;APPMAP=true&lt;/code&gt;. Then run &lt;code&gt;bundle exec rake appmap:swagger&lt;/code&gt;. To see how your web services are changing, run &lt;code&gt;bundle exec rake appmap:swagger:diff&lt;/code&gt;. Here's an example from my own work, showing how routes are being changed, added, and removed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec rake appmap:swagger:diff
changed       @ info.version
old value     : v0.22.0
new value     : v0.22.1
added         @ paths."/api/api_keys".delete.responses
added key     : 200
added value   : {"content"=&amp;gt;{"application/json"=&amp;gt;{}}}
removed       @ paths."/scenarios/{id}".put.requestBody.content."application/json".schema.properties.scenario.properties
removed key   : mapset
removed value : {"type"=&amp;gt;"string"}
removed       @ paths."/scenarios/{scenario_id}/save_as".post.requestBody.content."application/json".schema.properties.save_as.properties
removed key   : feature
removed value : {"type"=&amp;gt;"string"}
removed       @ paths."/scenarios/{scenario_id}/save_as".post.requestBody.content."application/json".schema.properties.save_as.properties
removed key   : feature_group
removed value : {"type"=&amp;gt;"string"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I'm happy with what I see, and with the test coverage, I push the work-in-progress Swagger files up to my code repo. I create a Draft pull request as soon as I start coding, that way everyone can see what I’m doing, as I work. The generated Swagger file &lt;code&gt;openapi_stable.yaml&lt;/code&gt; gives my colleagues a great view of any web services changes that I’m making. That makes the eventual code review of my pull request a lot easier, and it helps make sure that my changes to the web services API don’t break anyone else’s code.&lt;/p&gt;

&lt;p&gt;Thanks for watching / reading! And if &lt;code&gt;appmap_swagger&lt;/code&gt; interests you, be sure and check out the &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap extension for VSCode&lt;/a&gt;. It turns AppMaps into interactive, accurate software architecture diagrams right in your IDE. The dependency map, trace view, web services, SQL, and source code integration help you understand and optimize your code &lt;em&gt;before&lt;/em&gt; code review. &lt;/p&gt;

&lt;p&gt;P.S. If you saw this post last week, my apologies for the re-publishing. It turned out that there were bugs in the Gem that kept it from working for a lot of people. So, I hope you'll give me another chance!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to write better reusable code</title>
      <author>Andi Rosca</author>
      <pubDate>Wed, 07 Apr 2021 21:18:08 +0000</pubDate>
      <link>https://dev.to/andi23rosca/how-to-design-better-reusable-code-2l3a</link>
      <guid>https://dev.to/andi23rosca/how-to-design-better-reusable-code-2l3a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Side-note, the &lt;a href="https://godoffrontend.com/posts/terseness-vs-control/"&gt;original article&lt;/a&gt; contains some interactive elements that are only images here. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Code that is easy to reuse is not very customizable, and code that is very customizable is not as easy to reuse.&lt;/p&gt;

&lt;p&gt;Think of the difference between&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"cancel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Cancel
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do more stuff with more code, but that comes with the cost of spending more time setting things up, i.e. boilerplate.&lt;/p&gt;

&lt;p&gt;Just think of all the abstract factory makers you've worked with if you've ever written some Java.&lt;/p&gt;

&lt;p&gt;How can we write code that is easy to use by other developers, without sacrificing on the ability to customize?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  Abstraction
&lt;/h2&gt;

&lt;p&gt;A good abstraction hides away the details that the developer doesn't care about, and only exposes the relevant bits and pieces.&lt;/p&gt;

&lt;p&gt;It's like when you try to explain your code to a non-technical person. You gloss over a lot of the details and years of knowledge you accumulated, and use more simple language and analogies that can convey the main idea.&lt;/p&gt;




&lt;p&gt;Think of an HTML element such as the &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a user of the HTML abstraction, you don't care about the inner workings of the browser that make it possible to have an interactive text-box presented to the user.&lt;/p&gt;

&lt;p&gt;What &lt;strong&gt;you&lt;/strong&gt; care about is that when you write &lt;code&gt;&amp;lt;input type="text" /&amp;gt;&lt;/code&gt; the user can now enter some data.&lt;/p&gt;

&lt;p&gt;But if an abstraction hides too many things, then it becomes useless in all but the most basic cases.&lt;/p&gt;

&lt;p&gt;Imagine if the input element didn't even let you change the placeholder text.&lt;/p&gt;

&lt;p&gt;Soon, a lot of developers would be doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-input-class"&lt;/span&gt; &lt;span class="na"&gt;contenteditable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Placeholder text...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Placeholder text..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you think that's a stretch you can look into recommended ways of replacing browser checkboxes with custom styled ones like &lt;a href="https://css-tricks.com/the-checkbox-hack/"&gt;this one&lt;/a&gt;. Almost all involve hiding the original box and replacing it with an svg or html/css one you made yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-about-balance-%E2%98%AF"&gt;
  &lt;/a&gt;
  It's about balance ☯
&lt;/h2&gt;

&lt;p&gt;So an abstraction's job is to hide things away from the user, so that they can focus on the task at hand. But also to not hide away too many things, in case the user wants to customize it to suit their needs.&lt;/p&gt;

&lt;p&gt;If it sounds like creating a good abstraction is hard to do, that's because &lt;em&gt;it is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your job as a developer is to navigate these complexities and walk the fine line between too complex and too simple.&lt;/p&gt;

&lt;p&gt;Let's see a few mental models and recipes that can get you started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-1-sane-defaults-and-escape-hatches"&gt;
  &lt;/a&gt;
  Pattern 1: Sane defaults and escape hatches
&lt;/h2&gt;

&lt;p&gt;This pattern is as simple as it sounds.&lt;/p&gt;

&lt;p&gt;Imagine you're making a recipe website for the singer Pitbull, who has recently taken up cooking. &lt;br&gt; He's known as &lt;strong&gt;Mr. World-Wide™&lt;/strong&gt;, so the website has to support all languages of the world.&lt;/p&gt;

&lt;p&gt;It's a fair assumption to make that most people visiting your website from Spanish, Mexican, Colombian addresses speak Spanish, so you make your default language for those IPs, well, Spanish.&lt;br&gt;&lt;br&gt;
You also know that there's such a thing as expats in the world, so you provide selection box at the top of your website to change the language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mr. World-Wide™&lt;/strong&gt; is indeed happy with your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RMQx2JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkdwwk87rr7t96d6danb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RMQx2JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkdwwk87rr7t96d6danb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting the default language to Spanish is a &lt;strong&gt;sane default&lt;/strong&gt;; a good assumption to make on how users will use your product/code/feature. You're now saving ~80% of people time from changing the language themselves.&lt;/p&gt;

&lt;p&gt;The language selection box at the top is an &lt;strong&gt;escape hatch&lt;/strong&gt;. For the rest of the users to whom the assumption doesn't apply, you offer a way for them to make changes.&lt;/p&gt;

&lt;p&gt;The escape hatch does make some people do more steps to use your website, but it doesn't make it &lt;strong&gt;impossible&lt;/strong&gt; for them to use it.&lt;/p&gt;

&lt;p&gt;The same principle applies to writing reusable code. You want to save time for 80% of the developers using your code, but leave a way for the rest of 20% to customize it to suit their needs.&lt;/p&gt;



&lt;p&gt;Obviously, most situations won't be as cut and dry as the example I've just provided. The hard part about applying this pattern is that you need to know what the most common use cases &lt;em&gt;are&lt;/em&gt;, which requires insight into the users of your code before you've even started writing it.&lt;/p&gt;

&lt;p&gt;However, it generally doesn't help if you obsess over what your potential users will try to do.&lt;/p&gt;

&lt;p&gt;If it's not obvious what the common use case is from the beginning, try the following things:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dogfooding"&gt;
  &lt;/a&gt;
  Dogfooding 🐶
&lt;/h3&gt;

&lt;p&gt;Dogfooding refers to eating your own dog food, i.e. use your own code yourself, in realistic scenarios.&lt;/p&gt;

&lt;p&gt;The more different real-life scenarios you can come up with to test your code, the better of a picture you will have of your code's shortcomings and what you can change to accommodate your future users.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#focus-on-the-escape-hatches"&gt;
  &lt;/a&gt;
  Focus on the escape hatches 🚀
&lt;/h3&gt;

&lt;p&gt;If after dogfooding it's still not super clear which features of your code you should make easy by default, you can try another approach and leave the figuring out for later.&lt;/p&gt;

&lt;p&gt;The way to do this and minimize breaking changes is to focus on building your escape hatches and making your code customizable.&lt;/p&gt;

&lt;p&gt;The more generically customizable it is, the better the chances of you being able to make modifications in the future without causing breaking changes.&lt;/p&gt;

&lt;p&gt;There is however the tradeoff that making things too customizable may make the internal implementation too complicated to maintain.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's say you have made a vanilla JavaScript button library that provides the coolest button the world has ever seen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWYj3DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0s14kot5enkdl8v3slt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWYj3DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0s14kot5enkdl8v3slt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BestestButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amazing button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From dogfooding you learn that it's very common to need to include icons, or loading spinners for buttons triggering async actions, etc.&lt;/p&gt;

&lt;p&gt;Now you may not know exactly which case you should support and make easiest for your amazing button, but you can ignore that for now and build in escape hatches that will enable you to consolidate the library later on, without having breaking changes.&lt;/p&gt;

&lt;p&gt;In this particular case you could add the following escape hatches for your users (and yourself):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make the button constructor accept both strings and HTML elements for the content shown inside&lt;/li&gt;
&lt;li&gt;Accept a second argument which will be a configuration object
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BestestButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Instead of only strings users can add their own custom html elements&lt;/span&gt;
  &lt;span class="nx"&gt;elementContainingIconAndText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Generic configuration object that can be extended with&lt;/span&gt;
  &lt;span class="c1"&gt;// other accepted properties&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;animateClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example I've laid out is quite simple and had possibly obvious answers, but the same principles apply to more complex scenarios.&lt;/p&gt;

&lt;p&gt;It'll probably take longer to come up with good escape hatches but anythings possible with enough time spent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-2-do-one-thing-well"&gt;
  &lt;/a&gt;
  Pattern 2: Do one thing well
&lt;/h2&gt;

&lt;p&gt;I named it a pattern for the sake of title consistency but this one's more of a philosophy. You should start thinking about it before any line of code is written.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;"do one thing well"&lt;/em&gt; means is that you should very clearly define what your code can do, and what it &lt;strong&gt;&lt;em&gt;won't&lt;/em&gt;&lt;/strong&gt; do.&lt;/p&gt;

&lt;p&gt;Let's say you've decided to create an HTML Canvas library for making interactive 2D shapes that you can select and drag around. You go ahead and implement a great library that many people use and like.&lt;/p&gt;

&lt;p&gt;However, you start noticing that many users report the library rendering very slowly when there are more than 5000 shapes, and they all urge you to also provide a WebGL rendering option, for high-performance needs.&lt;/p&gt;

&lt;p&gt;It is up to you now to decide if the &lt;em&gt;one thing&lt;/em&gt; that your library does well is either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Makes drawing 2D shapes &lt;strong&gt;&lt;em&gt;on the Canvas&lt;/em&gt;&lt;/strong&gt; easy&lt;/li&gt;
&lt;li&gt; Makes drawing 2D shapes &lt;strong&gt;&lt;em&gt;in the Browser&lt;/em&gt;&lt;/strong&gt; easy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's your choice what the scope of your library is, but it should be a conscious choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-just-go-with-the-flow"&gt;
  &lt;/a&gt;
  Don't just go with the flow 🌊
&lt;/h3&gt;

&lt;p&gt;If you get pressured into implementing version 2, people might start requesting for you to add more functionality. Maybe they want special options for the WebGL. Maybe they want you to add basic 3D shapes as well.&lt;/p&gt;

&lt;p&gt;You might wake up in a few years realizing you implemented &lt;a href="https://www.blender.org/features/"&gt;Blender&lt;/a&gt; in the browser, when all you actually wanted to do was to drag some rectangles around.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stick-with-what-you-believe-is-best"&gt;
  &lt;/a&gt;
  Stick with what you believe is best
&lt;/h3&gt;

&lt;p&gt;If you stick with your initial scope and purpose, you can spend more time to improve the features that are already there.&lt;/p&gt;

&lt;p&gt;You could still implement that WebGL rendering option for performance gains, but this time as part of the goal of the library.&lt;br&gt;
If people start requesting basic 3D shapes, you can simply say that implementing that would defeat the purpose of the library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-make-multiple-things-that-do-one-thing-well"&gt;
  &lt;/a&gt;
  You can make multiple things that do one thing well
&lt;/h3&gt;

&lt;p&gt;If you do think a browser based Blender is cooler and want to implement a WebGL 3D editor, there's no reason why you can't create a new library that does that &lt;em&gt;one thing&lt;/em&gt; very well, without changing your 2D Canvas code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-coming-soon"&gt;
  &lt;/a&gt;
  Part 2 coming soon
&lt;/h2&gt;

&lt;p&gt;There are more tips I would like to share with you, but I want to keep articles at a manageable length.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2 of this post!&lt;/p&gt;

&lt;p&gt;You can subscribe to get email notifications on the original post page (at the bottom): &lt;a href="https://godoffrontend.com/posts/terseness-vs-control/"&gt;https://godoffrontend.com/posts/terseness-vs-control/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Youtube To MP3 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 07 Apr 2021 21:18:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</link>
      <guid>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</guid>
      <description>&lt;p&gt;youtube to mp3 app using html5, css3 &amp;amp;javascript 😍🎉&lt;/p&gt;

&lt;p&gt;Demo : &lt;br&gt;
&lt;a href="https://youtube-mp3.netlify.app/"&gt;https://youtube-mp3.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check my #100DaysOfCode challenge 😍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saidMounaim/100DaysOfCode"&gt;https://github.com/saidMounaim/100DaysOfCode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Autocomplete API with Serverless Redis
</title>
      <author>Noah</author>
      <pubDate>Wed, 07 Apr 2021 21:09:45 +0000</pubDate>
      <link>https://dev.to/noahfschr/autocomplete-api-with-serverless-redis-4n29</link>
      <guid>https://dev.to/noahfschr/autocomplete-api-with-serverless-redis-4n29</guid>
      <description>&lt;p&gt;This tutorial implements an autocomplete API powered by serverless Redis. See &lt;a href="https://auto-complete-example.vercel.app/"&gt;the demo&lt;/a&gt; and &lt;a href="https://wfgz7cju24.execute-api.us-east-1.amazonaws.com/query?term=ca"&gt;API endpoint&lt;/a&gt; and &lt;a href="https://github.com/upstash/serverless-tutorials/tree/master/auto-complete-api"&gt;the source code&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;We will keep country names in a Redis Sorted set. In Redis sorted set, elements with the same score are sorted lexicographically. So in our case, all country names will have the same score, 0. We keep all prefixes of country and use ZRANK to find the terms to suggest. See &lt;a href="http://oldblog.antirez.com/post/autocomplete-with-redis.html"&gt;this blog post&lt;/a&gt; for the details of the algorithm. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-project-setup"&gt;
  &lt;/a&gt;
  Step 1: Project Setup
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I will use Serverless framework for this tutorial. You can also use &lt;a href="//using_aws_sam.md"&gt;AWS SAM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you do not have it already install serverless framework via: &lt;code&gt;npm install -g serverless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In any folder run &lt;code&gt;serverless&lt;/code&gt; as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt; serverless

Serverless: No project detected. Do you want to create a new one? Yes
Serverless: What do you want to make? AWS Node.js
Serverless: What do you want to call this project? test-upstash

Project successfully created in 'test-upstash' folder.

You can monitor, troubleshoot, and test your new service with a free Serverless account.

Serverless: Would you like to enable this? No
You can run the “serverless” command again if you change your mind later.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the project folder create a node project with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install the redis client with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install ioredis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-api-implementation"&gt;
  &lt;/a&gt;
  Step 2: API Implementation
&lt;/h3&gt;

&lt;p&gt;Edit handler.js file as below.&lt;br&gt;
See &lt;a href="http://oldblog.antirez.com/post/autocomplete-with-redis.html"&gt;the blog post&lt;/a&gt; for the details of the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid parameters. Term needed as query param.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;terms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;terms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Query:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-database-on-upstash"&gt;
  &lt;/a&gt;
  Step 3: Create database on Upstash
&lt;/h3&gt;

&lt;p&gt;If you do not have one, create a database following this &lt;a href="//overall/getstarted.md"&gt;guide&lt;/a&gt;. Copy the Redis URL by clicking &lt;code&gt;Redis Connect&lt;/code&gt; button inside database page. Copy the URL for ioredis as we use ioredis in our application. Create .env file and paste your Redis URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REDIS_URL=YOUR_REDIS_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The URL format of ioredis is different than other clients. There is a colon before the password. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-4-initialize-database"&gt;
  &lt;/a&gt;
  Step 4: Initialize Database
&lt;/h3&gt;

&lt;p&gt;We will initialize the database with country names. Copy and run initdb.js script from &lt;a href="https://github.com/upstash/serverless-tutorials/blob/master/auto-complete-api/initdb.js"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We simply put the country names and all their prefixes to the sorted set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Afghanistan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Åland Islands&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Albania&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Algeria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;terms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;term&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;terms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;terms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-deploy-your-function"&gt;
  &lt;/a&gt;
  Step 5: Deploy Your Function
&lt;/h3&gt;

&lt;p&gt;Edit &lt;code&gt;serverless.yml&lt;/code&gt; as below and replace your Redis URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-complete-api&lt;/span&gt;
&lt;span class="c1"&gt;# add this if you set REDIS_URL in .env&lt;/span&gt;
&lt;span class="na"&gt;useDotenv&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;frameworkVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2'&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;lambdaHashingVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20201221&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;REDIS_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;REPLACE_YOUR_REDIS_URL&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;handler.query&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;httpApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/query&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;
          &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the project folder run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serverless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run your function with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;serverless invoke &lt;span class="nt"&gt;-f&lt;/span&gt; query &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{ "queryStringParameters": {"term":"ca"}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should give the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"statusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Access-Control-Allow-Origin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Access-Control-Allow-Credentials"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Query:ca&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAMBODIA&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAMEROON&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CANADA&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAPE VERDE&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAYMAN ISLANDS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also test your function using AWS console. In your AWS Lambda section, click on your function. Scroll down to the code sections and click on the &lt;code&gt;Test&lt;/code&gt; button on the top right. Use &lt;code&gt;{ "queryStringParameters": {"term":"ar"}}&lt;/code&gt; as your event data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-run-your-function-locally"&gt;
  &lt;/a&gt;
  Step 6: Run Your Function Locally
&lt;/h3&gt;

&lt;p&gt;In your project folder run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; serverless invoke &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; query &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{ "queryStringParameters": {"term":"ca"}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should give the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"statusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Access-Control-Allow-Origin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Access-Control-Allow-Credentials"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Query:ca&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:[&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAMBODIA&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAMEROON&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CANADA&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAPE VERDE&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CAYMAN ISLANDS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;]}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>serverless</category>
      <category>redis</category>
      <category>node</category>
      <category>awslambda</category>
    </item>
    <item>
      <title>Self-Studying Advice from CodeNewbie Community</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 07 Apr 2021 20:57:29 +0000</pubDate>
      <link>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</link>
      <guid>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</guid>
      <description>&lt;p&gt;I came across a great post on the &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie Community&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfstudying-101-advice-from-a-selftaught-dev"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://community.codenewbie.org/httpspauline/self-studying-101-advice-from-a-self-taught-dev-2io2"&gt;"Self-studying 101: Advice From a Self-Taught Dev”&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you're a newbie in deep need of self-teaching tips, or just feel like you need to improve on this skills, I highly recommend this post.&lt;/p&gt;

&lt;p&gt;Reminder that the CodeNewbie community is a space entirely dedicated to newbie success. It's built DEV's open source software &lt;a href="https://github.com/forem/forem"&gt;Forem&lt;/a&gt; but posts and comments are moderated explicitly with newbies in mind. Check it out if you want a second space to hang out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We're getting closer to getting Forem Open Source project to general availability with versioned releases for anyone who wants to host a Forem. Stay tuned.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🌱
&lt;/h4&gt;

</description>
      <category>forem</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I Don't Use JavaScript Classes At All. Am I Missing Out on Something?</title>
      <author>Nico Zerpa (he/him)</author>
      <pubDate>Wed, 07 Apr 2021 20:33:25 +0000</pubDate>
      <link>https://dev.to/nicozerpa/i-don-t-use-javascript-classes-at-all-am-i-missing-out-on-something-4h2a</link>
      <guid>https://dev.to/nicozerpa/i-don-t-use-javascript-classes-at-all-am-i-missing-out-on-something-4h2a</guid>
      <description>&lt;p&gt;If you spend time reading about JavaScript and keeping up with the latest stuff online, you'll notice that many discussions revolve around classes. But if you don't use them, you might feel like you're "stuck in the old ways". &lt;strong&gt;What are you missing out on if you don't use classes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;strong&gt;it's definitely possible to write correct, scalable code without classes&lt;/strong&gt;. There are very few instances in which classes are necessary.&lt;/p&gt;

&lt;p&gt;Also, classes in JavaScript have a subtle difference from other languages like Java. This small difference can be confusing and introduce bugs that are hard to find. &lt;strong&gt;And dealing with classes mean that you'll have to deal with the dreaded &lt;code&gt;this&lt;/code&gt; keyword.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being a multi-paradigm language, JavaScript also works well with features from functional programming. You can:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compose functions&lt;/strong&gt;, calling a function, and pass the returned value to another function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;functionA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Partially apply functions&lt;/strong&gt;, call a function with just some of the arguments. It returns a function that you can call with the remaining arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flowerColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowerType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;flowerType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Call `flowerColour` partially, setting the 
  `flowerType` argument to "Roses" */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rosesAre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowerColour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Roses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rosesAre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Returns "Roses are red"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use and create higher-order functions&lt;/strong&gt;, these are functions that take a function as an argument or returns a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="cm"&gt;/* Map is a higher-order function, because
   it takes a function as an argument */&lt;/span&gt;

&lt;span class="c1"&gt;// Returns [10, 16, 37, 9]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="cm"&gt;/* Another higher order function, in this
   case, it returns a function */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;luckyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s lucky number is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emmasLuckyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;createLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joesLuckyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Returns "Emma's lucky number is 7280"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emmasLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;// Returns "Joe's lucky number is 2971"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joesLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last example created a &lt;strong&gt;closure&lt;/strong&gt;. You create a closure when you create a function inside a function. This inner function has access to the variables from the parent function. The closure is the combination between the inner function and the variables from the parent.&lt;/p&gt;

&lt;p&gt;For example, when you call &lt;code&gt;createLuckyNumber&lt;/code&gt;, it reads the name, creates the lucky number, and returns an inner function. Even after &lt;code&gt;createLuckyNumber&lt;/code&gt; was called, the inner function still can read the person's name and the number. &lt;strong&gt;Closures are an alternative to private fields in classes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With these functional tools, you can also extend with libraries like Lodash, you are ready to write readable, performant and scalable code without classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-make-classes-tick"&gt;
  &lt;/a&gt;
  What Make Classes Tick
&lt;/h2&gt;

&lt;p&gt;There's a situation in which I use classes and I think it's the best way to use them. &lt;strong&gt;Classes are good when you want to isolate a complex task from the rest of the application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This kind of class is like a "black box". That's because the rest of the codebase doesn't know (and doesn't care) about how the object works internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most of its properties are private.&lt;/strong&gt; Some of them might be public, and these properties can't be changed from outside the object unless it's strictly necessary. That's because that could mess with the object's inner workings.&lt;/p&gt;

&lt;p&gt;(Note that JS still doesn't support private members, in this case, I just don't access them from outside the class.)&lt;/p&gt;

&lt;p&gt;You should avoid using setter methods unless strictly necessary because it's the same as changing the object's properties from the outside.&lt;/p&gt;

&lt;p&gt;When you need some functionality from the object, you can call one of the public methods, which performs an operation and returns the desired value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The public methods consist of actions and operations that the object can do&lt;/strong&gt;. For example, in a &lt;code&gt;Car&lt;/code&gt; class, having an &lt;code&gt;accelerate&lt;/code&gt; method is better than, say, &lt;code&gt;setSpeed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But in the end, this is a way to manage internal state, because the private properties of an object are its state. For that reason, I don't use classes in projects with a state management library. &lt;strong&gt;So even in this case, classes aren't really necessary.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;p.s. Did you like what you've read? Every week I send an email with free tips and insights to become a better JavaScript dev. If you're interested, &lt;a href="https://nicozerpa.com/newsletter/"&gt;https://nicozerpa.com/newsletter/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why I didn't just use NgRx, NGXS or Subjects in a Service</title>
      <author>Mike Pearson</author>
      <pubDate>Wed, 07 Apr 2021 20:20:24 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</link>
      <guid>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</guid>
      <description>&lt;p&gt;I am about to throw shade at some beloved state management solutions, and this is bound to upset some people. Great people have worked hard on these, and I am seriously grateful to anyone who has contributed to the many state management options out there.  However, I have been asked to clarify why I created StateAdapt instead of using an existing solution. &lt;/p&gt;

&lt;p&gt;Before you read this you should read &lt;a href="https://medium.com/weekly-webtips/introducing-stateadapt-reusable-reactive-state-management-9f0388f1850e"&gt;my article introducing StateAdapt&lt;/a&gt;. It is much more positive than this.&lt;/p&gt;

&lt;p&gt;Anyway, let's get into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngrx"&gt;
  &lt;/a&gt;
  NgRx
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" alt="What NgRx is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;Recently I created a complex tree of components in an NgRx project only to find out later that a 2nd copy of that tree of components needed to exist on the same page at the same time. I would need to add an extra property to 30 actions so that the reducer could become more complicated and know whether an action should apply to one place in the state tree or another. &lt;/p&gt;

&lt;p&gt;If we managed state like we built UIs—with components—we could add another instance of a state pattern in as little as 2 lines of code. I believe we could achieve this with the state adapter pattern introduced in NgRx/Entity, but I think most people would view it as even more boilerplate unless the surrounding boilerplate was reduced at the same time. That is what I did in StateAdapt. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;Everyone knows about the boilerplate problem with NgRx. The NgRx Core team has done a terrific job of reducing this, but in order to reduce it to a minimum you would need to take full advantage of RxJS, which StateAdapt does. StateAdapt achieves the same benefits as NgRx with 60% the minimum code compared to modern NgRx. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices?
&lt;/h3&gt;

&lt;p&gt;NgRx seems to try to distance itself from Redux, but it is still a copy of Redux wrapped in an observable. Unfortunately, there is a lot of wisdom and best practices in the Redux community that did not successfully make its way over. There is some guidance, like &lt;a href="https://www.youtube.com/watch?v=JmnsEvoy-gY"&gt;this terrific talk&lt;/a&gt; by Mike Ryan, but I believe people are largely using NgRx in a way that minimizes the benefits they get from it. &lt;/p&gt;

&lt;p&gt;I wrote &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;Stop using ngrx/effects for that&lt;/a&gt; in 2017 in the hopes that people would stop using ngrx/effects for everything. It mostly didn't work. The first example in the &lt;a href="https://ngrx.io/guide/effects"&gt;NgRx/Effects&lt;/a&gt; documentation is for something that NgRx/Effects shouldn't be used for: Subscribing to data by dispatching an action. In my article I explain why using plain RxJS makes data dependencies much more flexible and maintainable. &lt;/p&gt;

&lt;p&gt;My solution did not catch on very well, and I have seen indications that people were intimidated by the little-known &lt;code&gt;using&lt;/code&gt; function from RxJS that it requires. Unfortunately I was too lazy to write more about that solution. So, one of my primary goals in StateAdapt was to just take care of that behind the scenes. I am very happy with how it turned out. With StateAdapt, developers can focus on thinking reactively and not worry about how to involve the store. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngxs"&gt;
  &lt;/a&gt;
  NGXS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" alt="What NGXS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;This is the same problem I talked about with NgRx above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-is-an-effect"&gt;
  &lt;/a&gt;
  Everything is an effect
&lt;/h3&gt;

&lt;p&gt;I already thought people were drastically overusing NgRx/Effects, but then somebody created a state management library where literally everything is an effect. &lt;/p&gt;

&lt;p&gt;Rather than repeat myself about why I love pure functions, I will just refer you to &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;my first article&lt;/a&gt;. I think it is wonderful that people are trying to reduce state management boilerplate, but I personally find NGXS code to be hard to understand. Data structure manipulation gets in the way of trying to understand the overall data flow in an application, and vice versa. I like separation of concerns between the big picture stuff and the details of how state is changed. NgRx has that (when not overusing NgRx/Effects) but it comes at the cost of all that boilerplate. But StateAdapt maintains it while reducing boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-action-dispatching"&gt;
  &lt;/a&gt;
  Multiple action dispatching
&lt;/h3&gt;

&lt;p&gt;Dispatching multiple actions at the same time is an anti-pattern in Redux, and NGXS encourages it with special syntax. &lt;/p&gt;

&lt;p&gt;One of my first experiences in an NGXS application was opening Redux Devtools and seeing this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" alt="Multiple Actions Dispatched"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I looked at the code and saw that these actions were all dispatched at the same time. &lt;/p&gt;

&lt;p&gt;The line between what was happening and how the app reacted was blurred to the point where I could no longer clearly see what was happening. There should have just been one action dispatched: &lt;code&gt;AnswerCall&lt;/code&gt;. If I was interested in the details, I could click on it and look at the state changes. &lt;/p&gt;

&lt;p&gt;Also, if you try to jump to any of these actions in Redux Devtools it will put the app in an intermediate state that is impossible in reality. &lt;/p&gt;

&lt;p&gt;The last issue is that this is backwards from FRP. Rather than multiple action handlers listening to one action in their respective state files, the event source is in charge of making all the changes downstream. An event source that dispatches multiple actions is a lot more than an event source.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  Akita
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" alt="What Akita is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperative-state-management"&gt;
  &lt;/a&gt;
  Imperative State Management
&lt;/h3&gt;

&lt;p&gt;State is updated imperatively in Akita, like it tends to be in NGXS. Actually, NGXS would be improved if its syntax were more like Akita's, but they both suffer from the issues I mentioned in the section about NGXS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subjects-in-a-service"&gt;
  &lt;/a&gt;
  Subjects in a Service
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" alt="What RxJS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-redux-devtools"&gt;
  &lt;/a&gt;
  No Redux Devtools
&lt;/h3&gt;

&lt;p&gt;RxJS is notoriously annoying to debug. Usually you have to edit the file by putting a &lt;code&gt;tap(console.log)&lt;/code&gt; in there, reload the app and reproduce the situation you wanted to debug. But Redux Devtools keeps track of everything automatically, so you can just open it anytime and explore what happened at any time. &lt;/p&gt;

&lt;p&gt;(Actions and state reactions are a big part of understanding what is happening in an application, so Redux Devtools is great, but I am still trying to find a better way to debug RxJS for the other parts of applications. If anyone knows of anything, let me know.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-selectors"&gt;
  &lt;/a&gt;
  No Selectors
&lt;/h3&gt;

&lt;p&gt;Sometimes you want to combine observables, but &lt;code&gt;combineLatest&lt;/code&gt; emits once for each input observable, even if the input observables emit synchronously. I believe this is the original reason NgRx included &lt;code&gt;createSelector&lt;/code&gt;, because selectors solve this. &lt;/p&gt;

&lt;p&gt;It is also really nice to have all the derived state calculated in pure functions, separate from the asynchronous RxJS stuff. &lt;/p&gt;

&lt;p&gt;Another benefit is with derived state. Pure RxJS makes you &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;distinctUntilChanged&lt;/code&gt; and &lt;code&gt;shareReplay&lt;/code&gt; if you want to calculate derived state efficiently. Selectors do not need any of that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stateadapt"&gt;
  &lt;/a&gt;
  StateAdapt
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" alt="StateAdapt has everything"&gt;&lt;/a&gt;&lt;br&gt;
So, all of that is why I wrote StateAdapt. Is it perfect? No. Is it for everyone? Well, I think it is for everyone who loves minimal, reactive, debuggable and reusable code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://state-adapt.github.io/"&gt;Give it a try&lt;/a&gt; and let me know what you think. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h1&gt;

&lt;p&gt;If there are any I missed, please let me know. I searched a lot before I wrote StateAdapt, but I may have missed something. &lt;/p&gt;

&lt;p&gt;Also, if anyone wants to see any comparisons, I would love to create some. I already plan on doing some. But if you show me a feature developed in one state pattern, I will recreate it using StateAdapt. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h1&gt;

&lt;p&gt;And please forgive me! I love you all!&lt;/p&gt;

</description>
      <category>stateadapt</category>
      <category>ngrx</category>
      <category>ngxs</category>
      <category>akita</category>
    </item>
    <item>
      <title>Want to Learn Programming? Avoid These 3 Mistakes</title>
      <author>Mateusz Dziubek</author>
      <pubDate>Wed, 07 Apr 2021 20:19:02 +0000</pubDate>
      <link>https://dev.to/matdziu/want-to-learn-programming-avoid-these-3-mistakes-2j42</link>
      <guid>https://dev.to/matdziu/want-to-learn-programming-avoid-these-3-mistakes-2j42</guid>
      <description>&lt;p&gt;As the date of my &lt;a href="https://codersbible.com/before-you-start-webinar/"&gt;online workshop “Before You Start Learning How to Code”&lt;/a&gt; approaches, I thought I’ll share 3 common mistakes that you should be aware of when diving head first into the complicated programming world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-1-you-learn-to-code-but-do-not-focus-on-practice"&gt;
  &lt;/a&gt;
  MISTAKE #1: YOU LEARN TO CODE, BUT DO NOT FOCUS ON PRACTICE
&lt;/h2&gt;

&lt;p&gt;So you started learning to code. That’s great! What were the factors that you took into consideration when choosing the resource you’re learning from? If it’s an online course you should look for completeness (it should cover all the basics) and friendliness of the teaching style. But there’s one more important thing. Your first course/book/tutorial about programming should be focused on &lt;strong&gt;practice&lt;/strong&gt; as much as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;When I was designing &lt;a href="https://codersbible.teachable.com/p/python"&gt;my programming course for beginners&lt;/a&gt; I wanted my students to experience transformation, which is heavily focused on practice. I even phrased this transformation in one sentence: &lt;strong&gt;go from absolute beginner to having a complex programming project, which you'll be able to code by yourself&lt;/strong&gt;. Capstone projects, final projects, practice assignments - these are keywords you should look for while doing your research.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-2-you-focus-on-practice-but-do-not-create-projects"&gt;
  &lt;/a&gt;
  MISTAKE #2: YOU FOCUS ON PRACTICE, BUT DO NOT CREATE PROJECTS
&lt;/h2&gt;

&lt;p&gt;Treat practice exercises as side quests. Your primary goal should always be to create a small project, which has at least one of below characteristics:&lt;/p&gt;

&lt;p&gt;It’s fun (time really does fly by as you're having fun). &lt;br&gt;
It’s not too complicated (it should challenge you, not make you depressed). &lt;br&gt;
It’s made for somebody (make something even a tiny bit useful for you or your friends).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;Back when I was starting my programming journey I focused too much on theory. I remember spending 3 months reading “Thinking in Java” only to end up forgetting 90% of the material. Then I gave it another go, but this time I completed all exercises from the book. It was a bit better, but they became quite repetitive with time and made me unable to answer more creative job interview questions. In the end it was a deep dive into a project called “Manip” (a 3D simulator I created for my robotics classes) that showed my weaknesses and helped me improve rapidly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-3-you-create-projects-but-do-not-showcase-them"&gt;
  &lt;/a&gt;
  MISTAKE #3: YOU CREATE PROJECTS, BUT DO NOT SHOWCASE THEM
&lt;/h2&gt;

&lt;p&gt;So you’re learning to code - great, you’re doing practice projects - amazing, but to actually land a dream job you need to make a connection with recruiters. Not only by sending them CV, but also &lt;strong&gt;by showing them what you can build&lt;/strong&gt;. The number one reason aspiring programmers do not upload their code to sites like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; is perfectionism. Escape it as soon as possible. When in the future you revisit projects that you’re building now, you will always be unsatisfied with their quality. And that’s good. It means you’re making substantial progress!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;For inspiration, take a look at websites where I share my skills publicly and pick the one that best suits your needs: &lt;a href="https://github.com/matdziu"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/m-dziubek/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://matdziu.medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://dev.to/matdziu"&gt;Dev.to&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>What's New in Codesphere Version 1.7.0</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 07 Apr 2021 19:58:56 +0000</pubDate>
      <link>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</link>
      <guid>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We have exciting news.. we read your feedback and listened, we just released v1.7.0 as the latest version of Codesphere!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-new%C2%A0"&gt;
  &lt;/a&gt;
  What's new? 
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We added GitHub integration support&lt;/li&gt;
&lt;li&gt;We added ESlint code assistance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  Fixes
&lt;/h3&gt;

&lt;p&gt;✓ We improved overall sign-up and sign-in process&lt;/p&gt;

&lt;p&gt;In addition, our team is currently working on allowing users to sign in with third-party accounts like GitHub and Google to ensure that our users can get started with Codesphere as quickly as possible. We will be adding more frameworks and soon you will be able to connect your own domain and so much more. Stay tuned for future releases!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Three Things I Learned from Moonlighting as a Software Engineering Consultant</title>
      <author>Erik W</author>
      <pubDate>Wed, 07 Apr 2021 19:54:14 +0000</pubDate>
      <link>https://dev.to/erikwhiting88/three-things-i-learned-from-moonlighting-as-a-software-engineering-consultant-h98</link>
      <guid>https://dev.to/erikwhiting88/three-things-i-learned-from-moonlighting-as-a-software-engineering-consultant-h98</guid>
      <description>&lt;p&gt;In December, I completed my master's in software engineering. Ever since 2018, I have been juggling full time employment with being a full time student, and for the first time in 3 years, I had hours of free time I needed to fill.&lt;/p&gt;

&lt;p&gt;An old colleague who owns a software consultancy reached out and asked if I wanted to fill those hours by helping out on some of their projects for a few hours a week. I gladly accepted.&lt;/p&gt;

&lt;p&gt;The consultancy specializes in rescuing projects that have fast approaching deadlines for systems that are not progressing nearly as fast as they should be; a 911 for software projects if you will.&lt;/p&gt;

&lt;p&gt;I spent the next three months with this consultancy, jumping into projects that were practically on fire, learning the existing system as quickly as possible, understanding the remaining requirements, and deploying features and fixes before the due date. Although I no longer work for the company (I am once again going back to school lol), I gained some valuable perspectives and learned a lot.&lt;/p&gt;

&lt;p&gt;I want to share with you some of the most important things I learned.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#poor-design-will-come-back-to-bite-you"&gt;
  &lt;/a&gt;
  Poor Design Will Come Back to Bite You
&lt;/h1&gt;

&lt;p&gt;Many of the projects needed rescuing because the developer(s) originally hired to build the system either flaked, or the system evolved beyond a maintainable level of complexity. This isn't a knock against the developers, but a lot of times, when deadlines and doom are impending, good engineering practices get thrown out the window for something that works &lt;em&gt;&lt;em&gt;right now&lt;/em&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The problem is, poor design decisions don't just add to your problems, they multiply them. There were many times I thought the project I was working would have never caught on fire if the developers had added tests, adhered to SOLID principles, and remembered to keep it simple. &lt;/p&gt;

&lt;p&gt;This of course doesn't seem realistic when you've got milestones to make in a certain amount of time, but for long-running projects, try to consider how much time you'll save your future self by taking time to think through and create well-designed classes instead of slapping together something that merely gets the job done. Also, consider factoring things like design and test time into your estimates and learn how to communicate the upside of these things to potential clients.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#svc-ci-and-automated-deployment-are-huge-time-savers"&gt;
  &lt;/a&gt;
  SVC, CI, and Automated Deployment are Huge Time Savers
&lt;/h1&gt;

&lt;p&gt;First, I refuse to work on &lt;em&gt;any&lt;/em&gt; paid project without some kind of software version control (SVC) in place, even if it's just on my local environment. Having a shared repository not only facilitates better collaboration with your teammates, but a well documented repo will save you hours in onboarding time. I cannot think of a single excuse to not have version control in place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side Note and Self Plug: If you'd like to learn git in professional-level detail, please checkout my (currently in-progress) git series &lt;a href="https://erikscode.space/index.php/2021/03/26/professional-version-control-with-git-pt-1-the-basics/"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Secondly, if you can get a continuous integration (CI) server up and running with at least some basic smoke/sanity checks in place, you'll have a lot of confidence you wouldn't otherwise. In my 3 month stint as a consultant, I didn't work on a single project that had any tests, and that's scary as heck. An automated test suite is something of a safety net for catching simple errors and bad ideas you might overlook. It also can save you a lot of time doing time-consuming and tedious manual checks. Obviously, depending on the time crunch you're under, you might not always be able to get to 100% test coverage, but even 20% is way better than nothing.&lt;/p&gt;

&lt;p&gt;Finally, automate as much of the deployment process as you can. Different organizations will have different requirements around when things are allowed to be deployed and so on, but the more you can automate, the better. Even if it's just a simple Bash or PowerShell script, the less you have to think about, the better. The longer you spend doing deployment tasks, the more chance you have of messing something up and taking down a production system.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#php-is-still-thriving"&gt;
  &lt;/a&gt;
  PHP is Still Thriving
&lt;/h1&gt;

&lt;p&gt;I lost track of how many projects I worked on during my short time, but they were literally all written in PHP. That's not to say PHP was the only language in the system, but it was a significant piece in each.&lt;/p&gt;

&lt;p&gt;The reason I mention this is because PHP gets a lot of hate these days (and really, all the days that I can remember). That's fine but if that's a language you spent time learning, do not be discouraged, there is plenty of work for you out there.&lt;/p&gt;

&lt;p&gt;This also reminds me of a point I've always pushed: language doesn't really matter. For every 100 show-stopping problems I come across, 1 is because of language while the other 99 are because of poor design decisions. Learning and practicing good engineering principles will take you much further than a specific language will.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you enjoyed this article and it gave you some things to think about. I'm trying to get back into posting here more often so please keep a lookout for me and follow my new Twitter, @ErikWhiting4! &lt;/p&gt;

&lt;p&gt;Let me know if there's anything specific you'd like me to write about too, I'm here to help :)&lt;/p&gt;

</description>
      <category>career</category>
    </item>
  </channel>
</rss>
