<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Coderfiy</author>
      <pubDate>Mon, 09 Aug 2021 13:25:46 +0000</pubDate>
      <link>https://dev.to/googlie/10-vs-code-extensions-every-frontend-developer-should-use-3g8c</link>
      <guid>https://dev.to/googlie/10-vs-code-extensions-every-frontend-developer-should-use-3g8c</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code.¬†&lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>üöÄ20 Best CSS3 Library For Developers.</title>
      <author>Coderfiy</author>
      <pubDate>Mon, 09 Aug 2021 13:23:31 +0000</pubDate>
      <link>https://dev.to/googlie/20-best-css3-library-for-developers-3a8d</link>
      <guid>https://dev.to/googlie/20-best-css3-library-for-developers-3a8d</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;ü§î How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together¬†&lt;span&gt;20 best CSS libraries.&lt;/span&gt;¬†We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....ü§©&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;üöÄ20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Python Increment - Everything you need to know</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 09 Aug 2021 13:19:44 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/python-increment-everything-you-need-to-know-4ek5</link>
      <guid>https://dev.to/hrishikesh1990/python-increment-everything-you-need-to-know-4ek5</guid>
      <description>&lt;p&gt;In this short tutorial, we learn about how to increment in Python. We also look at why the unary increment/ decrement operator does not work in Python.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="#https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-increment"&gt;
  &lt;/a&gt;
  Table of Contents - Python increment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-doesnt-the-operator-work-in-python"&gt;Why doesn‚Äôt the ‚Äú++/--‚Äù operator work in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-increment"&gt;Python Increment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-increment-closing-thoughts"&gt;Python increment - Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-doesnt-the-operator-work-in-python"&gt;
  &lt;/a&gt;
  Why doesn‚Äôt the ‚Äú++/--‚Äù operator work in Python?
&lt;/h2&gt;

&lt;p&gt;If you have used programming languages like C you have likely used the ++/ -- operator to increment or decrement a variable. However, if you have tried the same in Python you would receive an Invalid Syntax error.&lt;/p&gt;

&lt;p&gt;Python does not treat variables the same way as C. Python uses names and objects and these values are immutable. The below examples would help you get a better understanding of this concept.  &lt;/p&gt;

&lt;p&gt;Let us assign the same integer value to multiple values and check the Id of the objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1833296619824
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1833296619824
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1833296619824
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see since all the variables have the same values Python assigns the same value for all the objects. Python does this to increase memory efficiency. &lt;/p&gt;

&lt;p&gt;Now if the value of one variable is changed, Python changes the value by reassigning the variable with another value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1825080174928
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1833296619824
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1833296619824
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the value of ‚Äòa‚Äô was changed, Python creates a new object and assigns it. However, the value of ‚Äòb‚Äô  and ‚Äòc‚Äô remains the same. &lt;/p&gt;

&lt;p&gt;In languages like C, each variable is given a value, if that value is incremented only that variable is affected. Since that is not the case in Python increment works differently. &lt;/p&gt;

&lt;p&gt;The value needs to be reassigned and incremented by 1.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-increment"&gt;
  &lt;/a&gt;
  Python Increment:
&lt;/h2&gt;

&lt;p&gt;Since ints are immutable, values need to be incremented and reassigned.&lt;/p&gt;

&lt;p&gt;This can be done using a = a +1, but Python supports a += 1 as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code shows how to increment values using Python increment. You could use the Id function before and after the values and check how the id changes after you have incremented the value. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-increment-closing-thoughts"&gt;
  &lt;/a&gt;
  Python increment - Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;Python increment can be quite easy to learn in case you are coming from another language. In case you are new to it, I would recommend you practice Python increment a few times. &lt;/p&gt;

&lt;p&gt;And in case you are wondering where Python increments are used, they are used to count occurrences of a particular instance. Eg: Likes, log in, etc. &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips For every web developer</title>
      <author>Coderfiy</author>
      <pubDate>Mon, 09 Aug 2021 13:19:39 +0000</pubDate>
      <link>https://dev.to/googlie/10-magical-javascript-tips-for-every-web-developer-5akh</link>
      <guid>https://dev.to/googlie/10-magical-javascript-tips-for-every-web-developer-5akh</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;‚Äî Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using¬†&lt;code&gt;Infinity&lt;/code&gt;¬†in¬†&lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable¬†&lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How to See Which Branch Your Teammate is on in Webstorm
</title>
      <author>Fred</author>
      <pubDate>Mon, 09 Aug 2021 12:44:29 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-webstorm-32c8</link>
      <guid>https://dev.to/gitlive/how-to-see-which-branch-your-teammate-is-on-in-webstorm-32c8</guid>
      <description>&lt;p&gt;&lt;em&gt;‚ÄúWhat branch are you on?‚Äù&lt;/em&gt; is often the first question you ask when a teammate says &lt;em&gt;‚ÄúThe tests aren't passing‚Äù&lt;/em&gt; or &lt;em&gt;‚ÄúThe build failed‚Äù&lt;/em&gt;. Here‚Äôs how you can get an answer to that question without even needing to ask.&lt;/p&gt;

&lt;p&gt;In Webstorm, open up the Team Window by clicking GitLive on the bottom tool window bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-2Sxmvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254250014/ldMs-fiu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-2Sxmvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254250014/ldMs-fiu3.png" alt="Webstorm-full-ide.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Locate the teammate you are interested in and click the arrow on the left-hand side of their avatar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBIwmqm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254282439/KoKG15Dpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBIwmqm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254282439/KoKG15Dpa.png" alt="team window-scaled 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see all the repositories they have cloned including the name of their current branch! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQpBAJB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254297037/eDt_8Fkea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQpBAJB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628254297037/eDt_8Fkea.png" alt="branch name- scaled 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If an issue has been connected to the branch you‚Äôll see the issue name instead, if that's the case just hover your cursor over the issue name and a tooltip will appear showing you the branch name (and even the commit hash)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-S5v-qD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628507276877/on8tPVqHA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-S5v-qD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628507276877/on8tPVqHA.png" alt="issue and branch name-scaled 2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't have the GitLive extension installed yet? You can find it &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;here&lt;/a&gt; and, if you need help setting it up, follow the instructions in &lt;a href="https://docs.git.live/docs/installation/"&gt;GitLive docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Run an Effective Sprint Planning Meeting</title>
      <author>Alex Omeyer</author>
      <pubDate>Mon, 09 Aug 2021 12:31:43 +0000</pubDate>
      <link>https://dev.to/alexomeyer/how-to-run-an-effective-sprint-planning-meeting-5g07</link>
      <guid>https://dev.to/alexomeyer/how-to-run-an-effective-sprint-planning-meeting-5g07</guid>
      <description>&lt;p&gt;There are plenty of posts that tell you that sprint planning should include things like shaking hands, making pledges, and a team song (I wish I were joking). This is not one of them. Nor am I advocating for you to buy into any particular school of thought (i.e. Scrum vs Agile) or suggesting that you need to sign up to someone‚Äôs downloadable program for $XX, the author of which will haunt your inbox forever. &lt;/p&gt;

&lt;p&gt;Instead, I want to offer practical strategies to make planning a Sprint less painful so that you feel organised rather than overwhelmed and have achievable goals rather than just another staggering list of to-dos. A successful Sprint should leave you feeling like you‚Äôve worked on things that are important and worthy of your time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-purpose-of-a-sprint-planning-meeting"&gt;
  &lt;/a&gt;
  What is the purpose of a sprint planning meeting?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---twqBOs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zdf3r2cqaj160u0mtgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---twqBOs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zdf3r2cqaj160u0mtgj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The purpose of sprint planning is to define what can be completed during the next sprint and decide how the work will get done and by who. This included reviewing any leftover tasks from the last sprint and creating a plan of action for these as appropriate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprint-planning-attendees"&gt;
  &lt;/a&gt;
  Sprint planning attendees
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#scrum-mastersprint-leader"&gt;
  &lt;/a&gt;
  Scrum Master*/Sprint leader
&lt;/h4&gt;

&lt;p&gt;The Scrum Master is responsible for setting up the infrastructure for the sprint planning meeting (zoom meeting/room booking, etc.) and managing timekeeping during the meeting to ensure that everyone is aligned on the goals of the upcoming sprint.&lt;/p&gt;

&lt;p&gt;Side note: I am using this term as I understand an agreed-upon alternative is yet to be decided upon in the world of Scrum.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#product-owner"&gt;
  &lt;/a&gt;
  Product Owner
&lt;/h4&gt;

&lt;p&gt;The product owner arguably does the bulk of the pre-Sprint meeting work. They prepare the list of product backlogs to choose to work on/prioritise during the sprint and facilitate discussion on the priorities of the sprint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#development-team"&gt;
  &lt;/a&gt;
  Development team
&lt;/h4&gt;

&lt;p&gt;These are the vital people that will be doing the work during the sprint - think devs, designers, test engineers etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-the-meeting"&gt;
  &lt;/a&gt;
  Before the meeting
&lt;/h2&gt;

&lt;p&gt;Sprint planning is about gathering the necessary people together to determine the product development goal and work you will do in your upcoming sprint. But before you get to a planning meeting, there‚Äôs a reasonable amount of prep you need to do to organise.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bring-the-backlog-to-order"&gt;
  &lt;/a&gt;
  Bring the backlog to order
&lt;/h4&gt;

&lt;p&gt;The Product Owner is responsible for collating and organising all backlog items that could be worked on during the sprint and is typically referred to as backlog grooming. They may do this alone or at a pre-meeting before the planning and aim to break tasks down into actionable items. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-clear-on-team-velocity-and-capacity"&gt;
  &lt;/a&gt;
  Be clear on team velocity and capacity
&lt;/h4&gt;

&lt;p&gt;Consider the amount of work that participants can successfully complete during a sprint. Consider the achievements of previous sprints as a way to measure team velocity. What tools and skills are needed to achieve the work? Who is available to work on the sprint? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#define-your-sprint-goal"&gt;
  &lt;/a&gt;
  Define your sprint goal
&lt;/h4&gt;

&lt;p&gt;Determine the aim of your sprint and what you want to have achieved at its end. Writing this down is helpful to offer clarity to not only team members but other stakeholders outside of the sprint also.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-an-agenda-for-your-sprint-planning-meeting"&gt;
  &lt;/a&gt;
  Make an agenda for your sprint planning meeting
&lt;/h3&gt;

&lt;p&gt;The common view is that planning a 2-week sprint should take about four hours. Map out the agenda of the meeting accordingly. There are plenty of sprint planning templates around if you don‚Äôt have one already, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.smartsheet.com/sites/default/files/IC-Sprint-Planning-Meeting-Agenda-9268_PDF.pdf"&gt;Smart sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/software/confluence/templates/sprint-planning-meeting"&gt;Atlassian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fellow.app/meeting-templates/sprint-planning-meeting/"&gt;Fellow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plan.io/files/Planio-Sprint-Planning-Template.pdf"&gt;Planio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-about-technical-debt-and-sprint-planning"&gt;
  &lt;/a&gt;
  What about technical debt and sprint planning?
&lt;/h3&gt;

&lt;p&gt;Stefan Wolfers &lt;a href="https://medium.com/hackernoon/technical-debt-scrum-e26421953278"&gt;asserts&lt;/a&gt; that there is an inherent contradiction in ownership and decision-making in a Scrum mentality regarding &lt;a href="https://www.stepsize.com/blog/complete-guide-to-technical-debt"&gt;technical debt&lt;/a&gt;. He asks:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;‚ÄúIf technical debt is the plague of our industry, why isn‚Äôt the Scrum Guide addressing the question of who is responsibly dealing with it? To make things worse, if the Product Owner‚Äôs responsibility is to maximise the value customers derive from the Development Team‚Äôs work.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The Development Team‚Äôs responsibility is to deliver a product Increment (at least) at the end of the sprint adhering to the definition of ‚ÄúDone,‚Äù aren‚Äôt those two responsibilities possibly causing a conflict of interest?‚Äù&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is vital to make paying down technical debt - including tasks such as code refactoring and bug fixing - a priority of every single sprint. Bug fixing feels like a never-ending loop if you have a high level of debt, and a sprint can unearth even more bugs. Focus on the bugs you have committed to deal with and add those you find (unless incredibly urgent) to the bug backlog for your next sprint. &lt;/p&gt;

&lt;p&gt;Your team also needs an agreed-upon definition of Done to avoid more technical debt sneaking in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-include-technical-debt-into-your-sprint"&gt;
  &lt;/a&gt;
  How to include technical debt into your sprint?
&lt;/h3&gt;

&lt;p&gt;Instead of having a dedicated technical debt sprint every quarter try a more sustainable approach of spending 10-30% of every sprint dealing with the most important technical debt.&lt;/p&gt;

&lt;p&gt;It‚Äôll help you prioritise the tech debt that's in the way of upcoming features on the product roadmap. (If you want to learn how a modern team at Snyk has achieved it, check out &lt;a href="https://www.stepsize.com/blog/snyk-delivers-the-highest-quality-software-using-stepsize"&gt;this case study&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Here are 3 steps that‚Äôll help you incorporate technical work into your usual sprints: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-make-technical-debt-visible"&gt;
  &lt;/a&gt;
  1. Make technical debt visible
&lt;/h4&gt;

&lt;p&gt;Start with highlighting, bookmarking and creating technical debt issues. You can easily do that with the &lt;a href="https://www.stepsize.com/r/vscode"&gt;Stepsize VS Code&lt;/a&gt; or the &lt;a href="https://www.stepsize.com/r/jetbrains"&gt;JetBrains extension&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-determine-the-business-impact-of-each-debt-item"&gt;
  &lt;/a&gt;
  2. Determine the business impact of each debt item
&lt;/h4&gt;

&lt;p&gt;If you have a difficult time convincing your management to work on technical debt, try focusing on the business impact instead of technical problems. E.g. mention how fixing this debt will reduce the number of support tickets or help you reduce the time-to-market.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-bring-it-to-your-sprint-planning-meeting"&gt;
  &lt;/a&gt;
  3. Bring it to your sprint planning meeting
&lt;/h4&gt;

&lt;p&gt;Once you've created technical debt issues and described their business impact, bring it up during your next sprint planning to discuss with the team.&lt;/p&gt;

&lt;p&gt;Deciding what technical debt to focus on in your code sprint is comparable to &lt;a href="https://www.stepsize.com/blog/how-to-prioritise-your-product-backlog"&gt;prioritising tasks in your product backlog&lt;/a&gt; and you can also use Stepsize‚Äôs prioritisation features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-work-planning"&gt;
  &lt;/a&gt;
  Remote work planning
&lt;/h3&gt;

&lt;p&gt;How we work is constantly changing. Many traditional Sprint planners talk about whiteboards (digital or otherwise) and getting everyone together in the same room. We know that‚Äôs often not just practical with distributed teams. &lt;/p&gt;

&lt;p&gt;Where possible, avoid a hybrid model where a chunk of the team is together and the rest distributed unless you have good practice doing this successfully. Otherwise, what tends to happen is that those who are physically present make group decisions, and the input of remote people is more of an afterthought. &lt;/p&gt;

&lt;p&gt;Online tools (see upcoming article) are critical to ensure that everyone gets an equal seat at the meeting. Be especially aware that remote meetings are more draining than in-person meetings and plan accordingly with breaks and keeping things focused. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reward-your-team"&gt;
  &lt;/a&gt;
  Reward your team
&lt;/h4&gt;

&lt;p&gt;Sprints are more pleasurable if there‚Äôs something to look forward to - if budget allows, consider getting some catering in or delivery orders to people‚Äôs homes for remote workers to celebrate the end of a sprint. Even if a sprint is commonplace in your company, everyone likes thanks. And don‚Äôt forget to celebrate the tech debt heroes who have done behind the scenes work!&lt;/p&gt;

&lt;p&gt;The article is originally posted by Cate Lawrence at te &lt;a href="https://www.stepsize.com/blog/how-to-run-an-effective-sprint-planning-meeting"&gt;Managing Technical Debt blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>agile</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>DApp Review ‚Äì OpenSea: An Ethereum Based NFT Marketplace</title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Mon, 09 Aug 2021 11:55:02 +0000</pubDate>
      <link>https://dev.to/manbir/dapp-review-opensea-an-ethereum-based-marketplace-43hl</link>
      <guid>https://dev.to/manbir/dapp-review-opensea-an-ethereum-based-marketplace-43hl</guid>
      <description>&lt;p&gt;Non-fungible Tokens, or NFTs have been creating a huge buzz in the blockchain space from the past few months, having played a major role in bringing Ethereum to the mainstream. As a result, people have been minting their own NFTs on blockchain and purchasing some appealing ones from various marketplaces. In this blog, we'll explore one of the world's leading NFT marketplaces, OpenSea. &lt;/p&gt;

&lt;p&gt;For those who've been living under a rock, an NFT is a token for a real world asset that represents ownership on the blockchain, and doesn't have a fixed value. For example, if &lt;em&gt;Leonardo da Vinci&lt;/em&gt; comes and clicks a picture of Mona Lisa's original painting and simply sells it at a marketplace, it could (probably would) sell for millions, since: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The original creator is selling it.&lt;/li&gt;
&lt;li&gt;There's some story associated with the artpiece.&lt;/li&gt;
&lt;li&gt;There's no copy of that art available for sale by the creator, making it...&lt;/li&gt;
&lt;li&gt;An original digital artpiece that can not be shared, only transferred.&lt;/li&gt;
&lt;li&gt;Who doesn't love rare art? üëÄ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now back to the guide! This will require you to have an Ethereum based wallet of your choice, such as &lt;a href="https://metamask.io"&gt;MetaMask&lt;/a&gt; set-up, before you can start buying and selling some NFTs. You can learn more on how to do it through &lt;a href="https://dev.to/manbir/a-guide-to-metamask-ecosystem-leading-ethereum-blockchain-wallet-59k7"&gt;this blog&lt;/a&gt;. Once you're done, just dive right in, 'cause...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-showtime-at-the-metaverse"&gt;
  &lt;/a&gt;
  It's showtime at the metaverse! üåå
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Once you visit &lt;a href="https://opensea.io/"&gt;OpenSea.io&lt;/a&gt;, you'll see an option to explore/create an NFT, a few exclusive OpenSea drops, trending NFTs, resources to get started and an option to browse by categories. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rROgRDo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9pcl8wfvi8q828m8np.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rROgRDo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9pcl8wfvi8q828m8np.png" alt="78ee160-Screen_Shot_2021-08-05_at_4.36_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-your-wallet"&gt;
  &lt;/a&gt;
  Connecting Your Wallet
&lt;/h2&gt;

&lt;p&gt;You'll need to connect your wallet and set-up your OpenSea account to get started with minting and purchasing the NFTs. We'll go ahead with MetaMask for this blog. Just click on the wallet icon at the top-right corner; a list of supported wallets will show up. Then simply select MetaMask from the list. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGMF5DiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc21safavvxo3vjlmcw7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGMF5DiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc21safavvxo3vjlmcw7.jpg" alt="Screenshot from 2021-08-07 00-06-32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've connected, set up your profile by adding a username, profile image, cover etc. You'll need to 'sign' each update through your MetaMask account to apply the changes to your OpenSea account.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-and-purchasing-an-nft"&gt;
  &lt;/a&gt;
  Exploring and Purchasing an NFT
&lt;/h2&gt;

&lt;p&gt;You can start exploring the NFTs that are minted by creators from across the world through browsing by category or clicking on &lt;code&gt;Marketplace &amp;gt; All NFTs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HfMYwoH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghoav9pzwrxn6t2k22zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfMYwoH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghoav9pzwrxn6t2k22zf.png" alt="Screenshot from 2021-08-07 01-02-52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To purchase an NFT, simply select an asset from the list. &lt;br&gt;
You can also apply filters to sort by price, categories, chains and more.&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Buy Now&lt;/code&gt;, agree to the OpenSea terms, and click on &lt;code&gt;Checkout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stFQQW5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w62i60moqhvxua692nvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stFQQW5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w62i60moqhvxua692nvv.png" alt="checkout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need to sign the transaction from your wallet... and that's pretty much it! The asset will show up in your wallet in a matter of seconds.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minting-an-nft"&gt;
  &lt;/a&gt;
  Minting an NFT
&lt;/h2&gt;

&lt;p&gt;There's a simple 4-step process for minting your first NFT collection:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeGlNyts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veu2xjsx9dmszah0sbuv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeGlNyts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veu2xjsx9dmszah0sbuv.jpg" alt="Screenshot from 2021-08-07 02-03-31 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6bdsxFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5cbigrqmtg3002q6ocz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6bdsxFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5cbigrqmtg3002q6ocz.jpg" alt="Screenshot from 2021-08-07 02-03-31 (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we've already set up a wallet, simply head over to the &lt;code&gt;Create&lt;/code&gt; section to add your assets. You'll need to add social links, an appealing description, profile &amp;amp; banner images, and set a secondary sales fee. You can choose between auctions, fixed-price listings, and declining-price listings.&lt;/p&gt;

&lt;p&gt;Here's a quick rundown of how it's like to mint your own NFT:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-collection"&gt;
  &lt;/a&gt;
  1. Create a collection
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pzlNEKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fvcdrj1i7apc5lf74jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pzlNEKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fvcdrj1i7apc5lf74jq.png" alt="Screenshot from 2021-08-07 01-00-46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll have to add some details such as images, name, URL, description, blockchain you're adding the NFT to, payment tokens etc.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTXRANSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p24uv139kw39wwpjr8m9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTXRANSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p24uv139kw39wwpjr8m9.png" alt="Screenshot from 2021-08-07 19-55-39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-a-new-item-to-your-collection"&gt;
  &lt;/a&gt;
  2. Add a new item to your collection
&lt;/h3&gt;

&lt;p&gt;Here you'll need to add description and other details related to the specific item such as supply limit.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmFPqmcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9odq71mg0nxaj3943fo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmFPqmcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9odq71mg0nxaj3943fo.png" alt="Screenshot from 2021-08-07 20-04-52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-set-prices-and-post-your-listing"&gt;
  &lt;/a&gt;
  3. Set prices and post your listing
&lt;/h3&gt;

&lt;p&gt;You can set a fixed price, highest bid or bundle for the NFT listing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soJQTBjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2vxjjm81zsogbfhfepm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soJQTBjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2vxjjm81zsogbfhfepm.png" alt="Screenshot from 2021-08-07 19-42-31"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-confirm-from-your-wallet"&gt;
  &lt;/a&gt;
  4. Confirm from your wallet
&lt;/h3&gt;

&lt;p&gt;Finally, sign the transaction from your wallet, which will require some gas fees. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoBw8a-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjgjpmtmbgecqn7sj4eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoBw8a-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjgjpmtmbgecqn7sj4eg.png" alt="Screenshot from 2021-08-07 19-42-51"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you're done, your item will be listed for sale on the marketplace. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T904doZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6ln4xfa39t0pifypbr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T904doZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6ln4xfa39t0pifypbr1.jpg" alt="Screenshot from 2021-08-07 01-09-14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on minting your first NFT! üéâ&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#some-resources-to-learn-more-about-this-space"&gt;
  &lt;/a&gt;
  Some resources to learn more about this space:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.theverge.com/22310188/nft-explainer-what-is-blockchain-crypto-art-faq"&gt;NFTs, explained&lt;/a&gt;, by &lt;em&gt;The Verge&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://consensys.net/blog/news/why-nfts-not-defi-brought-ethereum-to-the-mainstream/"&gt;Why NFTs brought Ethereum to the Mainstream&lt;/a&gt;, by &lt;em&gt;ConsenSys&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.opensea.io/"&gt;OpenSea Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And finally, if you liked this blog, feel free to check out rest of my content and connect with me on &lt;a href="https://twitter.com/manbirmarwah"&gt;Twitter&lt;/a&gt;. See you on the other side of the metaverse! ;) ü•Ç&lt;/p&gt;

</description>
      <category>nft</category>
      <category>dapps</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>Background jobs with Symfony messenger component</title>
      <author>Lina Jelinƒçiƒá</author>
      <pubDate>Mon, 09 Aug 2021 11:47:50 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/background-jobs-with-symfony-messenger-component-p63</link>
      <guid>https://dev.to/bornfightcompany/background-jobs-with-symfony-messenger-component-p63</guid>
      <description>&lt;p&gt;Let‚Äôs say your client comes up with this request: whenever an image is uploaded, do something with it. Change background color, convert it to some other format, add watermark‚Ä¶ Whatever it is, image processing is often a slow process that will add significant time to your ‚Äòupload image‚Äô action. ‚Ä®‚Ä®&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-it-later"&gt;
  &lt;/a&gt;
  Do it later
&lt;/h3&gt;

&lt;p&gt;But, if you were to think about it, there is no reason why it should be executed during the request. The user doesn‚Äôt really care about that. He will upload the image, continue with his day and image processing will be done somewhere.. in the background. ‚Ä®&lt;/p&gt;

&lt;p&gt;Flow of any background job looks like this: &lt;strong&gt;create job&lt;/strong&gt; + &lt;strong&gt;store necessary data somewhere so it can be executed later&lt;/strong&gt; + &lt;strong&gt;execute it‚Ä®‚Ä®&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symfony messenger&lt;/strong&gt; component, introduced in version 4.1, handles this for you!‚Ä®‚Ä®&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-job"&gt;
  &lt;/a&gt;
  Create job
&lt;/h3&gt;

&lt;p&gt;Think about the data necessary for job execution. In this case, we should remember some kind of identifier that will let us fetch the image later on. Depending on your requirements, it can be id of an entity stored in the database, path to the image or something else.&lt;/p&gt;

&lt;p&gt;In the Message folder of your project, create a class that will encapsulate that data (and do nothing else).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SetBackgroundColorToBlack&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @var string
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$imageIdentifier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$imageIdentifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$imageIdentifier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getImageIdentifier&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageIdentifier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inject MessageBusInterface into a service that handles image uploading. After the image is uploaded, create your message and dispatch it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;MessageBusInterface&lt;/span&gt; &lt;span class="nv"&gt;$messageBus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;messageBus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$messageBus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SetBackgroundColorToBlack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getIdentifier&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
 &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;messageBus&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats! You've just told symfony... well, nothing much. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-do-all-the-messages-go-to"&gt;
  &lt;/a&gt;
  Where do all the messages go to?
&lt;/h3&gt;

&lt;p&gt;You've created your message and dispatched it. What now? Store it somewhere so the class that knows how to handle it can pick it. &lt;/p&gt;

&lt;p&gt;In this case, it's called transport. Symfony provides multiple transport options as well as retry strategies, so read the docs and decide what's best for your case. I used doctrine transport that won't be suitable for large projects.&lt;/p&gt;

&lt;p&gt;Two transports are defined: async, that handles messages of SetBackgroundColorToBlack type and failure transport.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;framework&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;messenger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;failure_transport&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;failed&lt;/span&gt;
        &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;%env(MESSENGER_TRANSPORT_DSN)%'&lt;/span&gt;
            &lt;span class="na"&gt;failed&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;dsn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;doctrine://default?queue_name=failed'&lt;/span&gt;

        &lt;span class="na"&gt;routing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;App\Message\SetBackgroundColorToBlack'&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;async&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's best to define your transports as env variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;###&amp;gt; symfony/messenger ###
MESSENGER_TRANSPORT_DSN=doctrine://default
###&amp;lt; symfony/messenger ###
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#do-the-job"&gt;
  &lt;/a&gt;
  Do the job
&lt;/h3&gt;

&lt;p&gt;Someone should do the job. In MessageHandler directory of your project, create class SetBackgroundColorToBlackHandler.&lt;/p&gt;

&lt;p&gt;This class &lt;strong&gt;must&lt;/strong&gt; implement &lt;strong&gt;MessageHandlerInterface&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SetBackgroundColorToBlackHandler&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;MessageHandlerInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @var ImageProcessingService
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$imageProcessingService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @var ImageRepository
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$imageRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ImageProcessingService&lt;/span&gt; &lt;span class="nv"&gt;$imageProcessingService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="kt"&gt;ImageRepository&lt;/span&gt; &lt;span class="nv"&gt;$imageRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageProcessingService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$imageProcessingService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageRepository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$imageRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SetBackgroundColorToBlack&lt;/span&gt; &lt;span class="nv"&gt;$setBackgroundColorToBlack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageRepository&lt;/span&gt;
                 &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$setBackgroundColorToBlack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getImageIdentifier&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageProcessingService&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setBackgroundColorToBlack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Symfony is smart enough to connect message to the handler. It's enough to type hint variable of __invoke() method signature in the handler class.&lt;/li&gt;
&lt;li&gt;Handlers are services which means that you can inject other services.
&lt;/li&gt;
&lt;li&gt;Maybe the image can't be fetched because someone deleted it in the meantime. Depending on your domain, maybe the image must exist and you want to throw an exception in that case.&lt;/li&gt;
&lt;li&gt;Maybe imageProcessingService throws exception (it probably does). Remember we defined failure transport? By default, all messages will be retried 3 times before they end up in failure transport.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#work-work-work-work-work"&gt;
  &lt;/a&gt;
  Work, work, work, work, work
&lt;/h3&gt;

&lt;p&gt;Define worker that is gonna consume those messages.&lt;br&gt;
&lt;code&gt;php bin/console messenger:consume async&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install supervisor on production that will watch out for your workers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you like symfony messenger component? What do you use to handle background jobs? Do you think they are necessary in the first place?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>php</category>
      <category>symfony</category>
    </item>
    <item>
      <title>A quick Big O recap for devs</title>
      <author>Anca</author>
      <pubDate>Mon, 09 Aug 2021 11:38:54 +0000</pubDate>
      <link>https://dev.to/tinyg210/a-quick-big-o-recap-for-devs-216k</link>
      <guid>https://dev.to/tinyg210/a-quick-big-o-recap-for-devs-216k</guid>
      <description>&lt;p&gt;About a year ago, as I started doing some small recap on algorithms, I came to an interesting realization: as enterprise developers we don't give a lot of thought to the Big O Notation because we're constantly using and reusing frameworks and algorithms that are already implemented. It's certainly there in the back of our minds in order to be able to optimize, but it's not often "fully activated".&lt;/p&gt;

&lt;p&gt;This year I'm preparing to become the buddy of a few students joining our company as part of their university studies. That means I'm putting together a study guide and an onboarding roadmap, but I also get to look back on all the things I wish I knew better when I was in their situation. Of course the learning path will not be that granular, but my mind wanders, so I dug up what used to be a tweet and turned it into a small article. &lt;br&gt;
I hope this will be helpful for beginners, but also for devs that jumped straight into coding. And if you‚Äôre anything like me, you‚Äôll enjoy following along with the growth chart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation"&gt;
  &lt;/a&gt;
  Big O Notation
&lt;/h2&gt;

&lt;p&gt;The Big O Notation is an abstract way to characterize algorithms according to how the running time or space (in memory or on disk) necessities grow as the size of the input grows.This is purely independent of programming languages, operating systems or hardware. Here is short sorted list of common growth rates: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0JV8BS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0whj4fbczwye5b521i3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0JV8BS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0whj4fbczwye5b521i3.png" alt="algorithm complexity growth chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constant time - O(1) - The input size does not influence the required number of operations. Examples: printing a single value or accessing an array element by its index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logarithmic time - O(log n) -  The number of required operations has a slow growth in relation to the input size. Example: binary search in a sorted array, where with each iteration the workload is being halved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Square-root time - O(sqrt(n)) - The number or operations is proportional to the square root of the input size.Example: primality test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linear time - O(n) - The number of operations grows along with the size of the input.Examples: algorithms that involve iterating over a collection once, sequential search.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log-linear time - O(n log n) - The number of operations grows proportionate to n log n. Example: merge sort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quadratic time - O(n&lt;sup&gt;2&lt;/sup&gt;) - The number of operations is equal to a squared n, usually by running two nested for loops.Examples: bubble sort, insertion sort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exponential time - O(2&lt;sup&gt;n&lt;/sup&gt;) - The number of operations doubles with every input increase.Example: finding Fibonacci numbers recursively.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>bigonotation</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Django and Ajax: Robust authentication and authorization system with real-time form validations for web applications - 4</title>
      <author>John Idogun</author>
      <pubDate>Mon, 09 Aug 2021 11:30:11 +0000</pubDate>
      <link>https://dev.to/sirneij/django-and-ajax-robust-authentication-and-authorization-system-with-real-time-form-validations-for-web-applications-4-2a2i</link>
      <guid>https://dev.to/sirneij/django-and-ajax-robust-authentication-and-authorization-system-with-real-time-form-validations-for-web-applications-4-2a2i</guid>
      <description>&lt;p&gt;Last part, we incepted building the student registration system. We stopped at the point of creating some additional files, &lt;code&gt;tasks.py&lt;/code&gt; and &lt;code&gt;tokens.py&lt;/code&gt;. In this part, we'll continue with the implementation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;The source code to this point is hosted on &lt;a href="https://github.com/Sirneij/django_real_time_validation/tree/b17e9c91aba97a0b3c2d38dc192aab465489e3b2"&gt;github&lt;/a&gt; while the source code for the entire application is:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Sirneij"&gt;
        Sirneij
      &lt;/a&gt; / &lt;a href="https://github.com/Sirneij/django_real_time_validation"&gt;
        django_real_time_validation
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Django and Ajax: Robust authentication and authorization system with real-time form validations for web applications
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
django_real_time_validation&lt;/h1&gt;
&lt;p&gt;Django and Ajax: Robust authentication and authorization system with real-time form validations for web applications&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Sirneij/django_real_time_validation"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#step-7-raw-tokenspy-endraw-and-raw-taskspy-endraw-files"&gt;
  &lt;/a&gt;
  Step 7: &lt;code&gt;tokens.py&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; files
&lt;/h2&gt;

&lt;p&gt;While concluding the part 3 of this series, we created &lt;code&gt;tokens.py&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; files. While the former handles creating unique tokens to validate users, the latter houses the logic for sending emails via &lt;code&gt;celery&lt;/code&gt;. In this project, &lt;code&gt;celery&lt;/code&gt;, a distributed task queue, handles all background tasks which encompass sending mails. With this, we will fulfill this segment of the requirements:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;...Time attacks must be addressed by &lt;strong&gt;sending the mails asynchronously&lt;/strong&gt;...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The content of &lt;code&gt;tokens.py&lt;/code&gt; is pretty straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# accounts &amp;gt; tokens.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.tokens&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PasswordResetTokenGenerator&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;six&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountActivationTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PasswordResetTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_hash_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_lecturer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;account_activation_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AccountActivationTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we are inheriting django's &lt;code&gt;PasswordResetTokenGenerator&lt;/code&gt; and then hashing based on the user's id (a UUID in our case), the time and other specific user attributes. It's fairly secure and unique! We then assign this to &lt;code&gt;account_activation_token&lt;/code&gt; which we later called in our &lt;code&gt;student_signup&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To implement the &lt;code&gt;tasks.py&lt;/code&gt;, we need to install &lt;a href="https://docs.celeryproject.org/en/master/userguide/periodic-tasks.html"&gt;&lt;code&gt;celery&lt;/code&gt;&lt;/a&gt; with &lt;a href="https://redis.io/"&gt;&lt;code&gt;Redis&lt;/code&gt;&lt;/a&gt; backend. Ensure you have a full working setup for &lt;a href="https://redis.io/"&gt;redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the virtual environment for this project, install using either &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pipenv&lt;/code&gt;(if you have been using pipenv since inception) and set it up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îå‚îÄ‚îÄ&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/Django/django_real_time_validation]
‚îî‚îÄ&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij django_real_time_validation]&lt;span class="nv"&gt;$ &lt;/span&gt;pipenv &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"celery[redis]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a &lt;code&gt;celery.py&lt;/code&gt; file in your project's directory. It should be in the directory as your project's &lt;code&gt;settings.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îå‚îÄ‚îÄ&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/Django/django_real_time_validation]
‚îî‚îÄ&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij django_real_time_validation]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;authentication/celery.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and populate it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# authentication &amp;gt; celery.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="c1"&gt;# set the default Django settings module for the 'celery' program.
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DJANGO_SETTINGS_MODULE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"authentication.settings"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"authentication"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"django.conf:settings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"CELERY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load task modules from all registered Django app configs.
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autodiscover_tasks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Request: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was copied from &lt;a href="https://docs.celeryproject.org/en/master/django/first-steps-with-django.html#django-first-steps"&gt;using celery with django&lt;/a&gt; with slight modifications of putting in my app's name in lines 6 and 8.&lt;/p&gt;

&lt;p&gt;To ensure that the app is loaded when Django starts so that the @shared_task decorator will use it, import this app in your &lt;code&gt;project_name/__init__.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# authentication &amp;gt; __init__.py
# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;celery_app&lt;/span&gt;

&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"celery_app"&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to &lt;code&gt;tasks.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.html&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;strip_tags&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shared_task&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;shared_task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;html_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plain_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strip_tags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plain_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;from_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;recipient_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;fail_silently&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;html_message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;html_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a simple function decorated with celery's &lt;code&gt;shared_task&lt;/code&gt;. It uses django's &lt;code&gt;mail&lt;/code&gt; to send the messages. It is very important to ensure that you do not pass a user object into a celery task. Passing only one attribute of the user model, in this case &lt;code&gt;user_id&lt;/code&gt;, is the solution. Passing model objects or instances leads to a common &lt;code&gt;Object not serializable&lt;/code&gt; error. To wrap up the configurations, let's append to the &lt;code&gt;settings.py&lt;/code&gt; this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REDIS_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REDIS_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CELERY_ACCEPT_CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CELERY_TASK_SERIALIZER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"json"&lt;/span&gt;
&lt;span class="n"&gt;CELERY_RESULT_SERIALIZER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"json"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;REDIS_URL&lt;/code&gt; is your local redis host and port(of the form &lt;code&gt;redis://host:port&lt;/code&gt;). A good practice is to put this in a &lt;code&gt;.env&lt;/code&gt; file and never upload it to &lt;code&gt;GitHub&lt;/code&gt; by including the file path in your &lt;code&gt;.gitignore&lt;/code&gt; file so as not to upload it for others to see.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-revisit-and-connect-the-student-registration-function-to-raw-urlspy-endraw-"&gt;
  &lt;/a&gt;
  Step 8: Revisit and connect the student registration function to &lt;code&gt;urls.py&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now that the preliminaries are taken care of, let examine the &lt;code&gt;student_signup&lt;/code&gt; view function written in the last part. First, we initialized the &lt;code&gt;StudentRegistrationForm&lt;/code&gt; and then checked that the request coming in is &lt;code&gt;POST&lt;/code&gt;. If true, we made a copy of the request data and subsequently retrieved the &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; the request user inputted. If the &lt;code&gt;email&lt;/code&gt; conforms with the rules created in the last part, a user instance is created and then, we test the user's &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; against other validations. If they scale through, we insert other user paramenters into the instance created and proceeded to sending the user a mail for confirmation. Take note of the context we passed into the celery task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"fullname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s"&gt;"domain"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_current_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="s"&gt;"uid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlsafe_base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;account_activation_token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you strigify the &lt;code&gt;get_current_site(request)&lt;/code&gt;, if not you will run into a &lt;code&gt;celery&lt;/code&gt; problem of not being able to serialize &lt;code&gt;request&lt;/code&gt; data.&lt;/p&gt;

&lt;p&gt;If user's password and username do not conform with our rules, such user is deleted from the database: &lt;code&gt;get_user_model().objects.get(email=post_data.get("email")).delete()&lt;/code&gt;. Let's now add this to our &lt;code&gt;urls.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# accounts &amp;gt; urls.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"student-sign-up/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;student_signup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"student_signup"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need some functions to inform users that they need to check their email, and another to activate the user after clicking the link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# accounts &amp;gt; views.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.encoding&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;force_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_text&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlsafe_base64_decode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlsafe_base64_encode&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uidb64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;force_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlsafe_base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uidb64&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;OverflowError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="c1"&gt;# checking if the user exists, if the token is valid.
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;account_activation_token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# if valid set active true
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Your email has been verified successfully! You are now able to log in."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accounts:login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"accounts/activation_invalid.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activation_sent_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"accounts/activation_sent.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;activate&lt;/code&gt; function uses the value from &lt;code&gt;uidb64&lt;/code&gt; to get the user the token belongs to and then checks the token's validity before activating the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# accounts &amp;gt; views.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's include them in our &lt;code&gt;urls.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# accounts &amp;gt; urls.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sent/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activation_sent_view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"activation_sent"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"activate/&amp;lt;uidb64&amp;gt;/&amp;lt;token&amp;gt;/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"activate"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-9-creating-login-and-other-templates"&gt;
  &lt;/a&gt;
  Step 9: Creating login and other templates
&lt;/h2&gt;

&lt;p&gt;To see what we have done so far, let's put in some html and css. Create &lt;code&gt;accounts/activation_sent.html&lt;/code&gt;(mail sent notification template), &lt;code&gt;accounts/activation_invalid.html&lt;/code&gt;(invalid token template), &lt;code&gt;accounts/student_signup.html&lt;/code&gt;(student registration), &lt;code&gt;accounts/activation_request.txt&lt;/code&gt;(for text-base emails) and &lt;code&gt;accounts/activation_request.html&lt;/code&gt;(html-based email).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚îå‚îÄ‚îÄ&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/Django/django_real_time_validation]
‚îî‚îÄ&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij django_real_time_validation]&lt;span class="nv"&gt;$ &lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;templates/accounts/activation_sent.html templates/accounts/activation_invalid.html templates/accounts/student_signup.html templates/accounts/activation_request.txt templates/accounts/activation_request.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;activation_request.txt&lt;/code&gt; should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--templates/accounts/activation_request.txt--&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;autoescape&lt;/span&gt; &lt;span class="nv"&gt;off&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
Hi &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;,
    Thank you for joining us on this great platform.
    Please click the following button to confirm your registration...


    By the way, if the above button is not clickable, paste the following link in your browser.
    http://&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;'accounts:activate'&lt;/span&gt; &lt;span class="nv"&gt;uidb64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;


Django Authentication Webmaster
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endautoescape&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make &lt;code&gt;activation_request.html&lt;/code&gt; appear as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--templates/accounts/activation_request.html--&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Avenir Next"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nc"&gt;.body-wrap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8f8f8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#206bc4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.text-center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.text-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.text-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#206bc4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#206bc4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1b59a3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#195398&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;580px&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.masthead&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#206bc4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.masthead&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.content.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.content.footer&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.content.footer&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nc"&gt;.content.footer&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Verify your email address.&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- auto --&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;autoescape&lt;/span&gt; &lt;span class="nv"&gt;off&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!-- Message start --&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"masthead"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to Django Authentication System...&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
                  Hi
                  &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-transform: capitalize"&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/strong&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;,
                &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Thank you for joining us on this great platform.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                  Please click the following button to confirm your
                  registration...
                &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
                          &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;'accounts:activate'&lt;/span&gt; &lt;span class="nv"&gt;uidb64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
                          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
                          &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yes, I'm in!&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                  By the way, if the above button is not clickable, paste the
                  following link in your browser.
                  &lt;span class="c"&gt;&amp;lt;!-- email link --&amp;gt;&lt;/span&gt;
    http://&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;'accounts:activate'&lt;/span&gt; &lt;span class="nv"&gt;uidb64&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt; &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;&lt;/span&gt;‚Äì Django Authentication Webmaster&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!-- Message start --&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content footer"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                  Sent by &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Django Authentication&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;,
                  Federal University of Technology, Akure, South Gate, Ondo
                  State, Nigeria.
                &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:nelsonidogun@gmail.com"&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;nelsonidogun@gmail.com&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- end auto --&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endautoescape&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just a simple html file. It incorporates some best practices for html mails.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;activation_sent.html&lt;/code&gt; has this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;
&lt;span class="c"&gt;&amp;lt;!--templates/accounts/activation_sent.html--&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;'base.html'&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- title --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; Verification email sent &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- static files --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- content starts --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row center-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col s12"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-width: 30rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card blue-grey darken-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content white-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Thank you for creating an account!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          An email has been sent to the e-mail address you provided during
          registeration for confirmation.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          Make sure you visit the link provided in mail as it will soon be
          revoked.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- content ends --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for &lt;code&gt;activation_invalid.html&lt;/code&gt;, it should be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;'base.html'&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- title --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; Verification email failed &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- static files --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- content starts --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row center-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col s12"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-width: 30rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card blue-grey darken-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content white-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Invalid activation link!!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          Oops! There were issues with the activation link, it was highly
          perceived to have been used before... Please, consider requesting for
          an
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;'accounts:resend_email'&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn waves-effect waves-light"&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            activate link resend &lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- content ends --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call a day here. We'll continue from here next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;Happy birthday to me üéÇ‚ú®ü•≥ü§©.&lt;/p&gt;

&lt;p&gt;Enjoyed this article, consider &lt;a href="//mailto:sirneij@gmail.com"&gt;contacting me for a job, something worthwhile or buying a coffee ‚òï&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>django</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Pseudocode? - Here is a Four Step Guide to Solving any Coding Problem with Pseudocode</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 09 Aug 2021 11:20:06 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/what-is-pseudocode-here-is-a-four-step-guide-to-solving-any-coding-problem-with-pseudocode-5epm</link>
      <guid>https://dev.to/ubahthebuilder/what-is-pseudocode-here-is-a-four-step-guide-to-solving-any-coding-problem-with-pseudocode-5epm</guid>
      <description>&lt;p&gt;Some of us just started learning how to program. Some of us have been learning for quite a while now. Either way, computer programming can demands a great deal of practice and improvement. &lt;/p&gt;

&lt;p&gt;Software Programming is the act of creating software programs for a computer to execute. Software programs are just series of instructions telling the computer what to do or what tasks to perform.&lt;/p&gt;

&lt;p&gt;Just as a script writer for a movie would write a detailed script of what an actor is going to do in a screenplay. Software developers write programs which a computer is going to execute.&lt;/p&gt;

&lt;p&gt;Now, as a beginner, you may have this abstract, far-fetched notion of programming. You may believe that it's very difficult, has a lot to do with maths or is a little more complex for the human brain.&lt;/p&gt;

&lt;p&gt;The thing is, programming is something we do every day. When we plan how we spend our time in day, we are actually doing programming. &lt;/p&gt;

&lt;p&gt;When we decide what places to visit, what tasks we perform and so on, it's programming.&lt;/p&gt;

&lt;p&gt;When you tell your kid what steps to take when she notices anything unusual within the environment, you are actually programming her to act.&lt;/p&gt;

&lt;p&gt;The same concept occurs with software Programming. You are basically telling the computer what actions to take under different conditions. &lt;/p&gt;

&lt;p&gt;You will typically write a computer program in a particular programming language. Some of them are human-readable than the others. The human readbale ones are otherwise called high-level languages and they include JavaScript, Python, Go and Rust. The less readable ones are termed low-level languages because they are closer to machine code (binaries) than to any human language. They include C, C++ and Lisp.&lt;/p&gt;

&lt;p&gt;Code is the translation of this series of logic in computer-readable statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-pseudocode"&gt;
  &lt;/a&gt;
  What is Pseudocode?
&lt;/h3&gt;

&lt;p&gt;Pseudocode is fake syntax. It is an informal, less structured and contrived language created for the sake of simplicity. &lt;/p&gt;

&lt;p&gt;Writing in a real computer programming language demands great deal of accuracy, knowledge and strict adherence to the syntactic rules. With pseudocode, you can avoid this.&lt;/p&gt;

&lt;p&gt;When adopting Pseudocode, it is importance to keep your programming style as consistent and clear as possible.&lt;/p&gt;

&lt;p&gt;To give an example of a pseudocode, how it differs from a real programming language like JavaScript and how helpful using pseudocode can be in program design, I am going to write a program in simple English-based pseudocode and then translate it back into it‚Äôs JavaScript equivalent:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  THE CHALLENGE
&lt;/h4&gt;

&lt;p&gt;To demonstrate pseudocode usage, I am going to be using a simple coding test which &lt;br&gt;
made a post about in my weekly coding challenge series.&lt;/p&gt;

&lt;p&gt;The task is simple: We are to create a &lt;code&gt;likes()&lt;/code&gt; which takes in an array of "likers" and returns a new custom message depending on the number of people who liked the post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;   &lt;span class="c1"&gt;// "No one likes this"&lt;/span&gt;
&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;// "Jack likes this"&lt;/span&gt;
&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;// "Jack and Jacob likes this"&lt;/span&gt;
&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;// "Jack, Jacob and Jill likes this"&lt;/span&gt;
&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;// "Jack, Jacob and 2 others liked this"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mapping-out-the-program-with-pseudocode-syntax"&gt;
  &lt;/a&gt;
  MAPPING OUT THE PROGRAM WITH PSEUDOCODE SYNTAX
&lt;/h4&gt;

&lt;p&gt;Before getting into the real coding, the us solve this problem using a language we are more familiar with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;begin&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt;

&lt;span class="c1"&gt;// Define the `likes` function. &lt;/span&gt;

&lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;likers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;// In Case Array is empty and no one likes this post&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_is_empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="c1"&gt;// In Case Array not empty and contains likers, proceed below&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number_of_likers_in_array&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sole_liker likes this post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number_of_likers_in_array&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liker_1 and liker_2 likes this post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number_of_likers_in_array&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liker_1 and liker_2 and liker_3 likes this post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;otherwise&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;remaining_likers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Total_no_of_likers&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liker_1, liker_2 and (remaining_likers) liked this post!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One important thing to note about this code is that it doesn't adhere to any strict syntax rules and is instead based on my rules.&lt;/p&gt;

&lt;p&gt;You can structure your pseudocode however you want. What matters the most is that you understand your code very well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-syntax"&gt;
  &lt;/a&gt;
  JAVASCRIPT SYNTAX
&lt;/h4&gt;

&lt;p&gt;Now that pseudocode has been defined and distinguished from an actual Programming language syntax, it's time to implement that program in a valid JavaScript code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No one likes this&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; likes this post`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; likes this post`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thirdName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; likes this post`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;remainder&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; others likes this post`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;likers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;likers&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-solve-coding-problems-with-pseudicode"&gt;
  &lt;/a&gt;
  HOW TO SOLVE CODING PROBLEMS WITH PSEUDICODE
&lt;/h3&gt;

&lt;p&gt;Pseudocode is created to simplify the process of program design. &lt;/p&gt;

&lt;p&gt;That way, we as programmers focus on the logical part and not have to contend with technical details like coding syntax and arrangements. &lt;/p&gt;

&lt;p&gt;If you are looking to solve a programming challenge either in your project or in a coding challenge platform like codewars, using psedocode is a very useful tactic.&lt;/p&gt;

&lt;p&gt;Below are the five steps to solving any programming problem with Pseudocode:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-it-is-very-important-to-have-an-understanding-what-a-function-is-and-how-it-works"&gt;
  &lt;/a&gt;
  First, it is very important to have an understanding what a function is and how it works.
&lt;/h4&gt;

&lt;p&gt;A function is a block of code which solves a particular task. Let me give you a simple example of this: When you take in food (input), the only output you want is nourishment. &lt;/p&gt;

&lt;p&gt;Lets assume that the body system is a function which takes in food as input and gives out energy and nourishment as output. There many processes involved in transforming that food into nourishment. &lt;/p&gt;

&lt;p&gt;After each step, the body gets closer to its end goal of giving nourishment to the body. Each part of the body (function) is charged with solving a mini-problem such as breaking down the food, mixing it with gastric juice, extracting nutrients etc. &lt;/p&gt;

&lt;p&gt;A function also works the same way. It takes in input, works on the input little by little until it arrives at the final solution.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#understand-the-question-asked"&gt;
  &lt;/a&gt;
  Understand the question asked.
&lt;/h4&gt;

&lt;p&gt;If you don‚Äôt understand the question, you will not be able to lay out the steps needed to solve the problem and arrive at a solution. &lt;/p&gt;

&lt;p&gt;Whether you are solving a problem in your project or on a test platform like Codewars, clearly understanding what is required to be solved gets you halfway to actually solving the problem.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#break-the-problem-down-into-chunks"&gt;
  &lt;/a&gt;
  Break the problem down into chunks
&lt;/h4&gt;

&lt;p&gt;Breaking the problem into series of smaller problems to be solved. Use a note or paper to list out the micro steps in a logical and sequential form. For example, if you want to validate an email of a user, you‚Äôll need to first access the email address value, then you need to store it in a variable (container of data), then you need to test it with an email expression and so on. &lt;/p&gt;

&lt;p&gt;Each of these micro tasks will lead up to the solution. After you have done this, &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-bring-in-real-code-and-tools"&gt;
  &lt;/a&gt;
  Now bring in real code and tools.
&lt;/h4&gt;

&lt;p&gt;This is when the Mozilla Developer Network, W3Schools, Stack Overflow and other coding sites come into play. For every micro task you want to solve, find a language construct which will help you do it.  &lt;/p&gt;

&lt;p&gt;Don‚Äôt be afraid of asking questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  WRAPPING UP
&lt;/h3&gt;

&lt;p&gt;Pseudocode is a helpful method of designing protoype programs.&lt;/p&gt;

&lt;p&gt;This 4 step formula has proven to be very effective when it comes to writing programs. As you learn and improve with time, writing in real code may even become a second nature to you.&lt;/p&gt;

&lt;p&gt;YOU MAY ALSO LIKE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/5-habits-to-avoid-as-a-web-developer"&gt;5 Habits To Avoid as a Web Developer&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/5-habits-to-avoid-as-a-web-developer"&gt;7 Good Reasons To Start Blogging as a Software Developer&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and see you soon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you like articles like this follow this blog to never miss an update. If you are learning JavaScript, you‚Äôll definitely want to check out my  &lt;a href="//gum.co/js-50"&gt;JavaScript Notes.&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Jobs and Internships in College: Seizing Off Campus Opportunities</title>
      <author>Kartik Choudhary</author>
      <pubDate>Mon, 09 Aug 2021 11:14:01 +0000</pubDate>
      <link>https://dev.to/kartikcho/getting-jobs-and-internships-in-college-seizing-off-campus-opportunities-2jmh</link>
      <guid>https://dev.to/kartikcho/getting-jobs-and-internships-in-college-seizing-off-campus-opportunities-2jmh</guid>
      <description>&lt;p&gt;The most common fear amongst students who avoid going off-campus is that they self-reject themselves by believing their resumes aren't good enough to even be considered.  &lt;/p&gt;

&lt;p&gt;Combine this fear with the first few rejections you're bound to receive and all of a sudden your imposter syndrome is tap dancing on your confidence, and you realize you don‚Äôt even like your career that much.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're not even trying, the answer is already a no.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whether you've just finished your degree but don't have a stable job lined up ahead or you're still in your freshman year exploring options, this article should have you covered.&lt;/p&gt;



&lt;br&gt;
Before we get started, I'll quickly explain &lt;strong&gt;success rate&lt;/strong&gt; since I'll be using this term throughout the post. 

&lt;p&gt;If you're applying to a 100 jobs and only hearing back from 3 of them, your chances of a successful application is at a 3%. This is your success rate and if it's actually lower than 5% then that means you're not doing something right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Although this article's writing style is geared towards a student audience, the content applies the same to all beginners regardless of their background)&lt;/em&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#why-should-i-consider-offcampus-or-jobs-outside-my-ecosystem"&gt;
  &lt;/a&gt;
  Why should I consider off-campus or jobs outside my eco-system? ü§î
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Because why not, duh...&lt;/strong&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Not a very convincing argument to start off with, right? &lt;br&gt;
But it actually makes a lot of sense. Putting it simply, if you're prospecting a bigger pool of opportunities, the number of interviews that you'll be invited to will also be higher, which means more options to choose from.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-it-better-compared-to-opportunities-at-my-college"&gt;
  &lt;/a&gt;
  How is it better compared to opportunities at my college? üè´
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Less competition means more opportunities&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This might come off as a surprise to some, but the competition is &lt;em&gt;much&lt;/em&gt; less and sparse compared to a college scenario where everyone is competing over the same good opportunity.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Better chances of getting a higher paying job&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(This point is region specific so take it with a grain of salt)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From what I've observed, most companies in college try to low-ball students for a bare minimum stipend/pay and instead shift focus to their future offer that you'll only receive if you end up working with them full time.&lt;/p&gt;

&lt;p&gt;Writing from my experience working globally-remote from India, most of the native organizations pay much less than the standard compared to what you can earn for the same skill-set with an offshore employer.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Possibility of discovering a position you could &lt;em&gt;actually&lt;/em&gt; be a perfect match for&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The amount of opportunities or positions that you can work for in tech are practically limitless, with even new titles being created for people that fulfill a specific niche. &lt;/p&gt;

&lt;p&gt;And because they're limitless, many of us (including me) probably won't know for a good part of our careers about which position we'll &lt;em&gt;really&lt;/em&gt; be the 'perfect fit' for. By sticking to just on-campus jobs, you're narrowing down your choices to mostly what the companies want to filter students for, instead of what you'll be the best at.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Diverse companies means opportunity to work on varied problems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a much higher variation in the type of companies you can find off-campus apart from the usual three: finance, big tech, and consulting (FTC).&lt;/p&gt;

&lt;p&gt;Companies building products such as software tooling, health tech, app security are recruiting and offer salaries similar to entry-level consulting but are completely unbeknownst to the average student.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#getting-your-foot-in-the-door"&gt;
  &lt;/a&gt;
  Getting your foot in the door üëûüö™
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;(yes I know I'm amazing with emoji art, thank you)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even if you're the best coder, best at solving questions and building stuff, it won't mean much if you're not getting interviewed.&lt;/p&gt;

&lt;p&gt;This is the part where you can retrospect your existing approach, find flaws and boost the current success rate by improving your 'perceived profile'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites-before-you-begin-your-job-hunt"&gt;
  &lt;/a&gt;
  Prerequisites before you begin your job hunt üíºüïµÔ∏è‚Äç‚ôÄÔ∏è
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relentlessness&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting a job is hard work and building a career in Tech, even more so, which means building a relentless mindset is almost a must-have before going your own way. &lt;/p&gt;

&lt;p&gt;You will face failures and rejections, a lot of them. But that's okay because when you get the job, none of the rejections will matter. Also, you would've learnt a lot and would still be treated as an equal to other hires even if they had a +70% success rate.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Well-crafted resume&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of great resources on resume building just a search away, so I won't be covering details on how to build one here.&lt;/p&gt;

&lt;p&gt;Keep in mind that almost everyone builds a basic e-commerce app or a social media clone through their starting years. Although technically impressive, I personally think it doesn't spark interest or shows creativity on a resume anymore.&lt;/p&gt;

&lt;p&gt;Remember, to get your resume through the pile of applications, grabbing attention can sometimes be even more valuable than just having a long list of hard skills. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interpersonal finesse&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good communication, being able to present yourself, showing human traits like vulnerability, emotional intelligence (yes I used the phrase, bite me) etc. are all necessary skills to have throughout your career. This will be needed when you're on the job, networking for referrals, socializing or in any professional environment.&lt;/p&gt;

&lt;p&gt;Basically what people are looking for is that you blend well with folks and don't be a pain in the ass while working in a team (make that a general rule for life too while you're at it).&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#how-to-increase-your-success-rate"&gt;
  &lt;/a&gt;
  How to increase your success rate üìà
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advertising demonstrated skills&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used the word &lt;strong&gt;demonstrated&lt;/strong&gt; because your work should already be visible and proven before a recruiter even talks to you. At the end, it always comes down to how well you can do the job, and for that you need to make your expertise recognizable.&lt;/p&gt;

&lt;p&gt;Mostly before your first scheduled call, the interviewer will go through the provided links and check your online presence to form a profile in mind about the kind of person they should expect.&lt;/p&gt;

&lt;p&gt;This is where your Open Source contributions, past projects, hackathons and other pieces of public work that builds your Developer Profile come in and can impress the interviewer before you've even met!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Read &lt;a href="https://dev.to/kartikcho/building-a-developer-profile-using-open-source-1pn3"&gt;'How To Build a Developer Profile'&lt;/a&gt; if you're new to the idea or don't have one yet)&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tailor your applications&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalizing applications by writing cover letters isn't a popular practice in India yet due to the high volume of responses from a job posting. However, tailoring your resume to match the specifics of a job description or approaching the recruiter directly with a message explaining your reasons can greatly affect the outcome of your application. &lt;/p&gt;

&lt;p&gt;I've always approached the people at a company directly for roles I'm serious about so that they can 'push my resume to the top of the pile' or make sure someone takes a look at it. This can also help narrow down the reasons if my application didn't make the cut since it's difficult to get personalized feedback for every rejection.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aim realistically&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perform an objective self evaluation of yourself and your skill-set to know which roles or companies you'll fit in with the 'level' you're at. Target companies slightly above your level (because that's how you'll strive to improve and grow) but also remember to set your sights realistically to have a higher success rate.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#i-got-an-interview-uhhh-step-2"&gt;
  &lt;/a&gt;
  I got an interview, uhhh step 2?
&lt;/h1&gt;

&lt;p&gt;So you finally got an interview but now you're worried that you have an interview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmqlI1GN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jt3l4yizngug7algnav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmqlI1GN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jt3l4yizngug7algnav.png" alt="Panic meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry, here's some tips that will help you have a better control over the interview, so you don't feel like a hostage being interrogated over your knowledge of  JavaScript closures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a mental checklist of things to brush up before an interview can really help you become more organized and less nervous during your future interviews. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal skill checklist before an interview goes like this:&lt;/p&gt;

&lt;p&gt;-&amp;gt; Ready to answer basic DSA questions&lt;br&gt;
-&amp;gt; Revise language/environment specific concepts&lt;br&gt;
-&amp;gt; Brush up on past work/projects on my resume and be able to talk about them&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When going through a technical interview, discuss your thinking process. This has almost become a standard advice for all interviews but that is for a reason. Your interviewers are interested to see how you approach a problem, the solution you come up with and how clearly you can explain it to the people in the room. 
This shows a very important trait in a candidate which is how well you can communicate your ideas or a train of thought to a teammate (which can be more valuable than having a &lt;em&gt;rockstar developer&lt;/em&gt; on the team in my opinion).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Getting to the correct answer may not always be the right answer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't be afraid to ask things you don‚Äôt understand in an interview. It's much better to ask your interviewer to repeat or explain a question than to try solving a problem with unclear objectives (something you should be comfortable with outside work too).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Showoff by talking about what else you could have done or how you could improve upon your answer if you had more time. If the interview is structured around a take-home assignment, definitely write an answer to this in advance because 9/10 times (source: me) you'll be asked this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always prepare to interview your recruiter as much as they're interviewing you. Since this opportunity is going to greatly influence your next steps in life, it is fair that you should have questions. &lt;br&gt;
Having questions regarding the workplace or your exact role are completely expected and normal so don't shy away from preparing a list beforehand. This also shows how much you've prepped for that interview.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(I might publish my personal curated list of interview questions so be on the lookout for that, or you know... you can just &lt;a href="https://twitter.com/kartikchow"&gt;follow me&lt;/a&gt; :)&lt;/em&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#where-do-i-start-looking-for-opportunities"&gt;
  &lt;/a&gt;
  Where do I start looking for opportunities?
&lt;/h1&gt;

&lt;p&gt;Assuming you've followed all the steps so far, you should've significantly improved your success rate and are all set to get after jobs. I won't be discussing the usual methods like job boards and similar platforms since they're fairly straight forward but should still be used as a primary source of opportunities.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hackathons and similar events&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hackathons, apart from looking great on your resume and being a nice learning experience overall, can be the best source for networking and meeting people in the industry as a student.&lt;/p&gt;

&lt;p&gt;And how do you find hackathons outside college? Just go take a quick look at &lt;a href="https://devpost.com/"&gt;Devpost&lt;/a&gt; or &lt;a href="https://mlh.io/"&gt;MLH&lt;/a&gt; events page, they're happening all the time! These events can also be great for meeting and collaborating with other interesting people starting out in tech like you.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Community &amp;amp; Socials&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes there are urgent job openings at companies that they prefer to only share through Twitter or some other social platform instead of following the usual process. Although you can directly interact with the recruiter for an introduction or questions, asking for a referral from a mutual connection can be a good strategy to expedite the process even further.&lt;/p&gt;

&lt;p&gt;Actively observe platforms like LinkedIn or Twitter where you can learn from other people in the industry and also be on the lookout for any opportunities that you may find through them.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Networking &amp;amp; Referrals&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Networking can sound very intimidating if you're new to the act but can become the strongest skill on your toolbelt if done right. Meeting new folks and maintaining relationships will be your safety net throughout your career in Tech.&lt;/p&gt;

&lt;p&gt;So, where can you start networking? As of now (during the pandemic) events, hackathons, socials and LinkedIn will be your best bet. Remember, your goal is to build relationships with professional strangers and make a lasting impression on them. Send a connection request talking about what you like about someone's work, praise a project they worked on and how it helped you (find anything in common that you think you could talk about).&lt;/p&gt;

&lt;p&gt;Having strong networks can come in to the rescue whenever you need a job throughout your career, not just for your first one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Avoid coming off as creepy while messaging someone, don't write anything you wouldn't want the world to read)&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keep the door open for opportunities&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of just searching for jobs yourself, also keep a channel open for opportunities to come to you. If someone is impressed by your work and has an interesting proposition, provide them with the means to reach out to you from every profile.&lt;/p&gt;

&lt;p&gt;I've had countless job offers or consultancy proposals through my GitHub profile and portfolio because I keep an option for anyone interested to directly contact me through email.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h1&gt;

&lt;p&gt;If you've been doing alright in your exams and have built a thing or two, your resume is already good enough to start sending to companies. Obviously there's always room for improvement but don't become the reason that limits your own chances of success (writing this from experience, I've been that person to myself for a long time).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9xU42Ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjalb6a1p68lxpfm9yh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9xU42Ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjalb6a1p68lxpfm9yh7.png" alt="Picking off-campus over on-campus"&gt;&lt;/a&gt;&lt;br&gt;
The meme apart from being an attempt to spice things up in the end, is also a reminder that like most posts, some advice is just that, advice.&lt;/p&gt;

&lt;p&gt;Take whatever value you find from this piece (or any content that you come across on the Internet) and apply it accordingly in your situation instead of blindly following it because it worked for someone.&lt;/p&gt;

&lt;p&gt;If you still have any questions or are confused with something, feel free to reach out to me through &lt;a href="https://twitter.com/kartikchow"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/kartikcho/"&gt;LinkedIn&lt;/a&gt;, I'll be happy to help.&lt;/p&gt;


&lt;p&gt;Remember, don't cloud your thoughts with consistent self doubt because you're amazing and I believe in you! :D&lt;br&gt;&lt;br&gt;
&lt;/p&gt;


</description>
      <category>career</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
