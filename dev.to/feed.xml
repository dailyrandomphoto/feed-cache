<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Journey to Becoming a Google Developer Student Clubs Lead</title>
      <author>Sai Ashish</author>
      <pubDate>Tue, 28 Dec 2021 09:08:58 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/my-journey-to-becoming-a-google-developer-student-clubs-lead-5cg2</link>
      <guid>https://dev.to/theinsightfulcoder/my-journey-to-becoming-a-google-developer-student-clubs-lead-5cg2</guid>
      <description>&lt;p&gt;Hello everyone, it's  &lt;a href="https://www.linkedin.com/in/sai-ashish/"&gt;Sai Ashish Konchada&lt;/a&gt;  back after a hiatus for good. The past few months have been a rollercoaster ride, a wave of happy hormones with nervous adventures. It gives me immense pleasure to announce that I've been selected as the first-ever Google Developer Student Clubs Lead at my college. In this post, we will be looking into the journey from the application to the selection. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. What is Google Developer Student Clubs?

2. What are the roles and responsibilities of a lead?
i. Starting/Growing a club
ii. Host Workshops
ii. Build projects

3. How can I apply to become a Google Developer Student Club Lead at my campus?

4. The Google Developer Student Clubs Lead Application Form 2021

5. Timeline for GDSC Selection 2021 and the Interview Experience
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-what-is-google-developer-student-clubs"&gt;
  &lt;/a&gt;
  1. What is Google Developer Student Clubs?
&lt;/h2&gt;

&lt;p&gt;As per the official  &lt;a href="https://gdsc.community.dev/"&gt;website&lt;/a&gt;, Google Developer Student Clubs are university-based community groups for students interested in Google developer technologies. Students from all undergraduate or graduate programs with an interest in growing as a developer are welcome. By joining a GDSC, students grow their knowledge in a peer-to-peer learning environment and build solutions for local businesses and their community.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/earTjC0iSjg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Google Developer Student Clubs(GDSC) are like your college/ university clubs, powered by Google Developers. Every year, Google selects leads from across the globe who align with the vision of GDSC and want to empower their community. This year, there are around 352 leads selected across India. There are many first-time leads,  as well as leads who continue the legacy initiated by the founder/former lead. It is not necessary if your college has an existing GDSC, then a lead will definitely be selected from your campus for the following year. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-can-become-a-google-developer-student-club-lead"&gt;
  &lt;/a&gt;
  Who can become a Google Developer Student Club Lead?
&lt;/h3&gt;

&lt;p&gt;As per the  &lt;a href="https://developers.google.com/community/gdsc/leads"&gt;official website&lt;/a&gt;, these are the eligibility criteria to become a lead. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a minimum of one year left until graduation&lt;/li&gt;
&lt;li&gt;Enrolled in an undergraduate or graduate program at a college or university&lt;/li&gt;
&lt;li&gt;Can commit to the program for one year&lt;/li&gt;
&lt;li&gt;Passionate about creating impact in the community&lt;/li&gt;
&lt;li&gt;Strong technical understanding of computer programming and/or software engineering&lt;/li&gt;
&lt;li&gt;Have experience with event planning or leading a team&lt;/li&gt;
&lt;li&gt;Have some connection to the local developer community&lt;/li&gt;
&lt;li&gt;Host an event ideally once a month, and at least every 3 months&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-what-are-the-roles-and-responsibilities-of-a-lead"&gt;
  &lt;/a&gt;
  2. What are the roles and responsibilities of a lead?
&lt;/h2&gt;

&lt;p&gt;The 3 basic responsibilities of a lead include:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-startinggrowing-a-club"&gt;
  &lt;/a&gt;
  i. Starting/Growing a club
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrFJiryr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635850852805/8zSMX4ylo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrFJiryr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635850852805/8zSMX4ylo.png" alt="Google Developer Student Clubs Shree L R Tiwari College of Engineering" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're the first-ever lead of a GDSC, you found and set up the club. For this, you might have to talk to your respective Teacher Incharge of such programs at your college, taking permission from the respective Head of Department and Principal for the same. This varies from college to college, so get in touch with a senior or teacher for the same. Being the Technical Head of my college I already was in touch with my respective HOD and Technical Incharge. I wrote a letter to them, explaining about GDSC, its benefits, the impact it creates, and permission for the same. &lt;/p&gt;

&lt;p&gt;Once you get the approval, you have to find a Faculty Incharge and form your Core Team. Find a faculty in charge, who actively takes the initiative for promoting such activities in your college, manages any scheduling conflicts, and provides insights about the events you conduct, suggests improvements.&lt;/p&gt;

&lt;p&gt;Forming the core team depends on you. You have the complete freedom to choose the number of members in your team, the hierarchy, and the domains you want to have. It is recommended to have 5 people in your core team as at the end of the year, Google sends 5 members(apart from the lead) the Graduation kit consisting of goodies. However, as mentioned earlier you can have more than 5 people and choose the top 5 people working diligently towards the club activities.&lt;/p&gt;

&lt;p&gt;There are 2 widely followed approaches in forming the core team. The first one is the Interview process. You create an announcement, people apply for the respective roles, you shortlist, conduct interviews, and choose members. The other one is that if you already know the people in your college and see people fit for the role, you choose them. My suggestion is to choose people who possess not only strong technical knowledge but also the ability to deliver sessions, connect with people, solve their individual doubts, give creative ideas for the growth of the clubs. You can choose to add a set of Behavioral questions to test this aspect. &lt;/p&gt;

&lt;p&gt;If you're the lead of an already existing GDSC, get in touch with your former lead, understand their vision, the events they've conducted, how they organized and dealt with various situations, how they can collaborate with existing GDSCs and other organizations, how to approach speakers and sponsorships for events, etc. Your lead is the best person you can find to elaborate in-depth about the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ii-host-workshops"&gt;
  &lt;/a&gt;
  ii. Host Workshops
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3S-EXLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851401403/Xd8Axw2--.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3S-EXLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851401403/Xd8Axw2--.png" alt="Introduction to Hacktoberfest.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After forming the core team, you can kickstart your journey with the Orientation session. You'd be provided with a timeline of events conducted by Google. You can choose to conduct those events as well as events of your own. I'll be writing a separate blog on how to create, promote and conduct your GDSC events once you become a lead. This is one of the workshops we conducted, where we introduced students to open source, how to contribute to it, and get started with Github. You can find the recording of the workshop &lt;a href="https://youtu.be/c4BA3sV98Y4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iii-build-projects"&gt;
  &lt;/a&gt;
  iii. Build projects
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ox4cpKOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851211586/oKuLHKZJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ox4cpKOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851211586/oKuLHKZJB.png" alt="Solution Challenge GDSC" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to hosting events and conducting hackathons, an integral part is the hands-on experience. GDSCs across the globe are known for creating impact among society. A GDSC should identify problems in their university or local community which could be solved via technology. One example to solving a university problem could be to build an online proctoring software, or automatic attendance system, or automation of daily tasks custom-built according to the needs of the university. Apart from these, GDSCs can host demo days, where they display the projects built by the teams of their club and also participate in the annual solution challenge. Read in-depth about this amazing global challenge  &lt;a href="https://developers.google.com/community/gdsc-solution-challenge"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-can-i-apply-to-become-a-google-developer-student-club-lead-at-my-campus"&gt;
  &lt;/a&gt;
  3. How can I apply to become a Google Developer Student Club Lead at my campus?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t8finO4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854403775/XJVeJjdG3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t8finO4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854403775/XJVeJjdG3.png" alt="Become a Google Developer Student Club Lead at your campus" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Applications to apply for becoming a lead, opens once every year depending on the region you belong from.  You can view the timeline and apply to become a lead  &lt;a href="https://developers.google.com/community/gdsc/leads"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-google-developer-student-clubs-lead-application-form-2021"&gt;
  &lt;/a&gt;
  4. The Google Developer Student Clubs Lead Application Form 2021
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lfmR2cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854449803/ghpYXd_Y5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lfmR2cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854449803/ghpYXd_Y5.png" alt="The Google Developer Student Clubs Lead Application Form 2021" width="880" height="409"&gt;&lt;/a&gt;&lt;br&gt;
When you apply to become a lead, it redirects you to Advocu where you fill out your application to become a lead. You've to fill out your basic details, share links to your work and account on Facebook, Github, LinkedIn, Medium, Qwiklabs, Stack Overflow, Twitter, Portfolio, and website link(if any). I strongly recommend you to build a strong profile on these platforms and be actively engaging, sharing your knowledge with the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then comes the 3 major questions:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is your motivation to run a Google Developer Student Club at your College?&lt;/p&gt;

&lt;p&gt;What is your experience in leading a project or a team&lt;/p&gt;

&lt;p&gt;What technology do you find most interesting and why? What is your experience with this technology?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;My Tips:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Please tailor these questions according to &lt;strong&gt;your&lt;/strong&gt; skills, experience, and expertise&lt;/li&gt;
&lt;li&gt;Don't take model answers or points from other applicants &lt;/li&gt;
&lt;li&gt;Be real&lt;/li&gt;
&lt;li&gt;Be unique&lt;/li&gt;
&lt;li&gt;Always proofread and use a Grammar tool, such as Grammarly&lt;/li&gt;
&lt;li&gt;Have keywords in your answers. If technology is asked, mention all the names of technologies you have working knowledge on&lt;/li&gt;
&lt;li&gt;Be active in leading clubs/communities from the very beginning. Experience proves your leadership, communication, and community building skills rather than plainly stating it&lt;/li&gt;
&lt;li&gt;Mention statistics where necessary. Example: In the Technical Carnival conducted in our college last year, we had a total of 600 active participants. &lt;/li&gt;
&lt;li&gt;As mentioned earlier, have a strong online presence and community contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Apart from this, you've to record a 90-second video and show us why you are the right person to be a GDSC Leader at your College&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choose the best points and practice beforehand.  You don't need to have a professional mic, camera, or edit videos in order to get selected. Make sure you are perfectly audible and visible. You can also choose to display your points in a presentation but make sure you are visible in the video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-timeline-for-gdsc-selection-2021-and-the-interview-experience"&gt;
  &lt;/a&gt;
  5. Timeline for GDSC Selection 2021 and the Interview Experience
&lt;/h2&gt;

&lt;p&gt;I had applied to become a GDSC Lead on 20th April 2021, the deadline being 11th May, 2021.  After applying, you get a mail with the subject, Thank you for applying [Developer Student Clubs Application Process - Sai Ashish Konchada]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMi8Zxu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635840806946/YuvSjAxdm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMi8Zxu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635840806946/YuvSjAxdm.png" alt="Thank you for applying Developer Student Clubs Application Process - Sai Ashish Konchada" width="502" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you get shortlisted among the application process, you get an email with the title, Next Steps [DSC Application Process - Sai Ashish Konchada]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mptHpZm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854544528/Mfr4iGIBO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mptHpZm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854544528/Mfr4iGIBO.png" alt="Next Steps DSC Application Process - Sai Ashish Konchada" width="501" height="797"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I scheduled an interview call for May 18th. The interview lasted for 15 minutes. The interviewer was very friendly and created a friendly atmosphere by mentioning to treat it as a discussion rather than an interview. To the best of my memory, a few of the questions were to talk about myself, the GDSC program, my previous community experiences, my plans for GDSC. If any lead is reading this, I urge them to share their interview experience too.&lt;/p&gt;

&lt;p&gt;On July 15, I received an email - [Google Developer Student Clubs] Congratulations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZ9Qgcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635841907672/ip8IX2mUd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZ9Qgcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635841907672/ip8IX2mUd.png" alt="Google Developer Student Clubs Congratulations Mail" width="502" height="709"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I got selected as the Google Developer Student Clubs Lead for my campus! As per the instructions, I acknowledged my confirmation and began laying the foundation of  &lt;a href="https://gdsc.community.dev/shree-l-r-tiwari-college-of-engineering-thane/"&gt;GDSC SLRTCE&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And that's a wrap! I hope this blog post finds an aspiring lead, answers his/her doubts, and gains insights about the Google Developer Student Clubs Program. If you've any queries, drop them down in the comment section below and I'll try to answer it as soon as I can. Until the next one, cheers to learning 🥂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-you-know-you-can-join-our-club-too"&gt;
  &lt;/a&gt;
  Did you know you can join our club too?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEEgM2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635852347012/XneBxY_HG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEEgM2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635852347012/XneBxY_HG.png" alt="Google Developer Student Clubs Shree L R Tiwari College of Engineering" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Become a member of  &lt;a href="https://cutt.ly/gdsc-slrtce"&gt;GDSC SLRTCE&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Follow us on &lt;a href="https://www.instagram.com/gdscslrtce/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Connect with us on &lt;a href="https://www.linkedin.com/company/gdsc"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Find the recordings to our sessions on  &lt;a href="https://www.youtube.com/channel/UCM920MVf8rerjUqW6OVHNrg"&gt;Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join our &lt;a href="https://discord.com/invite/HjYWZdhUsE"&gt;Discord&lt;/a&gt;  server for regular updates &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>leadership</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>OMG! 50,000 views on my blogs in 1.5 months 🙀</title>
      <author>Yash Makan</author>
      <pubDate>Tue, 28 Dec 2021 09:06:14 +0000</pubDate>
      <link>https://dev.to/yash_makan/omg-50000-views-on-my-blogs-1fd4</link>
      <guid>https://dev.to/yash_makan/omg-50000-views-on-my-blogs-1fd4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LaKuFcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/fxI1G5PNC5esyNlIUs/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LaKuFcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/fxI1G5PNC5esyNlIUs/giphy.webp" alt="Thank You" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi developers, I am Yash Makan and this is not the kind of post where I will tell you guys something which will help you in any way. But before clicking the back button, I would like you to stay. First I would like to tell you a little story... &lt;/p&gt;

&lt;p&gt;Hi, I am Yash Makan a 17yo boy living in a small city in India, it all started in the year 2018 when I first stepped on this beautiful journey. It’s been 4 years of dedication, motivation and belief that I am here. This year I got my very first job as a full-stack app developer &amp;amp; I am loving it. For next year, I’ve decided to move and live independently on my own. I would like to embark on this journey of life and take full responsibility for myself. I love my parents and to be quite honest they are sad that I have to leave so early but they completely believe in me and that’s what makes me motivated. I’ve decided to skip the college education(BTech) and learn on my own and help the community as I learn.&lt;/p&gt;

&lt;p&gt;I am simply telling you this because I want you guys to take the step not from next year but from today itself. I want that everyone should do stuff whatever they love or their gut tells. I know that there will be difficulties in the path but It’ll all pass away and the rest will be happiness for you and your loved ones. I hope you all the very best and wish you everything you need from life. &lt;/p&gt;

&lt;p&gt;Peace ✌🏼&lt;/p&gt;




&lt;p&gt;With all of that said, I want to thank you guys for your support &amp;amp; love. I love to be a part of the community and my only regret is that I should have joined early on. I cannot believe what I’ve achieved in the past 1.5 months and it’s all because of you guys, so THANK YOU! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6oMWzkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njn0x5ys02yc1lvtcc0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6oMWzkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njn0x5ys02yc1lvtcc0i.png" alt="Screenshot" width="880" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have so much planned to grow this 50,000 number in the upcoming future. So, if you guys don’t want to miss any of my upcoming blogs then you can follow me on &lt;a href="https://twitter.com/Yash_Makan"&gt;twitter&lt;/a&gt; or &lt;a href="https://dev.to/yash_makan"&gt;dev.to&lt;/a&gt;. With that being said, I would like to conclude this short blog and hope to see you again. Till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" alt="Bye Bye Gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-2021-articles"&gt;
  &lt;/a&gt;
  My 2021 Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/21-must-read-books-for-kids-begineer-advanced-interview-with-pdf-56c7"&gt;21 must-read books for kids, beginner, advanced &amp;amp; interview with PDF 🐍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh"&gt;Improve your workflow using Automation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e"&gt;4 ways to create modern GUI in python in the easiest way possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me
&lt;/h2&gt;

&lt;p&gt;Website: &lt;a href="http://yashmakan.co.in"&gt;yashmakan.co.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/Yash_Makan"&gt;@Yash_Makan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;buymeacoffee: &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;@Here&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Data visualisation with React and Nivo</title>
      <author>Damian Piwowarczyk</author>
      <pubDate>Tue, 28 Dec 2021 09:00:56 +0000</pubDate>
      <link>https://dev.to/przpiw/build-data-visualisation-components-with-react-and-nivo-1d7e</link>
      <guid>https://dev.to/przpiw/build-data-visualisation-components-with-react-and-nivo-1d7e</guid>
      <description>&lt;p&gt;Today I will walk you though how you can build interactive charts on your website with Nivo &amp;amp; React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nivo-and-why"&gt;
  &lt;/a&gt;
  What is Nivo and why?
&lt;/h2&gt;

&lt;p&gt;Nivo is an open-source React visualization library built on top of d3js. It allows for server-side rendering and supports svg, canvas, and HTML charts. Nivo provides 27 highly customizable char types. It has nice motion and trasitions and it is very responsive. Nivo documentation is developer-friendly and contains many examples/templates and storybooks.&lt;br&gt;
 &lt;br&gt;
In this tutorial, we will build &lt;strong&gt;PieChart&lt;/strong&gt; that takes data from a file and renders SVG pie chart. We'll be able to change our chart based on selected values.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6o5QMt3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d900ic4gi5jldy1kitgu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6o5QMt3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d900ic4gi5jldy1kitgu.gif" alt="Image final product" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We going to use nextjs starter for this application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app statsViewer &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;statsViewer &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;data.js &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;components &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;PieCharDemo.jsA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @nivo/core
yarn add @nivo/pie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imported &lt;code&gt;ResponsivePie&lt;/code&gt; component will take a large number of props as it needs specific styling and file with data. Except that the parent component will need a height and width set.&lt;br&gt;
Beyond props used in this example, there is a bunch of other props that let us do pretty styling.&lt;/p&gt;

&lt;p&gt;Let's edit &lt;code&gt;PieChartDemo.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ResponsivePie&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nivo/pie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PieChartDemo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;600px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ResponsivePie&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;innerRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;padAngle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;cornerRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;activeOuterRadiusOffset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;borderColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;modifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;arcLinkLabelsSkipAngle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;arcLinkLabelsTextColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#333333&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;arcLinkLabelsThickness&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;arcLinkLabelsColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;arcLabelsSkipAngle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;arcLabelsTextColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;modifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;valueFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; %`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;legends&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bottom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemsSpacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemTextColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#999&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left-to-right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;itemOpacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;symbolSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;symbolShape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;itemTextColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here is &lt;code&gt;data.js&lt;/code&gt; file that I look created based on data from hashnode. I took numbers and convert them to percentages instead. &lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;594.2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;434&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;tagsByNumOfFollowers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;General Programing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;228.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;74.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;74.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;59.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;56.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalFollowers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;mostPopularPostsThisWeek&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;134&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web Dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web Dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dev Blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dev Blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;convertToPercent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;totalMostPopularPosts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Lastly we import our PieChartDemo component and fed it with data. I used useState hook and wired it to select input so we rerender PieChart component and feed it other data.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MyResponsivePie&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/MyResponsivePie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tagsByNumOfFollowers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tagsByNumOfFollowers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Tags&lt;/span&gt; &lt;span class="nx"&gt;followed&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mostPopularPostsThisWeek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;week&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/select&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyResponsivePie&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;To conclude, Nivo is a great library that has many components with out-of-the-box templates and rich documentation. The number of props maybe look overwhelming especially for beginners however, it gives us developers the power of customization that other chart libraries may be limited to. &lt;/p&gt;

&lt;p&gt;I hope this article was helpful to some of you guys. Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Things to Know Before You Start Tailwind CSS</title>
      <author>Kaushal Joshi</author>
      <pubDate>Tue, 28 Dec 2021 08:32:32 +0000</pubDate>
      <link>https://dev.to/clumsycoder/things-to-know-before-you-start-tailwind-css-4ebj</link>
      <guid>https://dev.to/clumsycoder/things-to-know-before-you-start-tailwind-css-4ebj</guid>
      <description>&lt;p&gt;With the rising popularity of Tailwind CSS, many of us might jump directly on Tailwind just to catch up with the hype. It won't take them much of their time to realize that it is not like any other traditional CSS framework. They might not even get a full picture of Tailwind and end up hating it thinking it's harder than plain CSS.  &lt;/p&gt;

&lt;p&gt;Here is my attempt to cover everything that you need to know to use Tailwind CSS in your next project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog focuses on CSS concepts that are essential to know for using Tailwind CSS. It is &lt;strong&gt;not&lt;/strong&gt; a tutorial to get started with it.&lt;br&gt;
&lt;a href="https://tailwindcss.com/docs/installation"&gt;Official documentation&lt;/a&gt; has covered that part pretty well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#utility-first-frameworks"&gt;
  &lt;/a&gt;
  Utility First Frameworks
&lt;/h2&gt;

&lt;p&gt;The main reason why Tailwind is different from other frameworks is that it is a utility based framework, whereas frameworks like Bootstrap or Bulma are component based frameworks. Now, what's the difference?&lt;br&gt;&lt;br&gt;
Component based frameworks provide a set of components that are used by adding predefined classes to HTML elements. For example, Bootstrap has a total of 24 components that we can use by simply adding related classes.&lt;br&gt;&lt;br&gt;
Tailwind CSS on the other hand is a utility framework. It doesn't limit your design by predefined opinionated components but provides powerful building blocks that are useful to create a unique design for your projects.&lt;/p&gt;

&lt;p&gt;Tailwind achieves this by having a class for every CSS property. Additionally, we can add our valid CSS properties to make a new tailwind class as per our needs. This gives total freedom and flexibility while designing the front end.&lt;/p&gt;

&lt;p&gt;But this comes with a cost. Component based libraries don't require you to know much about plain CSS. You refer to the documentation and use the code that you need. Tailwind being a low level utility based framework doesn't work in that way. You need to have a profound understanding of CSS to use Tailwind in the best way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermediate-css"&gt;
  &lt;/a&gt;
  Intermediate CSS
&lt;/h2&gt;

&lt;p&gt;There is only one word that describes CSS - overwhelming. Though Tailwind gives you flexibility and saves time requires to type everything explicitly, your knowledge of plain CSS is considered as the main pre-requisites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sizing-units"&gt;
  &lt;/a&gt;
  Sizing Units
&lt;/h3&gt;

&lt;p&gt;Especially, &lt;code&gt;rem&lt;/code&gt;.  All utility classes use &lt;code&gt;rem&lt;/code&gt; for styling. Tailwind has classes from smallest rem unit  &lt;code&gt;0.125rem&lt;/code&gt; (2px) to all the way up to 24rem. Additionally, you can add units as per your choice in &lt;code&gt;tailwind.config&lt;/code&gt; file (which can be &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt; or anything else too).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responsive-design"&gt;
  &lt;/a&gt;
  Responsive Design
&lt;/h3&gt;

&lt;p&gt;Tailwind is mobile first approach to styling. So whatever you write is suited for the smallest screen size defined while configuring tailwind. By default, the smallest utility class is &lt;code&gt;sm&lt;/code&gt; that sets media query of a minimum width of 640px. You are supposed to mention the breakpoint if you are adding classes for bigger sizes than that.&lt;br&gt;
That's why, knowing about responsive design, sizing units and media queries are a must to create anything eye-pleasing with Tailwind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexbox-amp-grid"&gt;
  &lt;/a&gt;
  Flexbox &amp;amp; Grid
&lt;/h3&gt;

&lt;p&gt;Creating layouts using grid and flexbox classes is easy as compared to traditional ways of using them. However, you might find it confusing because many classes conflict with each other resulting in a single class that is used with both layouts.&lt;br&gt;
I was talking about &lt;code&gt;justify-{value}&lt;/code&gt;, &lt;code&gt;align-{value}&lt;/code&gt;, &lt;code&gt;place-{value}&lt;/code&gt; and &lt;code&gt;gap&lt;/code&gt;. These classes serve the same purpose for flexbox as well as grid. Having a clear understanding of them would help you to save hours of confusion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-important-concepts"&gt;
  &lt;/a&gt;
  Other Important Concepts
&lt;/h3&gt;

&lt;p&gt;Of course, this is not it; CSS is more than that, and so is Tailwind. Units, responsive design and Flexbox/Grid need a special mention because once you understand how these things work, it won't be difficult for you to use Tailwind with its max out capacity.&lt;/p&gt;

&lt;p&gt;Other than that, here are a few more things that are good to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Transition and Transform Property&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/aspect-ratio"&gt;Aspect Ratios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/docs/preflight"&gt;Preflight&lt;/a&gt;: Tailwind has a set of base styling  practices built on top of &lt;a href="https://github.com/sindresorhus/modern-normalize"&gt;modern-normalize&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not mentioning padding, margin, box sizing, float and z-index because I believe that if you don't know how to work with them, you should think about sticking to plain CSS for some more time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-tailwind"&gt;
  &lt;/a&gt;
  When to Use Tailwind?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you have intermediary experience with plain CSS and know how CSS is supposed to work, you can use Tailwind pretty much anywhere you want.&lt;/li&gt;
&lt;li&gt;If your front end stack has a component based library such as react, using tailwind will allow you to use it with its maximum reusability and scalability of Tailwind.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-tailwind"&gt;
  &lt;/a&gt;
  When NOT to use Tailwind?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Do not even consider using Tailwind if you don't have intermediate experience with CSS. You might not face issues in the very beginning but as your project gets bigger, it'd get messier and confusing.&lt;/li&gt;
&lt;li&gt;If you are building websites with Vanilla JS, you might not use Tailwind at its full potential. Using same class names for every different component would make the code redundant, non-readable and messy.&lt;/li&gt;
&lt;li&gt;If you are building prototypes and time/deadline is a major factor, using tailwind will slow you down. Tailwind is best suitable for big projects which give you enough time to focus on design as well as logic.&lt;/li&gt;
&lt;li&gt;Similarly, using Tailwind with projects where backend logic or backend services is more important than design must be avoided. Because you'd end up spending more time on design when your focus should be on logic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Tailwind CSS is a utility based framework so you have to combine multiple utilities and create a component by yourself. That's why knowing about plain CSS is a must. You should have a clear understanding of sizing units, responsive design and media queries. Knowing about conflicting flexbox and grid properties would also save your confusion when you start building projects.&lt;br&gt;&lt;br&gt;
Don't jump to Tailwind if you are not comfortable with plain CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using Tailwind when you struggle with fundamentals will only lead to frustrations. But once your fundamentals are clear, no one can stop you from harnessing the full potential of Tailwind CSS! &lt;/p&gt;

&lt;p&gt;I have scheduled more blogs about starting Tailwind CSS so if you're interested, do subscribe to the newsletter and follow &lt;a href="https://clumsycoder.hashnode.dev/"&gt;my blog&lt;/a&gt;. Also, if you think there's anything that can be improved or added, I am happy to hear your opinion. I am most active on &lt;a href="https://twitter.com/clumsy_coder"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/7JKaushal"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Designing! 🎨&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>peviitor.ro - diferențierea</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Tue, 28 Dec 2021 08:25:10 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-diferentierea-14h2</link>
      <guid>https://dev.to/sebiboga/peviitorro-diferentierea-14h2</guid>
      <description>&lt;p&gt;Un &lt;code&gt;motor de cautare&lt;/code&gt; este diferit de platformele de recrutare prezente pe piata muncii in prezent.&lt;/p&gt;

&lt;p&gt;Sa luam cateva elemente si sa mentionam diferențele:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cont-de-utilizator"&gt;
  &lt;/a&gt;
  Cont de utilizator
&lt;/h4&gt;

&lt;p&gt;Pentru a avea acces la informatia prezentata de motorul de cautare peviitor.ro &lt;code&gt;nu ai nevoie de un cont de utilizator&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ejobs&lt;/strong&gt;: Pe platforma ejobs ai nevoie de un cont de utilizator. Ei te incurajeaza sa iti creezi un profil care poate deveni in timp CV-ul tau. Diferenta intre ejobs si peviitor.ro este ca acest motor de cautare: &lt;em&gt;peviitor.ro&lt;/em&gt; &lt;code&gt;nu are nevoie de datele tale personale&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bestjobs&lt;/strong&gt;: La fel ca si pentru ejobs, ei iti recomanda sa iti creezi un profil - cont de utilizator. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LinkedIN&lt;/strong&gt;: La fel ca si pentru bestjos si ejobs, si platforma LinkedIN recomanda sa ai un cont de utilizator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cariere.ro&lt;/strong&gt;: La fel ca si pentru ejobs si bestjobs sau LinkedIN, si aceasta platforma te incurajeaza sa iti creezi un profil de utilizator sau un profil de companie.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#duplicare-de-continut"&gt;
  &lt;/a&gt;
  Duplicare de continut
&lt;/h4&gt;

&lt;p&gt;Ai putea fi tentat sa spui ca prin aceasta diferentiere prezentata, ejobs ofera mai mult decat un motor de cautare. Partial adevarat insa, tinand cont de faptul ca pe platforma oamenii de HR &lt;code&gt;trebuie sa re-opereze anunturile de angajare&lt;/code&gt;, duplicand contintul de pe website-ul lor -sectiunea cariere, atunci putem sa reconsideram afirmatia.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#informatia-completa"&gt;
  &lt;/a&gt;
  Informatia completa
&lt;/h4&gt;

&lt;p&gt;Nu toate locurile de munca ale unei companii sunt prezente si pe ejobs sau alte platforme unde oamenii de HR trebuie sa re-opereze manual anuntul de angajare.  &lt;/p&gt;

&lt;p&gt;peviitor.ro &lt;code&gt;isi propune sa agregheze absolut toate locurile de munca oferite de o companie&lt;/code&gt; nu doar cateva anunturi. Consideram ca este important sa ai acces la informatia completa. Luam in serios dreptul cetateanului de a fi informat, care este un drept si nu un favor.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#date-actualizate"&gt;
  &lt;/a&gt;
  Date actualizate
&lt;/h4&gt;

&lt;p&gt;Cand o oferta de munca expira, adica acel loc de munca este ocupat, prima preocupare a persoanei din HR este sa dezactiveze anuntul de pe website-ul propriu al companiei iar dezactivarea manuala de pe platformele de tip ejobs se face putin mai tarziu. Astfel, avem prezente pe platformele de recrutare oferte de locuri de munca expirate. &lt;br&gt;
In motorul de cautare peviitor.ro &lt;code&gt;vei gasi informatia actualizata&lt;/code&gt;. Cel putin o data pe zi aducem informatiile de pe website-ul companiei si reimprospatam indexul motorului de cautare.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#viteza-de-raspuns"&gt;
  &lt;/a&gt;
  Viteza de raspuns
&lt;/h4&gt;

&lt;p&gt;Tehnologiile pe care le-am ales la implementarea solutiei tehnice ne &lt;code&gt;garanteaza faptul ca timpul de raspuns va fi cel putin surprinzator&lt;/code&gt;. Daca ne uitam la Google - care este un motor de cautare doar ca nu e specializat pe locuri de munca, observam ca aduce sute de mii de raspunsuri in sub o secunda. &lt;br&gt;
Ne-am pus problema: ei cum au reusit? Si tot ce am dezvoltat se invarte in jurul motorului de cautare, indexului si scraperului.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solutie-open-source"&gt;
  &lt;/a&gt;
  Solutie OPEN SOURCE
&lt;/h4&gt;

&lt;p&gt;Daca celelalte platforme de recrutare se bazeaza pe un soft proprietar al unei companii, noi, in dezvoltarea motorului de cautare peviitor.ro am dezvoltat solutia tehnica avand in gand solutiile OPEN SOURCE. De ce open source? Pentru ca noi consideram ca toti pot contribui la succesul acestui proiect, cei care vor, desigur.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pretul"&gt;
  &lt;/a&gt;
  Pretul
&lt;/h4&gt;

&lt;p&gt;Daca pentru companii a publica un anunt de angajare pe ejobs sau bestjobs sau alte platforme de recrutare implica niste costuri, pe platforma &lt;code&gt;peviitor.ro totul este GRATUIT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Am prezentat aici cateva dintre aspectele care ne diferentiaza. Mai sunt si altele pe care le vom dezvalui pe masura ce dezvoltam proiectul. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://splash.peviitor.ro/"&gt;https://splash.peviitor.ro/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>searchengine</category>
      <category>peviitor</category>
      <category>job</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>Top 10 Trending Technologies to Learn in 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Tue, 28 Dec 2021 08:12:44 +0000</pubDate>
      <link>https://dev.to/expoashish/top-10-trending-technologies-to-learn-in-2022-19pd</link>
      <guid>https://dev.to/expoashish/top-10-trending-technologies-to-learn-in-2022-19pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#top-10-trending-technologies-to-learn-in-2022"&gt;
  &lt;/a&gt;
  Top 10 Trending Technologies to Learn in 2022
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to see top 10 trending Technologies to learn in 2022. Top 10 trending and new technologies in 2022. If you like my post then follow me. Lets Start:-👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-trending-technologies-to-learn.html"&gt;Top 10 Trending Technologies to Learn in 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>ai</category>
      <category>blockchain</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>A/B testing with the JAMstack</title>
      <author>Marvin</author>
      <pubDate>Tue, 28 Dec 2021 08:03:45 +0000</pubDate>
      <link>https://dev.to/mfrachet/ab-testing-with-the-jamstack-22mp</link>
      <guid>https://dev.to/mfrachet/ab-testing-with-the-jamstack-22mp</guid>
      <description>&lt;p&gt;The JAMstack has been talked about in recent years like a way to create static websites that scales very well in many different ways.&lt;br&gt;
Since it becomes more and more mainstream, it made sense to people to think about how to apply older patterns that we like in this&lt;br&gt;
quite particular context.&lt;/p&gt;

&lt;p&gt;In this post, I will share with you &lt;strong&gt;my vision&lt;/strong&gt; of A/B testing (or feature flagging, everything written below may apply to both) using the JAMstack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#but-first-why-do-we-use-the-jamstack"&gt;
  &lt;/a&gt;
  But first, why do we use the JAMstack?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://jamstack.org/"&gt;jamstack.org&lt;/a&gt;, we use it because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's about building &lt;strong&gt;simple static pages&lt;/strong&gt; (HTML files)&lt;/li&gt;
&lt;li&gt;most of the job is made at build-time, no potential leak at runtime, it's more &lt;strong&gt;secured&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;static pages are basically HTML files and thus &lt;strong&gt;load very fast&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we benefit from &lt;strong&gt;cheap hosting&lt;/strong&gt; (putting files on a server and there we go)&lt;/li&gt;
&lt;li&gt;it's &lt;strong&gt;highly scalable&lt;/strong&gt;, just put the files on another machine and scaling is done&lt;/li&gt;
&lt;li&gt;it already exists great tools to create amazing sites (&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsbyjs&lt;/a&gt;, &lt;a href="https://nextjs.org/"&gt;Nextjs&lt;/a&gt;, &lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt;, &lt;a href="https://jamstack.org/generators/"&gt;etc...&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#why-do-we-use-ab-testing"&gt;
  &lt;/a&gt;
  Why do we use A/B testing?
&lt;/h2&gt;

&lt;p&gt;People use A/B testing to measure which variant of a website is more appreciated by their users. The idea is simply to provide different visual representations of some data and check which one attracts more people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irfewGZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/ab-tests.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irfewGZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/ab-tests.png" alt="Visual representation of two different variants of an A/B tests" width="507" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the visitors of the variant A come more often than the visitors of the variant B, then we can assume that variant A is a more viable solution to represent the data on the page.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-do-we-use-ab-testing-in-non-jamstack-applications"&gt;
  &lt;/a&gt;
  How do we use A/B testing in non JAMstack applications?
&lt;/h2&gt;

&lt;p&gt;In applications that are not built on top of the JAMstack, the idea is quite straightforward.&lt;/p&gt;

&lt;p&gt;When opening the application, it will make a request to a remote server to get the different available variants. Then, based on some conditions in the codebase, we are able to display the good variant to the good user.&lt;/p&gt;

&lt;p&gt;The following is an example of a client-side A/B test written with &lt;a href="https://reactjs.org/"&gt;Reactjs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useABVariant&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Preparing the application...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the A variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the B variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we see in the snippet, the code is executed in the user's browser. Also notice &lt;strong&gt;the loading information while the request is pending&lt;/strong&gt; before being able to display the variant content.&lt;/p&gt;

&lt;p&gt;The following is a tiny sandbox allowing to switch on and off a feature flag to display a new variant of a homepage. When using services like &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt;, this is exactly the kind of actions you're provided with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-ab-testing-on-the-jamstack-is-different"&gt;
  &lt;/a&gt;
  Why A/B testing on the JAMstack is different?
&lt;/h2&gt;

&lt;p&gt;Remember one of the main arguments of building on top of the JAMstack is &lt;strong&gt;fast page loading&lt;/strong&gt; (performance).&lt;/p&gt;

&lt;p&gt;When dealing with A/B tests the "standard way", &lt;strong&gt;we need to make an HTTP request to get the different variants&lt;/strong&gt;. Making an HTTP request means that &lt;strong&gt;there is a delay&lt;/strong&gt; between the moment we ask for the variants and the moment we get them back from the server.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;strong&gt;making the HTTP request is so critical&lt;/strong&gt; that we can't show anything else than a loading information to the user before resolving the variants and being able to show them the good content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a static environment, we are waiting for a dynamic information to display meaningful information.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When A/B testing the "standard way", using runtime information will &lt;strong&gt;make the application performances worse by increasing the time for the displaying the first meaningful content&lt;/strong&gt;. Loading static pages should be "instant" but relying on an HTTP request and an intermediate loading state before displaying the content will take extra time and decrease the experience.&lt;/p&gt;

&lt;p&gt;In some scenarios, &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; performance score can drop by around &lt;code&gt;25&lt;/code&gt; points (up to you to determine if it's significant or not).&lt;/p&gt;

&lt;p&gt;Also note that some tools helping building applications using the JAMstack &lt;strong&gt;don't even run JavaScript at all&lt;/strong&gt;, meaning that it's not possible to rely on HTTP requests to access remote data at runtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-ab-testing-in-a-jamstack-fashion"&gt;
  &lt;/a&gt;
  How to make A/B testing in a JAMstack fashion?
&lt;/h2&gt;

&lt;p&gt;The JAMstack is about &lt;strong&gt;building static pages&lt;/strong&gt;. Taking this notion to the extreme, we can imagine creating a dedicated set of static pages for different variants and host them in different places, like for example, different machines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FouN6kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/machine-ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FouN6kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/machine-ab.png" alt="Visual representation of two machines hosting two different variants of an A/B test" width="851" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The machine 1&lt;/strong&gt; owns all the statically generated HTML pages impacted by the variant A and &lt;strong&gt;the machine 2&lt;/strong&gt; owns all of the statically generated HTML pages of the variant B.&lt;/p&gt;

&lt;p&gt;Since pages are statically generated at build time, we can rely on environment variables to display the good variant content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AB_EXPERIMENT_VARIANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AB_EXPERIMENT_VARIANTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AB_EXPERIMENT_VARIANT&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the A variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the B variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to rely on some kind of proxy to route the different users to one of the two variants and make sure they always see that variant.&lt;/p&gt;

&lt;p&gt;Remember, &lt;strong&gt;we can't rely on runtime information to store the variant&lt;/strong&gt;, like an authenticated user id for example. We need to rely on something else. Hopefully, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;HTTP Cookies&lt;/a&gt; exist that allow for a client-server kind of data sharing. We can benefit from them to store the actual variant requested by the user and make sure that they will always get routed to that variant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zS66SKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/cookie-ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zS66SKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/cookie-ab.png" alt="Visual representation of a proxy routing an HTTP request to the good machine for an A/B test" width="851" height="1263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observations-on-this-approach"&gt;
  &lt;/a&gt;
  Observations on this approach
&lt;/h2&gt;

&lt;p&gt;The first observations to push upfront is that &lt;strong&gt;we have kept the page loading performances provided by default by the JAMstack&lt;/strong&gt;. We don't have to wait for runtime computations to display content on the page.&lt;/p&gt;

&lt;p&gt;The second observation is about the tradeoffs we decided to make: we shifted the A/B testing responsibility &lt;strong&gt;closer to the infrastructure layer&lt;/strong&gt;. The proxy has an important role to play in this scenario.&lt;/p&gt;

&lt;p&gt;Also note that we need more "places" to put the different variants: 1 variant corresponds to 1 website that corresponds to 1 set of static pages that should entirely be hosted. &lt;strong&gt;The more we have variants, the more we may pay for hosting&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJdzBuH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/all-variants.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJdzBuH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/all-variants.png" alt="A visual representation of a project having 4 different variants" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also one side effect that I find positive (but it can feel negative) is that it can be hard to combine multiple A/B experiments.&lt;/p&gt;

&lt;p&gt;Let's say that we have 2 pages and that we want to run an experiment on both the pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can be a visual representation of these scenarios at the hosting level?&lt;/li&gt;
&lt;li&gt;Should we create 4 different websites, one for each variant?&lt;/li&gt;
&lt;li&gt;Should we create N different websites with combinations of variants?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My expectations is that there will be solutions allowing to make A/B testing at the file level itself, and not at that site level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;If you're using &lt;a href=""&gt;Netlify&lt;/a&gt; for hosting your websites, they have a feature called &lt;a href="https://docs.netlify.com/site-deploys/split-testing/"&gt;Split-testing&lt;/a&gt; that allows for these kind of testing using a branch based approach.&lt;/p&gt;

&lt;p&gt;If you have any other references in mind concerning A/B testing or Split Testing on top of the JAMstack, feel free to drop them on &lt;a href="https://twitter.com/mfrachet"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 6 Consulting Firms in Pune</title>
      <author>Sakshi Thorat</author>
      <pubDate>Tue, 28 Dec 2021 07:39:29 +0000</pubDate>
      <link>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</link>
      <guid>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</guid>
      <description>&lt;p&gt;Do you need consulting services in Pune to assist your company to become more productive by simplifying and enabling procedures that increase communication, save expenses, and boost overall performance? &lt;/p&gt;

&lt;p&gt;You may acquire competitive advantages and develop unique goods and services with the help of several consulting organisations in Pune. &lt;/p&gt;

&lt;p&gt;By collaborating with customers, the majority of consultants advise them on how to use information technology to fulfil their business objectives or solve challenges. &lt;/p&gt;

&lt;p&gt;We have compiled a list of the best consulting firms in Pune that can help enterprises improve the structure and effectiveness of their IT systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 6 consulting firms in Pune&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following are the list of the top 10 consulting firms in Pune:&lt;/p&gt;

&lt;p&gt;1.** REGO Techno Solutions**&lt;/p&gt;

&lt;p&gt;Rego Techno Solutions is one of India's leading website design firms. Professional Online Design and Web Development Company in a wide range of creative and technical web solutions, including web design, web development, website hosting, digital marketing, and SEO. &lt;/p&gt;

&lt;p&gt;Whether it's building a successful ECommerce store (e-commerce website development) or establishing a corporate online presence, they can help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Britwise Technologies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Britwise Technologies is a well-known offshore Web &amp;amp; Mobile application development business in India that provides unique and best-in-class solutions to clients all over the world. &lt;/p&gt;

&lt;p&gt;With the help of qualified expert developers, They can turn your concept into a personalised and scalable application that will help you grow your business. Britwise Technology, with its empowered team of professionals and industry experts, specialises in cutting-edge technology. &lt;/p&gt;

&lt;p&gt;They deal with startups, mid-sized businesses, and major organisations, assisting them with their business operations via the use of technology. They've served customers in a variety of time zones and verticals, with retail, automotive, hotel, real estate, education, tourism, and medical being the most common.&lt;/p&gt;

&lt;p&gt;Please connect with them for more information about development services. They turn your ideas into creating apps, and they are the global leader in development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Logic Research and Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hotel management, event management, b2b portal, classified services, career services, healthcare analogue forecasting tools, and many more online applications have been built by Logic Research and Solutions for our happy clients. &lt;/p&gt;

&lt;p&gt;They have a team of web application developers that are proficient in PHP, Android, Advanced Java, Asp.net, and other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. ShivShakti Web Solutions &amp;amp; Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are committed to providing you with whatever you need (in terms of web and internet services) for your online presence on the internet. &lt;/p&gt;

&lt;p&gt;In the following spheres of operation, they provide a variety of personal and professional services: Web hosting, domain registration, website design and development, eCommerce services, email hosting, digital certificates, SEO services, CMS services, website logo design, web advertising, and excellent customer service are just a few of the services available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. QuadLogix Technologies Pvt. Ltd.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are an IT consulting and software development firm that provides end-to-end IT solutions to businesses all over the world. &lt;/p&gt;

&lt;p&gt;They are the chosen IT consultants and development partners for organisations all over the world because of our strong expertise in technology, our diverse experience across numerous sectors, and our well-designed software best practices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;a href="https://www.behievehrsolutions.com/"&gt;Behieve HR Solutions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pune Based leading best class corporate leadership training company offers analytics-focused OD and performance consulting for Small Medium Enterprises, &lt;a href="https://www.behievehrsolutions.com/services/business-coaching/"&gt;leadership training&lt;/a&gt;, soft skills training, management, and executive coaching solutions for professionals and companies looking to partner with foremost corporate leadership training companies. They customize and deliver &lt;a href="https://www.behievehrsolutions.com/services/hr-processes/"&gt;HR Processes&lt;/a&gt;, Learning &amp;amp; development, corporate pieces of training, and webinars keeping our client’s business, organizational culture.&lt;/p&gt;

&lt;p&gt;They also provide &lt;a href="https://www.behievehrsolutions.com/services/recruitment/"&gt;Recruitment Process Outsourcing (RPO)&lt;/a&gt; which is an entire business process outsourcing where a company transfer all or part of its recruitment processes to an external service provider.&lt;/p&gt;

&lt;p&gt;Behieve offer &lt;a href="https://www.behievehrsolutions.com/services/learning-development/"&gt;Learning and Development&lt;/a&gt; which best describes everything a business does to encourage professional development among its employees. Training courses, analysis, content management programs, learning plan implementations, development activities – as well as much more – all fall under the bracket of Learning and Development.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flow control using JS</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 28 Dec 2021 07:38:30 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</link>
      <guid>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</guid>
      <description>&lt;p&gt;Yes, it's one of the most &lt;strong&gt;important topic&lt;/strong&gt; when you are learning how to &lt;strong&gt;write&lt;/strong&gt; code with &lt;strong&gt;JS&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;First, you need to understand what does it mean, what is exactly &lt;em&gt;flow control&lt;/em&gt;, when your code needs to take a decision about which sentence should be run it's made with &lt;strong&gt;FLOW CONTROL&lt;/strong&gt; 😇. There are different methods to control flow using JS, let's going to see some examples: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-else-clause"&gt;
  &lt;/a&gt;
  if - else clause
&lt;/h2&gt;

&lt;p&gt;This is the most &lt;strong&gt;typical&lt;/strong&gt; one, it gives us a lot of control about code execution, we can &lt;em&gt;decide&lt;/em&gt; which code should be run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;em&gt;basic syntax&lt;/em&gt; you must use 😁, it's really easy, you have a condition which is evaluated and depending on that you will run one side or &lt;strong&gt;another&lt;/strong&gt;. &lt;strong&gt;OMG!!&lt;/strong&gt; Yes, it gives us a lot of power. Let's try one more example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, this code checks if this &lt;code&gt;const&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt; and run the following sentences according to the condition, &lt;strong&gt;obviously&lt;/strong&gt; this condition is &lt;code&gt;true&lt;/code&gt;, the you will see &lt;code&gt;My Mum contains a string&lt;/code&gt; in your &lt;code&gt;console&lt;/code&gt; 😇. &lt;/p&gt;

&lt;p&gt;Moreover you are able to evaluate multiple conditions using &lt;code&gt;logic operators&lt;/code&gt;, AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and OR &lt;code&gt;||&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: It means that all the conditions must be true due to &lt;code&gt;true&lt;/code&gt; of the entire condition.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It returns true due to both sides are true.&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;OR &lt;code&gt;||&lt;/code&gt;: It means that at least one of the conditions must be true to get a final &lt;code&gt;true&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// it returns true due to at least one side is true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives us more powerful tools to check multiple conditions using the same &lt;code&gt;if&lt;/code&gt; clause 🤖&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, it will print &lt;code&gt;My mum contains a string&lt;/code&gt; because two conditions are true and I have used an &lt;strong&gt;AND&lt;/strong&gt; logic port. &lt;br&gt;
I recommend you to practise some conditions using JS to &lt;strong&gt;understand better&lt;/strong&gt; ☺️ how to use that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#switchcase-clause"&gt;
  &lt;/a&gt;
  Switch-case clause
&lt;/h2&gt;

&lt;p&gt;It allows you to check multiple &lt;em&gt;static&lt;/em&gt; conditions and take decisions depending on that value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor1` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor2` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valorN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valorN` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when all the conditions are false&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has a lot of power and bring us the opportunity to check &lt;strong&gt;multiple possible values&lt;/strong&gt; easily, instead, we can use multiple &lt;code&gt;if-else&lt;/code&gt; clauses, but your code will not be legible 🤒. It comes to bring us more &lt;strong&gt;organisation&lt;/strong&gt; when we need to check conditions that can take a lot different values, Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 negative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// foo is 0, then the following block will be run&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case1&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case2&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, you can run the same for conditions that need to perform the same &lt;strong&gt;action&lt;/strong&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bird&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will live.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elephant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will not.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, we will take the same action if animal math &lt;strong&gt;one of the four&lt;/strong&gt; case exposed 😇.&lt;/p&gt;

&lt;p&gt;Here you have seen how to check conditions and how to make your code take &lt;strong&gt;decisions&lt;/strong&gt; in execution time about possible values of your &lt;strong&gt;expressions&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;That's all for &lt;em&gt;today&lt;/em&gt; post!!!&lt;/p&gt;

&lt;p&gt;If you really like our post, please don't forget to share with your friends and give us some likes, it'll help us to grow more and get more &lt;strong&gt;advance&lt;/strong&gt; content 👨🏼‍💻 to this blog. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The main reason why I don't use Redux in my projects</title>
      <author>Nitsan Cohen</author>
      <pubDate>Tue, 28 Dec 2021 07:32:26 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/the-main-reason-why-i-dont-use-redux-in-my-projects-i9d</link>
      <guid>https://dev.to/nitsancohen770/the-main-reason-why-i-dont-use-redux-in-my-projects-i9d</guid>
      <description>&lt;p&gt;The main reason why I don't use Redux in my projects&lt;/p&gt;

&lt;p&gt;There are several reasons why not to use Redux.&lt;/p&gt;

&lt;p&gt;And choose another more modern library like Recoil.&lt;/p&gt;

&lt;p&gt;But the main reason why I don't use Redux has nothing to do with Redux itself. For the same following explanation, I won't use Recoil as well.&lt;/p&gt;

&lt;p&gt;I don't use Redux because I want my components to be decoupled from a third-party library.&lt;/p&gt;

&lt;p&gt;What do I mean?&lt;/p&gt;

&lt;p&gt;When I create a component with Bit, I know these components will be used in dozens or even hundreds of applications.&lt;/p&gt;

&lt;p&gt;A component in Bit is independent - it is versioned and built independently and installed in your project like any other package using npm (for instance - &lt;code&gt;npm i @teambit/base-ui.input.button&lt;/code&gt; also don't forget to configure your npm registry &lt;code&gt;npm config set '@teambit:registry' https://node.bit.dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I don't know what libraries the consumers of my components will want to use. Maybe they will want to use Recoil? Perhaps Redux? Or even the beloved Context!&lt;/p&gt;

&lt;p&gt;That is why I have to abstract my components from any third-party library. That way, I enable everyone to use it with ease.&lt;/p&gt;

&lt;p&gt;If I have to pass something from a distant parent, I use Context. Context is part of the React library, so I have no problem using it!&lt;/p&gt;

&lt;p&gt;I am sure my consumers will be using React since I am creating a React component.&lt;/p&gt;

&lt;p&gt;I will show you how I create agnostic components in the next post. Meanwhile, try making your components and exporting them.&lt;/p&gt;

&lt;p&gt;In the attached code block, you will find instructions on quickly starting your own lab to create and export independent components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xMUUxXE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzflv7o7m0baom9l9roc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMUUxXE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzflv7o7m0baom9l9roc.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>redux</category>
    </item>
    <item>
      <title>Vitest - Jest Alternative powered by Vite</title>
      <author>Eugene Kopich</author>
      <pubDate>Tue, 28 Dec 2021 07:27:55 +0000</pubDate>
      <link>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</link>
      <guid>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-vitest"&gt;
  &lt;/a&gt;
  Why &lt;a href="https://vitest.dev/"&gt;Vitest&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This guide assumes that you are familiar with Vite. A good way to start learning more is to read the &lt;a href="https://vitejs.dev/guide/why.html"&gt;Why Vite Guide&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=UJypSr8IhKY"&gt;Next generation frontend tooling with ViteJS&lt;/a&gt;, a stream where &lt;a href="https://twitter.com/youyuxi"&gt;Evan You&lt;/a&gt; did a demo explaining the main concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-a-vite-native-test-runner"&gt;
  &lt;/a&gt;
  The need for a Vite native test runner
&lt;/h2&gt;

&lt;p&gt;Vite's out-of-the-box support for common web patterns, features like glob imports and SSR primitives, and its many plugins and integrations are fostering a vibrant ecosystem. Its dev and build story are key to its success. For docs, there are several SSG-based alternatives powered by Vite. Vite's Unit Testing story hasn't been clear though. Existing options like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; were created in a different context. There is a lot of duplication between Jest and Vite, forcing users to configure two different pipelines. &lt;/p&gt;

&lt;p&gt;Using Vite dev server to transform your files during testing, enables the creation of a simple runner that doesn't need to deal with the complexity of transforming source files and can solely focus on providing the best DX during testing. A test runner that uses the same configuration of your App (through &lt;code&gt;vite.config.js&lt;/code&gt;), sharing a common transformation pipeline during dev, build, and test time. That is extensible with the same plugin API that lets you and the maintainers of your tools provide first-class integration with Vite. A tool that is built with Vite in mind from the start, taking advantage of its improvements in DX, like its instant Hot Module Reload (HMR). This is Vitest, a blazing fast unit-test framework powered by Vite. &lt;/p&gt;

&lt;p&gt;Given Jest's massive adoption, Vitest provides a compatible API that allows you to use it as a drop-in replacement in most projects. It also includes the most common features required when setting up your unit tests (mocking, snapshots, coverage). Vitest cares a lot about performance and uses Worker threads to run as much as possible in parallel. Some ports have seen test running an order of magnitude faster. Watch mode is enabled by default, aligning itself with the way Vite pushes for a dev first experience. Even with all these improvements in DX, Vitest stays lightweight by carefully choosing its dependencies (or directly inlining needed pieces). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vitest aims to position itself as the Test Runner of choice for Vite projects, and as a solid alternative even for projects not using Vite.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-vs-jest"&gt;
  &lt;/a&gt;
  Vitest vs Jest
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; took over the Testing Framework space by providing out-of-the-box support for most JavaScript projects, a comfortable API (&lt;code&gt;it&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt;), and the full pack of testing features that most setups would require (snapshots, mocks, coverage). We are thankful to the Jest team and community for creating a delightful testing API and pushing forward a lot of the testing patterns that are now a standard in the web ecosystem. It is possible to use Jest in Vite setups. &lt;a href="https://twitter.com/haoqunjiang"&gt;@sodatea&lt;/a&gt; is building &lt;a href="https://github.com/sodatea/vite-jest#readme"&gt;vite-jest&lt;/a&gt;, which aims to provide first-class Vite integration for &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. The last &lt;a href="https://github.com/sodatea/vite-jest/blob/main/packages/vite-jest/README.md#vite-jest"&gt;blockers in Jest&lt;/a&gt; have been solved so this is a valid option for your unit tests. However, in a world where we have &lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt; providing support for the most common web tooling (typescript, JSX, most popular UI Frameworks), Jest represents a duplication of complexity. If your app is powered by Vite, having two different pipelines to configure and maintain is not justifiable. With Vitest you get to define the configuration for your dev, build and test environments as a single pipeline, sharing the same plugins and the same vite.config.js. Even if your library is not using Vite (for example, if it is built with esbuild or rollup), Vitest is an interesting option as it gives you a faster run for your unit tests and a jump in DX thanks to the default watch mode using Vite instant Hot Module Reload (HMR). Vitest offers compatibility with most of the Jest API and ecosystem libraries, so in most projects, it should be a drop-in replacement for Jest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-features"&gt;
  &lt;/a&gt;
  Vitest Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vite's config, transformers, resolvers, and plugins. Use the same setup from your app!&lt;/li&gt;
&lt;li&gt;Jest Snapshot&lt;/li&gt;
&lt;li&gt;Chai built-in for assertions, with Jest expect compatible APIs.&lt;/li&gt;
&lt;li&gt;Smart &amp;amp; instant watch mode, like HMR for tests!&lt;/li&gt;
&lt;li&gt;Native code coverage via c8&lt;/li&gt;
&lt;li&gt;Tinyspy built-in for mocking, stubbing, and spies.&lt;/li&gt;
&lt;li&gt;JSDOM and happy-dom for DOM and browser API mocking&lt;/li&gt;
&lt;li&gt;Components testing (Vue, React, Lit, Vitesse)&lt;/li&gt;
&lt;li&gt;Workers multi-threading via tinypool (a lightweight fork of Piscina)&lt;/li&gt;
&lt;li&gt;ESM first, top level await&lt;/li&gt;
&lt;li&gt;Out-of-box TypeScript / JSX support&lt;/li&gt;
&lt;li&gt;Filtering, timeouts, concurrent for suite and tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vitest-example"&gt;
  &lt;/a&gt;
  Vitest Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vitest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;suite name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snapshot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" alt="Vitest logo" width="740" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vitest.dev/guide/"&gt;Vitest Documentaion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vite</category>
      <category>jest</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting hooked onto React Hooks.</title>
      <author>Sumrit Grover</author>
      <pubDate>Tue, 28 Dec 2021 07:02:43 +0000</pubDate>
      <link>https://dev.to/grover_sumrit/getting-hooked-onto-react-hooks-2n67</link>
      <guid>https://dev.to/grover_sumrit/getting-hooked-onto-react-hooks-2n67</guid>
      <description>&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;This hook as the name suggests is used to declare a state variable. This helps &lt;strong&gt;preserve values&lt;/strong&gt; between function calls.&lt;/p&gt;

&lt;p&gt;Whenever a state variable is changed it causes the &lt;strong&gt;DOM to re-render&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The first is the &lt;em&gt;name&lt;/em&gt; of the state variable that is declared and the second is the function that is called to &lt;em&gt;update the state variable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;PS- State variable is able to hold any and all types of datatypes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLZumxTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p86yvjylrfx9mj2b6gka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLZumxTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p86yvjylrfx9mj2b6gka.png" alt="useState" width="680" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h2&gt;

&lt;p&gt;Using this hook, you tell React to do something after rendering the DOM. &lt;/p&gt;

&lt;p&gt;React remembers the function you passed and would call that function after performing the DOM updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5XoMkAsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97c593yydjr72t496ppo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XoMkAsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97c593yydjr72t496ppo.png" alt="useEffect" width="670" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The array present at the end of the useEffect function is called the &lt;strong&gt;dependency array&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This dependency array defines how the useEffect would be used.&lt;/p&gt;

&lt;p&gt;If no dependency array is provided then it will be called &lt;em&gt;every time the DOM is updated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If an empty array is provided, then the useEffect is only called once, &lt;em&gt;when the DOM is mounted and is never called again&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If state variables are passed in the dependency array then useEffect is called when the state variables are updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUldTTTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2cxwpd81mp8u0zl8jqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUldTTTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2cxwpd81mp8u0zl8jqh.png" alt="dependency array" width="310" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useref"&gt;
  &lt;/a&gt;
  useRef
&lt;/h2&gt;

&lt;p&gt;This React Hook is used to &lt;strong&gt;create reference variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The values stored in useRef are also preserved between different renders, similar to useState.&lt;/p&gt;

&lt;p&gt;But unlike useState, a change in the value of &lt;strong&gt;useRef doesn't cause the DOM to render&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The useRef is completely separate from the render cycle&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MT-aGuPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjt1v6fdky7bjstjhk9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MT-aGuPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjt1v6fdky7bjstjhk9o.png" alt="useRef" width="680" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usecallback"&gt;
  &lt;/a&gt;
  useCallback
&lt;/h2&gt;

&lt;p&gt;What to do when a function is being called again and again without any need. You use the useCallback hook&lt;/p&gt;

&lt;p&gt;useCallback function will &lt;strong&gt;return a memoized version that of a callback function&lt;/strong&gt; that only changes when you changed the dependency array.&lt;/p&gt;

&lt;p&gt;This will help prevent unnecessary renders and optimize the child components&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wmXuB6Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm4qd2jsqcmz5yoxdx0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wmXuB6Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm4qd2jsqcmz5yoxdx0n.png" alt="useCallback" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usememo"&gt;
  &lt;/a&gt;
  useMemo
&lt;/h2&gt;

&lt;p&gt;This hook is similar to the useCallback hook, but here a &lt;strong&gt;memoized value is returned&lt;/strong&gt; rather than the entire function.&lt;/p&gt;

&lt;p&gt;useMemo also has a dependency array and is called once the state in the dependency array is updated.&lt;/p&gt;

&lt;p&gt;useMemo is used to memoize costly functions so they don't have to be called every time they're rendered.&lt;/p&gt;

&lt;p&gt;Whereas useCallback is used to improve the rendering behaviour of your React function components. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0PGjWJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5j6a9px6us15g3jiuw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0PGjWJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5j6a9px6us15g3jiuw7.png" alt="useMemo" width="680" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
