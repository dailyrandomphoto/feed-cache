<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Use The map() Function In Dart</title>
      <author>Benjamin Carlson</author>
      <pubDate>Sat, 01 May 2021 15:06:47 +0000</pubDate>
      <link>https://dev.to/bjcarlson42/how-to-use-the-map-function-in-dart-d0g</link>
      <guid>https://dev.to/bjcarlson42/how-to-use-the-map-function-in-dart-d0g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Recently, I was building a &lt;a href="https://flutter.dev/?gclid=Cj0KCQjwsqmEBhDiARIsANV8H3aB8Bs-JYv8Pupzys4lwa3Trgh2gIfCWxUGsf4BuCIVxM0VJnT6sikaAmc_EALw_wcB&amp;amp;gclsrc=aw.ds"&gt;Flutter&lt;/a&gt; app and I needed to map over an array of users when a user logged in and check if their username, password, and security question answer matched what was&lt;br&gt;
in the database (the userArray). I tried to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;userArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 2'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 3'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;userArray&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// log user in&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// don't log user in&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Quick note: I removed some of my project specific logic and only included the important parts so it is easier to follow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This code logs the user in &lt;em&gt;if&lt;/em&gt; they are user 1. This looks like it should work, right? Unfortunately, it doesn't. It will not break either. Instead,&lt;br&gt;
nothing will happen. This makes it hard to debug.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;The simple solution is to add &lt;code&gt;.toList()&lt;/code&gt; to the end of the map statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;userArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 2'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 3'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;userArray&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// log user in&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// don't log user in&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// add .toList() here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-this-works"&gt;
  &lt;/a&gt;
  Why This Works
&lt;/h2&gt;

&lt;p&gt;Unlike in &lt;a href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt;, in Dart when you &lt;code&gt;.map()&lt;/code&gt; over an object, the &lt;code&gt;Iterable&lt;/code&gt; that&lt;br&gt;
is returned is &lt;code&gt;lazy&lt;/code&gt;. This means it is not evaluated by calling &lt;code&gt;.map()&lt;/code&gt;. To &lt;code&gt;evaluate&lt;/code&gt; it, we need to call &lt;code&gt;.toList()&lt;/code&gt;. You&lt;br&gt;
can read more about this &lt;a href="https://api.dart.dev/stable/2.12.4/dart-core/Iterable-class.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to quickly see this in action, open up &lt;a href="https://dartpad.dev/?null_safety=true"&gt;DartPad&lt;/a&gt; and paste in the code below (with added print statements)&lt;br&gt;
with and without &lt;code&gt;.toList()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;userArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 2'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'User 3'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;userArray&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'User 1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'logging user 1 in!'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Not user 1, can&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s"&gt;t log in!'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Remove .toList() to see no output!&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#from-the-flutter-docs"&gt;
  &lt;/a&gt;
  From The Flutter Docs
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  .map()
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;map&amp;lt;T&amp;gt;&lt;/code&gt;(T Function(String) f)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Returns a new lazy Iterable with elements that are created by calling f on each element of this Iterable in iteration order.&lt;/p&gt;

&lt;p&gt;This method returns a view of the mapped elements. As long as the returned Iterable is not iterated over, the supplied function f will not be invoked. The transformed elements will not be cached. Iterating multiple times over the returned Iterable will invoke the supplied function f multiple times on the same element.&lt;/p&gt;

&lt;p&gt;Methods on the returned iterable are allowed to omit calling f on any element where the result isn't needed. For example, elementAt may call f only once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tolist"&gt;
  &lt;/a&gt;
  .toList()
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;Set&amp;lt;Set&amp;lt;void&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; toList({bool growable = true})&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Creates a List containing the elements of this Iterable.&lt;/p&gt;

&lt;p&gt;The elements are in iteration order. The list is fixed-length if growable is false.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>map</category>
      <category>functions</category>
    </item>
    <item>
      <title>Day #14-#20 of 100DaysOfCode</title>
      <author>atulit023</author>
      <pubDate>Sat, 01 May 2021 14:58:10 +0000</pubDate>
      <link>https://dev.to/icecoffee/day-14-19-of-100daysofcode-4adb</link>
      <guid>https://dev.to/icecoffee/day-14-19-of-100daysofcode-4adb</guid>
      <description>&lt;p&gt;25 April to 1st May &lt;/p&gt;

&lt;p&gt;Yepp, you got it right. &lt;br&gt;
I'm back, as matter of fact I never broke my streak just ups and downs as usual.&lt;/p&gt;

&lt;p&gt;While making the shopping cart app I realized that I need to learn React router in greater detail so I followed my gut that led me to start another course. Making apps with Flux and React. &lt;br&gt;
Despite the fact that Flux is super cool to use, I learned that &lt;br&gt;
the separation of concerns is a pretty big deal in the world of programming.&lt;/p&gt;

&lt;p&gt;Flux is nothing but a simple library provided by Facebook to implement retrieving and loading of data effectively.&lt;br&gt;
It's a sum total of four things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Dispatcher&lt;/li&gt;
&lt;li&gt;Store&lt;/li&gt;
&lt;li&gt;React UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They literally do the same task as their name suggests.&lt;/p&gt;

&lt;p&gt;Anyway, that's not the main part, here the main thing is that we use flux in order to separate manipulation of data and rendering a component based on that data.&lt;br&gt;
That's not it, we also separate our component into two parts &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dumb component &lt;/li&gt;
&lt;li&gt;Smart component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A dumb component as the name suggests is dumb, i.e it contains the real markup (JSX) that is going to be rendered.&lt;/p&gt;

&lt;p&gt;Whereas a smart component is a bridge that asks the Store for data via the Flux API and then pass it down to its dumb child so that it may render it.&lt;/p&gt;

&lt;p&gt;And there you go separation of concerns at a whole new level.&lt;/p&gt;

&lt;p&gt;I just wanna put it here that we don't need flux at all but it just provides us with an interface and since it's all about declarative programming why be a B about it.&lt;/p&gt;

&lt;p&gt;With that said, now I'll work using these new tools that I just earned. 😁&lt;/p&gt;

&lt;p&gt;I chose Django for the back end. I also installed ruby on rails on my computer as well but still meh.&lt;/p&gt;

&lt;p&gt;I don't even know how to make a loop in ruby why to learn a new language when ruby on rails is just 0.7% faster than Django. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Although I could use some advice about which database I should learn first. Considering I have never even touched a soul till now.&lt;/em&gt;&lt;br&gt;
I have installed PostgreSQL and Mongo on my pc but IDK, not sure. &lt;br&gt;
See where it takes me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If any one of you smart people would like to help me out, I'd really appreciate that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's how I spent my last couple of days.&lt;br&gt;
Let me know if there is anything that I can do better in the comments or anything literally. Always happy to receive comments.&lt;/p&gt;

&lt;p&gt;Thanks for joining me.😀&lt;br&gt;
Have a wonderful day.🌷&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>react</category>
    </item>
    <item>
      <title>100 Days of Code Check Sheet</title>
      <author>Tim Apple</author>
      <pubDate>Sat, 01 May 2021 13:40:34 +0000</pubDate>
      <link>https://dev.to/vetswhocode/100-days-of-code-check-sheet-1375</link>
      <guid>https://dev.to/vetswhocode/100-days-of-code-check-sheet-1375</guid>
      <description>&lt;p&gt;I wanted to have a check sheet to hang on my wall to keep me accountable for coding. I saw some themed ones for Python and Web but wanted something more generic. So I just made one myself. I thought I would share it for those who would like to print one themselves. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://filedn.com/lL11wbUNQPPbbXWoSESOj98/Blog%20Posts/2020%20Posts/100%20Days%20Check/100_Days_Check.pdf"&gt;Hundred Days Of Code Check Sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Amazing Button Image Hover With CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sat, 01 May 2021 13:28:43 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-button-image-hover-with-css-1g7l</link>
      <guid>https://dev.to/nikhil27b/amazing-button-image-hover-with-css-1g7l</guid>
      <description>&lt;p&gt;Today I created an Amazing Image Button Hover Effect Using HTML &amp;amp; CSS. when you hover on the button inner image changes the size &amp;amp; also changes the text content. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/WNRqMxR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Develop and test React apps with React Query, MSW and React Testing Library</title>
      <author>Dennis Kortsch</author>
      <pubDate>Sat, 01 May 2021 13:00:27 +0000</pubDate>
      <link>https://dev.to/denniskortsch/develop-and-test-react-apps-with-react-query-msw-and-react-testing-library-1n7e</link>
      <guid>https://dev.to/denniskortsch/develop-and-test-react-apps-with-react-query-msw-and-react-testing-library-1n7e</guid>
      <description>&lt;p&gt;In this article we will develop a basic CRUD React app without having an API in place. Instead we will make use of Mock Service Worker to intercept &amp;amp; mock our fetch calls. React Query will be used as a data fetching library and we will follow a test-first approach using React Testing Library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt;: For data fetching.&lt;br&gt;
&lt;a href="https://mswjs.io/"&gt;MSW&lt;/a&gt;: To intercept &amp;amp; mock our API calls. &lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;: Write our tests.&lt;/p&gt;



&lt;p&gt;Let's imagine a scenario where you have the specifications and requirements for your UI already but the API your app is supposed to interact with is not ready yet. Only the contract itself is already defined.&lt;/p&gt;

&lt;p&gt;The API is roughly defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /users, returns all users 
GET /users/:id returns a user by id
POST /users, creates a new user
PUT /users/:id, updates an existing user by id
DELETE /users/:id, deletes an existing user by primary key.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So it is a basic &lt;strong&gt;C&lt;/strong&gt;reate &lt;strong&gt;R&lt;/strong&gt;ead &lt;strong&gt;U&lt;/strong&gt;pdate &lt;strong&gt;D&lt;/strong&gt;elete feature set.&lt;/p&gt;

&lt;p&gt;Hence our app will have the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list users with user name&lt;/li&gt;
&lt;li&gt;show a specific user details&lt;/li&gt;
&lt;li&gt;update a specific user&lt;/li&gt;
&lt;li&gt;create a new user&lt;/li&gt;
&lt;li&gt;delete user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Design TRIGGER Warning: For the sake of simplicity we will not care about Design or UX in this guide. We will focus solely on raw feature demonstration. So be warned, this will look like 💩!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;Start with creating a &lt;code&gt;create-react-app&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app react-tdd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And install our extra dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-query&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add -D msw @mswjs/data&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-up-and-react-query"&gt;
  &lt;/a&gt;
  Clean up and React Query
&lt;/h3&gt;

&lt;p&gt;Let's get at least the basic app foundation going before writing our first tests. First let's rip out everything we don't need from &lt;code&gt;src/App.js&lt;/code&gt;, add a &lt;code&gt;QueryClientProvider&lt;/code&gt; from &lt;code&gt;react-query&lt;/code&gt; and a placeholder &lt;code&gt;Users&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Users.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-mock-service-worker-up-and-running"&gt;
  &lt;/a&gt;
  Get Mock Service Worker up and running
&lt;/h3&gt;

&lt;p&gt;Because we are not developing against an API and we also don't want to mock our fetch calls nor &lt;code&gt;react-query&lt;/code&gt; itself we use &lt;code&gt;msw&lt;/code&gt; to intercept fetch calls and return mock data. To set up &lt;code&gt;msw&lt;/code&gt; we first need to run its initial setup script which will create the service worker script for us. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx msw init public/ --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next we create 3 new files: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/mocks/db.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice@aol.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob@aol.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dennis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dennis@aol.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Create a "db" with an user model and some defaults&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firstname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// create 3 users&lt;/span&gt;
&lt;span class="nx"&gt;mockUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created some fake/mock data and then made use of MSW's &lt;code&gt;data&lt;/code&gt; library to create an in-memory database. This will allow us to read &amp;amp; change data while developing/testing our app, almost as if we were interacting with a real DB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/mocks/server.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw/node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// for node/test environments&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8000/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/mocks/browser.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// for browser environments&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8000/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we also create 2 request handlers that will intercept any call to the specified URL. A worker for browser environments which can be used in Browser tests (e.g. Cypress) or during development in general. And one server for node environments which will be used in our Testing Library tests.&lt;/p&gt;

&lt;p&gt;We also make use of the &lt;code&gt;toHandlers()&lt;/code&gt; utility which takes a DB model, User in this case, and creates all the handlers for the usual CRUD operations automagically. This does exactly match our real API's specifications. What a lucky coincidence!&lt;/p&gt;

&lt;p&gt;With that in place we can connect it to our app &amp;amp; test runner.&lt;/p&gt;

&lt;p&gt;For tests we can use &lt;code&gt;src/setupTests.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/jest-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mocks/server.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Establish API mocking before all tests.&lt;/span&gt;
&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Reset any request handlers that we may add during the tests,&lt;/span&gt;
&lt;span class="c1"&gt;// so they don't affect other tests.&lt;/span&gt;
&lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetHandlers&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Clean up after the tests are finished.&lt;/span&gt;
&lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our browser environments we call &lt;code&gt;worker.start&lt;/code&gt; as soon as possible in &lt;code&gt;src/App.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;import { QueryClient, QueryClientProvider } from 'react-query';
import { Users } from './Users';
&lt;/span&gt;

&lt;span class="gi"&gt;+ if (process.env.NODE_ENV === 'development') {
+  const { worker } = require('./mocks/browser');
+  worker.start();
+ }
&lt;/span&gt;
const queryClient = new QueryClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now any matching call &lt;code&gt;http://localhost:8000/api/*&lt;/code&gt;, our imaginary API, will be intercepted and mock data will be returned - in tests AND in the real app if we would start the development server with &lt;code&gt;yarn start&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-test"&gt;
  &lt;/a&gt;
  First test
&lt;/h2&gt;

&lt;p&gt;We have set up the base of our app and configured MSW. This would be a good time to start and actually develop our UI. For that we will write a test first. It will fail (🔴) at first and we will implement the actual code to make it pass (🟢) afterwards. That will be the flow we will use to implement all the following features as well.&lt;/p&gt;

&lt;p&gt;From now on we can leave &lt;code&gt;yarn test&lt;/code&gt; and &lt;code&gt;yarn start&lt;/code&gt; running in parallel to watch our tests and develop our app in the browser.&lt;/p&gt;

&lt;p&gt;Let's assume our users list will have a loading state while loading users.&lt;/p&gt;

&lt;p&gt;Users.test.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading Users...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our test fails (🔴) with &lt;code&gt;Unable to find an element with the text: Loading Users....&lt;/code&gt; as expected. Now we try to get it to pass.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/Users.js&lt;/code&gt; we make use of &lt;code&gt;useQuery&lt;/code&gt; and a &lt;code&gt;fetch&lt;/code&gt; helper function &lt;code&gt;getUsers&lt;/code&gt; to call our users API endpoint at &lt;code&gt;/api/users&lt;/code&gt;. Eventually we handle the &lt;code&gt;isLoading&lt;/code&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:8000/api/users`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our tests should pass now (🟢).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKkhRXnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwcff0v2l9t0dk5z37i6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKkhRXnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwcff0v2l9t0dk5z37i6.png" alt="Screenshot 2021-05-01 at 13.40.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next feature is actually showing the list of users. Again, we write our test first.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Users.test.js&lt;/code&gt; we expect the names of all our mock users to be displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mockUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mocks/db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lists users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;mockUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It fails (🔴) and we implement the correct code to make it pass.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tests pass (🟢) and we can go on implement the next feature.&lt;/p&gt;

&lt;p&gt;Our app should have the functionality for creating users as well. You know the drill: failing test first!&lt;/p&gt;

&lt;p&gt;Users.test.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;create new user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Create new User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createButton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUserInList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name: John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUserInList&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the matching implementation. We create a new component &lt;code&gt;CreateUser&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:8000/api/users`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createUserMutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;createUserMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john@aol.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use React-Query's &lt;code&gt;useMutation&lt;/code&gt; and a helper function &lt;code&gt;createUser&lt;/code&gt; to make a POST call to our API. &lt;code&gt;onSuccess&lt;/code&gt; we invalidate our &lt;code&gt;users&lt;/code&gt; data to trigger a refetch. For simplicity we hard code the new users info.&lt;/p&gt;

&lt;p&gt;Our test passes (🟢).&lt;/p&gt;

&lt;p&gt;At this point I think it is clear how a possible workflow could look like and what the possibilities &amp;amp; advantages of having a mocked interactive API are. Our UI is ready to be connected to a real API once it is implemented.&lt;/p&gt;

&lt;p&gt;I won't go through testing all the other features here but instead link to a repository with the completed code in place.&lt;/p&gt;

&lt;p&gt;Or maybe you want to take it as a challenge and complete the rest of the tests yourself? Here are some ideas that should probably be implemented next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are still missing "Show a user's detailed info", "Updating a user" and "Deleting a user"&lt;/li&gt;
&lt;li&gt;What about Error handling and states?&lt;/li&gt;
&lt;li&gt;Another thing that already stands out is that there could be a lot of repetition with the fetch helper functions. Maybe refactor and find a better abstraction for it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repository: : &lt;a href="https://github.com/DennisKo/react-msw-demo"&gt;https://github.com/DennisKo/react-msw-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am open for questions and improvements! Contact me here or on Twitter:&lt;/p&gt;

&lt;p&gt;🐦 &lt;a href="https://twitter.com/DennisKortsch"&gt;https://twitter.com/DennisKortsch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Singleton Pattern in Javascript</title>
      <author>Bibek</author>
      <pubDate>Sat, 01 May 2021 12:59:40 +0000</pubDate>
      <link>https://dev.to/bibekkakati/singleton-pattern-in-javascript-16bn</link>
      <guid>https://dev.to/bibekkakati/singleton-pattern-in-javascript-16bn</guid>
      <description>&lt;p&gt;In this article, you will learn how to implement a singleton pattern in Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-singleton-pattern"&gt;
  &lt;/a&gt;
  What is Singleton Pattern?
&lt;/h3&gt;

&lt;p&gt;Singleton pattern is a design pattern that allows us to use a single instance of a class everywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We are creating an empty class &lt;code&gt;MyClass&lt;/code&gt; for demonstration purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass {
  ...
}

const Singleton = (function () {
  var instance;

  function createInstance() {
    var classObj = new MyClass();
    return classObj;
  }

  return {
    getInstance: function () {
        if (!instance) {
            instance = createInstance();
        }
        return instance;
    },
  };
})();

module.exports = Singleton;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Singleton&lt;/code&gt; object is implemented as an IIFE.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;createInstance&lt;/code&gt; function is responsible for creating the instance of &lt;code&gt;MyClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getInstance&lt;/code&gt; method will be invoked via the &lt;code&gt;Singleton&lt;/code&gt; object. If the instance of &lt;code&gt;MyClass&lt;/code&gt; is not present it will be created and returned, if already present it will return directly without creating a new instance.&lt;/p&gt;

&lt;p&gt;So this pattern allows us to access and manipulate the members of a class instance from any file or function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's create a class in a separate file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Filename: Username.js

module.exports.Username = class Username {
    constructor() {
        this._username;
    }

    set username(value) {
        this._username = value;
    }

    get username() {
        return this._username;
    }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We are using getter and setter to access and set the value of the &lt;code&gt;_username&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we will create a file for the &lt;code&gt;Singleton&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Filename: singleton.js

const { Username } = require("./Username");

const Singleton = (function () {
    var instance;

    function createInstance() {
        var classObj = new Username();
        return classObj;
    }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
        },
    };
})();

module.exports = Singleton;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here, we are importing the &lt;code&gt;Username&lt;/code&gt; class and creating its instance with the help of the &lt;code&gt;Singleton&lt;/code&gt; object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At last, we will create a &lt;code&gt;index.js&lt;/code&gt; file to run the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Filename: index.js

const Singleton = require("./Singleton");

function main() {
    var instanceOne = Singleton.getInstance();
    instanceOne.username = "Jack";

    var instanceTwo = Singleton.getInstance();
    console.log("Second Instance: ", instanceTwo.username);
    // Output - Second Instance:  Jack

    console.log("Are both instance equal? ", instanceOne === instanceTwo);
    // Output - Are both instance equal?  true
}

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, first we call the instance of the &lt;code&gt;Username&lt;/code&gt; class from the &lt;code&gt;Singleton&lt;/code&gt; object and assigning it to variable &lt;code&gt;instanceOne&lt;/code&gt;.&lt;br&gt;
Then we set the &lt;code&gt;username&lt;/code&gt; from &lt;code&gt;instanceOne&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, we call the instance of &lt;code&gt;Username&lt;/code&gt; class from &lt;code&gt;Singleton&lt;/code&gt; object and this time we are assigning it to another variable &lt;code&gt;instanceTwo&lt;/code&gt;. And in the output, we can see that the value of &lt;code&gt;username&lt;/code&gt; is the same as we set it through &lt;code&gt;instanceOne&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we compared if both instances are equal, it returns true.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Singleton object is not creating any new instance every time we call it, instead, it returns the previous instance of the class. Hence, this design pattern is very useful in many cases like using a common database connection etc.&lt;/p&gt;

&lt;p&gt;Github Repo &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/javascript/singleton-pattern"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. Give it a thumbs-up if it is helpful for you.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Everything you Need to Know about SafeMoon, the new cool cryptocurrency</title>
      <author>Guy Torbet</author>
      <pubDate>Sat, 01 May 2021 12:52:58 +0000</pubDate>
      <link>https://dev.to/torbet/everything-you-need-to-know-about-safemoon-id4</link>
      <guid>https://dev.to/torbet/everything-you-need-to-know-about-safemoon-id4</guid>
      <description>&lt;p&gt;I'll preface this by saying that this is not financial advice by any stretch of the imagination, furthermore, I have no idea how this whole crypto thing works, so take everything written here with a grain of salt.&lt;/p&gt;

&lt;p&gt;I also just made a &lt;a href="https://twitter.com/guytorbet"&gt;Twitter&lt;/a&gt;! Give it a follow to stay up to date! &lt;/p&gt;

&lt;p&gt;If you like this post, feel free to &lt;a href="https://torbet.co/subscribe"&gt;subscribe&lt;/a&gt; or check out my other posts &lt;a href="https://torbet.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have always wanted to give day trading a shot, but with so many options, it can start to get overwhelming. I attempted it for the first time a few months ago, and was disappointed - most large markets tend to be slow moving, boring, and require a large investment to make any meaningful returns; this is where crypto steps in. Crypto is generally a lot more volatile than traditional stocks and shares, the price of a coin can plummet or soar in a matter of hours - high risk high reward, I like it.&lt;/p&gt;

&lt;p&gt;Now, I'm ashamed to admit this, but in an attempt to decrease the endless boredom of lockdown, I caved and downloaded TikTok. Before long, I had made it onto finance recommendations (for whatever reason). I was scrolling meaninglessly until I discovered a video on the new cryptocurrency "SafeMoon".&lt;/p&gt;

&lt;p&gt;Initially, I was sceptical - I mean, how many times have you heard "become an early investor in the next Bitcoin", so I did some more digging. SafeMoon is unique in that it rewards holding the coin for longer periods of time, #HODL if you're THAT cool. Every time someone sells their SafeMoon, 5% of it gets reimbursed to current holders, 5% gets burned, and the rest released back into the pool. This means that when people sell their SafeMoon, your amount increases and the value goes up. &lt;/p&gt;

&lt;p&gt;The nature of crypto is that there is a finite amount, meaning the laws of supply and demand apply to it; the more that is bought, the lower the supply is, the higher the price.  Given that this specific coin was garnering a lot of attention and therefore demand, the price curve already showed tremendous growth, so I decided to give it a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-attempt"&gt;
  &lt;/a&gt;
  My Attempt
&lt;/h2&gt;

&lt;p&gt;I put in £200 initially, and lost a lot of it. This was partly because it was my first time trying out crypto, I had no idea what I was doing, and spent a lot of withdrawal and transfer fees. But also because Guy Torbet apparently has the power to cripple an entire market under the sheer weight of his presence, because as soon as I figured out how to actually GET SafeMoon, the entire crypto market took a massive dip. Luckily it bounced back the next day.&lt;/p&gt;

&lt;p&gt;This wasn't the end of the world,  I had seen the potential growth of Aragon ($ANT), invested in it, and it took off - mostly covering my losses. This was a pure fluke, and nothing on what I was expecting to make on my new love, SafeMoon.&lt;/p&gt;

&lt;p&gt;Now, when crypto dips, what do we do? &lt;/p&gt;

&lt;p&gt;A) call it quits, sell it all, give others a free 5% of our holdings and end up losing money.&lt;/p&gt;

&lt;p&gt;B) invest even more while the price is low and hope for the best.&lt;/p&gt;

&lt;p&gt;If you picked A, shame on you, you have no place in this HODL cult. If you're a B, firstly, you have balls the size of coconuts, and secondly, please don't put in money that you cant afford to lose.&lt;/p&gt;

&lt;p&gt;Now, a major reason why SafeMoon appealed was because of how new it is, it was developed just a few weeks ago, and hence, is not on the open-market or exchanges (yet). This will change in the coming weeks when it gets released more publicly, and should cause the price to skyrocket due to the increased demand for the coin.&lt;/p&gt;

&lt;p&gt;As I became more confident in how crypto works, I felt more comfortable sinking a few more dollars into it. There was a huge dip in Polkadot, so I bought some for cheap, and the price has been rising steadily ever since. &lt;/p&gt;

&lt;p&gt;There is definitely some safer options (ironically), and crypto can be a very worthy long time investment, but I'm more a low effort big rewards right now kinda guy, so, I said fuck it, and went for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-buy-safemoon"&gt;
  &lt;/a&gt;
  How to Buy SafeMoon
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Buy Binance coin ($BNB), I originally used Crypto.com to do this, but bailed due to their extortionate withdrawal fees, I recommend Binance themselves for this, fuck crypto.com.&lt;/li&gt;
&lt;li&gt;Make a Trust Wallet account and transfer your BNB into it.&lt;/li&gt;
&lt;li&gt;Swap your coins to BNB smart chain in the Trust Wallet app.&lt;/li&gt;
&lt;li&gt;Open up pancake swap, connect your Trust wallet, and swap your Binance coins for SafeMoon. It is not officially on the PancakeSwap list, so enter the token (0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3) or go directly &lt;a href="https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x8076c74c5e3f5852037f31ff0093eeb8c8add8d3"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additional steps: apparently Binance in the US is super duper shit, so you may need to find an alternative exchange to purchase your BNB. Occasionally PancakeSwap will drop an error when swapping to SafeMoon, click the settings icon and set your slipping rate to 11% (or slightly higher if it doesn't work).&lt;/p&gt;




&lt;p&gt;I'm not upset about the losses, the way I see it, I invested in learning something new. SafeMoon, and most cryptocurrencies for that matter, is a massive gamble - but I'm gonna continue to hodl until we react the moon!&lt;/p&gt;

&lt;p&gt;I like crypto, and will spend more time understanding it and researching, as it becomes more and more mainstream, the returns should only get bigger!&lt;/p&gt;

&lt;p&gt;If you have some money to play around with, I'd put a bit into SafeMoon, but nothing that you can't afford to lose. It has massive potential in all aspects, but if you want a more long term investment, keep being an "A" and put your money in the S&amp;amp;P 500 like a normie.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to get GitHub notifications on your Discord server.</title>
      <author>Ineza Bonté Grévy</author>
      <pubDate>Sat, 01 May 2021 12:52:11 +0000</pubDate>
      <link>https://dev.to/inezabonte/how-to-get-github-notifications-on-your-discord-server-2j9o</link>
      <guid>https://dev.to/inezabonte/how-to-get-github-notifications-on-your-discord-server-2j9o</guid>
      <description>&lt;p&gt;GitHub provides us with a way to allow other applications such as discord to connect it and receive POST requests whenever any action is done on your repository. &lt;/p&gt;

&lt;p&gt;This can be useful if you find the email notifications not as instant as you'd want them to be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You need to have a GitHub account with a repository.&lt;/li&gt;
&lt;li&gt;You need to have a discord server where we will add the webhook.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-create-the-webhook"&gt;
  &lt;/a&gt;
  1. Create the webhook
&lt;/h3&gt;

&lt;p&gt;A webhook is basically a link that will allow other applications to post into discord.&lt;br&gt;
To create a webhook, head into your &lt;code&gt;server settings&lt;/code&gt; =&amp;gt; &lt;code&gt;integrations&lt;/code&gt; =&amp;gt; &lt;code&gt;New webhook&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpARivqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks08crvkapm0zzdke827.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpARivqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks08crvkapm0zzdke827.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can give your webhook a name and also choose which channel it will be posting to. You can click on &lt;code&gt;Copy Webhook URL&lt;/code&gt; to copy the link which we are going to use on our GitHub repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-discord-webhook-to-github"&gt;
  &lt;/a&gt;
  2. Add Discord webhook to GitHub
&lt;/h3&gt;

&lt;p&gt;After creating the webhook the next thing is to add it to your github repository from which you would like to get notifications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHiSqrY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gedao8zfs6gsagk4d6nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHiSqrY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gedao8zfs6gsagk4d6nb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head over to your repo then &lt;code&gt;settings&lt;/code&gt; =&amp;gt; &lt;code&gt;Webhooks&lt;/code&gt; =&amp;gt; &lt;code&gt;Add webhook&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste the link we copied earlier from discord  in the &lt;code&gt;Payload URL&lt;/code&gt; and make sure to add &lt;code&gt;/github&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwzu5gs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rl3nyalji68p6ku8s2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwzu5gs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rl3nyalji68p6ku8s2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the &lt;code&gt;Content type&lt;/code&gt; to &lt;code&gt;application/json&lt;/code&gt; and finally choose the events which should trigger the webhook. Personally, I want everything. &lt;/p&gt;

&lt;p&gt;After you are done you can click the green button at the bottom labeled &lt;code&gt;Add webhook&lt;/code&gt; to complete the process.&lt;/p&gt;

&lt;p&gt;If you have done it correctly you should receive a similar notification to this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcTsJf1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5zjnmz8qm2f4n0c04qm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcTsJf1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5zjnmz8qm2f4n0c04qm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-test-the-webhook"&gt;
  &lt;/a&gt;
  3. Test the webhook
&lt;/h3&gt;

&lt;p&gt;To test the webhook we can perform a simple action such as creating an issue on the repo which we just added the webhook.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTBUYYRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lu23pr35fzd0uhkff0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTBUYYRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lu23pr35fzd0uhkff0f.png" alt="A screenshot of creating a test issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon creating the issue. You should immediately receive a notification from discord on whatever device you have installed it on.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIiEOsWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkpkhejr84npp7sj37aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIiEOsWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkpkhejr84npp7sj37aw.png" alt="Screen Shot 2021-05-01 at 13.50.28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will work the same way when pushing commits, creating PRs ...etc&lt;/p&gt;

&lt;p&gt;Thank You for reading❤️. If you have any questions feel free to drop them in the comments section below and I'll be glad to answer them.&lt;/p&gt;

</description>
      <category>github</category>
      <category>tutorial</category>
      <category>webhooks</category>
      <category>discord</category>
    </item>
    <item>
      <title>Everything about &lt;hr&gt;: When to use it and how to style it</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Sat, 01 May 2021 12:38:02 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/everything-about-hr-when-to-use-it-and-how-to-style-it-2nk2</link>
      <guid>https://dev.to/masakudamatsu/everything-about-hr-when-to-use-it-and-how-to-style-it-2nk2</guid>
      <description>&lt;p&gt;While we are writing, occasionally we feel the need to indicate a change in topic without using a new section heading. The degree to which the subject matter changes is more significant than a new paragraph would indicate, but less significant than a new section would imply. &lt;/p&gt;

&lt;p&gt;A common practice in this situation is to use a horizontal rule:&lt;/p&gt;




&lt;p&gt;or a row of three asterisks.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzySzRTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57fcgp0qqc2e7yreedh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzySzRTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57fcgp0qqc2e7yreedh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How should web developers implement this typographic feature? &lt;/p&gt;

&lt;p&gt;Yes, start with &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; in HTML. &lt;/p&gt;

&lt;p&gt;But the information on its implementation detail is scattered around the web. This article aims to put everything important about &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, the HTML element to indicate a “thematic break” (&lt;a href="https://html.spec.whatwg.org/#the-hr-element"&gt;WHATWG (2021)&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-when-to-use-raw-lthrgt-endraw-"&gt;
  &lt;/a&gt;
  1. When to use &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.internetingishard.com/html-and-css/basic-web-pages/#empty-html-elements"&gt;James (2017)&lt;/a&gt; provides an excellent guide on when to use &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; (called “horizontal rule” here):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The transition from one scene of a story into the next or between the end of a letter and a postscript are good examples of when a horizontal rule may be appropriate. ... it carries &lt;em&gt;less&lt;/em&gt; significance than the separation created by a new heading element, but &lt;em&gt;more&lt;/em&gt; significance than a new paragraph.”&lt;/p&gt;

&lt;p&gt;—&lt;a href="https://www.internetingishard.com/html-and-css/basic-web-pages/#empty-html-elements"&gt;Oliver James&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-html-markup"&gt;
  &lt;/a&gt;
  2. HTML markup
&lt;/h2&gt;

&lt;p&gt;Since we're used to a horizontal rule to indicate a change in topic, it is tempting to use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that is styled as a horizontal line.&lt;/p&gt;

&lt;p&gt;Don't. Otherwise screen reader users cannot tell whether the topic has changed or not. &lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; and style it as you please (see Section 3 below).&lt;/p&gt;

&lt;p&gt;The flip side of the coin is: don't use &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; to draw a horizontal line for decorative purposes. Use an SVG image or a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element styled as such.&lt;/p&gt;

&lt;p&gt;One drawback of the  &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; is that it cannot have child elements. If this is not desirable for styling purposes, &lt;a href="https://www.sarasoueidan.com/blog/horizontal-rules/"&gt;Soueidan (2021)&lt;/a&gt; proposes the use of &lt;code&gt;&amp;lt;div role="separator"&amp;gt;&lt;/code&gt; to ensure accessibility (see Section 3.6 for an application).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-css-styling"&gt;
  &lt;/a&gt;
  3. CSS styling
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-resetting-the-default-style"&gt;
  &lt;/a&gt;
  3.1 Resetting the default style
&lt;/h3&gt;

&lt;p&gt;Browsers render &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; as a horizontal rule by default. &lt;a href="https://www.w3schools.com/tags/tag_hr.asp"&gt;W3Schools (2021a)&lt;/a&gt; offers the CSS code that most browsers use as their default style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://css-tricks.com/not-your-typical-horizontal-rules/"&gt;Coyier (2021)&lt;/a&gt; discusses this default style in detail and how to remove it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The easier way to clear it is to turn off all the borders then only use &lt;code&gt;border-top&lt;/code&gt; or &lt;code&gt;border-bottom&lt;/code&gt;. Or, turn off all the borders, set a height, and use a background.”&lt;/p&gt;

&lt;p&gt;–&lt;a href="https://css-tricks.com/not-your-typical-horizontal-rules/"&gt;Chris Coyier&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to reset the default style of &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-horizontal-rule"&gt;
  &lt;/a&gt;
  3.2 Horizontal rule
&lt;/h3&gt;

&lt;p&gt;See &lt;a href="https://css-tricks.com/simple-styles-for-horizontal-rules/"&gt;Coyier (2011)&lt;/a&gt; and &lt;a href="https://www.w3schools.com/howto/howto_css_style_hr.asp"&gt;W3Schools (2021b)&lt;/a&gt; for some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-three-asterisks"&gt;
  &lt;/a&gt;
  3.3 Three asterisks
&lt;/h3&gt;

&lt;p&gt;The trick to style &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; as a center-aligned row of three asterisks is the pseudo element's &lt;code&gt;content&lt;/code&gt; property. &lt;a href="https://stackoverflow.com/a/32146824/11847654"&gt;Ry- (2015)&lt;/a&gt; offers an example code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'***'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See &lt;a href="https://css-tricks.com/almanac/selectors/a/after-and-before/"&gt;Cope (2011)&lt;/a&gt; for pseudo elements in detail.&lt;/p&gt;

&lt;p&gt;The above code will render the &lt;code&gt;hr&lt;/code&gt; element as height-less and the &lt;code&gt;***&lt;/code&gt; will be overlapped with the following paragraph. &lt;/p&gt;

&lt;p&gt;For adjusting vertical spacing, use &lt;code&gt;padding-top&lt;/code&gt; and &lt;code&gt;padding-bottom&lt;/code&gt; for the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element, not for the pseudo element. The &lt;code&gt;height&lt;/code&gt; CSS property creates a distance to the paragraph above, but it keeps the next paragraph overlapped. So does the &lt;code&gt;padding-top&lt;/code&gt; property when used alone. We need &lt;code&gt;padding-bottom&lt;/code&gt; to push down the paragraph below. I haven't seen anyone point this out. This paragraph is based on my own discovery.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-other-symbols"&gt;
  &lt;/a&gt;
  3.4 Other symbols
&lt;/h3&gt;

&lt;p&gt;We can of course replace the pseudo element's &lt;code&gt;content&lt;/code&gt; property value with other characters as we please. See &lt;a href="https://www.thebookdesigner.com/2010/06/book-design-8-solutions-to-the-text-break-dilemma/"&gt;Friedlander (2010)&lt;/a&gt; for some inspirations taken from book design.&lt;/p&gt;

&lt;p&gt;One option is to go back in time. Historically, the row of three asterisks was actually a fake version of what is called &lt;a href="https://charcod.es/8258"&gt;Asterism&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/Asterism_(typography)"&gt;Wikipedia (2021)&lt;/a&gt;).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOGZowqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lyxjyn44c4ntq09ljej.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOGZowqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lyxjyn44c4ntq09ljej.jpeg" alt="Alt Text"&gt;&lt;/a&gt;Asterisms in the 1922 edition of &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Ulysses_(novel)"&gt;Ulysses&lt;/a&gt;&lt;/em&gt; (source: &lt;a href="https://en.wikipedia.org/wiki/Asterism_(typography)#/media/File:James_Joyce,_Ulysses,_1ed_2pr,_p240.jpg"&gt;Wikimedia Commons&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Or we can use a fleuron (or &lt;a href="https://charcod.es/#floral%20heart/10086"&gt;floral heart&lt;/a&gt;), dating back to Ancient Greece (&lt;a href="https://web.archive.org/web/20131029191558/http://thewordict.com/2013/05/10/punctuation-graveyard-the-hedera/"&gt;Ferlazzo (2013)&lt;/a&gt;).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xA4sFxRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Ph.Kamiros_19.jpg/1920px-Ph.Kamiros_19.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xA4sFxRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Ph.Kamiros_19.jpg/1920px-Ph.Kamiros_19.jpg" alt="img"&gt;&lt;/a&gt;Τypographic ornament in ancient city of &lt;a href="https://en.wikipedia.org/wiki/Kamiros"&gt;Kamiros&lt;/a&gt; in Rhodes island, Greece (source: &lt;a href="https://en.wikipedia.org/wiki/Fleuron_(typography)#/media/File:Ph.Kamiros_19.jpg"&gt;Wikimedia Commons&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;An alternative for more modern feels is to use emoji or some fun-looking characters in the font of your choice. Pick characters in line with the theme of the document. For a casual article on tea ceremony, for example, I would use: 🍵 🍵 🍵 (&lt;a href="https://charcod.es/#tea/127861"&gt;teacup without handle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Of course, for these symbols to be properly rendered in the user's browser, you need to check if the font used on your website or the system fonts on the user's device supports these characters.&lt;/p&gt;

&lt;p&gt;To ensure emoji will be rendered properly with the user's system font file, you may want to consider adding the following CSS declaration to &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Apple Color Emoji"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Segoe UI Emoji"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Segoe UI Symbol"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which is part of the system font stack employed by GitHub (&lt;a href="https://markdotto.com/2018/02/07/github-system-fonts/"&gt;Otto (2018)&lt;/a&gt;). &lt;a href="https://docs.microsoft.com/en-us/typography/font-list/segoe-ui-symbol"&gt;Segoe UI Symbol&lt;/a&gt; is a fallback for Windows 7 &amp;amp; 8, as Segoe UI Emoji was released with Windows 10 (&lt;a href="https://docs.microsoft.com/en-us/typography/font-list/segoe-ui-emoji"&gt;Microsoft (2021)&lt;/a&gt;).  For system font stack in general, see &lt;a href="https://medium.com/towards-more-beautiful-web-typography/survey-system-font-stack-5f73a3b39776?sk=1146fc332b93995a83493f2f887acc72"&gt;Kudamatsu (2020)&lt;/a&gt;, another article of mine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-combination"&gt;
  &lt;/a&gt;
  3.5 Combination
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr"&gt;MDN (2021)&lt;/a&gt; offers the following example, using the &lt;a href="https://en.wikipedia.org/wiki/Section_sign"&gt;section sign (§)&lt;/a&gt; together with horizontal rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;double&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'§'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which renders &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k61m4pWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g2tmmfxup5n200g5imu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k61m4pWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g2tmmfxup5n200g5imu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-svg-image"&gt;
  &lt;/a&gt;
  3.6 SVG image
&lt;/h3&gt;

&lt;p&gt;Finally, you can create a fancy SVG image to be used in place of a horizontal rule. One simple way of doing this is to set the SVG image as the &lt;code&gt;background-image&lt;/code&gt; property value for the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element. But this prevents the styling of SVG images with CSS. &lt;a href="https://www.sarasoueidan.com/blog/horizontal-rules/"&gt;Soueidan (2021)&lt;/a&gt; proposes the use of &lt;code&gt;&amp;lt;div role="separator"&amp;gt;&lt;/code&gt; with an inline SVG as its child element, which makes feasible something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BG97SD9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l8ysq4bgmjhw04xg259.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BG97SD9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l8ysq4bgmjhw04xg259.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, this is really nice. It doesn't totally deviate from the common pattern of using a horizontal rule or a row of center-aligned symbols. The use of silhouette echoes the black ink used in print. But it is certainly new and eye-catching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-final-thought"&gt;
  &lt;/a&gt;
  4. Final thought
&lt;/h2&gt;

&lt;p&gt;Unless we want to create a feel of printed books or magazines for your website, I believe that web designers/developers should aim for something that only websites can achieve. From this perspective, the SVG image option is worth exploring more. With inline SVGs, you can even animate part of the image.&lt;/p&gt;

&lt;p&gt;Another possibility is the use of color, which is expensive in print but super cheap on the web. In my current project, I use simple three asterisks as &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; but in the color that matches with the one for section titles. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDWKWUGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d3lxr5gv67wsglbyb98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDWKWUGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d3lxr5gv67wsglbyb98.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This way, the asterisks' meaning of thematic change will be reinforced due to its visual connection to section titles. &lt;/p&gt;




&lt;p&gt;Let me know if this article misses anything relevant to the use of &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Cope, Sara (2011) “&lt;a href="https://css-tricks.com/almanac/selectors/a/after-and-before/"&gt;::before / ::after&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Sep. 6, 2011.&lt;/p&gt;

&lt;p&gt;Coyier, Chris. (2011) “&lt;a href="https://css-tricks.com/simple-styles-for-horizontal-rules/"&gt;Simple Styles for Horizontal Rules&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Nov. 22, 2011. &lt;/p&gt;

&lt;p&gt;Coyier, Chris. (2021) “&lt;a href="https://css-tricks.com/not-your-typical-horizontal-rules/"&gt;Not Your Typical Horizontal Rules&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr. 16, 2021. &lt;/p&gt;

&lt;p&gt;Ferlazzo, Lisa (2013) “&lt;a href="https://web.archive.org/web/20131029191558/http://thewordict.com/2013/05/10/punctuation-graveyard-the-hedera/"&gt;Punctuation Graveyard: the Hedera&lt;/a&gt;”, &lt;em&gt;The Wordict&lt;/em&gt;, May 10, 2013 (via Internet Archive).&lt;/p&gt;

&lt;p&gt;Friedlander, Joel. (2010) “&lt;a href="https://www.thebookdesigner.com/2010/06/book-design-8-solutions-to-the-text-break-dilemma/"&gt;Book Design: 8 Solutions to the Text Break Dilemma&lt;/a&gt;”, &lt;em&gt;The Book Designer&lt;/em&gt;, Jun. 30, 2010. &lt;/p&gt;

&lt;p&gt;James, Oliver (2017) “&lt;a href="https://www.internetingishard.com/html-and-css/basic-web-pages/#empty-html-elements"&gt;Empty HTML Elements&lt;/a&gt;”, &lt;em&gt;Interneting Is Hard&lt;/em&gt;, 2017. &lt;/p&gt;

&lt;p&gt;Kudamatsu, Masa (2020) “&lt;a href="https://medium.com/towards-more-beautiful-web-typography/survey-system-font-stack-5f73a3b39776?sk=1146fc332b93995a83493f2f887acc72"&gt;System Font Stack: its history and rationale&lt;/a&gt;”, &lt;em&gt;Medium.com&lt;/em&gt;, Mar. 11, 2020. &lt;/p&gt;

&lt;p&gt;MDN (2021) “&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr"&gt;&amp;lt;hr&amp;gt;: The Thematic Break (Horizontal Rule) element&lt;/a&gt;”, &lt;em&gt;MDN Web Docs&lt;/em&gt;, Mar. 27. 2021 (last updated). &lt;/p&gt;

&lt;p&gt;Microsoft (2021) “&lt;a href="https://docs.microsoft.com/en-us/typography/font-list/segoe-ui-emoji"&gt;Segoe UI Emoji font family&lt;/a&gt;”, &lt;em&gt;Microsoft Docs&lt;/em&gt;, Mar. 11, 2020.&lt;/p&gt;

&lt;p&gt;Otto, Mark (2018) “&lt;a href="https://markdotto.com/2018/02/07/github-system-fonts/"&gt;Shipping system fonts to GitHub.com&lt;/a&gt;”, &lt;em&gt;markdotto.com&lt;/em&gt;, Feb. 7, 2018.&lt;/p&gt;

&lt;p&gt;Ry- (2015) “&lt;a href="https://stackoverflow.com/a/32146824/11847654"&gt;An answer to ‘Replacing &amp;lt;hr&amp;gt; line with with a custom glyph’&lt;/a&gt;”, &lt;em&gt;Stack Overflow&lt;/em&gt;, Aug. 21, 2015. &lt;/p&gt;

&lt;p&gt;Soueidan, Sara (2021) “&lt;a href="https://www.sarasoueidan.com/blog/horizontal-rules/"&gt;Not Your Typical Horizontal Rules&lt;/a&gt;”, &lt;em&gt;Sarasoueidan.com&lt;/em&gt;, Mar. 25, 2021. &lt;/p&gt;

&lt;p&gt;W3Schools (2021a) “&lt;a href="https://www.w3schools.com/tags/tag_hr.asp"&gt;HTML &amp;lt;hr&amp;gt; Tag&lt;/a&gt;”, &lt;em&gt;W3Schools HTML Element Reference&lt;/em&gt;, 2021. &lt;/p&gt;

&lt;p&gt;W3Schools (2021b) “&lt;a href="https://www.w3schools.com/howto/howto_css_style_hr.asp"&gt;How TO — Style HR (Horizontal Ruler/Line)&lt;/a&gt;”, &lt;em&gt;W3Schools How To&lt;/em&gt;, 2021. &lt;/p&gt;

&lt;p&gt;WHATWG (2021) “&lt;a href="https://html.spec.whatwg.org/#the-hr-element"&gt;4.4.2 The hr element&lt;/a&gt;”, &lt;em&gt;HTML Living Standard&lt;/em&gt;, Apr. 30, 2021 (last updated). &lt;/p&gt;

&lt;p&gt;Wikipedia (2021) “&lt;a href="https://en.wikipedia.org/wiki/Asterism_(typography)"&gt;Asterism (typography)&lt;/a&gt;”, &lt;em&gt;Wikipedia&lt;/em&gt;, Mar. 12, 2021 (last updated). &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>typography</category>
    </item>
    <item>
      <title>Exploring Node.js Frameworks</title>
      <author>Avindu Hewa</author>
      <pubDate>Sat, 01 May 2021 12:35:36 +0000</pubDate>
      <link>https://dev.to/avinduhewa/exploring-node-js-frameworks-k48</link>
      <guid>https://dev.to/avinduhewa/exploring-node-js-frameworks-k48</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;I've spent a fair amount of time coding with javascript and Node.js, Mostly working with express and AWS serverless. &lt;/p&gt;

&lt;p&gt;Today, while I was reading up on more advanced Node.js concepts and refreshing my basics to keep my skill sharp, I ran into the section where node.js recommended several frameworks. Now I've worked with some of them and heard of most of them but never actually experimented with them. In order to stay with the growing market trends, I wanted to spend several hours exploring the different frameworks and the pros and cons of using them, from a beginner's perspective at least.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adonisjs-link"&gt;
  &lt;/a&gt;
  Adonis.js - &lt;a href="https://adonisjs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Adonis happened to be one of the frameworks I have never had the chance to run into, so I dived into installation with a lot of questions and doubts. Due to my familiarity with coding, the installation seemed a bit easy but the default application boilerplate was a bit overwhelming and might take a decent learning curve to get a complete understanding of. However, the code seems to be fairly encapsulated and well structured. But the hassle of the learning curve didn't seem worth the further exploration (At least at the initial stage, I will be diving into deeper research at a later date.)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-410"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 4/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#eggjs-link"&gt;
  &lt;/a&gt;
  Egg.js - &lt;a href="https://eggjs.org/en/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Egg.js similar to Adonis was something new to me. However, the installation didn't require many steps and I was able to generate an app fairly quickly. Probably due to my experience with the MVC pattern the code structure was a lot more intuitive and I was able to create a sample API pretty fast.&lt;br&gt;
This is definitely a framework I will give another attempt at.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-610"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 6/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#expressjs-link"&gt;
  &lt;/a&gt;
  Express.js - &lt;a href="https://expressjs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Express.js is something I've used for years so I'm going to withhold most comments on this. but since express doesn't exactly come with a project generator out of the box, I used a recommended package to do so. Unlike the above two frameworks, Express without Nodemon didn't watch for changes and I thought that was worth mentioning. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-based-on-the-previous-impressions-i-give-it-a-610"&gt;
  &lt;/a&gt;
  Overall based on the previous impressions I give it a 6/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#fastify-link"&gt;
  &lt;/a&gt;
  Fastify &lt;a href="https://fastify.io/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Fastify was one of the most interesting frameworks I got to try. I enjoy minimal and elegant code and the simplified code required by Fastify was super nice. I didn't run into any Fastify generator so I'm guessing we can use a Yeoman recommended or an industry-accepted coding structure to create a flexible project. I will definitely be using this framework for quick PoC and Idea validations&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-910"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 9/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#gatsbyjs-link"&gt;
  &lt;/a&gt;
  Gatsby.js - &lt;a href="https://www.gatsbyjs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have had the chance to work with Gatsby once and despite my initial intention. Which was to judge the frameworks in order to create intuitive and simple APIs. Gatsby.js is a pleasant surprise. It allowed me to create a complete server-side application with an easy-to-use coding structure. It is definitely a good choice if I'm building documentation, landing pages, or any informative content. Definitely a choice I will be making in the future.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-an-810"&gt;
  &lt;/a&gt;
  Overall I give the first impression an 8/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#hapijs-link"&gt;
  &lt;/a&gt;
  Hapi.js - &lt;a href="https://hapijs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Hapi installation instructions were a tad bit confusing for me for some reason. I still managed to get a basic server running. But the basic code scaffolding for a simple REST API endpoint was too much. Due to the purpose of Hapi, I'd recommend using it for medium-large scale projects. Since it was created focus on logic reuse.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-510"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 5/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#koa-link"&gt;
  &lt;/a&gt;
  Koa - &lt;a href="http://koajs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Koa is a framework build with the help of express, so those who are familiar with Express will feel comfortable with Koa. The added benefit of the code is that it's slightly simpler and smaller. I was able to get the installation and a server up with extreme ease and I will be doing a deep dive on Koa to see why it might be a better choice over Express.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-610"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 6/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#loopbackio-link"&gt;
  &lt;/a&gt;
  Loopback.io - &lt;a href="https://loopback.io/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I had heard of loopback several years ago but never actually gave it a try. The installation took a bit of time (It might have been my internet, who knows) but the application generated a fair bit of boilerplate code. After a few minutes of skimming through the code, it seemed to be fairly similar to an MVC pattern. The code structure itself was alright but seemed oddly overwhelming for a beginner in my opinion. The biggest plus point I noticed was the Typescript supported project which was very nice. I might consider Loopback for solution development with typescript in the near future.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-710"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 7/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#meteorjs-link"&gt;
  &lt;/a&gt;
  Meteor.js - &lt;a href="https://meteor.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;MeteorJs has been popular for a long while now, and I've attempted meteor with Angular when it was released but haven't used the framework since then. The Biggest factor I noticed was the fact that it was very compatible with a lot of frontend frameworks with mobile support. But, since my main focus was for Backend I didn't dive much deep into the first code. As for the code structuring, generation, and installation. There was a small snag with installation but overall it wasn't a bad experience. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-impression-a-610"&gt;
  &lt;/a&gt;
  Overall I give the impression a 6/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#microjs-link"&gt;
  &lt;/a&gt;
  Micro.js &lt;a href="https://github.com/zeit/micro"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Micro was the best framework I found that fit my overall goal. It stands true with its name, it is extremely lightweight and small that which caught me off guard. The code was so simple and there was no scaffolding needed to get a basic endpoint. With the function declaration and Simple response string, the code was 3 lines and a working API.&lt;br&gt;
I will definitely keep Micro.js as my first choice whenever I need a quick and easy API. However, I will keep reservations about this library for any production-level work. Simple is good but I'm still not aware of the drawbacks it may hold. I will definitely do further research on the viability of Micro.js with Enterprise applications.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-1010"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 10/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#nestjs-link"&gt;
  &lt;/a&gt;
  Nest.js &lt;a href="https://nestjs.com/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Nest.js is a very compact Typescript-based node.js framework that was actually built quite nicely. I enjoy working with typescript and the generated code was actually very similar to Angular. So anyone familiar with Angular might find themselves and home with this framework. As a beginner to Backend but with some knowledge in Typescript, this would definitely be a good choice. I might explore this further at a later date.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-710"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 7/10;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-link"&gt;
  &lt;/a&gt;
  Next.js &lt;a href="https://nextjs.org/"&gt;Link&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next.js is a React Framework I have heard of but not exactly worked with. After a few minutes into the installation, I actually found the code structure and its intuitiveness pleasant to work with. It was simple and elegant and I was dumbfounded when I was messing around with it. When it comes to faster development cycles I will definitely consider Next.js as an option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overall-i-give-the-first-impression-a-910"&gt;
  &lt;/a&gt;
  Overall I give the first impression a 9/10;
&lt;/h4&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;I did test a few more frameworks but didn't spend enough time to include them in this article. I will however add a follow-up article on those and some deeper explorations on a few selected frameworks from this article.&lt;/p&gt;

&lt;p&gt;Just wanted to let any readers know, that these speculations are purely based on my personal opinions and if you think I'm incorrect please let me know, I would love to learn more and improve myself.&lt;/p&gt;

&lt;p&gt;If anyone is interested in a collaborative article hit me up :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h1&gt;

&lt;p&gt;An Engineer spent several hours trying out Node.js Frameworks and found a few interesting ones he liked.&lt;/p&gt;

&lt;p&gt;Follow me on social media.&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>PIVOT-UNPIVOT</title>
      <author>Soumitra Banerjee</author>
      <pubDate>Sat, 01 May 2021 12:21:02 +0000</pubDate>
      <link>https://dev.to/soumitrabanerjee/pivot-unpivot-2bne</link>
      <guid>https://dev.to/soumitrabanerjee/pivot-unpivot-2bne</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pivot"&gt;
  &lt;/a&gt;
  What is PIVOT?
&lt;/h2&gt;

&lt;p&gt;You can rotate your SQL table using pivot function where you transform your row values into columns. Here you can turn unique values from one column into multiple columns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-unpivot"&gt;
  &lt;/a&gt;
  What is UNPIVOT?
&lt;/h2&gt;

&lt;p&gt;While PIVOT turns values from one column into multiple columns, UNPIVOT turns multiple column into row values of single column.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;These two functions of SQL is generally used to reorganize data, so that, the data can be viewed more efficiently and is more understandable than before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#pivot"&gt;
  &lt;/a&gt;
  PIVOT
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;PIVOT&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt; 
   &lt;span class="n"&gt;AggregateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ColumnToBeAggregated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;PivotColumn&lt;/span&gt; 
   &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PivotColumnValues1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PivotColumnValues2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#unpivot"&gt;
  &lt;/a&gt;
  UNPIVOT
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;UNPIVOT&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt; 
   &lt;span class="n"&gt;AggregateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ColumnToBeAggregated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;PivotColumn&lt;/span&gt; 
   &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PivotColumnValues1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PivotColumnValues2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h2&gt;

&lt;p&gt;So, a table that looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F22OA9BX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl49twnd8nmwsot68mh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F22OA9BX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl49twnd8nmwsot68mh2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can be converted into something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8leqU_6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50u81prljk6c3xhqn9nj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8leqU_6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50u81prljk6c3xhqn9nj.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With this piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;BRAND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TABLET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MOBILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;BRAND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PRODUCT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PRICE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;TECHPRODUCTS&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PIVOT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PRICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'TABLET'&lt;/span&gt; &lt;span class="n"&gt;TABLET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'MOBILE'&lt;/span&gt; &lt;span class="n"&gt;MOBILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'OS'&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;BRAND&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#if-you-want-to-learn-more-about-pivot-and-unpivot-please-refer"&gt;
  &lt;/a&gt;
  If you want to learn more about PIVOT and UNPIVOT please refer:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://blogs.oracle.com/sql/how-to-convert-rows-to-columns-and-back-again-with-sql-aka-pivot-and-unpivot"&gt;https://blogs.oracle.com/sql/how-to-convert-rows-to-columns-and-back-again-with-sql-aka-pivot-and-unpivot&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
    </item>
    <item>
      <title>#30DaysofAppwrite</title>
      <author>kodumbeats</author>
      <pubDate>Sat, 01 May 2021 12:15:15 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-4hh</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-4hh</guid>
      <description>&lt;p&gt;Let's face it: building modern apps is hard - building secure, performant, and scalable apps is even harder. We're building &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; to make app development easier and more fun, and we invite you to join us for &lt;code&gt;#30DaysofAppwrite&lt;/code&gt;, a month-long event where we all learn and build with Appwrite together. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: We'll be showing off what Appwrite can do in a series of blogposts. If you build with us, we have some cool prizes to give to the best projects at the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#appwhat"&gt;
  &lt;/a&gt;
  Appwhat?
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source Backend-as-a-Service (BaaS) that provides developers with everything they need to build secure, modern apps fast. Packaged as a set of Docker microservices, Appwrite gives devs a suite of &lt;strong&gt;easy-to-use&lt;/strong&gt; APIs, SDKs, tools, and an admin UI to &lt;em&gt;build features&lt;/em&gt;, not write boilerplate. Local development is as easy as &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We've designed Appwrite to be both cross-platform and technology-agnostic, meaning it can run on any operating system, coding language, framework, or platform. Use as much or as little of Appwrite as you need, where you need it - we have &lt;a href="https://appwrite.io/docs/sdks"&gt;SDKs available&lt;/a&gt; in multiple programming languages, all generated from the same &lt;a href="https://github.com/appwrite/sdk-generator"&gt;source code&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;With introductions out of the way, onto the main event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#30daysofappwrite"&gt;
  &lt;/a&gt;
  #30DaysofAppwrite
&lt;/h2&gt;

&lt;p&gt;Over the next 30 days, we're bringing the entire team together to build a &lt;a href="https://medium.com"&gt;Medium.com&lt;/a&gt; clone with Svelte.js and Appwrite. Every day, we'll post a blog that takes a deeper look into the different services needed for our demo blog: user authentication, data storage, file uploads, cloud functions, and more! A detailed timeline of the month-long event can be found &lt;a href="https://30days.appwrite.io"&gt;on our website&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We've built demo Appwrite-powered apps using many popular web frameworks - check out the growing list on &lt;a href="https://github.com/appwrite/awesome-appwrite#showcase-built-with-appwrite-"&gt;our awesome GitHub repository&lt;/a&gt; to get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the end of the month, we will have created a comprehensive, step-by-step guide on building apps in Appwrite (and a blog site, too). For those building apps alongside us during #30DaysofAppwrite, we want to see your progress! Share your work with us on Twitter, Dev.to, or LinkedIn with the hashtag &lt;code&gt;#30DaysofAppwrite&lt;/code&gt;, or in the &lt;code&gt;30DaysofAppwrite&lt;/code&gt; channel on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-with-us"&gt;
  &lt;/a&gt;
  Building With Us
&lt;/h2&gt;

&lt;p&gt;If you build something cool as a part of &lt;code&gt;#30DaysofAppwrite&lt;/code&gt;, we want to show our appreciation! From now until June 5th, build and submit your coolest projects powered by Appwrite. Afterwards, we will pick the winners for some awesome prizes! To participate, showcase your projects by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing on social media with &lt;code&gt;#30DaysofAppwrite&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Opening a Pull Request on &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;appwrite/awesome-appwrite&lt;/a&gt; with your work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Submissions will be eligible for an Appwrite T-shirt and Stickers. The top &lt;code&gt;#30DaysofAppwrite&lt;/code&gt; projects will be rewarded with Raspberry Pi 4 kits! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handy-links"&gt;
  &lt;/a&gt;
  Handy Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://30days.appwrite.io"&gt;#30DaysofAppwrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're a passionate open-sourcerer and love devtools like we do, &lt;a href="https://appwrite.io/company/careers"&gt;we're hiring&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>30daysofappwrite</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
    </item>
  </channel>
</rss>
