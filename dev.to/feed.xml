<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automating mobile application deployments using Fastlane and CI/CD tools</title>
      <author>Jeiman Jeya</author>
      <pubDate>Mon, 03 May 2021 14:00:21 +0000</pubDate>
      <link>https://dev.to/jeiman/automating-mobile-application-deployments-using-fastlane-and-ci-cd-tools-2iae</link>
      <guid>https://dev.to/jeiman/automating-mobile-application-deployments-using-fastlane-and-ci-cd-tools-2iae</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;




&lt;p&gt;Engineering teams these days find it troublesome to build, test and deploy their mobile application changes locally without having to maintain the tools required for it. There is a lot of maintenance involved as you need to keep track of what versions of these tools have been installed to avoid compatibility issues when you’re building the application bundles, especially hybrid apps built on React Native.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-cure"&gt;
  &lt;/a&gt;
  The Cure
&lt;/h1&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hi698oGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odbydamevv0fi94wkj2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hi698oGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odbydamevv0fi94wkj2h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://fastlane.tools/"&gt;fastlane&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, an automation tool that aids in handling all of the tedious tasks so you don't have to. It's by far, the easiest way to build and release your mobile apps.&lt;/p&gt;

&lt;p&gt;fastlane can easily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distribute beta builds to your testers&lt;/li&gt;
&lt;li&gt;Publish a new release to the app store in seconds&lt;/li&gt;
&lt;li&gt;Reliably code sign your application - alleviates all of your headaches&lt;/li&gt;
&lt;li&gt;Reliably maintain your provisioning profiles and application certificates in a Git repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h1&gt;




&lt;p&gt;All actions in fastlane are written into &lt;em&gt;lanes&lt;/em&gt;. Defining lanes are easy. Think of them as functions in any programming language of your choosing. You define all of your actions within that lane.&lt;/p&gt;

&lt;p&gt;An example of a &lt;em&gt;lane&lt;/em&gt; is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lane&lt;/span&gt; &lt;span class="ss"&gt;:beta&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;increment_build_number&lt;/span&gt;
  &lt;span class="n"&gt;build_app&lt;/span&gt;
  &lt;span class="n"&gt;upload_to_testflight&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when it comes to executing that lane, all you do is run &lt;code&gt;fastlane beta&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation-amp-setup"&gt;
  &lt;/a&gt;
  Installation &amp;amp; Setup
&lt;/h1&gt;




&lt;p&gt;In this article, we will look at setting up a fastlane script to build, sign and deploy an iOS application to Testflight.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;As with most projects, you need to perform the initial project setup to support building your application, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing your project dependencies&lt;/li&gt;
&lt;li&gt;Install XCode and Android Studio&lt;/li&gt;
&lt;li&gt;Install Java SDK&lt;/li&gt;
&lt;li&gt;Setup git repository for Android and iOS certificates - &lt;em&gt;will be explained later in the article&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fastlane-folder-structure"&gt;
  &lt;/a&gt;
  fastlane folder structure
&lt;/h2&gt;

&lt;p&gt;In ideal cases, you would have an Android application project and an iOS application project, both hosted in the same code repository as your project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;projectFolder/
    app/
    scripts/
    ios/
        fastlane/
            ....
  android/
        fastlane/
            ....
    package.json
    .gitignore
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, you will want to initialise the fastlane folder within the respective &lt;code&gt;android&lt;/code&gt; and &lt;code&gt;ios&lt;/code&gt; project sub-directories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install fastlane 

&lt;ul&gt;
&lt;li&gt;via Homebrew (&lt;code&gt;brew install fastlane&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;via RubyGems (&lt;code&gt;sudo gem install fastlane&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigate your terminal to your respective &lt;code&gt;android&lt;/code&gt; and &lt;code&gt;ios&lt;/code&gt; project directory and run &lt;code&gt;fastlane init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You should have a folder structure that is similar to the one below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fastlane/
    Fastfile
    Appfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most interesting file is &lt;code&gt;fastlane/Fastfile&lt;/code&gt;, which contains all the information that is needed to distribute your app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inside your &lt;code&gt;Fastfile&lt;/code&gt;, you can start writing lanes:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lane&lt;/span&gt; &lt;span class="ss"&gt;:my_lane&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# Whatever actions you like go in here.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can start adding in actions into your lanes. fastlane actions can be found &lt;a href="https://docs.fastlane.tools/actions/"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the following file structure to your &lt;code&gt;Fastfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;default_platform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ios&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# You may use Ruby functions to write custom actions for your app deployment&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="ss"&gt;:ios&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Building the IPA file only"&lt;/span&gt;
      &lt;span class="n"&gt;lane&lt;/span&gt; &lt;span class="ss"&gt;:build_ios_app_ipa&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;app_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"com.appbundle.id"&lt;/span&gt;
        &lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"AppSchemeName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;default_platform(:ios)&lt;/code&gt; - Initialise your Fastfile file with a default platform&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;platform :ios do&lt;/code&gt; - Add all actions under a platform&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From 5 to 6, it will inform fastlane that this particular Fastfile is purely for iOS operations. So instead of running the command &lt;code&gt;fastlane &amp;lt;lane_name&amp;gt;&lt;/code&gt;, you will actually run &lt;code&gt;fastlane ios &amp;lt;lane_name&amp;gt;&lt;/code&gt;. Therefore, anything parked under &lt;code&gt;platform :ios do&lt;/code&gt; will be executed when lanes are invoked in your terminal.&lt;/p&gt;

&lt;p&gt;If you are well-versed in Ruby, you may write your own Ruby functions to help you write custom actions that you require for further flexibility, especially when it comes to building several apps with different environments across your organisation. &lt;/p&gt;

&lt;p&gt;fastlane will identify them as an action regardless due to the fact that fastlane is written in &lt;em&gt;Ruby&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article, we will follow writing the actions using a Ruby function. This is so we can promote action re-usability across other lanes deployments.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#action-steps"&gt;
  &lt;/a&gt;
  Action Steps
&lt;/h1&gt;




&lt;p&gt;Before we start writing our functionality in the lanes, we first list down our action steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Setup API Key for App Store Connect (&lt;code&gt;app_store_connect_api_key&lt;/code&gt;)&lt;/strong&gt; - This will allow fastlane to connect to your App Store to perform other actions that requires user authentication&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Setup CI (&lt;code&gt;setup_ci&lt;/code&gt;)&lt;/strong&gt; - This will setup a temporary keychain to work on your CI pipeline of your choice&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create and sync provisioning profiles and certificates (&lt;code&gt;match&lt;/code&gt;)&lt;/strong&gt; - This will help us maintain our provisioning profiles and certificates across your teams&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Update code signing settings (&lt;code&gt;update_code_signing_settings&lt;/code&gt;)&lt;/strong&gt; - This is to update the code signing identities to match your profile name and app bundle identifier&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increment your app build number (&lt;code&gt;increment_build_number&lt;/code&gt;)&lt;/strong&gt; - This will automate your application build number by retrieving the latest Testflight build number and incrementing the value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build the app (&lt;code&gt;build_app&lt;/code&gt;)&lt;/strong&gt; - This will build the app for us and generate a binary (IPA) file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Upload your binary to Testflight (&lt;code&gt;upload_to_testflight&lt;/code&gt;)&lt;/strong&gt; - This will automate the process of uploading the binary file to Testflight and informing your testers accordingly&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setup-your-app-store-connect-api-key"&gt;
  &lt;/a&gt;
  Step 1: Setup your App Store Connect API key
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Visit the following &lt;a href="https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api"&gt;page&lt;/a&gt;. It will provide you a step-by-step process in generating an API key&lt;/li&gt;
&lt;li&gt;Once you have generated a key, take note of:

&lt;ul&gt;
&lt;li&gt;Issuer ID&lt;/li&gt;
&lt;li&gt;Key ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download the generated API key - A &lt;code&gt;.p8&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Store it in a secure location in which you can easily access them. Avoid storing them in the same repository as anyone in your organisation will have access to the company's Apple account. 

&lt;ul&gt;
&lt;li&gt;In this article, we are storing them in another Git repository with limited read and write scopes to specific engineers within our organisation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setup-the-fastlane-script"&gt;
  &lt;/a&gt;
  Step 2: Setup the fastlane script
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Setup your App Store API Key to generate a hash used for JWT authorization&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_api_key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="s2"&gt;"if [ -d &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;appstoreapi&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; ]; then echo 'Folder exist, executing next step'; else git clone &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'APPSTORE_API_GIT_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; appstoreapi; fi"&lt;/span&gt;
  &lt;span class="n"&gt;app_store_connect_api_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;key_id: &lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'APPSTORE_KEY_ID'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;issuer_id: &lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'APPSTORE_ISSUER_ID'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;key_filepath: &lt;/span&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pwd&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/appstoreapi/AuthKey_xxx.p8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, I am cloning a Git repository which contains my App Store Connect API key, followed by utilising the &lt;code&gt;app_store_connect_api_key&lt;/code&gt; action from fastlane. It takes in several parameters, however, there are 3 vital parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;key_id&lt;/code&gt; - The Key ID from which you took note when you generated the API key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;issuer_id&lt;/code&gt; - The Issuer ID from which you took note when you generated the API key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;key_filepath&lt;/code&gt; - The file path to your &lt;code&gt;.p8&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This step will generate a hash that will be used to authenticate the App Store using JWT.&lt;/p&gt;

&lt;p&gt;I would highly recommend storing sensitive credentials or URLs and access them from an Environment Variable (&lt;code&gt;.env&lt;/code&gt;) file in the same project folder - &lt;code&gt;fastlane/.env&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have prepared the file, you can easily access any Environment Variable by simply passing in &lt;code&gt;ENV['ENV_NAME']&lt;/code&gt; into the Fastfile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Define a Ruby function with 2 arguments&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bundle_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within this function, we specify the action steps we mentioned above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bundle_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;setup_api_key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Import the setup_api_key function&lt;/span&gt;
    &lt;span class="n"&gt;setup_ci&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Uses fastlane action to create a temporary keychain access on a CI pipeline&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Utilise the &lt;code&gt;match&lt;/code&gt; action from fastlane&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://docs.fastlane.tools/actions/match/"&gt;match&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is a fastlane action that allows you to easily sync your certificates and provisioning profiles. It takes a new approach to iOS and macOS code signing, where you share one code signing identity across your engineering team to simplify the setup and prevent code signing issues. The foundation of &lt;em&gt;match&lt;/em&gt; was built using the implementation of &lt;a href="https://codesigning.guide/"&gt;codesigning.guide concept&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can store your code signing identities in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git repository&lt;/li&gt;
&lt;li&gt;Google Cloud&lt;/li&gt;
&lt;li&gt;Amazon S3 bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we have chosen to store it a Git repository. However, with the case of storing in a Git repository, you would need to provide a form of basic authorization in order for match to access and clone your repository.&lt;/p&gt;

&lt;p&gt;Whichever Git provider you choose (GitHub, Bitbucket, Gitlab or Azure DevOps), you would need to setup a Personal Access Token (PAT), which fastlane will use to clone repository and sync your code signing identities.&lt;/p&gt;

&lt;p&gt;In your Fastfile, you will need to encode your PAT with a Base64 encryption&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;authorization_token_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'GITHUB_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;basic_authorization_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strict_encode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorization_token_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;basic_authorization_token&lt;/code&gt; variable will be used in setting up the match implementation below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;git_url: &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;git_url&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;git_basic_authorization: &lt;/span&gt;&lt;span class="n"&gt;basic_authorization_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;readonly: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="s2"&gt;"appstore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;app_identifier: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;bundle_id&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the snippet above, this is a very simple implementation. Take note on the &lt;code&gt;readonly&lt;/code&gt; parameter. This is crucial in creating and syncing your profiles and certs with your Apple Developer account. If you set &lt;code&gt;readonly&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, you will allow match to automatically sync and create new profiles and certs, should it deem your existing certs and profiles expired or corrupted. Once it has provisioned the profiles, you can set &lt;code&gt;readonly&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. This is to avoid egde cases where it might accidentally create new certs and profiles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Update code signing identities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step is mainly used to update the Xcode settings on a CI pipeline due to its default behaviour of selecting a default cert and profile from the Mac OS agent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;update_code_signing_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;use_automatic_signing: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="s2"&gt;"../ios/AppName.xcodeproj"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;code_sign_identity: &lt;/span&gt;&lt;span class="s2"&gt;"iPhone Distribution"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;profile_name: &lt;/span&gt;&lt;span class="s2"&gt;"match AppStore com.appbundle.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;bundle_identifier: &lt;/span&gt;&lt;span class="s2"&gt;"com.appbundle.id"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above snippet, you can retrieve your &lt;code&gt;profile_name&lt;/code&gt; and &lt;code&gt;bundle_identifier&lt;/code&gt; from your Apple Developer account or taking note of them from the match step once it has been executed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Increment Application build number&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We simply increment the number by accessing your latest testflight build number and incrementing the value with 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;increment_build_number&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="ss"&gt;build_number: &lt;/span&gt;&lt;span class="n"&gt;latest_testflight_build_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"BUILD_NUMBER: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lane_context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;SharedValues&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BUILD_NUMBER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;puts&lt;/code&gt; command will print out the Build number in the console, which is shared across the lane context.&lt;/p&gt;

&lt;p&gt;You may have other app build versioning models than the one mentioned in this article. Increment the build number however you see fit to your project needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Build the application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step will involve building your application to generate a binary (APK) file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;build_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;workspace: &lt;/span&gt;&lt;span class="s2"&gt;"../ios/AppName.xcworkspace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;export_xcargs: &lt;/span&gt;&lt;span class="s2"&gt;"-allowProvisioningUpdates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;scheme: &lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;clean: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;silent: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;sdk: &lt;/span&gt;&lt;span class="s2"&gt;"iphoneos"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"IPA: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;lane_context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;SharedValues&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;IPA_OUTPUT_PATH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;build_app&lt;/code&gt; action is provided by fastlane.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;puts&lt;/code&gt; command will print out the file path location of the IPA file in which you can use to manually upload to Testflight.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.  Upload the binary file to Testflight&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step will involve uploading your binary file to your Testflight account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;app_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"com.appbunde.id"&lt;/span&gt;
&lt;span class="n"&gt;upload_to_testflight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;app_identifier: &lt;/span&gt;&lt;span class="n"&gt;app_identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;upload_to_testflight&lt;/code&gt; is an action provided by fastlane.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-them-all-together"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Putting them all together&lt;/strong&gt;
&lt;/h3&gt;




&lt;p&gt;The final lane should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Build and push a new build to TestFlight"&lt;/span&gt;
  &lt;span class="n"&gt;lane&lt;/span&gt; &lt;span class="ss"&gt;:release_build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;app_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"com.appbundle.id"&lt;/span&gt;
    &lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"AppSchemeName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# The custom function we wrote earlier&lt;/span&gt;
    &lt;span class="n"&gt;upload_to_testflight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;app_identifier: &lt;/span&gt;&lt;span class="n"&gt;app_identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you execute &lt;code&gt;fastlane ios release_build&lt;/code&gt; in your terminal, it will operate based on the aforementioned steps above. &lt;/p&gt;

&lt;p&gt;As you can see, we utilised a Ruby function to group all common operations under the same roof so is to ensure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code re-usability&lt;/li&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#integration-with-cicd-tools"&gt;
  &lt;/a&gt;
  Integration with CI/CD tools
&lt;/h1&gt;

&lt;p&gt;With the fastlane scripts, you can easily integrate it with any CI/CD tools of your choosing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Actions&lt;/li&gt;
&lt;li&gt;Gitlab CI&lt;/li&gt;
&lt;li&gt;Azure Devops&lt;/li&gt;
&lt;li&gt;Bitbucket Pipelines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When setting up your pre-requisite steps in your pipeline YAML file, you can simply include a bash script that executes your fastlane script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;

&lt;span class="n"&gt;fastlane&lt;/span&gt; &lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="n"&gt;release_build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above will execute your fastlane script by following the aforementioned steps above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;fastlane is a powerful tool that helps streamline your build process across your organisation. It can be used along side your existing CI/CD pipelines or as a standalone pipeline script to be used on your local machines or custom pipeline tools such as Buildkite. It would require additional steps such as, cloning the repository and checking out branches, however, all readily available from fastlane as actions.&lt;/p&gt;

&lt;p&gt;Spend some time reading through the documentation as it contains &lt;a href="https://docs.fastlane.tools/actions/"&gt;a lot of actions&lt;/a&gt; out of the box that will prove useful for your engineering teams (&lt;a href="https://docs.fastlane.tools/actions/match/"&gt;match&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/pilot/"&gt;pilot&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/cert/"&gt;cert&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/sigh/"&gt;sigh&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/appium/"&gt;appium&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/xctool/"&gt;xctool&lt;/a&gt;, &lt;a href="https://docs.fastlane.tools/actions/supply/"&gt;supply&lt;/a&gt;, and &lt;a href="https://docs.fastlane.tools/actions/"&gt;many more&lt;/a&gt;) . Furthermore, they provide an &lt;a href="https://docs.fastlane.tools/plugins/available-plugins/"&gt;extensive list of plugins&lt;/a&gt; for third-party integrations such as Firebase, App Center, Yarn, Android Versioning, Dropbox, Slack Upload, S3, Bugsnag and many more. You can supercharge your fastlane scripts by coupling it with a CI/CD tool, such as GitHub Actions, Bitbucket Pipelines or Azure DevOps. The sky's the limit!&lt;/p&gt;

</description>
      <category>fastlane</category>
      <category>devops</category>
      <category>reactnative</category>
      <category>tooling</category>
    </item>
    <item>
      <title>#30DaysofAppwrite : Appwrite’s building blocks</title>
      <author>Christy Jacob</author>
      <pubDate>Mon, 03 May 2021 13:44:32 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-appwrite-s-building-blocks-1936</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-appwrite-s-building-blocks-1936</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month-long event focussed on giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a full-featured Medium Clone to demonstrate how these concepts can be applied when building a real-world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices-of-appwrite"&gt;
  &lt;/a&gt;
  Microservices of Appwrite
&lt;/h2&gt;

&lt;p&gt;Welcome to Day 3 👋 &lt;br&gt;
Today, we take a deep dive into Appwrite's technology stack and learn what goes on under the hood. We will cover &lt;a href="https://github.com/appwrite/appwrite/blob/master/docker-compose.yml"&gt;Appwrite's docker-compose file&lt;/a&gt; and go through all the containers that Appwrite uses. Appwrite was designed to work in a Cloud Native environment, and in keeping this spirit alive,  Appwrite is conveniently packaged as a set of docker containers (17 to be precise!). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8iUj3Sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/appwrite/appwrite/master/docs/specs/overview.drawio.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8iUj3Sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/appwrite/appwrite/master/docs/specs/overview.drawio.svg" alt="Appwrite Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an overview of Appwrite's architecture, and we will talk about most of these components in the upcoming section. Each container in Appwrite handles a single microservice on its own. Since they've been containerized, each service can scale independently of any of the other microservices.&lt;/p&gt;

&lt;p&gt;Currently, all of the Appwrite microservices communicate over the TCP protocol over &lt;a href="https://docs.docker.com/network/bridge/"&gt;a private network&lt;/a&gt;. You should be aware not to expose any of the services to the public-facing network, besides the public port 80 and 443, which, by default, are used to expose the Appwrite HTTP API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appwrite"&gt;
  &lt;/a&gt;
  Appwrite
&lt;/h2&gt;

&lt;p&gt;This is the main &lt;a href="https://gist.github.com/eldadfux/977869ff6bdd7312adfd4e629ee15cc5#file-docker-compose-yml-L29"&gt;Appwrite container&lt;/a&gt; and this is where all the fancy things happen! This container is built off a Dockerfile hosted &lt;a href="https://github.com/appwrite/appwrite/blob/master/Dockerfile"&gt;here&lt;/a&gt;. The main Appwrite container implements the Appwrite API protocols, handles authentication, authorization, and rate-limiting. This microservice is completely stateless and can be easily replicated for scalability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trafeik"&gt;
  &lt;/a&gt;
  Trafeik
&lt;/h2&gt;

&lt;p&gt;Traefik is a modern reverse proxy and load balancer written in Go that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically. We use Traefik as the main entry point for the different Appwrite APIs. Traefik is also responsible for serving Appwrite's auto-generated SSL certificates. This microservice is completely stateless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redis"&gt;
  &lt;/a&gt;
  Redis
&lt;/h2&gt;

&lt;p&gt;Appwrite uses Redis to serve three main functions. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Caching&lt;/strong&gt;: Appwrite uses Redis in-memory cache to fetch database queries faster.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pub/Sub&lt;/strong&gt;: Appwrite uses Redis with Resque as a pub/sub mechanism to transmit messages between the Appwrite API and the different workers. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scheduled tasks&lt;/strong&gt;: Appwrite uses Redis to store and trigger future tasks using the schedule container.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appwrites-workers"&gt;
  &lt;/a&gt;
  Appwrite's Workers
&lt;/h2&gt;

&lt;p&gt;There are a lot of asynchronous tasks that need to happen in Appwrite - a good example is recording usage stats for the Appwrite API. &lt;/p&gt;

&lt;p&gt;We use an internal pub/sub system - &lt;a href="https://github.com/resque/php-resque"&gt;Resque&lt;/a&gt; - to accumulate all these tasks. The respective workers consume these tasks and perform the executions independently. We have eight message queues and eight workers paired with them.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#audits-worker"&gt;
  &lt;/a&gt;
  Audits worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/audits.php"&gt;Audits worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-audits&lt;/code&gt; queue. Appwrite has a defined set of system events that can be found &lt;a href="https://appwrite.io/docs/webhooks#events"&gt;here&lt;/a&gt;. When these events occur, the Audits worker logs them into &lt;code&gt;mariadb&lt;/code&gt;. The Audits worker makes use of the &lt;a href="https://github.com/utopia-php/audit"&gt;utopia-php/audit&lt;/a&gt; library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#certificates-worker"&gt;
  &lt;/a&gt;
  Certificates Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/certificates.php"&gt;Certificates worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-certificates&lt;/code&gt; queue. The certificate worker uses &lt;code&gt;certbot&lt;/code&gt; from Let's Encrypt to create and periodically renew SSL certificates. We will be covering SSL certificates and more about the certificates worker in our upcoming article. So stay tuned to learn more. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#deletes-worker"&gt;
  &lt;/a&gt;
  Deletes Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/deletes.php"&gt;Deletes worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-deletes&lt;/code&gt; queue. As the name suggests, it performs deletions in the Appwrite Database. Delete requests for Documents, Users, Projects, Functions, etc. are handled by the Deletes Worker. In the present state, the deletes worker is triggered on certain API requests, as well as by the Maintenance worker. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#functions-worker"&gt;
  &lt;/a&gt;
  Functions Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/functions.php"&gt;Functions worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-functions&lt;/code&gt; queue and handles all of the tasks related to Appwrite's Cloud Functions. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud functions in Appwrite can be triggered in 3 ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs/webhooks#events"&gt;Asynchronously using Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;Using a CRON Schedule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs/client/functions?sdk=web#functionsCreateExecution"&gt;Using the Appwrite HTTP API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Functions worker does all the heavy lifting required to get Cloud Functions up and running. From pulling Docker images for the respective environments on startup, to managing and running containers, and responding to errors, the functions worker takes care of it all! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#mails-worker"&gt;
  &lt;/a&gt;
  Mails Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/mails.php"&gt;Mails worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-mails&lt;/code&gt; queue and is responsible for only one function: sending emails! It simply gathers information and uses &lt;a href="https://github.com/PHPMailer/PHPMailer"&gt;PHPMailer&lt;/a&gt; to send them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#tasks-worker"&gt;
  &lt;/a&gt;
  Tasks Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/tasks.php"&gt;Tasks worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-tasks&lt;/code&gt; queue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Appwrite's Tasks API allows you to schedule any repeating tasks your app might need to run in the background. Each task is created by defining a CRON schedule and a target HTTP endpoint.&lt;/p&gt;

&lt;p&gt;Each task can define any HTTP endpoint with any HTTP method, headers, or basic HTTP authentication. Inside your Appwrite console, you can view all your tasks, their current statuses, previous and next runtime, and a response log to view the result of previous executions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#usage-worker"&gt;
  &lt;/a&gt;
  Usage Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/usage.php"&gt;Usage worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-usage&lt;/code&gt; queue and makes use of &lt;code&gt;statsd&lt;/code&gt; to send messages to &lt;code&gt;telegraf&lt;/code&gt; over a UDP connection. The usage stats are then logged in &lt;code&gt;influxDB&lt;/code&gt;, including function execution stats, the total number of requests, storage stats, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#webhooks-worker"&gt;
  &lt;/a&gt;
  Webhooks Worker
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/workers/webhooks.php"&gt;Webhooks worker&lt;/a&gt; consumes messages from the &lt;code&gt;v1-webhooks&lt;/code&gt; queue and triggers the webhooks that were registered in the Appwrite console. The worker checks for the event that occurred and fires the corresponding webhook by making a CURL request.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webhooks allow you to build or set up integrations that subscribe to certain &lt;a href="https://appwrite.io/docs/webhooks#events"&gt;events&lt;/a&gt; on Appwrite. When one of those events is triggered, we send an HTTP POST payload to the webhook's configured URL. Webhooks can be used to purge the cache from CDN, calculate data or send a Slack notification. You're only limited by your imagination.&lt;/p&gt;

&lt;p&gt;Additionally, we have two more workers that delegate tasks to other workers. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#maintenance-worker"&gt;
  &lt;/a&gt;
  Maintenance Worker
&lt;/h4&gt;

&lt;p&gt;The maintenance worker corresponds to the &lt;code&gt;appwrite-maintenance&lt;/code&gt; service in the docker-compose file. The Maintenance worker lies &lt;a href="https://github.com/appwrite/appwrite/blob/master/app/tasks/maintenance.php"&gt;here&lt;/a&gt; and performs some housekeeping tasks so your Appwrite server does not blow up over time! In its current state, the maintenance worker delegates deletion tasks to &lt;code&gt;appwrite-worker-deletes&lt;/code&gt; which then performs the actual deletion. We use the Maintenance worker to schedule three kinds of deletions:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleaning up Abuse logs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleaning up Audit Logs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleaning up Execution Logs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#schedules-worker"&gt;
  &lt;/a&gt;
  Schedules Worker
&lt;/h4&gt;

&lt;p&gt;The Schedules worker corresponds to the &lt;code&gt;appwrite-schedule&lt;/code&gt; service in the docker-compose file. The Schedules worker uses a &lt;a href="https://github.com/resque/resque"&gt;Resque Scheduler&lt;/a&gt; under the hood and handles the scheduling of CRON jobs across Appwrite. This includes CRON jobs from the Tasks API, Webhooks API, and the functions API. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mariadb"&gt;
  &lt;/a&gt;
  Mariadb
&lt;/h2&gt;

&lt;p&gt;Appwrite uses MariaDB as the default database for project collections, documents, and all other metadata. Appwrite is agnostic to the database you use under the hood and support for more databases like &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;, &lt;a href="https://www.cockroachlabs.com/"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt; and &lt;a href="https://www.mongodb.com/2"&gt;MongoDB&lt;/a&gt; is currently under active development! 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clamav"&gt;
  &lt;/a&gt;
  ClamAV
&lt;/h2&gt;

&lt;p&gt;ClamAV is a TCP Anti-virus server responsible for scanning all user uploads to the Appwrite storage. The ClamAV microservice is optional and can be disabled using Appwrite environment variables. Starting with Appwrite version 0.8, this functionality is disabled by default to save memory on smaller setups. If you are having issues with excessive memory utilization, you can learn to disable it &lt;a href="https://dev.to/appwrite/learn-how-to-disable-clamav-in-your-appwrite-stack-and-reduce-memory-usage-2e37"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#influxdb"&gt;
  &lt;/a&gt;
  Influxdb
&lt;/h2&gt;

&lt;p&gt;Appwrite uses InfluxDB for storing your projects' API usage metrics and stats. This is the engine used for generating your API usage graphs and handling time-series data. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#telegraf"&gt;
  &lt;/a&gt;
  Telegraf
&lt;/h2&gt;

&lt;p&gt;Telegraf is a plugin-driven server agent for collecting and sending metrics and events from multiple sources to multiple destinations. Telegraf kind of protects InfluxDB by aggregating the data before sending it to the database. Telegraf operates on the UDP protocol which makes data transfer blazing fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write-up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens, or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>70 Design Resources for Developers</title>
      <author>Moemin Mamdouh 👨‍💻</author>
      <pubDate>Mon, 03 May 2021 13:38:20 +0000</pubDate>
      <link>https://dev.to/codewell/70-design-resources-for-developers-34fm</link>
      <guid>https://dev.to/codewell/70-design-resources-for-developers-34fm</guid>
      <description>&lt;p&gt;Be sure to subscribe to &lt;a href="http://codewell.substack.com/subscribe"&gt;Codewell's Newsletter&lt;/a&gt; or &lt;a href="http://twitter.com/codewelldot"&gt;follow us on Twitter&lt;/a&gt; for more awesome resources like this!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://colorhunt.co"&gt;ColorHunt&lt;/a&gt;: Free and open platform for color inspiration with thousands of trendy hand-picked color palettes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://coolors.co"&gt;Coolors&lt;/a&gt;: Create the perfect palette or get inspired by thousands of beautiful color schemes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://colorsinspo.com"&gt;Color Inspo&lt;/a&gt;: Thousands of beautiful color palettes you can use it directly by one click.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.grabient.com/"&gt;Grabient&lt;/a&gt;: Beautiful and simple UI for generating web gradients.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://khroma.co/"&gt;Khroma&lt;/a&gt;:Khroma uses AI to learn which colors you like and creates limitless palettes for you to discover, search, and save.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://pigment.shapefactory.co/"&gt;Pigment&lt;/a&gt;:A unique way to generate fresh and vibrant colors based on lighting and pigment, instead of math. Find a beautiful, free color palette in seconds to kick off your next project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  Illustrations
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;: Easily create and customize stunning illustrations with collections made by artists across the globe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.openpeeps.com/"&gt;Open Peeps&lt;/a&gt;: A hand-drawn illustration library.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://avataaars.com/"&gt;Avataaars&lt;/a&gt;: Create avatar illustrations in Sketch App with this free library. Combine clothes, hair, emotions, accesories, and colors. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.opendoodles.com/"&gt;Open Doodles&lt;/a&gt;: A Free Set of Sketchy Illustrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lukaszadam.com/illustrations"&gt;Lukaszadam&lt;/a&gt;: MIT licensed SVG illustration images in different shapes &amp;amp; styles. Completely free for commercial projects - no attribution required. Open Source Illustrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pixeltrue.com/free-illustrations"&gt;Pixeltrue&lt;/a&gt;: Free SVG Illustrations AND Lottie Animations are available for free for personal and commercial use (MIT License).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.uplabs.com/"&gt;Uplabs&lt;/a&gt;: UpLabs is the place to find high-quality design resources for designers, creative agencies and developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.humaaans.com/"&gt;Humaaans&lt;/a&gt;: Mix-&amp;amp;-match illustrations of people with a design library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://undraw.co"&gt;unDraw&lt;/a&gt;: Open-source illustrations for any idea you can imagine and create.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.karthiksrinivas.in/charco"&gt;Charco&lt;/a&gt;: A set of 16 handcrafted illustrations for your web &amp;amp; app projects. This set includes categories like 404 error, no internet connection, no service, fatal error, page not found, something went wrong, under construction and many more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://icons8.com/illustrations"&gt;Ouch!&lt;/a&gt;: Ouch helps creators unable to draw overcome the lack of quality graphics. Download free PNG and SVG illustrations from top Dribbble artists to enhance your product.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#learning-design"&gt;
  &lt;/a&gt;
  Learning Design
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://growth.design/case-studies"&gt;Growth Design&lt;/a&gt;: Growth &amp;amp; UX case studies in a comic book format. Improve your product skills with real-world examples.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.designbetter.co/"&gt;Design Better&lt;/a&gt;: DesignBetter.Co is the essential guide to the best design practices from top design experts. Learn how to build a world-class design organization and more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.reallygoodux.io/"&gt;ReallyGoodUX&lt;/a&gt;: Screenshots and examples of great UX from real mobile and web products. Discover the best UX examples—including onboarding tours and walkthroughs, new feature and rebrand announcements, UX copywriting, signup flows &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lawsofux.com/"&gt;Laws Of UX&lt;/a&gt;: A collection of the maxims and principles that designers can consider when building user interfaces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.checklist.design/"&gt;Checklist Design&lt;/a&gt;: A collection of the best design practices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nngroup.com/"&gt;NN/g&lt;/a&gt;: Provides research-based UX guidance, by studying users around the world.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://designerup.co/"&gt;DesignerUp&lt;/a&gt;: An ecosystem of product design resources to help you become a more mindful designer and create better products.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mobbin.design/"&gt;Mobbin&lt;/a&gt;: A hand-picked collection of the latest mobile design patterns from apps that reflect the best in design. Get inspiration from over 250 iOS apps and 25,000 patterns (screenshots from iPhone 12) available on the platform. Sign up to save your favorite patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://onepagelove.com/"&gt;Onepagelove&lt;/a&gt;: One Page website design gallery showcasing the best Single Page websites, templates and resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.landingfolio.com/"&gt;Landingfolio&lt;/a&gt;: Landingfolio features the best landing page inspiration, templates, resources and examples on the web. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://land-book.com/"&gt;Landbook&lt;/a&gt;: Design gallery with the best and most carefully collected websites. We help creatives find inspiration &amp;amp; motivation to do rad stuff.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#images-amp-videos"&gt;
  &lt;/a&gt;
  Images &amp;amp; Videos
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mixkit.co/"&gt;Mixkit&lt;/a&gt;: Awesome Stock Video Clips, Stock Music, Sound Effects &amp;amp; Video Templates. All available for free!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;: Free stock photos you can use everywhere. ✓ Free for commercial use ✓ No attribution required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;: The internet’s source of freely-usable images. Powered by creators everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;: Browse thousands of beautiful copyright-free images. All our pictures are free to download for personal and commercial use, no attribution required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://coverr.co/"&gt;Coverr&lt;/a&gt;: Beautiful Free Stock Video Footage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webaim.org/resources/contrastchecker/"&gt;Contrast Checker&lt;/a&gt;: The Lightness slider can be used to adjust the selected color. WCAG 2.0 level AA requires a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.a11yproject.com/"&gt;The A11Y Project&lt;/a&gt;: The A11Y Project is a community-driven effort to make digital accessibility easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://whocanuse.com"&gt;WhoCanUse&lt;/a&gt;: It's a tool that brings attention and understanding to how color contrast can affect different people with visual impairments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://colorbox.io"&gt;ColorBox&lt;/a&gt;: Create amazing color sets superfast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://colororacle.org/"&gt;ColorOracle&lt;/a&gt;: Color Oracle is a free color blindness simulator for Windows, Mac and Linux.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://icons8.com/"&gt;Icons8&lt;/a&gt;: Icons, illustrations, photos, music, and design tools&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.flaticon.com"&gt;Flat Icon&lt;/a&gt;: Icons for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://thenounproject.com/"&gt;The Noun Project&lt;/a&gt;: Icons and Photos For Everything&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iconscout.com/"&gt;Iconscout&lt;/a&gt;: Free Download Icons illustrations stock photos at one place&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iconmonstr.com/"&gt;Iconmonstr&lt;/a&gt;: Discover 4496+ free icons in 313 collections&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://feathericons.com/"&gt;Feather Icons&lt;/a&gt;: Beautiful, customizable open source icons&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.iconfinder.com/"&gt;Iconfinder&lt;/a&gt;: Free and premium vector icons in SVG, PNG, CSH and AI format&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://heroicons.dev/"&gt;Heroicons&lt;/a&gt;: Free, open source icons from the creators of Tailwind CSS.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;: Library of around 1000 free licensed font families&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.dafont.com/"&gt;DaFont&lt;/a&gt;: Archive of freely downloadable fonts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.ffonts.net"&gt;FF Fonts&lt;/a&gt;: 100,000+ Free Fonts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devfonts.gafi.dev/"&gt;Dev Fonts&lt;/a&gt;: Find and use the coding fonts for free&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#design-software"&gt;
  &lt;/a&gt;
  Design Software
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.adobe.com/products/xd.html"&gt;Adobe XD&lt;/a&gt;: Share your story with designs that look and feel like the real thing. Wireframe, animate, prototype, collaborate, and more — it’s all right here, all in one UI/UX design tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;: Figma is a vector graphics editor and prototyping tool which is primarily web-based, with additional offline features enabled by desktop applications for macOS and Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.protopie.io"&gt;ProtoPie&lt;/a&gt;: Don’t let a good idea stay just an idea. ProtoPie is the most intuitive way to prototype and perfect them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://principleformac.com"&gt;Principle&lt;/a&gt;: Principle makes it easy to design animated and interactive user interfaces. Whether you're designing the flow of a multi-screen app, or new interactions and animations, Principle helps you create designs that look and feel amazing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.invisionapp.com/studio"&gt;Invision Studio&lt;/a&gt;: Free screen designing tool from InVision&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.framer.com"&gt;Framer&lt;/a&gt;: Framer is an all-in-one tool that helps teams design every part of the product experience. Start in Framer and get to a functional prototype faster than ever—no code required.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#design-resources"&gt;
  &lt;/a&gt;
  Design Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.mockupworld.co"&gt;Mockup World&lt;/a&gt;: The best free Mockups from the Web&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://freebiesbug.com"&gt;Freebiesbug&lt;/a&gt;: Hand-picked resources for web designer and developers, constantly updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ui8.net/"&gt;UI8&lt;/a&gt;: 4,745 curated design resources to energize your creative workflow&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://uibundle.com/"&gt;UI Bundle&lt;/a&gt;: Discover 535 free design assets for designers and developers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.uplabs.com/"&gt;Uplabs&lt;/a&gt;: Unlimited UI Kits, Icons, Templates, and much more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://originalmockups.com/mockups/free-mockups"&gt;Original Mockups&lt;/a&gt;: Free PSD Mockup Templates&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#design-articles-amp-news"&gt;
  &lt;/a&gt;
  Design Articles &amp;amp; News
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://uxdesign.cc"&gt;UX Collective&lt;/a&gt;: We believe designers are thinkers as much as they are makers. Curated stories on UX, Visual &amp;amp; Product Design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sidebar.io"&gt;Sidebar&lt;/a&gt;: The five best design links, every weekday.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.designernews.co/"&gt;Designer News&lt;/a&gt;: Designer News is where the design community meets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://uxmovement.com/"&gt;UX Movement&lt;/a&gt;: A publication of articles to teach you how to design interfaces that provide an intuitive user experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.anotherdesignnewsletter.com/"&gt;Another Design&lt;/a&gt;:  It includes inspiring work, cool typefaces, people to follow, news to read, tools to try, jobs, and other delicious spam. If you're into that stuff, subscribe!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Lean-Startup-Eric-Ries/dp/0307887898/ref=as_li_ss_tl?_encoding=UTF8&amp;amp;qid=1586805191&amp;amp;sr=8-1&amp;amp;linkCode=ll1&amp;amp;tag=kylerdesign-21&amp;amp;linkId=85d8036533cb3e828fe034b7c7921d75&amp;amp;language=en_GB"&gt;The Lean Startup&lt;/a&gt;: How Today's Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Dont-Make-Think-Revisited-Usability-ebook/dp/B00HJUBRPG/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=don%27t+make+me+think&amp;amp;qid=1587983747&amp;amp;sr=8-1&amp;amp;&amp;amp;linkCode=sl1&amp;amp;tag=kylerdesign-21&amp;amp;linkId=bc1ee0c152efa1489fcdbedffec31bec&amp;amp;language=en_GB"&gt;Don't Make Me Think&lt;/a&gt;: A Common Sense Approach to Web Usability (Voices That Matter)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://refactoringui.com/book/"&gt;Refactoring UI&lt;/a&gt;: Learn how to design beautiful user interfaces by yourself using specific tactics explained from a developer's point-of-view.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>YAGNI &amp; KISS Principles</title>
      <author>Hassan El-seoudy</author>
      <pubDate>Mon, 03 May 2021 13:27:21 +0000</pubDate>
      <link>https://dev.to/hassanelseoudy/yagni-kiss-principles-gl2</link>
      <guid>https://dev.to/hassanelseoudy/yagni-kiss-principles-gl2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#yagni"&gt;
  &lt;/a&gt;
  YAGNI
&lt;/h2&gt;

&lt;p&gt;YAGNI stands for &lt;strong&gt;You Ain’t Gonna Need It&lt;/strong&gt;. It’s a principle from software development methodology of Extreme Programming (XP). This principle says that you should not create features that it’s not really necessary.&lt;/p&gt;

&lt;p&gt;Ron Jeffries, one of the co-founders of the XP, once said:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Always implement things when you actually need them, never when you just foresee that you need them.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It means that you should not implement functionality just because you think that you may need it someday, but implement it just when you really need it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Benefits of YAGNI principle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1- Avoid spending time with implementations that were not even necessary, and maybe will never be used.&lt;/p&gt;

&lt;p&gt;2- With more unnecessary code you write, you may discard write unit tests for them! and then you will start having more issues regarding code quality tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PmCF-9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go4gab84r59zjsg4lwna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PmCF-9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go4gab84r59zjsg4lwna.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kiss-principle"&gt;
  &lt;/a&gt;
  KISS Principle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gB_hPY-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5gs9d0j108aso07th9j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB_hPY-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5gs9d0j108aso07th9j.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KISS&lt;/strong&gt; is an acronym for Keep It Simple, Stupid. This principle says about to make your code simple. You should avoid unnecessary complexity. A simple code it’s easier to maintain and easier to understand.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How to apply KISS principle in code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You should eliminate duplicated code, remove unnecessary features, also don’t use unnecessary variables and methods, follow know standards of code development, also you should separate the responsibilities of your classes and the responsibilities from the layers of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you can see, The difference between them as you may expect from the header photo, it’s that YAGNI focus on removing unnecessary functionality and logic, and KISS focus on the complexity.&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;p&gt;The Pragmatic Programmer — David Thomas and Andrew Hunt&lt;/p&gt;

&lt;p&gt;Software Architect’s Handbook — Joseph Ingeno&lt;/p&gt;

&lt;p&gt;Extreme Programming Installed — Ron Jeffries, Ann Anderson, Chet Hendrickson&lt;/p&gt;

</description>
      <category>cleancode</category>
      <category>programming</category>
      <category>software</category>
      <category>productivity</category>
    </item>
    <item>
      <title>CDK Day In Review</title>
      <author>Matt Coulter</author>
      <pubDate>Mon, 03 May 2021 13:11:18 +0000</pubDate>
      <link>https://dev.to/aws-heroes/cdk-day-in-review-21eo</link>
      <guid>https://dev.to/aws-heroes/cdk-day-in-review-21eo</guid>
      <description>&lt;p&gt;CDK Day happened again on 30th April 2021. We had 22 speakers from across the globe give 18 talks covering AWS CDK, cdk8s, CDK for Terraform and Projen.&lt;/p&gt;

&lt;p&gt;This article will show some of the talks and go into the stats for how successful the day went. Since this is an event for the community by the community I have tried to be as transparent as possible&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-organising-committee"&gt;
  &lt;/a&gt;
  The Organising Committee
&lt;/h2&gt;

&lt;p&gt;Before going any further I wanted to take a second and acknowledge the full team of people who gave up their free time to bring CDK Day together. You can find out more details &lt;a href="https://www.cdkday.com/#committee"&gt;here&lt;/a&gt;. Outside of those in the image Jesse Williams and Aaron Schwam from AWS Dev Tools Marketing were a massive help who through AWS funded our sign language interpreters (remember we have no budget or official sponsors so anything you see above a value of $0 someone has provided)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHz3y_tQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c1hff5hx3cw5p6dv3z9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHz3y_tQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c1hff5hx3cw5p6dv3z9.jpeg" alt="organising committee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hosts"&gt;
  &lt;/a&gt;
  The Hosts
&lt;/h2&gt;

&lt;p&gt;The two most important aspects of a virtual event are the content as you would expect and the hosts who string it all together. This year we had some amazing hosts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mattbonig"&gt;Matthew Bonig&lt;/a&gt; and &lt;a href="https://twitter.com/edjgeek"&gt;Eric Johnson&lt;/a&gt; came back as anchor hosts owning responsibility for a track each.&lt;/p&gt;

&lt;p&gt;On track one &lt;a href="https://twitter.com/Vel12171"&gt;Veliswa Boya&lt;/a&gt; and &lt;a href="https://twitter.com/hoegertn"&gt;Thorsten Hoeger&lt;/a&gt; starred as co hosts&lt;/p&gt;

&lt;p&gt;On track two our stars were &lt;a href="https://twitter.com/mirabeladd"&gt;Mirabela Dan&lt;/a&gt; and &lt;a href="https://twitter.com/SathyaBhat"&gt;Sathyajith Bhat&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-sign-language-interpreters"&gt;
  &lt;/a&gt;
  The Sign Language Interpreters
&lt;/h2&gt;

&lt;p&gt;We had a dedicated team of interpreters who would swap out approximately every 20 minutes because it is exhausting work. They were all absolute heroes and multiple people commented throughout the day how awesome they were. This would have been an incredibly difficult job at such a technical event and we are all so grateful they were part of CDK Day.&lt;/p&gt;

&lt;p&gt;Our interpreters were Kim Diez, Nicole Pancino, Arthur Cosentino, Norma V, Jonathan and Hillary&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-engagement-platforms"&gt;
  &lt;/a&gt;
  The Engagement Platforms
&lt;/h2&gt;

&lt;p&gt;This event on top of the cdk.dev slack, we tried to experiment with having a wonder.me room, the idea was that if people wanted to have a conversation over voice/video after a talk about that talk they could jump over into that room and enter a circle of up to 15 people.&lt;/p&gt;

&lt;p&gt;We had some people join the room before the event kicked off and that conversation was really fun. To me it was like waiting for a real conference to start but the problem was that unlike in real life where you need to physically move between talks, you either just keep watching the stream or jump to the other track so whilst I saw people in the room over the day I didn't see too many circles forming. The platform gives me no analytics to know for sure but I think this would work better purely as a pre event warm up and post event conversation location.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-talks"&gt;
  &lt;/a&gt;
  The Talks
&lt;/h2&gt;

&lt;p&gt;We had two concurrent streams of talks with an opening keynote in stream 1 and a closing keynote in stream 2. I don't think I can embed all the talks individually in one post here (this platform has an embed limit) so I will post the playlist containing them all and highlight a few below&lt;/p&gt;

&lt;p&gt;Full Playlist - &lt;a href="https://www.youtube.com/playlist?list=PLyBH5aYToYl6L635pOUSoPqeYm45x7tcF"&gt;April 2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The day started with Eric Johnson showing us all in a world first demo the new SAM-CLI functionality that allows you to locally run and execute CDK applications! You can read more about that game changing functionality at &lt;a href="https://aws.amazon.com/blogs/compute/better-together-aws-sam-and-aws-cdk/"&gt;the aws blog&lt;/a&gt; or watch the CDK Day recording&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IK8-wYHym7A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Next up we had Ben Bridts deliver 40 minutes of pure cloud expertise in his "Mistakes I made when writing infrastructure as code" talk!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1gxArqL_Eg4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Galaletsang Morake showed us all how to deploy serverless applications using AWS CDK in a great introductory talk&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G7bvLBh5weg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Nočnica Fee gave a brilliant talk about "Without observability CI/CD doesn't work"&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ChBGOf098o8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How many people are skipping testing their CDK applications? Darko Mesaroš delivered a masterclass on testing so there are no more excuses&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t4G1db63BGc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Have you never used CDK before and just want to know how to get started? Oksana Horlock has you covered&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y59H_RfYvdM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Curious about the CDK for Terraform? Well Ansgar Mertens deep dives and answers a live Q&amp;amp;A&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cfU-WOGdNqA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Do you use Kubernetes but struggle with the YML files? Do you wish you could use a higher level language? Max Brenner shows us cdk8s and why it is important&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/K5Xuf0DI6ak"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-signed-up"&gt;
  &lt;/a&gt;
  Who Signed Up?
&lt;/h1&gt;

&lt;p&gt;Looking at people who signed up we can see the numbers grew significantly for this event from the last. In September 2020, 3033 people signed up whilst for April 2021 we hit 4315!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teVq7nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcmxcofgq89dxhcuiwdv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teVq7nd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcmxcofgq89dxhcuiwdv.PNG" alt="ticket sales"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of geography, the sign ups were pretty global which meant we were covering the full spectrum of time zones. This meant the content had to work both live and for async viewing after the event&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBEbfn2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m1ifxos4srda83tr6xi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBEbfn2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m1ifxos4srda83tr6xi.PNG" alt="sign up map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you compare this to the map from September you can see where the community has grown:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BFnGMSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24nrhirdgd4eklanw3ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BFnGMSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24nrhirdgd4eklanw3ua.png" alt="September's Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can break this down further by pulling in some of the stats from YouTube since we didn't broadcast across multiple platforms this time. I do not know how YouTube gets these stats so I can only assume they are guestimates as opposed to accurate&lt;/p&gt;

&lt;p&gt;The age distribution curve seems pretty natural for this kind of event, although it would be nice if 13-17 was above 0:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXnKZKEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpfqepnkf34nw4axp6e0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXnKZKEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpfqepnkf34nw4axp6e0.jpeg" alt="age breakdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is incredibly biased, inaccurate, oppressive and problematic to take action on an automated binary gender percentage. I am only showing this because it is one sided enough that we should try and get an accurate breakdown at a future event based on voluntary filling out an anonymous survey where people self identify&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S79_-C3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym56dwuc50kifn5oihgx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S79_-C3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym56dwuc50kifn5oihgx.jpeg" alt="YouTube gender"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-viewing-numbers"&gt;
  &lt;/a&gt;
  Live Viewing Numbers
&lt;/h1&gt;

&lt;p&gt;Track 1 you can see is where everyone joined for the opening keynote and then numbers slowly dropped as you would expect&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veQ2t4al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4jkazlag3g0dr1rri7g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veQ2t4al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4jkazlag3g0dr1rri7g.PNG" alt="Track 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Track 2 rises throughout the event taking a large spike up when Track 1 finished&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABgfKCzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlnx09n1w15e8xxp92v5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABgfKCzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlnx09n1w15e8xxp92v5.PNG" alt="Track 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we compare this to September's event we can see that even after 7 months of extra time the new event has more overall views than the original&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RA6Ho4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7lxk8blix45h1ku10sw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RA6Ho4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7lxk8blix45h1ku10sw.PNG" alt="live streams compared"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the viewer retention of that single track last year which you can see the numbers are overall lower&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ruIJg2Fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw2q6df6nul8sm1h41qx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ruIJg2Fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw2q6df6nul8sm1h41qx.PNG" alt="sept retention"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#was-it-a-success"&gt;
  &lt;/a&gt;
  Was it a success?
&lt;/h1&gt;

&lt;p&gt;I could not be happier with how it went, yes we had some technical issues but the purpose of this event is not to be flashy and perfect or make money. This event has always been about bringing the whole community together for one day to have fun and learn something new. Multiple new features across different products were launched at our event! This is at the same event where we have presenters on stage in Otter and Squirrel costumes. For me, mission accomplished&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awscdk</category>
      <category>projen</category>
      <category>cdk8s</category>
    </item>
    <item>
      <title>Create an email list with   React + Mailchimp</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 03 May 2021 13:04:24 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/create-an-email-list-with-react-mailchimp-965</link>
      <guid>https://dev.to/gedalyakrycer/create-an-email-list-with-react-mailchimp-965</guid>
      <description>&lt;h1&gt;
  &lt;a href="#in-this-tutorial"&gt;
  &lt;/a&gt;
  In this tutorial...
&lt;/h1&gt;

&lt;p&gt;We are going to build a custom subscriber form in React and connect it to a Mailchimp audience (list). ⚛️ 📤 🙉 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt; is a marketing platform that collects contact information into lists (recently renamed to "audiences"). You can then send email campaigns to these lists.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In building this for a freelance project, I found it to be more complex than I had anticipated. So this post is an A-Z guide on how to do it and hopefully saves you some headaches!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z0LUIRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzn3vo2k9z1ampsjqyd1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z0LUIRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzn3vo2k9z1ampsjqyd1.gif" alt="Email Subscriber Form In React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view the form live, click the "get updates" button in the navbar.&lt;br&gt;
&lt;a href="http://genhybridsystems.com/"&gt;genhybridsystems.com&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#some-notes-on-this-tutorial-structure"&gt;
  &lt;/a&gt;
  Some notes on this tutorial structure
&lt;/h4&gt;

&lt;p&gt;To help simplify the steps, I will be presenting blocks of related code together, while hiding others. This way you can focus on just what is relevant for that step. &lt;/p&gt;

&lt;p&gt;Also, the original site I built had this form in a modal. I tried to strip out any code specific to that modal for this tutorial. &lt;/p&gt;

&lt;p&gt;However, if you want to review all the code at once + the modal specific code. I will include a complete &lt;code&gt;gist&lt;/code&gt; at the end. 👍&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#steps-to-success"&gt;
  &lt;/a&gt;
  Steps to success
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#1-build-a-base-signup-form-in-mailchimp"&gt;
  &lt;/a&gt;
  1. &lt;a href="#step1"&gt;Build a base sign-up form in Mailchimp&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-get-the-raw-u-endraw-and-raw-id-endraw-form-values"&gt;
  &lt;/a&gt;
  2. &lt;a href="#step2"&gt;Get the &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; form values&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#3-install-raw-reactmailchimpsubscribe-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;a href="#step3"&gt;Install &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#4-create-a-component-to-hold-the-mailchimp-form"&gt;
  &lt;/a&gt;
  4. &lt;a href="#step4"&gt;Create a component to hold the Mailchimp form&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#5-create-a-raw-ltcustomform-gt-endraw-component"&gt;
  &lt;/a&gt;
  5. &lt;a href="#step5"&gt;Create a &lt;code&gt;&amp;lt;CustomForm /&amp;gt;&lt;/code&gt; component &lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#6-set-up-raw-handlesubmit-endraw-function"&gt;
  &lt;/a&gt;
  6. &lt;a href="#step6"&gt;Set up &lt;code&gt;handleSubmit&lt;/code&gt; function&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#7-format-status-messages"&gt;
  &lt;/a&gt;
  7. &lt;a href="#step7"&gt;Format status messages&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#8-show-confirmation-screen-with-conditionals"&gt;
  &lt;/a&gt;
  8. &lt;a href="#step8"&gt;Show confirmation screen with conditionals&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#9-clear-all-fields-on-a-successful-form-submission"&gt;
  &lt;/a&gt;
  9. &lt;a href="#step9"&gt;Clear all fields on a successful form submission&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#10-add-form-scss-styles"&gt;
  &lt;/a&gt;
  10. &lt;a href="#step10"&gt;Add form SCSS styles&lt;/a&gt;
&lt;/h4&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-build-a-base-signup-form-in-mailchimp"&gt;
  &lt;/a&gt;
  Step 1 — Build a base sign-up form in Mailchimp
&lt;/h2&gt;

&lt;p&gt;Before jumping into any React code, we need to first create a form in Mailchimp. This will power our custom form later on, from behind the scenes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeh-MdZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe63s0zvgvv355muwjr6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeh-MdZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe63s0zvgvv355muwjr6.jpg" alt="Select the Form Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a1 —&lt;/strong&gt; Go to the &lt;strong&gt;Audience&lt;/strong&gt; section, select &lt;strong&gt;Signup forms&lt;/strong&gt; from the sub-menu, and finally select the &lt;strong&gt;Form builder&lt;/strong&gt;. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9TyUspv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dhddo15r4euwcdd4ghl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9TyUspv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dhddo15r4euwcdd4ghl.jpg" alt="Confirm Form Fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b1 —&lt;/strong&gt; With a new form generated, scroll down the page to the &lt;strong&gt;Built It&lt;/strong&gt; section.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c1 —&lt;/strong&gt; For this tutorial, we just want to keep the "First Name", "Last Name" and "Email" fields. Go ahead and delete any other fields so it looks like the example above.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-get-the-raw-u-endraw-and-raw-id-endraw-form-values"&gt;
  &lt;/a&gt;
  Step 2 — Get the &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; form values
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMYnWODp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylugfrleuubckktcu7ip.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMYnWODp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylugfrleuubckktcu7ip.jpg" alt="Signup form URL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a2 —&lt;/strong&gt; Above the form, copy the &lt;strong&gt;Signup form URL&lt;/strong&gt; and open it in a new tab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b2 —&lt;/strong&gt; Then right-click on the "Sign Up Form" page and select &lt;strong&gt;View page source&lt;/strong&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPSE_Q9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b4fxta7nxb0yqsj8j3f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPSE_Q9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b4fxta7nxb0yqsj8j3f.jpg" alt="Source Code for Signup form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c2 —&lt;/strong&gt; Scroll way down the page, past all the CSS code in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, until you get to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; section. (For me it was at line 860.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are 4 parts to copy and save for later reference...&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The URL inside of the &lt;code&gt;action=""&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; in the input field with &lt;code&gt;name="u"&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; in the input field with &lt;code&gt;name="id"&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the input field sections for &lt;em&gt;Email&lt;/em&gt;, &lt;em&gt;First Name&lt;/em&gt;, &lt;em&gt;Last Name&lt;/em&gt; – take note of the &lt;code&gt;for=""&lt;/code&gt; in each of them. For me they are named &lt;code&gt;MERGE0&lt;/code&gt;, &lt;code&gt;MERGE1&lt;/code&gt;, and &lt;code&gt;MERGE2&lt;/code&gt; respectively. We will reference these later in our form to map our own fields with these Mailchimp fields.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3-install-raw-reactmailchimpsubscribe-endraw-"&gt;
  &lt;/a&gt;
  Step 3 — Install &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As it turns out it isn't super straightforward to query the Mailchimp API on a static site. &lt;/p&gt;

&lt;p&gt;After trying a bunch of options, I found that the npm package &lt;a href="https://www.npmjs.com/package/react-mailchimp-subscribe"&gt;react-mailchimp-subscribe&lt;/a&gt; does a great job at handling the Mailchimp integration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i react-mailchimp-subscribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will just need to feed it the &lt;code&gt;url&lt;/code&gt; / &lt;code&gt;u&lt;/code&gt; / &lt;code&gt;id&lt;/code&gt; values from the last step and make some components. Easy peasy!! &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4-create-a-component-to-hold-the-mailchimp-form"&gt;
  &lt;/a&gt;
  Step 4 — Create a component to hold the Mailchimp form
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mcFormStyles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-mailchimp-subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;a4 —&lt;/strong&gt; Import React, your styles, and &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt; into your new component. I also placed the &lt;code&gt;&amp;lt;MailchimpSubscribe /&amp;gt;&lt;/code&gt; component inside a div to help with positioning. (We will add styling later.)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mcFormStyles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-mailchimp-subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://genhybridsystems.us1.list-manage.com/subscribe/post?u=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_MAILCHIMP_U&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_MAILCHIMP_ID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MailchimpSubscribe&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;b4 —&lt;/strong&gt; Next create a variable called &lt;code&gt;postUrl&lt;/code&gt;. (Actual name is up to you). Inside it, store the URL we copied from the form's &lt;code&gt;action=""&lt;/code&gt; in step 2. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c4 —&lt;/strong&gt; Then add the &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; keys from step 3 at the end of the URL.  I suggest storing the actual values in a &lt;code&gt;dotenv&lt;/code&gt; file and just referencing them in the url. (Remember to prepend the &lt;code&gt;dotenv&lt;/code&gt; variables with "REACT_APP_".)  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d4 —&lt;/strong&gt; Finally pass the &lt;code&gt;postUrl&lt;/code&gt; as a &lt;code&gt;url&lt;/code&gt; prop on the &lt;code&gt;&amp;lt;MailchimpSubscribe /&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mcFormStyles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-mailchimp-subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://genhybridsystems.us1.list-manage.com/subscribe/post?u=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_MAILCHIMP_U&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_MAILCHIMP_ID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MailchimpSubscribe&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomForm&lt;/span&gt;
                        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
                        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                        &lt;span class="na"&gt;onValidated&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MailchimpFormContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;e4 —&lt;/strong&gt; After the &lt;code&gt;url&lt;/code&gt; props add a &lt;code&gt;render&lt;/code&gt; with a call back function. This callback function should return a &lt;code&gt;&amp;lt;CustomForm /&amp;gt;&lt;/code&gt; component. (We will build this in Step 5.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;f4 —&lt;/strong&gt; Within the &lt;code&gt;render&lt;/code&gt; callback function, destructure the 3 values indicated below and pass them as props (also below) to the &lt;code&gt;&amp;lt;CustomForm /&amp;gt;&lt;/code&gt; component. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-5-create-a-raw-ltcustomform-gt-endraw-component"&gt;
  &lt;/a&gt;
  Step 5 — Create a &lt;code&gt;&amp;lt;CustomForm /&amp;gt;&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;This &lt;code&gt;&amp;lt;CustomForm /&amp;gt;&lt;/code&gt; component can by all means be in its own file. To make it easier to see how the two related, I kept it in the same file as the &lt;code&gt;MailchimpFormContainer&lt;/code&gt;. (Code example is below the instructions.)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mcFormStyles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-mailchimp-subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../ui/InputField/InputField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;a5 —&lt;/strong&gt; Add &lt;code&gt;useState&lt;/code&gt; to the React import.&lt;/p&gt;

&lt;p&gt;I am also importing a custom &lt;code&gt;InputField&lt;/code&gt; component to help control styling and basic validation. Check out my previous article to see how to build this. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gedalyakrycer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_UMWGU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--n_opOIn4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/537261/8c5707dc-338c-449f-b608-cc896b161638.jpeg" alt="gedalyakrycer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/gedalyakrycer/let-s-build-a-3-in-1-form-field-component-3416" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's build a 3-in-1 form field component&lt;/h2&gt;
      &lt;h3&gt;Gedalya Krycer ・ Apr 19 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;b5 —&lt;/strong&gt; At the start of the function, destructure the three props that are passed in from the parent component during step 4. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c5 —&lt;/strong&gt; Set up &lt;code&gt;useState&lt;/code&gt; variables for each of our input fields. These will hold the values that the user types in.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mcFormStyles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailchimpSubscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-mailchimp-subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InputField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../ui/InputField/InputField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Join our email list for future updates.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__field-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputField&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First Name"&lt;/span&gt;
            &lt;span class="na"&gt;onChangeHandler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Jane"&lt;/span&gt;
            &lt;span class="na"&gt;isRequired&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputField&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last Name"&lt;/span&gt;
            &lt;span class="na"&gt;onChangeHandler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Doe"&lt;/span&gt;
            &lt;span class="na"&gt;isRequired&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputField&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
            &lt;span class="na"&gt;onChangeHandler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"your@email.com"&lt;/span&gt;
            &lt;span class="na"&gt;isRequired&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputField&lt;/span&gt;
          &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subscribe"&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
          &lt;span class="na"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;d5 —&lt;/strong&gt; Add a &lt;code&gt;form&lt;/code&gt; element and within it another &lt;code&gt;div&lt;/code&gt; to contain and position the input fields. (Styles to come later.) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e5 —&lt;/strong&gt; Add input fields for "Email", "First Name" and "Last Name". Pass in the corresponding state for each &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; handler. (Remember that the above example is using my custom input fields, so it looks a little different than regular JSX.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;f5 —&lt;/strong&gt; Outside of the &lt;code&gt;div&lt;/code&gt; add a &lt;code&gt;submit&lt;/code&gt; input field. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-6-set-up-raw-handlesubmit-endraw-function"&gt;
  &lt;/a&gt;
  Step 6 — Set up &lt;code&gt;handleSubmit&lt;/code&gt; function
&lt;/h2&gt;

&lt;p&gt;Now that we got our input fields set up, it is time to send that data to Mailchimp. This is where the &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt; package really does all the heavy lifting. Most of the below code is actually provided by them. I'll do my best to describe (assume) what it all does.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;onValidated&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;EMAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;MERGE1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;MERGE2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; 
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form"&lt;/span&gt;
        &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // form field code... 
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;6a —&lt;/strong&gt; Inside of the &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; element adds an &lt;code&gt;onSubmit&lt;/code&gt; function and passes in the event (&lt;code&gt;e&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6b —&lt;/strong&gt; Inside of that function (called &lt;code&gt;handleSubmit&lt;/code&gt;) we have a few things going on... &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breakdown&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;e.preventDefault();&lt;/code&gt; will stop the page from refreshing when the form submits and thereby preserving our state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;email &amp;amp;&amp;amp; firstName &amp;amp;&amp;amp; lastName &amp;amp;&amp;amp;&lt;/code&gt; checks if our state values are "truthy". In other words, if a user misses a field, that state will be empty and thereby &lt;code&gt;false&lt;/code&gt;. If so the form won't submit. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;email.indexOf("@") &amp;gt; -1&lt;/code&gt; checks if a &lt;code&gt;@&lt;/code&gt; has been included in the user input. If not the form won't submit. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onValidated()&lt;/code&gt; &lt;strong&gt;This one is very important!&lt;/strong&gt; Remember in step 2 I instructed you to store the input field values from Mailchimp? (MERGE0, MERGE1, and MERGE2) We will use these names (except for MERGE0 which "EMAIL") and assign our state to them&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-7-format-status-messages"&gt;
  &lt;/a&gt;
  Step 7 — Format status messages
&lt;/h2&gt;

&lt;p&gt;Mailchimp's API sends back some really awesome status responses, in 3 categories. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sending &lt;/li&gt;
&lt;li&gt;Success&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;error&lt;/code&gt; status comes with really helpfully specific messages. For example, including a link back to Mailchimp to update your email, if the one you entered already exists.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0cd0XBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg6v06kqo6jn2zc9x9pa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0cd0XBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg6v06kqo6jn2zc9x9pa.gif" alt="Email Already Exists error response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// states...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// •••&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Join our email list for future updates.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sending&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__alert mc__alert--sending"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            sending...
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; 
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__alert mc__alert--error"&lt;/span&gt;
            &lt;span class="na"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__alert mc__alert--success"&lt;/span&gt;
            &lt;span class="na"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__field-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // form field code... 
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;7a —&lt;/strong&gt; Right below the &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; add some conditional JSX for if the &lt;code&gt;status&lt;/code&gt; prop equal &lt;em&gt;sending&lt;/em&gt;. Instead of a ternary operator, I am using the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator to show the content if the value before is &lt;code&gt;true&lt;/code&gt;. I also opted for some simple text that blinks with CSS animations. But you can totally render a cool spinner here instead. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7b —&lt;/strong&gt; Next is the conditional JSX for when the &lt;code&gt;status&lt;/code&gt; prop equals &lt;em&gt;error&lt;/em&gt;. The content is pulled from the API and is set up based on &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt;'s example. The classes for this section (covered later) will also include styles for any links that might be provided. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7c —&lt;/strong&gt; Lastly add the conditional JSX for when the &lt;code&gt;status&lt;/code&gt; prop equals &lt;em&gt;success&lt;/em&gt;. The content is also pulled from the API and is set up based on &lt;code&gt;react-mailchimp-subscribe&lt;/code&gt;'s example. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-8-show-confirmation-screen-with-conditionals"&gt;
  &lt;/a&gt;
  Step 8 — Show confirmation screen with conditionals
&lt;/h2&gt;

&lt;p&gt;Besides showing helpful messages we can use the &lt;code&gt;success&lt;/code&gt; status response to show a confirmation in our modal. (We partly set this up in the step before.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z0LUIRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzn3vo2k9z1ampsjqyd1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z0LUIRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzn3vo2k9z1ampsjqyd1.gif" alt="Email Subscriber Form In React"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// states...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// •••&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Join our email list for future updates.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        // error and sending status messages...

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__alert mc__alert--success"&lt;/span&gt;
            &lt;span class="na"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__field-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            // form field code... 
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
            &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setModalOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"g__justify-self-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Close&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputField&lt;/span&gt;
                 &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subscribe"&lt;/span&gt;
                 &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
                 &lt;span class="na"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;8a —&lt;/strong&gt; Starting with the &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; we can use the &lt;code&gt;status&lt;/code&gt; prop to show "Success!" if the form is submitted correctly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8b —&lt;/strong&gt; Next we can use the &lt;code&gt;status&lt;/code&gt; prop to hide the input fields &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on a &lt;code&gt;success&lt;/code&gt; response. (It will be replaced by the &lt;code&gt;success&lt;/code&gt; status message that we set up in step 7.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8c —&lt;/strong&gt; Lastly, we will use the &lt;code&gt;status&lt;/code&gt; prop to change the submit button to a regular button that closes the modal. (This is very specific to my setup and uses a custom button component. If you don't have a modal you can totally just hide the submit button instead.)&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-9-clear-all-fields-on-a-successful-form-submission"&gt;
  &lt;/a&gt;
  Step 9 — Clear all fields on a successful form submission
&lt;/h2&gt;

&lt;p&gt;Nice! We are almost there. The last thing (re: functionality) is to clear the state when we submit the form. That way the old values are not preserved when we successfully submit the form.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onValidated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// states...&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clearFields&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// •••&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mc__form"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // Form content...
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//MailchimpFormContainer Parent Component Below&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;9a —&lt;/strong&gt; Add &lt;code&gt;useEffect&lt;/code&gt; to the React import. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9b —&lt;/strong&gt; Create a function called &lt;code&gt;clearFields&lt;/code&gt; that sets all the input field states to "". &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9c —&lt;/strong&gt; Call that function in a &lt;code&gt;useEffect&lt;/code&gt;. It should only run if the &lt;code&gt;status === "success"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9d —&lt;/strong&gt; Lastly, set the &lt;code&gt;useEffect&lt;/code&gt; dependency to look at &lt;code&gt;status&lt;/code&gt;. That way every time it updates, the &lt;code&gt;useEffect&lt;/code&gt; will run. &lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-10-add-form-scss-styles"&gt;
  &lt;/a&gt;
  Step 10 — Add form SCSS styles
&lt;/h2&gt;

&lt;p&gt;Ok final step! Let's style this sucker up. &lt;/p&gt;

&lt;p&gt;It is worth noting the I am using &lt;code&gt;SCSS&lt;/code&gt; and importing some custom variables. I'll include some comments to help explain what these are and what to do on your end.&lt;/p&gt;

&lt;p&gt;Also, this is all based on the website's brand. By all means, change these styles to match your branding!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"../../../sassStyles/_variables"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s2"&gt;"../../../sassStyles/_mixins"&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="cm"&gt;/* Styles the h3 */&lt;/span&gt;
&lt;span class="nc"&gt;.mc__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;235px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* Replace with your brand's main text color */&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$secondary1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="cm"&gt;/* Media query for breakpoints over 676px */&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smMinBreakPoint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Positions the form in the middle of the modal and ensures the content doesn't jump as status messages get added/removed */&lt;/span&gt;
&lt;span class="nc"&gt;.mc__form-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="mi"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Positions Text and form fields nicely in the middle with some spacing. */&lt;/span&gt;
&lt;span class="nc"&gt;.mc__form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-row-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="mi"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Seperates the input fields vertically */&lt;/span&gt;
&lt;span class="nc"&gt;.mc__field-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-row-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Provides styles for status messages */&lt;/span&gt;
&lt;span class="nc"&gt;.mc__alert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* Imports my site's Google Font from another file */&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poppinsFontStack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* If "sending" this will animate the text.*/&lt;/span&gt;
  &lt;span class="cm"&gt;/* Keyframes for this will be included below.*/&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--sending&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$highlight2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;-webkit-animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade-loop&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate-reverse&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade-loop&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate-reverse&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* "success" status styles with text color */&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--success&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$secondary2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* "error" status styles*/&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$warning&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* This addresses any links the error message includes */&lt;/span&gt;
    &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="cm"&gt;/* Select a high contrast color from your brand. */&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$highlight1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/* ----------------------------------------------
 * Generated by Animista on 2021-4-1 16:18:48
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info.
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * ----------------------------------------
 * animation fade-loop
 * ----------------------------------------
 */&lt;/span&gt;
&lt;span class="k"&gt;@-webkit-keyframes&lt;/span&gt; &lt;span class="nt"&gt;fade-loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;fade-loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complete-jsx-code"&gt;
  &lt;/a&gt;
  Complete JSX Code
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;p&gt;&lt;em&gt;Thumbnail designed with &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>mailchimp</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Improving your Rails mailers with `email_address_with_name`</title>
      <author>matt swanson</author>
      <pubDate>Mon, 03 May 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/improving-your-rails-mailers-with-emailaddresswithname-561k</link>
      <guid>https://dev.to/swanson/improving-your-rails-mailers-with-emailaddresswithname-561k</guid>
      <description>&lt;p&gt;In almost all email programs, you can add a display name before your email address like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;To: Matt Swanson &amp;lt;matt@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a small touch, but it is a more human-readable way of addressing an email. Rails provides a helper utility to format email addresses in this style without resorting to manual string manipulation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;email_address_with_name&lt;/code&gt; to add a name in-front on an email address in a standard way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email_address_with_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"swan3788@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Matt Swanson"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Matt Swanson &amp;lt;swan3788@gmail.com&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helper is available in all Rails mailers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserMailer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationMailer&lt;/span&gt;
  &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="ss"&gt;from: &lt;/span&gt;&lt;span class="s1"&gt;'notifications@example.com'&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome_email&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="n"&gt;email_address_with_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s1"&gt;'You have a new message'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;This helper handles &lt;code&gt;nil&lt;/code&gt; gracefully as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email_address_with_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"swan3788@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"swan3788@gmail.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it handles escaping characters automatically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email_address_with_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mike@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Michael J. Scott"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Michael J. Scott&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;mike@example.com&amp;gt;"&lt;/span&gt;

&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email_address_with_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"chip@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John "Chip" Smith'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;John &lt;/span&gt;&lt;span class="se"&gt;\\\"&lt;/span&gt;&lt;span class="s2"&gt;Chip&lt;/span&gt;&lt;span class="se"&gt;\\\"&lt;/span&gt;&lt;span class="s2"&gt; Smith&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;chip@example.com&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API: &lt;a href="https://api.rubyonrails.org/classes/ActionMailer/Base.html#method-c-email_address_with_name"&gt;ActionMailer::Base#email_address_with_name&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Interview Question #37: What's the type of a single argument provided to the split function?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 03 May 2021 12:49:53 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-37-what-s-the-type-of-a-single-argument-provided-to-the-split-function-5fg9</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-37-what-s-the-type-of-a-single-argument-provided-to-the-split-function-5fg9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mr6VNEtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mr6VNEtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-37.png" alt="js-test-37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;In this code snipped, all the arguments provided to the function &lt;code&gt;split&lt;/code&gt; will be collected and placed in a single array &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fact that we provide a single argument &lt;code&gt;hello&lt;/code&gt;, doesn’t change the expected behavior.&lt;/p&gt;

&lt;p&gt;As all arrays are objects in JavaScript, we’ll see the string &lt;code&gt;object&lt;/code&gt; printed to the console.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: the output will be &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com/sign-in"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>my first vue.js plugin</title>
      <author>Tefoh</author>
      <pubDate>Mon, 03 May 2021 12:47:51 +0000</pubDate>
      <link>https://dev.to/tefoh/my-first-vue-js-plugin-54oi</link>
      <guid>https://dev.to/tefoh/my-first-vue-js-plugin-54oi</guid>
      <description>&lt;p&gt;i just published my first vue (npm) package :). called tdata, and it just simply fetch data and send forms, and will give you json, response, loading and error if you had any. if you wanna check it out here's &lt;a href="https://github.com/Tefoh/tdata"&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  usage
&lt;/h2&gt;

&lt;p&gt;ok first step is install and register components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i tdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or if you are using yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add tdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you have to register components. and i provider two options for you. globally and locally. for global registration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tdata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will register all components automatically. options is optional and i explain a bit later. &lt;br&gt; &lt;br&gt;
and to register components locally. go any components you want like App.vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TFetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tdata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;TFetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;TForm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// for sending form&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now components are registered successfully. and you can use this to fetch data or submit forms in templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TForm&lt;/span&gt;
    &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;
    &lt;span class="na"&gt;:form=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;
    &lt;span class="na"&gt;v-slot=&lt;/span&gt;&lt;span class="s"&gt;"{ loading }"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"form.body"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"form.title"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;:disabled=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/TForm&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;TFetch&lt;/span&gt;
    &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;
    &lt;span class="na"&gt;v-slot=&lt;/span&gt;&lt;span class="s"&gt;"{ json: posts, loading }"&lt;/span&gt;
    &lt;span class="na"&gt;:options=&lt;/span&gt;&lt;span class="s"&gt;"{ params: { _limit: 5 } }"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; loading... &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"post in posts"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"post.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/TFetch&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;its that easy and you access things like json response, actual response, is request still loading and error if you had any. its handy but if you cant customize it, it will not be that useful for a project so just provide options and make your development easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  options
&lt;/h2&gt;

&lt;p&gt;first option you can set is baseURL, with this you dont have to provide full url every time. you can set baseURL like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TFetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tdata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;TFetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TFetch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now with every use of this component, base url will set automatically. but what if you have a axios instance and you set headers, baseURL and ... . good news is you can use that too. here how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tdata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer token:)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now in template you can use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TForm&lt;/span&gt; &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt; &lt;span class="na"&gt;:form=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;v-slot=&lt;/span&gt;&lt;span class="s"&gt;"{ loading }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"form.body"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"form.title"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;:disabled=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TForm&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;TFetch&lt;/span&gt;
  &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;
  &lt;span class="na"&gt;v-slot=&lt;/span&gt;&lt;span class="s"&gt;"{ json: posts, loading }"&lt;/span&gt;
  &lt;span class="na"&gt;:options=&lt;/span&gt;&lt;span class="s"&gt;"{ params: { _limit: 5 } }"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; loading... &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"post in posts"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"post.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TFetch&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ok thats not too hard. as i said its simple package and maybe i extend it more it future. if you like this pls share it :))&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Como conseguir mi primer trabajo en programación</title>
      <author>Rhonald Sánchez</author>
      <pubDate>Mon, 03 May 2021 12:37:22 +0000</pubDate>
      <link>https://dev.to/rhonsanchez/como-conseguir-mi-primer-trabajo-en-programacion-34m</link>
      <guid>https://dev.to/rhonsanchez/como-conseguir-mi-primer-trabajo-en-programacion-34m</guid>
      <description>&lt;p&gt;Vivimos en un mundo lleno de oportunidades laborales, puestos de trabajos dispuestos a ser tomados, reclutadores capaces de contactar contigo donde, por supuesto, tú eres la mejor opción para ellos (solo que ellos no lo saben aún), una buena suma de dinero y beneficios esperándote, pero sobre todo un gran aprendizaje y experiencias invaluables.&lt;/p&gt;

&lt;p&gt;Si, todos soñamos con el trabajo ideal, pero en ocasiones podemos pensar que llegar a obtener este tipo de ofertas laborales puede ser imposible si es que no tenemos mucha experiencia. En la realidad no es que sea imposible conseguir un buen empleo en la industria tecnológica (aunque no se puede dudar que al inicio si lo es cuando acabas tu carrera, curso o bootcamp) pero si conlleva un trabajo personal para poder ser seleccionado por alguna empresa.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-experiencia-no-lo-es-todo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;La experiencia no lo es todo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;No creas que para tener tu primer trabajo como frontend necesitas tener 5 años en alguna tecnología, conocer todas las librerías y frameworks del mercado, ser ingeniero, certificaciones, premios nobel, medallas olímpicas, etc. Y sí, sé que hay ofertas que piden esas cosas (o incluso peor) pero no apliques nunca a cosas así, esas empresas solo busca a un “todero” para ahorrar 5 o 6 sueldos.&lt;/p&gt;

&lt;p&gt;Puedes adquirir experiencia con proyectos pequeños, no necesariamente de algún trabajo en particular. Puedes desarrollar tus propios sitios, proyectos personales, trabajos colaborativos, todo eso cuenta. No importa cuan pequeño haya sido, si estuviste liderando equipos o desarrollando de seguro esa experiencia sirve. La experiencia es importante, pero no lo es todo&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enf%C3%B3cate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Enfócate&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JG3LOTv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4g68sg2tsygca641v37.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JG3LOTv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4g68sg2tsygca641v37.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De seguro en tus primeros años no puedes aprender de todo, pero puedes especializarte en alguna herramienta. Si por ejemplo aprendes sobre Vue puedes ampliar ese conocimiento, expándete a usar vue router, vuex, todo su ecosistema, aprende Nuxt, etc. No trates aprender a la par otras similares como React o Angular para abarcar todas las posibilidades, puede que los llegues a usar un poco cada una, pero como dice el dicho: “el que mucho abarca, poco aprieta”. Enfócate en una tecnología en el que haya bastante mercado, apréndela y especialízate.&lt;/p&gt;

&lt;p&gt;Ahora bien, el conocimiento no bastará para conseguir un trabajo, ni las empresas ni los reclutadores son adivinos para saber que tú eres lo que ellos necesitan, ni tampoco te lloverán ofertas de la nada (a menos que ya te conozcan). Como dice la biblia: “el que busca encuentra” (Mateo 7:8). Para esta parte te daré 3 consejos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB90_Gl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ritc4vc63fdrhylj4959.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB90_Gl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ritc4vc63fdrhylj4959.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-perfil-de-linkedin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Perfil de LinkedIn&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;No subestimes LinkedIn, su poder para buscarte un empleo y darte a conocer te ayudará muchísimo. Mantenlo actualizado, simple y optimizado para lo que realmente buscas. Usa una foto de perfil profesional, donde se pueda distinguir bien tu rostro eso generará confianza. Coloca tu experiencia laboral con un lenguaje simple, si no tienes coloca tus proyectos personales, los que desarrollaste en la universidad y realmente aprendiste ¿y si no tienes proyectos personales?, pues tu primer paso es hacer proyectos personales para demostrar tu experiencia. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-portafolio-personal"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Portafolio personal&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Si eres un frontend (aunque esto también aplica para backend) debes tener un portafolio donde hable acerca de ti, tu experiencia, tus proyectos, educación, cosas más detalladas. Puedes además incluir un blog y publicar cada cierto tiempo, esto te ayudará a darte a conocer al compartirlo por tus redes sociales.&lt;/p&gt;

&lt;p&gt;Para detalles más minuciosos de como hacer un portafolio haré un post dentro de unas cuantas semanas explicando el proceso y lo que debes tomar en cuenta, pero por ahora te dejaré un increíble post que encontré de una buena amiga y colega, ella es Ingeniero en Informática y su nombre es Ana Hernández, ella explica muy bien lo que debes saber a la hora de armar tu portafolio. Te dejaré el enlace al final.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-date-a-conocer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Date a conocer&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Si no conoces a nadie es difícil poder conseguir empleo. Las relaciones personales son importantes, el networking te ayuda a establecer relaciones que te pueden ayudar para un futuro trabajo. En general tener una red de contactos es vital. ¿No conoces a nadie?, ¿eres introvertido?, pues debes hacer un esfuerzo darte a conocer. Escribir un blog te puede facilitar, al hacerlo y publicarlo por redes sociales puede haber gente que se interese por tu trabajo y contactarte.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;Un último consejo que te doy es que no necesitas saber todas las cosas que te piden al 100%, si crees saber las cosas esenciales atrévete a aplicar al trabajo, el "No" ya lo tienes, de pronto ellos si buscan a alguien exactamente con tus cualidades y no lo sabes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;No te rindas. Sé que al inicio puede ser muy difícil poder aplicar a algún puesto de trabajo, muchas cosas por aprender puede ser abrumador, pero después de obtener tu primer empleo te aseguro que crecerás mucho y eso ya te dará una base para conseguir tu siguiente trabajo. A partir de tu primer trabajo todo será más llevadero.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSP66Osy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzzft4b1gqcwv89axdp1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSP66Osy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzzft4b1gqcwv89axdp1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#recursos-adicionales"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Recursos adicionales&lt;/strong&gt;
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ianahernandez.tech/blog/5-cosas-que-debes-saber-para-elaborar-un-portafolio-profesional"&gt;5 cosas que debes saber para elaborar un portafolio profesional&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Puedes ubicar a Ana en Twitter como: &lt;a href="https://twitter.com/ianahernandez"&gt;@ianahernandez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>latam</category>
      <category>webdev</category>
      <category>programming</category>
      <category>spanish</category>
    </item>
    <item>
      <title>How to count objects on an image with Python</title>
      <author>Stokry</author>
      <pubDate>Mon, 03 May 2021 12:31:17 +0000</pubDate>
      <link>https://dev.to/stokry/how-to-count-objects-on-an-image-with-python-142h</link>
      <guid>https://dev.to/stokry/how-to-count-objects-on-an-image-with-python-142h</guid>
      <description>&lt;p&gt;In this tutorial, you will learn how you can count the number of objects on an image with Python using CV2.&lt;/p&gt;

&lt;p&gt;This is our test image: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dK8oUG0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4d0h64v/test1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dK8oUG0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4d0h64v/test1.jpg" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's jump to the code:&lt;/p&gt;

&lt;p&gt;First we need to import our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to read our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we will be converting it into grayscale&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that, we doing thresholding on image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;THRESH_BINARY_INV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kernal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we are doing dilation process, removing black distortion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dilation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dilate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;next step is finding contour shapes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hierarchy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findContours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;dilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETR_EXTERNAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHAIN_APPROX_SIMPLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we are getting number of contours (objects found):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now print number of objects on an image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Obj:"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dilation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FONT_HERSHEY_SIMPLEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;159&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the lasr step we can show, original, threshold and dilation image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Original'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Thresh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Dilation'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dilation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our final result: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJUS5N_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Bgq0mCf/final1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJUS5N_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Bgq0mCf/final1.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you all. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>computervision</category>
      <category>showdev</category>
    </item>
    <item>
      <title>20+ Ultimate CSS Tricks and SASS Shorthands for code efficiency </title>
      <author>Dev Write Ups</author>
      <pubDate>Mon, 03 May 2021 12:25:04 +0000</pubDate>
      <link>https://dev.to/devwriteups/20-ultimate-css-tricks-and-sass-shorthands-for-code-efficiency-j09</link>
      <guid>https://dev.to/devwriteups/20-ultimate-css-tricks-and-sass-shorthands-for-code-efficiency-j09</guid>
      <description>&lt;p&gt;CSS may look exhausting, and not very many individuals can dominate it the correct way. So in this post we've written about 20+ CSS tricks and tips you should know also SASS mixins shorthand you should  know. Notwithstanding, it is an expertise that can give you an incredible upper hand over different designers. On the off chance that you like addressing puzzles, you will discover bliss recorded as a hard copy CSS by viewing at it as a riddle to settle.&lt;/p&gt;

&lt;p&gt;Let's look into some amazing CSS tricks 🤩. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#smooth-scrolling"&gt;
  &lt;/a&gt;
  Smooth Scrolling
&lt;/h3&gt;

&lt;p&gt;When you visit some websites and try to got to different sections, it scrolls smoothly to that section. You can achieve this feature on your website by using one line CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="py"&gt;scroll-behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;smooth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prevent-raw-lttextareagt-endraw-resize"&gt;
  &lt;/a&gt;
  Prevent &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; resize
&lt;/h3&gt;

&lt;p&gt;You can use the resize property to prevent &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element form being resized (or limit it to one axis).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.no-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.horizontal-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nc"&gt;.vertical-resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#drop-cap"&gt;
  &lt;/a&gt;
  Drop cap
&lt;/h3&gt;

&lt;p&gt;You can add a drop cap to a paragraph by using the &lt;code&gt;::first-letter&lt;/code&gt; pseudo element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input-range-pseudoclasses"&gt;
  &lt;/a&gt;
  Input range pseudo-classes
&lt;/h3&gt;

&lt;p&gt;The lesser-known &lt;code&gt;:in-range&lt;/code&gt; and &lt;code&gt;:out-of-range&lt;/code&gt; pseudo-classes can help you validate an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element by its min and max properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:out-of-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you For Reading🤩 Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#useful-css-pseudo-elements-selectors"&gt;
  &lt;/a&gt;
  Useful CSS Pseudo elements selectors
&lt;/h1&gt;

&lt;p&gt;Pseudo elements are a way to select and style a specific part of an element. You can think of them as a sub-element that are created as part of standard HTML elements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-it-different-pseudo-class"&gt;
  &lt;/a&gt;
  How is it different pseudo class?
&lt;/h2&gt;

&lt;p&gt;A pseudo class is used to select an element in a specific state(like hover or focus). A pseudo element is used to select a specific part of an element (like first-letter). &lt;/p&gt;

&lt;p&gt;Pseudo element selectors begin with two colons(::) as a way to differentiate them from pseudo classes. This was only introduced in CSS3, therefore some selectors are backwards compatible and work with a single color(:). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-before-endraw-and-raw-after-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Creates a pseudo-element that is the child of the selected element. The &lt;code&gt;::before&lt;/code&gt; pseudo element is assigned as the first child and &lt;code&gt;::after&lt;/code&gt; is the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.main-text&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;' " '&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;wheat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*SUPPORTED IN ALL MODERN BROWSERS*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-firstline-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;::first-line&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Applies styles of the first line of a block-level element. Keep in mind that the length of the first line will depend on the width of the element or viewport.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;wheat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#placeholder"&gt;
  &lt;/a&gt;
  ::placeholder
&lt;/h3&gt;

&lt;p&gt;Represents the placeholder text in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element. Only a subset of CSS properties can be used with the pseudo element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;wheat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#selection"&gt;
  &lt;/a&gt;
  ::selection
&lt;/h3&gt;

&lt;p&gt;Applies styles to the part of a document that has been highlighted by the user. Can be applied globally or to specific elements only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fa5094&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*Only apply to selected text withing a paragraph element*/&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="no"&gt;wheat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#css-shorthands-for-properties"&gt;
  &lt;/a&gt;
  CSS Short-hands for properties
&lt;/h1&gt;

&lt;p&gt;CSS Short-hands properties allow you to set the values of multiple CSS properties simultaneously. They are useful to know as they make your code more concise and easier to read. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#edge-properties"&gt;
  &lt;/a&gt;
  Edge properties
&lt;/h3&gt;

&lt;p&gt;Properties related to edges of the elements box model (e.g margin or padding) follow 1 to 4 syntax .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[1 values syntax]Same value on all 4 edges
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[2 values syntax]First value for top and bottom and second value for left and right
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[3 values syntax]First value for top. Second value for left and right. Third value for bottom
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[4 values syntax]Separate value for each edge in clockwise order - top, right, bottom, left.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#corner-properties"&gt;
  &lt;/a&gt;
  Corner properties
&lt;/h3&gt;

&lt;p&gt;Similarly, properties related to the corners of an elements box model (eg: borde-radius) also follow a 1-to-4 value syntax. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[1 values syntax]Same value on all 4 corner
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[2 values syntax]First value for top and bottom and second value for left and right
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[3 values syntax]First value for top. Second value for left and right. Third value for bottom
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;[4 values syntax]Separate value for each corner in clockwise order - top, right, bottom, left.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 

&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="nt"&gt;Border&lt;/span&gt; &lt;span class="nt"&gt;properties&lt;/span&gt; 

&lt;span class="nt"&gt;You&lt;/span&gt; &lt;span class="nt"&gt;can&lt;/span&gt; &lt;span class="nt"&gt;also&lt;/span&gt; &lt;span class="nt"&gt;condense&lt;/span&gt; &lt;span class="nt"&gt;border&lt;/span&gt; &lt;span class="nt"&gt;properties&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;one&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;In&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;case&lt;/span&gt; &lt;span class="nt"&gt;though&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;order&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;values&lt;/span&gt; &lt;span class="nt"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nt"&gt;t&lt;/span&gt; &lt;span class="nt"&gt;matter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
/*LONG */&lt;br&gt;
.blue-border{&lt;br&gt;
   border-width: 1px;&lt;br&gt;
   border-style: solid;&lt;br&gt;
   border-color: blue;&lt;br&gt;
 }&lt;/p&gt;

&lt;p&gt;/*SHORTHAND */&lt;br&gt;
.blue-border {&lt;br&gt;
  border: 1px solid blue;&lt;br&gt;
 }&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Font properties

Same applies to the font properties. Although in this case the values can get long individual properties can be easier to read sometime. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
/* LONG */ &lt;/p&gt;

&lt;p&gt;.heading {&lt;br&gt;
   font-style: italic;&lt;br&gt;
   font-weight: bold;&lt;br&gt;
   font-size: 3rem;&lt;br&gt;
   line-height: 1.4;&lt;br&gt;
   font-family: Arial, sans-serif;&lt;br&gt;
 }&lt;/p&gt;

&lt;p&gt;/&lt;em&gt;SHORTHAND&lt;/em&gt;/&lt;/p&gt;

&lt;p&gt;.heading {&lt;br&gt;
   font: italix bold 3rem/1.4 Arial, sans-serif;&lt;br&gt;
 }&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Background properties

And of course background properties can be condensed as well. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
/&lt;em&gt;LONG&lt;/em&gt;/&lt;br&gt;
.background {&lt;br&gt;
  background-color: wheat;&lt;br&gt;
  background-image: url(../images/bg-cool.png);&lt;br&gt;
  background-repeat: no-repeat;&lt;br&gt;
  background-position: left top;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;/&lt;em&gt;Shorthand&lt;/em&gt;/&lt;/p&gt;

&lt;p&gt;.background {&lt;br&gt;
   background: what url(../images/bg-cool.png) no-repeat left top;&lt;br&gt;
 }&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
--------

# SASS time-saving mixins

Using SASS makes your CSS codes very efficient. SASS is a CSS preprocessor and we have used it in almost every project. Here I am sharing some SASS mixins you can use to make your code efficient. 


### Center Blocks

We always find our self needing to center a block element so this mixin saves me a little typing. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
@mixin center-block {&lt;br&gt;
    margin: {&lt;br&gt;
        left: auto; &lt;br&gt;
        right: auto; &lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// Use case&lt;br&gt;
.wrapper {&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 center-block(); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// Output&lt;br&gt;
.wrapper {&lt;br&gt;
    margin-left: auto;&lt;br&gt;
    margin-right: auto; &lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Pseudo

When using pseudo element you always need these 3 properties so why not put them in a mixin!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
@mixin pseudo (&lt;br&gt;
    $display: block, $pos: absolute, $content: "";&lt;br&gt;
) {&lt;br&gt;
    conent: $content;&lt;br&gt;
    display: $display;&lt;br&gt;
    position: $pos;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
// Use case - default&lt;/p&gt;

&lt;p&gt;.element:before {&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 pseudo(); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// output&lt;br&gt;
.element::before {&lt;br&gt;
    content: ""; &lt;br&gt;
    display: block; &lt;br&gt;
    position: absolute;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
// Use case  - with args&lt;/p&gt;

&lt;p&gt;.element:befire (&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 pseudo {&lt;br&gt;
        inline-block, relative, "*"&lt;br&gt;
    ); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// output&lt;/p&gt;

&lt;p&gt;.element:before {&lt;br&gt;
    content: "*";&lt;br&gt;
    display: inline-block;&lt;br&gt;
    position: relative;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Ratio

A ratio mixin to create scalable elements (usually images). Since aspect ratio isn't very well-supported yet this alternative is useful. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
@mixin responsive-ratio($x, $y) {&lt;br&gt;
    padding-top: unquote(($y / $x) * 100 + "%");&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// use case &lt;br&gt;
.wide-image {&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 responsive-ratio(16, 9); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// output&lt;br&gt;
.wide-image {&lt;br&gt;
    padding-top: 56.25%;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Truncate

Truncating text is another useful mixin have since it can be easy to forget the syntax. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
@mixin truncate ($width-limit) {&lt;br&gt;
    max-width: $width-limit;&lt;br&gt;
    white-space: nowrap; &lt;br&gt;
    overflow: hidden; &lt;br&gt;
    text-overflow: hidden;&lt;br&gt;
    text-overflow: ellipsis; &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// Use case&lt;br&gt;
.excerpt {&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 truncate(10rem); &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// output&lt;br&gt;
.excerpt {&lt;br&gt;
    max-width: 10rem; &lt;br&gt;
    white-space: nowrap; &lt;br&gt;
    overflow: hidden; &lt;br&gt;
    text-overflow: ellipsis;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Cover background

If you're working a lot with cover background images this one can save a lot of typing. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
@mixin cover-background ($image-src) {&lt;br&gt;
    background-image: url($image-src);&lt;br&gt;
    background-repeat: no-repeat; &lt;br&gt;
    background-size: cover; &lt;br&gt;
    background-position: center; &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// use case &lt;/p&gt;

&lt;p&gt;.hero {&lt;br&gt;
    &lt;a class="mentioned-user" href="https://dev.to/include"&gt;@include&lt;/a&gt;
 cover-background("../image/main.png")&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// output&lt;/p&gt;

&lt;p&gt;.hero {&lt;br&gt;
    background-image: url("../image/main.png");&lt;br&gt;
    background-repeat: no-repeat;&lt;br&gt;
    background-size: cover;&lt;br&gt;
    background-position: center;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
### Organizing

Keep you SCSS files organized by keeping you mixing in a separate file. Since mixins don't generate any output until they are used it's easier to keep them in a separate file and import whenever you need to use one. 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
css&lt;br&gt;
// keep all mixins together&lt;br&gt;
@import "mixin.scss"; &lt;/p&gt;

&lt;p&gt;// Separate files for mixins&lt;br&gt;
@import "center-block.scss";&lt;br&gt;
@import "pseudo.scss"; &lt;br&gt;
@import "responsive-ratio.scss"; &lt;br&gt;
@import "truncate.scss"; &lt;br&gt;
@import "cover-background.scss"; &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


--------

Thank you For Reading🤩 Subscribe to our  [newsletter](https://www.devintro.com) , we send it occasionally with amazing news, resources and many thing. Also if you find something useful share to world🥺. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
