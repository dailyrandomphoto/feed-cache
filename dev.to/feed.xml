<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Demystifying machine learning for beginners by making stuff</title>
      <author>Code_Jedi</author>
      <pubDate>Sat, 31 Jul 2021 08:24:38 +0000</pubDate>
      <link>https://dev.to/code_jedi/demystifying-machine-learning-for-beginners-by-making-stuff-7de</link>
      <guid>https://dev.to/code_jedi/demystifying-machine-learning-for-beginners-by-making-stuff-7de</guid>
      <description>&lt;h3&gt;
  &lt;a href="#if-youre-a-confused-beginner-like-i-was-when-just-starting-out-with-machine-learning-in-python-then-stick-around-because-today-ill-be-trying-my-best-at-demystifying-and-simplifying-machine-learning-for-you"&gt;
  &lt;/a&gt;
  If you're a confused beginner like I was when just starting out with machine learning in python, then stick around, because today, I'll be trying my best at demystifying and simplifying machine learning for you!
&lt;/h3&gt;




&lt;p&gt;&lt;strong&gt;To start off, I presume that you would like to learn machine learning for the following reasons:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Working with datasets&lt;/li&gt;
&lt;li&gt;Visualizing data&lt;/li&gt;
&lt;li&gt;Predicting data&lt;/li&gt;
&lt;li&gt;Classifying data&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;In this tutorial we're going to be making a python script, that will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load a dataset&lt;/li&gt;
&lt;li&gt;Visualize the dataset&lt;/li&gt;
&lt;li&gt;Classify a new piece of data given the dataset&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h2&gt;

&lt;p&gt;First, let's import the required libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn import preprocessing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;If you don't have some of these installed, you can install them by using &lt;code&gt;pip install&lt;/code&gt; or &lt;code&gt;pip3 install&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Next, we're going to load-in the dataset which we're going to be using for this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn import preprocessing

df = pandas.read_csv('IRIS.csv')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;For this this project, we're going to be using the classic iris dataset which you can download &lt;a href="https://www.kaggle.com/arshid/iris-flower-dataset"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#now-comes-the-tricky-bit"&gt;
  &lt;/a&gt;
  Now comes the tricky bit...
&lt;/h3&gt;

&lt;p&gt;Add these lines of code to your python script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model = KNeighborsClassifier(n_neighbors=3)

features = list(zip(df["sepal_length"], df["sepal_width"]))

model.fit(features,df["species"])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let me explain...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we define our model and give it 3 possible classes into which a new piece of data can be classified.&lt;/li&gt;
&lt;li&gt;We then define the "features" variable which is going to take the "sepal_length" and "sepal_width" columns as the characteristics that we're going to compare in order to classify new pieces of data.&lt;/li&gt;
&lt;li&gt;Finally, we fit our model with the names of the 3 Iris species, as well as their corresponding "sepal_length" and "sepal_width" variables.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Before, we start predicting new pieces of data, let's plot our dataset using a scatter graph. In our plot, the X axis will be representing the sepal_length and the Y axis will be representing the sepal_width. We're also going to color code the different species of Iris flowers by adding &lt;code&gt;hue='species'&lt;/code&gt;. and then finally we'll define the data that we're going to be plotting as our Iris dataset by adding &lt;code&gt;data=df&lt;/code&gt; to the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sns.scatterplot(x='sepal_length', y='sepal_width',
                hue='species', data=df, )

# Placing Legend outside the Figure
plt.legend(bbox_to_anchor=(1, 1), loc=1)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Here's how the scatter graph should look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRP1xBwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1zjwh3j86ky6vwmu9cr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRP1xBwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1zjwh3j86ky6vwmu9cr.png" alt="scatter"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;To start classifying new pieces of data, first comment out the last code snippet like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn import preprocessing


df = pandas.read_csv('IRIS.csv')
model = KNeighborsClassifier(n_neighbors=3)

features = list(zip(df["sepal_length"], df["sepal_width"]))

model.fit(features,df["species"])

"""sns.scatterplot(x='sepal_length', y='sepal_width',
                hue='species', data=df, )

# Placing Legend outside the Figure
plt.legend(bbox_to_anchor=(1, 1), loc=1)

plt.show()
"""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add these 2 lines of code to the end of your script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;predicted = model.predict([[4.6,5.8]]) 
print(predicted) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will simply predict which species of Iris flower is one that has a sepal_length of 4.6 and a sepal_width of 5.8.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#now-if-you-run-your-code-your-output-should-look-like-this"&gt;
  &lt;/a&gt;
  Now if you run your code, your output should look like this:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Iris-setosa']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that our new mystery Iris flower has been classified as an "Iris-setosa".&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#congradulations"&gt;
  &lt;/a&gt;
  Congradulations!
&lt;/h2&gt;

&lt;p&gt;You've made your first machine learning project!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You can now experiment with this code as well as try some new datasets(you can find lots of great ones on &lt;a href="https://www.kaggle.com/"&gt;https://www.kaggle.com/&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt;







&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Weekly"&gt;my weekly python newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" alt="minecraft in python"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>ai</category>
      <category>programming</category>
    </item>
    <item>
      <title>Easily download and save open source project documents!</title>
      <author>Matin</author>
      <pubDate>Sat, 31 Jul 2021 07:49:56 +0000</pubDate>
      <link>https://dev.to/matin/easily-download-and-save-open-source-project-documents-1j89</link>
      <guid>https://dev.to/matin/easily-download-and-save-open-source-project-documents-1j89</guid>
      <description>&lt;p&gt;Some developers are accustomed to storing documents for an open source project and are unable to read them online. In this case, downloading and saving the &lt;code&gt;docs&lt;/code&gt; folder in projects is difficult, unless the whole project is cloned and then this folder is copied from there.&lt;/p&gt;

&lt;p&gt;Here we tried to write a small but useful tool that does this for us, using this small tool in Python just enter the name of the project and then simply download the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-see-this-small-project-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ThisIsMatin/Docslize"&gt;* See this small project on GitHub.&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Contributing in this project is also open, if you want to contribute, you can add more project documentation links to the project or add a new feature to the project :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>discuss</category>
    </item>
    <item>
      <title>HOVER.CSS</title>
      <author>aasim-syed</author>
      <pubDate>Sat, 31 Jul 2021 07:39:15 +0000</pubDate>
      <link>https://dev.to/aasimsyed/hover-css-5cjo</link>
      <guid>https://dev.to/aasimsyed/hover-css-5cjo</guid>
      <description>&lt;p&gt;This is one of the most impressive and helpful websites out there!&lt;br&gt;
this has effects of buttons and effects that is pretty mind blowing.Its written in LESS,SCSS and ofcourse CSS3.&lt;br&gt;
All Hover.css effects make use of a single element (with the help of some pseudo-elements where necessary), are self contained so you can easily copy and paste them, and come in CSS, Sass, and LESS flavours.&lt;/p&gt;

&lt;p&gt;Many effects use CSS3 features such as transitions, transforms and animations. Old browsers that don't support these features may need some extra attention to be certain a fallback hover effect is still in place.&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>less</category>
      <category>scss</category>
    </item>
    <item>
      <title>A Guide to Git Stash</title>
      <author>Pragati Verma</author>
      <pubDate>Sat, 31 Jul 2021 07:34:22 +0000</pubDate>
      <link>https://dev.to/pragativerma18/a-guide-to-git-stash-2h5d</link>
      <guid>https://dev.to/pragativerma18/a-guide-to-git-stash-2h5d</guid>
      <description>&lt;p&gt;Git is an amazingly vast tool for developers to manage development workflows, and it goes without saying that there's more to git than the basic commands that we use generally to collaborate on or contribute to team projects. &lt;/p&gt;

&lt;p&gt;For instance, there might be a situation where you are mid-way in implementing a new feature for your product and suddenly a severe bug report pops in. Because of this, you have to keep aside your feature and focus on resolving the bug, but you can't commit the partial code and also can't throw away the progress until now. This highlights the need for a temporary space where you can store your partial changes and later on commit them. Well, guess what - git already has it solved for you via &lt;code&gt;git stash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vd34tt1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627713009770/NlBMsjnM2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vd34tt1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627713009770/NlBMsjnM2.png" alt="index.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article requires basic knowledge of git.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-stash"&gt;
  &lt;/a&gt;
  What is a stash?
&lt;/h2&gt;

&lt;p&gt;Git has an area called the &lt;strong&gt;stash&lt;/strong&gt; where you can temporarily store a snapshot of your changes without committing them to the repository. It’s separate from the working directory, the staging area, or the repository. Furthermore, there can be more than one stash. The stashes could be understood as temporary shelves to put your data in until you're sure where to put it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGGo2Mdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715936825/8wY1J1rsB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGGo2Mdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715936825/8wY1J1rsB.png" alt="git-stash-stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The stash is local to your Git repository; stashes are not transferred to the server when you push.&lt;/p&gt;

&lt;p&gt;Learn more about what is stash &lt;a href="https://stackoverflow.com/questions/11260981/what-is-a-stash"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This functionality is useful when you’ve made changes to a branch that you aren’t ready to commit to, but you need to switch to another branch without losing those changes.&lt;/p&gt;

&lt;p&gt;Now, that we know what is a stash, let's see how to stash your work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stashing-changes"&gt;
  &lt;/a&gt;
  Stashing changes
&lt;/h2&gt;

&lt;p&gt;To save your changes in the stash, you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "optional message for yourself"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take your changes, record them internally, then clear the working directory. This allows you to switch to a new branch and develop other features without worrying about your partial commit messing anything up. &lt;/p&gt;

&lt;p&gt;By default, running &lt;code&gt;git stash&lt;/code&gt; will stash:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changes that have been added to your index (staged changes)&lt;/li&gt;
&lt;li&gt;changes made to files that are currently tracked by Git (unstaged changes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it will not stash:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new files in your working copy that have not yet been staged&lt;/li&gt;
&lt;li&gt;files that have been ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the changes you want to stash need to be on tracked files. If you created a new file and try to stash your changes, you may get the error &lt;code&gt;No local changes to save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, adding the &lt;code&gt;-u&lt;/code&gt; option (or &lt;code&gt;--include-untracked&lt;/code&gt;) tells &lt;code&gt;git stash&lt;/code&gt; to also stash your untracked files, and you can include changes to ignored files as well by passing the &lt;code&gt;-a&lt;/code&gt; option (or &lt;code&gt;--all&lt;/code&gt;) when running &lt;code&gt;git stash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ize17Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627714474196/Kg1Q0nZr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ize17Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627714474196/Kg1Q0nZr0.png" alt="Git Stash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-stashed-changes"&gt;
  &lt;/a&gt;
  View Stashed Changes
&lt;/h2&gt;

&lt;p&gt;To see what is in your stash, run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This returns a list of your saved snapshots in the format &lt;code&gt;stash@{0}: BRANCH-STASHED-CHANGES-ARE-FOR: MESSAGE.&lt;/code&gt; The &lt;code&gt;stash@{0}&lt;/code&gt; part is the name of the stash, and the number in the curly braces (&lt;code&gt;{ }&lt;/code&gt;) is the index of that stash. If you have multiple changesets stashed, each one will have a different index. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git stash list
stash@{0}: On main: add style to our site
stash@{1}: WIP on main: 5002d47 our new homepage
stash@{2}: WIP on main: 5002d47 our new homepage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhLCXRZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715861410/-FUus5Tm5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhLCXRZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715861410/-FUus5Tm5.jpeg" alt="Stash list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, stashes are identified simply as a &lt;strong&gt;WIP&lt;/strong&gt; – work in progress – on top of the branch and commit that you created the stash from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#applying-stashed-changes"&gt;
  &lt;/a&gt;
  Applying Stashed Changes
&lt;/h2&gt;

&lt;p&gt;To retrieve and apply the changes out of the stash to the current branch, there are two options:&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply STASH-NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command applies the changes and leaves a copy in the stash. This is useful if you want to apply the same stashed changes to multiple branches.&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop STASH-NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command applies the changes and removes the files from the stash.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you skip the STASH_NAME in the above commands, git will basically perform the asked action with the latest stashed change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#delete-stashed-changes"&gt;
  &lt;/a&gt;
  Delete Stashed Changes
&lt;/h2&gt;

&lt;p&gt;If you want to remove stashed changes without applying them, run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash drop STASH-NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To clear the entire stash, run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;git stash&lt;/code&gt; isn't exactly a common command, it can be a useful tool for making meaningful commits. Keep this in mind the next time you wish you could put something on hold and return to it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3t69Xtt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715825347/XrFbRAkLq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3t69Xtt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715825347/XrFbRAkLq.png" alt="keep calm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for this article. I hope that it would have helped you understand the basics of &lt;code&gt;git stash&lt;/code&gt;. Please comment with your valuable suggestions and feedback.&lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/pragativerma18/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/PragatiVerma18/"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/pragati_verma18"&gt;Twitter&lt;/a&gt; | &lt;a href="https://medium.com/@itispragativerma"&gt;Medium&lt;/a&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>webdev</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Things You Might Not Know About React Components</title>
      <author>Yogesh Chavan</author>
      <pubDate>Sat, 31 Jul 2021 07:26:18 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/things-you-might-not-know-about-react-components-1i57</link>
      <guid>https://dev.to/myogeshchavan97/things-you-might-not-know-about-react-components-1i57</guid>
      <description>&lt;p&gt;When working with React, we usually return a JSX from a component.&lt;/p&gt;

&lt;p&gt;But apart from returning a JSX, we can also return a string or a number or an array from a &lt;br&gt;
component?&lt;/p&gt;

&lt;p&gt;So, all the following examples are valid in React.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#return-a-string-from-a-component"&gt;
  &lt;/a&gt;
  Return a string From A Component
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SimpleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is awesome!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#return-a-number-from-a-component"&gt;
  &lt;/a&gt;
  Return a number From A Component
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SimpleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#return-an-array-from-a-component"&gt;
  &lt;/a&gt;
  Return an Array From A Component
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SimpleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SimpleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&amp;gt;, &amp;lt;li key="second"&amp;gt;Second Item&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Returning array from component is very useful to make the component flexible as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderNav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;links&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Home&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;About&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Contact&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderNav&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderContent&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showOnTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showOnTop&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GA7ySsbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715989628/Hi-RkxgnA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GA7ySsbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627715989628/Hi-RkxgnA.gif" alt="flexible.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/flexible-component-sjgft?file=/src/App.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, If the &lt;code&gt;showOnTop&lt;/code&gt; value is &lt;code&gt;true&lt;/code&gt; then we're showing the navigation first and then content and If the &lt;code&gt;showOnTop&lt;/code&gt; value is &lt;code&gt;false&lt;/code&gt; then we're showing the content first and then navigation.&lt;/p&gt;

&lt;p&gt;So returning an array from a component helps to get this flexibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Understanding Ruby - For vs Each</title>
      <author>Brandon Weaver</author>
      <pubDate>Sat, 31 Jul 2021 06:58:48 +0000</pubDate>
      <link>https://dev.to/baweaver/understanding-ruby-for-vs-each-47ae</link>
      <guid>https://dev.to/baweaver/understanding-ruby-for-vs-each-47ae</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;For those coming from other languages with &lt;code&gt;for&lt;/code&gt; loops the concept of &lt;code&gt;each&lt;/code&gt;, anonymous functions, blocks, and all of those new terms feels very foreign.&lt;/p&gt;

&lt;p&gt;Why is it that Ruby doesn't use &lt;code&gt;for&lt;/code&gt; loops? Well we're going to cover that one today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#difficulty"&gt;
  &lt;/a&gt;
  Difficulty
&lt;/h3&gt;

&lt;p&gt;Foundational&lt;/p&gt;

&lt;p&gt;Some knowledge required of functions in Ruby. This post focuses on foundational and fundamental knowledge for Ruby programmers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite-reading"&gt;
  &lt;/a&gt;
  Prerequisite Reading:
&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;

&lt;p&gt;Suggested to read &lt;a href="https://dev.to/baweaver/understanding-ruby-blocks-procs-and-lambdas-24o0"&gt;Understanding Ruby - Blocks, Procs, and Lambdas&lt;/a&gt; after this article if you haven't already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-vs-each-high-level-overview"&gt;
  &lt;/a&gt;
  For vs Each – High Level Overview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ruby-does-have-a-raw-for-endraw-loop"&gt;
  &lt;/a&gt;
  Ruby does have a &lt;code&gt;for&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;Let's start with an acknowledgement: Ruby &lt;em&gt;does&lt;/em&gt; have a &lt;code&gt;for&lt;/code&gt; loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;span class="c1"&gt;# 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...but you're not going to see it in common use. You're going to see &lt;code&gt;each&lt;/code&gt; far more frequently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-raw-each-endraw-"&gt;
  &lt;/a&gt;
  Introducing &lt;code&gt;each&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;each&lt;/code&gt; in Ruby is the de facto way of iterating through a collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# 2&lt;/span&gt;
&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;span class="c1"&gt;# 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few things here which may not be familiar, which are covered in more detail in &lt;a href="https://dev.to/baweaver/understanding-ruby-blocks-procs-and-lambdas-24o0"&gt;that article mentioned above&lt;/a&gt;, but for now the important parts:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do ... end&lt;/code&gt; starts what we call a block function, or anonymous function in other languages, and &lt;code&gt;|item|&lt;/code&gt; represents the arguments to that function. For each iteration of the loop each item will be fed into that function as an argument.&lt;/p&gt;

&lt;p&gt;Ruby uses blocks &lt;em&gt;heavily&lt;/em&gt;, and you'll find them commonly both in reading and writing code in the language. Their usage goes far beyond &lt;code&gt;each&lt;/code&gt;, and we'll mention that in a bit, but first let's cover a few concerns about &lt;code&gt;for&lt;/code&gt; in Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concerns-with-for"&gt;
  &lt;/a&gt;
  Concerns with For
&lt;/h2&gt;

&lt;p&gt;There are more than a few legitimate issues with &lt;code&gt;for&lt;/code&gt; loops in Ruby, and we'll quickly cover a few of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theyre-implemented-with-each"&gt;
  &lt;/a&gt;
  They're Implemented with Each
&lt;/h3&gt;

&lt;p&gt;Yep. The &lt;code&gt;for&lt;/code&gt; loop in Ruby is using &lt;code&gt;each&lt;/code&gt; behind the scenes, so even if you're not using it you're still using it. That also means that it's slower:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'benchmark/ips'&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_a&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, ...&lt;/span&gt;

&lt;span class="no"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ips&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"for loop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;bench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"each loop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Warming up --------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;#             for loop    22.017k i/100ms&lt;/span&gt;
&lt;span class="c1"&gt;#            each loop    23.543k i/100ms&lt;/span&gt;
&lt;span class="c1"&gt;# Calculating -------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;#             for loop    218.466k (± 2.6%) i/s - 1.101M in 5.042495s&lt;/span&gt;
&lt;span class="c1"&gt;#            each loop    231.274k (± 2.1%) i/s - 1.177M in 5.092110s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Granted this is not a &lt;em&gt;significant&lt;/em&gt; difference, but it is something to keep in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shadowing-and-scoping"&gt;
  &lt;/a&gt;
  Shadowing and Scoping
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt; loops leak variables into their outer scope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 100&lt;/span&gt;

&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5050&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means if the code around it has an &lt;code&gt;item&lt;/code&gt; it'll be overwritten. Same with &lt;code&gt;sum&lt;/code&gt;. Contrast with &lt;code&gt;each&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;item2&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class="n"&gt;sum2&lt;/span&gt;
&lt;span class="c1"&gt;# NameError (undefined local variable or method `sum2' for main:Object)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll get into that in a moment, but for this moment know that block functions are isolated in that outside code cannot see inside of them, but they can certainly see outside code around them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-each"&gt;
  &lt;/a&gt;
  The Case for Each
&lt;/h2&gt;

&lt;p&gt;So why would one want to use anonymous functions, &lt;code&gt;each&lt;/code&gt;, and related methods in Ruby rather than a &lt;code&gt;for&lt;/code&gt; loop? This section will look into that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closures"&gt;
  &lt;/a&gt;
  Closures
&lt;/h3&gt;

&lt;p&gt;Going back to the above section, let's clarify what we mean by what the function can "see" or "not see".&lt;/p&gt;

&lt;p&gt;A block function is what's called a closure, meaning it captures the outside context (think variables) inside the function, but the outside code cannot see inside, hence &lt;code&gt;sum2&lt;/code&gt; being undefined here. Believe it or not that's quite useful later on, but has been known as a stumbling block to some.&lt;/p&gt;

&lt;p&gt;Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can "see" &lt;code&gt;sum&lt;/code&gt; as it's in the context of the block function, or what's immediately around it when it runs. This can be really useful for more advanced code, as that means functions effectively have memory, and in Ruby you can even redefine where it finds its memory by changing its context, but that's considerably more advanced.&lt;/p&gt;

&lt;p&gt;The outside code, however, cannot see &lt;code&gt;item&lt;/code&gt; as it's only visible inside the block function. This can present some headaches, and early on in my Ruby career this confused me to no end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'net/ssh'&lt;/span&gt;

&lt;span class="c1"&gt;# Don't actually use passwords if you do this, use keys&lt;/span&gt;
&lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSH&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hostname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exec!&lt;/span&gt; &lt;span class="s2"&gt;"cat /tmp/running.cfg"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those cases I used global variables back then, which I would not recommend, instead prefer this pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;

&lt;span class="c1"&gt;# Don't actually use passwords if you do this, use keys&lt;/span&gt;
&lt;span class="no"&gt;Net&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSH&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hostname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exec!&lt;/span&gt; &lt;span class="s2"&gt;"cat /tmp/running.cfg"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; local-variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...or if you read the &lt;code&gt;Net::SSH&lt;/code&gt; docs you might find that the block isn't even entirely necessary for this and get around the issue entirely. Anyways, point being there are some traps there potentially for the unaware, so be careful on what isolated block function scopes mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enumerable"&gt;
  &lt;/a&gt;
  Enumerable
&lt;/h3&gt;

&lt;p&gt;Ruby has a collections library called &lt;code&gt;Enumerable&lt;/code&gt; which is one of the most powerful features of the language.&lt;/p&gt;

&lt;p&gt;Let's say I wanted to get the sum of every even number greater than 4 in a collection, but double them as well. With a for loop that might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5088&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;Enumerable&lt;/code&gt; we can express each one of those conditions as a distinct transformation or filtering of the list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5088&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives us more flexibility in expressing multiple actions we want to take against a collection as distinct pieces rather than combining them all as one.&lt;/p&gt;

&lt;p&gt;Some of those, you'll find, can be exceptionally useful beyond the trivial, like a count of what letters words start with in some text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%w(the rain in spain stays mainly on the plane)&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;tally&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; {"t"=&amp;gt;2, "r"=&amp;gt;1, "i"=&amp;gt;1, "s"=&amp;gt;2, "m"=&amp;gt;1, "o"=&amp;gt;1, "p"=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...or grouping a collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; {3=&amp;gt;["the", "the"], 4=&amp;gt;["rain"], 2=&amp;gt;["in", "on"], 5=&amp;gt;["spain", "stays", "plane"], 6=&amp;gt;["mainly"]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The flexibility there is really something, and because these can all be chained together you can easily break them out into separate functions and refactor out entire parts of the chain altogether if you need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#down-the-rabbit-hole"&gt;
  &lt;/a&gt;
  Down the Rabbit Hole
&lt;/h3&gt;

&lt;p&gt;Now there are a lot of things I could get into on where this can go and the implications, but as this is a more beginner friendly article that would not be very kind, so we'll instead hint at a few of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block functions can have their entire context changed&lt;/li&gt;
&lt;li&gt;A lot of Enumerable-like functions can be parallelizeable as they're functionally pure&lt;/li&gt;
&lt;li&gt;Closures keep context, meaning you have memory to do some real fun things&lt;/li&gt;
&lt;li&gt;Many Ruby classes, including your own, can be coerced into functions&lt;/li&gt;
&lt;li&gt;A significant number of programming patterns are made much easier by the presence of functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and a lot more than I have time for in this particular article, but I would highly encourage you to read into the more advanced article on the types of functions in Ruby:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/baweaver/understanding-ruby-blocks-procs-and-lambdas-24o0"&gt;Understanding Ruby - Blocks, Procs, and Lambdas&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;This article is a very high level overview, and does definitely wave over some details I could get into. Be sure to read other parts of the series if you want to get more into the weeds on this, as there's a lot of fascinating detail there.&lt;/p&gt;

&lt;p&gt;The intent of this article is for those coming from languages which primarily use &lt;code&gt;for&lt;/code&gt; loops rather than iterables or enumerable, depending on the way you describe them. That said, most all languages including Java have a Streaming type library which does something very close to this.&lt;/p&gt;

&lt;p&gt;If you really want to get into the power of block functions and why that's significant be sure to watch out for future posts on functional programming, but until then that's all I have for today.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>functional</category>
    </item>
    <item>
      <title>15 Git Command I use Everyday</title>
      <author>Coders Helper</author>
      <pubDate>Sat, 31 Jul 2021 06:56:40 +0000</pubDate>
      <link>https://dev.to/learn_hacking/15-git-command-i-use-everyday-3nak</link>
      <guid>https://dev.to/learn_hacking/15-git-command-i-use-everyday-3nak</guid>
      <description>&lt;p&gt;When I started my career, I was always afraid of losing my code changes. Sometimes, I would copy the code to text files just to be sure that I won't miss something.&lt;/p&gt;
&lt;br&gt;That's not a great practice. If you know how to use git properly, you won't have these doubts.&lt;br&gt;Git has everything you need to make you safe. And much more.&lt;br&gt;Let's dive in.&lt;br&gt;&lt;b&gt;Read More&lt;/b&gt;: &lt;a href="https://www.codelivly.com/11-git-commands-i-use-every-day/"&gt;&lt;span&gt;G&lt;b&gt;its Command I use everyday&lt;/b&gt;&lt;/span&gt;&lt;/a&gt;

</description>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GSoC First Evaluations: All You Need to Know</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Sat, 31 Jul 2021 06:54:41 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf</link>
      <guid>https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Even before applying to Google Summer of Code I had the question of what GSoC evaluations look like. Are students passed easily? It was time to know. It was Evaluation Time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting GSoC 2021, Google modified their rules to have 2 evaluations from 3 earlier. This meant an evaluation at the 5 week mid-way mark between the program and one at the end of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdCaVQXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhc9za4d7116o4fzl9cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdCaVQXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhc9za4d7116o4fzl9cc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had just finished raising a PR for the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/8"&gt;Add User Defined Options&lt;/a&gt;&lt;/strong&gt; feature on my GSoC project — &lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/projects/#6521788818784256"&gt;Poll App Mega Extensions&lt;/a&gt;&lt;/strong&gt;. It would allow channel members within a room on Rocket.Chat to add options to an already created poll before it ended.&lt;/p&gt;

&lt;p&gt;And then this dropped into my mailbox. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2UmHVHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzbdaou0bpzc83fsr9m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2UmHVHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzbdaou0bpzc83fsr9m8.png" alt="Opening mail for First Evaluations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, I had been sternly following my work plan and had finished my GSoC project exactly 50% before the evaluations began, as I had planned.&lt;/p&gt;

&lt;p&gt;Evaluations comprise of a two-way feedback where students and mentor review each other based on the 5 weeks they’ve spent working together. Once the student passes the evaluation, they’re sent out 45% of their stipend — $675 for Indian students.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-you-required-to-do-during-evaluations"&gt;
  &lt;/a&gt;
  What Are You Required to Do During Evaluations?
&lt;/h2&gt;

&lt;p&gt;Students need to fill a form comprising of 4 sections:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-you"&gt;
  &lt;/a&gt;
  About You
&lt;/h3&gt;

&lt;p&gt;This section requires you to fill details about your prior relation with open-source and your GSoC organization before GSoC started. Google later uses this to shell out statistics, for example, how many students were first-time GSoCers. It also uses this section to get an internal estimate of how long before GSoC actually begins do people start gearing up for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h3&gt;

&lt;p&gt;Open-source is all about communication. Within this section you’re asked about the mode and frequency of communication between you and your mentors. The same question is asked to your mentor as well. It’s scary and funny to think what if both of your answers differ here (you say everyday and mentor says once a week : P ).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gsoc-experience"&gt;
  &lt;/a&gt;
  GSoC Experience
&lt;/h3&gt;

&lt;p&gt;This one’s a more subjective section. In 2000 characters each you’re required to write what are your most favorite and most challenging parts of participating in GSoC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h3&gt;

&lt;p&gt;This section involves two questions — one is the feedback for your organization and mentor (this becomes visible to your organization after submitting) and the second is feedback for Google (GSoC students in India mutually decided on Whatsapp to ask Google for swags in this question!). Google be like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZLSMIbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3dva95v2c65tfomozg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZLSMIbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3dva95v2c65tfomozg4.png" alt="Google Be Like"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mentors have their own questionare about students. In one of the questions they’re required to provide student feedback. This is sent to the student in the evaluation results mail along with the pass/fail.&lt;/p&gt;

&lt;p&gt;In case you’re interested in viewing the exact questions that mentors and students have to answer, Google has provided a preview &lt;strong&gt;&lt;a href="https://developers.google.com/open-source/gsoc/help/evaluations"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s Next?
&lt;/h2&gt;

&lt;p&gt;In case you’re sticking to your work plan and have been consistently communicating with your mentor — Congratulations you’ll pass your first evaluations and get those dollars 💰.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jshdKGeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktediw142yl33n9gluu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jshdKGeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktediw142yl33n9gluu8.png" alt="First Evaluation Results: Passed 🎉"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cool feature that I’ve started working on next is pre-formed polls. For example, an Overrated/Underrated Poll or an Emoji Poll! The user just needs to select the poll type and the Poll App will pre-fill all the options!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GY1EVwUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuse5207ekdc7dv7o28u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GY1EVwUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuse5207ekdc7dv7o28u.png" alt="Pre-formed Emoji Poll Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out my &lt;strong&gt;&lt;a href="https://github.com/orgs/RocketChat/projects/40"&gt;GSoC Project Board&lt;/a&gt;&lt;/strong&gt;. I continuosly try to keep it updated with what I’m working on!&lt;/p&gt;

&lt;p&gt;I write biweekly about my GSoC journey at Rocket.Chat and this was the fourth blog in this series. Follow my voyage on &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani"&gt;DEV&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt;&lt;/strong&gt; ⭐️&lt;/p&gt;

&lt;p&gt;In case you haven’t checked out my previous blog about Coding Phase 1 at GSoC, go check it out now— it includes all that I’ve been building at Rocket.Chat!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Commit, Push, Merge: GSoC Coding Phase 1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;strong&gt;&lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;&lt;/strong&gt; 🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open-source contributor and enthusiast. You can connect with him on &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://twitter.com/rohanlekhwani"&gt;Twitter&lt;/a&gt;&lt;/strong&gt; and his &lt;strong&gt;&lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>GitHub repos for Rock Stars</title>
      <author>Ayoub Abidi</author>
      <pubDate>Sat, 31 Jul 2021 06:22:15 +0000</pubDate>
      <link>https://dev.to/ayoub3bidi/github-repos-for-rock-stars-4b2a</link>
      <guid>https://dev.to/ayoub3bidi/github-repos-for-rock-stars-4b2a</guid>
      <description>&lt;p&gt;GitHub is the number one platform for sharing all kinds of technologies, frameworks, libraries, and collections of all sorts. But with the sheer mass also comes the problem to find the most useful repositories.&lt;br&gt;
Here I have created a list of the most valuable repos, that every developer should study, irrespective of where they are into their career journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-roadmap"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg8ayKzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocvlwccteh4fkof0go3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg8ayKzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocvlwccteh4fkof0go3n.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
A lot of students and newbie’s (me included) in programming get confused about what path they should follow step by step to become a developer. This is a complete chart including the technology in each category of development (frontend, backend, DevOps..) that will give you a clear understanding of what you should learn next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome-python"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/vinta/awesome-python"&gt;Awesome Python&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0a1Lryiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzycxp7pwlicy9q8m981.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0a1Lryiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzycxp7pwlicy9q8m981.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
This GitHub repository has included a list of awesome Python frameworks, libraries, software, and resources. You can also find resources for podcasts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-ideas-collection"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/florinpop17/app-ideas"&gt;App Ideas Collection&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbiKT3fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq32solcbodp9fn1slow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbiKT3fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq32solcbodp9fn1slow.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
Have you ever wanted to build something but you had no idea what to do?&lt;br&gt;
This repos contains a list of app ideas categorized according to three tiers of programming experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-apis"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0Fg6g1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4npl7i3ww8ot5k9ccdqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0Fg6g1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4npl7i3ww8ot5k9ccdqk.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
If you are a developer then definitely you will have to deal with APIs for your application. Public APIs are a great list of free APIs that you can use for your projects and applications. It covers various topics such as business, anime, animals, news, finance, games, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome-cheatsheets"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/LeCoupa/awesome-cheatsheets"&gt;Awesome Cheatsheets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VU_bfP98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88cwnmb3vuao35o61yiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VU_bfP98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88cwnmb3vuao35o61yiz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This is the cheatsheet of cheatsheets. This type of content, when well-crafted, makes your job easier as it becomes the aides-memoire for any dev daily tasks. As such it is a collection of cheatsheets for all popular programming languages, frameworks and development tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freefordev"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ripienaar/free-for-dev"&gt;free-for.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkakFukn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu2emb7d03o22s9d7cr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkakFukn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu2emb7d03o22s9d7cr9.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
This great repository was created to helping developers find software (SaaS, PaaS, IaaS) and similar offerings that have free tiers. Using great software for free? Sounds awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-seconds-of-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/30-seconds/30-seconds-of-golang"&gt;30 Seconds of Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqBRxLlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbkhe0zfqkpi24xpv04u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqBRxLlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbkhe0zfqkpi24xpv04u.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
This repository contains short JavaScript code snippets for all your development needs.&lt;br&gt;
You should definitely take a look at this repository because it’s got some great solutions to recurring programming problems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is it! I'm hoping you will use those repos wisely to become rock star developers. &lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Visual Studio Code Tips &amp; Tricks </title>
      <author>Sidhhh</author>
      <pubDate>Sat, 31 Jul 2021 05:28:10 +0000</pubDate>
      <link>https://dev.to/sidhhh/fun-vs-code-tips-tricks-nag</link>
      <guid>https://dev.to/sidhhh/fun-vs-code-tips-tricks-nag</guid>
      <description>&lt;p&gt;Visual Studio Code is a popular code editor used by many devs since it is powerful, minimal, and open source. &lt;/p&gt;

&lt;p&gt;Here is a list of VS code tricks &amp;amp; tips.&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command Palette
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the command palette by combining ctrl + shift + p.&lt;/li&gt;
&lt;li&gt;The Command Palette allows you to access various available commands just by typing a keyword instead of navigating through menus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#launching-vs-code-from-command-line"&gt;
  &lt;/a&gt;
  Launching VS Code from Command Line
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the command palette (ctrl + shift + p) and type &lt;strong&gt;shell command&lt;/strong&gt; and Install 'code' command in PATH command.&lt;/li&gt;
&lt;li&gt;Now open your preferred terminal and type &lt;strong&gt;code&lt;/strong&gt; in any folder and start editing!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#split-view"&gt;
  &lt;/a&gt;
  Split View
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are working on two different files of the same project then split view is a lot helpful here.&lt;/li&gt;
&lt;li&gt;Split View can be customized based on your preference.&lt;/li&gt;
&lt;li&gt;You can enable this by selecting &lt;strong&gt;View &amp;gt; Editor Layout &amp;gt; Split Up&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#edit-multiple-lines-simultaneously"&gt;
  &lt;/a&gt;
  Edit multiple lines simultaneously
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In VS Code you can edit multiple lines by adding cursor to a different location. This is very useful if you are gonna edit the same code in different lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#integrated-terminal"&gt;
  &lt;/a&gt;
  Integrated Terminal
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;VS Code has an integrated terminal that is accessible by combining &lt;strong&gt;ctrl + shift + `&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#plugins-amp-themes"&gt;
  &lt;/a&gt;
  Plugins &amp;amp; Themes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;VS Code has a rich plugin API that enables users to build cool plugins&lt;/li&gt;
&lt;li&gt;You can install them from VS code marketplace link &lt;a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Themes&amp;amp;sortBy=Relevance"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#top-5-vs-code-plugins"&gt;
  &lt;/a&gt;
  Top 5 VS Code plugins
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prettier is an opinionated code formatter, supports multiple languages, and integrates with most editors.&lt;br&gt;
If you wanna keep your code clean then this is a must!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Live Server launches a development local Server with live reload feature for static &amp;amp; dynamic pages when running javascript&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debugger for Chrome&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A VS Code extension to debug your JavaScript code in the Google Chrome browser, or other targets that support the Chrome DevTools Protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colors. The user can define which characters to match, and which colors to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO Highlight v2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Highlight TODO, FIXME: and any other annotations you wish within your code in VSCode. This extension helps you to stay productive and stay organized.&lt;/p&gt;

&lt;p&gt;If I missed something, or you want to show me something else, feel free to write a comment.&lt;br&gt;
Happy coding!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Level Up Your Commit Messages With These Tips!</title>
      <author>Akash Shyam</author>
      <pubDate>Sat, 31 Jul 2021 04:52:59 +0000</pubDate>
      <link>https://dev.to/akashshyam/level-up-your-commit-messages-with-these-tips-34d6</link>
      <guid>https://dev.to/akashshyam/level-up-your-commit-messages-with-these-tips-34d6</guid>
      <description>&lt;p&gt;At some point, we’ve all come across a commit message we don’t understand. Let’s rectify that commit by commit:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-specify-the-type-of-comment"&gt;
  &lt;/a&gt;
  1. Specify the type of comment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;feat: for feature addition&lt;/li&gt;
&lt;li&gt;fix: for bug fixes&lt;/li&gt;
&lt;li&gt;refactor: for changing the way a code block is written without changing the final result&lt;/li&gt;
&lt;li&gt;style: for style changes(CSS/Sass etc)&lt;/li&gt;
&lt;li&gt;test: anything and everything about testing&lt;/li&gt;
&lt;li&gt;docs: documentation addition/updates&lt;/li&gt;
&lt;li&gt;chore: code maintenance&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not restrict yourself to these types, feel free to add more types of comments but be consistent across the code base.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-never-assume-another-developer-understands-the-original-problem-ie-the-reason-for-the-commit"&gt;
  &lt;/a&gt;
  2. Never assume another developer understands the original problem i.e. the reason for the commit
&lt;/h3&gt;

&lt;p&gt;I recently started working on an existing codebase along with 3 developers. Me and another dev just started working on the codebase. On the second day, when I woke up to pull the latest code to my database I see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fix: bug inside the StudentList screen regarding the list
// … some irrelevant details about the new solution
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I looked at it, I had no idea what the problem was. After about 15 minutes of chatting back and forth, I finally understood the original problem.&lt;/p&gt;

&lt;p&gt;Just a single paragraph, that’s all I ask. One paragraph describing the problem containing 2–3 lines. It will help you too in the future, when you come back later trying to fix a bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-limit-the-subject-line-to-50-characters"&gt;
  &lt;/a&gt;
  3. Limit the subject line to 50 characters
&lt;/h3&gt;

&lt;p&gt;50 characters is not a hard limit, just a rule of thumb. Keeping subject lines at this length ensures that they are readable, and forces the author to think for a moment about the most concise way to explain what’s going on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Github will truncate commit messages over 72 characters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checkout the remaining article &lt;a href="https://medium.com/@akash.shyam2008/level-up-your-commit-messages-with-these-tips-7e66ea34470d"&gt;here&lt;/a&gt;. I've saved the best for the last!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Let's Create YouTube Clone Using React Native  - Part 1</title>
      <author>Suhail Kakar</author>
      <pubDate>Sat, 31 Jul 2021 04:51:04 +0000</pubDate>
      <link>https://dev.to/suhailkakar/let-s-create-youtube-clone-using-react-native-part-1-1ki3</link>
      <guid>https://dev.to/suhailkakar/let-s-create-youtube-clone-using-react-native-part-1-1ki3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;YouTube is a free video-sharing website that makes watching video clips easy. You may even make your own videos and post them to enjoy with others. YouTube, which was founded in 2005, is currently one of the most popular apps on the Internet, with over 6 billion hours of video watched each month.&lt;/p&gt;

&lt;p&gt;React Native is a JavaScript framework for writing real, natively rendering mobile applications for iOS and Android. It’s based on React, Facebook’s JavaScript library for building user interfaces, but instead of targeting the browser, it targets mobile platforms. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;p&gt;In this part (1) we are going to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Install Node JS&lt;/li&gt;
&lt;li&gt;Install Expo CLI&lt;/li&gt;
&lt;li&gt;Initialize our app with React Native Expo&lt;/li&gt;
&lt;li&gt;Change Folder Structure&lt;/li&gt;
&lt;li&gt;Create a bottom Tab navigation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#installing-node-js"&gt;
  &lt;/a&gt;
  Installing Node JS
&lt;/h3&gt;

&lt;p&gt;Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.&lt;/p&gt;

&lt;p&gt;Go to nodejs.org and download and install the latest stable version (LTS) on your computer. "nodejs package includes both node and npm"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bFj6JfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627702465700/FPlMq0OEI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bFj6JfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627702465700/FPlMq0OEI.png" alt="frame_chrome_mac_light (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-expo"&gt;
  &lt;/a&gt;
  Installing Expo
&lt;/h3&gt;

&lt;p&gt;Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.&lt;/p&gt;

&lt;p&gt;The quickest way to install Expo is using NPM, just open your terminal and write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--global&lt;/span&gt; expo-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJYjZPpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627702631047/UR1oEjPzF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJYjZPpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627702631047/UR1oEjPzF.png" alt="frame_chrome_mac_light (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initializing-our-app-with-react-native-expo"&gt;
  &lt;/a&gt;
  Initializing our app with React Native Expo
&lt;/h3&gt;

&lt;p&gt;Open your terminal and write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;expo init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a simple one-screen app using React Native.&lt;/p&gt;

&lt;p&gt;Once your app is created, navigate to your app folder using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;your-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;expo start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When you run expo start (or npm start), Expo CLI starts Metro Bundler, which is an HTTP server that compiles the JavaScript code of our app using Babel and serves it to the Expo app. It also pops up Expo Dev Tools, a graphical interface for Expo CLI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On your phone, download and install Expo Go app, after installing open it and press "Scan QR Code" on the "Projects" tab of the Expo Go app and scan the QR code you see in the terminal or in Expo Dev Tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-folder-structure"&gt;
  &lt;/a&gt;
  Changing Folder Structure
&lt;/h3&gt;

&lt;p&gt;Now, Let's change the folder structure of our app. First, you need to create the &lt;code&gt;src&lt;/code&gt; folder in your main directory, then create the &lt;code&gt;components&lt;/code&gt; folder inside of &lt;code&gt;src&lt;/code&gt;, similarly, create the &lt;code&gt;utils&lt;/code&gt; and &lt;code&gt;screens&lt;/code&gt; folder too. Inside of the &lt;code&gt;assets&lt;/code&gt; folder create two new folders, i.e &lt;code&gt;fonts&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt;. Finally you folder structure should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── App.js
├── app.json
├── assets
│   ├── fonts
│   └── images
├── babel.config.js
├── package.json
├── src
│   ├── components
│   ├── screens
│   └── utils
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-bottom-tab"&gt;
  &lt;/a&gt;
  Creating a bottom Tab
&lt;/h3&gt;

&lt;p&gt;Now We need to create a bottom tab just like youtube, but first, you need to install react-native-paper, for that paste the command below in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-native-paper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React Native Paper is a collection of customizable and production-ready components for React Native, following Google’s Material Design guidelines.&lt;/p&gt;

&lt;p&gt;Once it is done, in your component folder, create a file named &lt;code&gt;bottomTab.js&lt;/code&gt; and import it in your &lt;code&gt;app.js&lt;/code&gt;. Now paste the below code in your &lt;code&gt;bottomTab.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BottomNavigation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-paper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trending&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Trending&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fire&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscriptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subscriptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;folder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderScene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BottomNavigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SceneMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;trending&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;library&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SampleScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BottomNavigation&lt;/span&gt;
      &lt;span class="na"&gt;navigationState&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onIndexChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;renderScene&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderScene&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;activeColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#FF0000"&lt;/span&gt;
      &lt;span class="na"&gt;inactiveColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#616161"&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and this is how your &lt;code&gt;app.js&lt;/code&gt; should look&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-status-bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BottomTab&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/bottomTab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BottomTab&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you save your code you should see the output similar to a GIF below&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYi01HVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627705999960/NW_FImKpY.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYi01HVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627705999960/NW_FImKpY.gif" alt="animated"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This is it for this part. I hope you found this article helpful. If you need any help please let me know in the comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
