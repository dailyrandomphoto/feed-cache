<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 tips to finish your side projects (and make money doing so)</title>
      <author>Mustapha Aouas</author>
      <pubDate>Mon, 01 Nov 2021 13:25:03 +0000</pubDate>
      <link>https://dev.to/mustapha/5-tips-to-finish-your-side-projects-and-make-money-doing-so-27eo</link>
      <guid>https://dev.to/mustapha/5-tips-to-finish-your-side-projects-and-make-money-doing-so-27eo</guid>
      <description>&lt;p&gt;This past year I worked on a side project, and for once I saw it through to completion and profit. &lt;br&gt;
While working on this project, I made some good decisions as well as a lot of mistakes! In this post, I'll share with you 5 points that worked for me. Hopefully they will work for you.&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
But before we start, let me establish some context:&lt;br&gt;
I began developing a tool to help me memorize the fretboard layout of my guitar (the notes on the fretboard). The project received some attention after I shared it on Reddit. Other guitar players (including bass and ukulele) were interested in such an app. So i quickly made an &lt;a href="https://dev.to/mustapha/i-made-this-game-tool-to-help-people-learn-the-notes-on-their-guitar-it-s-free-and-mobile-friendly-4lf9"&gt;MVP&lt;/a&gt; and shared it with them. &lt;br&gt;
Their feedback was so encouraging that I decided to start working (more seriously) on this project.&lt;/p&gt;

&lt;p&gt;I soft launched the product pretty much a year ago and it generated &lt;strong&gt;$1k without any marketing at all&lt;/strong&gt;, only organic traffic on the &lt;a href="https://apps.apple.com/us/app/fretboard-learning/id1554316449"&gt;App store&lt;/a&gt;. Some times you just have to publish your work.&lt;/p&gt;

&lt;p&gt;Of course that's not a lot compared to other projects and I need to do some marketing if I want to increase the revenue from the app, but that's another story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUyDnFvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bztog43tiiadlq7b27eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUyDnFvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bztog43tiiadlq7b27eg.png" alt="Revenue from Fretboard Learning app" width="880" height="152"&gt;&lt;/a&gt;&lt;/p&gt;
Revenue from Fretboard Learning app



&lt;p&gt; &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Disclamer:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The tips I will provide below are useful for relatively small projects involving a small team (you). Moreover, nothing beats hard work; if you do not put in the necessary effort, your project will not move forward on its own. However, if you do put the necessary effort, you can use these suggestions as a guide.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-dont-be-shy-talk-about-your-project-early"&gt;
  &lt;/a&gt;
  1. Don't be shy, talk about your project early
&lt;/h2&gt;

&lt;p&gt;One thing I learned is that there's two things you should do at the very beginning of your project: Write the code and talk to users. &lt;/p&gt;

&lt;p&gt;Talking to users early-on allows you to get the necessary feedback to test your ideas. Reddit, pinterest, ... are great for that.&lt;/p&gt;

&lt;p&gt;Then, once this first step is done, it's critical to keep them engaged because you'll need their continuous input as your side project shifts and ideas evolve into a complete and marketable product. Those early testers can then become beta testers and, eventually, customers/users. So connect with them, ask for their emails, or use any other method to stay in touch.&lt;/p&gt;

&lt;p&gt;Also, Another benefits is that seeing that your product is being used might provide you with the additional motivation you need to keep going.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-choosing-a-goal-definition-of-done"&gt;
  &lt;/a&gt;
  2. Choosing a goal / Definition of done
&lt;/h2&gt;

&lt;p&gt;The Definition of Done is an agreed upon set of items that must be completed before a project or a feature can be considered complete.&lt;/p&gt;

&lt;p&gt;It's important to have that so you don't fall victim to perfectionism, which can lead to a loss of motivation and a lot of time wasted on features that may or may not be discarded later. Always try to make it work and give it to users before trying to make it "right and fast".&lt;/p&gt;

&lt;p&gt;This goes hand in hand with the first point, so don't be afraid to ship your project early; you can always make adjustments afterwards.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-have-a-backlog"&gt;
  &lt;/a&gt;
  3. Have a backlog
&lt;/h2&gt;

&lt;p&gt;This one is straight forward. Having a backlog can help you track your progression and keep track of what needs to be done. This backlog will evolve overtime as your project progresses and will help you stay on track with your objectives.&lt;/p&gt;

&lt;p&gt;Break every idea into small steps and prioritise them. Then set some confortable weekly or monthly goals.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-discipline-over-motivation"&gt;
  &lt;/a&gt;
  4. Discipline over motivation
&lt;/h2&gt;

&lt;p&gt;Self-discipline and the ability to stay committed are required for a job in software engineering. The same is true for side projects; you cannot rely solely on motivation, because motivation can fluctuate and decrease from time to time. So you must continue working on your project even if you lack the motivation. &lt;/p&gt;

&lt;p&gt;Set a time during the day to work on your project and stick to it.&lt;/p&gt;

&lt;p&gt;If you feel like you're about to abandon the project, take a short break now and then (maybe a week or so), but don't take a long break because it can kill your project (How many times have you put a project on hold and never touched it again?). &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-keep-a-technical-journal"&gt;
  &lt;/a&gt;
  5. Keep a technical journal
&lt;/h2&gt;

&lt;p&gt;Keep a detailed technical journal for your project. Write problems down and document all the dead-ends that you encounter. This will make context switching a lot less painful and it will give you a better notion of how much work was done compared to lines of code or commit count.&lt;/p&gt;

&lt;p&gt;In addition, if you drop the project at some point, it will be easier to pick it up again.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;That's it for this post. I hope some of these points will help you in your journey!&lt;br&gt;
If you liked this post, please share it with your friends or colleagues and follow me on twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjMto4tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Bz3nRw5I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/95610498-02ee-4f3f-846b-b85ccb539f0a.jpg" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/a-deep-dive-into-es6-classes-2h52" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A deep dive into ES6 Classes&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Oct 26 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>sideprojects</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tips for developers switching from Windows to Mac</title>
      <author>Cathal Mac Donnacha 🚀</author>
      <pubDate>Mon, 01 Nov 2021 13:07:27 +0000</pubDate>
      <link>https://dev.to/returnofthemac/tips-for-developers-switching-from-windows-to-mac-3d51</link>
      <guid>https://dev.to/returnofthemac/tips-for-developers-switching-from-windows-to-mac-3d51</guid>
      <description>&lt;p&gt;I was a Windows fan all my life, both at home since I was 10 years old, and at work for 8 years of my frontend development career. However, when I moved jobs recently I was given a MacBook Pro, and so I had little choice but to dive headfirst into everything MacOS. It was a bit strange at first and it honestly took me a few days to get settled in with the Mac, but once I did, I really started to like it.&lt;/p&gt;

&lt;p&gt;From the beginning, there were a couple of things I missed about Windows, and some alternative apps that I had to find. In this article, I go through some of the things that helped me, in the hope that I can help smoothen the ride for other developers starting out on their Windows to Mac journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-manager"&gt;
  &lt;/a&gt;
  Package manager 📦
&lt;/h2&gt;

&lt;p&gt;I used to use &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; as my package manager on Windows. I found it really useful to install and organise all of my various packages, and so I wanted to find the best alternative for Mac. &lt;a href="https://brew.sh/"&gt;Brew&lt;/a&gt; was the answer! I've been using it for the past year and haven't had any issues or missing features compared to Chocolatey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminal"&gt;
  &lt;/a&gt;
  Terminal 📺
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://conemu.github.io/"&gt;ConEmu&lt;/a&gt; was my go-to terminal on Windows and so I was pretty bummed out when I realised that it wasn't supported on Mac. After asking some folks on my team, they suggested &lt;a href="https://iterm2.com/"&gt;iTerm2&lt;/a&gt; and I must admit it's equally fantastic.&lt;/p&gt;

&lt;p&gt;One feature that is not included in iTerm2 though is the ability to display the currently active git branch at a glance. Worry not! &lt;a href="https://ohmyz.sh/"&gt;oh-my-zsh&lt;/a&gt; to the rescue 🦸‍♂️  You can install it using &lt;a href="https://ohmyz.sh/#install"&gt;this curl command&lt;/a&gt; and hey presto, you now see those nice pretty git branches in your terminal.&lt;/p&gt;

&lt;p&gt;Similar to ConEmu, I use a feature in iTerm2 called "window arrangements" to automatically launch tabs whenever I open the terminal. I find this really handy, as it automatically navigates to the correct directory and opens my regular 3 &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; tabs for me. This feature has saved me countless hours over the years!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finder-%F0%9F%97%84"&gt;
  &lt;/a&gt;
  Finder 🗄
&lt;/h2&gt;

&lt;p&gt;Finder is the default file manager on the Mac and it's equivalent to Windows Explorer, with some differences. The biggest difference for me was the lack of a classic cut and paste. On Windows you could simply press &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt;. However, to do this on Mac you have to select the file and then press &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hidden-files"&gt;
  &lt;/a&gt;
  Hidden Files
&lt;/h3&gt;

&lt;p&gt;To show hidden files in Finder just press &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want to show hidden files by default just open your terminal and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles YES&lt;span class="p"&gt;;&lt;/span&gt; killall Finder&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#split-screen"&gt;
  &lt;/a&gt;
  Split screen 💻
&lt;/h2&gt;

&lt;p&gt;I often use split screen to view both the browser and VS Code side by side. On Windows, this is quite simple to do using a feature called &lt;a href="https://support.microsoft.com/en-us/windows/snap-your-windows-885a9b1e-a983-a3b1-16cd-c531795e6241#WindowsVersion=Windows_10"&gt;Snap Assist&lt;/a&gt;. You simply just drag a window to the edge of the screen and then select the other window you want to show beside it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnXNQKeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/S4tZrd0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnXNQKeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/S4tZrd0.gif" alt="Windows Split View" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again I was pretty disappointed to find out that you couldn't easily achieve this on the Mac. Not to worry though, it does have a feature called &lt;a href="https://support.apple.com/en-ie/HT204948"&gt;Split View&lt;/a&gt;, which is close enough for me. It's not as quick and easy but gets the job done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsMQpk2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/P0H2Vd9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsMQpk2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/P0H2Vd9.gif" alt="Mac Split View" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ms-paint"&gt;
  &lt;/a&gt;
  MS Paint 🎨
&lt;/h2&gt;

&lt;p&gt;Oh man, how I loved this app. As a frontend developer, I was constantly taking screenshots, pasting them into Paint and then drawing arrows, boxes and text on top of them to include in JIRA tickets, emails etc. I even remember using it to create some icons back in the day. I couldn't believe the Mac didn't have a native paint app. However, I found two solutions that helped me dry my tears.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-shape-detection-in-preview"&gt;
  &lt;/a&gt;
  1. Shape detection in Preview
&lt;/h3&gt;

&lt;p&gt;I may be easily amused, but this feature blew my mind when I first tried it. When you take a screenshot (&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;3&lt;/code&gt;), a thumbnail will appear in the bottom right corner of the screen. Once you click on the thumbnail, the native Preview app on the Mac will open. From here you can draw a rough circle, square, or arrow and if it's recognised as a standard shape, it’s replaced by that shape. How cool is that?!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmawrNUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/fZPwazm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmawrNUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/fZPwazm.gif" alt="Shape detection in Preview app" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sketchpad"&gt;
  &lt;/a&gt;
  2. Sketchpad
&lt;/h3&gt;

&lt;p&gt;One drawback to the native Preview app is that you can't simply copy and paste two images onto one canvas. Again, I do this a lot when creating "before and after" screenshots of tasks I'm working on. It's so much easier to convey this in one single side-by-side image instead of two separate ones.&lt;/p&gt;

&lt;p&gt;Again MS Paint was great for this, so I had to find an alternative. I tried lots of Mac apps, browser extensions and web apps but struggled to find anything suitable, user friendly, and free, which had similar features to MS Paint. Finally, I found it! &lt;a href="https://sketch.io/sketchpad/"&gt;Sketchpad&lt;/a&gt; is a fantastic web app where you can quickly copy and paste images side by side, draw, add text, fill vectors and lots more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screenshots-and-video-recording"&gt;
  &lt;/a&gt;
  Screenshots and video recording 📹
&lt;/h2&gt;

&lt;p&gt;I touched on this earlier, but as a frontend developer, I take &lt;strong&gt;a lot&lt;/strong&gt; of screenshots and recordings so that I can attach them to JIRA tickets, Slack messages, emails and so on. I think that this is an important part of any frontend developer's workflow, so I wanted to go through it in a bit more detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-screenshot"&gt;
  &lt;/a&gt;
  Basic screenshot
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;3&lt;/code&gt; shortcut, you can take a screenshot of the currently active screen. You should then see a thumbnail appear in the right bottom corner of your screen. Clicking on this will bring up the native Preview app, which (as mentioned earlier) you can use to draw on the image. It will save the image to your default screenshots folder on your Mac, which is useful if you want to refer back to it later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capture-a-portion-of-the-screen"&gt;
  &lt;/a&gt;
  Capture a portion of the screen
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;4&lt;/code&gt; shortcut, you can take a screenshot of a portion of the screen. This will save the image to your Mac. Out of all the screenshot options, I probably use this the most. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSwRRohq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635622962173/sbZw41Co2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSwRRohq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635622962173/sbZw41Co2.png" alt="Capture a portion of the screen" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capture-a-portion-of-the-screen-and-copy-to-clipboard"&gt;
  &lt;/a&gt;
  Capture a portion of the screen and copy to clipboard
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;control&lt;/code&gt; +  &lt;code&gt;4&lt;/code&gt; shortcut, you can take a screenshot of a portion of the screen. The difference between this and the previous shortcut is that it will only copy the image to your clipboard. It will not save the image to your Mac. This is useful if you want to quickly copy and paste screenshots into chat or an email body, but not take up space on your hard drive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshot-a-window"&gt;
  &lt;/a&gt;
  Screenshot a window
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;control&lt;/code&gt; +  &lt;code&gt;space&lt;/code&gt; shortcut, you can take a screenshot of a particular window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuo17s3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635622880504/cVoCEuyxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuo17s3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635622880504/cVoCEuyxf.png" alt="Screenshot a window" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#record-the-screen"&gt;
  &lt;/a&gt;
  Record the screen
&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;5&lt;/code&gt; shortcut, you will see a toolbar appear which allows you to record the entire screen, or just a portion of it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fs4a_0WD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635623129663/4TmBzZsyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fs4a_0WD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635623129663/4TmBzZsyf.png" alt="Mac record video toolbar" width="487" height="53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop recording, just press the same &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;5&lt;/code&gt; shortcut again and press the "stop" button. I use this very often in PRs, or when showing my team some early progress of a feature I'm working on.&lt;/p&gt;

&lt;p&gt;You can even trim the beginning and end of the video using this button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adwSJbZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635623459731/NDwUc-vkE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adwSJbZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635623459731/NDwUc-vkE.png" alt="Trim video button on Mac" width="332" height="108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noteworthy-screenshot-app"&gt;
  &lt;/a&gt;
  Noteworthy screenshot app
&lt;/h3&gt;

&lt;p&gt;I thought it was worth calling out a great free tool which I've found very useful called &lt;a href="https://shottr.cc/"&gt;Shottr&lt;/a&gt;. It hasn't fully replaced the native screenshot functionality for me, but it's mighty close.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts"&gt;
  &lt;/a&gt;
  Shortcuts ⌨️
&lt;/h2&gt;

&lt;p&gt;First of all, the keyboard is subtly different compared to Windows. The &lt;code&gt;command&lt;/code&gt; key is what you'll use for most shortcuts and commands, it's mostly similar to the &lt;code&gt;ctrl&lt;/code&gt; key on Windows. In most cases, shortcuts that require the use of the &lt;code&gt;alt&lt;/code&gt; key on windows will use the &lt;code&gt;option&lt;/code&gt; key on Mac. &lt;/p&gt;

&lt;p&gt;Once I got used to these differences I started to look up various shortcuts for applications I use every day. Below are only some of the shortcuts I use, but &lt;a href="https://support.apple.com/en-us/HT201236"&gt;here&lt;/a&gt; is the full list if you need it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;x&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Cut&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Copy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Paste&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;z&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Undo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;spacebar&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Open spotlight to quickly find and open apps, documents, and other files.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Switch apps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;n&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;New finder window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;delete&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Delete file / folder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Show hidden files in Finder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;control&lt;/code&gt; + &lt;code&gt;down arrow&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Show all windows of the active app (i.e all Chrome windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;3&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Take a screenshot of the currently active screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;4&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Take a screenshot a portion of the screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;4&lt;/code&gt; + &lt;code&gt;space&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Take a sccreenshot of a window of your choosing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;control&lt;/code&gt; + &lt;code&gt;4&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Take a screenshot of a portion of the screen and copy it to the clipboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt; then &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Cut and paste files in finder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rename selected file or folder&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#text-editing"&gt;
  &lt;/a&gt;
  Text editing
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;left arrow&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Go to beginning of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;right arrow&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Go to end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;control&lt;/code&gt; + &lt;code&gt;spacebar&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Show Emoji viewer 😃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Paste without formatting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;option&lt;/code&gt; + &lt;code&gt;backspace&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Delete word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;backspace&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Delete all text left of cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#chrome"&gt;
  &lt;/a&gt;
  Chrome
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Open dev tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Reload page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;f&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Search within the page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Open last closed tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  Slack
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Format higlighted text to code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;k&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Quick switcher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Add link text (You can also paste a link directly onto highlighted text to achieve the same)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#iterm2"&gt;
  &lt;/a&gt;
  iTerm2
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;control&lt;/code&gt; + &lt;code&gt;u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Delete line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;control&lt;/code&gt; + &lt;code&gt;y&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Restore previous deleted line. This is handy if you need to run another command then come back to the previous one.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;New tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  VS Code
&lt;/h3&gt;

&lt;p&gt;For VS Code, I have customised a lot of the shortcuts myself as I personally think they make more sense and are easier to remember, so I've included them below. However, &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;here's a list&lt;/a&gt; of the default out-of-the-box shortcuts.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shortcut&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;click&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Go to definition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Quick search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;option&lt;/code&gt; + &lt;code&gt;left arrow&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Go back&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;option&lt;/code&gt; + &lt;code&gt;right arrow&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Go forward&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;d&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Copy lines down i.e duplicate line of code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;control&lt;/code&gt; + &lt;code&gt;e&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Add cursor to next matching text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Comment out line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;backspace&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Delete line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;command&lt;/code&gt; + &lt;code&gt;\&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Open file in side pane&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts 🤔
&lt;/h2&gt;

&lt;p&gt;You might wonder if I miss Windows for frontend development, well my answer is "kinda but not really". Yes, Windows does some things better, but Mac has some of its own advantages. I think Mac is a happy medium for software developers who work on a lot of backend code as it's based on Unix, runs most Linux applications but is still user friendly. However, as a frontend developer, all I really need is VS Code and a browser to do my work, both of which work exactly the same regardless of which OS I'm using.&lt;/p&gt;

&lt;p&gt;Hopefully, this article can make the Windows to Mac switch that small bit easier for you. If you found this article useful, or have some tips of your own, feel free to leave a comment 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful resources 📖
&lt;/h2&gt;

&lt;p&gt;I found these resources useful when learning the basics during my Windows to Mac switcharoo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-us/HT204216"&gt;Mac tips for Windows switchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-gb/guide/mac-help/cpmh0038/mac"&gt;A list of Windows and Mac terms to help you find what you’re looking for.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more? 📢
&lt;/h2&gt;

&lt;p&gt;I mainly write about real-world tech topics I face in my everyday life as a frontend developer. If this appeals to you, then feel free to follow me on Twitter for more: &lt;a href="https://twitter.com/cmacdonnacha"&gt;https://twitter.com/cmacdonnacha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye for now 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tooling</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Hexagonal Architecture</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 01 Nov 2021 13:00:37 +0000</pubDate>
      <link>https://dev.to/abh1navv/hexagonal-architecture-3ocl</link>
      <guid>https://dev.to/abh1navv/hexagonal-architecture-3ocl</guid>
      <description>&lt;p&gt;In the evolution of software architecture, &lt;a href="https://en.wikipedia.org/wiki/Loose_coupling"&gt;loose coupling&lt;/a&gt; has been at the centre. There is an emphasis on breaking applications into components which can be switched, replaced or updated without affecting the dependent components.&lt;/p&gt;

&lt;p&gt;Hexagonal architecture is another advancement in loosely coupled architectures. It originated around the beginning of the shift to domain-driven designs and formed a basis of further advancements in the field of software design. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intoduction"&gt;
  &lt;/a&gt;
  Intoduction
&lt;/h2&gt;

&lt;p&gt;A hexagonal architecture is divided into three parts and defines the strict roles that these parts play within the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fb6-BjGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/hexagonal-intro.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fb6-BjGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/hexagonal-intro.jpg" alt="Hexagonal architecture layers - User Interfaces, Business Logic and Data sources" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Interfaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There can be many user interfaces to a backend - mobile apps, web apps, desktop softwares, etc. They will all get their resources from the Business logic layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business Logic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It forms the core of the application. It's objective is to cater to the requests of user interfaces. Based on the request, it runs some custom logic, gets the resources needed to fulfil the request and answers back in an agreed upon response format.&lt;/p&gt;

&lt;p&gt;Below is a small word cloud of the responsibilities of a business logic layer. The responsibilities can vary from one use case to another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-kpPAnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/business-logic-components.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-kpPAnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/business-logic-components.png" alt="Components of Business Logic layer" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backing services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are services which support the business logic. They each serve a specific purpose and provide data/services to the application. They interact with the business logic layer and are replaceable as long as the communication contract between the two layers is maintained. A few examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data sources&lt;/li&gt;
&lt;li&gt;Cache aside servers like Redis&lt;/li&gt;
&lt;li&gt;Notification services&lt;/li&gt;
&lt;li&gt;Another service like a payment gateway&lt;/li&gt;
&lt;li&gt;In microservices context, another microservice.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#intent-and-principles"&gt;
  &lt;/a&gt;
  Intent and principles
&lt;/h3&gt;

&lt;p&gt;The intent is to make the core of our application immune to changes in the communication with other layers. Those concerns are to be handled at the boundary of our hexagon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ports&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ports are what our core application interacts with. Ports stay consistent for the inner application no matter what happens outside them. They are &lt;em&gt;interfaces&lt;/em&gt; that the inner components interact with without knowing whats being plugged into them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adapters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ports are staying consistent but we still want to be able to plug multiple applications to them when needed. These applications could have different needs and may not comply with the interface defined by the ports. This is where out adapters come in. Their purpose is to convert the data provided by the outer applications into a format digestible for the inner application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Hexagonal is just a term that has stuck with the architecture for simplicity. It is not to be misunderstood as the business logic layer having 6 ports. There can be many more sides to the polygon as per the services required to connect&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wXtih8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/ports-and-adapters.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wXtih8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abh1navv/learning-notes/master/microservices/images/ports-and-adapters.jpg" alt="Ports and adapters" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;With respect to the above diagram, imagine a small application - a REST API which deals with user related operations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Port&lt;/strong&gt; - the requests can come from a website or an app. They may have different parameters and may expect a different response formats. We create an adapter for each frontend actor. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It receives the request &lt;/li&gt;
&lt;li&gt;converts it into a consistent format defined by the port &lt;/li&gt;
&lt;li&gt;passes it onto the inner application. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the request reaches the inner application, it is consistent with the interface exposed by the port. The application works on it and returns the response in a format that the port expects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The port forwards the response to the adapter it received the request from.&lt;/li&gt;
&lt;li&gt;The adapter converts the response into a format suitable for the requesting party.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Database port&lt;/strong&gt; - the inner application needs to get some data from the database to fulfil the request. Once again, it interacts through a consistent port. And we are able to plug in whichever database we need into that port. The actual DB to be used will be decided at runtime or through configurations. &lt;/p&gt;

&lt;p&gt;Let's see a use case of the Database port through code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-some-code"&gt;
  &lt;/a&gt;
  Let's see some code
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Design Intention&lt;/strong&gt; - We want to start with a MySQL database but we are not sure if a different database would be necessary in future. Our code should allow for easy swapping of databases when needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The port (Interface)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We provide an interface for our core to interact with. The interface performs crud operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adapter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL Database adapter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySqlDatabaseRepository&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Saving to database"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deleting from database"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updating database"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding in database"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Interacting with the databases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we already know, all communication happens using the interfaces. Our core application will not look beyond the &lt;code&gt;UserRepository&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;Let's look at one of our core services. The below class is concerned with getting the user details - either basic or full.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDetailsClient&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserDetailsServiceImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userRepository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;BasicDetails&lt;/span&gt; &lt;span class="nf"&gt;getBasicDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BasicDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;FullDetails&lt;/span&gt; &lt;span class="nf"&gt;getFullDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;FullDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAddress&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how it uses an object of the interface and does not care about which specific database works in the background.&lt;/p&gt;

&lt;p&gt;Still, we will need to pass into the service the actual implementation. There are a large number of ways to do that - especially with modern frameworks. &lt;/p&gt;

&lt;p&gt;What I have used here is &lt;a href="https://www.tutorialsteacher.com/ioc/dependency-injection"&gt;constructor dependency injection&lt;/a&gt; which will hold true for most object-oriented programming languages which use interfaces. Other patterns could be Factory and Strategy patterns.&lt;/p&gt;

&lt;p&gt;In my case, the outer layer which tries to get User details will initialize &lt;code&gt;UserDetailsClient&lt;/code&gt; by passing the required adapter. For e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;UserDetailsClient&lt;/span&gt; &lt;span class="n"&gt;userDetailsClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UserDetailsClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MongoDbRepository&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;userDetailsClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBasicDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Swapping databases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After a while, it was agreed that having a NoSQL database made things easier due to scalability reasons. What was needed in this case was to introduce another adapter for MongoDb database and make it implement the functionalities defined by the port.&lt;/p&gt;

&lt;p&gt;MongoDB adapter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MongoDbRepository&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Saving User to mongoDb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deleting User from mongoDb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updating User in mongoDb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding User in mongoDb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the MongoDb database, the only change required is in the way the &lt;code&gt;UserDetailsClient&lt;/code&gt; is initialized. Our calling code changes in the below way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;UserDetailsClient&lt;/span&gt; &lt;span class="n"&gt;userDetailsClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UserDetailsClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MongoDbRepository&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;userDetailsClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBasicDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Swappable components&lt;/strong&gt; - as we can see in the database layer. There could also be other services in the same pattern. For e.g. I could have notification services and swap between emails and SMS whenever needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Separation of business logic&lt;/strong&gt; - If implemented well, the hexagonal architecture does not pose a threat to the business rules at the core of the application when outer layers change. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easier testing across ports&lt;/strong&gt; - Testing of the core application can be performed around the ports. If needed, mock resources can be introduced using adapters of their own to make unit testing without databases easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although hexagonal architecture is not something that is explicitely thought about when designing the architecture of the application, it is often accidentally used throughout modern applications - especially the Java world which revolves around &lt;a href="https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/"&gt;dependency injection&lt;/a&gt; and coding to interfaces rather than implementations.&lt;/p&gt;

&lt;p&gt;Nowadays, there is a lot of emphasis on configurability and adaptability of applications. It is important to keep the "ports and adapter pattern" in mind in the low-level design process more than the high-level design.&lt;/p&gt;




&lt;p&gt;Thank you for reading. Hope you enjoyed the article. Please leave any appreciation and suggestions in the comments. If you want to connect with me, you can find me on &lt;a href="https://twitter.com/abh1navv"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun Fact&lt;/strong&gt;: The code samples are created by Github Co-pilot with little manual intervention.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>programming</category>
      <category>java</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 24 of 100 Days of Code &amp; Scrum: React Framework for Production!</title>
      <author>Rammina</author>
      <pubDate>Mon, 01 Nov 2021 12:44:08 +0000</pubDate>
      <link>https://dev.to/rammina/day-24-of-100-days-of-code-scrum-react-framework-for-production-46g9</link>
      <guid>https://dev.to/rammina/day-24-of-100-days-of-code-scrum-react-framework-for-production-46g9</guid>
      <description>&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;I'd be lying to all of you if I said that this Monday was a great start to my week! It was definitely on the rough side with personal/family issues getting in the way.&lt;/p&gt;

&lt;p&gt;However, I managed to commit to the requirements of the challenge! I finished the official Next.js tutorial and I am 3/4ths of the way through Scrum and XP from the Trenches.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I planned for what I'll be doing this week. I decided I'll be focusing on Next.js and Scrum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I learned about the two forms of rendering in Next.js:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Static Generation&lt;/strong&gt; - the page HTML is generated during &lt;em&gt;build time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Server-side Rendering&lt;/strong&gt; - the page HTML is generated during &lt;em&gt;each request&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;I read about &lt;code&gt;getStaticProps&lt;/code&gt;, &lt;code&gt;getStaticPaths&lt;/code&gt;, and &lt;code&gt;getServerSideProps&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getStaticProps&lt;/code&gt; - fetch data at build time (static generation).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getStaticPaths&lt;/code&gt; - specify dynamic routes to prerender pages based on data (static generation).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getServerSideProps&lt;/code&gt; - fetch data on each request (server-side rendering).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;I learned how to do dynamic routing in Next.js.&lt;/li&gt;
&lt;li&gt;I read about how Next.js handles API support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I continued to read &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It is best to estimate using man-days instead of hours.&lt;/li&gt;
&lt;li&gt;no team member has complete focus, the best realistic expectation is a focus factor of 70%.&lt;/li&gt;
&lt;li&gt;in most cases, it might be best to shorten the time to do manual testing, over taking a long time to establish automated tests.&lt;/li&gt;
&lt;li&gt;I learned a lot about Extreme Programming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least, I managed to get through today and still commit to my goals. I hope that I manage to make up for it on the rest of the days in this week.&lt;/p&gt;

&lt;p&gt;Have a great Monday, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTUETMOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9dd6zelfb0pagv2n55m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTUETMOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9dd6zelfb0pagv2n55m.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 Soft Skills To Succeed as a Developer</title>
      <author>Victor Loveday</author>
      <pubDate>Mon, 01 Nov 2021 12:40:36 +0000</pubDate>
      <link>https://dev.to/vicviral/3-soft-skills-to-succeed-as-a-developer-26f3</link>
      <guid>https://dev.to/vicviral/3-soft-skills-to-succeed-as-a-developer-26f3</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Creativity&lt;/strong&gt;&lt;br&gt;
When problems surface, a creative developer knows solutions likely already exist. And if it doesn’t, the developer isn’t afraid to come up with new solutions.&lt;/p&gt;

&lt;p&gt;As a software developer, solutions aren’t handed over to you to mindlessly code. Instead, you must explore possibilities, weighing different technologies and your team’s skills. After gaining some experience to understand what technologies exist, the creativity of combining these solutions together becomes easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a full-time software developer, you cannot fail — if a problem exists in your code, there is a solution, and you will find it. This will be the true test of your creativity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Reliability&lt;/strong&gt;&lt;br&gt;
In a team, people rely on you to get your work done, especially when you promise to complete a task. If you’re reliable, no one will need to check up on your progress, as you’ve proven you can take on responsibilities.&lt;/p&gt;

&lt;p&gt;Leaders want software developers who don’t need any babysitting. They want direct reports from who agree to do something and then follow through on their commitment. Believe it or not, many people aren’t reliable, so being a reliable developer will make you the go-to person for new tasks and opportunities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Steller Communication&lt;/strong&gt;&lt;br&gt;
All softwares are built on a team composed of people with different ideologies, beliefs, biases, and experiences.&lt;/p&gt;

&lt;p&gt;The best software developers communicate complex technical concepts to non-technical folks or technical ones who are still learning. You will go far as a developer if you can communicate across roles and teach others.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Connect to MongoDB Atlas from SvelteKit</title>
      <author>kvetoslavnovak</author>
      <pubDate>Mon, 01 Nov 2021 12:38:58 +0000</pubDate>
      <link>https://dev.to/kvetoslavnovak/connect-to-mongodb-atlas-from-sveltekit-25hg</link>
      <guid>https://dev.to/kvetoslavnovak/connect-to-mongodb-atlas-from-sveltekit-25hg</guid>
      <description>&lt;p&gt;MongoDB Atlas recently published new &lt;a href="https://docs.atlas.mongodb.com/best-practices-connecting-from-vercel/"&gt;best practices how to connect to MongoDB Atlas database&lt;/a&gt;. If you would like to know how to apply this recommendations in SvelteKit using MongoDB Atlas database read on.&lt;/p&gt;

&lt;p&gt;Start a new SvelteKit project in your console called for example SvelteKit_MongoDB_Atlas&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;next&lt;/span&gt; &lt;span class="nx"&gt;SvelteKit_MongoDB_Atlas&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;SvelteKit_MongoDB_Atlas&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To communicate with MongoDB database we will need Node driver &lt;a href="https://github.com/mongodb/node-mongodb-native"&gt;mongodb&lt;/a&gt;. So install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;mongodb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I assume you have set up your MongoDB Atlas database. Their Starter Cluster is free. They have a clear &lt;a href="https://docs.atlas.mongodb.com/getting-started/"&gt;tutorial&lt;/a&gt; how to do this. Or just follow the steps after your sign up, it is pretty straightforward.&lt;/p&gt;

&lt;p&gt;To connect to MongoDB Atlas you need to use a so called MONGODB_URI. MongoDB Atlas gave you this link when you set up your database there. It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@cluster0.ol6zu.mongodb.net/todos?retryWrites=true&amp;amp;w=majority&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see it contains some sensitive data. So our project needs some features to keep it secret, keep it save. Best way is to use environmental variables. You usually store them in &lt;strong&gt;.env&lt;/strong&gt; file in the root directory of your project. SvelteKit is using &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; under the hood. Vite has its &lt;a href="https://vitejs.dev/guide/env-and-mode.html#env-files"&gt;own implementation of environmental variables&lt;/a&gt;. But it is somehow &lt;a href="https://dev.to/danawoodman/storing-environment-variables-in-sveltekit-2of3"&gt;tricky&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So our project will need some other tool. Let install good old &lt;a href="https://github.com/motdotla/dotenv#readme"&gt;dotenv&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the root directory of your project create a new file &lt;strong&gt;.env&lt;/strong&gt; and insert your MONGODB_URI. Specify also database name (DB_NAME). Following recommendation from MongoDB Atlas specify that we use it in development (NODE_ENV) as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@cluster0.ol6zu.mongodb.net/todos?retryWrites=true&amp;amp;w=majority&lt;/span&gt;
&lt;span class="nx"&gt;DB_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;database_name&lt;/span&gt;
&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we have arrived to the implementation of MongoDB Atlas best practices. One problem this tries to solve is not open more connections to the database so it will not crash eventually.&lt;/p&gt;

&lt;p&gt;In your &lt;em&gt;lid&lt;/em&gt; directory (which is in a &lt;em&gt;scr&lt;/em&gt; directory) create a new file &lt;strong&gt;mongodb-client.js&lt;/strong&gt;. Copy inside the code advice by MongoDB Atlas best practices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;MongoClient&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;clientPromise&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please add your Mongo URI to .env.local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NODE_ENV&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In development mode, use a global variable so that the value&lt;/span&gt;
    &lt;span class="c1"&gt;// is preserved across module reloads caused by HMR (Hot Module Replacement).&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_mongoClientPromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_mongoClientPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;clientPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_mongoClientPromise&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In production mode, it's best to not use a global variable.&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;clientPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Export a module-scoped MongoClient promise. By doing this in a&lt;/span&gt;
&lt;span class="c1"&gt;// separate module, the client can be shared across functions.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;clientPromise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have noticed that we made &lt;strong&gt;one very important modification&lt;/strong&gt; concerning how we are referencing environmental variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// this works&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt; &lt;span class="c1"&gt;//this does not work!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;em&gt;routes&lt;/em&gt; folder create &lt;strong&gt;index.js&lt;/strong&gt; file. We are now ready to define an endpoint. To make it easy and keep this example rather simple we will  and insert one task "Walk a dog" to a collection "sveltekit-todos" in MongoDB Atlas using get method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;clientPromise&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/mongodb-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;clientPromise&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dbConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sveltekit-todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Walk a dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;todos&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open the index page of the project the page should notify you that the  insertion was successful, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;acknowledged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;insertedId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;617fd886f9f1f3f9a838c382&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this was helpful. &lt;/p&gt;

</description>
      <category>sveltekit</category>
      <category>mongodb</category>
      <category>tutorial</category>
      <category>vercel</category>
    </item>
    <item>
      <title>Intigriti 1021 - XSS Challenge Writeup</title>
      <author>Breno Vitório</author>
      <pubDate>Mon, 01 Nov 2021 12:35:16 +0000</pubDate>
      <link>https://dev.to/therealbrenu/intigriti-1021-xss-challenge-writeup-253m</link>
      <guid>https://dev.to/therealbrenu/intigriti-1021-xss-challenge-writeup-253m</guid>
      <description>&lt;p&gt;Halloween came with an awesome XSS Challenge by Intigriti, and I'm here to present the solution I found for this. Hope you like it 🦇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detective-indepth-analysis"&gt;
  &lt;/a&gt;
  🕵️ In-Depth Analysis
&lt;/h2&gt;

&lt;p&gt;Reading the content of the page, at the first glance, it tells us that there is a query parameter called &lt;code&gt;html&lt;/code&gt;, which is capable of define partially what's displayed to the user. When we define, for example, a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag to this parameter, we are going to get returned a page with this tag being reflected, which is already an HTML injection. From now on, we will be working to make it become an XSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Htq6JHfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhitw28rcsbpnrvn83d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Htq6JHfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhitw28rcsbpnrvn83d.png" alt="Page with bats flying around and an HTML Injection" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seenoevil-oops-csp"&gt;
  &lt;/a&gt;
  🙈 Oops, CSP
&lt;/h3&gt;

&lt;p&gt;If we simply try to inject something like &lt;code&gt;&amp;lt;script&amp;gt;alert(document.domain);&amp;lt;/script&amp;gt;&lt;/code&gt;, this script tag will be reflected, but the code itself will not be executed. Why? Well, if we look at the head of the page, we are going to find something interesting:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'unsafe-eval' 'strict-dynamic' 'nonce-random'; style-src 'nonce-random'"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This meta tag tells us that the page has a CSP, which will not let any random script be executed. Also, it's possible to see, from the script-src policies, that 'strict-dynamic' was defined, which means that generally a script will only be trusted if it comes with a trusted one-use token (nonce).&lt;/p&gt;

&lt;p&gt;But there is an exception to the strict-dynamic rule. It allows JavaScript code to be executed if it's being created by using the function &lt;code&gt;document.createElement("script")&lt;/code&gt;, and by the way, if we look a little bit further at the page source, we are going to find this section of code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TG5Q-CIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcfoo5osj8xqj8v8i35y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TG5Q-CIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcfoo5osj8xqj8v8i35y.png" alt="Script tag containing the create element function, and a new request parameter called xss" width="833" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#construction-managing-to-work-with-the-dom"&gt;
  &lt;/a&gt;
  🚧 Managing to work with the DOM
&lt;/h3&gt;

&lt;p&gt;When we don't pay enough attention to the code, we might think that it's just needed to insert something like &lt;code&gt;alert(document.domain)&lt;/code&gt; to the &lt;code&gt;xss&lt;/code&gt; parameter on the URL, but if you do so, you won't get any alert popping out, because what's truthfully being inserted to the script tag is: &lt;code&gt;)]}'alert(document.domain)&lt;/code&gt;. Something like that will never be executed, because it returns an error from JavaScript right on the first character.&lt;/p&gt;

&lt;p&gt;Paying a little bit more attention to the previous section of code, this specific piece is important:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9z8_Nup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kf1iqlk47kodtxsci1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9z8_Nup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kf1iqlk47kodtxsci1b.png" alt="Section of code which defines how the script tag should be parsed" width="830" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we know that we have to create a tag with an id "intigriti", and also that this tag needs to, somehow, unbreak the &lt;code&gt;)]}'&lt;/code&gt; that we have seen. The second part its actually pretty easy to think of, because it ends with a simple quotation mark, and if we open it before, every other character will be considered part of the string, so the solution for this would be something like &lt;code&gt;a='&lt;/code&gt;, but we have to apply this on the context of an HTML tag, resulting in &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&lt;/code&gt;. Remember that Intigriti Jr's INTERNAL HTML is what is parsed, and not the element itself, that's the reason for the external div.&lt;/p&gt;

&lt;p&gt;The other part is the one who takes more effort. If we simply try to add &lt;code&gt;&amp;lt;div id="intigriti"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&amp;lt;/diva='&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; to the &lt;code&gt;html&lt;/code&gt; parameter, as you can see on the picture below, we will have these tags inside of the DOM but inside &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags, and waaaay too far from being the last element of the body, which is what is want:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RDB832u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alc0m3o92p3vgw5t2kkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RDB832u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alc0m3o92p3vgw5t2kkn.png" alt="HTML content with our injected tags" width="393" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, in order to trigger an alert, we have to figure out a way of go outside this &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; pair and a way of making the next divs fit inside our payload &lt;code&gt;&amp;lt;div id="intigriti"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&amp;lt;/diva='&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;. One possibility is to trick the browser by inserting unopened/unclosed tags, so it tries and fails to fix it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checkeredflag-getting-there"&gt;
  &lt;/a&gt;
  🏁 Getting there
&lt;/h3&gt;

&lt;p&gt;For getting outside of the &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; pair, all we have to do is insert &lt;code&gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; before our friends &lt;code&gt;&amp;lt;div id="intigriti"&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;diva='&amp;gt;&lt;/code&gt;, resulting in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2xC9fT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc8fq9ql5v83y2mukgr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2xC9fT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc8fq9ql5v83y2mukgr8.png" alt="HTML content with our payload going outside of h1 and div" width="275" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have to make everything that originally goes next &lt;code&gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id="intigriti"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&amp;lt;/diva='&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, fit inside our structure so it becomes the last element of the body. Just by leaving the DIVs unclosed, like &lt;code&gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id="intigriti"&amp;gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&lt;/code&gt;, we will have as result that all the divs that goes after our payload instantly fit inside &lt;code&gt;&amp;lt;div id="intigriti"&amp;gt;&lt;/code&gt;, which is great but not our final goal.&lt;/p&gt;

&lt;p&gt;Finally, by adding a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag and leaving it unclosed at the end of our payload, everything will fit inside our &lt;code&gt;&amp;lt;diva='&amp;gt;&amp;lt;/diva='&amp;gt;&lt;/code&gt; tags, and also, if we look at the generated script tag, we will find something REALLY insteresting:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt;a= '&amp;gt;)]}' null&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This means that all the weird characters were turned into a string called "a", and we just have to insert our alert onto the &lt;code&gt;xss&lt;/code&gt; parameter. This would result on the final payload:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://challenge-1021.intigriti.io/challenge/challenge.php?html=&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=intigriti&amp;gt;&amp;lt;div&amp;gt;&amp;lt;diva='&amp;gt;&amp;lt;div&amp;gt;&amp;amp;xss=;alert(document.domain)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And from this payload right down below, I was able to trick our fictional villain 1337Witch69 🤗&lt;/p&gt;

&lt;p&gt;&lt;a href="https://challenge-1021.intigriti.io/challenge/challenge.php?html=%3C/h1%3E%3C/div%3E%3Cdiv%20id=intigriti%3E%3Cdiv%3E%3Cdiva=%27%3E%3Cdiv%3E&amp;amp;xss=%3Bwindow.top.history.pushState%28%27%27%2C%27%27%2C%27%2Fhappy-ending%27%29%3Bdocument.body.style.backgroundColor%3D%60%234C59A8%60%3Bdocument.body.innerHTML%3D%60%3Ch1%20id%3D%22title%22%3EHappy%20Ending%3Cbr%2F%3E%3Cbr%2F%3E%F0%9F%A4%8D%3C%2Fh1%3E%60%3Bdocument.getElementById%28%22title%22%29.style.color%3D%60%23FFFFFF%60%3Bdocument.getElementById%28%22title%22%29.style.textShadow%20%3D%20%222px%202px%202px%20rgba%280%2C0%2C0%2C0.2%29%22%3B"&gt;Happy Ending&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-taking-your-time-hugs"&gt;
  &lt;/a&gt;
  Thank you for taking your time 🤗
&lt;/h3&gt;

</description>
      <category>security</category>
      <category>progamming</category>
      <category>javascript</category>
      <category>ctf</category>
    </item>
    <item>
      <title>Make Your Own Music Player Using Python 🎧</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 01 Nov 2021 12:33:22 +0000</pubDate>
      <link>https://dev.to/unitybuddy/make-your-own-music-player-using-python-4nb8</link>
      <guid>https://dev.to/unitybuddy/make-your-own-music-player-using-python-4nb8</guid>
      <description>&lt;p&gt;Hello, buddies! So, Today, we are going to make our own music player with Python with GUI. No more talks, get ready with your interpreter!&lt;/p&gt;

&lt;p&gt;Wait, why do &lt;strong&gt;I&lt;/strong&gt; want it? Well, my music player doesn't work and I want a new one 😑&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QgGOc1Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621244609273/TJd9P71Rt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgGOc1Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621244609273/TJd9P71Rt.png" alt="image.png" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge about Python Basics&lt;/li&gt;
&lt;li&gt;Install Tkinter and PyGame. Then, we have to import modules.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygame&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygame&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mixer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding Time
&lt;/h2&gt;

&lt;p&gt;Your most loving part. Let's start!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;playsong&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;currentsong&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACTIVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentsong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentsong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Playing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;playsong()&lt;/code&gt; function is used to play the music. It loads the active song from the list and plays the required song. It gets executed when the user clicks on “play”.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentsong&lt;/code&gt; function gets the active song/music in the PlayList and print it. In song status, it sets 'Playing'.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pausesong&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Paused"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stopsong&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stopped"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resumesong&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Resuming"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;All these 3 functions are related to each other. 
-&lt;code&gt;pausesong()&lt;/code&gt; pause the song and set status to "Paused". 
-&lt;code&gt;stopsong()&lt;/code&gt; and &lt;code&gt;resumesong()&lt;/code&gt; do the same as their names.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Buddy Music player'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;songstatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"choosing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In here, &lt;code&gt;root&lt;/code&gt; is the main GUI window. &lt;code&gt;root.title&lt;/code&gt; set a title to the window. (Change it as you want;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;selectmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SINGLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnspan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;These are also related to GUI. It sets the colors, font etc. &lt;code&gt;fg&lt;/code&gt; means Foreground and &lt;code&gt;bg&lt;/code&gt; means background.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;playlist.grid()&lt;/code&gt;locates widgets in a two dimensional grid using row and column absolute coordinates.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'D:\MyPlayList'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;selectmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SINGLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnspan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;songs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;END&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;os.chdir&lt;/code&gt;method in Python used to change the current working directory to specified path. It takes only a single argument as new directory path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;os.listdr()&lt;/code&gt; method in python is used to get the list of all files and directories in the specified directory. If we don't specify any directory, then list of files and directories in the current working directory will be returned.&lt;/li&gt;
&lt;li&gt;In for loop, it inserts all the files in our file directory to the &lt;code&gt;playlist&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;playbtn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"play"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;playsong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;playbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;padx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pady&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;playbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pausebtn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Pause"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pausesong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pausebtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;padx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pady&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pausebtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stopbtn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Stop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stopsong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stopbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;padx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pady&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stopbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Resumebtn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resume"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;resumesong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Resumebtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"DodgerBlue2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;padx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pady&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Resumebtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the last part. All of these lines are for GUI Buttons. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt; is for to command. The comman name is the functions name that we wrote first. Eg : &lt;code&gt;playsong&lt;/code&gt;. &lt;code&gt;resumesong&lt;/code&gt; We talked about all other GUI variables in above. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So finally, you have made your own music player with Python! Congrats buddy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SmallLion/Python-Projects/blob/main/Music_player.py"&gt;Get Full Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the result will be,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSbNwImk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621244386713/TYHU6_MYu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSbNwImk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621244386713/TYHU6_MYu.png" alt="image.png" width="462" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we want only the music player, don't care much about GUI.😉 &lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/make-your-own-music-player-using-python"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Much Does It Cost to Hire a Java Developer?</title>
      <author>iWebServices</author>
      <pubDate>Mon, 01 Nov 2021 12:31:06 +0000</pubDate>
      <link>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-a-java-developer-f90</link>
      <guid>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-a-java-developer-f90</guid>
      <description>&lt;p&gt;Due to the flexibility that the Java programming language offers, all major firms usually have an ongoing need to hire the best Java developers. Having strong Java expertise can provide you with an advantage in this competitive world, as technology has taken over practically everything, from trade and commerce to education and businesses.&lt;/p&gt;

&lt;p&gt;Let us first define Java and Java developers before determining how much it costs to hire a Java developer in India.&lt;a href="https://www.i-webservices.com/blog/web/how-much-does-it-cost-to-hire-a-java-developer/"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Deploying an Elixir Release using Docker on Fly.io</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 01 Nov 2021 12:27:56 +0000</pubDate>
      <link>https://dev.to/miguelcoba/deploying-an-elixir-release-using-docker-on-flyio-11cc</link>
      <guid>https://dev.to/miguelcoba/deploying-an-elixir-release-using-docker-on-flyio-11cc</guid>
      <description>&lt;p&gt;I'm going to show you how to deploy our Elixir Release to Fly.io. We'll use our  &lt;a href="https://blog.miguelcoba.com/deploying-a-phoenix-16-app-with-docker-and-elixir-releases"&gt;Docker image&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-elixir-release-for-deploying-to-flyio"&gt;
  &lt;/a&gt;
  Prepare Elixir Release for deploying to Fly.io
&lt;/h2&gt;

&lt;p&gt;Fly.io uses IPv6 in all their internal networks. So we need to configure our app to use IPv6 if we want to connect the app to the database.&lt;/p&gt;

&lt;p&gt;Run this command to generate, among others, the &lt;code&gt;rel/env.sh.eex&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mix release.init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file runs just before starting our application. It configures environment variables dynamically. Set the contents of the file to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;grep &lt;/span&gt;fly-local-6pn /etc/hosts | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; 1&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RELEASE_DISTRIBUTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;name
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RELEASE_NODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$FLY_APP_NAME&lt;/span&gt;@&lt;span class="nv"&gt;$ip&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ELIXIR_ERL_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-proto_dist inet6_tcp"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file gets the IPv6 assigned by fly.io on startup and assigns it to a variable. Then it uses that variable, along with the &lt;code&gt;FLY_APP_NAME&lt;/code&gt; environment variable that fly.io automatically provides, to set another environment variable &lt;code&gt;RELEASE_NODE&lt;/code&gt;. This will be used as a unique name for the node that our app is running in. The last line configures the BEAM virtual machine to use IPv6.&lt;/p&gt;

&lt;p&gt;Let's modify the &lt;code&gt;config/runtime.exs&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;Saturn.Repo&lt;/code&gt; config to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:saturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Saturn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ssl: true,&lt;/span&gt;
    &lt;span class="ss"&gt;socket_options:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:inet6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;url:&lt;/span&gt; &lt;span class="n"&gt;database_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;pool_size:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"POOL_SIZE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"10"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the &lt;code&gt;SaturnWeb.Endpoint&lt;/code&gt; to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FLY_APP_NAME"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"FLY_APP_NAME not available"&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:saturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SaturnWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;url:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;host:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.fly.dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;http:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;# Enable IPv6 and bind on all interfaces.&lt;/span&gt;
      &lt;span class="c1"&gt;# Set it to  {0, 0, 0, 0, 0, 0, 0, 1} for local network only access.&lt;/span&gt;
      &lt;span class="c1"&gt;# See the documentation on https://hexdocs.pm/plug_cowboy/Plug.Cowboy.html&lt;/span&gt;
      &lt;span class="c1"&gt;# for details about using IPv6 vs IPv4 and loopback vs public addresses.&lt;/span&gt;
      &lt;span class="ss"&gt;ip:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"4000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;secret_key_base:&lt;/span&gt; &lt;span class="n"&gt;secret_key_base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a &lt;code&gt;.dockerignore&lt;/code&gt; file to the root of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;assets/node_modules/
deps/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify the &lt;code&gt;Dockerfile&lt;/code&gt; and change the line that copies the &lt;code&gt;runtime.exs&lt;/code&gt; file to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# copy runtime configuration file&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; rel rel&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; config/runtime.exs config/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am creating a branch named &lt;code&gt;fly-io-deployment&lt;/code&gt; and committing all these changes to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; fly-io-deployment
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Deploying to fly.io"&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin fly-io-deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-and-configure-your-flyio-account"&gt;
  &lt;/a&gt;
  Create and configure your Fly.io account
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-flyctl"&gt;
  &lt;/a&gt;
  Install flyctl
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;superfly/tap/flyctl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sign-up-to-flyio"&gt;
  &lt;/a&gt;
  Sign up to fly.io
&lt;/h3&gt;

&lt;p&gt;If you don't have a fly.io account, create one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flyctl auth signup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#login-to-flyio"&gt;
  &lt;/a&gt;
  Login to fly.io
&lt;/h3&gt;

&lt;p&gt;If you already have a fly.io account, login&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flyctl auth login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-flyio-app"&gt;
  &lt;/a&gt;
  Create a Fly.io app
&lt;/h2&gt;

&lt;p&gt;Before launching the app ensure you have added a credit card to your organization by visiting &lt;a href="https://fly.io/organizations/personal"&gt;https://fly.io/organizations/personal&lt;/a&gt; and adding one. Otherwise, the next command won't work.&lt;/p&gt;

&lt;p&gt;Once you're ready, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly launch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask you some things to configure your app in fly.io. Leave the App name blank in order to get a random name for it. Pick a region close to where you live and make sure that you answer no to the question about deploying now.&lt;/p&gt;

&lt;p&gt;You should see something similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly launch
Creating app &lt;span class="k"&gt;in&lt;/span&gt; /Users/mcoba/Code/saturn
Scanning &lt;span class="nb"&gt;source &lt;/span&gt;code
Detected a Dockerfile app
? App Name &lt;span class="o"&gt;(&lt;/span&gt;leave blank to use an auto-generated name&lt;span class="o"&gt;)&lt;/span&gt;:
Automatically selected personal organization: Miguel Cobá
? Select region: mad &lt;span class="o"&gt;(&lt;/span&gt;Madrid, Spain&lt;span class="o"&gt;)&lt;/span&gt;
Created app damp-paper-3277 &lt;span class="k"&gt;in &lt;/span&gt;organization personal
Wrote config file fly.toml
? Would you like to deploy now? No
Your app is ready. Deploy with &lt;span class="sb"&gt;`&lt;/span&gt;flyctl deploy&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the &lt;code&gt;fly.toml&lt;/code&gt; file that flyctl created in the root of the project. Change the &lt;code&gt;kill_signal&lt;/code&gt; to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;kill_signal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SIGTERM"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add a &lt;code&gt;[deploy]&lt;/code&gt; section after &lt;code&gt;[env]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[env]&lt;/span&gt;

&lt;span class="nn"&gt;[deploy]&lt;/span&gt;
  &lt;span class="py"&gt;release_command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"eval Saturn.Release.migrate"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;change the &lt;code&gt;internal_port&lt;/code&gt; to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;  &lt;span class="py"&gt;internal_port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-secrets-on-flyio"&gt;
  &lt;/a&gt;
  Set secrets on Fly.io
&lt;/h2&gt;

&lt;p&gt;We need to create some secrets in Fly.io infrastructure to be used when the app starts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly secrets &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;mix phx.gen.secret&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-database"&gt;
  &lt;/a&gt;
  Create database
&lt;/h2&gt;

&lt;p&gt;Create a database for the app. Aswer the questions leaving the app name blank to get a random name and ensure you select the smallest VM size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly postgres create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly postgres create

? App Name:
Automatically selected personal organization: Miguel Cobá
? Select region: mad &lt;span class="o"&gt;(&lt;/span&gt;Madrid, Spain&lt;span class="o"&gt;)&lt;/span&gt;
? Select VM size: shared-cpu-1x - 256
? Volume size &lt;span class="o"&gt;(&lt;/span&gt;GB&lt;span class="o"&gt;)&lt;/span&gt;: 10
Creating postgres cluster  &lt;span class="k"&gt;in &lt;/span&gt;organization personal
Postgres cluster still-sun-6781 created
  Username:    postgres
  Password:   &amp;lt;some big password&amp;gt;
  Hostname:    still-sun-6781.internal
  Proxy Port:  5432
  PG Port: 5433
Save your credentials &lt;span class="k"&gt;in &lt;/span&gt;a secure place, you won&lt;span class="s1"&gt;'t be able to see them again!

Monitoring Deployment

2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 1 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 1 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 1 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 2 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 3 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 4 passing,
2 desired, 2 placed, 0 healthy, 0 unhealthy [health checks: 6 total, 5 passing,
2 desired, 2 placed, 2 healthy, 0 unhealthy [health checks: 6 total, 6 passing]
--&amp;gt; v0 deployed successfully

Connect to postgres
Any app within the personal organization can connect to postgres using the above credentials and the hostname "still-sun-6781.internal."
For example: postgres://postgres:&amp;lt;the big password&amp;gt;@still-sun-6781.internal:5432

See the postgres docs for more information on next steps, managing postgres, connecting from outside fly:  https://fly.io/docs/reference/postgres/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take note of the generated database name, you'll need it in the next step. Mine is: &lt;code&gt;still-sun-6781&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What remains is to connect the Elixir Release app to the PostgreSQL app. Run this command but use  your own database name. This will create a new postgres user and password to connect from the Elixir Release to the PostgreSQL database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly postgres attach &lt;span class="nt"&gt;--postgres-app&lt;/span&gt; still-sun-6781
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly postgres attach &lt;span class="nt"&gt;--postgres-app&lt;/span&gt; still-sun-6781

Postgres cluster still-sun-6781 is now attached to damp-paper-3277
The following secret was added to damp-paper-3277:
  &lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://&amp;lt;some new user&amp;gt;:&amp;lt;some new password&amp;gt;@still-sun-6781.internal:5432/damp_paper_3277?sslmode&lt;span class="o"&gt;=&lt;/span&gt;disable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this automatically created a secret with the &lt;code&gt;DATABASE_URL&lt;/code&gt; that we were missing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-flyio"&gt;
  &lt;/a&gt;
  Deploy to Fly.io
&lt;/h2&gt;

&lt;p&gt;Do the deployment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the Docker image building, push it to fly.io's registry and then will deploy a container based on that image and will provide the secrets we configure it to start it. After lots of output logs you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; Release &lt;span class="nb"&gt;command
&lt;/span&gt;Command: &lt;span class="nb"&gt;eval &lt;/span&gt;Saturn.Release.migrate
     Starting instance
     Configuring virtual machine
     Pulling container image
     Unpacking image
     Preparing kernel init
     Configuring firecracker
     Starting virtual machine
     Starting init &lt;span class="o"&gt;(&lt;/span&gt;commit: 50ffe20&lt;span class="o"&gt;)&lt;/span&gt;...
     Preparing to run: &lt;span class="sb"&gt;`&lt;/span&gt;bin/saturn &lt;span class="nb"&gt;eval &lt;/span&gt;Saturn.Release.migrate&lt;span class="sb"&gt;`&lt;/span&gt; as elixir
     2021/10/29 23:19:47 listening on &lt;span class="o"&gt;[&lt;/span&gt;fdaa:0:37f6:a7b:2656:f312:7c7b:2]:22 &lt;span class="o"&gt;(&lt;/span&gt;DNS: &lt;span class="o"&gt;[&lt;/span&gt;fdaa::3]:53&lt;span class="o"&gt;)&lt;/span&gt;
     Reaped child process with pid: 561 and signal: SIGUSR1, core dumped? &lt;span class="nb"&gt;false
     &lt;/span&gt;23:19:50.604 &lt;span class="o"&gt;[&lt;/span&gt;info] Migrations already up
     Main child exited normally with code: 0
     Reaped child process with pid: 563 and signal: SIGUSR1, core dumped? &lt;span class="nb"&gt;false
     &lt;/span&gt;Starting clean up.
Monitoring Deployment

1 desired, 1 placed, 1 healthy, 0 unhealthy &lt;span class="o"&gt;[&lt;/span&gt;health checks: 1 total, 1 passing]
&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; v1 deployed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see the deployment was executed correctly and it ran the migrations. Now let's visit the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A browser is opened and you should be presented with your app, running on Fly.io infrastructure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Y8QzjnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mceqz5djwfvxkasb38sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Y8QzjnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mceqz5djwfvxkasb38sc.png" alt="App running on fly.io infrastructure" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-the-running-node-with-iex"&gt;
  &lt;/a&gt;
  Connect to the running node with IEx
&lt;/h3&gt;

&lt;p&gt;We need to configure a secure ssh tunnel to the container running in fly.io.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly ssh establish
fly ssh issue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer with your email and select a place to save your private keys. If you already use ssh for other connections you can save it to the same $HOME/.ssh/ directory. I got this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly ssh establish
Automatically selected personal organization: Miguel Cobá
Establishing SSH CA cert &lt;span class="k"&gt;for &lt;/span&gt;organization personal
New organization root certificate:
ssh-ed25519-cert-v01@openssh.com &amp;lt;some big value&amp;gt;

fly ssh issue
? Email address &lt;span class="k"&gt;for &lt;/span&gt;user to issue cert:  miguel.coba@gmail.com

&lt;span class="o"&gt;!!!!&lt;/span&gt; WARNING: We&lt;span class="s1"&gt;'re now prompting you to save an SSH private key and certificate       !!!!
!!!! (the private key in "id_whatever" and the certificate in "id_whatever-cert.pub"). !!!!
!!!! These SSH credentials are time-limited and handling them in files is clunky;      !!!!
!!!! consider running an SSH agent and running this command with --agent. Things       !!!!
!!!! should just sort of work like magic if you do.                                    !!!!
? Path to store private key:  ~/.ssh/id_fly_io
? Path to store private key:  /Users/mcoba/.ssh/.id_fly_io
Wrote 24-hour SSH credential to /Users/mcoba/.ssh/.id_fly_io, /Users/mcoba/.ssh/.id_fly_io-cert.pub
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now connect to the container with &lt;code&gt;fly ssh console&lt;/code&gt; and connect to the erlang node with &lt;code&gt;app/bin/saturn remote&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fly ssh console
Connecting to damp-paper-3277.internal... &lt;span class="nb"&gt;complete&lt;/span&gt;
/ &lt;span class="c"&gt;# cd ~&lt;/span&gt;
/home/elixir &lt;span class="c"&gt;# ls&lt;/span&gt;
app
/home/elixir &lt;span class="c"&gt;# app/bin/saturn remote&lt;/span&gt;
Erlang/OTP 24 &lt;span class="o"&gt;[&lt;/span&gt;erts-12.1.2] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;64-bit] &lt;span class="o"&gt;[&lt;/span&gt;smp:1:1] &lt;span class="o"&gt;[&lt;/span&gt;ds:1:1:10] &lt;span class="o"&gt;[&lt;/span&gt;async-threads:1] &lt;span class="o"&gt;[&lt;/span&gt;jit:no-native-stack]

Interactive Elixir &lt;span class="o"&gt;(&lt;/span&gt;1.12.3&lt;span class="o"&gt;)&lt;/span&gt; - press Ctrl+C to &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type &lt;/span&gt;h&lt;span class="o"&gt;()&lt;/span&gt; ENTER &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;The  &lt;a href="https://github.com/miguelcoba/saturn/tree/fly-io-deployment"&gt;source code&lt;/a&gt;  for the saturn project is open source under the MIT license. Use the &lt;code&gt;fly-io-deployment&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;I'm &lt;a href="https://miguelcoba.com"&gt;Miguel Cobá&lt;/a&gt;. Follow me on &lt;a href="https://twitter.com/MiguelCoba_"&gt;Twitter&lt;/a&gt;, subscribe to my &lt;a href="https://newsletter.miguelcoba.com"&gt;newsletter&lt;/a&gt;, or read all my &lt;a href="https://blog.miguelcoba.com"&gt;articles&lt;/a&gt; to learn more info about Elixir, Elm, Web Development, or writing eBooks.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>phoenixframework</category>
      <category>docker</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Resty: a tiny, radix-tree based library for building RESTful APIs</title>
      <author>Gabriel Vaquer</author>
      <pubDate>Mon, 01 Nov 2021 12:20:23 +0000</pubDate>
      <link>https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a</link>
      <guid>https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a</guid>
      <description>&lt;p&gt;A few days ago I posted about a library I made called &lt;a href="https://github.com/brielov/typed"&gt;typed&lt;/a&gt; and it never happened to me before that people would actually use something I made. The thing is that I made &lt;code&gt;typed&lt;/code&gt; to be a companion library to &lt;a href="https://github.com/brielov/resty"&gt;resty&lt;/a&gt; which is a thin wrapper around Node's http core module.&lt;/p&gt;

&lt;p&gt;Resty is what I think is the best way I'd like to write RESTful APIs in Node. It borrows some of its syntax from the fetch API and it is of course type-safe. Let me show you how I'd like to write my endpoints.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8h97Js3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n9q3nji6duoofjiwhud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8h97Js3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n9q3nji6duoofjiwhud.png" alt="Code demonstration" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having an endpoint of about three lines of code is pretty nice to me, specially because there's type-safety involved. Take a closer look at &lt;code&gt;request.json&lt;/code&gt; and &lt;code&gt;request.query&lt;/code&gt;. They both require a &lt;code&gt;typed&lt;/code&gt; function to be passed in. If the validation fails, a &lt;code&gt;400 Bad Request&lt;/code&gt; error is returned with a detailed explanation of what went wrong.&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;postMovie&lt;/code&gt; and &lt;code&gt;getMovies&lt;/code&gt; are typed because it is inferring the types from the &lt;code&gt;Response&lt;/code&gt; object, so it knows that getMovies returns a &lt;code&gt;Response&amp;lt;Movie[]&amp;gt;&lt;/code&gt; and postMovie returns a &lt;code&gt;Response&amp;lt;Movie&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The example above shows multiple endpoints being written in a single file. I personally don't don't use it like this (I prefer to write endpoints in separate files) but for demonstration purposes I'll leave it like this.&lt;/p&gt;

&lt;p&gt;So how do we glue the endpoints together? Well, we can use the &lt;code&gt;createHandler&lt;/code&gt; function to combine all our endpoints into a single request handler that can be use directly with &lt;code&gt;http.createServer&lt;/code&gt;. &lt;code&gt;createHandler&lt;/code&gt; will build a radix-tree based router internally which was borrowed and adapted from &lt;a href="https://github.com/steambap/koa-tree-router"&gt;koa-router-tree&lt;/a&gt; which is the fastest router implementation out there, even faster than fastify's &lt;a href="https://github.com/delvedor/find-my-way"&gt;find-my-way&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMovies&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./endpoints&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Listening on port 4000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Right now you're thinking "but this doesn't support middleware, how would I enable cors?" Well, &lt;code&gt;resty&lt;/code&gt; is just a good old request handler, so you could actually combine it with &lt;a href="https://github.com/senchalabs/connect"&gt;connect&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMovies&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./endpoints&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The nice thing about doing things this way is that you can test your endpoints the same way you would test an express application with &lt;code&gt;supertest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I know all cool kids are writing Serverless APIs these days, but I still enjoy writing APIs the old way for simple, personal projects. Anyways, I thought of sharing this library too and hope somebody will benefit from it. &lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/brielov"&gt;
        brielov
      &lt;/a&gt; / &lt;a href="https://github.com/brielov/resty"&gt;
        resty
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Syntactic sugar for RESTful APIs
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
resty&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Syntactic sugar for &lt;a href="http://restful.info" rel="nofollow"&gt;RESTful&lt;/a&gt; APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;resty&lt;/code&gt; adds a very thin layer on top of Node's core http module that provides a beautiful, simple, and easy to use API for building RESTful APIs. It is mostly syntactic sugar, but it also provides a few additional features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A really fast, radix-tree based routing system that allows you to define routes in a declarative way.&lt;/li&gt;
&lt;li&gt;A simple and powerful way to validate request parameters and JSON payloads using &lt;a href="https://github.com/brielov/typed"&gt;typed&lt;/a&gt; (direct dependency).&lt;/li&gt;
&lt;li&gt;Built-in error handling that automatically generates error responses for you.&lt;/li&gt;
&lt;li&gt;Separation of concerns: write your http handlers in a modular way, and use the &lt;code&gt;createHandler&lt;/code&gt; function to glue them all together.&lt;/li&gt;
&lt;li&gt;Type-safe request and response objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that at the time of writing &lt;code&gt;resty&lt;/code&gt; has not been fully tested in the real world and is not recommended for production use (yet). You can play around with it on small, personal projects…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/brielov/resty"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Contributing to blockly!</title>
      <author>Gerardo Enrique Arriaga Rendon</author>
      <pubDate>Mon, 01 Nov 2021 12:18:38 +0000</pubDate>
      <link>https://dev.to/jerryhue/contributing-to-blockly-46h2</link>
      <guid>https://dev.to/jerryhue/contributing-to-blockly-46h2</guid>
      <description>&lt;p&gt;For the past month, we were assigned by our professor to search for open source projects in GitHub and contribute to them by submitting PRs that address some issues in the projects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h1&gt;

&lt;p&gt;This time, I decided to work on &lt;a href="https://github.com/google/blockly"&gt;&lt;code&gt;blockly&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Blockly&lt;/code&gt; is a visual programming language, mainly used to generate code into other programming languages, like JavaScript, PHP, Lua, etc. If you have heard of Scratch, well, then you probably know how &lt;code&gt;blockly&lt;/code&gt; will look like and work. If you are not sure, you can always check the &lt;a href="https://developers.google.com/blockly/"&gt;demo&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The issue
&lt;/h1&gt;

&lt;p&gt;This time, I went with a code clean up issue: &lt;a href="https://github.com/google/blockly/issues/5273"&gt;&lt;code&gt;#5273: Cleanup handling of potential variables&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h1&gt;

&lt;p&gt;After being assigned the issue, I decided to set up the project and play with it a little.&lt;/p&gt;

&lt;p&gt;After cloning the repo, I read over the development documentation to know how should I startup my project, and it was a little tricky at first. After building it up, I thought I had to run the project by opening the HTML file that contained the playground (called &lt;code&gt;playground.html&lt;/code&gt; in the &lt;code&gt;tests&lt;/code&gt; folder of the project).&lt;/p&gt;

&lt;p&gt;I noticed that the page did not look right, so I checked over the console and I notice that none of the files can't be opened because of the CORS rule. Since every file in the local file system is considered to have a different origin, the browser cannot 'request' those, even if they actually exist.&lt;/p&gt;

&lt;p&gt;Thus, I had to start up a small http server just to get the files as if I was receiving them remotely. Indeed, opening the HTML this way helped me to actually get a working page and start playing with the application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-code"&gt;
  &lt;/a&gt;
  Writing code
&lt;/h1&gt;

&lt;p&gt;Most of the time, I start to write code because I know where to go. However, this time, I did not have a lot of context of what workspaces were, or what a flyout workspace is, or even what a potential variable map is! Thus, I ended up reading a lot of code to understand how everything is laid out and how everything connects with each other.&lt;/p&gt;

&lt;p&gt;While I cannot say that I know 100% the structure, or even that I understand it, I learned just enough to actually be able to work on the issue. Mind you, this actually took me several tries of painful debugging sessions to know how everything flowed.&lt;/p&gt;

&lt;p&gt;In basic terms, every time you add a new variable, we need to keep track of it. This is what the variable map is for. However, flyout workspaces (the ones where they show you a preview of the blocks you can use, like a toolbox) are special, since flyout workspaces keep track of variables that are not actually being used at the moment in the main workspace (the workspace where you place the blocks to connect them). Thus, a &lt;code&gt;potentialVariableMap&lt;/code&gt; was used, to keep track of these "potential" variables.&lt;/p&gt;

&lt;p&gt;However, the creator of the issue, &lt;a href="https://github.com/BeksOmega"&gt;&lt;code&gt;@BeksOmega&lt;/code&gt;&lt;/a&gt;, figured out that this &lt;code&gt;potentialVariableMap&lt;/code&gt; was not necessarily at all, since flyout workspaces could use the actual &lt;code&gt;variableMap&lt;/code&gt; they had available.&lt;/p&gt;

&lt;p&gt;Thus, we end up deleting the &lt;code&gt;potentialVariableMap&lt;/code&gt; from the codebase, and adjust the code a little so that a stack overflow does not occur.&lt;/p&gt;

&lt;p&gt;Funny story: I actually tried to work on this code without having a lot of knowledge over it. After I did the changes I thought were enough, I tested the application and noticed that when I press a specific category of blocks, my browser would freeze for a bit and then I would get a report of a stack overflow in the browser console. It took me 4 hours to actually understand the reason.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-pr"&gt;
  &lt;/a&gt;
  The PR
&lt;/h1&gt;

&lt;p&gt;After getting the code ready, I submitted my &lt;a href="https://github.com/google/blockly/pull/5656"&gt;PR&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>osd600</category>
    </item>
  </channel>
</rss>
