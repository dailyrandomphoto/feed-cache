<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding User Authentication from Scratch</title>
      <author>propelauthblog</author>
      <pubDate>Wed, 24 Nov 2021 19:09:16 +0000</pubDate>
      <link>https://dev.to/propelauth/understanding-user-authentication-from-scratch-3pl2</link>
      <guid>https://dev.to/propelauth/understanding-user-authentication-from-scratch-3pl2</guid>
      <description>&lt;p&gt;Authentication is a broad topic that can be both very simple and very complicated. In this series we'll describe what it is and different approaches to implement it, starting from older less-secure methods and ending with modern more-secure methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authentication"&gt;
  &lt;/a&gt;
  What is Authentication?
&lt;/h2&gt;

&lt;p&gt;Authentication is the process of determining who someone or something is. In the real world, when you give someone your ID or passport, that's a form of authentication. Online, when you enter an email/password, that's a form of authentication.&lt;/p&gt;

&lt;p&gt;While authentication processes can also be for machine-to-machine communication, in this post we'll focus on users identifying themselves to a web server - a.k.a. &lt;strong&gt;user&lt;/strong&gt; authentication.&lt;/p&gt;

&lt;p&gt;To simplify the problem, we need two processes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Some way to create new users&lt;/li&gt;
&lt;li&gt;Some way to identify existing users&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at a few approaches to do these and point out what's good and bad about each approach. Let's assume we are building a web app, and we have both a server to handle requests and a database to store data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-user-authentication-attempt-1"&gt;
  &lt;/a&gt;
  Implementing User Authentication: Attempt 1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-users"&gt;
  &lt;/a&gt;
  Creating new users
&lt;/h3&gt;

&lt;p&gt;When a new user wants to sign up, we'll ask for their email address and password and save those to the DB. Typically, we also create a user ID so that users can change their email address but their user ID won't change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdzV9Q1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jk53vhqwvdthz3sqazk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdzV9Q1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jk53vhqwvdthz3sqazk.png" alt="Signup flow attempt 1" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifying-existing-users"&gt;
  &lt;/a&gt;
  Identifying existing users
&lt;/h3&gt;

&lt;p&gt;A user wants to make a request to our server. The only pieces of information we have are their email address, user ID, and password. What if we just ask them to send us their email address and password again on each request?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpIiGC3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u11h3hdd8uvmn4k0u5jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpIiGC3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u11h3hdd8uvmn4k0u5jw.png" alt="Basic auth workflow" width="880" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we get a request, we verify the email address exists in our database and the password is correct.&lt;/p&gt;

&lt;p&gt;This is called &lt;strong&gt;Basic Authentication&lt;/strong&gt; (technically basic authentication requires the email/password to be sent in a specific format in the header, but the idea is still the same - the request contains the email and password).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons
&lt;/h3&gt;

&lt;p&gt;On the plus side, this system is very simple... one might even call it basic. &lt;/p&gt;

&lt;p&gt;That being said, every time a user wants to do anything, they need to specify their email address and password. It's bad practice to save a user's password somewhere in the browser (like &lt;code&gt;localStorage&lt;/code&gt;), and asking the user to re-enter their password every single time they want to do anything is a terrible user experience.&lt;/p&gt;

&lt;p&gt;This approach isn't completely worthless though. Remember, authentication is a broad topic, and while I wouldn't implement a system where users are constantly passing in their email/password in a browser, if I was building a service where the requests primarily come from a terminal instead, saving someone's email and password to a file or keychain and passing it along on every request is definitely more reasonable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-user-authentication-attempt-2"&gt;
  &lt;/a&gt;
  Implementing User Authentication: Attempt 2
&lt;/h2&gt;

&lt;p&gt;We don't want to ask our users to keep entering their password, so we need something else they can send to us to prove they are who they say they are.&lt;/p&gt;

&lt;p&gt;We do also have a user id... and we can make that user id as random as we like. What if we keep our signup method the same, but return the user id to the client and ask them to return it on each request.&lt;/p&gt;

&lt;p&gt;Assuming user ids are generated with a &lt;a href="https://en.wikipedia.org/wiki/Cryptographically-secure_pseudorandom_number_generator"&gt;cryptographically-secure pseudorandom number generator&lt;/a&gt;, they should be unguessable, and we should be fine here... right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ln5b-DZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28123cl7cs40ls6flfhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ln5b-DZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28123cl7cs40ls6flfhb.png" alt="Bad auth workflow" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;This approach is actually worse than our first attempt. One reason why is user ids aren't supposed to change. If a user's id is leaked, we have no way to prevent attackers from accessing that users account, forever. In our last attempt, if someone's password was stolen, they could have changed it. Now, however, they need a new account with a different user ID.&lt;/p&gt;

&lt;p&gt;We did say that user IDs were unguessable but there are unfortunately ways where it could get leaked. Maybe the user used an insecure password and someone guessed it and therefore got their user id. Maybe they logged in on a shared computer with malware on it. We have unfortunately no good ways to protect our users once their user ID is out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-user-authentication-attempt-3"&gt;
  &lt;/a&gt;
  Implementing User Authentication: Attempt 3
&lt;/h2&gt;

&lt;p&gt;Ok, so we don't want to send passwords on each request, and we don't want to send a user ID on each request because we can't easily revoke it.&lt;/p&gt;

&lt;p&gt;What if, instead of asking the user to send us a user ID, we create a new unguessable token and map it to the user's ID?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfP-UpJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g9xptgb2bndpjlgvcbi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfP-UpJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g9xptgb2bndpjlgvcbi.png" alt="Issuing a token" width="880" height="314"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIrEfoVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v72azyvdz99mm24p2zj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIrEfoVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v72azyvdz99mm24p2zj9.png" alt="Using a token" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If someone steals our token, we can delete it from our database and our user would have to log in again. We can even add an expiration time, after which the token is considered invalid.&lt;/p&gt;

&lt;p&gt;These tokens are often called session tokens, and they are typically stored in cookies. These tokens are also called &lt;strong&gt;opaque&lt;/strong&gt; tokens, because the string itself has no meaning outside our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons
&lt;/h3&gt;

&lt;p&gt;This a way more reasonable approach. After a user logs in, they have an unguessable token which only they have. It's not sensitive like a password. If a user wants to log out or if their phone/laptop gets stolen, we can just delete the token from our database.&lt;/p&gt;

&lt;p&gt;The main con is that this is a stateful approach. Verifying a session token requires us to do a database lookup. Some platforms like &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; have solutions like &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;Next.js API Routes&lt;/a&gt; which boast that they can be run globally at the edge - meaning as close to the user as possible. If you need to do a database lookup in a database in a fixed location, you can lose some of the latency advantages you gain by globally hosting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-approach-jwts"&gt;
  &lt;/a&gt;
  Alternative Approach - JWTs
&lt;/h3&gt;

&lt;p&gt;If we want to avoid the database lookup, instead of issuing tokens that are saved to our database, we can issue JWTs. We have a separate article dedicated to understanding JWTs &lt;a href="https://blog.propelauth.com/jwt-explained/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-user-authentication-hard"&gt;
  &lt;/a&gt;
  Why is User Authentication hard?
&lt;/h2&gt;

&lt;p&gt;So far, everything we've mentioned is hopefully pretty straightforward. The difficulty in user authentication doesn't come from the approach, it comes from all the tiny details. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you store passwords, you need to make sure they are stored securely. See our article about that &lt;a href="https://blog.propelauth.com/securely-storing-passwords/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Best practice for user authentication is to deny commonly used passwords and &lt;a href="https://blog.propelauth.com/easy-breached-password-detection/"&gt;passwords seen in previous data breaches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It's easy to introduce subtle &lt;a href="https://blog.propelauth.com/understanding-timing-attacks-with-code/"&gt;timing attack vulnerabilities&lt;/a&gt;, either in verifying the password or in supplementary workflows like forgotten password flows.&lt;/li&gt;
&lt;li&gt;There are guidelines about the error messages you display to avoid leaking email addresses of your users.&lt;/li&gt;
&lt;li&gt;There have been multiple vulnerabilities in JWT libraries themselves.&lt;/li&gt;
&lt;li&gt;If you are using cookies, they should be HTTP-only and secure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And the list goes on. &lt;/p&gt;

&lt;p&gt;Services like &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt; exist so you can avoid wasting time worrying about user authentication and get back to just building your product.&lt;/p&gt;

&lt;p&gt;In future posts in this series, we'll look at how things like social logins and two-factor authentication work.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>Visual Studio Code Lifehack that saved me a ton of time!</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Wed, 24 Nov 2021 19:01:59 +0000</pubDate>
      <link>https://dev.to/harsvnc/visual-studio-code-lifehack-that-saved-me-a-ton-of-time-23b1</link>
      <guid>https://dev.to/harsvnc/visual-studio-code-lifehack-that-saved-me-a-ton-of-time-23b1</guid>
      <description>&lt;p&gt;Do you know that situation when you have a huge file with a lot of lines in vs code and you jump from one line to another and lose your orientation where you where last?&lt;/p&gt;

&lt;p&gt;Don't worry, i got you!&lt;/p&gt;

&lt;p&gt;By simply pressing&lt;br&gt;&lt;br&gt;
Alt + ⬅️ on &lt;strong&gt;Windows&lt;/strong&gt; or &lt;br&gt;
control + "-" (minus letter) on &lt;strong&gt;Mac&lt;/strong&gt; &lt;br&gt;
you will navigate to the last courser position. &lt;/p&gt;

&lt;p&gt;Thanks and i hope i could save you some time =)&lt;/p&gt;

&lt;p&gt;If you likes this post you may will like some of my other posts too, like &lt;a href="https://dev.to/harsvnc/the-css-chrome-dev-tool-you-didnt-know-of-3155"&gt;that one chrome extension you didn't know of&lt;/a&gt;. 🧑‍💻 ✅&lt;br&gt;
Or just follow me on&lt;a href="https://twitter.com/harsvnc"&gt;Twitter&lt;/a&gt; 📢 ✅&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Listen to the S7E3 of DevDiscuss: "Getting a Read on Tech Publishing"</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 24 Nov 2021 18:56:56 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-s7e3-of-devdiscuss-getting-a-read-on-tech-publishing-3e7g</link>
      <guid>https://dev.to/devteam/listen-to-the-s7e3-of-devdiscuss-getting-a-read-on-tech-publishing-3e7g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#there-might-be-a-book-inside-of-you-waiting-to-be-written-lets-explore-that-in-this-weeks-episode-of-devdiscuss"&gt;
  &lt;/a&gt;
  There might be a book inside of you waiting to be written. Let's explore that in this week's episode of DevDiscuss...
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e3-getting-a-read-on-tech-publishing"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E3 - Getting a Read on Tech Publishing&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e3-getting-a-read-on-tech-publishing" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e3-getting-a-read-on-tech-publishing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e3-getting-a-read-on-tech-publishing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e3-getting-a-read-on-tech-publishing" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e3-getting-a-read-on-tech-publishing"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e3-getting-a-read-on-tech-publishing"&gt;
      &lt;img id="episode-profile-image" alt="S7:E3 - Getting a Read on Tech Publishing" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher — DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Episode Info&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In S7E3, we talk about the fascinating world of tech publishing. If you're here on DEV contributing content, this episode is made for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 — Developer Advocate at Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@theledu"&gt;Katel LeDû&lt;/a&gt; is the CEO of A Book Apart, where she helps passionate tech community members become successful authors. She’s also a personal and professional transformation coach, focused on helping folks cultivate creativity, develop social awareness in themselves and at work, and embody sensitivity and empathy as superpowers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e3-getting-a-read-on-tech-publishing/id1513053883?i=1000542927515"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/75aoNPdGIKUREVuIxsAaua"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzUy?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjA4PPM1rH0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss-dev-xtQvoDylAUg/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=167986563"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/232"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Understanding Basic Coding Terminology: Industry Basics</title>
      <author>Amy Oulton</author>
      <pubDate>Wed, 24 Nov 2021 18:37:24 +0000</pubDate>
      <link>https://dev.to/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7</link>
      <guid>https://dev.to/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally written by me for &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re just entering the world of development, one of the first things you will likely notice is how much jargon there is. I know when I first started, it felt like there was at least one word in every sentence that I had never heard before. Like any field, there is very specific jargon related to the field of development. With coding, there is specific jargon for different types of programming as well as jargon that is unique to specific languages, libraries, and frameworks. &lt;/p&gt;

&lt;p&gt;I know I've looked up what words mean only to be more confused after reading the definition. It can all feel a little daunting to start, so our goal in this post is to introduce some of the broader and more commonly used terms in coding to help get you started on your coding journey!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ib2eoO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvm6n4ppi7pjw8utemqy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ib2eoO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvm6n4ppi7pjw8utemqy.jpeg" alt="Exhausted Dev" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developerprogrammer"&gt;
  &lt;/a&gt;
  Developer/Programmer
&lt;/h3&gt;

&lt;p&gt;Even in the small amount of text you’ve already read, both of these things have come up. They’re mentioned basically everywhere, and one of the most common questions from people new to coding is "what is the difference between a programmer and a developer". Essentially, within the industry, these two terms are used almost interchangeably. There are some technical differences between them, but even that meaning can shift from company to company. But generally speaking, a programmer has a more specific task or workload than a developer. A programmer will be working on a project in a much narrower scope, instead of having the hands in many different pieces of the pie like a developer. &lt;/p&gt;

&lt;p&gt;But for simplicity's sake, especially when you’re just starting out, it’s safe to understand that when you read ‘programmer’ or ‘developer’, they are meaning ‘someone who codes’.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontendbackendfull-stack"&gt;
  &lt;/a&gt;
  Front-End/Back-End/Full Stack
&lt;/h3&gt;

&lt;p&gt;One of the first things you will be introduced to (and likely already have been) when you look into the world of coding are front-end and back-end developers. This is one of the easier concepts to grasp, as it’s quite simple in what the roles are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Front-End Developer&lt;/strong&gt;:  Someone who codes the aspects of a web application that a user directly interacts with. This includes all the visual aspects of the application, as well as the interactivity and functionality. They’ll be the ones to make the requests to the back-end and implement the information the back-end provides to them. Because of all this, the front-end is known as the “client-side”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back-End Developer&lt;/strong&gt;: Someone who is responsible for the “server-side” logic of the application. Essentially, they’ll use the requests made by the front-end to return information from things like a database or an API that the front-end can use. We’ll get more into what these two terms mean later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full-Stack&lt;/strong&gt;: You may have already guessed this one, but a full-stack developer is someone who works on both the client and server-side. Generally, most programs or bootcamps will teach coding as full-stack because even if someone prefers to work in either the front or back-end, and eventually seeks jobs only doing one, you need a solid understanding of the other side to know what your code is doing.‍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;: A database is simply a collection of data. It’s where all the information is stored, like users' emails, passwords, names, birthdays, etc. It’s what the server extracts data from to obtain the specific information a client may be requesting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h3&gt;

&lt;p&gt;An API stands for Application Program Interface. Clear as mud right? API’s are one of the things I struggled with wrapping my head around in my bootcamp because they can be a bit difficult to grasp as a beginner. In very simple terms, an API is something that allows you to communicate with a separate piece of software. It allows you to make a request to an entirely different piece of software than you’re currently working on, and receive a specific piece of data or information back. Often this is a third-party API and there will be clear documentation on how to make the requests to get back the desirable information. &lt;/p&gt;

&lt;p&gt;API’s are a bit difficult to wrap your head around, but understanding will come as you use them. Think of this example. You visit a website for a restaurant and you click on a specific location, which brings up a small map showing you the location. The website (almost definitely) didn’t create a match from scratch, but instead, made a request to an API (like Google Maps API) with a location, and the API gave it back the information needed to render out the map on the page. &lt;/p&gt;

&lt;p&gt;If you want to read more into APIs, I personally really like &lt;a href="https://www.howtogeek.com/343877/what-is-an-api/"&gt;this article&lt;/a&gt; by How To Geek, as they really try to simplify it while going deeper into what APIs are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#languagelibraryframework"&gt;
  &lt;/a&gt;
  Language/Library/Framework
&lt;/h3&gt;

&lt;p&gt;This one is a bit more difficult, at least in my opinion, to wrap your head around. I will do my best to explain it in a simplified version. These terms are vast and can vary (annoyingly so!). So think of these definitions as a guide to get you understanding the concepts as a whole, as opposed to the hard and fast rules of what they are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;: The language is all the syntax, grammar, and rules for how you write different parts of code, like functions, variables, classes, etc. The language is just a set of rules for how something needs to look syntactically to work.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Library&lt;/strong&gt;: A library is a collection of individual pieces of pre-written code. Many languages have pre-set libraries that are built by the people who developed the language. These are called standard libraries. There are also third-party libraries that people have written to make coding in a specific language easier. You can think of a library as something that provides you with ‘helper functions’, something that has a consistent output that you don’t have to write yourself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Framework&lt;/strong&gt;: A framework is essentially what we know the word to mean in common speech: a foundation which you can build on top of. The framework is the base on which you add your own code to. Most frameworks have a collection of libraries that provide structure and common tools to begin building your code. Frameworks define how the base and structure of the code should work, making less room for errors.&lt;/p&gt;

&lt;p&gt;Again, this is a highly simplified version and as your journey progresses, they will likely get a bit more complicated, but so is the life of a developer!&lt;/p&gt;

&lt;p&gt;Alright, for now, I think this is a good place to start. These are some of the broad and vague concepts and terms used within the industry and are important to know when learning how to code. I intend to continue this series, so keep an eye out for more blog posts coming later!&lt;/p&gt;

&lt;p&gt;Find more of my stuff here:&lt;br&gt;
&lt;a href="https://dev.to/amyoulton/how-to-avoid-common-mistakes-made-by-junior-developers-4j5j"&gt;How To: Avoid Common Mistakes By Junior Devs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc"&gt;Essential Keyboard Shortcuts&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.codecast.io/casts/KPjp7XYOQw2A-javascript-classes-constructors"&gt;JavaScript Constructors&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>How To Hire the Right Bubble Developer</title>
      <author>Lisa Dziuba</author>
      <pubDate>Wed, 24 Nov 2021 18:31:42 +0000</pubDate>
      <link>https://dev.to/lisadziuba/how-to-hire-the-right-bubble-developer-3lkc</link>
      <guid>https://dev.to/lisadziuba/how-to-hire-the-right-bubble-developer-3lkc</guid>
      <description>&lt;p&gt;🤔 Did you know that no-code is the future? No-code development is fast becoming the ideal option for startups, small businesses, and enterprises to build and scale products quickly. &lt;/p&gt;

&lt;p&gt;One of the amazing no-code tools in the space is Bubble, an app that lets you build websites and web apps without coding.&lt;/p&gt;

&lt;p&gt;If you’re considering building your product on Bubble and hiring Bubble developers, my team wrote a comprehensive guide on &lt;a href="https://welovenocode.com/hire-bubble-developers"&gt;hiring Bubble developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Those are the top 5 benefits of hiring a Bubble developer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Low-cost: Although it can be more expensive to hire full-stack developers, the cost is much lower when hiring a Bubble developer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster development: The process of writing custom software is much faster when using no-code tools, so you'll have your new application in a shorter time frame than hiring full-stack developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better quality: Because no-code tools allow you to write code without much overhead, the quality of your application will be more excellent than with full-stack developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better testing: The process of writing custom software is much faster when using no-code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hiring for any technical role is challenging and time-consuming but good preparation will help a lot. So let's go through a checklist of soft &amp;amp; hard skills that you need to consider and put in place when you want to hire a Bubble developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Previous Bubble projects &amp;amp; experience with Bubble templates&lt;/li&gt;
&lt;li&gt;Passion for no-code and Bubble&lt;/li&gt;
&lt;li&gt;Agile experience&lt;/li&gt;
&lt;li&gt;UX design skills&lt;/li&gt;
&lt;li&gt;Problem-solving skills&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nocode</category>
      <category>lowcode</category>
      <category>hiring</category>
    </item>
    <item>
      <title>What is Hoisting in Javascript ? </title>
      <author>Magnus</author>
      <pubDate>Wed, 24 Nov 2021 18:01:12 +0000</pubDate>
      <link>https://dev.to/magnus0045/what-is-hoisting-in-javascript-47f7</link>
      <guid>https://dev.to/magnus0045/what-is-hoisting-in-javascript-47f7</guid>
      <description>&lt;p&gt;Hoisting is a phenomenon by which we can access the variables and functions even before we initialize it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plZ7xdob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk1ogt2u5vkuxtul1tz2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plZ7xdob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk1ogt2u5vkuxtul1tz2.PNG" alt="Hoisting Code 1" width="451" height="387"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; In above code we can access the getName() and x even though it is in the top. This type of code will show error in other languages but because of Hoisting we are able to access it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we access it?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;It is because of &lt;a href="https://dev.to/magnus0045/how-javascript-code-is-executed-3664"&gt;execution context&lt;/a&gt; as we learned before. Creation of execution context start with the 1st phase as memory creation phase. So, in this phase variables are initialized as undefined and functions are copied as it is.  That is why we are able to access it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PULF2sa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h27s3h75pij0fopdzn82.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PULF2sa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h27s3h75pij0fopdzn82.PNG" alt="Hoisting Code 1" width="448" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run the above Javascript code we get function as output, As the functions are copied as it is in the memory creation phase of execution context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How we can see the memory creation phase of execution with the help of browser developer tool?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RW4D7aql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bqsd61jb4kmy8lky6m7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RW4D7aql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bqsd61jb4kmy8lky6m7.PNG" alt="Hoisting Code 3" width="446" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we run the above Javascript code in our browser, We have to open the developer tools in our browser and first we should add a breakpoint in &lt;strong&gt;line number:16&lt;/strong&gt; of the code. Once we start debugging, the execution first pause in &lt;strong&gt;line number:16&lt;/strong&gt;.Now click on the &lt;strong&gt;Global&lt;/strong&gt; Tab and search for &lt;strong&gt;getName&lt;/strong&gt; and &lt;strong&gt;x&lt;/strong&gt;, we can see how memory is allocated for functions and variables in memory creation phase before we execute the whole program. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below is the way how the function is stored&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rewdy3ol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiip2xaobsi6fih8u0sq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rewdy3ol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiip2xaobsi6fih8u0sq.PNG" alt="Hoisting Code 4" width="880" height="359"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Below is the way how the variable is stored&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E39FH8-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap21qvnlviu73c73klh1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E39FH8-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap21qvnlviu73c73klh1.PNG" alt="Hoisting Code 5" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note :There are some special cases&lt;/strong&gt;, if the function is defined as an arrow function or as an anonymous function then in memory creation phase it is stored as regular variable and the value will be &lt;strong&gt;undefined&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5uY3xTzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvv06yedlbcw4s7n708l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5uY3xTzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvv06yedlbcw4s7n708l.PNG" alt="Hoisting Code 6" width="608" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can view the memory creation phase of the execution context in same way as we did for the earlier example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uz5z3T_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8ks8w9tg6vxwh8wj5jz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uz5z3T_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8ks8w9tg6vxwh8wj5jz.PNG" alt="Hoisting code 7" width="880" height="362"&gt;&lt;/a&gt;&lt;br&gt;
Reference:&lt;a class="mentioned-user" href="https://dev.to/akshaymarch7"&gt;@akshaymarch7&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Announcing the Advent of GraphQL Challenge</title>
      <author>Lucia Cerchie</author>
      <pubDate>Wed, 24 Nov 2021 17:52:17 +0000</pubDate>
      <link>https://dev.to/stepzen/announcing-the-advent-of-graphql-challenge-ld4</link>
      <guid>https://dev.to/stepzen/announcing-the-advent-of-graphql-challenge-ld4</guid>
      <description>&lt;p&gt;We've got exciting news! StepZen is running an 'Advent of GraphQL' challenge in December! If you have around 5 minutes a day, you can complete this challenge and boost your GraphQL knowledge to boot. Learn how to write your own queries and connect to a REST API. We've got some cool prizes this year...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm7fJlYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codimd.s3.shivering-isles.com/demo/uploads/upload_381be1f9e83b0d408060d16853d2e509.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm7fJlYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codimd.s3.shivering-isles.com/demo/uploads/upload_381be1f9e83b0d408060d16853d2e509.png" alt="banner" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-the-challenge"&gt;
  &lt;/a&gt;
  Where to find the challenge
&lt;/h2&gt;

&lt;p&gt;Each day we'll release a new challenge to &lt;a href="https://www.notion.so/Advent-of-GraphQL-c69086ae98764e2e9e1ccdd8938dc980"&gt;this Notion calendar&lt;/a&gt;. Follow along to take part. If you'd like to tweet about your progress, be sure to let us know by tagging @stepzen_dev! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-rules"&gt;
  &lt;/a&gt;
  What are the rules?
&lt;/h2&gt;

&lt;p&gt;Complete each of the 25 steps. If you aren't able to start on Dec 1st then you are welcome to come late to the party, there's plenty of time to catch up. It's in a tutorial format, but we appreciate creativity! If you need help, &lt;a href="https://discord.com/invite/9k2VdPn2FR"&gt;reach out to our Discord channel&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-do-submissions-end"&gt;
  &lt;/a&gt;
  When do submissions end?
&lt;/h2&gt;

&lt;p&gt;The challenge ends on December 25th, but we will accept submissions up to December 28th, and announce the winner on the morning of the 30th. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-enter"&gt;
  &lt;/a&gt;
  How do I enter?
&lt;/h2&gt;

&lt;p&gt;Send a link to your repository and deployed site to &lt;a href="mailto:feedback@stepzen.com"&gt;feedback@stepzen.com&lt;/a&gt; with the headline "Advent of GraphQL Submission"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-prizes"&gt;
  &lt;/a&gt;
  What are the prizes?
&lt;/h2&gt;

&lt;p&gt;Everyone who enters will receive StepZen stickers! Be sure to include your address in yoru submission email, or use &lt;a href="https://stepzen.com/stickers"&gt;https://stepzen.com/stickers&lt;/a&gt; And to one random submitter (we'll put your names in a hat, secret-santa style 🎅), we will send a &lt;a href="https://www.amazon.com/Art-Snowflake-Photographic-Album/dp/076034700X/"&gt;book of snowflake photographs&lt;/a&gt; to adorn your coffee table during the winter season. ❄️ &lt;/p&gt;

</description>
      <category>graphql</category>
      <category>nextjs</category>
      <category>netlify</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Full-Stack Development in a Nutshell</title>
      <author>Max Anselmo</author>
      <pubDate>Wed, 24 Nov 2021 17:44:49 +0000</pubDate>
      <link>https://dev.to/themanselmo/the-full-stack-development-process-1hgp</link>
      <guid>https://dev.to/themanselmo/the-full-stack-development-process-1hgp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#so-what-even-is-fullstack-development"&gt;
  &lt;/a&gt;
  So what even is "Full-Stack Development"?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yby66NwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43xe8xya9zs8qer4jldt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yby66NwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43xe8xya9zs8qer4jldt.jpeg" alt="Image description" width="880" height="879"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Full-Stack&lt;/em&gt; is a term used to define a style of development that includes working on an application front to back, with everything in between how an application looks and a user interacts with it (Front-End) and how that application manages the data needed to do what it does, and how the "magic" happens behind the scenes (Back-End)&lt;/p&gt;

&lt;p&gt;This role is usually broken up between a &lt;em&gt;Front-End&lt;/em&gt; Developer, who &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focuses on the look and feel of an application&lt;/li&gt;
&lt;li&gt;makes requests to the back-end for data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while the &lt;em&gt;Back-End&lt;/em&gt; Developer focuses on &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creating / managing the database&lt;/li&gt;
&lt;li&gt;crafting responses to be returned to the front-end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a Full-Stack Developer, we will need to complete certain tasks to ensure our application is covered front to back and has everything it needs to function properly.&lt;/p&gt;

&lt;p&gt;The flow of data in one of our applications will be handled in the following way&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A User will visit our applications front-end, and will do some form of action, for example, try to log in or create an account.&lt;/li&gt;
&lt;li&gt;When they hit submit to sign up, a POST http request containing data from our sign up form on the front-end will be sent from our front-end to a specific API endpoint in the back-end server that is running.&lt;/li&gt;
&lt;li&gt;The back-end will receive the http request at its endpoint, and execute the action to create a new user in the database with the passed in data.&lt;/li&gt;
&lt;li&gt;If everything goes well with that transaction, then the user interacting with the front-end will be redirected to the login page to log in with their newly created account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The flow of data will be similar for most of not all other actions a user will have with our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-list-of-some-skills-needed-to-complete-a-fullstack-application-might-include"&gt;
  &lt;/a&gt;
  A list of some skills needed to complete a full-stack application might include:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Front-End
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS, JavaScript

&lt;ul&gt;
&lt;li&gt;HTML will be the skeleton of our front end, CSS will put a dress on that skeleton to make it look pretty, and JavaScript will make that skeleton dance!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;how to make do http actions to interact with a back-end server

&lt;ul&gt;
&lt;li&gt;This is how we will interact with our back-end to get data to display&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Maybe a front-end framework like React.js/Next.js

&lt;ul&gt;
&lt;li&gt;This will help us build rich, immersive websites by allowing us to build more efficiently / quickly with our HTML / JavaScript skills&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Drawing things out / wireframing (actually useful for both planning out your front-end page structure / layout as well as your database table structure / relationships in your back-end)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Back-End
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Ruby on Rails, Java / Spring, Python, JavaScript, etc

&lt;ul&gt;
&lt;li&gt;This will be what we write all the logic for our database with&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Any kind of SQL (PostgreSQL, SQLite, etc)

&lt;ul&gt;
&lt;li&gt;This will be used to create/ manage our database&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Data Structures / Algorithms

&lt;ul&gt;
&lt;li&gt;Knowledge in these areas is necessary for being able to efficiently search and sort through our data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Model View Controller patterns

&lt;ul&gt;
&lt;li&gt;MVC comes in handy when orchestrating the logic in our back end that responds to http requests, and dictates what logic should be executed upon receiving a request.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Object Oriented Programming

&lt;ul&gt;
&lt;li&gt;OOP is useful to know when defining our database models, and allows for abstraction with topics like object classes and inheritance (this can also be used in the front end!)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSCpeCU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acph52d7x5dmye5ct3ya.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSCpeCU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acph52d7x5dmye5ct3ya.jpeg" alt="Image description" width="880" height="878"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is a general overview of Full-Stack Development!&lt;/p&gt;

</description>
      <category>fullstack</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Web Scraping Sprott U Fund with BS4 in 10 Lines of Code</title>
      <author>CincyBC</author>
      <pubDate>Wed, 24 Nov 2021 17:32:46 +0000</pubDate>
      <link>https://dev.to/cincybc/web-scraping-sprott-u-fund-with-bs4-in-10-lines-of-code-17fo</link>
      <guid>https://dev.to/cincybc/web-scraping-sprott-u-fund-with-bs4-in-10-lines-of-code-17fo</guid>
      <description>&lt;p&gt;I started my second career as a Nuclear Fuel Uranium trader around a decade ago. A few years in, I was frustrated with my company's refusal to upgrade systems beyond 7 spreadsheets with redundant information scattered throughout, so I started my journey learning about databases, data engineering, and learning how to automate things with Python. One of the datapoints I scrape currently as background, contextual data (until I get the time to put it into a component!) on my &lt;a href="//uraniumtech.app"&gt;uranium-focused dashboard&lt;/a&gt; is data scraped from the market newcomer, Sprott Uranium Fund's daily updated website. Here is tutorial on how I do it using Python Package &lt;code&gt;bs4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First we import our packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we request the website using the requests package. If the response comes back successful &lt;code&gt;200&lt;/code&gt;, we use &lt;code&gt;BeautifulSoup&lt;/code&gt; to parse it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url = 'https://sprott.com/investment-strategies/physical-commodity-funds/uranium/'
r = requests.get(url)
if r.status_code == 200:
    soup: BeautifulSoup = BeautifulSoup(r.content, "html.parser")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You now have the webpage locally in your computer's memory. But how do we extract their share price and the volume of Uranium the fund is currently holding?&lt;/p&gt;

&lt;p&gt;You can go to that URL and open up the Developer's view to look at elements, look at the source code for the whole page in your browser, or use BeautifulSoup's &lt;code&gt;prettify()&lt;/code&gt; function to see it in your Jupyter Notebook with &lt;code&gt;print(soup.prettify()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll find the share price and Uranium volume about an 1/5 of the way down the page. Here is a sample of what I'm looking at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="cell small-6 large-3 fundHeader_data"&amp;gt;
            &amp;lt;h3 class="fundHeader_title"&amp;gt;
             Premium/Discount
            &amp;lt;/h3&amp;gt;
            &amp;lt;div class="fundHeader_value"&amp;gt;
             -2.55%
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- &amp;lt;div class="fundHeader_detail"&amp;gt;52 wk: &amp;lt;strong&amp;gt;$31.45 - $45.98&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;
           &amp;lt;/div&amp;gt;
           &amp;lt;div class="cell small-6 large-3 fundHeader_data"&amp;gt;
            &amp;lt;h3 class="fundHeader_title mt05"&amp;gt;
             Total lbs of U
             &amp;lt;sub&amp;gt;
              3
             &amp;lt;/sub&amp;gt;
             O
             &amp;lt;sub&amp;gt;
              8
             &amp;lt;/sub&amp;gt;
            &amp;lt;/h3&amp;gt;
            &amp;lt;div class="fundHeader_value"&amp;gt;
             40,780,707
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values are stored in a &lt;code&gt;div class&lt;/code&gt; called "fundHeader_value." To get all of them and extract the ones with the share price and Uranium stocks, we use &lt;code&gt;BeautifulSoup&lt;/code&gt; &lt;code&gt;findall&lt;/code&gt; function storing it in a variable called &lt;code&gt;fund_values&lt;/code&gt; (a list).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fund_values = soup.find_all('div', class_='fundHeader_value')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The share price is the 4th value in that list, so you use Python list slice and call the contents function to get it in a way you can manipulate it in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shareprice = fund_values[4].contents
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you print the variable shareprice, you'll get a lot of stuff you don't want in there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['\r\n                                    $US11.81\r\n                                                ', &amp;lt;span class="fundHeader_icon fundHeader_icon--pos"&amp;gt;&amp;lt;i data-feather="trending-up"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;, '\n']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing, is that we want the contents of the first item in this list, so &lt;code&gt;shareprice[0]&lt;/code&gt;. We then want to get rid of the other stuff around it, namely white spaces and key returns. To make sure we're manipulating a string object, we can tell Python to recognize it as a string with &lt;code&gt;str(shareprice[0])&lt;/code&gt;. Python has a very powerful method for "stripping" away whitespace with &lt;code&gt;.strip()&lt;/code&gt;, so we call that after our string &lt;code&gt;str(shareprice[0]).strip()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That gives us $US11.81 as a string. If that's what you want, you can stop there, but if you want to put it into a chart or store it as a number in a database, you need to also get rid of the $US. Luckily, Python has another method for "replacing" the part of the string you don't want with nothing. You just have to put &lt;code&gt;.replace('$US','')&lt;/code&gt; on it and it returns 11.81.&lt;/p&gt;

&lt;p&gt;That was a long explanation for one line of text, but it shows how concisely Python can get things done!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shareprice_value = str(shareprice[0]).strip().replace('$US','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about the Uranium volume? Easy...Rinse and repeat. The only difference is that it has commas instead of $US and is the 6th item in the list of &lt;code&gt;fund_values&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;u3o8 = fund_values[6].contents
u3o8_stock = str(u3o8[0]).strip().replace(',','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there you have it, you have scraped the fund's website in 10 lines of code (12 if you count the extra 2 for the Uranium Volumes).&lt;/p&gt;

&lt;p&gt;Raise my dopamine levels with a Like. I'll try to write more technical stuff here.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup

url = 'https://sprott.com/investment-strategies/physical-commodity-funds/uranium/'
r = requests.get(url)
if r.status_code == 200:
    soup: BeautifulSoup = BeautifulSoup(r.content, "html.parser")

fund_values = soup.find_all('div', class_='fundHeader_value')
shareprice = fund_values[4].contents
shareprice_value = str(shareprice[0]).strip().replace('$US','')

u3o8 = fund_values[6].contents
u3o8_stock = str(u3o8[0]).strip().replace(',','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>beautifulsoup</category>
      <category>dataengineering</category>
    </item>
    <item>
      <title>From Docker to Docker compose way!</title>
      <author>Dany Paredes</author>
      <pubDate>Wed, 24 Nov 2021 17:30:34 +0000</pubDate>
      <link>https://dev.to/this-is-learning/from-docker-to-docker-compose-way-56h</link>
      <guid>https://dev.to/this-is-learning/from-docker-to-docker-compose-way-56h</guid>
      <description>&lt;p&gt;If you work with docker, typing for every action is not a good deal, and sometimes it can be a nightmare because a typo mistake breaks our process, rerunning all commands. &lt;/p&gt;

&lt;p&gt;Today we will learn about how Docker-compose comes to make our experience with docker easy and fun.&lt;/p&gt;

&lt;p&gt;The scope of the article is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why docker-compose?&lt;/li&gt;
&lt;li&gt;How to create a docker-compose.yml file.&lt;/li&gt;
&lt;li&gt;Automate building images and environment variables.&lt;/li&gt;
&lt;li&gt;Orchestrate and communicate docker-compose. (Adding ports, volumes, and networks)&lt;/li&gt;
&lt;li&gt;Troubleshooting with Container logs and shells.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is to move all our commands, and everyday tasks from the docker command line to docker-compose using a docker-compose.yml file and speed up our productivity. &lt;/p&gt;

&lt;p&gt;If you don't have an idea about docker, please read the preview post about &lt;a href="https://dev.to/this-is-learning/docker-from-zero-to-survive-40ho"&gt;docker from zero to survives&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-dockercompose"&gt;
  &lt;/a&gt;
  Why docker-compose?
&lt;/h2&gt;

&lt;p&gt;Most of our applications nowadays do not play alone. They need a database, storage service, security API, and more services around them, and each of them needs to become a container. &lt;/p&gt;

&lt;p&gt;Docker-compose simplifies our life, performs it run with a single command, helps to build images, and orchestrates our containers. &lt;/p&gt;

&lt;p&gt;In short, Docker-compose takes care of the application lifecycle and allows us to manage our containers' actions like start, stop, and simplify to get the status, publish and communicate between networks.&lt;/p&gt;

&lt;p&gt;The Docker-compose command comes with three essential flags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;docker-compose build&lt;/code&gt; Build containers defined into the docker-compose.yml.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker-compose up&lt;/code&gt;   Start the containers and networks.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker-compose down&lt;/code&gt;  Stop containers and networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All magic happens using the docker-compose.yml file behind, so let us talk about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dockercompose-file"&gt;
  &lt;/a&gt;
  The Docker-compose file
&lt;/h2&gt;

&lt;p&gt;Like dockerFile, we use the docker-compose.yml, and it has two primary vital areas the version it defines the schema supported and services that represent our containers definitions.&lt;/p&gt;

&lt;p&gt;The services are the place to define our containers; it supports additional properties like image, builds,   environment, volumes, port, networks, and more. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In YML files, the indentation matters and always use space.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have the docker way and docker-compose; first is typing, and second is declaring the configuration into the docker-compose.yml.&lt;/p&gt;

&lt;p&gt;Create a docker-compose.yml file with two properties the version and services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version: we tell docker which version of schema to use.&lt;/li&gt;
&lt;li&gt;the service declares the "web" container. In addition, add the image property and set it to nginx.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.0'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file, run the command &lt;code&gt;docker-compose up&lt;/code&gt;,&lt;br&gt;
to build, create, and start the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dany@dany:~/Documents/docker-learn&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
Building with the native build. Learn about the native build &lt;span class="k"&gt;in &lt;/span&gt;Compose here: https://docs.docker.com/go/compose-native-build/
Creating docker-learn_web_1 ... &lt;span class="k"&gt;done
&lt;/span&gt;Attaching to docker-learn_web_1
web_1  | Starting up HTTP-server, serving ./
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose is already finished and shows the output into the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose-commands"&gt;
  &lt;/a&gt;
  Docker compose commands
&lt;/h2&gt;

&lt;p&gt;We have more options for like start, stop and monitoring our containers. &lt;/p&gt;

&lt;p&gt;The docker-compose accepts the following parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt;: Start containers without attaching to the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;start -d&lt;/code&gt;: Start the specific container and detach from the terminal with the -d flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up  &lt;span class="nt"&gt;-d&lt;/span&gt; web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--no-deps container name&lt;/code&gt;: Start a specific container without dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up --no-deps web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ps&lt;/code&gt;: Show active containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose ps 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;stop&lt;/code&gt;: Stop containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ports"&gt;
  &lt;/a&gt;
  Ports
&lt;/h2&gt;

&lt;p&gt;With our images ready, next step declare ports to access to the containers in the docker way is typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 80:80 imagename
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the docker-compose, add an extra property to the ports, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#volumes"&gt;
  &lt;/a&gt;
  Volumes
&lt;/h2&gt;

&lt;p&gt;To save data from our container in our machines, we use the volumes, in the docker way is typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;PWD&lt;span class="si"&gt;)&lt;/span&gt;:/var/www imagename
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the docker-compose, add a new property volume with the host directory and container path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;-./logs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;var/www/logs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment variables
&lt;/h2&gt;

&lt;p&gt;To declare environment variable in the docker way is typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker un &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production imagename
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In docker-compose, we add an extra property environment with the list of all variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;enviroment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=production&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;APP_VERSION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or  load form a file like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;env_file&lt;/span&gt; 
  &lt;span class="s"&gt;- ./settings.env&lt;/span&gt;
  &lt;span class="s"&gt;- ./app.env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bridge-networks"&gt;
  &lt;/a&gt;
  Bridge networks
&lt;/h2&gt;

&lt;p&gt;We need a network to communicate apps, API, or databases using a  bridge network to allow communication between containers.&lt;/p&gt;

&lt;p&gt;The docker way is typing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network create &lt;span class="nt"&gt;--driver&lt;/span&gt; bridge network name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In docker-compose a new key &lt;code&gt;networks&lt;/code&gt; with the name and type of driver:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;danynetwork&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-enviroment-variables"&gt;
  &lt;/a&gt;
  Use enviroment variables
&lt;/h2&gt;

&lt;p&gt;In most scenarios, we want to have containers for production and development. We can tell to docker-compose which build to take for each environment using environment variables.&lt;/p&gt;

&lt;p&gt;First, define our environment variable into the machines in Linux or Mac using export:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WEB_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WEB_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On windows machine with powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;:WEB_ENV &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"dev"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step is to create two docker files with the names web.dev.dockerfile and web.prod.dockerfile &lt;/p&gt;

&lt;p&gt;The web.dev.dockerfile uses an HTTP server on development mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;FROM        node:alpine&lt;/span&gt;
&lt;span class="s"&gt;LABEL       author=" Dany  Paredes"&lt;/span&gt;
&lt;span class="s"&gt;WORKDIR     /var/www&lt;/span&gt;
&lt;span class="s"&gt;COPY        src/index.html  .&lt;/span&gt;
&lt;span class="s"&gt;RUN         npm  install  http-server  -g&lt;/span&gt;
&lt;span class="s"&gt;EXPOSE      &lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="s"&gt;ENTRYPOINT  ["http-server"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The web.prod.dockerfile use nginx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;FROM        nginx&lt;/span&gt;
&lt;span class="s"&gt;LABEL       author="Production"&lt;/span&gt;
&lt;span class="s"&gt;WORKDIR     /usr/share/nginx/HTML&lt;/span&gt;
&lt;span class="s"&gt;COPY        src/index.html  .&lt;/span&gt;
&lt;span class="s"&gt;EXPOSE      &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit the docker-compose.yml into the service, remove the image key, and add the build option to tell context, the file, and the dockerfile name.&lt;/p&gt;

&lt;p&gt;The docker filename uses interpolation with our environment variable like &lt;code&gt;web.${WEB_ENV}.dockerfile&lt;/code&gt; and gets the value of the environment variable, for example, dev.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.0'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web.${WEB_ENV}.dockerfile&lt;/span&gt;
&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;danynetwork&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose takes the environment variable WEB_ENV on the build process and replaces the value nginx.${WEB_ENV}.dockerfile with environmental value. &lt;/p&gt;

&lt;p&gt;Into the terminal run &lt;code&gt;docker-compose build&lt;/code&gt; , it will create our containers using the dev environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose build
Sending build context to Docker daemon  47.62kB
Successfully built f68d5cded665
Successfully tagged docker-learn_web:latest

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the environment variables on the publishing process to docker hub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publish-image-to-dockerhub"&gt;
  &lt;/a&gt;
  Publish image to dockerhub
&lt;/h2&gt;

&lt;p&gt;If you remember to publish our images into dockerhub,  we need to tell the dockerhub username and the image.&lt;/p&gt;

&lt;p&gt;In the docker way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push dockerhubusername/imagename
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the docker-compose, we declare another environment variable for the docker hub username like DOCKERHUBUSER.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKERHUBUSER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;danywalls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit the docker-compose.yml and add container property &lt;code&gt;image&lt;/code&gt; with the value of ${DOCKERHUBUSER} as part of the image name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.0'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${DOCKERHUBUSER}/web&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web.${WEB_ENV}.dockerfile&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;danynetwork&lt;/span&gt;
&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;danynetwork&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, run docker-compose push. It automatically publishes our image to dockerhub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dany@dany:~/Documents/docker-learn&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose push
Pushing web &lt;span class="o"&gt;(&lt;/span&gt;danywalls/web:latest&lt;span class="o"&gt;)&lt;/span&gt;...
The push refers to repository &lt;span class="o"&gt;[&lt;/span&gt;docker.io/danywalls/web]
latest: digest: sha256:c4ac44d2e318200eeafb03cdb7e64bc60d0da52092de5bacd69e2e9de10402c0 size: 1783
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#troblueshooting-containers"&gt;
  &lt;/a&gt;
  Troblueshooting containers
&lt;/h2&gt;

&lt;p&gt;The containers sometimes fail, or we need to see the logs.&lt;/p&gt;

&lt;p&gt;In the docker way, we need to write the container id like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker logs myid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In docker-compose,  use the context of execution it shows the logs of all services declared into the docker-compose.yml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose logs 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or pick a specific container using the name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose logs web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And read the last five lines from the log.&lt;br&gt;
docker-compose logs --tail=5 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#shell-into-a-container"&gt;
  &lt;/a&gt;
  Shell into a container
&lt;/h2&gt;

&lt;p&gt;Sometimes we need to get access to the container and list or navigate inside of him.&lt;/p&gt;

&lt;p&gt;In docker way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec &lt;/span&gt;it container &lt;span class="nb"&gt;id &lt;/span&gt;sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose way is closely similar using the container name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;web sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Well, in short, we learned how to use docker-compose to help us to orchestrate your containers and declare ports, volumes, variables, and networks into docker-compose files.&lt;/p&gt;

&lt;p&gt;Also, read logs and use docker-compose commands used to start, stop, remove or list containers.&lt;/p&gt;

&lt;p&gt;The docker-compose way makes easy our tasks with docker and simplify because we have a context about execution and containers.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@frankiefoto?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;frank mckenna&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My life in a loop</title>
      <author>NewLinuxHelper</author>
      <pubDate>Wed, 24 Nov 2021 17:20:46 +0000</pubDate>
      <link>https://dev.to/developerbishwas/my-life-in-a-loop-do</link>
      <guid>https://dev.to/developerbishwas/my-life-in-a-loop-do</guid>
      <description>&lt;p&gt;My life in a loop:&lt;br&gt;
~ Wake up&lt;br&gt;
~ Be fresh (optional)&lt;br&gt;
~ Sit in the chair&lt;br&gt;
~ Wait for 12 hours&lt;br&gt;
~ Sleep&lt;br&gt;
↵&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>More Willpower to Developers</title>
      <author>Siddeshwar Navaneetharan</author>
      <pubDate>Wed, 24 Nov 2021 17:18:35 +0000</pubDate>
      <link>https://dev.to/infinityintellect/more-willpower-to-developers-5f6o</link>
      <guid>https://dev.to/infinityintellect/more-willpower-to-developers-5f6o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;: You're a developer, scouring the open source ocean of github, making contributions, raising issues, reading comments in the issue, contributing back, raising PRs and sometimes, the end result is just too far away for the journey to be satisfying enough to keep going. Wouldn't a pick-me-up go a long way ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter&lt;/strong&gt; &lt;code&gt;uplifiting-quote-action&lt;/code&gt;. Any comment you make on a PR or issue and you are met with an uplifting quote. The right words at the right time can do wonders to help recharge your willpower and help you get back on track with renewed vigor and energy.&lt;/p&gt;

&lt;p&gt;Behind this action is but one purpose, to kindle the developer's mind to action whenever he/she experiences a sense of declining enthusiasm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards 😝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Infinity-Intellect"&gt;
        Infinity-Intellect
      &lt;/a&gt; / &lt;a href="https://github.com/Infinity-Intellect/uplifiting-quote-action"&gt;
        uplifiting-quote-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Comments an uplifting quote every time you comment on a PR or an issue.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
uplifiting-quote-action&lt;/h1&gt;
&lt;p&gt;Comments an uplifting quote every time you comment on a PR or an issue.
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/49329642/143082662-e8fc29ef-54a2-4edf-a7b2-19f53632b4b0.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8CtGRtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/49329642/143082662-e8fc29ef-54a2-4edf-a7b2-19f53632b4b0.png" alt="GithubQuoteComment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Inputs&lt;/h2&gt;
&lt;h3&gt;
&lt;code&gt;github_token&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; A github token&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;comment_starter&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; A custom beginning statement for a comment&lt;/p&gt;
&lt;h2&gt;
Outputs&lt;/h2&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;h2&gt;
Example Usage&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;name: quote_comment
on: issue_comment
jobs:
  pr_commented:
    name: PR Comment
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: infinity-intellect/uplifiting-quote-action@v1.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_starter: 'Thanks for commenting on this PR.'
  issue_commented:
    name: Issue Comment
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: infinity-intellect/uplifiting-quote-action@v1.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_starter: 'We appreciate you taking your time to comment on this issue.'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Infinity-Intellect/uplifiting-quote-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action"&gt;Javscript Github Actions Documentation&lt;/a&gt; (Very beginner-friendly!)&lt;/p&gt;

&lt;p&gt;As a Github actions newbie, I only regret not getting into this sooner. I can't wait to create more actions that will aid in the developer workflow.&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>javascript</category>
      <category>github</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
