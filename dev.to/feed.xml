<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Guide to Churn Prediction: Part 3 — Descriptive statistical analysis</title>
      <author>Mage</author>
      <pubDate>Fri, 07 Jan 2022 23:46:00 +0000</pubDate>
      <link>https://dev.to/mage_ai/guide-to-churn-prediction-part-3-descriptive-statistical-analysis-3loa</link>
      <guid>https://dev.to/mage_ai/guide-to-churn-prediction-part-3-descriptive-statistical-analysis-3loa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h1&gt;

&lt;p&gt;Data exploration and analysis is a time-consuming process. We’ll continue to explore the Telco Customer Churn dataset to get a brief overview of data by using the descriptive statistical analysis method.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Exploratory Data Analysis&lt;/li&gt;
&lt;li&gt;Descriptive statistical analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;In part 2 of the series, &lt;a href="https://www.mage.ai/blog/churn-prediction-p1-gather-clean"&gt;Guide to Churn Prediction&lt;/a&gt;, we explored the Telco Customer Churn dataset to identify dependent and independent features, find missing values, and understand their mechanisms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h1&gt;

&lt;p&gt;Let’s understand the 2 common terms that we often hear when dealing with data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#population-data"&gt;
  &lt;/a&gt;
  Population data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLYNlR7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m30gm87t035cql48q4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLYNlR7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m30gm87t035cql48q4x.png" alt="Image description" width="480" height="270"&gt;&lt;/a&gt; &lt;em&gt;Source: Giphy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Data collected from the entire population is known as population data. The population is dynamic (it changes continuously), so it’s practically impossible to gather population data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sample-data"&gt;
  &lt;/a&gt;
  Sample data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36ChJ8Cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pjp5o3vn0hsq84br0t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36ChJ8Cu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pjp5o3vn0hsq84br0t7.png" alt="Image description" width="480" height="480"&gt;&lt;/a&gt; &lt;em&gt;Source: Giphy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Data collected from a subset or a specific group of population is known as sample data. &lt;br&gt;
Note: The Telco Customer Churn dataset, which we are using in this series, is sample data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-exploratory-data-analysis-eda-contd"&gt;
  &lt;/a&gt;
  Step 4: Exploratory Data Analysis (EDA) contd..
&lt;/h1&gt;

&lt;p&gt;To explore and analyze data, we’ll perform EDA in 3 different methods shown below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Descriptive statistical analysis: The process of using statistical techniques (like mean) to summarize the sample data. This analysis gives us a brief overview of the sample data.&lt;/li&gt;
&lt;li&gt;Descriptive graphical analysis: The process of analyzing the data with the aid of graphs. This analysis provides us with in-depth knowledge of the sample data.&lt;/li&gt;
&lt;li&gt;Inferential statistical analysis: The process of making inferences about the population data using statistical methods (like hypothesis testing, etc.). In a nutshell, this analysis helps us make assumptions about population data. Assumptions are made based on insights gained while performing descriptive and graphical analysis on features of the sample data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s go through the descriptive statistical analysis method in detail.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KrAcjjJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kebohjyozj6ycrqxzg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KrAcjjJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kebohjyozj6ycrqxzg7.png" alt="Image description" width="480" height="270"&gt;&lt;/a&gt; &lt;em&gt;Source: Giphy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Descriptive statistical analysis, also known as descriptive statistics or summary statistics, describes and summarizes the sample data. It gives us information about the measures of central tendency (mean, median, mode/frequency) and measures of dispersion (standard deviation, range) of the sample data.&lt;/p&gt;

&lt;p&gt;Let’s use descriptive statistical analysis to answer the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are the summary statistics of the numerical features?&lt;/li&gt;
&lt;li&gt;What are the summary statistics of categorical features?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s start with importing the necessary libraries and loading the cleaned dataset. Check out the link to &lt;a href="https://www.mage.ai/blog/churn-prediction-p1-gather-clean"&gt;part 1&lt;/a&gt; to see how we cleaned the dataset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9TG8ppH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jqkg6ai3fqm90ddtr8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9TG8ppH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jqkg6ai3fqm90ddtr8s.png" alt="Image description" width="880" height="155"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1I3A48fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aza12trtoimgwq6k2jwc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1I3A48fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aza12trtoimgwq6k2jwc.png" alt="Image description" width="880" height="502"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qs6H40X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvu020bilsh5maqaosui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qs6H40X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvu020bilsh5maqaosui.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;em&gt;Cleaned dataset&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create 2 datasets, df_num and df_cat, with df_num containing only numerical features and df_cat containing only categorical features. It’s much easier to do descriptive and graphical analysis when the features are separated.&lt;br&gt;
Let's start by checking the data types of features using the dtypes function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zyqN_tKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orxzd93wxgxayllrrghi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zyqN_tKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orxzd93wxgxayllrrghi.png" alt="Image description" width="880" height="63"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0pcYxev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87214e7jewifhg7ukwqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0pcYxev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87214e7jewifhg7ukwqu.png" alt="Image description" width="340" height="744"&gt;&lt;/a&gt;&lt;em&gt;Types of features&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Based on the data types, separate the features and create 2 new datasets as shown in the code below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DM8newgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkc3qramt3zsh61vmin9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DM8newgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkc3qramt3zsh61vmin9.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3xmNNLpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrzmmscpd7mgagw0z8g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3xmNNLpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrzmmscpd7mgagw0z8g2.png" alt="Image description" width="880" height="203"&gt;&lt;/a&gt;&lt;em&gt;Numerical Features&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3l0rpEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw9could5ao94elhn2kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3l0rpEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw9could5ao94elhn2kd.png" alt="Image description" width="880" height="260"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MuelAXyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5misisv6kwqrxe441b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MuelAXyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5misisv6kwqrxe441b2.png" alt="Image description" width="520" height="376"&gt;&lt;/a&gt;&lt;em&gt;Categorical features&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s use the describe() function to display the summary statistics of the features. This function displays the count, mean, median, standard deviation, 25%, 50%, 75%, min, and max values of each feature in the dataset.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;count displays the number of non-null records/rows. This value will be the same as the number of records/rows in the dataset if there are no null values.&lt;/li&gt;
&lt;li&gt;mean displays the average value of the data.&lt;/li&gt;
&lt;li&gt;std (standard deviation) value tells us approximately how far each data point/record is from the mean.&lt;/li&gt;
&lt;li&gt;min and max displays the minimum and maximum values, respectively.&lt;/li&gt;
&lt;li&gt;25%, 50% (median), 75%, and 100% displays the values at that percentile. For example, 25% displays the value at the 25th percentile.&lt;/li&gt;
&lt;li&gt;68% of data lies in (mean — std and mean+std) range.&lt;/li&gt;
&lt;li&gt;95% of data lies in (mean — 2*std and mean+2*std) range.&lt;/li&gt;
&lt;li&gt;99.7% of data lies in (mean — 3*std and mean+3*std) range.&lt;/li&gt;
&lt;li&gt;If the mean is equal to the median, then the distribution is normal.&lt;/li&gt;
&lt;li&gt;If the median is greater than the mean, then the distribution of the data is right-skewed.&lt;/li&gt;
&lt;li&gt;If the median is less than the mean, then the distribution of the data is left-skewed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FPsqAtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkzt688n5z4qwny8ip49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FPsqAtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkzt688n5z4qwny8ip49.png" alt="Image description" width="880" height="68"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5za-abC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayakmezn4y81zz3tnnjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5za-abC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayakmezn4y81zz3tnnjb.png" alt="Image description" width="880" height="265"&gt;&lt;/a&gt;&lt;em&gt;Summary statistics of numerical features&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example, let’s understand the summary statistics of the “Total Charges” column.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The count of non-null records is 7032, which is not the same as the number of records in the dataset. So, this indicates that there are null values in the “Total Charges” column.&lt;/li&gt;
&lt;li&gt;On average, a customer paid approximately $2,283 at the end of the quarter.&lt;/li&gt;
&lt;li&gt;The maximum amount paid by a customer at the end of a quarter is approximately $8,684.&lt;/li&gt;
&lt;li&gt;At the end of the quarter, 50% of the customers paid approximately $1,397 or less than that.&lt;/li&gt;
&lt;li&gt;The mean value (2,283.3) is greater than the median value (1,397.47), so the distribution of the data is right-skewed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s see what interesting insights we can gain from the table.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;More than 25% of the customers stopped using their services by the end of the quarter.&lt;/li&gt;
&lt;li&gt;On average, a customer has been with the company for 32 months and paid around $2,283 in total.&lt;/li&gt;
&lt;li&gt;Customers who have been using their services for more than 55 months are more likely to cancel their services by the end of the quarter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s use the describe(exclude=[‘int64’,’float64’]) function to display the summary statistics of the features. This function displays the count, unique, top, and most frequent values of categorical features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;count displays the number of non-null records/rows. This value will be the same as the number of records/rows in the dataset if there are no null values.&lt;/li&gt;
&lt;li&gt;unique displays the total number of unique values, i.e., number of categories in a feature.&lt;/li&gt;
&lt;li&gt;top displays the first record/row in the feature.&lt;/li&gt;
&lt;li&gt;freq displays the mode.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DL1Uj7Wi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8k3bklgpwopmb3mdpvo.png" alt="Image description" width="880" height="69"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UorF31Mu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkfk3z672yuakngtoftx.png" alt="Image description" width="880" height="177"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pm4kahJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czfw34o1dwe7f9ps7fyh.png" alt="Image description" width="880" height="326"&gt;&lt;em&gt;Summary statistics of categorical features&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, let’s understand the summary statistics of the “Churn Label” column.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are no null values.&lt;/li&gt;
&lt;li&gt;There are 2 categories in the “Churn Label” column.&lt;/li&gt;
&lt;li&gt;The first record has the label “No”.&lt;/li&gt;
&lt;li&gt;One category appears 5174 times, indicating that 5174 records belong to 1 category and the remaining records (7043–5174 = 1869) to the other.&lt;/li&gt;
&lt;li&gt;All customers are from the state of California.&lt;/li&gt;
&lt;li&gt;There are 2 types of phone services and 3 types of internet services.&lt;/li&gt;
&lt;li&gt;All customers have the option to have up to 3 multiple lines.&lt;/li&gt;
&lt;li&gt;There are 3 types of contracts and we may be able to identify a customer who is more likely to churn based on the contract type.&lt;/li&gt;
&lt;li&gt;The categories in the “Churn Label” column are not evenly distributed, so we say that the data in this column is imbalanced. 
Try analyzing the columns and see if you can get more interesting insights from the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Consider a scenario where your client has given you a large dataset and has asked you to immediately provide some information based on the given data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHLAUHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb8fe4a6me30ox9zzxi5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHLAUHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb8fe4a6me30ox9zzxi5.png" alt="Image description" width="480" height="270"&gt;&lt;/a&gt; &lt;em&gt;Source: Giphy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In such circumstances, descriptive statistical analysis can be performed quickly, and a brief overview of the data can be provided to the client.&lt;/p&gt;

&lt;p&gt;That’s it for this blog. In the next part, we’ll see how to explore and analyze the data using the descriptive graphical analysis method and see what interesting insights we can gain through the graphs. &lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Perl module tests on Linux 32bit on Github Action</title>
      <author>Yuki Kimoto</author>
      <pubDate>Fri, 07 Jan 2022 22:40:47 +0000</pubDate>
      <link>https://dev.to/yukikimoto/perl-module-tests-on-linux-32bit-on-github-action-of</link>
      <guid>https://dev.to/yukikimoto/perl-module-tests-on-linux-32bit-on-github-action-of</guid>
      <description>&lt;p&gt;I'm creating &lt;a href="https://github.com/yuki-kimoto/SPVM"&gt;SPVM&lt;/a&gt;. SPVM is a Perl module I'm creating now.&lt;/p&gt;

&lt;p&gt;I want to do tests of SPVM on Linux 32bit. I search for the way. I search &lt;a href="https://github.com/Perl/perl5/blob/blead/.github/workflows/testsuite.yml"&gt;github actions used in Perl itself&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-32bit-github-action"&gt;
  &lt;/a&gt;
  Linux 32bit Github Action
&lt;/h2&gt;

&lt;p&gt;I customized it. The created github action yml is &lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/.github/workflows/linux-32bit.yml"&gt;linux-32bit.yml&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: linux-32bit

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:latest
    steps:
      - name: install the Perl header, core modules, building tools
        run: |
          apt update
          apt install -y libperl-dev build-essential
      - uses: actions/checkout@v1
      - name: perl Makefile.PL
        run: perl Makefile.PL
      - name: make
        run: make
      - name: make disttest
        run: make disttest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#short-descriptions"&gt;
  &lt;/a&gt;
  Short Descriptions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-docker-container-image"&gt;
  &lt;/a&gt;
  the Docker Container Image
&lt;/h3&gt;

&lt;p&gt;Use the docker container image "i386/ubuntu:latest"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    container:
      image: i386/ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apt"&gt;
  &lt;/a&gt;
  apt
&lt;/h3&gt;

&lt;p&gt;Install the Perl header, core modules, building tools.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        run: |
          apt update
          apt install -y libperl-dev build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>perl</category>
      <category>linux</category>
      <category>docker</category>
      <category>github</category>
    </item>
    <item>
      <title>10 Useful Resources for Web Developers</title>
      <author>Yigit S</author>
      <pubDate>Fri, 07 Jan 2022 21:54:20 +0000</pubDate>
      <link>https://dev.to/yigitsr/10-useful-resources-for-web-developers-h4m</link>
      <guid>https://dev.to/yigitsr/10-useful-resources-for-web-developers-h4m</guid>
      <description>&lt;p&gt;Hi all. In this article I'm gonna share some useful resources related with web development. Hope you find them useful.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://9elements.github.io/fancy-border-radius/"&gt;Fancy Border Radius&lt;/a&gt;&lt;br&gt;
Open source web app to create fancy border radius.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw6bypcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufuz74zv5f1d3uerpl6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw6bypcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufuz74zv5f1d3uerpl6q.png" alt="Fancy" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://wweb.dev/resources/css-separator-generator/"&gt;CSS Separator Generator&lt;/a&gt;&lt;br&gt;
In this website, you can create section separator and copy the HTML and CSS code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4lXSDXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tswgq6wd3ng4rkmih5k4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4lXSDXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tswgq6wd3ng4rkmih5k4.png" alt="CSS Separator" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ianlunn.github.io/Hover/"&gt;Hover CSS&lt;/a&gt;&lt;br&gt;
A collection of CSS hover effects that can be applied to links, buttons and logos etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SNKazni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvpm0sc301xe8unteeu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SNKazni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvpm0sc301xe8unteeu3.png" alt="HoverCSS" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cssreference.io"&gt;CSS Reference&lt;/a&gt;&lt;br&gt;
A visual guide to CSS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8D9HARDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1slqsl8w2tmu54rwfe3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8D9HARDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1slqsl8w2tmu54rwfe3.png" alt="CSSRef" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nextapps-de.github.io/winbox/"&gt;WinBox JS&lt;/a&gt;&lt;br&gt;
Create modern windows using free and open source library.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeRfrDj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd9w3wotpjgp62xe5bii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeRfrDj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd9w3wotpjgp62xe5bii.png" alt="Winbox" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://responsively.app"&gt;Responsively&lt;/a&gt;&lt;br&gt;
This is an open source must-have program for web developers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSbImTbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m71hkjkg64ataeoyk4mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSbImTbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m71hkjkg64ataeoyk4mg.png" alt="Responsively" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://wickedbackgrounds.com/app"&gt;Wicked Backgrounds&lt;/a&gt;&lt;br&gt;
A web app to create wicked backgrounds.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ke7ylr9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7k938733zjm7vv161i1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ke7ylr9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7k938733zjm7vv161i1.png" alt="Wicked" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://favicon.io"&gt;Favicon&lt;/a&gt;&lt;br&gt;
You can quickly generate favicons from texts and images etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLYH7k29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1orh1wqmwrubxwfzos1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLYH7k29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1orh1wqmwrubxwfzos1p.png" alt="Favicon" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://html5up.net"&gt;HTML5 UP&lt;/a&gt;&lt;br&gt;
You can find responsive HTML5 and CSS3 templates.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmboJif_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fhye3auzlkfeckfjez6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmboJif_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fhye3auzlkfeckfjez6.png" alt="HTML5" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.emmet.io/cheat-sheet/"&gt;Emmet Cheat Sheet&lt;/a&gt;&lt;br&gt;
Emmet cheat sheet. You can also download it as PDF.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuestYsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mixkln0fqt302jnhab4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuestYsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mixkln0fqt302jnhab4s.png" alt="EMMET" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;Follow me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yigitsr"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/Yisemiramis"&gt;CodePen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ziggywoxx"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/lemmy_ace"&gt;Twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/ziggywoxx/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Designing a Prototype for a Social Network</title>
      <author>Valeria</author>
      <pubDate>Fri, 07 Jan 2022 21:28:51 +0000</pubDate>
      <link>https://dev.to/valeriavg/designing-a-prototype-for-a-social-network-3ln3</link>
      <guid>https://dev.to/valeriavg/designing-a-prototype-for-a-social-network-3ln3</guid>
      <description>&lt;p&gt;A crucial part of every project is planning. Luckily for us, it's also where the most fun is! &lt;/p&gt;

&lt;p&gt;Contrary to popular belief, design is not about drawing, but about making assumptions, validating them and deciding how your service will work.&lt;/p&gt;

&lt;p&gt;There are various ways of doing it and, chances are, you'll come up with your own. Therefore, just to give you something to start with, I'll share the way I do it.&lt;/p&gt;

&lt;p&gt;I call it &lt;em&gt;lazy developer&lt;/em&gt; design 🤪, but you can refer to it as &lt;em&gt;agile data driven user-first continuous design and development methodology&lt;/em&gt; 🤯 if you must.&lt;/p&gt;

&lt;p&gt;It boils down to the principle of &lt;strong&gt;doing as little design as possible&lt;/strong&gt;, then &lt;strong&gt;doing as little coding as possible&lt;/strong&gt;, rinse and repeat.&lt;/p&gt;

&lt;p&gt;So, what are we building today?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-stories"&gt;
  &lt;/a&gt;
  User Stories
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;As a &lt;em&gt;user&lt;/em&gt;, I want to &lt;em&gt;see relevant information&lt;/em&gt;, so that I can &lt;em&gt;stay up to date with the most recent trends&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This way of phrasing a requirement for a product is called a &lt;em&gt;user story&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, a user story should be split to more detailed stories until they don't raise any more questions.&lt;/p&gt;

&lt;p&gt;The one we have so far does. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What kind of information does the user expect, for starters?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Well, we don't really know yet, but for now, let's assume it'll be a text with an optional illustration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where do we get this information?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, we have no idea either, probably from other users, but for now, let's assume that the information comes from external sources, like a news feed, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why would a user want to use our service then?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, we'll provide content from multiple sources in one place and allow them to vote for the content they like to see more often.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we know what information is relevant for the user?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We'll group posts by keywords, for now let's just add hashtags and allow users to see posts with a particular tag, if they want to. &lt;/p&gt;

&lt;p&gt;We could dig deeper, but it sounds good enough for a &lt;em&gt;minimum viable product&lt;/em&gt; (MVP), so the user stories we will be working with are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a &lt;em&gt;user&lt;/em&gt;, I want to &lt;em&gt;see news feed, containing text and maybe an illustration&lt;/em&gt;, so that I can &lt;em&gt;stay up to date with recent news&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;As a &lt;em&gt;user&lt;/em&gt;, I want to &lt;em&gt;see posts, containing specific hashtags&lt;/em&gt;, so that I can &lt;em&gt;choose information, relevant to me&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;As a &lt;em&gt;user&lt;/em&gt;, I want to &lt;em&gt;be able to like posts&lt;/em&gt;, so that I can &lt;em&gt;vote for the content I would like to see more often&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Much better! We know &lt;em&gt;what&lt;/em&gt; to do, let's figure out &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I say we should think about our users first and figure out how will they use it before we even think about the actual &lt;em&gt;implementation&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-prototype"&gt;
  &lt;/a&gt;
  Design Prototype
&lt;/h2&gt;

&lt;p&gt;We could use a pen and a paper to make a sketch, but I have a better idea.&lt;/p&gt;

&lt;p&gt;There are different digital tools for prototyping specifically or drawing in general, yet my favourite one is called &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;. Go check it out and create a free account before we proceed. You can use the web version or install an app, they work the same way so choose whatever you prefer.&lt;/p&gt;

&lt;p&gt;When you're done, click on the "New design file" button or a "+" sign by the side of "Drafts":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRNrfhvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyx0gu1158xvf9hcqy0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRNrfhvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyx0gu1158xvf9hcqy0x.png" alt='Drafts "+" and New design file "+"' width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll see an empty workspace like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnBIbyBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kizy0dnskfhnnphaqpj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnBIbyBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kizy0dnskfhnnphaqpj7.png" alt="Empty Figma workplace" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll start by creating a &lt;em&gt;frame&lt;/em&gt; that resembles a mobile screen. &lt;/p&gt;

&lt;p&gt;Some say a share of mobile traffic is now about &lt;em&gt;56%&lt;/em&gt; of the whole internet traffic! More the reason to start with the &lt;em&gt;mobile first&lt;/em&gt;! Also, it's much easier to figure out essential &lt;em&gt;user interface&lt;/em&gt; (UI) elements when you don't have too much space 😜.&lt;/p&gt;

&lt;p&gt;So, let's add an iPhone screen, for starters. Press "F" or click the frame tool on the panel and select "iPhone 13 / 13 Pro":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9q51Lod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrvavn26bqnvc0gfedro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9q51Lod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrvavn26bqnvc0gfedro.png" alt='Frame tool highlighted on the left and "iPhone 13 / 13 Pro" on the right' width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New frame will appear. Double click on the name in the left menu and rename it to &lt;code&gt;Feed&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igfT7dB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0y9q6aqayrj9sc30gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igfT7dB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0y9q6aqayrj9sc30gk.png" alt="iPhone 13 / 13 Pro - 1 selected" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to our requirements, posts have some text and an image. So let's add an image!&lt;/p&gt;

&lt;p&gt;I bet you have some pictures laying around, but if you don't - you can grab some from &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; for free, just don't forget to attribute the author if you publish your creations somewhere 🤓&lt;/p&gt;

&lt;p&gt;Just drag and drop an image from your computer to the &lt;code&gt;Feed&lt;/code&gt; frame:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU0ZwcoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkvspv9a1fcxmgadkol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU0ZwcoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkvspv9a1fcxmgadkol.png" alt="Big image on the frame, cropped to the frame size" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oops, that's a little bit too big 😳. &lt;/p&gt;

&lt;p&gt;We could drag the corners to resize, or use a scale tool, but I prefer to edit element &lt;em&gt;properties&lt;/em&gt; instead. &lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; to &lt;code&gt;390&lt;/code&gt;(width of the frame) and hit "Enter":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---89KB4VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0ip7aup1em22lshhx3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---89KB4VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0ip7aup1em22lshhx3v.png" alt="x:0,y:0,width:390 (highlighted)" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better!🤩&lt;/p&gt;

&lt;p&gt;Now how about some text? Click "T", click somewhere on the frame and type something.&lt;/p&gt;

&lt;p&gt;Hm, that's not right! Let's limit the width of the text and set height to be flexible (instead of width) in the properties:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8grJWTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl58ucpzrz0c3qpwv96l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8grJWTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl58ucpzrz0c3qpwv96l.png" alt='Select "Auto height" and change width to 390' width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now only a small portion of the text doesn't fit on the screen. I wanted to give it some &lt;em&gt;padding&lt;/em&gt; on the sides, so clicked away from the border, but set the width to the full width of the frame, which &lt;em&gt;clipped&lt;/em&gt; the content.&lt;/p&gt;

&lt;p&gt;I want to have &lt;code&gt;16&lt;/code&gt; pixels on each size, so I'll set &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;16&lt;/code&gt; and width to &lt;code&gt;390-16*2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBW84Cur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q580gr0w5dhhmhp15l6s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBW84Cur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q580gr0w5dhhmhp15l6s.png" alt="Width: 390-16*2" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press "Enter" and you'll see that the width changed to &lt;code&gt;358&lt;/code&gt;. Nice, right?&lt;/p&gt;

&lt;p&gt;I rely a lot on math when I design UI. For example, whenever I choose the width for a gap or a padding (a &lt;em&gt;whitespace&lt;/em&gt;), I use numbers, divisible by &lt;code&gt;8&lt;/code&gt;: 8, 16, 24, 32, etc. The more I want the item to stand out - the bigger number I choose. I often start with &lt;code&gt;16&lt;/code&gt; and then adjust it to my needs.&lt;/p&gt;

&lt;p&gt;Same goes for the text size. Therefore, let's change it to &lt;code&gt;16&lt;/code&gt; too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EaVLsY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1wg945luclfs3c735kt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EaVLsY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1wg945luclfs3c735kt.png" alt="Changing text size from 12 to 16" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to show users that they can click on &lt;em&gt;#hashtags&lt;/em&gt; to view similar posts. And the common approach to it - is to &lt;em&gt;underscore&lt;/em&gt; a link. &lt;/p&gt;

&lt;p&gt;Double click to edit the text, select the hashtag and click "..." on the text properties panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z10vLCGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk1cis39j2rvcxim4zn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z10vLCGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk1cis39j2rvcxim4zn7.png" alt="Type details panel" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then click on the "U" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ebPU1uSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxxlk3j9yrhexv33ofz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ebPU1uSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxxlk3j9yrhexv33ofz4.png" alt="Underscored hashtag" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nicely done! It almost looks like a post, doesn't it?&lt;/p&gt;

&lt;p&gt;But we need more posts for our feed. We could just copy and paste it, of course, as much times as we need, but Figma has a better option for reusable elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;Select both image and text by holding "Shift" and clicking on them one by one, press right mouse button and select "Create component" (or use a corresponding shortcut):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epM8q7qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f3nbw82qw7igu76jh81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epM8q7qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f3nbw82qw7igu76jh81.png" alt="Create component" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double click on the name and rename it to &lt;code&gt;Post&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wsj7wU3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpqjpz4wjrw6tx5ay9eh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wsj7wU3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpqjpz4wjrw6tx5ay9eh.png" alt='Select "Component 1"' width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now copy and paste the component (&lt;code&gt;ctrl+c&lt;/code&gt;,&lt;code&gt;ctrl+v&lt;/code&gt; or &lt;code&gt;cmd+c&lt;/code&gt;,&lt;code&gt;cmd+v&lt;/code&gt; for Mac) and drag it down:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewhv9xyG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtrljhj74wc2f4eemb9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewhv9xyG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtrljhj74wc2f4eemb9k.png" alt="Two posts one after another" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's make sure that the gap between the posts is aligned with our &lt;em&gt;design system&lt;/em&gt; (that size is divisible by &lt;code&gt;8&lt;/code&gt;).🧐&lt;/p&gt;

&lt;p&gt;Select one post, move mouse over the other one and press "Alt":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62GCk6h0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey37fkjwyo560fli94to.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62GCk6h0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey37fkjwyo560fli94to.gif" alt="Gap is 31 pixel" width="389" height="761"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I was off by just one pixel 😎, so in order to fix it I only needed to press "Arrow down" one time to move the selected post down by one pixel and make it &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's not that interesting to see the same post over and over...&lt;/p&gt;

&lt;p&gt;Let's select the second image and replace it by another picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw0lsV_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s1cx1v7xtntvlvi0ifi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw0lsV_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s1cx1v7xtntvlvi0ifi.png" alt="Choose new image" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the text too. You should end up with something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lh81ZIIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9lomngxloacbfqixyrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lh81ZIIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9lomngxloacbfqixyrv.png" alt="Two different posts" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#style"&gt;
  &lt;/a&gt;
  Style
&lt;/h2&gt;

&lt;p&gt;Current design seems very plain to me. I want to add some flavor to it, make it recognisable! Add some style!&lt;/p&gt;

&lt;p&gt;As you've probably guessed by the pictures, I'm a big fan of &lt;em&gt;voxel&lt;/em&gt; and &lt;em&gt;pixel&lt;/em&gt; art, so how about we do a pixel-art inspired theme 😍?&lt;/p&gt;

&lt;p&gt;And for us it boils down to changing the font. &lt;/p&gt;

&lt;p&gt;My go-to resource is &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;: it offers free fonts for personal and commercial use and, so happens, it has a wonderful &lt;a href="https://fonts.google.com/specimen/VT323"&gt;VT323&lt;/a&gt; pixel font. Download it and install to your computer.&lt;/p&gt;

&lt;p&gt;You'll need to reload Figma to see the newly installed font in the list and be able to select it. &lt;/p&gt;

&lt;p&gt;When you're done, select the text of the main post component, type &lt;code&gt;VT&lt;/code&gt; and let autocomplete do the rest:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m92dsdXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayag1fk5xmhfaoetpdyz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m92dsdXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayag1fk5xmhfaoetpdyz.png" alt="Pixelated font" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the other post didn't change, because Figma allows us to customise text appearance between copies of the same &lt;em&gt;component&lt;/em&gt;, unless we tell it to reuse the &lt;em&gt;style&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Click on the "Style" button by the side of "Text" in the properties and click "+" to add a new text style:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BBjcBwv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev0l5nt4do4h6cklae9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BBjcBwv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev0l5nt4do4h6cklae9b.png" alt="Adding a text style" width="510" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Call it &lt;code&gt;Default&lt;/code&gt; (or whatever you prefer) and press "Create Style". Both posts now share the same style:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGvPqF8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26rebfl4xzqklco41j0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGvPqF8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26rebfl4xzqklco41j0x.png" alt="Feed with new font" width="390" height="844"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! Now we are only missing a nice like button ❤️&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h2&gt;

&lt;p&gt;One icon can explain what a button do better than a thousand words (and much faster too). Figma is a &lt;em&gt;vector&lt;/em&gt; editor and has some built-in shapes and first-class support for &lt;em&gt;scalable vector graphics&lt;/em&gt;. You could grab an SVG icon from &lt;a href="https://fontawesome.com/v5.15/icons"&gt;FontAwesome&lt;/a&gt; or &lt;a href="https://www.flaticon.com/"&gt;FlatIcon&lt;/a&gt;, but I suggest we make them ourselves 😎&lt;/p&gt;

&lt;p&gt;Recently I've been playing with &lt;em&gt;WebGL&lt;/em&gt; graphics and created a pixel art editor specifically for that 🥳 It's &lt;a href="https://github.com/ValeriaVG/pixel-vg"&gt;open source&lt;/a&gt; and I have a wrote a post about it here on dev.to, if you would like to know how it works. &lt;/p&gt;

&lt;p&gt;Anyway, just open the &lt;a href="https://pixel-vg-6ijid.ondigitalocean.app/"&gt;live version&lt;/a&gt;, turn "X" mirroring on and start drawing a black heart outline:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCDgvZpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eau3611fjotsbairv6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCDgvZpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eau3611fjotsbairv6f.png" alt="Half of a heart" width="880" height="1168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, when you ready, press "Save as SVG". &lt;/p&gt;

&lt;p&gt;Here's my version , which you can use instead, if you prefer:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Drag and drop the SVG icon to an empty space in Figma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf2ISOan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owscutuei2jxwmbwm97y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf2ISOan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owscutuei2jxwmbwm97y.png" alt="Empty heart by the side of Feed" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expand the icon contents in the left panel and select "Vector":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1w67ek5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50zj5usrsncnxo85r65q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1w67ek5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50zj5usrsncnxo85r65q.png" alt="Only Vector selected" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drag it above its frame to pull it out of the container and leave only the icon itself:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A40LgAnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tapik9va248e2qp1fvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A40LgAnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tapik9va248e2qp1fvj.png" alt="Vector in the root of the tree" width="486" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get rid of the empty frame by selecting it alone and pressing "Backspace". &lt;/p&gt;

&lt;p&gt;Rename "Vector" to &lt;code&gt;Heart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change the heart size to something more suitable for an icon by activating "Constrain proportions" and setting one of the sizes to e.g. &lt;code&gt;24&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtmROE1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83nnm3r740iftt2mbn9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtmROE1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83nnm3r740iftt2mbn9b.png" alt="Resizing image to 24" width="504" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a component from the heart, just like we did with the post before. &lt;/p&gt;

&lt;p&gt;Click on a "+" next to "Variants" with the icon component selected:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--690x2Eot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1acntw56iem81znipve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--690x2Eot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1acntw56iem81znipve.png" alt="Adding new variant" width="474" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name the variant &lt;code&gt;Filled&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pvlMe0UN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc0ax9blgl2udi96eg61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pvlMe0UN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc0ax9blgl2udi96eg61.png" alt="Filled variant" width="508" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the "Heart" (not the "Default" or "Filled" variant) on the left:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qjL7wjz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouebdlc5wzv2p9gw88ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qjL7wjz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouebdlc5wzv2p9gw88ri.png" alt='"Heart" selected' width="482" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double click on "Property 1" in parameters and change it to &lt;code&gt;State&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYMFUM3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhmrrxb77gbsvh9nz1ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYMFUM3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhmrrxb77gbsvh9nz1ma.png" alt="State: default, filled" width="536" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now expand the "Filled" variant, select the underlying "Heart" and click "Edit Object" icon on the top and use "Paint bucket" to fill the icon and then press "Done":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vg5P3NUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaf9rkty4ebvp6nqh3bb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vg5P3NUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaf9rkty4ebvp6nqh3bb.gif" alt="Paint the heart black" width="517" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can switch between these &lt;em&gt;variants&lt;/em&gt; whenever we want! &lt;/p&gt;

&lt;p&gt;Select the "Default" heart, copy it, then select the post &lt;em&gt;component&lt;/em&gt; &amp;amp; paste:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XliZWl2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/574c8skxf9efw2lhd8hs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XliZWl2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/574c8skxf9efw2lhd8hs.png" alt="Icon on the post" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same icon with appear on the other post as well. Select that other icon and change "State" to "Filled" on the "Heart" properties panel:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xi-SNz7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfj6z3s6xrwfm6gqlzoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xi-SNz7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfj6z3s6xrwfm6gqlzoe.png" alt="Filled icon" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The icon is barely visible on my images, let's change it's color to white by scrolling the properties panel and changing "Selection color":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEgW9RN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0tpp1rj24sq6rlij99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEgW9RN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0tpp1rj24sq6rlij99.png" alt="White icon" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could go ahead and change the other one as well, but I prefer to add another variant to the icons!&lt;/p&gt;

&lt;p&gt;Select the "Heart" component and click on the "..." and "Add property", call it &lt;code&gt;Color&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj6jbchd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajomyje8m5zuf9oh0jj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj6jbchd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajomyje8m5zuf9oh0jj2.png" alt="Add new property to the icon" width="554" height="724"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add two new variants: &lt;code&gt;Dark&lt;/code&gt; and &lt;code&gt;Light&lt;/code&gt;, by pressing "+" with icon you want to clone selected:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--134IhgXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezhw5mrv07fgt3jmizh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--134IhgXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezhw5mrv07fgt3jmizh3.png" alt="Four variants" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change "Selection color" for the light icons:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFK-Ag3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwfi1gyw0j67ccyql1ze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFK-Ag3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwfi1gyw0j67ccyql1ze.png" alt="Light and dark icons" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally, change the "Color" property on the post &lt;em&gt;component&lt;/em&gt; to "Light":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvdzRdy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9623j82s1prd72tlr93q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvdzRdy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9623j82s1prd72tlr93q.png" alt="Light icons on images" width="880" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's my final version:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9ARFSik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgguhdhxa0b22c30vtbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9ARFSik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgguhdhxa0b22c30vtbn.png" alt="Feed, final version" width="390" height="844"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it looks nice, doesn't it? 🤩&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-challenge"&gt;
  &lt;/a&gt;
  Bonus challenge
&lt;/h2&gt;

&lt;p&gt;Want to try something on your own?&lt;br&gt;
Here's a suggestion!&lt;/p&gt;

&lt;p&gt;Add two more items to the post &lt;em&gt;component&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date, when the post was published&lt;/li&gt;
&lt;li&gt;Author name and avatar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, add a short &lt;em&gt;variant&lt;/em&gt; to a post: without an image. &lt;/p&gt;

&lt;p&gt;Show both variants the feed.&lt;/p&gt;

&lt;p&gt;How would you visually separate them? 🧐&lt;/p&gt;

&lt;p&gt;Till the next time! And good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/valeriavg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy me a coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Constant work to onboarding new members into engineering team</title>
      <author>Avelino</author>
      <pubDate>Fri, 07 Jan 2022 20:43:19 +0000</pubDate>
      <link>https://dev.to/prestd/constant-work-to-onboarding-new-members-into-engineering-team-18k0</link>
      <guid>https://dev.to/prestd/constant-work-to-onboarding-new-members-into-engineering-team-18k0</guid>
      <description>&lt;p&gt;Developing the &lt;em&gt;"onboarding"&lt;/em&gt; process for a new person in an engineering team takes a lot of dedication, and keeping this process fluid takes even more work (with as little friction as possible).&lt;/p&gt;

&lt;p&gt;This issue is challenging for any team working full time, it is even worse for Open Source projects where contributors usually work in their spare time. We should make this process as fluid as possible so that people don't get discouraged by the complexity of getting up there and testing, until they make their first pull request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-development-environment"&gt;
  &lt;/a&gt;
  Configure development environment
&lt;/h2&gt;

&lt;p&gt;Every developer has a different way of setting up a development environment, even if it is in a popular technology (programming language) with lots of documentation, text editor extensions (emacs, vim, vscode, ...), etc.&lt;/p&gt;

&lt;p&gt;We developers are used to “&lt;em&gt;our way”&lt;/em&gt; of doing things, it is common for us to create resistance when someone presents a different way and I do it another way.&lt;/p&gt;

&lt;p&gt;In the vast majority of applications they depend on external resources such as databases, APIs, tokens, etc., if we force the developer (user) to read all the project documentation before having the first contact with the project it is very likely that we will lose his engagement, and some frustrations in him, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I just wanted to test&lt;/li&gt;
&lt;li&gt;I have to read all this to see it working&lt;/li&gt;
&lt;li&gt;What a complicated project&lt;/li&gt;
&lt;li&gt;I have to install X, Y and Z services/software on my machine&lt;/li&gt;
&lt;li&gt;I don't know the programming language used in the project, which plugins should I install in my editor?&lt;/li&gt;
&lt;li&gt;... and much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some tools to assist project maintainers (open source or private) to generate an onboarding process with as little friction as possible.&lt;/p&gt;

&lt;p&gt;Configuring editor (with all the necessary plugins and parameters), all the services the project needs to run, environment variables configured, database running with initial data load, data viewer configured (software to manage data from the database), etc.&lt;/p&gt;

&lt;p&gt;To the point where the developer “&lt;strong&gt;clicks a button”&lt;/strong&gt; and magically has the development environment ready to test the software.&lt;/p&gt;

&lt;p&gt;In the last few months we at &lt;em&gt;prestd&lt;/em&gt; have been working on improving our documentation (it is far from being good documentation) and removing as much friction as possible in the process of getting a new development environment up, some issues we have implemented until we got to what we have today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/prest/prest/issues/510"&gt;Improve local tests execution&lt;/a&gt; — it is frustrating that someone wants to contribute and cannot run the local tests (we use e2e tests, making requests to &lt;em&gt;prestd&lt;/em&gt;'s own API), a way was implemented where the tests run inside docker using &lt;code&gt;docker-compose&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/prest/prest/issues/542"&gt;Documentation: new content architecture&lt;/a&gt; — thinking of a person who has never had contact with &lt;em&gt;prestd&lt;/em&gt; and wants to test or use it in a production environment, both people should get into the documentation and be able to do what they want to do (bring up the environment);&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/prest/prest/issues/665"&gt;Onboarding of new contributor: using devcontainer&lt;/a&gt; — prepare the development environment with &lt;em&gt;"1 click"&lt;/em&gt; using &lt;a href="https://code.visualstudio.com/docs/remote/containers"&gt;devcontainers&lt;/a&gt; (&lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespaces&lt;/a&gt; support).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;em&gt;prestd&lt;/em&gt;'s development guide page &lt;a href="https://docs.prestd.com/prestd/setup/development-guide/#dev-container"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not nice to have the engineering team working in a bad environment, we need to think more about our team and make the team experience fluid.&lt;br&gt;
&lt;strong&gt;people &amp;gt; technology&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-the-developer-user"&gt;
  &lt;/a&gt;
  Focus on the developer (user)
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;prestd&lt;/em&gt; exists open source since 2016, I particularly like the project very much and believe it is a great solution to accelerate the development of a RESTful API for existing database and especially development of a new API (project starting from scratch).&lt;/p&gt;

&lt;p&gt;But for many years we turned to developing the software didn't look at documentation with the dedication we should, causing the contributor base to shrink (existing and new) — people going through open source project, hardly stayed for many years, so we always have to have the most rounded onboarding process possible.&lt;/p&gt;

&lt;p&gt;Given this problem I started to look at the documentation with more dedication and every decision in &lt;em&gt;prestd&lt;/em&gt; from now on will be thinking about the developer (user) experience, answering the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will this improve the developer experience using the project?&lt;/li&gt;
&lt;li&gt;Will this make the project easier to use?&lt;/li&gt;
&lt;li&gt;Will this make it easier to maintain the development of the project?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all 3 questions are “&lt;strong&gt;yes”&lt;/strong&gt;, we will proceed with the implementation, regardless of what it is: feature, improvement, fix, etc.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>management</category>
      <category>vscode</category>
      <category>docker</category>
    </item>
    <item>
      <title>Get email notifications from serverless Azure functions using SendGrid</title>
      <author>Marcel.L</author>
      <pubDate>Fri, 07 Jan 2022 20:40:38 +0000</pubDate>
      <link>https://dev.to/pwd9000/get-email-alerts-from-serverless-azure-functions-using-sendgrid-217m</link>
      <guid>https://dev.to/pwd9000/get-email-alerts-from-serverless-azure-functions-using-sendgrid-217m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;I recently posted a tutorial on how to better manage and maintain the lifecycle of Azure resources, automating resource decommissions by using a simple &lt;strong&gt;Decommission&lt;/strong&gt; tag with a date value, and an Azure serverless &lt;strong&gt;Function App&lt;/strong&gt;. The tutorial also includes how to track successful and failed decommissions using the &lt;strong&gt;function apps&lt;/strong&gt; own storage account by recording the decommission events into table storage.&lt;/p&gt;

&lt;p&gt;The full tutorial can be found here: &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pwd9000" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pwd9000/automate-azure-resource-decommissions-with-tracking-aok" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Automate Azure Resource Decommissions (with tracking)&lt;/h2&gt;
      &lt;h3&gt;Marcel.L ・ Dec 20 '21 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#azurefunctions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#automation&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This brings me to this new tutorial I want to share with you today. I was thinking how we can even better the process by also getting an email notification when a resource has been decommissioned or if a decommission has failed, and perhaps including the error message in the alert if it was a failed decommission. So today I will share with you a general guide on how we can utilize a SaaS service in Azure called &lt;strong&gt;SendGrid&lt;/strong&gt; to send us email notifications from an &lt;strong&gt;Azure Function App&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This tutorial is only a general guide on how to utilize the &lt;strong&gt;SendGrid&lt;/strong&gt; service inside of a &lt;strong&gt;Function App&lt;/strong&gt; to send notification emails and does not follow on my previous tutorial. This guide is meant to serve as a supplement to show how to set up the &lt;strong&gt;SendGrid&lt;/strong&gt; service and utilize the service in any &lt;strong&gt;Powershell&lt;/strong&gt; based &lt;strong&gt;Function App&lt;/strong&gt; in any environment, giving the ability to send email notifications to relevant stakeholders.&lt;/p&gt;

&lt;p&gt;Feel free to integrate the steps in this tutorial in addition to my previous blog post mentioned above, if you have the additional requirement to be notified by email about resource decommissions. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-sendgrid"&gt;
  &lt;/a&gt;
  What is SendGrid?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.sendgrid.com/for-developers/partners/microsoft-azure-2021#create-a-twilio-sendgrid-account"&gt;SendGrid&lt;/a&gt; is a third party provider in Azure that provides a cloud-based email service. The service manages various types of email including shipping notifications, friend requests, sign-up confirmations, and email newsletters. It also handles internet service provider (ISP) monitoring, domain keys, sender policy framework (SPF), and feedback loops. Additionally provides link tracking, open rate reporting. It also allows companies to track email opens, unsubscribes, bounces, and spam reports.&lt;/p&gt;

&lt;p&gt;Azure offers a variety of &lt;strong&gt;&lt;a href="https://sendgrid.com/marketing/sendgrid-services-cro/#pricing-app"&gt;SendGrid pricing plans&lt;/a&gt;&lt;/strong&gt;. For the purpose of our use case and this tutorial we will create and use the &lt;strong&gt;FREE&lt;/strong&gt; plan which gives us access to the API and also 100 emails/day forever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvwQGPQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sendgrid_free1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvwQGPQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sendgrid_free1.png" alt="image.png" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-set-up"&gt;
  &lt;/a&gt;
  Steps to set up
&lt;/h2&gt;

&lt;p&gt;We are going to need to perform the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create Azure resources:&lt;/strong&gt; (Optional) We will first create a Resource Group, PowerShell based Function App and KeyVault. This step is optional only for this demo/tutorial.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a SendGrid account:&lt;/strong&gt; We will create a FREE SendGrid account, activate the account and create a sender identity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Generate a SendGrid API Key:&lt;/strong&gt; We will generate an API Key, store this key in the key vault and consume it in our PowerShell function to authenticate to the SendGrid API.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a SendGrid API PowerShell Function:&lt;/strong&gt; We will create a PowerShell function to interact with the SendGrid API to send an email notification.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrate PowerShell Function into Function App:&lt;/strong&gt; We will integrate our PowerShell function into our Function App and test.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-create-azure-resources"&gt;
  &lt;/a&gt;
  1. Create Azure resources
&lt;/h2&gt;

&lt;p&gt;To set up the function app I wrote a PowerShell script using AZ CLI, that would build and configure the function app to use as a demo for this tutorial. There was one manual step however I will cover a bit later on. You can find the script I used on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Azure-SendGrid-Function-Alerts/code"&gt;github code&lt;/a&gt; page called &lt;a href="https://github.com/Pwd9000-ML/blog-devto/blob/main/posts/Azure-SendGrid-Function-Alerts/code/Azure-Pre-Reqs.ps1"&gt;Azure-Pre-Reqs.ps1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we will log into Azure by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After logging into Azure and selecting the subscription, we can run the script that will create the function app resources and set the environment up:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;## code/Azure-Pre-Reqs.ps1&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Log into Azure&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;#az login&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Setup Variables.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get-Random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;9999&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get-azcontext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SendGrid-Function-App-Demo"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sgridfuncsa&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sgridfunc&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sgridfunkv&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"uksouth"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create a resource resourceGroupName&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create a Key Vault&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--enable-rbac-authorization&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Authorize the operation to create a few secrets - Signed in User (Key Vault Secrets Officer)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;signed-in-user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;objectId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreach-object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Key Vault Secrets Officer"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--assignee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--scope&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/subscriptions/&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="s2"&gt;/resourceGroups/&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;/providers/Microsoft.KeyVault/vaults/&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create an azure storage account for function app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--sku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Standard_LRS"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"StorageV2"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--https-only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--min-tls-version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"TLS1_2"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Create a Function App&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;functionapp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--storage-account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$storageName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--consumption-plan-location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--os-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Windows"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--runtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"powershell"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--runtime-version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"7.0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--functions-version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--assign-identity&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Set Key Vault Secrets (secret values are set to 'xxxx', we will update these later after creating SendGrid account)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Start-Sleep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--vault-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sendGridApiKey"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"xxxx"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--vault-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fromAddress"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"xxxx"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Configure Function App environment variables:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# @Microsoft.KeyVault(SecretUri=https://&amp;lt;key-vault-name&amp;gt;.vault.azure.net/secrets/&amp;lt;secret-name&amp;gt;/&amp;lt;secret-version&amp;gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# or @Microsoft.KeyVault(SecretUri=https://&amp;lt;key-vault-name&amp;gt;.vault.azure.net/secrets/&amp;lt;secret-name&amp;gt;/) '/' at end means to take latest secret&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"sendGridApiKey=@Microsoft.KeyVault(SecretUri=https://&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;.vault.azure.net/secrets/sendGridApiKey/)"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;#from KV&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"fromAddress=@Microsoft.KeyVault(SecretUri=https://&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;.vault.azure.net/secrets/fromAddress/)"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;#from KV&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreach-object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;functionapp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appsettings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Assign Function System MI permissions to KV to access secrets&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$functionMI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$functionAppName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;principalId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreach-object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Key Vault Secrets User"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--assignee&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;--scope&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/subscriptions/&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="s2"&gt;/resourceGroups/&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;/providers/Microsoft.KeyVault/vaults/&lt;/span&gt;&lt;span class="nv"&gt;$kvName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lets take a closer look, step-by-step what the above script does as part of setting up the function app environment.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a resource group called &lt;code&gt;SendGrid-Function-App-Demo&lt;/code&gt;. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nn6GEQAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/rg.png" alt="image.png" width="753" height="333"&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;PowerShell&lt;/strong&gt; Function App with &lt;code&gt;SystemAssigned&lt;/code&gt; managed identity, &lt;code&gt;consumption&lt;/code&gt; app service plan, &lt;code&gt;insights&lt;/code&gt;, a &lt;code&gt;key vault&lt;/code&gt; and function app &lt;code&gt;storage account&lt;/code&gt;. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--437IlEZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/func.png" alt="image.png" width="765" height="314"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLzYzdxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/funcmi1.png" alt="image.png" width="880" height="571"&gt;
&lt;/li&gt;
&lt;li&gt;Configure Function App environment variables. (These settings/variables will be consumed inside of the function app later). &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2Er29x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/funcappsettings1.png" alt="image.png" width="880" height="633"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You will see that we are referencing the &lt;code&gt;fromAddress&lt;/code&gt; and &lt;code&gt;sendGridApiKey&lt;/code&gt; from the key vault we created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assign Function App &lt;code&gt;SystemAssigned&lt;/code&gt; managed identity permissions to access/read secrets on the key vault. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DA-EJjB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/kvrbac1.png" alt="image.png" width="880" height="442"&gt;
&lt;/li&gt;
&lt;li&gt;Create two dummy key vault secrets called &lt;code&gt;fromAddress&lt;/code&gt; and &lt;code&gt;sendGridApiKey&lt;/code&gt; which we will update later. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UxfzaSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/kvsec1.png" alt="image.png" width="817" height="368"&gt;
&lt;/li&gt;
&lt;li&gt;Remember I mentioned earlier there is one manual step. In the next step we will change the &lt;code&gt;requirements.psd1&lt;/code&gt; file on our function to allow the &lt;code&gt;AZ&lt;/code&gt; module inside of our function by uncommenting the following:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This file enables modules to be automatically managed by the Functions service.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# See https://aka.ms/functionsmanageddependency for additional information.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;#&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c"&gt;# For latest supported version, go to 'https://www.powershellgallery.com/packages/Az'.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c"&gt;# To use the Az module in your function app, please uncomment the line below.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s1"&gt;'Az'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'7.*'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYs3Atgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/manual1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYs3Atgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/manual1.png" alt="image.png" width="880" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Remember to save the manual change we made on &lt;code&gt;requirements.psd1&lt;/code&gt; above.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-a-sendgrid-account"&gt;
  &lt;/a&gt;
  2. Create a SendGrid account
&lt;/h2&gt;

&lt;p&gt;Next we will create a SendGrid Account. Go to the &lt;strong&gt;Azure Portal&lt;/strong&gt; and search services for &lt;strong&gt;SendGrid&lt;/strong&gt; and &lt;strong&gt;create&lt;/strong&gt; an account. We will use the &lt;strong&gt;Free&lt;/strong&gt; account as mentioned earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbWmOl4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_plan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbWmOl4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_plan.png" alt="image.png" width="880" height="655"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide contact details such as your email address and phone number as &lt;strong&gt;SendGrid&lt;/strong&gt; is a SaaS service subscription. Shortly after creating the &lt;strong&gt;SendGrid&lt;/strong&gt; Azure resource you will receive an activation email on the email address you have provided at creation time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPCfSx0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_activate.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPCfSx0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_activate.png" alt="image.png" width="672" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After activation you can navigate to the &lt;strong&gt;SendGrid&lt;/strong&gt; publisher's site directly from Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JXj8YP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_nav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JXj8YP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_nav.png" alt="image.png" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the dashboard we will proceed to create the &lt;strong&gt;Sender Identity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIr6KXQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_sender.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIr6KXQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_sender.png" alt="image.png" width="828" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For the &lt;strong&gt;From Email Address&lt;/strong&gt;, &lt;a href="https://docs.sendgrid.com/ui/sending-email/sender-verification"&gt;sender verification&lt;/a&gt; is required. If the email domain doesn't match one of your authenticated domains, you'll need to verify ownership of the email address before using it as a sender.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-generate-a-sendgrid-api-key"&gt;
  &lt;/a&gt;
  3. Generate a SendGrid API Key
&lt;/h2&gt;

&lt;p&gt;Next we will create an API key. Navigate to &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;API Keys&lt;/strong&gt; and click on &lt;code&gt;Create API key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_IOTYTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_api.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_IOTYTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_api.png" alt="image.png" width="171" height="729"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the API Key a Name, then select &lt;strong&gt;Full Access&lt;/strong&gt; and then click on &lt;code&gt;Create &amp;amp; View&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Twk0Vm12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_api2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Twk0Vm12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/sgrid_api2.png" alt="image.png" width="859" height="611"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API key will only be displayed once, so make sure that you copy the key and navigate back to the key vault that we created in the previous step and save the key under the key vault secret called &lt;code&gt;sendGridApiKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally also update the &lt;code&gt;fromAddress&lt;/code&gt; secret in the key vault with the sender identity &lt;strong&gt;From Email Address&lt;/strong&gt; that you have verified in the previous step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UxfzaSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/kvsec1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UxfzaSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/kvsec1.png" alt="image.png" width="817" height="368"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-create-a-sendgrid-api-powershell-function"&gt;
  &lt;/a&gt;
  4. Create a SendGrid API PowerShell Function
&lt;/h2&gt;

&lt;p&gt;The PowerShell function in this section can also be found on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Azure-SendGrid-Function-Alerts/code"&gt;github code&lt;/a&gt; page called &lt;a href="https://github.com/Pwd9000-ML/blog-devto/blob/main/posts/Azure-SendGrid-Function-Alerts/code/SendGrid-Notification.ps1"&gt;SendGrid-Notification.ps1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The PowerShell code below is a simple &lt;strong&gt;PowerShell&lt;/strong&gt; function to interact with and send an email via the SendGrid service API.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;## code/SendGrid-Notification.ps1&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="kr"&gt;Function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SendGrid-Notification&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;SupportsShouldProcess&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kr"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ToAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$FromAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$APIKey&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;# Body&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$SendGridBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"personalizations"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"to"&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ToAddress&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"subject"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Subject&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text/html"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Body&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="s2"&gt;"from"&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$FromAddress&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nv"&gt;$BodyJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$SendGridBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo-Json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Depth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;#Header for SendGrid API&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"authorization"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bearer &lt;/span&gt;&lt;span class="nv"&gt;$APIKey&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;#Send the email through SendGrid API&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$Parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://api.sendgrid.com/v3/mail/send"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Header&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$BodyJson&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#5-integrate-powershell-function-into-function-app"&gt;
  &lt;/a&gt;
  5. Integrate PowerShell Function into Function App
&lt;/h2&gt;

&lt;p&gt;The function app code in this section can also be found under my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Azure-SendGrid-Function-Alerts/code"&gt;github code&lt;/a&gt; page called &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Azure-SendGrid-Function-Alerts/code/run.ps1"&gt;run.ps1&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the function app we created previously and select &lt;code&gt;+ Create&lt;/code&gt; under &lt;code&gt;Functions&lt;/code&gt;. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7zyrO5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/create.png" alt="image.png" width="715" height="402"&gt;
&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Develop in portal&lt;/code&gt; and for the template select &lt;code&gt;Timer trigger&lt;/code&gt;, name the function &lt;code&gt;SendGrid-Demo&lt;/code&gt;, set the cron schedule to run on the frequency you need (in my case I have set this to once a day at 23:00pm) &lt;code&gt;0 0 23 * * *&lt;/code&gt;, and hit &lt;code&gt;Create&lt;/code&gt;. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3LF2uF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/create2.png" alt="image.png" width="722" height="814"&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;Code + Test&lt;/code&gt; and replace all the code under &lt;code&gt;run.ps1&lt;/code&gt; with the following powershell code and hit &lt;code&gt;save&lt;/code&gt;: &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHRGUaW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/create3.png" alt="image.png" width="880" height="497"&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;## code/run.ps1&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Input bindings are passed in via param block.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Get the current universal time in the default string format.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$currentUTCtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Get-Date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToUniversalTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# The 'IsPastDue' property is 'true' when the current function invocation is later than scheduled.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$Timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsPastDue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;Write-Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PowerShell timer is running late!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# SendGrid-Notification Function #&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;Function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SendGrid-Notification&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CmdletBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;SupportsShouldProcess&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kr"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ToAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$FromAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mandatory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ValueFromPipeline&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$APIKey&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;# Body&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$SendGridBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"personalizations"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"to"&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ToAddress&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"subject"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Subject&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text/html"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Body&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="s2"&gt;"from"&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$FromAddress&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nv"&gt;$BodyJson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$SendGridBody&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConvertTo-Json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Depth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;#Header for SendGrid API&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"authorization"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bearer &lt;/span&gt;&lt;span class="nv"&gt;$APIKey&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c"&gt;#Send the email through SendGrid API&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$Parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://api.sendgrid.com/v3/mail/send"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$Header&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;ContentType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$BodyJson&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;Invoke-RestMethod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Set these environment variables up in Function App settings:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# These variables are from the Function App and is referenced from Key Vault&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$apiKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;sendGridApiKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;#SendGrid API Key&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;fromAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;#SendGrid Sender Address&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Set additional Function variables&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"recipient@domain.com"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get-azcontext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get-azcontext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Id&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;Write-Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is a forced error, something has failed, Please investigate xxxx"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$failureMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$failureMessage&lt;/span&gt;&lt;span class="s2"&gt; - Subscription Details: [Name: &lt;/span&gt;&lt;span class="nv"&gt;$subscriptionName&lt;/span&gt;&lt;span class="s2"&gt;; Id: &lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nv"&gt;$Parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;ToAddress&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$to&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;FromAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$from&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Error notification from Azure Function App via SendGrid API"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nx"&gt;APIKey&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$apiKey&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;SendGrid-Notification&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lets take a closer look at what this code actually does. In the first few lines we can see that the function app will take an input parameter called &lt;code&gt;$Timer&lt;/code&gt;. This parameter is linked to the cron timer we set when we created the function app earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UGbGQ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UGbGQ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code1.png" alt="image.png" width="804" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we are loading the &lt;strong&gt;Powershell&lt;/strong&gt; function we created to allow us to send notifications via the &lt;strong&gt;SendGrid&lt;/strong&gt; service API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P45NTPOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P45NTPOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code2.png" alt="image.png" width="740" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we set up some variables, create a forced error and then send that error in an email alert to a recipient address via the &lt;strong&gt;SendGrid&lt;/strong&gt; service API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tE5p0UKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tE5p0UKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/code3.png" alt="image.png" width="818" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Note that the &lt;strong&gt;apiKey&lt;/strong&gt; and &lt;strong&gt;from&lt;/strong&gt; address on line73 and line74 are actually referenced from environment variables, which are the application settings of the &lt;strong&gt;Function App&lt;/strong&gt; which are referencing the key vault secrets we set up earlier. So we are not exposing any API secrets in our function app code nor the function app settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2Er29x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/funcappsettings1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2Er29x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/funcappsettings1.png" alt="image.png" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-the-function"&gt;
  &lt;/a&gt;
  Testing the Function
&lt;/h2&gt;

&lt;p&gt;Lets run and test our Function app and see if we get an email notification via the SendGrid service. Navigate to the function app and select the function we created. Select &lt;code&gt;Code + Test&lt;/code&gt; followed by &lt;code&gt;Test/Run&lt;/code&gt; and then click on &lt;code&gt;Run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EN5x7dM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EN5x7dM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/test.png" alt="image.png" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few seconds later you should see the email notification that was triggered by the function app and sent via the &lt;strong&gt;SendGrid&lt;/strong&gt; service API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2svnIhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/result.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2svnIhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Azure-SendGrid-Function-Alerts/assets/result.png" alt="image.png" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That concludes this tutorial and I hope that you can utilize this great service in other use cases and functions that you may be running inside of your environment.&lt;br&gt;&lt;br&gt;
I hope you have enjoyed this post and have learned something new. You can find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Azure-SendGrid-Function-Alerts/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Like, share, follow me on: 🐙 &lt;a href="https://github.com/Pwd9000-ML"&gt;GitHub&lt;/a&gt; | 🐧 &lt;a href="https://twitter.com/pwd9000"&gt;Twitter&lt;/a&gt; | 👾 &lt;a href="https://www.linkedin.com/in/marcel-l-61b0a96b/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions &amp;amp; DevOps Architect.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>azurefunctions</category>
      <category>azure</category>
      <category>serverless</category>
      <category>sendgrid</category>
    </item>
    <item>
      <title>Beautiful Functions: Psi</title>
      <author>Jethro Larson</author>
      <pubDate>Fri, 07 Jan 2022 20:27:57 +0000</pubDate>
      <link>https://dev.to/jethrolarson/beautiful-functions-psi-lcb</link>
      <guid>https://dev.to/jethrolarson/beautiful-functions-psi-lcb</guid>
      <description>&lt;p&gt;Continuing on with my &lt;a href="https://dev.to/jethrolarson/beautiful-functions-compose-4ce3"&gt;last post&lt;/a&gt;, I want to look at another function which I consider particularly elegant, the psi combinator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;psi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;psi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also called &lt;code&gt;on&lt;/code&gt; in Haskell.&lt;/p&gt;

&lt;p&gt;What it does is map a function over both arguments of a binary(two-argument) function. This is similar to the &lt;code&gt;B&lt;/code&gt; combinator but changed to work on binary functions.&lt;/p&gt;

&lt;p&gt;The quintessential usage is when sorting records:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given a compare function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localeCompare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localeCompare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// and some accessor function that drills into a data structure&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// compose that accessor with the compare function to drill both sides&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compareNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;psi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;localeCompare&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// which can be passed to a sort method for an array of that structure&lt;/span&gt;
&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compareNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interestingly, this is equivalent to doing a map and then sort, but using psi is theoretically more memory efficient:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generates an extra array&lt;/span&gt;
&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localeCompare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look out for other opportunities to use &lt;code&gt;psi&lt;/code&gt; and I'm sure you'll find them. Particularly if you're doing data aggregation or processing. &lt;/p&gt;

&lt;p&gt;Pedantic Disclaimer: Psi is usually defined with the binary function as the first argument but I preferred the similarity  to &lt;code&gt;B&lt;/code&gt; combinator when taking the mapping function as the first.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>functional</category>
    </item>
    <item>
      <title>World's Simplest Synchronous Serverless AWS IoT Dashboard</title>
      <author>Stephen Borsay</author>
      <pubDate>Fri, 07 Jan 2022 20:20:44 +0000</pubDate>
      <link>https://dev.to/sborsay/worlds-simplest-synchronous-serverless-iot-dashboard-3ige</link>
      <guid>https://dev.to/sborsay/worlds-simplest-synchronous-serverless-iot-dashboard-3ige</guid>
      <description>&lt;p&gt;When working with data from devices transmitted to AWS, serverless IoT workflows can save the customer a tremendous amount of money.&lt;br&gt;&lt;br&gt;
Instead of setting up an “always on” EC2 instance the client can  engage individual AWS services only as needed.  This multi-part IoT series will cover a variety of methods, with increasing levels of sophistication and functionality, to visualize IoT data on a static web host using various IoT centric services on AWS.  The overall cost of using these AWS serverless services, even assuming you are off the free tier, will be pennies for normal use.&lt;/p&gt;

&lt;p&gt;This hands-on workshop series will start off with an easy use case: synchronous polling of IoT data from a S3 bucket being held as a IoT data repository delivered from AWS IoT Core.  For reasons which will soon be obvious this isn't an optimal design.  However there is an undeniable, inverse correlation between complexity and functionality in this use case, so this is a good place to start.  If you are ok with “near real-time” IoT, and some lost IoT data payloads are acceptable, than this simplified technique, explained in this first tutorial in the series, will be of interest.  As a special bonus I will provide all the code necessary to complete this lab and visualize your own IoT data on your own AWS account.  It is sure to impress your friends and family (as long as we keep them in the dark about some initial shortcomings to be remedied later).  I have also created a series of videos hosted on YouTube to help you to complete the workshop and clear up any ambiguities from this written tutorial. &lt;/p&gt;

&lt;p&gt;YouTube: &lt;a href="https://youtu.be/MsyzeXMu23w"&gt;https://youtu.be/MsyzeXMu23w&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An assumption of this first AWS IoT serverless workshop is that you have a device programmed to send IoT data payloads to AWS IoT Core.  I’m  not going provide device code here or explain how to implement the code on a device.  You can reference my classes on AWS IoT on Udemy for coding various devices to communicate with AWS IoT Core utilizing a variety of IDE’s.  However, good news,  you don’t need to program any devices for this tutorial series as I will show you how to use the AWS MQTT test client as well as an automated Bash script to send fake IoT JSON payloads to the MQTT broker on AWS IoT Core.  This is a functional substitute for a real embedded device producing real IoT data.  For actual use cases you can always implement code on your device later if you want to add the device component for real IoT data publishing.&lt;/p&gt;

&lt;p&gt;This first article in this hands-on workshop series will use synchronous polling in JavaScript to extract data from an S3 bucket in near real time.  The next article in the series will switch to use AWS WebSockets with Lambda using API Gateway to transmit “real-time" data to our JavaScript visualization without the need to store data in S3 as a temporary repository.  From there we will move on to using WebSockets with Lambda, MQTT, and the AWS IoT JavaScript SDK in the browser for a more professional look and feel while also taking advantage of real-time IoT transmissions.  Finally we will conclude the series by using the newest real-time techniques for serverless IoT that utilize GraphQL for real-time data visualizations which should obviate the need, if not the performance, of AWS WebSockets.  To get the advantage of asynchronicity we are reliant on using a "&lt;em&gt;server push&lt;/em&gt;" model as opposed to the "&lt;em&gt;client pull&lt;/em&gt;" model we use in this tutorial.  The "server push" model has been traditionally problematic for a serverless environment.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 - Creating a public bucket in S3 for your IoT data&lt;/li&gt;
&lt;li&gt;Step 2 - Creating an Action and Rule in AWS IoT Core&lt;/li&gt;
&lt;li&gt;Step 3 – Testing your Serverless IoT design flow&lt;/li&gt;
&lt;li&gt;Step 4 – Converting your S3 bucket into a static webhost&lt;/li&gt;
&lt;li&gt;Step 5 – Uploading your HTML and JavaScript code to create a 
       Visualization for your IoT data.&lt;/li&gt;
&lt;li&gt;Step 6 – Populating the visualization using an automated IoT 
       data producer&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;All the code posted in this tutorial can also be found at:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sborsay/Serverless-IoT-on-AWS/tree/master/Level4_design/1_Synchronous_IoT"&gt;https://github.com/sborsay/Serverless-IoT-on-AWS/tree/master/Level4_design/1_Synchronous_IoT&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;✅ Step 1 - Creating a public bucket in S3 for your IoT data&lt;/h3&gt;

&lt;p&gt;Whenever we create a public bucket the first caveat is to confirm the bucket will only store data that we don’t mind sharing with the world.  For our example we are just using the S3 bucket to hold IoT JSON data showing temperature, humidity, and timestamps.  I think sharing basic environmental data from an unknown location is not too much of a privacy risk.  The advantage of using a public bucket for our static webhost, with an open bucket policy and permissive CORS rule, is that it makes the website easily accessible from anywhere in the world without having to use a paid service like AWS CloudFront and Route 53.&lt;/p&gt;

&lt;p&gt;Since re:Invent 2021 AWS has changed the process in which to make a S3 bucket public.  They have added one extra default permission which must be proactively changed to insure you are not declaring a public bucket by mistake.  AWS is especially concerned with people making buckets public unintentionally, the danger being that they will hold sensitive or personal data, and in the past unethical hackers have used search tools to find private data in S3 public buckets to exploit them.  Fortunately for our use case, we don’t care about outsiders viewing our environmental data. &lt;/p&gt;

&lt;p&gt;Many of you already know how to make a S3 public bucket for a static webhost on AWS.  For those that don’t know how to do this in 2022, I will document it below.  I have also created a short video you can watch here:&lt;/p&gt;



&lt;p&gt;YouTube link:  &lt;a href="https://youtu.be/NRroUUR9kdg"&gt;https://youtu.be/NRroUUR9kdg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wE3PW0dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvwcz5bkd4tmlb4555c8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wE3PW0dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvwcz5bkd4tmlb4555c8.JPG" alt="Image description" width="690" height="590"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Making a Public S3 Bucket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The process of creating a public S3 bucket for website hosting&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go to AWS S3 and then select “Create bucket”&lt;/p&gt;

&lt;p&gt;A) Give your bucket a globally unique name, here I call mine a catchy name: mybucket034975&lt;/p&gt;

&lt;p&gt;B) Keep your S3 bucket in the same region as the rest of your AWS services for this lab.&lt;/p&gt;

&lt;p&gt;C) Switch “Object Ownership” to “ACL’s enabled”, this is new for late 2021!  We now must first enable our Access Control Lists to make them public.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4WKQe3lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pzkdo3e2kqontebp0g.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WKQe3lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pzkdo3e2kqontebp0g.JPG" alt="Image description" width="880" height="844"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;D)  Unblock your S3 bucket and acknowledge your really want to do this.  Scary anti-exculpatory stuff! 😧&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XE9R-mxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61cd5dgv6fla493ena4m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XE9R-mxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61cd5dgv6fla493ena4m.JPG" alt="Image description" width="791" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;F)  Finally, select the “Create bucket” button at the bottom of the screen.  That's all you have to do for this page, but don’t worry, we are going to have more opportunity to make sure we really, really, and truly want to create a public bucket soon. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoy8AuyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/somrq9hgtorklb0fc8yn.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoy8AuyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/somrq9hgtorklb0fc8yn.JPG" alt="Image description" width="170" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;G) Now go back into your newly created bucket and click on the “Permissions” tab.&lt;/p&gt;

&lt;p&gt;F) Go to Bucket Policy and choose “Edit.”  We will paste and save a basic read-only policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicRea2411145d",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::&amp;lt;Paste-Your-Bucket-Name-Here&amp;gt;/*"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must paste the name of your bucket into the policy then follow it by ‘/*’  to allow access to all Get/Read partitions within the bucket.  Also it's a good idea to change the “Sid” to something unique within your account.&lt;/p&gt;

&lt;p&gt;G)  Now we get a chance to visit that ACL we enabled earlier in this process.  Click “Edit” then make the changes as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aULBzaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sl54nlf788l498ab0m9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aULBzaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sl54nlf788l498ab0m9.JPG" alt="Image description" width="880" height="674"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are giving “Everyone,” or at least those know or can discover our unique bucket URL, permission to read our bucket info.  Click on the 'List' and 'Read' buttons where shown and then acknowledge again that you are extra special certain that you want to do this 😏.  Then click “Save changes.”&lt;/p&gt;

&lt;p&gt;H)  Wow, we are at our last step in creating a public bucket.  Now we should set the CORS policy so we don’t get any pesky “mixed use” access-control non-allowed origin issues for cross domain access – I hate those 😠!  CORS rules used to be in XML only format and then AWS decided to keep everything consistent and switch the CORS format to JSON.  Even though this change caused some legacy conflict issues with existing XML CORS rules it was the right choice as JSON is clearly better than XML despite what the SOAP fans on social media will tell you 👍.  Below is a generic CORS JSON document you can use in your own S3 bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "AllowedHeaders": [
            "Authorization"
        ],
        "AllowedMethods": [
            "GET"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "ExposeHeaders": [],
        "MaxAgeSeconds": 6000
    }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it for making your cheap and easily accessible public bucket!  &lt;/p&gt;

&lt;p&gt;In my Udemy course I speak more about inexpensive ways to add security while avoiding paying for CloudFront or Route 53 for accessible public buckets and static websites in S3.  However I will tacitly reveal “one weird trick” that I find very effective for pretty good protection regarding free S3 public bucket security:  Simply google “restrict IP range in a S3 public bucket policy.”  &lt;/p&gt;

&lt;h3&gt;✅ Step 2 - Create an Action and Rule in AWS IoT Core&lt;/h3&gt;

&lt;p&gt;AWS IoT Core is a great service with a built-in server side MQTT broker that has the functionality to dispatch our incoming IoT data payloads to a variety of AWS services.  For this first lab we will simply be sending our data to our S3 bucket.  To do this we need to create an 'Action' and 'Rule' in IoT Core, then we design our rule to send our IoT data to the S3 public bucket that we just created.  &lt;/p&gt;

&lt;p&gt;The first step is to create a new rule in IoT Core:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-s1o1LL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilc1qjtt6wwbruz83z5b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-s1o1LL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilc1qjtt6wwbruz83z5b.JPG" alt="Image description" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now give your Rule a name of your choice.  Next, we need to edit the Rules Query Statement (RQS) to select what information we will extract or add to our JSON IoT Payload.  To make things easier we will use one of the built-in functions AWS provides for the RQS to enrich our IoT data payload:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDdwZZjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/781omm898mdk6uiaolim.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDdwZZjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/781omm898mdk6uiaolim.JPG" alt="Image description" width="812" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our use case we are adding a Unix/Epoch timestamp to our incoming IoT JSON payload.  I rename the timestamp as 'timestamps'.  The reason for this specific name is that I want the name to be a literal match for how I designate the variable in the JavaScript Code on our upcoming website.  The MQTT topic name itself is unimportant for this first tutorial, you can call your MQTT topic whatever name you like, here I call mine ‘outTopic’ (as it is coming ‘out’ from my device).  In the tutorials coming up it will be more important how we name and format our topic in the RQS.&lt;/p&gt;

&lt;p&gt;Next, we have to add an 'Action' for our 'Rule.'  We want to send our IoT message to the S3 bucket we just created so select that as your rule:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjY7rWEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouwgxxcmajh8vdp54i9r.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjY7rWEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouwgxxcmajh8vdp54i9r.JPG" alt="Image description" width="489" height="97"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now press the “Configure action” button at the bottom of the screen.&lt;/p&gt;

&lt;p&gt;Next we must select the bucket we just created and name the '&lt;em&gt;Key&lt;/em&gt;' in which we will save our IoT data.  We also have to create a Role which gives our Action a permission policy to send our IoT data between IoT Core and our S3 bucket.  We will let AWS automatically create this Role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06Vq778G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxy8yyf3bgdtzot4vnjv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06Vq778G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxy8yyf3bgdtzot4vnjv.JPG" alt="Image description" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The things to do here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.  Select the S3 public open bucket you just created in the S3 
  bucket field.&lt;/li&gt;
&lt;li&gt;2.  Give your key (blob object) a name.&lt;/li&gt;
&lt;li&gt;3.  Create a role to give your Action the correct 
  permissions.&lt;/li&gt;
&lt;li&gt;4.  Press the “Add action” button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, insure your action is “Enabled” in the next screen by using the breadcrumbs next to the Rule name you just created (usually at the bottom of the list as your last Rule).&lt;/p&gt;

&lt;h3&gt;✅ Step 3 - Test your Serverless IoT design flow&lt;/h3&gt;

&lt;p&gt;At this point let's test the serverless IoT design flow we developed to make sure everything is working before we move on to uploading our code to our static webhost on S3.  To test our design flow we should send some fake IoT data to S3 from the MQTT Test client in AWS IoT Core.  To do this go to the "MQTT test client" tab on the left and select the “Publish” tab.  This will allow us to send IoT JSON payloads to our public S3 bucket using the Action/Rule we just created.  Let's enter a sample IoT JSON payload of temperature and humidity as shown below.  Remember, we don’t need to use a "timestamps” key value in our IoT payload because our RQS adds a UNIX timestamp to our payload automatically.  We will publish our JSON IoT payload under to topic name of ‘outTopic’  or whatever you choose to name you topic that matches the RQS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABnke-zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h37wsxj47n3k5ihejoz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABnke-zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h37wsxj47n3k5ihejoz.JPG" alt="Image description" width="859" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Things to do here:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.  Select MQTT test client.&lt;/li&gt;
&lt;li&gt;2.  Select the Publish tab.&lt;/li&gt;
&lt;li&gt;3.  Type a test payload in proper JSON format like:
  { “temperature”: 44, “humidity”: 55}&lt;/li&gt;
&lt;li&gt;4.  Press the “Publish” button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now go to the public bucket you just created in S3.  Look under the key object that you designated in your Rule/Action in IoT Core.  It should be something like an anomalous object named “myKey” in our example.  Go ahead and download the blob object named "myKey" and open it in the editor of your choice:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mctUxGDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuybsv45bhyzxx24npck.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mctUxGDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuybsv45bhyzxx24npck.JPG" alt="Image description" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if everything was done correctly you should see the JSON payload you just sent from IoT Core.  If you sent multiple payloads you will only see the last payload sent as the object is overwritten in S3 with each successive payload.  You can't concatenate or edit blob objects in S3.  As an aside there is an easy way to create a data lake with multiple objects with the S3 Action we just created but I won't go over that here.  For our purposes we are only going to fetch the last JSON payload held within the S3 object store on a given interval (polling).&lt;/p&gt;

&lt;h3&gt;✅ Step 4 - Convert your S3 bucket into a static Webhost&lt;/h3&gt;

&lt;p&gt;As I said before AWS makes it so the same S3 bucket can be enabled to both hold IoT data and to host a static website with a static IP address for pennies a month.    &lt;/p&gt;

&lt;p&gt;We are now ready to convert our public bucket so that it can facilitate hosting a static website.  We could have easily have done this in Step 1 and still use the same bucket as a blob object store, as well as a website, but converting it to a static website now makes more procedural sense.  The conversion is quite simple.  &lt;/p&gt;

&lt;p&gt;Go to your S3 public bucket, select the "Properties" tab, then scroll down to the bottom where we can edit "Static website hosting" and select "Edit."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fSwZCKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/757pzcem241szf5fspt0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fSwZCKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/757pzcem241szf5fspt0.JPG" alt="Image description" width="880" height="71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now enable website hosting and name your index document “index.html”, this will be our landing page for our visualization website.  Click “Save changes” at the bottom of the page and you are good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqtPqNtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts8y44p0nys01et99olf.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqtPqNtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts8y44p0nys01et99olf.JPG" alt="Image description" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it!  Now your open public bucket is configured as a webhost with a unique URL address that is statically available worldwide.  You have just changed your uber cheap and accessible public bucket into a uber cheap and accessible public bucket that can also host a static website with a static IP address. 😲&lt;/p&gt;

&lt;h3&gt;✅ Step 5 - Upload your HTML and JavaScript code to create a visualization for your IoT Data.&lt;/h3&gt;

&lt;p&gt;We have two documents to upload to our public bucket and our newly created webhost.  The files are called 'index.html' and 'main.js'.&lt;/p&gt;

&lt;p&gt;The index.html is our launch page.  Copy the following code and save it locally as "index.html":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&amp;gt;
    &amp;lt;title&amp;gt;Dashboard&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;h1&amp;gt;Synchronous Weather Data on Interval&amp;lt;/h1&amp;gt;

        &amp;lt;div class="panel panel-info"&amp;gt;
            &amp;lt;div class="panel-heading"&amp;gt;
                &amp;lt;h3 class="panel-title"&amp;gt;&amp;lt;strong&amp;gt;Line Chart&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="panel-body"&amp;gt;
                &amp;lt;div id="container1"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="https://code.highcharts.com/highcharts.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="./main.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main.js is our JavaScript page. Copy the following code save it as "main.js":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let humArr = [], tempArr = [], upArr = [];
let myChart = Highcharts.chart('container1', {

    title: {
        text: 'Line chart'
    },

    subtitle: {
        text: 'subtitle'
    },

    yAxis: {
        title: {
            text: 'Value'
        }
    },

    xAxis: {
        categories: upArr
    },

    legend: {
        layout: 'vertical',
        align: 'right',
        verticalAlign: 'middle'
    },

    plotOptions: {
        series: {
            label: {
                connectorAllowed: false
            }
        }
    },
    series: [{
        name: 'Humdity',
        data: []
    }, {
        name: 'Temperature',
        data: []
    }],

    responsive: {
        rules: [{
            condition: {
                maxWidth: 500
            },
            chartOptions: {
                legend: {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom'
                }
            }
        }]
    }
});

let getWheatherData = function () {
    $.ajax({
        type: "GET",
        url: "&amp;lt;Insert-Your-IoT-Data-Bucket-With-Key-Here&amp;gt;",  //example: https://mydatabucket.s3.amazonaws.com/myKey"
        dataType: "json",
        async: false,
        success: function (data) {
            console.log('data', data);
            drawChart(data);
        },
        error: function (xhr, status, error) {
            console.error("JSON error: " + status);
        }
    });
}

let drawChart = function (data) {

    let { humidity, temperature, timestamps } = data;

    humArr.push(Number(humidity));
    tempArr.push(Number(temperature));
    upArr.push(Number(timestamps));

    myChart.series[0].setData(humArr , true)
    myChart.series[1].setData(tempArr , true)
}

let intervalTime = 3 * 1000; // 3 second interval polling, change as you like
setInterval(() =&amp;gt; {
    getWheatherData();
}, intervalTime);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only change you need to make to the code is on line 62 of the main.js file.  You need to insert the URL of your 'key' which is a "Object URL" listed in your S3 bucket.&lt;/p&gt;

&lt;p&gt;You can find your data object address (URL) by copying it from your bucket as demonstrated by the image below.  It is the ‘Object URL’ with the 'https://' prefix.  This object URL should look something like this:&lt;/p&gt;

&lt;p&gt;ht&lt;span&gt;tps://&lt;/span&gt;yourbucket.s3.amazonaws.com/myKey&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L20_qlbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eej20g1t4o9ok1ramdol.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L20_qlbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eej20g1t4o9ok1ramdol.JPG" alt="Image description" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After changing this line of code in 'main.js' to your own data location URL in S3, you are now ready to upload the files you just saved locally into your bucket.  To do this simply select the 'Objects' tab in your S3 bucket and drag both files to the base level of your bucket.  Both files, and your IoT data object ('myKey'), should be on the same level of the partition hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ9lnxsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol2s4ss4clik34ic5ds4.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ9lnxsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ol2s4ss4clik34ic5ds4.JPG" alt="Image description" width="880" height="652"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press the 'upload' button on the bottom right of your screen, and then after both files have been uploaded select the 'close' button.  You should now have three objects in you bucket; your IoT data object with your JSON readings (myKey), as well as your two web code files('index.html' and 'main.js').&lt;/p&gt;

&lt;p&gt;The Highcharts code works by fetching data from or S3 bucket by a configurable number of seconds.  Obviously it can over and under fetch data on the set interval but it will provide a nice visualization given a certain amount of delay and inaccuracy, assuming that is acceptable.  We will remedy most of these issues in the coming workshops when we use AWS WebSockets with AWS Lambda for asynchronous invocations.&lt;/p&gt;

&lt;p&gt;Now is a good time to initiate your static webhost by opening a new web browser tab with your static website URL.  The address of your website can be found by going to the “index.html” object in your bucket and opening the 'Object URL.'  Clicking this URL will bring up your website.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--weecsfa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sanl9vrbw31gsjhl8sx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--weecsfa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sanl9vrbw31gsjhl8sx.JPG" alt="Image description" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you see a couple of straight lines for temperature and humidity on your website.  The visualization is simply extending the last test IoT data point you manually published from the MQTT test client.  You will know the data point is stale as the timestamp is duplicated across the X-axis of the chart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HinpD7qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjvd7sfb49cvbtgi5ub.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HinpD7qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjvd7sfb49cvbtgi5ub.JPG" alt="Image description" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;✅ Step 6 - Populating the visualization using an automated IoT data producer&lt;/h3&gt;

&lt;p&gt;For this last step we have three ways to populate the visualization from IoT Core to our webhost.&lt;/p&gt;

&lt;p&gt;A) Use a device to publish IoT JSON payloads under our topic name.&lt;br&gt;
B) Manually publish JSON data payloads from the MQTT test client in IoT Core as demonstrated earlier in the tutorial.&lt;br&gt;
C) Use a test script to publish IoT data to our topic automatically at a set interval.&lt;/p&gt;

&lt;p&gt;For option A you can simply program your device to publish data to IoT core as I instruct in my course.  For option B you would have to spend some time manually altering then publishing JSON payloads in the MQTT test client to generate the line chart in the visualization.  &lt;/p&gt;

&lt;p&gt;For this tutorial I will explain 'option C.'  For this option you need the AWS CLI installed.  It’s easy to install with the directions listed here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&gt;https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This bash IoT data producer script was provided by AWS and can be originally found on &lt;a href="https://github.com/aws-samples"&gt;https://github.com/aws-samples&lt;/a&gt;.  I have already altered the test script to send just temperature and humidity data.  Simply insert your AWS region and MQTT topic name (outTopic) into the test script where indicated.  The bash script uses your AWS CLI to deliver the payload to IoT Core (using your SigV4 credentials from the AWS CLI).  You can also change the number of payloads published (&lt;em&gt;iterations&lt;/em&gt;) and wait time between each publish (&lt;em&gt;interval&lt;/em&gt;) to produce as much fake IoT data as you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

mqtttopic='&amp;lt;Insert-Your-IoT-Topic-Here&amp;gt;'
iterations=10
wait=5
region='&amp;lt;Insert-Your-AWS-Test-Region-Here&amp;gt;'
profile='default'

for (( i = 1; i &amp;lt;= $iterations; i++)) {

  #CURRENT_TS=`date +%s`
  #DEVICE="P0"$((1 + $RANDOM % 5))
  #FLOW=$(( 60 + $RANDOM % 40 ))
  #TEMP=$(( 15 + $RANDOM % 20 ))
  #HUMIDITY=$(( 50 + $RANDOM % 40 ))
  #VIBRATION=$(( 100 + $RANDOM % 40 ))
  temperature=$(( 15 + $RANDOM % 20 ))
  humidity=$(( 50 + $RANDOM % 40 ))

  # 3% chance of throwing an anomalous temperature reading
  if [ $(($RANDOM % 100)) -gt 97 ]
  then
    echo "Temperature out of range"
    TEMP=$(($TEMP*6))
  fi

  echo "Publishing message $i/$ITERATIONS to IoT topic $mqtttopic:"
  #echo "current_ts: $CURRENT_TS"
  #echo "deviceid: $DEVICE"
  #echo "flow: $FLOW"
  echo "temperature: $temperature"
  echo "humidity: $humidity"
  #echo "vibration: $VIBRATION"

 #use below for AWS CLI V1
 #aws iot-data publish --topic "$mqtttopic" --payload "{\"temperature\":$temperature,\"humidity\":$humidity}" --profile "$profile" --region "$region"

 #use below for AWS CLI V2
 aws iot-data publish --topic "$mqtttopic" --cli-binary-format raw-in-base64-out --payload "{\"temperature\":$temperature,\"humidity\":$humidity}" --profile "$profile" --region "$region"

  sleep $wait
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to change fields at the top of the page in the bash script to customize it for your MQTT topic name (outTopic) and AWS region ('us-east-1 or other) in which you developed your AWS services for this tutorial.  The other two fields, '&lt;em&gt;iterations&lt;/em&gt;' and '&lt;em&gt;wait time&lt;/em&gt;', are optional to edit. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mqtttopic=''&lt;/li&gt;
&lt;li&gt;iterations (number of payloads to send)&lt;/li&gt;
&lt;li&gt;wait time (number of seconds between transmissions)&lt;/li&gt;
&lt;li&gt;region=''&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now save the above code, giving it a name like "iot_tester.sh".  You can run the script by simply installing the bash script locally on your computer and then from the command prompt typing the name of the bash script.  Bash scripts should work on any operating system.  Activating the test script in MS Windows looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BdhKfq2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ub37kukne3y8n1hee1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdhKfq2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ub37kukne3y8n1hee1.JPG" alt="Image description" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now return to your websites index page and see you visualization getting populated by new data points on the delay of your setInterval() function in 'main.js.'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3KausIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qif8lizwryq1q5zgsube.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3KausIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qif8lizwryq1q5zgsube.JPG" alt="Image description" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few troubleshooting tips for most common issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Did you keep your S3 bucket and other AWS services all in the same region?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does your web browsers cache refresh automatically.  On my computer Chrome doesn't inherently refresh upon each new data point, thus I get stale data from S3 resulting in a flat chart.  My other five browsers refresh by default for new data.  Try the index page on other browsers if you are not getting data point updates for your visualization in your current browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;😀  🏁&lt;/p&gt;

&lt;p&gt;Congratulations!  You finished the first tutorial in the series and created the World's Simplest Synchronous Serverless IoT Dashboard.  I bet all your friends will be impressed.  Make sure to stay tuned for parts two, three, and four of this hands-on tutorial series as we get more advanced with Serverless IoT on AWS.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>iot</category>
      <category>tutorial</category>
      <category>serverless</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (January 7, 2022): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Fri, 07 Jan 2022 20:04:42 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-january-7-2022-latest-mongodb-tutorials-events-podcasts-streams-41nk</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-january-7-2022-latest-mongodb-tutorials-events-podcasts-streams-41nk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome back to the MongoDB $weeklyUpdate! Happy 2022! 🎉&lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(We're changing it up a bit and will be releasing these every Friday (instead of Monday). In this way, you'll always get the latest content and updates!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%8E%99-last-call-to-submit-your-sessions-for-mongodb-world-2022"&gt;
  &lt;/a&gt;
  🎙 Last Call to Submit Your Sessions for MongoDB World 2022!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0xtGXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/optimized/3X/a/d/ad8ea33e6f0560796e2066388d92bb949bd7ab49_2_1035x541.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uh0xtGXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/optimized/3X/a/d/ad8ea33e6f0560796e2066388d92bb949bd7ab49_2_1035x541.jpeg" alt="MongoDB World Call for Speakers banner" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB World is where the world’s fastest-growing data community comes to connect, explore, and learn. We’re looking for speakers who can inspire attendees by introducing them to new technologies, ideas, and solutions.&lt;/p&gt;

&lt;p&gt;Whether you want to do a 30 minute conference session, a 75 minutes deep dive tutorial, or a 10 minute lightning talk - we want to hear your talk ideas. If you have a great idea but don’t feel ready for the stage, we've got you covered! We offer speaker workshops, one-on-one coaching sessions, and more.&lt;br&gt;
&lt;strong&gt;Call for speakers closes January 18, 2022&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/world-2022-call-for-speakers"&gt;Submit Your Talk!&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#last-weekend-to-join-the-mongodb-atlas-hackathon-on-dev"&gt;
  &lt;/a&gt;
  💻 Last Weekend to Join the MongoDB Atlas Hackathon on DEV!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h72HBNnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/original/3X/4/b/4b46092f48a2616443d0e597bf76b9dd2587edf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h72HBNnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mongodb.com/community/forums/uploads/default/original/3X/4/b/4b46092f48a2616443d0e597bf76b9dd2587edf5.png" alt="MongoDB Atlas and DEV Hackathon banner" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From now through January 13th, 2022, MongoDB is offering you the chance to use your ingenuity and creativity to build an application using MongoDB's library of tools like Atlas Search. In addition to getting the chance to participate in a community event, show off your skills, and learn something new, everyone who submits a project for the MongoDB Atlas Hackathon will be automatically entered to win some seriously amazing prizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;More details on the Hackathon here!&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#window-functions-amp-time-series-collections"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/window-functions-and-time-series/"&gt;Window Functions &amp;amp; Time Series Collections&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/judy2k"&gt;Mark Smith&lt;/a&gt; &lt;br&gt;
In this article, I'll help you get set up with a data project I've created, and then I'll show you how to run some window functions across the data. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#build-an-offlinefirst-react-native-mobile-app-with-expo-and-realm"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/build-offline-first-react-native-mobile-app-with-expo-and-realm/"&gt;Build an Offline-First React Native Mobile App with Expo and Realm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/diego-freniche/"&gt;Diego Freniche&lt;/a&gt; &lt;br&gt;
In this post, we’ll build, step by step, a simple React Native Mobile App for iOS and Android using Expo and Realm.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#activeactive-application-architectures-with-mongodb"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/active-active-application-architectures/"&gt;Active-Active Application Architectures with MongoDB&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/jay-runkel/"&gt;Jay Runkel&lt;/a&gt; &lt;br&gt;
This post will begin by describing the database capabilities required by modern multi-data center applications. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#kafka-to-mongodb-atlas-end-to-end-tutorial"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/kafka-mongodb-atlas-tutorial/"&gt;Kafka to MongoDB Atlas End to End Tutorial&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/pavel-duchovny/"&gt;Pavel Duchovny&lt;/a&gt; &lt;br&gt;
In this article, we will provide a simple step-by-step guide on how to connect a remote Kafka cluster—in this case, a Confluent Cloud service—with a MongoDB Atlas cluster.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events-amp-community-events"&gt;
  &lt;/a&gt;
  📅 Official MongoDB &lt;a href="https://www.mongodb.com/events"&gt;Events&lt;/a&gt; &amp;amp; &lt;a href="https://live.mongodb.com/events/#/list"&gt;Community Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jan 13 (4:00pm GMT | Virtual) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-learning-with-luce-automate-the-automation-on-mongodb-atlas-atlas-api-postman/"&gt;Learning with Luce - Automate the Automation on MongoDB Atlas (Atlas API &amp;amp; Postman)&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How we built Mongo World, a Game Built with Unity and MongoDB Realm&lt;br&gt;
&lt;iframe src="https://player.twitch.tv/?video=1255999546&amp;amp;parent=dev.to&amp;amp;autoplay=false" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More Video Goodness&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twitch.tv/videos/1203473721"&gt;Chat with Rise In Time Devs&lt;/a&gt; - A Massive Multiplayer Strategy Browser Game built with MongoDB!&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe src="https://open.spotify.com/embed/episode/5Q8tbQcTcxxM1fWGU3GkBq" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 96 - &lt;a href="https://open.spotify.com/episode/5mRaLAaVoG4kgxRge9d968?si=aalAbiVgRzO9cIo7fOzVhw"&gt;Christmas Lights and Webcams with the MongoDB Data API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 95 - &lt;a href="https://open.spotify.com/episode/4liGrDKAKoa6A5yycob8Xt?si=ez5tyGRKSsGB4JrDTG5OGQ"&gt;Life at MongoDB: Exploring Cloud Support with Mark Kirpichnikov and Jon Fanti&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 94 - &lt;a href="https://open.spotify.com/episode/3JjNwmufWxFrRjyOYD9RdK?si=l9hcQ0TjThql9mBaHWF7mA"&gt;DevOps, IaC, Terraform and MongoDB with John Fahl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; first! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I want to use OCI Python SDK, where should i begin?</title>
      <author>Ernesto Lopez</author>
      <pubDate>Fri, 07 Jan 2022 20:00:33 +0000</pubDate>
      <link>https://dev.to/aernesto24/i-want-to-use-oci-python-sdk-where-should-i-begin-4co3</link>
      <guid>https://dev.to/aernesto24/i-want-to-use-oci-python-sdk-where-should-i-begin-4co3</guid>
      <description>&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt; Refers to a set of software tools used to create software that allow us to manage a specific platform. These tools can include: &lt;em&gt;libraries, processes, documentation, etc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;OCI python SDK&lt;/strong&gt; allows us to write code to manage resources in Oracle cloud&lt;/p&gt;

&lt;p&gt;You can download the SDK from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/oracle/oci-python-sdk/releases"&gt;GITHUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/oci/"&gt;PIP Install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;easiest way&lt;/strong&gt; is using the pip install, by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install oci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, remember to add this line to your python code, so you can be able to use the SDK&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;import oci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have follow until here, you may encounter an error, when trying to use any command on the SDK, and &lt;em&gt;why is that?&lt;/em&gt; - well, in order to connect to OCI resources, you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;OCI Account&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;A user created in that account, in a group with a policy that grants manage permissions or lower. Examples on policies can be found &lt;a href="https://www.youtube.com/watch?v=Cl-RmrACTI8"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Configure &lt;strong&gt;OCI CLI profile&lt;/strong&gt; on your local computer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have &lt;strong&gt;some good news&lt;/strong&gt;, you can create a free account in Oracle Cloud and get 300USD credits to test resources. Instructions &lt;a href="https://www.oracle.com/cloud/free/"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, configure the CLI is easy you just need to (&lt;strong&gt;This is for MAC&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; #Update brew and install cli
brew update &amp;amp;&amp;amp; brew install oci-cli

 #verify oci installation
oci --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look into the &lt;a href="https://docs.brew.sh/Installation"&gt;Homebrew documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before using the CLI&lt;/strong&gt;, you need to configure the config file that will contain the required credentials and information for working with Oracle Cloud Infrastructure. By default this file is stored in : &lt;code&gt;~/.oci/config&lt;/code&gt; but you can change it.&lt;/p&gt;

&lt;p&gt;So, in order to generate the config file you need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; #Move to your home directory and create the .oci folder
mkdir .oci

 #move to the folder and create the config file
cd .oci
touch config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can &lt;strong&gt;vi&lt;/strong&gt; this file and enter something similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ADMIN_USER]
user=ocid1.user.oc1..&amp;lt;unique_ID&amp;gt;
fingerprint=&amp;lt;your_fingerprint&amp;gt;
key_file=keys/admin_key.pem
tenancy = ocid1.tenancy.oc1..&amp;lt;unique_ID&amp;gt;
region = us-phoenix-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;[ADMIN_USER]&lt;/strong&gt; &amp;gt; you can name this anything youu want, but remember the name as you will use it with Python sdk.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;user&lt;/strong&gt; &amp;gt; here you need to enter the user ocid for the IAM user you created at the beginning. &lt;em&gt;OCID is the unique resource identifier that Oracle cloud infrastructure provide to each resource&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fingerprint&lt;/strong&gt; &amp;gt; refers to the fingerprint of the public key you configure to your user. All the relevant information related to his can be found &lt;a href="https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;key_file&lt;/strong&gt; &amp;gt; the .pem file you generated. You should use the complete path if your keys are located in a different directory &lt;code&gt;/Users/elopez/.ssh/admin_key.pem&lt;/code&gt;. Detail information for &lt;a href="https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#two"&gt;How to Generate an API Signing Key&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tenancy&lt;/strong&gt; &amp;gt; your tenancy OCID. Details on &lt;a href="https://docs.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five"&gt;how to obtain my tenancy OCID&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;region&lt;/strong&gt; &amp;gt; the region that you are subscribed to (region identifier), &lt;a href="https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm#top"&gt;Regions and Availability Domains&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#now-we-can-start-testing-some-stuff-with-python-sdk"&gt;
  &lt;/a&gt;
  NOW, WE can start testing some stuff with python SDK.
&lt;/h3&gt;

&lt;p&gt;First you need to establish the connection with OCI, and provide your software with the credentials that will be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; config = oci.config.from_file(
...     "~/.oci/config",
...     "ADMIN_USER")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Another approach&lt;/strong&gt; could be to store this information in a &lt;strong&gt;.env&lt;/strong&gt; file (that you should include into your &lt;em&gt;.gitignore&lt;/em&gt;)&lt;br&gt;
and reference the file into your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import oci
import os

config = oci.config.from_file(os.environ.get("CONFIG_PATH"), os.environ.get("OCI_PROFILE"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and your &lt;strong&gt;.env&lt;/strong&gt; file can look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONFIG_PATH = "~/.oci/config"
OCI_PROFILE = "ADMIN_USER"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the minimum required to connect with OCI, and will help you establish connection with other services as for example compute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # Initialize compute client with default config file
compute_client = oci.core.ComputeClient(config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for the monitoring service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # Initialize compute client with default config file
monitoring_client = oci.monitoring.MonitoringClient(config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, you can use this to get, for example, a list of compute instances inside a container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;compartment_id_selected = os.environ.get("COMPARTMENT_ID")

list_instances_response = compute_client.list_instances(compartment_id=compartment_id_selected, sort_order="DESC", lifecycle_state="RUNNING")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the basic steps to start working with OCI python SDK. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h1&gt;

&lt;p&gt;More about &lt;a href="https://dev.to/aernesto24/7-things-to-know-about-compartments-on-oracle-cloud-infrastructure-4l1p"&gt;OCI Containers&lt;/a&gt;&lt;br&gt;
My personal &lt;a href="https://github.com/aernesto24/oci-elopez-useful-scripts"&gt;GITHUB OCI REPO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt; has develop a complete API reference and also it helps you by providing code examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://oracle-cloud-infrastructure-python-sdk.readthedocs.io/en/latest/"&gt;ORACLE SDK Reference&lt;/a&gt;. Look for the API Reference on the left pane menu.
Examples can be seen like this one:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpbLIi8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3iy54iuiipy28iycemr.png" alt="Examples reference" width="880" height="685"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# URL &amp;gt; https://docs.oracle.com/en-us/iaas/tools/python-sdk-examples/2.53.1/core/update_instance_configuration.py.html

# This is an automatically generated code sample.
# To make this code sample work in your Oracle Cloud tenancy,
# please replace the values for any parameters whose current values do not fit
# your use case (such as resource IDs, strings containing ‘EXAMPLE’ or ‘unique_id’, and
# boolean, number, and enum parameters with values not fitting your use case).

import oci

# Create a default config using DEFAULT profile in default location
# Refer to
# https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/sdkconfig.htm#SDK_and_CLI_Configuration_File
# for more info
config = oci.config.from_file()


# Initialize service client with default config file
core_client = oci.core.ComputeManagementClient(config)


# Send the request to service, some parameters are not required, see API
# doc for more info
update_instance_configuration_response = core_client.update_instance_configuration(
    instance_configuration_id="ocid1.test.oc1..&amp;lt;unique_ID&amp;gt;EXAMPLE-instanceConfigurationId-Value",
    update_instance_configuration_details=oci.core.models.UpdateInstanceConfigurationDetails(
        defined_tags={
            'EXAMPLE_KEY_4bccp': {
                'EXAMPLE_KEY_l4nah': 'EXAMPLE--Value'}},
        display_name="EXAMPLE-displayName-Value",
        freeform_tags={
            'EXAMPLE_KEY_s14GL': 'EXAMPLE_VALUE_ZZgDFtoA0GvgolAJlyPw'}),
    opc_retry_token="EXAMPLE-opcRetryToken-Value",
    if_match="EXAMPLE-ifMatch-Value")

# Get the data from response
print(update_instance_configuration_response.data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>oracle</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>How To: Create A Random Number Generator w. JavaScript</title>
      <author>Amy Oulton</author>
      <pubDate>Fri, 07 Jan 2022 19:56:35 +0000</pubDate>
      <link>https://dev.to/amyoulton/how-to-create-a-random-number-generator-w-javascript-4ikf</link>
      <guid>https://dev.to/amyoulton/how-to-create-a-random-number-generator-w-javascript-4ikf</guid>
      <description>&lt;p&gt;Today we're going to build out a random number generator using JavaScript. Random number generators are a fantastic beginner JavaScript project. You get to work with some of the important basics while creating something that serves an actual use!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4tnpkVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6xjovd06v892266ts1a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4tnpkVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6xjovd06v892266ts1a.gif" alt="Alexis Random Gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-random-number-generators-used-for"&gt;
  &lt;/a&gt;
  What Are Random Number Generators Used For?
&lt;/h3&gt;

&lt;p&gt;I've been asked before about when we would actually use a random number generator. Sure, it's a fun quick, project, but what are some of the real life use cases?&lt;/p&gt;

&lt;p&gt;Typically, you would use it as a standalone app like we've created here. It would likely be used within a larger application. A function such as &lt;code&gt;randomNum()&lt;/code&gt; would return a random number, which could in turn do something like grab a specific item from an array (at the index of the random number returned). This allows you to create a basic lottery style system within an application.&lt;/p&gt;

&lt;p&gt;I feel it's important to mention here that there is a lot of conversation regarding &lt;em&gt;exactly&lt;/em&gt; how random these built out random generators are. When it comes to the way we're building it out here (using &lt;code&gt;Math.random()&lt;/code&gt;), the answer is well, &lt;em&gt;not so random&lt;/em&gt;. It's technically pseudo-random. I'm not going to delve deep into the mechanics behind that but if you're curious I would highly recommend &lt;a href="https://hackernoon.com/how-does-javascripts-math-random-generate-random-numbers-ef0de6a20131"&gt;this article&lt;/a&gt; by &lt;a href="https://hackernoon.com/u/dsimmons_23530"&gt;Daniel Simmons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all that being said, let's get started building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-build"&gt;
  &lt;/a&gt;
  The Build
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mLyPZ90NKzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I've created a follow along video that I originally recorded on &lt;a href="https://www.codecast.io/casts/dOyLamkoLx7m-javascript-random-number-generator"&gt;CodeCast&lt;/a&gt;. I would recommend watching it on CodeCast over YouTube because you can follow along with the code and copy it as I write it (as seen in the gif below)! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWDFq31M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1507azwph2ce1ej8563u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWDFq31M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1507azwph2ce1ej8563u.gif" alt="Using The Player Gif" width="880" height="462"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you prefer written tutorials then keep reading!&lt;/p&gt;

&lt;p&gt;I went ahead and started with some simple HTML:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div class="cont"&amp;gt;
   &amp;lt;h2 id="number"&amp;gt;0&amp;lt;/h2&amp;gt;
   &amp;lt;button class="btn" id="generate"&amp;gt;Random Number&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;I also added in some styles because they never made anything worse! 🦄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evYbIpOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6cvs2lmrezwexqa7wmm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evYbIpOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6cvs2lmrezwexqa7wmm.gif" alt="It's Called Style People Gif" width="360" height="480"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; body {
   background-color: #00242e;
 }

 .cont {
   display: flex;
   flex-direction: column;
   align-items: center;
   margin-top: 100px;
 }

 .btn {
   background-color: #32edd7;
   border: none;
   padding: 16px 32px;
   border-radius: 4px;
   font-size: 16px;
   cursor: pointer;
 }

 .btn:hover {
   background-color: #2ad1bd;
 }

 #number {
   font-size: 28px;
   color: pink;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Next we'll begin writing out our JavaScript!&lt;/p&gt;

&lt;p&gt;We start by writing two variables, &lt;code&gt;num&lt;/code&gt; and &lt;code&gt;btn&lt;/code&gt; and assign them to the correct node.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const num = document.getElementById('number');
 const btn = document.getElementById('generate');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;We'll then go ahead and create our function. We'll be using the built in &lt;code&gt;.random&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;method&lt;/a&gt; on the Math object. &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const randomNum = () =&amp;gt; {
   return Math.floor(Math.random() * 1000);
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Next, we wanna add an event listener on the button to listen for whenever it's clicked. We can do that as follows:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; btn.addEventListener('click', () =&amp;gt; {
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now within the body of this, we want to add the logic that replaces the current &lt;code&gt;num&lt;/code&gt; with a random number, as produced by the &lt;code&gt;randomNum&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; btn.addEventListener('click', () =&amp;gt; {
   num.innerHTML = randomNum(); 
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Make sure you assign it to &lt;code&gt;num.innerHTML&lt;/code&gt; and not &lt;code&gt;num&lt;/code&gt;. Otherwise, we'll be overwriting the &lt;code&gt;num&lt;/code&gt; variable and not updating the actual number visible on the page.&lt;/p&gt;

&lt;p&gt;And there we are, a functioning random number generator! You can check out the built out product in the codepen below!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/amyeoulton/embed/VwMBVBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;For more of my content, follow me on like &lt;a href="https://twitter.com/amyeoulton"&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href="https://www.codecast.io/users/amy"&gt;CodeCast&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;You can also read one of my latest articles on branding yourself as a developer below:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amyoulton" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URMcwv1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rz8uVdo6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618716/985cdde0-41c2-4924-9c59-23cd90ce5294.jpeg" alt="amyoulton"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amyoulton/how-to-brand-yourself-as-a-developer-397b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To: Brand Yourself As A Developer&lt;/h2&gt;
      &lt;h3&gt;Amy Oulton ・ Dec 15 '21 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hello guys -&gt;Spring boot-Java
</title>
      <author>Mohammed Samour</author>
      <pubDate>Fri, 07 Jan 2022 19:55:42 +0000</pubDate>
      <link>https://dev.to/mohammedsamour/hello-guys-spring-boot-java-2phg</link>
      <guid>https://dev.to/mohammedsamour/hello-guys-spring-boot-java-2phg</guid>
      <description>&lt;p&gt;I hope everyone is well and I wish you more prosperity and creativity.&lt;br&gt;
I have a question about a special topic. Spring boot&lt;br&gt;
I have an excellent background in Java programming and I want to learn the above framework. Can someone help me or guide me to get started correctly?&lt;/p&gt;

&lt;p&gt;The second question for those experienced in this field: What are the prospects for work and are there distance training opportunities in this field?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope everyone will participate and express their opinion.&lt;br&gt;
Your friend/Mohamed&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-springboot-java8"&gt;
  &lt;/a&gt;
  java  #springboot #java8
&lt;/h1&gt;

</description>
      <category>java</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
