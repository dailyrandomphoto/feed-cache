<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Append VS AppendChild in JavaScript</title>
      <author>Amran AL Ketara</author>
      <pubDate>Wed, 20 Oct 2021 05:06:31 +0000</pubDate>
      <link>https://dev.to/amk/append-vs-appendchild-in-javascript-138</link>
      <guid>https://dev.to/amk/append-vs-appendchild-in-javascript-138</guid>
      <description>&lt;p&gt;The append and appendChild Methods are too popular and used to add elements into the Document Object Model(DOM).&lt;/p&gt;

&lt;p&gt;But there is a main difference between them, if you don’t get the hang of it, it may cause some errors in your project, so let’s see what is the difference between them, when to use append or appendChild in your project.&lt;br&gt;
&lt;a href="https://amkblog.com/javascript/append-vs-appendchild-in-javascript/"&gt;https://amkblog.com/javascript/append-vs-appendchild-in-javascript/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Java Backend Roadmap</title>
      <author>Samarth Gupta</author>
      <pubDate>Wed, 20 Oct 2021 04:17:15 +0000</pubDate>
      <link>https://dev.to/livesamarthgupta/java-backend-roadmap-17ko</link>
      <guid>https://dev.to/livesamarthgupta/java-backend-roadmap-17ko</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-you-all"&gt;
  &lt;/a&gt;
  Hi You all,
&lt;/h3&gt;

&lt;p&gt;I created a perfect Java Roadmap for Backend Engineering with help of roadmap.sh roadmaps. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_i7c1ER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwgvv0jbie2gnkc1cxks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_i7c1ER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwgvv0jbie2gnkc1cxks.png" alt="Java Backend Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kindly Zoom :-)&lt;br&gt;
Also see my &lt;a href="https://dev.to/livesamarthgupta/spring-learning-plan-8p9"&gt;Spring Learning Path&lt;/a&gt; to learn Spring.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Real life performance optimizations in F#</title>
      <author>Jakob Christensen</author>
      <pubDate>Wed, 20 Oct 2021 03:33:59 +0000</pubDate>
      <link>https://dev.to/t4rzsan/real-life-performance-optimizations-in-f-3nep</link>
      <guid>https://dev.to/t4rzsan/real-life-performance-optimizations-in-f-3nep</guid>
      <description>&lt;p&gt;At work we are building our first major F# application.  I work at a pension company, and the application is a simulation model to estimate our future liabilities in regards to our policy holders under different scenarios.&lt;/p&gt;

&lt;p&gt;The model will run 100 years into the future on at least 100,000 policies for perhaps 6,000 scenaries.  So the application needs to be fast!&lt;/p&gt;

&lt;p&gt;Bartosz Sypytkowski wrote a great &lt;a href="https://bartoszsypytkowski.com/writing-high-performance-f-code/"&gt;blog&lt;/a&gt; on high performance F# code and we deployed some of his advice.  Some of it worked and some of it didn't.  Remember, when optimizing for performance, you need to test thoroughly whether your changes actually work for the better.  One thing that didn't really work for us was changing our types to structs.&lt;/p&gt;

&lt;p&gt;Below is a list of what worked for us.  It might now work for you 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-single-case-discriminated-unions"&gt;
  &lt;/a&gt;
  Avoid Single Case Discriminated Unions
&lt;/h2&gt;

&lt;p&gt;This is taken straight out of Bartosz Sypytkowski's blog.  It is quite common to wrap your simple types in Single Case Discriminated Unions in F#.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;PolicyId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PolicyId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This gives you nice code and better type safety but it kills performance.  Instead we settled for &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/units-of-measure"&gt;unit of measure&lt;/a&gt; and typedefs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Measure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt;
&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Measure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;kr&lt;/span&gt; &lt;span class="c1"&gt;// Danish monetary unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;percent&lt;/code&gt; unit is particularly nice as you never again have to ask how to specify it.  When you read it with a unit of measure, you intuitively know that you need to put it as &lt;code&gt;2.0&amp;lt;pct&amp;gt;&lt;/code&gt; and not &lt;code&gt;0.02&amp;lt;pct&amp;gt;&lt;/code&gt;.  You also know you need to divide by &lt;code&gt;100.0&amp;lt;pct&amp;gt;&lt;/code&gt; every time you use it, otherwise you will end up with a wrong unit.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;savings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;kr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;interestRate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pct&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;interestBad&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;savings&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;interestRate&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;kr*pct&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;interestGood&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;savings&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;interestRate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pct&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;kr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dont-use-monadic-binding"&gt;
  &lt;/a&gt;
  Don't use monadic binding
&lt;/h2&gt;

&lt;p&gt;Personally, I am a big fan of Kleisli composition and monadic binds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/t4rzsan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEsJXYpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NgYwRfWX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16789/5a422a4d-0d37-469a-bd73-97bc9fb2278f.jpg" alt="t4rzsan"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/t4rzsan/impeachment-in-a-functional-way-14mj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Impeachment in a functional way&lt;/h2&gt;
      &lt;h3&gt;Jakob Christensen ・ Jan 13 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#functional&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fsharp&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
So naturally we started out with a workflow that looked something like this.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt; &lt;span class="n"&gt;policy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;policy&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculatePremium&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;calculatePayments&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;calculateYield&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;calculateNewSavings&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;calculateFoo&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;calculateBar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each function had the same type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="n"&gt;calculateFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InputParameters&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Policy&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Policy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;TError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It was beautiful.  It was also slow.&lt;/p&gt;

&lt;p&gt;It turned out that almost all of the calculate functions returned &lt;code&gt;Ok&lt;/code&gt; and never &lt;code&gt;Error&lt;/code&gt;.  So we changed the whole thing to simple piping and added a validation function at the end that returns &lt;code&gt;Result&lt;/code&gt;.  This gave us much better performance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;workflow&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt; &lt;span class="n"&gt;policy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;policy&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculatePremium&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculatePayments&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculateYield&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculateNewSavings&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculateFoo&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calculateBar&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validatePolicy&lt;/span&gt; &lt;span class="n"&gt;inputParameters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we changed the type for each function to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="n"&gt;calculateFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InputParameters&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Policy&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Policy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To be fair, I later on found out that we had forgotten to add &lt;code&gt;inline&lt;/code&gt; to the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator and that may have had something to do with the bad performance.  Which brings me to:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-inline"&gt;
  &lt;/a&gt;
  Use inline
&lt;/h2&gt;

&lt;p&gt;Yes, don't forget to add &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/inline-functions"&gt;inline&lt;/a&gt; to your generic small helper functions and operators 🙄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#only-pass-needed-parameters"&gt;
  &lt;/a&gt;
  Only pass needed parameters
&lt;/h2&gt;

&lt;p&gt;As I said above, all our calculate functions had the same type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="n"&gt;calculateFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InputParameters&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Policy&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Policy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we soon found out that not all functions actually used all of &lt;code&gt;InputParameters&lt;/code&gt;.  &lt;code&gt;InputParameters&lt;/code&gt; was quite large and that meant a performance hit for each call.  Therefore, we split &lt;code&gt;InputParameters&lt;/code&gt; into smaller logically grouped types and changed each calculate function to only take whatever it needed as parameter.&lt;/p&gt;

&lt;p&gt;That gave us a small gain on the performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memoize-stuff-and-consider-using-dictionary-instead-of-map"&gt;
  &lt;/a&gt;
  Memoize stuff, and consider using Dictionary instead of Map
&lt;/h2&gt;

&lt;p&gt;We added memoization where ever it made sense and it gave us a lot performance wise.  Our first try on a memoize function looked like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;memoize&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt; &lt;span class="nn"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;TryFind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
           &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
           &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We found out that using the .NET type &lt;code&gt;Dictionary&amp;lt;,&amp;gt;&lt;/code&gt; gave us better performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;memoize&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Dictionary&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;_,&lt;/span&gt; &lt;span class="o"&gt;_&amp;gt;()&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TryGetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
      &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
      &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I both implementations originally came from [@dsymetweets] but I have been unable to find the links.&lt;/p&gt;

&lt;p&gt;The above memoization works for functions of one parameter only which led us to some "overloads" for functions with more than one parameter.  The following functions create memoized versions of functions with 2 or 3 parameters int that they create a tuple from the parameters and memoize based on that tuple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;memoize2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memoize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f'&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;memoize3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memoize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f'&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'd use them like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;addMemoized&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memoize3&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addMemoized&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addMemoized&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// Result is now cached&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create extra allocations but we have not found a better way to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#map-string-types-to-integers"&gt;
  &lt;/a&gt;
  Map string types to integers
&lt;/h2&gt;

&lt;p&gt;In our line of business we use a lot of strings to identify business entities, like for example policy numbers and fund IDs.  This leads to a lot of comparison of strings which can hurt performance.  So we changed all IDs to integers and created dictionaries on the side to look up IDs before and after the calculations where done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I said, these optimizations worked for us but they may not work for you.  As we start using the model for real, we might even discover that we have to revert some of the things.  Specifically, we may one day find out that structs will work better for us.&lt;/p&gt;

&lt;p&gt;I don't recommend most of the things we did if your application is a LoB model that does not need to be very high performant.  In that case you should value beautiful code over high performance.&lt;/p&gt;

&lt;p&gt;The steps above gave us close to 90 percent improvement but it still might not be enough.  In that case we still have one more trick up our sleeves: The monster that goes by the name Mutability! :-)&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>performance</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Customize Blazor TreeGrid Columns Using Templates</title>
      <author>Techguy</author>
      <pubDate>Wed, 20 Oct 2021 02:52:54 +0000</pubDate>
      <link>https://dev.to/syncfusion/customize-blazor-treegrid-columns-using-templates-37m9</link>
      <guid>https://dev.to/syncfusion/customize-blazor-treegrid-columns-using-templates-37m9</guid>
      <description>&lt;p&gt;Learn how to customize column headers and data in a Syncfusion &lt;a href="https://www.syncfusion.com/blazor-components/blazor-tree-grid"&gt;Blazor TreeGrid&lt;/a&gt; using templates.&lt;/p&gt;

&lt;p&gt;Download an example from GitHub: &lt;a href="https://bit.ly/3asIcZb"&gt;https://bit.ly/3asIcZb&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Refer to the following documentation to work with columns in the Blazor TreeGrid component: &lt;a href="https://bit.ly/30fh51H"&gt;https://bit.ly/30fh51H&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Check out this online example of the column template in the Blazor TreeGrid component: &lt;a href="https://bit.ly/3oXaTWj"&gt;https://bit.ly/3oXaTWj&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Check out this online example of the column header template in the Blazor TreeGrid component: &lt;a href="https://bit.ly/3mK7BTP"&gt;https://bit.ly/3mK7BTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.syncfusion.com/blazor-components/blazor-tree-grid"&gt;Blazor TreeGrid - High-performance Component&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load large amounts of data by dynamically loading child data on demand.&lt;/li&gt;
&lt;li&gt;Include flexible UI interactions like expanding and collapsing parent records, dialog editing, and more.&lt;/li&gt;
&lt;li&gt;Attractive UI appearance with built-in themes such as fabric, bootstrap, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PnM11O-BPVU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Parental Control App SPY24</title>
      <author>SPY24.app</author>
      <pubDate>Wed, 20 Oct 2021 02:09:11 +0000</pubDate>
      <link>https://dev.to/keleis_andre/parental-control-app-spy24-4ibm</link>
      <guid>https://dev.to/keleis_andre/parental-control-app-spy24-4ibm</guid>
      <description>&lt;p&gt;Got parental- or employee-surveillance-related epiphanies? Worry no more. SPY24 ™ is an all-in-one parental and employee monitoring app software that will keep you updated on their activities in real-time, all the time!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spy-spyapp"&gt;
  &lt;/a&gt;
  spy #spyapp
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Building a basic photo album in React</title>
      <author>Joe Dietrich</author>
      <pubDate>Wed, 20 Oct 2021 01:54:09 +0000</pubDate>
      <link>https://dev.to/joedietrichdev/building-a-basic-photo-album-in-react-17m4</link>
      <guid>https://dev.to/joedietrichdev/building-a-basic-photo-album-in-react-17m4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;I've loved taking pictures since I was little, but I don't really have a place to show off the best pictures I've taken. I decided to build myself a little photo gallery using React for the frontend, and a very simple JSON Server based backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-features"&gt;
  &lt;/a&gt;
  Basic Features
&lt;/h2&gt;

&lt;p&gt;For my photo gallery, I broke the required features down to the basics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display images in a gallery format&lt;/li&gt;
&lt;li&gt;Display an individual image&lt;/li&gt;
&lt;li&gt;Add an image to the gallery&lt;/li&gt;
&lt;li&gt;Edit the image's description&lt;/li&gt;
&lt;li&gt;Delete the image if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To those, I added a couple additional features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mark images a "favorites"&lt;/li&gt;
&lt;li&gt;Display favorite images in a second gallery&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-i-used"&gt;
  &lt;/a&gt;
  What I Used
&lt;/h2&gt;

&lt;p&gt;To get to my basic feature set, I decided to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App&lt;/a&gt; to scaffold out the basic React boilerplate&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/remix-run/react-router"&gt;React Router&lt;/a&gt; for routing within the app&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; to style the application&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/json-server"&gt;JSON Server&lt;/a&gt; as a backend for this minimum version of my app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the App
&lt;/h2&gt;

&lt;p&gt;The photo gallery has four major components, which each have their own Routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Gallery&lt;/em&gt;, which displays image thumbnails in a grid and links to individual &lt;em&gt;ImageDetails&lt;/em&gt;: "/images" or "/favorites"&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ImageDetails&lt;/em&gt;, which displays a larger version of a selected image, along with the image description: nested under the gallery paths - "/images/" or "/favorites/"&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ImageDetailsEdit&lt;/em&gt;, which provides a way to edit the description of an image: nested under the image detail paths - "/images//edit" or "/favorites//edit"&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;NewImage&lt;/em&gt;, which contains a form and the functions needed to add new images to the gallery: "/new"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within and surrounding these components, I created a number of additional components to style the contents of each page and provide additional functionality. The majority of the components I created this way were Styled Components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;This was the first time I'd used Styled Components in a meaningful way. In the past, I've used a single stylesheet and classes to apply styles, but I wanted to challenge myself to something new. &lt;/p&gt;

&lt;p&gt;My first thought when reading the &lt;a href="https://styled-components.com/"&gt;documentation&lt;/a&gt; was to wonder about the use of sting literals I hadn't encountered much before. If you haven't seen a styled component component before, it looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DetailCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: grid;
  grid: "p i n" auto ". d ." auto / min-content 1fr min-content;
  max-width: 800px;
  margin: 0 auto;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breaking this down:&lt;br&gt;&lt;br&gt;
&lt;code&gt;styled&lt;/code&gt; is the default export from the &lt;code&gt;styled-components&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;div&lt;/code&gt; is a function property of the &lt;code&gt;styled&lt;/code&gt; object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function? But where are the parentheses?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice that the CSS styles themselves are contained within the backticks (&lt;code&gt;\&lt;/code&gt;) of an ES6 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt;. In this case, it is a &lt;em&gt;tagged&lt;/em&gt; template literal. The tag of a tagged template literal is a function (here, &lt;code&gt;div&lt;/code&gt;) that takes an array of strings as its first argument, and the values of any substitutions (indicated by the &lt;code&gt;${}&lt;/code&gt; syntax in a template literal) as additional arguments.&lt;/p&gt;

&lt;p&gt;This means the example above could be rewritten as the below, with no change in functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DetailCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="s2"&gt;`
  display: grid;
  grid: "p i n" auto ". d ." auto / min-content 1fr min-content;
  max-width: 800px;
  margin: 0 auto;
`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things get a bit more complicated when you introduce those substitutions. For example, with styled components, you can use props to change a component's styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  grid-area: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  padding: 0 1rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows us to pass in an area prop to define where the component will display:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavButton&lt;/span&gt; &lt;span class="na"&gt;area&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Next&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And translates to CSS like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;grid-area&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would be equivalent to, but much less convenient than, calling the &lt;code&gt;button&lt;/code&gt; function property of &lt;code&gt;styled&lt;/code&gt; directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NavButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid-area: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;; padding: 0 1rem;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I was able to wrap my head around what this syntax meant, it was much easier to use styled components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styled-component-tips"&gt;
  &lt;/a&gt;
  Styled Component Tips:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don't be afraid of making a lot of styled components, as long as they each serve a purpose!&lt;/li&gt;
&lt;li&gt;Keep single-use components near where you use them. I kept mine in the same file as the component I used them in.&lt;/li&gt;
&lt;li&gt;If you find yourself using the same (or similar) styles or components in multiple places, you can pull the styled component into its own file and reuse it! Don't repeat yourself if you don't have to!&lt;/li&gt;
&lt;li&gt;Read the documentation&lt;/li&gt;
&lt;li&gt;Read this (Josh W Comeau Article on Styled Components in React)[&lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;https://www.joshwcomeau.com/css/styled-components/&lt;/a&gt;]. I found it very helpful, especially the section on making sure you have a single source of styles for each component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#plans-for-the-future"&gt;
  &lt;/a&gt;
  Plans for the future
&lt;/h2&gt;

&lt;p&gt;As I have time, I'm planning to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic login and user validation&lt;/li&gt;
&lt;li&gt;Real photo upload instead of url submissions&lt;/li&gt;
&lt;li&gt;Additional albums&lt;/li&gt;
&lt;li&gt;Server-side photo resizing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visit-the-most-recent-version-of-the-site"&gt;
  &lt;/a&gt;
  Visit the most recent version of the site
&lt;/h2&gt;

&lt;p&gt;You can see a working version of the site at: &lt;a href="https://photo-album.joedietrich.dev"&gt;https://photo-album.joedietrich.dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Smartlist - the sophisticated home inventory app</title>
      <author>ManuTheCoder</author>
      <pubDate>Wed, 20 Oct 2021 01:16:40 +0000</pubDate>
      <link>https://dev.to/manuthecoder/smartlist-the-sophisticated-home-inventory-app-mm2</link>
      <guid>https://dev.to/manuthecoder/smartlist-the-sophisticated-home-inventory-app-mm2</guid>
      <description>&lt;p&gt;Check out my latest app, Smartlist!&lt;/p&gt;

&lt;p&gt;Smartlist is a free home inventory app that lets you keep track of what you have in your home, and helps you save money. Access your inventory on any device!&lt;/p&gt;

&lt;p&gt;Key features: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep track of your home's inventory&lt;/li&gt;
&lt;li&gt;Recipe generator&lt;/li&gt;
&lt;li&gt;Shopping List&lt;/li&gt;
&lt;li&gt;Todo List&lt;/li&gt;
&lt;li&gt;Finance Tracker&lt;/li&gt;
&lt;li&gt;Encrypted items, database, tasks, everything!&lt;/li&gt;
&lt;li&gt;Home maintenance tips&lt;/li&gt;
&lt;li&gt;Custom rooms, categories, and more.&lt;/li&gt;
&lt;li&gt;Share items via WhatsApp, Email, or via a shareable link!&lt;/li&gt;
&lt;li&gt;Notes and Document storage&lt;/li&gt;
&lt;li&gt;Smartlist Events

&lt;ul&gt;
&lt;li&gt;Collaborate on events together&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;API integration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unlimited items!!!&lt;/strong&gt;*&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Completely free&lt;/strong&gt; - No premium plans!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dorm mode&lt;/strong&gt; - For college students&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://smartlist.ga"&gt;https://smartlist.ga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to view the source code? &lt;br&gt;
&lt;a href="https://github.com/Smartlist-App/Smartlist"&gt;https://github.com/Smartlist-App/Smartlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❤️ Please star it if you like my code&lt;/p&gt;

&lt;p&gt;If you have any feature requests, please let me know in the comments&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>css</category>
      <category>productivity</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Wed, 20 Oct 2021 00:36:29 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-3fob</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-3fob</guid>
      <description>&lt;p&gt;&lt;strong&gt;--DAY 2--&lt;/strong&gt;&lt;br&gt;
Hi, I am going to make #100DaysOfCode Challenge.Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;This is 2nd day:&lt;/strong&gt;&lt;br&gt;
-Problem: Staircase&lt;br&gt;
-Detail: &lt;a href="https://www.hackerrank.com/challenges/staircase/problem"&gt;https://www.hackerrank.com/challenges/staircase/problem&lt;/a&gt;&lt;br&gt;
-My solution (javascript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function staircase(n) {
    let line=[];
    line.length=n;
    line.fill(' ');
    for(let i=0;i&amp;lt;n;i++){
        line.shift();
        line.push('#');
        console.log(line.join(''));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt; &lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>What is an API?</title>
      <author>Gabrielle Davidson</author>
      <pubDate>Wed, 20 Oct 2021 00:30:11 +0000</pubDate>
      <link>https://dev.to/gabriellend/what-is-an-api-fl5</link>
      <guid>https://dev.to/gabriellend/what-is-an-api-fl5</guid>
      <description>&lt;p&gt;&lt;em&gt;API&lt;/em&gt;, or &lt;em&gt;Application Programming Interface&lt;/em&gt;, is one of the many acronyms thrown around in the programming world. It took me months to grasp the concept, not least because APIs can look very different from each other, depending on what they are trying to accomplish.&lt;/p&gt;

&lt;p&gt;The best, high-level conceptualization I've come up with that encapsulates them all is that &lt;strong&gt;APIs are a simplified way to interact with complex information&lt;/strong&gt;. That still sounds kind of vague. Let's look at some examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real world example
&lt;/h2&gt;

&lt;p&gt;The picture in the header of this article shows an old radio. We can actually think of this radio, with its three dials, as an API for transforming radio waves into sound and having some control over them.&lt;/p&gt;

&lt;p&gt;We don't have a way to directly access radio waves without a radio. Nor would we probably want to, that's a lot of complex information to handle. So, someone devised this simple &lt;em&gt;interface&lt;/em&gt; that gives us the ability to switch between different frequencies, control the volume, and turn the radio off and on.&lt;/p&gt;

&lt;p&gt;There is a lot more you could do with radio waves that has nothing to do with listening to music, but we don't need to be bogged down with all that stuff. The radio API just gives us what we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-example"&gt;
  &lt;/a&gt;
  Programming example
&lt;/h2&gt;

&lt;p&gt;Similarly, in the programming world, we frequently want to easily incorporate data from other complex sources to make our projects more dynamic and useful.&lt;/p&gt;

&lt;p&gt;Let's say I'm making a weather app. How do I get the weather data to display on my home screen? Do I have to collect and maintain it all myself? Lucky for me, someone else has already done that and created an &lt;em&gt;API&lt;/em&gt; that allows me to access and use that data. It doesn't have physical dials but there are instructions on how to use it and it only gives me what I need, not the hoards of information that come with monitoring the weather, just like the radio.&lt;/p&gt;

&lt;p&gt;This is great news! Not only do I not have to collect my own data, I also don't have to spend an inordinate amount of time sifting through someone else's data. This saves me a lot of time.&lt;/p&gt;

&lt;p&gt;It also allows the creator of the API to let other people use some of their data while keeping some private. This might be like how Pinterest provides an API for your website to use its icon to save something to a board without having to give you all of its user or proprietary information. You get to give your users the ability to harness the power of Pinterest and Pinterest gets to reach more people. It's a win-win for everyone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-wonderful-world-of-apis"&gt;
  &lt;/a&gt;
  The wonderful world of APIs
&lt;/h2&gt;

&lt;p&gt;APIs are everywhere and there are all kinds. There is a &lt;a href="http://swapi.py4e.com/"&gt;Star Wars API&lt;/a&gt; and a &lt;a href="http://numbersapi.com/#42"&gt;number facts API&lt;/a&gt;. Large companies like &lt;a href="https://rapidapi.com/collection/facebook-apis"&gt;Facebook&lt;/a&gt; have APIs. Here is a &lt;a href="https://public-apis.xyz/"&gt;collection&lt;/a&gt; of a bunch of other APIs. Whatever you're looking for, there is probably an API for it. Once you use a few you realize that they all operate pretty much the same way, with maybe a few idiosyncrasies. You'll need to understand http requests and asynchronous javascript in order to fully work with APIs but hopefully this gives you a better understanding of what they even &lt;em&gt;are&lt;/em&gt;. And once you get used to them, they are a lot of fun!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Utilizando Alias para produtividade no terminal</title>
      <author>Marcelo Michels</author>
      <pubDate>Wed, 20 Oct 2021 00:12:47 +0000</pubDate>
      <link>https://dev.to/marcelomichels/utilizando-alias-para-produtividade-15in</link>
      <guid>https://dev.to/marcelomichels/utilizando-alias-para-produtividade-15in</guid>
      <description>&lt;p&gt;Utilizar o terminal faz parte do dia a dia de todo programador, muitas vezes o uso desse terminal é para realizar ou executar quase sempre os mesmos comandos, alguns deles podem ser mais simples ou mais complexos. Desta forma, o quão bom seria possuirmos atalhos para esses comandos? Vamos ver abaixo como criar-los. &lt;/p&gt;

&lt;p&gt;OBS: Todo esse post foi testado apenas no linux e macOS, não sei como é o funcionamento de algo parecido no windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alias"&gt;
  &lt;/a&gt;
  Alias
&lt;/h2&gt;

&lt;p&gt;O comando &lt;em&gt;alias&lt;/em&gt; (&lt;em&gt;apelido&lt;/em&gt; em português, eu particularmente também chamo de atalhos), permite definirmos um apelido para um determinado comando.   &lt;/p&gt;

&lt;p&gt;Podemos definir esse apelido dentro do arquivo &lt;code&gt;.profile&lt;/code&gt; (dependendo do seu sitema operacional pode ser &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; ou algum similar) no diretório raiz de um usuário.  &lt;/p&gt;

&lt;p&gt;No meu caso vou editar o arquivo &lt;code&gt;.zshrc&lt;/code&gt; e adicionar no final dele a linha abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ola&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"echo 'Isso foi impresso utilizando alias'"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após editar e salvar o arquivo, no terminal digite o comando abaixo para que ele considere as ultimas alterações realizadas no arquivo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois disso podemos testar se o apelido vai funcionar, então digite apenas &lt;code&gt;ola&lt;/code&gt; no terminal para ver o que acontece, no meu caso o resultado foi o mostrado abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mm@MacBook-Pro-de-Marcelo ~ % ola
Isso foi impresso utilizando alias
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto, já vimos na prática como criar um apelido para um determinado comando, mas agora vamos utilizar esses atalhos para coisas mais interessantes e uteis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atalhos-git"&gt;
  &lt;/a&gt;
  Atalhos git
&lt;/h2&gt;

&lt;p&gt;Os atalhos que mais utilizo no meu terminal são do git, vou deixar abaixo todos eles, sendo que cada pessoa pode modificar os atalhos conforme o seu gosto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git status"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gita&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git add --all"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git commit -m"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gita &amp;amp;&amp;amp; gitc"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitamend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gita &amp;amp;&amp;amp; git commit --amend &amp;amp;&amp;amp; git push -f"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitacp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gitac &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;push&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; gitp"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git fetch --all"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitfp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gitf &amp;amp;&amp;amp; git pull"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git log --pretty=format:'%C(yellow)%cr %C(cyan)%H %C(green)%an %C(blue)%d %C(white)%s'"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitche&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchemaster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout master"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchedevelop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout develop"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitchenew&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git checkout -b"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git merge"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitdelbranchlocal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git branch -d"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitdelbranchremote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push origin --delete"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gitb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git branch -a"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gittag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git tag"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gittagpush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push origin --tags"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso também ajuda para quando esquecemos de algum comando não precisar pesquisar por ele em outros lugares.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atalhos-npm"&gt;
  &lt;/a&gt;
  Atalhos npm
&lt;/h2&gt;

&lt;p&gt;Outra ferramenta que utilizo bastante é o npm, desta forma também tenho uma série de atalhos para ele.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run dev"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nr test"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrcopen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"brave-browser coverage/lcov-report/index.html"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm run test:coverage"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrco&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nrc &amp;amp;&amp;amp; nrcopen"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;covo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nrco"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nrb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"nr build"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm start"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ni&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm install"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"npm uninstall"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;npmrmi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rm -rf node_modules &amp;amp;&amp;amp; rm -f package-lock.json &amp;amp;&amp;amp; npm i"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#atalhos-ssh"&gt;
  &lt;/a&gt;
  Atalhos ssh
&lt;/h2&gt;

&lt;p&gt;Sempre que preciso conectar em uma maquina ou servidor por ssh, preciso lembrar ou buscar qual o IP da maquina em algum outro lugar. Então também resolvi esse problema utilizando uma outra sessão de atalhos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshProjetoHomolog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh homologUser@192.168.1.100"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshProjetoProd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh prodUser@192.168.1.101"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;sshGitlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ssh gitlabUser@192.168.1.102"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#atalhos-vs-code-e-docker"&gt;
  &lt;/a&gt;
  Atalhos VS Code e Docker
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjeto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cd ~/developer/projeto"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoDocker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd scripts/docker"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoFront&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-frontend"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;cdProjetoWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; cd projeto-worker"&lt;/span&gt;

&lt;span class="c"&gt;# Abre no vscode o projeto&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjeto &amp;amp;&amp;amp; code projeto.code-workspace"&lt;/span&gt;

&lt;span class="c"&gt;# Build total ou parcial &lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuild&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml build --no-cache"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoBuild projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoBuild projeto-worker"&lt;/span&gt;

&lt;span class="c"&gt;# Execução total ou parcial&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml up"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoRun projeto-server"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunWorker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"projetoRun projeto-worker"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoRunFront&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoFront &amp;amp;&amp;amp; ns"&lt;/span&gt;

&lt;span class="c"&gt;# Build and Run&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoBuildAndRun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; projetoBuild &amp;amp;&amp;amp; projetoRun"&lt;/span&gt;

&lt;span class="c"&gt;# stop&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;projetoStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cdProjetoDocker &amp;amp;&amp;amp; docker-compose -f docker-compose.local.yml down"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;compare a enorme diferença entre digitar todos os comandos na mão&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/developer/projeto/scripts/docker
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.local.yml build &lt;span class="nt"&gt;--no-cache&lt;/span&gt;
&lt;span class="c"&gt;# Esperar a build terminar&lt;/span&gt;
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.local.yml up

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Substiindo todos os comandos acima por um atalho:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;projetoBuildAndRun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As vezes o tempo de espera é o maior vilão, pois enquando gera a build vc vai pro navegador ou pra caixa de e-mails e quando volta terminal esta ocioso esperando pelo próximo comando.  &lt;/p&gt;

&lt;p&gt;Pode bater o enter e ir fazer um café e quando voltar tudo vai estar OK, sem perca de tempo com terminal ocioso na espera pelo próximo comando.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dica-extra"&gt;
  &lt;/a&gt;
  Dica extra
&lt;/h2&gt;

&lt;p&gt;Eu mantenho um repositório privado no meu github com alguns comandos de setup e instação, para quando eu formatar minha maquina possa buscar esses comandos e scripts de uma forma bem rápida. Também passei a adicionar dentro desse repositório um arquivo que contem todos os meus alias, desta forma eu apenas importo o arquivo &lt;code&gt;.myCustomAlias&lt;/code&gt; de dentro do meu repositório lá no arquivo &lt;code&gt;.zshrc&lt;/code&gt;, para fazer essa importação basta adicionar a linha abaixo no arquivo &lt;code&gt;.profile&lt;/code&gt; ou &lt;code&gt;.zshrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/path-to-my-repo/.myCustomAlias
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Espero que tenha ajudado e inspirado vocês a criarem seus próprios atalhos, apelidos, aliases (como preferirem chamar).&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>braziliandevs</category>
      <category>productivity</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Creating Data Structures with Array.reduce()</title>
      <author>Garrick Crouch</author>
      <pubDate>Wed, 20 Oct 2021 00:05:06 +0000</pubDate>
      <link>https://dev.to/localpathcomp/creating-data-structures-with-arrayreduce-13f</link>
      <guid>https://dev.to/localpathcomp/creating-data-structures-with-arrayreduce-13f</guid>
      <description>&lt;p&gt;I recently saw an older youtube video on using array.reduce to build data structures on the fly in ways that you may find surprising or unintuitive. Normally we always think of reduce when it comes to doing math on array elements or something similar, and while that is a great use case, lets explore some of the more unique ways leverage this array method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-object-from-an-array"&gt;
  &lt;/a&gt;
  Create An Object From An Array
&lt;/h3&gt;

&lt;p&gt;To do this you could use any old loop, but lets say you need to build an object of objects, with the properties equal to one of the objects property values, eg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is the data we have...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jeff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newer Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sabrina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newest Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fourth Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-03-02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fifth Post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sabrina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-08-09&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// this is the structure we want...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;jeff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-05-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;sabrina&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we want build an object containing author objects that each contain an array of any posts they've written. A map won't do because we don't really want to return an array of course (contrived on purpose for the example) and we would like to easily aggregate them into the appropriate arrays keyed by the name. Also the specification says we should rename the &lt;code&gt;date&lt;/code&gt; to &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So how could we reduce this array to the data structure specified in a functional way and it make sense to the reader of our code?&lt;/p&gt;

&lt;p&gt;Remember that array.reduce will return any value you want it to...aha...so we want to return an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This above is the function we'll use. Notice the initialValue argument. That'll set the stage for our returned value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-reduce"&gt;
  &lt;/a&gt;
  Let's Reduce
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our basic setup. We'll pass &lt;code&gt;acc&lt;/code&gt; or the accumulated value and the &lt;code&gt;curr&lt;/code&gt; or current array element into the callback, returning an expression, which is an object literal. Our default value you may notice is an empty object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our workhorse above. We'll step through each stage of working with the data. It's done in a functional way meaning we're copying data, never overwriting it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#first-we-spread-the-value-of-raw-acc-endraw-into-the-object-that-were-returning"&gt;
  &lt;/a&gt;
  First, we spread the value of &lt;code&gt;acc&lt;/code&gt; into the object that we're returning
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// more stuffs&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#second-well-use-the-computed-value-to-set-our-property-name-of-an-author"&gt;
  &lt;/a&gt;
  Second, we'll use the computed value to set our property name of an author
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// more stuffs&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way it ensures we're preserving any objects that don't match the computed property name in the carry. We use the toLowerCase bc the spec says it wants lowercase author names as the object property.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#third-well-set-and-spread-on-the-posts-property-of-a-computed-name-author-object"&gt;
  &lt;/a&gt;
  Third, we'll set and spread on the posts property of a computed name author object
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="c1"&gt;// we'll use a short circuit since the posts property won't e &lt;/span&gt;
     &lt;span class="c1"&gt;// exist on the first of any given author, just spread an &lt;/span&gt;
     &lt;span class="c1"&gt;// empty array&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt;
     &lt;span class="c1"&gt;// add our object with the specified data mapping&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#success"&gt;
  &lt;/a&gt;
  Success
&lt;/h5&gt;

&lt;p&gt;If we serialize the result and pretty print it we'd get....&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jeff"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-01"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sabrina"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Newer Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fifth Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-09"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mike"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Newest Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-05-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fourth Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-03-02"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please leave me any thoughts on optimization or better ways to accomplish the given task. The primary focus of this is to get people thinking about array.reduce in interesting ways but I always enjoy learning new or better ways to do stuff.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Micro-SaaS: single-feature 'vending machine' web apps</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Tue, 19 Oct 2021 23:43:41 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/micro-saas-single-feature-vending-machine-web-apps-2j0e</link>
      <guid>https://dev.to/jasonleowsg/micro-saas-single-feature-vending-machine-web-apps-2j0e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-the-single-feature-apps-that-would-be-fun-to-make-lets-brainstorm"&gt;
  &lt;/a&gt;
  &lt;em&gt;What are the single feature apps that would be fun to make? Let's brainstorm!&lt;/em&gt;
&lt;/h2&gt;




&lt;p&gt;Here’s one trend-setting &lt;a href="https://twitter.com/levelsio/status/893214998477983745?s=20"&gt;tweet&lt;/a&gt; in 2017 by &lt;a class="mentioned-user" href="https://dev.to/levelsio"&gt;@levelsio&lt;/a&gt;
:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here’s a new trend: fast food-type web apps. They’re single feature apps that do one thing, charge $ quickly and give instant gratification.&lt;/p&gt;

&lt;p&gt;They have some characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tiny&lt;/li&gt;
&lt;li&gt;single feature&lt;/li&gt;
&lt;li&gt;no sign up&lt;/li&gt;
&lt;li&gt;fast user flow (&amp;lt;1 min)&lt;/li&gt;
&lt;li&gt;low price&lt;/li&gt;
&lt;li&gt;charge $ quickly_&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They grew out of the MVP trend, but we realized it’s not just us who like minimal, users like it too. No giant app with 100 features. A tiny app with 1 feature for one flat price. As a dev (or studio) you need about 10 of these (at $1,000/m-$5,000/m) to make a solid income ($10,000/m-$50,000/m). Homework exercise: think of something that you can charge $1-$5 for a single feature web app, that’s easily shareable and can go viral.&lt;/p&gt;

&lt;p&gt;“I really love this trend — it makes websites feel like vending machines, in a good way.”&lt;/p&gt;

&lt;p&gt;“Examples of fast-food apps: go to fiverr or ifttt and explore those small gigs/jobs which have users. E.g your resume as an infographics etc”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I love the entire thread. A treasure throve of ideas and inspiration for micro-SaaS. I love the idea of a single feature app, easy to code, and low bar to purchase. On top of that, single feature means less support needed, and less maintenance too. To be honest, making a full-featured SaaS feels daunting for me now, so breaking down the learning journey into smaller steps like this makes it more approachable. &lt;/p&gt;

&lt;p&gt;Since he gave homework, I thought a little brainstorm would be fun:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mindful work bell timer&lt;/li&gt;
&lt;li&gt;Google Analytics counter widget to show just page views / users&lt;/li&gt;
&lt;li&gt;Collections for Twitter bookmarks&lt;/li&gt;
&lt;li&gt;Nocode tool to create simple Chrome extensions that show content&lt;/li&gt;
&lt;li&gt;Nagging web app to email/sms/message you multiple times per day until you complete the task&lt;/li&gt;
&lt;li&gt;Embeddable blog that works on Carrd&lt;/li&gt;
&lt;li&gt;Embeddable calendars on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable news tickers or banners on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable polls on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable upload form on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable sliders on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable maps on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Embeddable floating buy/subscribe buttons on Carrd/JAMstack&lt;/li&gt;
&lt;li&gt;Convert PDF to fillable PDF&lt;/li&gt;
&lt;li&gt;Convert PDF to Excel/Word&lt;/li&gt;
&lt;li&gt;Convert Excel calculator into web app/page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;What else? Any ideas for a single-feature web app that will help you?&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>product</category>
      <category>startup</category>
      <category>webapps</category>
      <category>decodingcoding</category>
    </item>
  </channel>
</rss>
