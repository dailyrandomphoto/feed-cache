<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀20 Best CSS3 Library For Developers.</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:09:45 +0000</pubDate>
      <link>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</link>
      <guid>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:17:28 +0000</pubDate>
      <link>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</link>
      <guid>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>10 VSCode Extension Every Front-end Developer should use</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:10:09 +0000</pubDate>
      <link>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</link>
      <guid>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</guid>
      <description>&lt;p&gt; &lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. &lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make VSCode Lighter</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:09:16 +0000</pubDate>
      <link>https://dev.to/gigogh/make-vscode-lighter-1fco</link>
      <guid>https://dev.to/gigogh/make-vscode-lighter-1fco</guid>
      <description>&lt;p&gt;VSCode is a really great Code Editor rather say nearly an IDE or better than that. But this costs a great amount of RAM and CPU in bigger projects. That's not all related VSCode but to most of its extensions. VSCode's extensions are good, by far best. But these are written for Nodejs with JS so unsurprisingly these take a handy amount of resource but efficiently. And people unknowingly accuse vscode for this. Though most of the time it doesn't cause that much of issue. But in bigger projects this tiny problem gets bigger as most of the people don't have a AMD Thread Ripper, Samsung NVMe SSD with 16GB RAM &amp;amp; a RTX3090&lt;/p&gt;
&lt;p&gt;Let's find out the reasons of this high resource usage &amp;amp; fix 'em&lt;/p&gt;

&lt;p&gt;&lt;span&gt;READ More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/make-vscode-lighter/"&gt;Make Vs Code Lighter&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>Implementing a web app using Azure Static Web Apps.</title>
      <author>Rafael Alexander Reyes Perez</author>
      <pubDate>Fri, 13 Aug 2021 03:11:12 +0000</pubDate>
      <link>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</link>
      <guid>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</guid>
      <description>&lt;p&gt;Video: &lt;a href="https://lnkd.in/dwvHBKTf"&gt;https://lnkd.in/dwvHBKTf&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-azure-website-github-deploy-learning"&gt;
  &lt;/a&gt;
  microsoft #azure #website #github #deploy #learning
&lt;/h1&gt;

</description>
      <category>azure</category>
      <category>github</category>
      <category>website</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 18</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 13 Aug 2021 02:48:14 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will validate the Password&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8o65ZiRN1ow"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>August 13th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 13 Aug 2021 02:42:27 +0000</pubDate>
      <link>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</link>
      <guid>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>15 Beginner JavaScript Projects to Improve Your Front-End Skills!</title>
      <author>Miguel Nunez</author>
      <pubDate>Fri, 13 Aug 2021 02:29:02 +0000</pubDate>
      <link>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</link>
      <guid>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</guid>
      <description>&lt;p&gt;The fastest way for you to become a good web developer is to practice. This means completing as many beginner projects as you can. That’s because each project presents a unique problem and solution. Hence, the more projects you complete, the more knowledge you will gain. Think of each completed project as a medal you earned.&lt;/p&gt;

&lt;p&gt;In this list of JavaScript challenges, I’ve included some of my favorite projects for beginners. In fact, these are the same projects that I built when I was first learning JavaScript. Hopefully you can learn from them like I did. If you get stuck, don’t worry, I included a video tutorial next to each project that shows you how to solve it step by step.&lt;/p&gt;

&lt;p&gt;Before watching the solutions, I encourage you to attempt them on your own first. This is key to becoming a good developer. In programming there isn’t any shortcuts so if you don’t put in the work, you will not see improvement no matter how many tutorials you watch. If your feeling overwhelmed, take a break and relax it happens to the best of us. Remember that it takes even the brightest developer a lot of time and practice to begin to master this stuff.&lt;/p&gt;

&lt;p&gt;Finally, I left a “try it before you build it” section next to each project. Each project is hosted for free with GitHub Pages so after you complete your first project, learn how to host it the same way by reading &lt;a href="https://medium.com/@iamcodefoxx/host-your-website-for-free-with-github-pages-in-4-easy-steps-1f468ad0135b"&gt;this&lt;/a&gt; super easy to follow guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Hex Colors&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4nCH8EA55js"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Make the web a little prettier with this simple hex colors application. This app changes the background color and displays that color’s hexadecimal code on the screen all on the click of a button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Hex-Colors-Gradient/"&gt;Hex Colors Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Building this project taught me how to use onclick, which is used to attach a function to a button. In this case that function was generating a random hex color and making it the color of the background. Learning this was very useful since nearly every modern web application uses buttons. I have a feeling this is a technique I will use over and over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Random Quotes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LdzcRuMnlvs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
If your in need of a little motivation, I got you covered. In this project, we will build a random quote generator equipped with plenty of motivational quotes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Random-Quote-Generator/"&gt;Random Quotes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This application can be created in various ways but it was interesting to see it being solved using an object, an often under-utilized data structure. I also learned a simple algorithm that’s responsible for generating a random quote each time the user clicks on the button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Image Carousel&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5yNF2J0Coc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need an application to display all your cool pictures in? Awesome, in project number three we’ll create an application that allows us to navigate pictures on the click of a button. In programming, we call these photo carousels or image sliders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/ImageCarousel/"&gt;Image Carousel Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was interesting to learn how this sort of project was implemented. At first, we used CSS to block all of the images from the screen. Then we used JavaScript to manipulate the CSS style into revealing one image at a time. Before completing this project I was unsure if it was possible to change the CSS styles directly with JavaScript, it turns out that it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Digital Clock&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QxfQJlEBdNI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Thinking of purchasing a digital clock? Not anymore, in this project you’ll learn how to build your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/DigitalClock/"&gt;Digital Clock Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In building this project, I learned that with JavaScript we can create a built in object and retrieve the time from it using built in functions. This is great because it eliminates having to include an additional library, like we do in Python or C++. I also learned about a built in function called setTimeout, which is used to call another function over and over. For this project it was necessary to use setTimeout to ensure that our time was being updated properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kaq9w0MUInc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A calculator. No JavaScript beginner project list would be complete without it and we aren’t making any exceptions here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Calculator/"&gt;Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was almost unbelievable to see how simple this was to build. Before building this I thought each expression needed to be solved manually with some sort of complex function. It turns out there’s a built in JavaScript function named eval that takes care of this for us. I really enjoyed building this app and even changed the style of it to give it my own flavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Grocery List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8I5UCTlMa34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Hungry? Let’s go to the grocery store with this grocery list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Grocery-List/"&gt;Grocery List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This is a really cool looking app and it’s the first project on the list where we made use of event listeners. Indeed, we used an event listener to add a new item to the grocery list whenever the user clicked on the “enter” key and another to scratch an item off the list when they clicked on that particular item. It was useful to learn how the function that’s responsible for deleting all the elements within a div was written. In this case, this function deleted all of the items in our grocery list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Tip Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I4tNOpNIU5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
No more looking around the table to see who’s taking care of the tip with this tip calculator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/TipCalculator/"&gt;Tip Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Developing the function that determines the amount each person will tip was rather easy. Perhaps the greatest challenge here was using CSS to mimic the design of the app. It looks like a rather simple design but it’s actually a little challenging to do without watching the tutorial first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. To-do List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H5tuwAO-_Kg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let’s make the most of our day with this awesome to-do list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/To-do-list/"&gt;To-do List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The solution to this one was very similar to the grocery list application. I found myself looking back at the code for that one to help me solve this one. One thing that was different, however, was the function to change the background color of each item on the list. I thought that was a very nice addition to the project, as it makes it look a lot nicer. Overall, I would say this was more of a review project but it was still great practice nonetheless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Flashcards&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wtqbOFYivxw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
This is an application that allows you to create flashcards so put away those paper flashcards because there’s a new boss in town.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Flashcards/"&gt;Flashcards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
First off what a great looking application. It can help students study and keep them from spending money on paper flashcards. This is the first project on the list where we used flexbox so it was little challenging at first. Once I got the hang of it, however, it was actually very easy to use and it made the project a lot more dynamic. In particular, I really enjoyed the align-item, flex-wrap, and justify-content options because they made the flashcards responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Sticky Notes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_B-54mvPup4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Lets build a sticky notes application. Yes, you may throw all of those paper sticky notes away now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Sticky-Notes/"&gt;Sticky Notes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The code for building this project was very similar to the flashcards project but that’s no problem because the practice was needed. Indeed, if I didn’t have the code for that project to fall back on, I would of had to watch the flashcards tutorial video again to check if I was doing this one correctly. Of course, this project does have some unique features so it was challenging figuring out how to code those parts. Overall, I learned a great deal from this project since its built using a combination of everything we have learned so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Timer&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_bvutuhUxHY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let’s build a timer. Ready, set, go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Timer/"&gt;Timer Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It turns out that building a simple timer is harder than it seems. One would think that using the same setInterval function from the digital clock project would be sufficient to display the correct time. It turns out that technique simply doesn’t work for this. For this project, we create variables to hold different information about the time, for example, when the time was started, when the time was stopped, and how long the time was stopped. Without these variables and the calculations we perform with them, our digital clock would simply be unable to correctly display the time elapsed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Math 4 Kids&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Uw9wc5wm_mw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A cool application that teaches kids basic arithmetic operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Math4Kids/"&gt;Math 4 kids Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project, I learned how to switch from one web page to another and how to play a sound file. It turns out both of these tasks are rather simple to do. The hardest part was figuring out how to randomly place the answers in different boxes so the correct answer isn’t always in the same location. I tried my best to figure it out on my own but ended up watching the tutorial for the solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Unsplash API ( Image Generator )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7QQkl0NLxBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need some images for your new website? Let’s build an image generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/UnsplashAPI/"&gt;Image Generator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Completing this project taught me how to use JavaScript’s built in fetch to make API requests. Before building this project, I was completely unaware that the Unsplash API existed. It was interesting to learn that many established companies integrate this API into their website. It’s also cool to have an image generator for whenever I need a new wallpaper on my desktop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Quotes API ( Typewriter )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3rDEQYg8UWU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
An application that fetches a random quote from an API and displays it on the screen with a typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Typewriter/"&gt;Typewriter Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Learning how to write the typewriter script was awesome. I’ve actually seen this effect implemented in video games. Now I can use it when I build my own games. As far as the code is concerned, it was interesting to learn that we don’t always need CSS to make cool animations. In this project we used the built in JavaScript substring function to make the typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Square Cards ( Template )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MvgiPlVF0Tg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A stylish way to display data or simply a square card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/SquareCards/"&gt;Square Cards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project I learned how to open up YouTube videos and webpage articles directly from JavaScript. This was a great addition to the arsenal of tools I now possess ( thanks to 15 beginner projects! ) as a web developer.&lt;/p&gt;

&lt;p&gt;Need more JavaScript beginner project ideas? Check out my &lt;a href="https://jsprospect.com/"&gt;jsprospect&lt;/a&gt; website.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>projects</category>
      <category>coding</category>
    </item>
    <item>
      <title>Who can hire me?</title>
      <author>Kato joshua</author>
      <pubDate>Fri, 13 Aug 2021 01:07:12 +0000</pubDate>
      <link>https://dev.to/joshuakato/who-can-hire-me-487m</link>
      <guid>https://dev.to/joshuakato/who-can-hire-me-487m</guid>
      <description>&lt;p&gt;Am a full stack web developer. Experienced with laravel, vue and react. I need a job. Anyone interested in hiring me am available and you can reach me out. My contacts, tel +256752567534,&lt;a href="mailto:katoj65@gmail.com"&gt;katoj65@gmail.com&lt;/a&gt;. Am open to learning opportunities as well. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Electron Adventures: Episode 19: Sending Data To Frontend</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 13 Aug 2021 00:57:11 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-19-sending-data-to-frontend-3kcc</link>
      <guid>https://dev.to/taw/electron-adventures-episode-19-sending-data-to-frontend-3kcc</guid>
      <description>&lt;p&gt;In previous episode, we called some backend functions from the frontend through IPC channels. Now let's try it the other way.&lt;/p&gt;

&lt;p&gt;It's similar, but not identical. Mostly because while there's one backend/main process, there could be a bunch of frontend/renderer processes, each with their window, so we can't just "send to frontend" like &lt;code&gt;ipcMain.invoke&lt;/code&gt; without being a bit more specific.&lt;/p&gt;

&lt;p&gt;So can we do &lt;code&gt;someWindow.webContents.invoke&lt;/code&gt;? &lt;a href="https://github.com/electron/electron/issues/25667"&gt;Well, also no&lt;/a&gt;. For complicated technical reasons Electron decided to not include this, and if you really need it, &lt;a href="https://www.npmjs.com/package/electron-promise-ipc"&gt;you need to use a third party library that emulates it with a bunch of calls&lt;/a&gt;. I think they should just include it in Electron.&lt;/p&gt;

&lt;p&gt;For sending one way messages we can do &lt;code&gt;someWindow.webContents.send&lt;/code&gt; and that's all we'll do today.&lt;/p&gt;

&lt;p&gt;But let's take it step by step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-a-new-application"&gt;
  &lt;/a&gt;
  Start a new application
&lt;/h3&gt;

&lt;p&gt;We start the usual way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; electron
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexhtml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.html&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Nothing new here, just some styling, and placeholder for messages we'll receive from the backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Messages from the backend:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"messages"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We need to start a frontend as usual, except this time we also want to save the window object, so we can send messages to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;nodeIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;contextIsolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's do the second step - let's read whatever is being typed on the terminal, and send it over!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-appjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;app.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Once we receive a message, just append it to the &lt;code&gt;#messages&lt;/code&gt; div.&lt;/p&gt;

&lt;p&gt;As explained above, we can't really reply to this message, we'd need to do something a bit more complicated if we wanted responses as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#messages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
  &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-to-do-with-all-this"&gt;
  &lt;/a&gt;
  What to do with all this?
&lt;/h3&gt;

&lt;p&gt;In a real application, you'd want to declare the interface between frontend and backend, and put it all in &lt;code&gt;preload.js&lt;/code&gt;, so rest of your frontend can run without any special privileges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;And here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7RwbgdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gcbn3kyuhl4n9tgf1oj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7RwbgdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gcbn3kyuhl4n9tgf1oj.png" alt="Episode 19 screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-19-sending-data-to-frontend"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>electron</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Django Infinite scrolling with javascript fetch api and function based view.</title>
      <author>tochimclaren</author>
      <pubDate>Thu, 12 Aug 2021 23:35:43 +0000</pubDate>
      <link>https://dev.to/tochimclaren/django-infinite-scrolling-with-javascript-fetch-api-and-function-based-view-47fo</link>
      <guid>https://dev.to/tochimclaren/django-infinite-scrolling-with-javascript-fetch-api-and-function-based-view-47fo</guid>
      <description>&lt;p&gt;Hello, I will take you straight through the process of adding inifinte pagination in your django application like it's abc complete code is down below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this is for absolute beginner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tochimclaren/django-infinite-scroll.git"&gt;django-infinite-scroll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing first, we create our django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir django-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd django-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv shell #this initializes with Pipfile and creates the environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We install our django application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv install django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a new django project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject core .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create our app blog and add it to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py startapp blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # our blog app
    'blog.apps.BlogConfig',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the development server and make sure everything is working properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Migrate the database and createsuperuser in my case the credentials were username: &lt;code&gt;admin&lt;/code&gt; password: &lt;code&gt;admin&lt;/code&gt; run the server and let the fun begin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a simple model for a blog to hold&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# models.py
from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    published = models.BooleanField(default=False)

    def __str__(self):
        return self.title
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# views.py
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.shortcuts import render
from .models import Post


def posts(request):
    # it's not a bug if it's intentional ;)
    post_list = Post.objects.filter(published=False)
    # we get page 1 returns 10 post objects
    paginator = Paginator(post_list, 10)

    # page_number is initialized to `1` see main.js
    page_number = request.GET.get('page')

    # we are applying page number which defaults to `1`
    page_obj = paginator.get_page(page_number)

    if page_number:
        # We are checking if `page_number` &amp;lt; or == 
        paginator.num_pages total amount of pages returned by the `Paginator` this only runs if the above conditions are met
        if int(page_number) &amp;lt;= paginator.num_pages:

            obj_list = paginator.get_page(page_number)

            obj_list = obj_list.object_list.values()

            return JsonResponse(list(obj_list), status=200, safe=False)

    ctx = {'page_obj': page_obj}
    return render(request, 'post/posts.html', ctx)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your app url to project url config&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#core/urls.py

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls'))
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define your app urls.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# blog/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.posts, name="posts")
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a simple example template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# template
# 'blog/templates/post/posts.html'
{% load static %}
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        #content{
            margin: 0 auto;
            width: 40vw;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div id="content"&amp;gt;
        {% for post in page_obj %}
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;{{post.title}}&amp;lt;/h1&amp;gt;
                &amp;lt;p&amp;gt;{{post.content}}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        {% endfor %}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type="text/javascript" src="{% static 'blog/js/main.js' %}"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the js side of things, we are listening to scroll event, when we scroll to the bottom of the page, we trigger a function that calls our view which in turn returns a Json objects that we can inject to our template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.js
# 'blog/static/blog/js/main.js'

content = document.querySelector("#content");
let page = 1

window.onscroll = function() {
    url = `/?page=${page}`
    if (window.innerHeight + window.pageYOffset &amp;gt;= document.body.offsetHeight) {
        fetch(url).then(res =&amp;gt; {
            if (res.ok) {
                return res.json();
            }
        }).then(data =&amp;gt; {
            console.dir(data)
            page += 1
            content.innerHTML += data.map(
                obj=&amp;gt;`&amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;${obj.title}&amp;lt;/h1&amp;gt; 
                &amp;lt;p&amp;gt;${obj.content}&amp;lt;/p&amp;gt; 
                &amp;lt;/div&amp;gt;`
                ).join("\n")
        }).catch(err =&amp;gt; {

        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps shed some weight on your web application, because things like these are not worth intsalling an external library (waypointjs i'm looking at you), please help your app shed some weight! Happy coding!&lt;/p&gt;

</description>
      <category>django</category>
      <category>ajax</category>
      <category>fetch</category>
      <category>pagination</category>
    </item>
    <item>
      <title>🐳 Docker para desarrolladores</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 12 Aug 2021 23:05:11 +0000</pubDate>
      <link>https://dev.to/fernandocutire/docker-para-desarrolladores-bk6</link>
      <guid>https://dev.to/fernandocutire/docker-para-desarrolladores-bk6</guid>
      <description>&lt;p&gt;Docker es una herramienta maravillosa para desarrolladores y el concepto de empaquetar tus dependencias en un solo lugar que corre en cualquier lugar suena casi utóṕico.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#en-este-art%C3%ADculo-aprender%C3%A1s"&gt;
  &lt;/a&gt;
  En este artículo aprenderás
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Cómo leer un Dockerfile&lt;/li&gt;
&lt;li&gt;Problemas comunes al correr tu Dockerfile&lt;/li&gt;
&lt;li&gt;Analizar Dockerfile de una SPA&lt;/li&gt;
&lt;li&gt;Cómo construir tus propios dockerfile&lt;/li&gt;
&lt;li&gt;Keywords básicas sobre los Dockerfile&lt;/li&gt;
&lt;li&gt;Qué es alpine y porqué es usado&lt;/li&gt;
&lt;li&gt;Donde buscar imágenes para tus contenedores&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usaré un ejemplo para que podamos entender mejor el funcionamiento de un Dockerfile, un ejemplo para una aplicación de react&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si empleamos la similitud entre un contenedor de esos que los barcos transportan y los docker lo podemos entender de una manera mucho más sencilla y práctica.&lt;/p&gt;

&lt;p&gt;Es verdad que dentro de un contenedor puedes meter una cantidad exacta de mercancía, pero de diferentes tipos y estos poseen un tamaño específico para que sean fáciles de identificar y de llevar por los barcos.&lt;/p&gt;

&lt;p&gt;En docker funciona de forma similar, solo que nuestra mercancía es nuestra aplicación y las reglas son las siguientes.&lt;/p&gt;

&lt;p&gt;De manera práctica nos encontraremos con &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from"&gt;
  &lt;/a&gt;
  FROM
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto significa que se genera un contenedor a partir de una &lt;strong&gt;imagen&lt;/strong&gt;, podemos pensar en ella como un molde que es la primera capa de nuestro contenedor. Ella tendrá configuraciones específicas que servirán para correr los comandos consecuentes, puedes ver que uso node:current-alpine3.14&lt;/p&gt;

&lt;p&gt;Esta imagen la encuentro en la página de &lt;a href="https://hub.docker.com/_/node"&gt;docker hub&lt;/a&gt;, que podemos pensar en ella como un repositorio de imágenes, comúnmente buscarás &lt;strong&gt;imágenes oficiales&lt;/strong&gt; (estas tienen un símbolo de imagen oficial a lado del nombre). &lt;/p&gt;

&lt;p&gt;En docker funciona de forma similar, solo que nuestra mercancía es nuestra aplicación y las reglas son las siguientes.&lt;/p&gt;

&lt;p&gt;Ahora conocemos que esto de node:current-alpine3.14 es el nombre completo de la imagen que usamos como base, pero ¿Qué es alpine? Alpine es el sistema operativo (basado en linux) de nuestra imagen. Este nombre es famoso porque representa una imagen con un peso mínimo de mega bytes , y esto se busca para que tu contenedor final no pese mucho, ya que no conviene mucho tener tu aplicación de 50mb y que tu imagen base pese 250 mb.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workdir"&gt;
  &lt;/a&gt;
  Workdir
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El WORKDIR indica el directorio de trabajo, nos referimos a el como un directorio que se crea dentro del contenedor que se usará como base para correr los comandos consecuentes.&lt;/p&gt;

&lt;p&gt;Entonces conocemos que el workdir se refiere más a nuestro contenedor que a tu aplicación por eso verás que en muchos lugares se le conoce como /app, si tu aplicación usa sus archivos en src/, nada de preocupaciones, recuerda que se habla del contenedor y no tanto de tu aplicación, esto vendrá en los próximos comandos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy"&gt;
  &lt;/a&gt;
  COPY
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los comandos COPY, hacen honor a su nombre de copiar los archivos de tu aplicación a la del contenedor /app.&lt;/p&gt;

&lt;p&gt;Primero copiamos el package.json porque de allí correremos comandos npm.&lt;/p&gt;

&lt;p&gt;Luego empleamos el COPY . . &lt;/p&gt;

&lt;p&gt;Admito que esto no es muy explicativo pero básicamente es copiar lo de tu directorio al directorio de trabajo (WORKDIR) el que ya habíamos específicado anteriormente. &lt;/p&gt;

&lt;p&gt;Podríamos traducir a COPY . /app&lt;/p&gt;

&lt;p&gt;El WORKDIR indica el directorio de trabajo, nos referimos a el como un directorio que se crea dentro del contenedor que se usará como base para correr los comandos consecuentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  RUN
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este puede aparecer bastante en el desarrollo de una aplicación, y hace lo que su nombre, corre en tu contenedor lo que le pongas a su izquierda así de simple.&lt;/p&gt;

&lt;p&gt;Usualmente cuando agarras una aplicación , lo primero que haces es instalar las dependencias porque sino la aplicación no corre, esto es un clásico. Bueno en docker sucede similar, corre el npm install que harías normalmente. Sobre el set progress=false es para que no meustre la barra de progreso al instalar dependencias , el &amp;amp;&amp;amp; une comandos por lo que le coloco npm install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose"&gt;
  &lt;/a&gt;
  EXPOSE
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;EXPOSE sirve para decir que el puerto que tu contenedor usará. &lt;/p&gt;

&lt;p&gt;Aquí está el dilema y es que colocarlo no hará efecto a la hora de correr el contenedor, entonces esto sirve más de documentación. Lee sobre como correr un contenedor&lt;/p&gt;

&lt;p&gt;En mi opinión está bien colocarlo porque la documentación es muy importante pero es bueno tener en cuenta que su utilidad es esa y a la hora de correrlo no esperar que abra en ese puerto por defecto.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cmd"&gt;
  &lt;/a&gt;
  CMD
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CMD es la consola que corre el comando que coloques entre sus corchetes, esto sucederá cuando se termine de correr el contenedor.&lt;/p&gt;

&lt;p&gt;Quizá al final de la construcción de la imagen no se ejecute pero su función se realizará al final de correr el contenedor y no la construcción.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recapitulando"&gt;
  &lt;/a&gt;
  Recapitulando
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="c"&gt;# Usar una imagen  &lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;

&lt;span class="c"&gt;# Establecer el directorio de trabajo de nuestro contenedor&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="c"&gt;# Copiar el package.json a la carpeta /app de nuestro contenedor&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="c"&gt;# Copiará otros archivos de la aplicación&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="c"&gt;# Ejecutar el comando npm set progress=false &amp;amp;&amp;amp; npm install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Exponer el puerto 8086 de el contenedor docker, fin de documentación&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;

&lt;span class="c"&gt;# Correrá este comando al final cuando se esté corriendo el contenedor&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Al final de todo esto recuerda que puedes ejecutar el comando &lt;code&gt;docker build -t aplicacion-docker .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; significa que colocarás un tag que vendría a ser un nombre, aquí no puedes usar letras mayúsculas así que separo con un guión.&lt;/p&gt;

&lt;p&gt;El &lt;code&gt;.&lt;/code&gt; al final significa que buscará dentro de la carpeta un Dockerfile y lo leerá para crear una imagen a partir de las instrucciones, si abres la terminal desde otra carpeta y quieres correr el comando debes sustituir ese punto con la ubicación de el Dockerfile, lo mismo sucede si tienes más de un Dockerfile en tu aplicación pero esto es algo que no suele suceder.&lt;/p&gt;

&lt;p&gt;También quiero destacar que tu archivo se debe llamar Dockerfile, si le llamas DockerFile, u otro nombre te mandará error, este es un error frecuente también, recuerda Dockerfile.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
