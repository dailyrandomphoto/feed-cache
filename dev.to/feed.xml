<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Useful Websites Every Web developer Should Know About.</title>
      <author>Cess</author>
      <pubDate>Sat, 23 Oct 2021 22:37:21 +0000</pubDate>
      <link>https://dev.to/cesscode/useful-websites-every-web-developer-should-know-about-3n4n</link>
      <guid>https://dev.to/cesscode/useful-websites-every-web-developer-should-know-about-3n4n</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article, I will write about websites that will help you improve your productivity and manage some of the challenges we face in web development.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/redbull-happy-smile-l4FGnDqTrkewTIuRy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;br&gt;
*&lt;em&gt;Animista *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-HYjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632349342155/-EOlhbw7C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-HYjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632349342155/-EOlhbw7C.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animista&lt;/strong&gt; is a CSS animation library and a place where you can play with a collection of pre-made CSS animations, tweak them and you will be able to copy and paste the code into your website.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Animista website [animista.net]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Ray&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEr3cmIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350178684/WfhfRXfAZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEr3cmIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350178684/WfhfRXfAZ.png" alt="frame_generic_light (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ray's website&lt;/strong&gt; helps you turn your codes into beautiful images.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdOClMkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350267122/JTdkDEw3M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdOClMkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350267122/JTdkDEw3M.png" alt="raycast-untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Ray website [ray.so]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the ray website is &lt;strong&gt;Carbon&lt;/strong&gt;, it also helps in sharing beautiful images of your source code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to carbon website [carbon.now.sh]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;BGjar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYv7nVii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350675534/fr1_UBPvD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYv7nVii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350675534/fr1_UBPvD.png" alt="frame_generic_light (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BGjar&lt;/strong&gt; is a free SVG background generator for websites, blogs, and apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to BGjar website [&lt;a href="https://bgjar.com"&gt;https://bgjar.com&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Neumorphism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bELGyt1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351047960/5F8Y8da27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bELGyt1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351047960/5F8Y8da27.png" alt="frame_generic_light (4).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Neumorphism&lt;/strong&gt; is a CSS code generator that will help you with colors, gradients, and shadows to your design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Neumorphism website [neumorphism.io]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;CSS Button Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5n8jfyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351798700/Qc4dzNiIy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5n8jfyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351798700/Qc4dzNiIy.png" alt="frame_generic_light (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS Button Generator&lt;/strong&gt; is a free online tool that helps you to create beautiful CSS button styles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to CSS Button Generator website [css3buttongenerator.com]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;DevSamples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTYT8jQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632352751692/Fsfw2cHzL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTYT8jQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632352751692/Fsfw2cHzL.png" alt="frame_generic_light (6).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevSamples&lt;/strong&gt; helps developers of all types find easy-to-use code samples for common use cases. It's a list of code samples for you to copy and paste into your work projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to DevSamples website [&lt;a href="http://www.devsamples.com"&gt;www.devsamples.com&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;ReadMe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjrcI9xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353295859/7Lvg2hP0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjrcI9xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353295859/7Lvg2hP0j.png" alt="frame_generic_light (7).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readme.so&lt;/strong&gt; is the easiest way to create a README file. This simple editor allows you to add and customize all the sections you need for your project's readme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Readme website [readme.so]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the above website is &lt;strong&gt;Readme Gen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to readme gen website [&lt;a href="https://readme-gen.vercel.app/app"&gt;https://readme-gen.vercel.app/app&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Coolors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxQD5cNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632354941779/LWkCBoAgI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxQD5cNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632354941779/LWkCBoAgI.png" alt="frame_generic_light (9).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website will help you with color selections when designing your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to colors website [coolors.co]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Remove Background From Image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P00lDw_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353719691/qZVvVVDnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P00lDw_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353719691/qZVvVVDnu.png" alt="frame_generic_light (8).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website helps you remove backgrounds from images in 5 seconds with zero clicks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Remove background from Image website [remove.bg]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
Poet.so&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7q5IJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632355577427/D5kuE0mar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7q5IJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632355577427/D5kuE0mar.png" alt="frame_generic_light (10).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website will help you create beautiful images of your Twitter posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link [poet.so]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;br&gt;
&lt;strong&gt;Meta Tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFyFwzYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632439504797/iPlIVFBFu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFyFwzYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632439504797/iPlIVFBFu.png" alt="frame_generic_light (11).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meta Tag is a tool used for debugging and generating meta tags for any website. It allows you to edit and experiment with your content, then previews how your webpage will look on Google, Facebook, Twitter, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to metatag website [metatags.io]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;br&gt;
&lt;strong&gt;Browser frame&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOAbtdgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440673077/l7jNEZHR5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOAbtdgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440673077/l7jNEZHR5.png" alt="frame_chrome_mac_dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browser Frame allows you to wrap screenshots in browser frames. Supports multiple browsers, operating systems, and themes.&lt;/p&gt;

&lt;p&gt;Before Browser frame:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWizF3CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440706101/Ci2jlW5pI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWizF3CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440706101/Ci2jlW5pI.png" alt="screenbud-c4e26130-9db0-491b-a2af-93c5a9c50d69.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After browser Frame:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxVhHnbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440748569/dY6ezldwX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxVhHnbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440748569/dY6ezldwX.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to browser frame website [browserframe.com]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the browser frame website is &lt;strong&gt;Screely&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to  Screely website [screely.com]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;br&gt;
&lt;strong&gt;DevDocs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjOQfI7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633045578615/7ArybYO7B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjOQfI7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633045578615/7ArybYO7B.png" alt="frame_chrome_mac_dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevDocs&lt;/strong&gt; is free and Open-source. It contains documentation for almost every technology used in web development. You can download documentation of any of your favorite technology for offline reading. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Devdocs website [devdocs.io]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;14.&lt;br&gt;
&lt;strong&gt;Undesign&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-qtaGw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633046418288/rGVGgEN_n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-qtaGw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633046418288/rGVGgEN_n.png" alt="frame_chrome_mac_dark (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;undesign&lt;/strong&gt; is a collection of free resources for developers and designers. it contains code snippets, colors, gradients, templates, icons, animations, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to undesign website [undesign.learn.uno]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;15.&lt;br&gt;
&lt;strong&gt;The Frontend Checklist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHcEVBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632523736982/wzLGHvTtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHcEVBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632523736982/wzLGHvTtz.png" alt="frame_chrome_mac_dark (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The frontend checklist website&lt;/strong&gt; tells you the best frontend practices you should use for building a website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Frontend checklist website [frontendchecklist.io]&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The above-mentioned websites will make your life easier as a web developer. If you have any questions or there are any other websites that help you a lot more than this, Post about it in the comment section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/snl-saturday-night-live-season-44-f9RzoxHizH72k15FKS"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The css chrome dev tool you didnt know of</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Sat, 23 Oct 2021 20:39:17 +0000</pubDate>
      <link>https://dev.to/harsvnc/the-css-chrome-dev-tool-you-didnt-know-of-3155</link>
      <guid>https://dev.to/harsvnc/the-css-chrome-dev-tool-you-didnt-know-of-3155</guid>
      <description>&lt;p&gt;Did you know that chrome dev tools has a css overview panel to identify flaws inside your css?&lt;/p&gt;

&lt;p&gt;You can find it when you open your dev-tools in chrome (F12) and than &lt;strong&gt;More options&lt;/strong&gt;()   &lt;strong&gt;More&lt;/strong&gt;   &amp;gt; &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;CSS Overview&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cg_G3vAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh7959u4l7lhfwv1q9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cg_G3vAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh7959u4l7lhfwv1q9h.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can get an high level overview of you page's css&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apsx8__f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09ts5o5pgnlx7l9f91ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apsx8__f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09ts5o5pgnlx7l9f91ge.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;colors&lt;/strong&gt; section you can see all the colors you used and it even indicates bad contrasts in your css.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TK-LC4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e89sj0jhjgnjsh75pkjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TK-LC4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e89sj0jhjgnjsh75pkjt.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned something just as i did =)&lt;/p&gt;

&lt;p&gt;✅ If you liked this post, you may like my  🏠 &lt;a href="https://www.harun-sevinc.com"&gt;blog&lt;/a&gt; or even want to connect 💬 on &lt;a href="https://twitter.com/harsvnc"&gt;twitter&lt;/a&gt; 📢 for more information about building web applications or saas development or 💻 software development in general.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Java Performance - Chapter 1</title>
      <author>Yousef Zook</author>
      <pubDate>Sat, 23 Oct 2021 20:37:37 +0000</pubDate>
      <link>https://dev.to/yousef_zook/java-performance-chapter-1-1ocn</link>
      <guid>https://dev.to/yousef_zook/java-performance-chapter-1-1ocn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;In the previous article, we demonstrated that we are going to discuss the great book &lt;strong&gt;Java Performance 2&lt;/strong&gt;&lt;sup&gt;&lt;strong&gt;nd&lt;/strong&gt;&lt;/sup&gt; &lt;strong&gt;Edition&lt;/strong&gt; by Scott Oaks.&lt;br&gt;
In this article we are goind to summarize the first book chapter, &lt;em&gt;Chapter 1: Introduction&lt;/em&gt;.&lt;br&gt;
Please note that many senteces have been quoted from the book itself.&lt;br&gt;
While you are reading this article, please consider that you are reading a summarized version of the chapter and chapter bold points only are included.&lt;/p&gt;

&lt;p&gt;Great, let's start the first chapter...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" alt="Intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#for-who"&gt;
  &lt;/a&gt;
  For who?
&lt;/h1&gt;

&lt;p&gt;This book is designed for performance engineers and developers who are looking to understand how various aspects of the JVM and the Java APIs impact performance.&lt;br&gt;
If it is late Sunday night, your site is going live Monday morning, and you’re looking for a quick fix for performance issues, this is not the book for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This is a book about the art and science of Java performance.&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#java-platforms"&gt;
  &lt;/a&gt;
  Java Platforms
&lt;/h1&gt;

&lt;p&gt;The book has covered the performance of &lt;em&gt;Oracle Hotspot JVM&lt;/em&gt; and &lt;em&gt;Java Developement Kit&lt;/em&gt; &lt;code&gt;JDK&lt;/code&gt; version 8 and 11, This is also known as Java, Standard Edition (SE). &lt;br&gt;
These versions of the JDK were selected because they carry long-term support (LTS) from Oracle. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#jvm-tuning-flags"&gt;
  &lt;/a&gt;
  JVM tuning flags
&lt;/h3&gt;

&lt;p&gt;JVM flags are curical parameters that you can pass to the java virtual machine to enhance the performance of your application.&lt;br&gt;
With a few exceptions, the JVM accepts two kinds of flags: boolean flags, and flags that require a parameter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Boolean flags&lt;/strong&gt; use this syntax: &lt;code&gt;-XX:+FlagName&lt;/code&gt; enables the flag, and &lt;code&gt;-XX:-FlagName&lt;/code&gt; disables the flag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Paramterized Flags&lt;/strong&gt; that require a parameter use this syntax: &lt;code&gt;-XX:FlagName=something&lt;/code&gt;, meaning to set the value of &lt;code&gt;FlagName&lt;/code&gt; to &lt;code&gt;something&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Jkg02I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jchpxqc171ej83y2hph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Jkg02I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jchpxqc171ej83y2hph.png" alt="Tuning Flags"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;from jrebel.com&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#hardware-platforms"&gt;
  &lt;/a&gt;
  Hardware Platforms
&lt;/h1&gt;

&lt;p&gt;From a performance perspective, the important thing about a machine is its number of cores. Let’s take a basic four-core machine: each core can (for the most part) pro‐ cess independently of the others, so a machine with four cores can achieve four times the throughput of a machine with a single core. (This depends on other factors about the software, of course.)&lt;br&gt;
However adding more threads to this machine not necessirly increase throuput or make the program finishes quicker, will see more examples in the following chapters.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#software-containers"&gt;
  &lt;/a&gt;
  Software Containers
&lt;/h3&gt;

&lt;p&gt;The biggest change in Java deployments in recent years is that they are now fre‐ quently deployed within a software container. That change is not limited to Java, of course; it’s an industry trend hastened by the move to cloud computing.&lt;br&gt;
Two containers are important here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Machine: which sets up a com‐ pletely isolated copy of the operating system on a subset of the hardware on which the virtual machine is running. From Java’s perspective (and the perspective of other applications), that virtual machine is indistinguishable from a regular machine with &lt;code&gt;x cores&lt;/code&gt; and &lt;code&gt;n GB&lt;/code&gt; of memory.&lt;/li&gt;
&lt;li&gt;Docker Containers: A Java process running inside a Docker container doesn’t necessarily know it is in such a container. The Docker container is just a process (potentially with resource constraints) within a running OS, the way Java handles that differs between early versions of Java 8 (up until update 192) and later version of Java 8 (and all versions of Java 11).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#the-complete-performance-story"&gt;
  &lt;/a&gt;
  The Complete Performance Story
&lt;/h1&gt;

&lt;p&gt;This book is focused on how to best use the JVM and Java platform APIs so that programs run faster, but many outside influences affect performance. &lt;br&gt;
Here are some notes for these outsides...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1write-better-algorithms"&gt;
  &lt;/a&gt;
  1.Write Better Algorithms:
&lt;/h3&gt;

&lt;p&gt;Ultimately, the performance of an application is based on how well it is written. If the program loops through all elements in an array, the JVM will optimize the way it per‐ forms bounds checking of the array so that the loop runs faster, and it may unroll the loop operations to provide an additional speedup. But if the purpose of the loop is to find a specific item, no optimization in the world is going to make the array-based code as fast as a different version that uses a hash map.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2write-less-code"&gt;
  &lt;/a&gt;
  2.Write Less Code
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A small well-written program will run faster than a large well-written program.   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So even if your code should be neat, extensible and easy to read, you should also consider the performance while writing your code.&lt;br&gt;
A subset of the team may argue that they are adding a small piece of code which will not affect the perfromance, then another part calims the same, and after some repition you will find that the progress may be affected by 10%.&lt;br&gt;
Over time, as the small regressions creep in, it will be harder and harder to fix them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3oh-go-ahead-prematurely-optimize"&gt;
  &lt;/a&gt;
  3.Oh, Go Ahead, Prematurely Optimize
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;premature optimization&lt;/em&gt;: A term often used by developers to claim that the performance of their code doesn’t matter, and if it does matter, we won’t know that until the code is run.&lt;br&gt;
&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are going to change the code to get better performance but this will lead to complicating the code and make it hard to fix in the future, then it's better to not do this enhancement till the profiling is done and points that this enhancement is mandatory.&lt;/li&gt;
&lt;li&gt;However, if you have 2 choices and they are both straighforward and easy to make, and 1 of them will enhance the performance, then do it. 
Let's take the following example:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I am here, and the value of X is "&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcX&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" and Y is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcY&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This code do string concatination and calls some functions &lt;code&gt;calcX()&lt;/code&gt; and &lt;code&gt;calcY()&lt;/code&gt;, when the log level is &lt;code&gt;FINE&lt;/code&gt;. However this level of logging often are not used and it will not be printed, in this case it is better to check if it is loggable first to save the time of string concatination and the functions calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"I am here, and the value of X is {} and Y is {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;calcX&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;calcY&lt;/span&gt;&lt;span class="o"&gt;()});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This avoids the string concatenation altogether (the message format isn’t necessarily more efficient, but it is cleaner), and there are no method calls or allocation of the object array unless logging has been enabled&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4look-elsewhere-the-database-is-always-the-bottleneck"&gt;
  &lt;/a&gt;
  4.Look Elsewhere: The Database Is Always the Bottleneck
&lt;/h3&gt;

&lt;p&gt;If you are developing standalone Java applications that use no external resources, the performance of that application is (mostly) all that matters. Once an external resource (a database, for example) is added, the performance of both programs is important. And in a distributed environment—say with a Java REST server, a load balancer, a database, and a backend enterprise information system—the performance of the Java server may be the least of the performance issues.&lt;br&gt;
If the database is the bottleneck, tuning the Java application accessing the database won’t help overall performance at all. In fact, it might be counterproductive. &lt;strong&gt;As a general rule&lt;/strong&gt;, &lt;code&gt;when load is increased into a system that is overburdened, performance of that system gets worse.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5optimize-for-the-common-case"&gt;
  &lt;/a&gt;
  5.Optimize for the Common Case
&lt;/h3&gt;

&lt;p&gt;we should focus on the common use case scenarios. This principle manifests itself in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimize code by profiling it and focusing on the operations in the profile taking the most time. &lt;/li&gt;
&lt;li&gt;Apply &lt;a href="https://en.wikipedia.org/wiki/Occam's_razor"&gt;Occam’s razor&lt;/a&gt; to diagnosing performance problems. The simplest explana‐ tion for a performance issue is the most conceivable cause: a performance bug in new code is more likely than a configuration issue on a machine, which in turn is more likely than a bug in the JVM or operating system.&lt;/li&gt;
&lt;li&gt;Write simple algorithms for the most common operations in an application&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#runner-see-you-in-chapter-1-"&gt;
  &lt;/a&gt;
  🏃 See you in chapter 1 ...
&lt;/h4&gt;




&lt;h1&gt;
  &lt;a href="#monkeytake-a-tip"&gt;
  &lt;/a&gt;
  🐒take a tip
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Pareto principle: 80% of consequences come from 20% of causes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARfChr3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://streetfins.com/wp-content/uploads/2021/03/7c-Pareto-Principle-1150x647-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARfChr3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://streetfins.com/wp-content/uploads/2021/03/7c-Pareto-Principle-1150x647-1.png" alt="Rule"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>books</category>
      <category>java</category>
      <category>performance</category>
    </item>
    <item>
      <title>To all the devs with crazy ideas . . .</title>
      <author>Saurabh Rai</author>
      <pubDate>Sat, 23 Oct 2021 20:04:12 +0000</pubDate>
      <link>https://dev.to/srbhr/to-all-the-devs-with-crazy-ideas--2nen</link>
      <guid>https://dev.to/srbhr/to-all-the-devs-with-crazy-ideas--2nen</guid>
      <description>&lt;p&gt;&lt;strong&gt;Git Commit Show #season03 on 27th &amp;amp; 28th November, 2021&lt;/strong&gt;. To all the developers with crazy ideas, amazing breakthroughs! Git Commit Show is inviting you guys to showcase your breakthrough project ideas on web, robotics, automation, ml, etc. Giving a platform for those crazy ideas, that can impact a wider audience. Last two seasons we had some amazing projects home cleaner robot, 3D mouse and what not! &lt;br&gt;
So this is the &lt;a href="http://push.gitcommit.show/"&gt;link&lt;/a&gt; to fill the form, the whole team at Git Commit Show would like to help you with your idea! Let's have you there! And meanwhile for any further discussions join our &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;discord&lt;/a&gt;.&lt;br&gt;
See you there! 👋&lt;br&gt;
Our Website &lt;a href="https://gitcommit.show/"&gt;gitcommit.show&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>hacktoberfest</category>
      <category>speaking</category>
    </item>
    <item>
      <title>My entry for Replit's Game Jam - Vulcanist</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Sat, 23 Oct 2021 20:02:24 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/my-entry-for-replits-game-jam-vulcanist-2p3l</link>
      <guid>https://dev.to/leviathanprogramming/my-entry-for-replits-game-jam-vulcanist-2p3l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vulcanist"&gt;
  &lt;/a&gt;
  Vulcanist
&lt;/h1&gt;

&lt;p&gt;Vulcanist is my official Kajam Entry for replit's &lt;a href="https://replit.com/site/kajam"&gt;Kajam 2021&lt;/a&gt; competition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://replit.com/talk/share/Vulcanist/147347"&gt;https://replit.com/talk/share/Vulcanist/147347&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy playing and also help me find any bugs that exist in there.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>gamedev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Laravel 8 Import Export Excel &amp; CSV File Example</title>
      <author>Suresh Ramani</author>
      <pubDate>Sat, 23 Oct 2021 19:23:31 +0000</pubDate>
      <link>https://dev.to/sureshramani/laravel-8-import-export-excel-csv-file-1oee</link>
      <guid>https://dev.to/sureshramani/laravel-8-import-export-excel-csv-file-1oee</guid>
      <description>&lt;p&gt;Laravel Excel is designed at being a Laravel-flavoured PhpSpreadsheet. It is a manageable and elegant wrapper around PhpSpreadsheet to simplify exports and imports. PhpSpreadsheet is a php based library that enables you to read and write different spreadsheet file formats, like Excel and LibreOffice Calc. Laravel Excel has the following features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Easily export collections to Excel.&lt;/li&gt;
&lt;li&gt;Export queries with automatic chunking for better performance.&lt;/li&gt;
&lt;li&gt;Queue exports for better performance.&lt;/li&gt;
&lt;li&gt;Easily export Blade views to Excel.&lt;/li&gt;
&lt;li&gt;Easily import to collections.&lt;/li&gt;
&lt;li&gt;Read the Excel file in chunks.&lt;/li&gt;
&lt;li&gt;Handle the import inserts in batches.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to create easy import and export, excel file functionality, this laravel maatwebsite/excel tutorial is best for you.&lt;/p&gt;

&lt;p&gt;At the end of this tutorial, you will be able to download or import excel &amp;amp; CSV files directly from the database in laravel application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;PHP: ^7.2|^8.0&lt;/li&gt;
&lt;li&gt;Laravel: ^5.8&lt;/li&gt;
&lt;li&gt;PhpSpreadsheet: ^1.15&lt;/li&gt;
&lt;li&gt;PHP extension php_zip enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_xml enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_gd2 enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_iconv enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_simplexml enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_xmlreader enabled&lt;/li&gt;
&lt;li&gt;PHP extension php_zlib enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-laravel-project"&gt;
  &lt;/a&gt;
  Step 1: Install Laravel Project
&lt;/h3&gt;

&lt;p&gt;First, open Terminal and run the following command to create a fresh laravel project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project --prefer-dist laravel/laravel laravel-excel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, if you have installed the Laravel Installer as a global composer dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;laravel new laravel-excel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-configure-database-details"&gt;
  &lt;/a&gt;
  Step 2: Configure Database Details
&lt;/h3&gt;

&lt;p&gt;After, Installation Go to the project root directory, open .env file, and set database detail as follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=mysql 
DB_HOST=127.0.0.1 
DB_PORT=3306 
DB_DATABASE=&amp;lt;DATABASE NAME&amp;gt;
DB_USERNAME=&amp;lt;DATABASE USERNAME&amp;gt;
DB_PASSWORD=&amp;lt;DATABASE PASSWORD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-install-maatwebsiteexcel-package"&gt;
  &lt;/a&gt;
  Step 3: Install maatwebsite/excel package
&lt;/h3&gt;

&lt;p&gt;You can install Laravel Excel via composer. You've to run this command for the installation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require maatwebsite/excel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#register-plugins-service-in-providers-amp-aliases"&gt;
  &lt;/a&gt;
  Register Plugin’s Service in Providers &amp;amp; Aliases
&lt;/h4&gt;

&lt;p&gt;You can have the following code placed inside the config/app.php file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'providers' =&amp;gt; [
  Maatwebsite\Excel\ExcelServiceProvider::class,
 ],  

'aliases' =&amp;gt; [ 
  'Excel' =&amp;gt; Maatwebsite\Excel\Facades\Excel::class,
], 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execute the vendor, publish the command, and publish the config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --provider="Maatwebsite\Excel\ExcelServiceProvider" --tag=config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-generate-fake-data-and-migrate-table"&gt;
  &lt;/a&gt;
  Step 4: Generate Fake Data and Migrate Table
&lt;/h3&gt;

&lt;p&gt;In the First step, We migrate the user table. After migration run successfully We moved to the second step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Second Step, We generate the fake record. Here We use tinker to generate the fake records. You can use a different method as of your requirement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan tinker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After Opening the tinker, you need to run this command to generate the fake records in our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;User::factory()-&amp;gt;count(100)-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-create-a-routes"&gt;
  &lt;/a&gt;
  Step 5: Create a Routes
&lt;/h3&gt;

&lt;p&gt;In this step, We will add a route to handle requests for import and export files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use App\Http\Controllers\UserController;

Route::get('/file-import',[UserController::class,'importView'])-&amp;gt;name('import-view');
Route::post('/import',[UserController::class,'import'])-&amp;gt;name('import');
Route::get('/export-users',[UserController::class,'exportUsers'])-&amp;gt;name('export-users');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-create-import-class"&gt;
  &lt;/a&gt;
  Step 6: Create Import Class
&lt;/h3&gt;

&lt;p&gt;Maatwebsite provides a way to build an import class and we have to use it in the controller. So it would be a great way to create a new Import class. So you have to run the following command and change the following code on that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:import ImportUser --model=User
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app/Imports/ImportUser.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Imports;

use App\Models\User;
use Maatwebsite\Excel\Concerns\ToModel;

class ImportUser implements ToModel
{
    /**
    * @param array $row
    *
    * @return \Illuminate\Database\Eloquent\Model|null
    */
    public function model(array $row)
    {
        return new User([
            'name' =&amp;gt; $row[0],
            'email' =&amp;gt; $row[1],
            'password' =&amp;gt; bcrypt($row[2]),
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see map CSV or excel column value to our Eloquent Model. You need to format that CSV or excel column as you map in your import class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-create-export-class"&gt;
  &lt;/a&gt;
  Step 7: Create Export Class
&lt;/h3&gt;

&lt;p&gt;Maatwebsite provides a way to build an export class and we have to use it in the controller. So it would be a great way to create a new export class. So you have to run the following command and change the following code on that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:export ExportUser --model=User
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app/Exports/ExportUser.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Exports;

use App\Models\User;
use Maatwebsite\Excel\Concerns\FromCollection;

class ExportUser implements FromCollection
{
    /**
    * @return \Illuminate\Support\Collection
    */
    public function collection()
    {
        return User::select('name','email')-&amp;gt;get();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-8-create-controller"&gt;
  &lt;/a&gt;
  Step 8: Create Controller
&lt;/h3&gt;

&lt;p&gt;Next, We have to create a controller to display a form to upload CSV or excel file records. Let's Create a controller named UserController using the command given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller UserController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the above command executed, it will create a controller file UserController.php in app/Http/Controllers directory. Open UserController.php file and put this code into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\ImportUser;
use App\Exports\ExportUser;
use App\Models\User;

class UserController extends Controller
{
    public function importView(Request $request){
        return view('importFile');
    }

    public function import(Request $request){
        Excel::import(new ImportUser, $request-&amp;gt;file('file')-&amp;gt;store('files'));
        return redirect()-&amp;gt;back();
    }

    public function exportUsers(Request $request){
        return Excel::download(new ExportUser, 'users.xlsx');
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-9-create-blade-view-files"&gt;
  &lt;/a&gt;
  Step 9: Create Blade / View Files
&lt;/h3&gt;

&lt;p&gt;We have reached the last step. In general, here we need to formulate the view for handling importing and exporting through the frontend. Create a resources/views/importFile.blade.php file to set up the view. Place the following code inside the blade view file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;title&amp;gt;Laravel 8 Import Export Excel &amp;amp; CSV File - TechvBlogs&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="container mt-5 text-center"&amp;gt;
        &amp;lt;h2 class="mb-4"&amp;gt;
            Laravel 8 Import Export Excel &amp;amp; CSV File - &amp;lt;a href="https://techvblogs.com/blog/laravel-import-export-excel-csv-file?ref=repo" target="_blank"&amp;gt;TechvBlogs&amp;lt;/a&amp;gt;
        &amp;lt;/h2&amp;gt;
        &amp;lt;form action="{{ route('import') }}" method="POST" enctype="multipart/form-data"&amp;gt;
            @csrf
            &amp;lt;div class="form-group mb-4"&amp;gt;
                &amp;lt;div class="custom-file text-left"&amp;gt;
                    &amp;lt;input type="file" name="file" class="custom-file-input" id="customFile"&amp;gt;
                    &amp;lt;label class="custom-file-label" for="customFile"&amp;gt;Choose file&amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button class="btn btn-primary"&amp;gt;Import Users&amp;lt;/button&amp;gt;
            &amp;lt;a class="btn btn-success" href="{{ route('export-users') }}"&amp;gt;Export Users&amp;lt;/a&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-laravel-application"&gt;
  &lt;/a&gt;
  Run Laravel Application
&lt;/h3&gt;

&lt;p&gt;Lastly, we have to run the Laravel application, for this, we have to go to the command prompt, and write the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After executing this command, Open &lt;a href="http://localhost:8000/file-import"&gt;http://localhost:8000/file-import&lt;/a&gt; in your browser.&lt;/p&gt;

&lt;p&gt;Thank you for reading this blog.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Shell Scripting Basics: Beginner's Guide</title>
      <author>Abdullah Adeel (AB)</author>
      <pubDate>Sat, 23 Oct 2021 19:14:40 +0000</pubDate>
      <link>https://dev.to/abdadeel/shell-scripting-basics-beginners-guide-1h2b</link>
      <guid>https://dev.to/abdadeel/shell-scripting-basics-beginners-guide-1h2b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-shell-scripting"&gt;
  &lt;/a&gt;
  What is shell scripting? 😕
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif" alt="confused_person"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shell scripting is the code that is designed to run in the &lt;code&gt;Unix&lt;/code&gt; shell. This means that you can write these generic pieces of instructions and execute them directly from the shell on &lt;code&gt;Linux&lt;/code&gt; and &lt;code&gt;MacOS&lt;/code&gt;. If you want similar functionality on your Windows machine, you can use the &lt;code&gt;shell/bash&lt;/code&gt; alternative for windows like  &lt;a href="https://git-scm.com/"&gt;Gitbash&lt;/a&gt;. In this article, together we will have a brief look at the syntax and basics of &lt;strong&gt;shell scripting&lt;/strong&gt; and some of the examples to see some practices examples of shell scripting.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.sh&lt;/code&gt; is the extension for shell files. So if you want to follow along, you can create a file in your desired directory i-e &lt;code&gt;myscript.sh&lt;/code&gt;, and open the file in your favorite text editor or IDE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: ⚡&lt;/strong&gt;&lt;br&gt;
Before you start executing the bash files, you might need to give the file proper permissions to execute the shell script. For that, open the terminal and navigate to the same directory as your script file and execute the following command there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./myscript.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtwPDJBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635001682266/WqLxBZspT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtwPDJBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635001682266/WqLxBZspT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-the-raw-hello-world-endraw-"&gt;
  &lt;/a&gt;
  Log the &lt;code&gt;Hello World 🙂&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let's start with the good old &lt;code&gt;hello world&lt;/code&gt; example. To log anything to the console, use &lt;code&gt;echo&lt;/code&gt; followed by whatever you want to log.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"hello world 🙂"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;adding &lt;code&gt;#! /bin/bash&lt;/code&gt; represents the path to the bash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;Comments in shell script start with &lt;code&gt;#&lt;/code&gt; and are completely ignored when executing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is a comment&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt;

&lt;span class="c"&gt;# This is also a comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variables in shell scripting are declared as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"AB"&lt;/span&gt;

&lt;span class="c"&gt;# log the name&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$NAME&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Output:&lt;/span&gt;
&lt;span class="c"&gt;# AB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables in shell scripting: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;should contain letters, numbers, and underscores&lt;/li&gt;
&lt;li&gt;are UPPERCASE by convention&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reading-user-input"&gt;
  &lt;/a&gt;
  Reading User Input
&lt;/h2&gt;

&lt;p&gt;Below is how you can take and input from the user and store the value in a variable &lt;code&gt;NAME&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Enter your name: "&lt;/span&gt; NAME
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$NAME&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conditionals-raw-if-endraw-statement"&gt;
  &lt;/a&gt;
  Conditionals - &lt;code&gt;if&lt;/code&gt; statement
&lt;/h1&gt;

&lt;p&gt;The structure and syntax to define the &lt;code&gt;if&lt;/code&gt; statements in the shell are given below. It starts with &lt;code&gt;if&lt;/code&gt; followed by the condition in square brackets &lt;code&gt;[]&lt;/code&gt; and action block and ends with the reverse of &lt;code&gt;if&lt;/code&gt; which is &lt;code&gt;fi&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Enter your name: "&lt;/span&gt; NAME

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"AB"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello AB"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Output&lt;/span&gt;
&lt;span class="c"&gt;# Enter your name: AB&lt;/span&gt;
&lt;span class="c"&gt;# Hello AB&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For else-if statements do,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Enter your name: "&lt;/span&gt; NAME
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"AB"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello AB"&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello John"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Output&lt;/span&gt;
&lt;span class="c"&gt;# Enter your name: John&lt;/span&gt;
&lt;span class="c"&gt;# Hello John&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#comparision-operators"&gt;
  &lt;/a&gt;
  Comparision Operators
&lt;/h1&gt;

&lt;p&gt;Comparison operators are used for comparing two values i-e if they are equal, not equal, one is greater, greater or equal, etc.&lt;/p&gt;

&lt;p&gt;In shell scripts, below is the syntax for how you can compare different values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;NUMBER_1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;7
&lt;span class="nv"&gt;NUMBER_2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-lt&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt; is less than &lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt; is greater than &lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt; is equal to &lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Output&lt;/span&gt;
&lt;span class="c"&gt;# 7 is less than 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the table of other available options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-eq&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -eq &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; is equal to &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-ne&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -ne &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; is not equal to &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-gt&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -gt &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; is greater than &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-ge&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -ge &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; greater than or equal to &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-lt&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -eq &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; is less than &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-le&lt;/code&gt; : &lt;code&gt;num1&lt;/code&gt; -eq &lt;code&gt;num2&lt;/code&gt; -&amp;gt; &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;num1&lt;/code&gt; is less than or equal to &lt;code&gt;num2&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h1&gt;

&lt;p&gt;Logical operators combine two conditions for the final result. The common logical operators are &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;OR&lt;/code&gt;. Let's see how we can implement them in a shell script.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;AND&lt;/code&gt; is &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and for &lt;code&gt;OR&lt;/code&gt; is &lt;code&gt;||&lt;/code&gt;. Here is an example of using them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NUMBER_1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;7
&lt;span class="nv"&gt;NUMBER_2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-lt&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt; is less than &lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_1&lt;/span&gt;&lt;span class="s2"&gt; is greater than &lt;/span&gt;&lt;span class="nv"&gt;$NUMBER_2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# Output:&lt;/span&gt;
&lt;span class="c"&gt;# 7 is less than 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#case-statement"&gt;
  &lt;/a&gt;
  Case Statement
&lt;/h1&gt;

&lt;p&gt;Case statements might be a little too much for a newbie to remember because of their weird syntax.  After each condition there is an extra &lt;code&gt;)&lt;/code&gt;  and if none of the cases is true, its default to &lt;code&gt;*&lt;/code&gt; block which behaves similar to &lt;code&gt;default&lt;/code&gt; like in &lt;code&gt;Javascript&lt;/code&gt;.  Have a look at the example below for a deeper understanding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Are you 18 or older: y/N: "&lt;/span&gt; ANSWER
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ANSWER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;yY] &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;yY][eE][sS]&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"You can drive!"&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;nN] &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;nN][oO]&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"You cannot drive"&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Invalid input"&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;

: &lt;span class="s1"&gt;'
Output:

Are you 18 or older: y/N: yes
You can drive!

Are you 18 or older: y/N: y
You can drive!

Are you 18 or older: y/N: no
You cannot drive
'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#simple-raw-for-endraw-loops"&gt;
  &lt;/a&gt;
  Simple &lt;code&gt;for&lt;/code&gt; loops
&lt;/h1&gt;

&lt;p&gt;Below is the simple syntax and structure of defining a for loop in a bash script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;1..5&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Number: &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

: &lt;span class="s1"&gt;'
Output: 

Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loop over a list of given names&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Declare an array&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nv"&gt;NAMES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"AB"&lt;/span&gt;, &lt;span class="s2"&gt;"Kevin"&lt;/span&gt;, &lt;span class="s2"&gt;"Lia"&lt;/span&gt;, &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;NAME &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NAMES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

: &lt;span class="s1"&gt;'
Output:

Hello AB,
Hello Kevin,
Hello Lia,
Hello John
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-while-endraw-loops"&gt;
  &lt;/a&gt;
  &lt;code&gt;while&lt;/code&gt; loops
&lt;/h1&gt;

&lt;p&gt;The syntax for &lt;code&gt;while&lt;/code&gt; loops is similar to &lt;code&gt;for&lt;/code&gt; loops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;COUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$COUNT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-le&lt;/span&gt; 5 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Number: &lt;/span&gt;&lt;span class="nv"&gt;$COUNT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;COUNT++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

: &lt;span class="s1"&gt;'
Output:

Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-functions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Functions&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Functions work the same as they do in programming languages except in shell, they don't directly accept any argument but use placeholders in the function body as you will see in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sayHello&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
sayHello

: &lt;span class="s1"&gt;'
Output:
Hello World
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function with arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# function to add tow numbers&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;add &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;SUM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$SUM&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# call the function&lt;/span&gt;
add 7 3
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Sum: &lt;/span&gt;&lt;span class="nv"&gt;$SUM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

: &lt;span class="s1"&gt;'
Output:
Sum: 10
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#general-commands"&gt;
  &lt;/a&gt;
  General Commands
&lt;/h1&gt;

&lt;p&gt;All the UNIX commands can be executed through the shell script like creating folders and files, reading and writing files, etc. &lt;/p&gt;

&lt;p&gt;Below are some resources where you can learn about the basic commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners"&gt;Learn basic commands for Linux, a free and open-source operating system that you can make changes to and redistribute.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://hackr.io/blog/basic-linux-commands"&gt;Basic Linux Commands&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is the example of first creating a folder &lt;code&gt;myfolder&lt;/code&gt;, creating a &lt;code&gt;.txt&lt;/code&gt; file in that folder, and writing to that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;mkdir &lt;/span&gt;myfolder
&lt;span class="nb"&gt;touch&lt;/span&gt; &lt;span class="s2"&gt;"myfolder/myfile.txt"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"myfolder/myfile.txt"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#where-can-i-use-shell-scripting"&gt;
  &lt;/a&gt;
  Where can I use shell scripting
&lt;/h1&gt;

&lt;p&gt;You can use shell scripting to run any sequence of commands either on the server or on your local machine. Below are some real-world examples of shell scripting.&lt;/p&gt;

&lt;p&gt;Here is a shell script that is hypothetically running on a server inside a docker container and waiting for the database to be available before starting the server. As soon as the database is up and available for connection, the server starts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;

postgres_ready&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
python &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;END&lt;/span&gt;&lt;span class="sh"&gt;
import sys
import psycopg2
try:
    psycopg2.connect(
        dbname="&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;",
        user="&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;",
        password="&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;",
        host="&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;",
        port="&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)
&lt;/span&gt;&lt;span class="no"&gt;END
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;until &lt;/span&gt;postgres_ready&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2 &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Waiting for PostgreSQL to become available...'&lt;/span&gt;
  &lt;span class="nb"&gt;sleep &lt;/span&gt;1
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2 &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'PostgreSQL is available'&lt;/span&gt;

: &lt;span class="s1"&gt;'
# src 👇
https://bit.ly/3nlrS2q
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another great example would be automating the GitHub commits and pushes (basic).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;

git add &lt;span class="nt"&gt;--all&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
git push origin master

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here &lt;code&gt;$1&lt;/code&gt; represent the extra flag/info you can pass to the script when executing the &lt;code&gt;.sh&lt;/code&gt; file from the shell.&lt;br&gt;
The execution will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./myfile.sh &lt;span class="s2"&gt;"your commit message here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's end it here and if you want to learn more advance shell scripting, please comment for part II. I would love to hear your ideas on what you want to implement through shell scripting and make your terminal life easier 😁.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

</description>
      <category>bash</category>
      <category>docker</category>
      <category>beginners</category>
      <category>scripting</category>
    </item>
    <item>
      <title>Divtober Day 23: Loud</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sat, 23 Oct 2021 19:00:51 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-23-loud-44id</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-23-loud-44id</guid>
      <description>&lt;p&gt;The word of the day for divtober is "loud." This required a demo with that extra push over the cliff, so I brought it up "one louder" to 11 with this volume knob:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/BadpNdN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It was developed using an input range as a base, so it is a bit interactive (but results may vary).&lt;/p&gt;

&lt;p&gt;Firefox doesn't support pseudo-elements in inputs, so it will miss the "volume" label. It could be fixed by avoiding the pseudo-elements and making the input larger and using radial-gradients instead of box-shadows.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Lambda insights to the rescue</title>
      <author>Paweł Piwosz</author>
      <pubDate>Sat, 23 Oct 2021 18:57:35 +0000</pubDate>
      <link>https://dev.to/pawelpiwosz/lambda-insights-to-the-rescue-30io</link>
      <guid>https://dev.to/pawelpiwosz/lambda-insights-to-the-rescue-30io</guid>
      <description>&lt;p&gt;In previous episode we enabled tracing and we were able to see more information about our platform, requests, etc. Still, it is not much, but it is better than it was! Let's continue then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lambda-insights"&gt;
  &lt;/a&gt;
  Lambda Insights
&lt;/h2&gt;

&lt;p&gt;The best description of Lambda insights will be the enhanced monitoring. According to &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights.html"&gt;AWS documentation&lt;/a&gt;, Insights is a service which collects, aggregates and summarized the system-level metrics, like CPU usage, memory usage, disk and network, and also collects diagnostic information like Lambda workers shutdown and cold start.&lt;/p&gt;

&lt;p&gt;Ok, looks like this helps to understand better what is going on in the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-lambda-insights"&gt;
  &lt;/a&gt;
  Enable Lambda Insights
&lt;/h2&gt;

&lt;p&gt;Similarly like you did it for X-Ray, navigate to your Lambda, &lt;code&gt;Configuration&lt;/code&gt; and finally to &lt;code&gt;Monitoring and operations tools&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XE4WEHL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/enablelambdainsights.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XE4WEHL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/enablelambdainsights.jpg" alt="Enable Lambda Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS tries to update your roles and policies accordingly. When completed, you need to do some requests and &lt;strong&gt;wait some time&lt;/strong&gt; before you start using Insights.&lt;/p&gt;

&lt;p&gt;Also, what is most important, you should see a new layer added to your Lambda&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaGSKNvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdalayer.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaGSKNvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdalayer.jpg" alt="Lambda layer for Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to see Insights you can go there through CloudWatch console, or directly from your Lambda (from Monitoring tab).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTuQlpS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/viewlambdainsights.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTuQlpS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/viewlambdainsights.jpg" alt="View Lambda Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BYGmsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/waiting.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BYGmsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/waiting.jpg" alt="Waiting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Finally, after many, many minutes (in my case when I prepared this example, it was more than 30 minutes), Insights are generated.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lambda-insights-console"&gt;
  &lt;/a&gt;
  Lambda Insights console
&lt;/h2&gt;

&lt;p&gt;AWS gives the possibility to check mulitple functions at once, but I will go with single function view, as I have only one function enabled at the moment.&lt;/p&gt;

&lt;p&gt;Metrics are available and are clear and readable. Invocations, errors, duration,  and all infrastructure related metrics have their own panel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqPPs68I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqPPs68I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights1.jpg" alt="Lambda Insights view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below these panels, AWS placed two tabs. One is for application logs, you saw it already, so I will not focus on it. The second (well, in fact, the first tab) is about Invocations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIsjwcaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIsjwcaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights2.jpg" alt="Lambda Insights view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This view gives us a lot of information. Yes, part of it is available in logs, but here we have it without parsing. Duration, consumed memory, CPU time, network usage, error information. &lt;/p&gt;

&lt;p&gt;Additionally, we can see Init duration, which indicates cold start. Nice.&lt;/p&gt;

&lt;p&gt;Let's explore it further. On top right corner of this part of the view we have two controls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYWh3twq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYWh3twq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights3.jpg" alt="Lambda Insights view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both will take you to &lt;code&gt;Logs Insights&lt;/code&gt; with two different queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-logs"&gt;
  &lt;/a&gt;
  Performance logs
&lt;/h3&gt;

&lt;p&gt;This link will go to Logs with query shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fields @timestamp, @message, @logStream
| filter function_name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lambdaDemo-lambdaFunction-qnettGrKoNgh"&lt;/span&gt;
| &lt;span class="nb"&gt;sort&lt;/span&gt; @timestamp desc
| limit 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have well formatted metrics about the whole invocation. Not just the Report generated (like in logs), but full information. For example, quite interesting data, like cold start, agent version, timestamp in UNIX format, traceID and many more.&lt;/p&gt;

&lt;p&gt;Example of returned record is shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-J-wshd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-J-wshd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights4.jpg" alt="Returned data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-logs"&gt;
  &lt;/a&gt;
  Application logs
&lt;/h3&gt;

&lt;p&gt;Executes another query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fields @timestamp,@message,@logStream
| &lt;span class="nb"&gt;sort&lt;/span&gt; @timestamp desc
| limit 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also shows a lot of interesting information. First, visualisation (histogram) is available. Very nice.&lt;/p&gt;

&lt;p&gt;Second, we have all logs collected in one place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hem16C0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hem16C0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.pawelpiwosz.net/assets/lambdaObservability/lambdainsights5.jpg" alt="Returned data"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Of course we can add it to SAM template. Here are the needed changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Simple Lambda&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;lambdaFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;simplefunction.handler&lt;/span&gt;
      &lt;span class="na"&gt;CodeUri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;lambdafunction/&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CloudWatchLambdaInsightsExecutionRolePolicy&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python3.8&lt;/span&gt;
      &lt;span class="na"&gt;AutoPublishAlias&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;live&lt;/span&gt;
      &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Simple demo function&lt;/span&gt;
      &lt;span class="na"&gt;MemorySize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;
      &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
      &lt;span class="na"&gt;Tracing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Active&lt;/span&gt;
      &lt;span class="na"&gt;Layers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;simpleApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Api&lt;/span&gt;
          &lt;span class="na"&gt;TracingEnabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
            &lt;span class="na"&gt;Method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added the policy &lt;code&gt;CloudWatchLambdaInsightsExecutionRolePolicy&lt;/code&gt; and layer &lt;code&gt;LambdaInsightsExtension:14&lt;/code&gt; to the Lambda definition. What is important here, I used the syntax &lt;code&gt;${AWS::Region}&lt;/code&gt; in order to attach the layer from the region in which my Lambda is executed. This is why I used &lt;code&gt;!Sub&lt;/code&gt; to "translate" this information during the actual execution of the template.&lt;/p&gt;




&lt;p&gt;Ok, all of this is very nice. Again, we know more about our system. But still, something is missing, something big. In next episode we start to add more detailed tracing / loging / metrics to the Lambda.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://pixabay.com/users/422737-422737/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=462957"&gt;Hebi B.&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=462957"&gt;Pixabay&lt;/a&gt;&lt;br&gt;
Waiting image by &lt;a href="https://pixabay.com/users/shlomaster-2095460/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=731165"&gt;Shlomaster&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=731165"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>observability</category>
      <category>devops</category>
    </item>
    <item>
      <title>Unit testing time driven methods</title>
      <author>David Da Silva</author>
      <pubDate>Sat, 23 Oct 2021 18:49:44 +0000</pubDate>
      <link>https://dev.to/daviddasilva/unit-testing-time-driven-methods-n77</link>
      <guid>https://dev.to/daviddasilva/unit-testing-time-driven-methods-n77</guid>
      <description>&lt;p&gt;Hi! This is my first post on a series of quick tips to improve your tests in Java, I hope you will learn something today 👍&lt;/p&gt;

&lt;p&gt;Have you ever used &lt;code&gt;Instant.now()&lt;/code&gt;, &lt;code&gt;LocalDateTime.now()&lt;/code&gt; or &lt;code&gt;ZonedDateTime.now()&lt;/code&gt; in your code, only to find it difficult to test later on ?&lt;/p&gt;

&lt;p&gt;Let's take an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hohoho&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;isItChristmasYet&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalDate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;Month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DECEMBER&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDayOfMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Yes! Merry Christmas! 🎅"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDayOfMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Almost there! 😁"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not yet 😔"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How would you test this method?&lt;/p&gt;

&lt;p&gt;You could pass the LocalDate as an argument of the method but that would change the semantic of the method.&lt;/p&gt;

&lt;p&gt;You could also use some libs like Powermockito to mock the static method of &lt;code&gt;LocalDate.now()&lt;/code&gt; but this would also affect other tests.&lt;/p&gt;

&lt;p&gt;Here is a tip : use a &lt;strong&gt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html"&gt;java.time.Clock&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Every time you need to use a *.now() method, pass a Clock object as a parameter.&lt;br&gt;
You can set the clock to be the system default in you constructor, and add a setter method to override it during tests.&lt;/p&gt;

&lt;p&gt;Let's apply this in our example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hohoho&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Hohoho&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Set a normal value for the clock, here UTC&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Clock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;systemUTC&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// For testing purpose : override the clock&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;isItChristmasYet&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalDate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- use the clock&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;Month&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DECEMBER&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDayOfMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Yes! Merry Christmas! 🎅"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDayOfMonth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Almost there! 😁"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not yet 😔"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to avoid the setter, you could inject the Clock through dependency injection.&lt;br&gt;
I personally don't mind having a setter in this case.&lt;/p&gt;

&lt;p&gt;Now let's look how this will help our tests :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HohohoTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Hohoho&lt;/span&gt; &lt;span class="n"&gt;underTest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Hohoho&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="nd"&gt;@DisplayName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Should respond 'Not Yet' in February"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;februaryTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Fix the clock to my birthday&lt;/span&gt;
        &lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Clock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2022-02-21T12:00:00Z"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;ZoneId&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTC"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isItChristmasYet&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not yet 😔"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@DisplayName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Should respond 'Almost there' the 24th of December"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;december24thTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Fix the clock to christmas eve&lt;/span&gt;
        &lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Clock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2022-12-24T12:00:00Z"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;ZoneId&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTC"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isItChristmasYet&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Almost there! 😁"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@DisplayName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Should respond 'Yes' on Christmas"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;christmasTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Fix the clock to christmas day&lt;/span&gt;
        &lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Clock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fixed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2022-12-25T12:00:00Z"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;ZoneId&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTC"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setClock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;underTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isItChristmasYet&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Yes! Merry Christmas! 🎅"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By fixing the Clock object to a specific instant in time, every method now() that use the clock will return exactly the same result.&lt;/p&gt;

&lt;p&gt;This means your test will always be consistent, using the same values every time, no mater &lt;em&gt;when&lt;/em&gt; they are run : be it on new year's eve, 28th of February or while switching from winter time to summer time!&lt;/p&gt;

&lt;p&gt;Do you have another approach for testing time sensitive methods? Let me know in the comments! 👍&lt;/p&gt;

</description>
      <category>java</category>
      <category>testing</category>
    </item>
    <item>
      <title>A brief introduction to WebGL</title>
      <author>Santosh Arron</author>
      <pubDate>Sat, 23 Oct 2021 17:44:03 +0000</pubDate>
      <link>https://dev.to/santosharron/a-brief-introduction-to-webgl-20md</link>
      <guid>https://dev.to/santosharron/a-brief-introduction-to-webgl-20md</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is WebGL?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebGL is a cross-platform, royalty-free API used to create 3D graphics in a Web browser. Based on &lt;a href="https://www.khronos.org/opengles"&gt;OpenGL ES 2.0&lt;/a&gt;, WebGL uses the OpenGL shading language, &lt;a href="https://www.khronos.org/opengl/wiki/Core_Language_(GLSL)"&gt;GLSL&lt;/a&gt;, and offers the familiarity of the standard OpenGL API.&lt;br&gt;
&lt;strong&gt;The main features of WebGL are the following:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-platform and Cross-browser&lt;/li&gt;
&lt;li&gt;GPU 3D acceleration&lt;/li&gt;
&lt;li&gt;Native API with GLSL support&lt;/li&gt;
&lt;li&gt;Works inside a canvas&lt;/li&gt;
&lt;li&gt;Integration with DOM interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How it works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to render some graphics, we will need to learn what is the &lt;a href="https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview"&gt;Rendering Pipeline&lt;/a&gt; and how it works.&lt;/p&gt;

&lt;p&gt;The Rendering Pipeline is the sequence of stages that WebGL takes when rendering 3D graphics. This rendering model fits properly since the GPU is a highly parallel processor: pipeline stages run simultaneously in the GPU processing units.&lt;/p&gt;

&lt;p&gt;In the following image we can see the stages of the rendering pipeline:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRRAmW-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8xuva95vay7rx3jiupo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRRAmW-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8xuva95vay7rx3jiupo.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output from a stage is used as the input for the next stage, and so on. The &lt;a href="https://www.khronos.org/opengl/wiki/Vertex_Shader"&gt;Vertex Shader&lt;/a&gt; and &lt;a href="https://www.khronos.org/opengl/wiki/Fragment_Shader"&gt;Fragment Shader&lt;/a&gt; stages are programmable, so we can program our own.&lt;/p&gt;

&lt;p&gt;The Vertex Shader handles the vertex processing of our graphic. At this stage we must provide a stream with the vertices. Then, the Vertex Shader receives a single vertex from this stream and generates a single vertex to the output vertex stream. There must be a 1:1 mapping from input vertices to output vertices. This is the stage in which we can apply vertex transformations, such as rotations, translations or scaling.&lt;/p&gt;

&lt;p&gt;The Fragment Shader process a &lt;a href="https://www.khronos.org/opengl/wiki/Fragment"&gt;Fragment&lt;/a&gt; generated by the &lt;a href="https://www.khronos.org/opengl/wiki/Rasterization"&gt;Rasterization&lt;/a&gt; stage into a set of colors and a single depth value. This is the stage after a primitive is rasterized (at the rasterization stage the geometric primitives are converted to fragments related to the pixel area). For each sample of the pixels covered by a &lt;a href="https://www.khronos.org/opengl/wiki/Primitive"&gt;primitive&lt;/a&gt;, a “fragment” is generated. Each fragment has a &lt;a href="https://www.khronos.org/opengl/wiki/Window_Space"&gt;Window Space position&lt;/a&gt;, a few other values, and it contains all of the interpolated per-vertex output values from the last &lt;a href="https://www.khronos.org/opengl/wiki/Vertex_Processing"&gt;Vertex Processing&lt;/a&gt; stage. This is the stage in which we can apply colors or textures to the graphics.&lt;/p&gt;

&lt;p&gt;In the next section we will see how to render a simple triangle as example. To do it, we will program a Vertex Shader and a Fragmend shader.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rendering a triangle in WebGL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we said before, we will need to define a canvas to render our graphics inside it, so we will make a simple HTML template like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;WebGL Sample Triangle&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Martín Lamas"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"WebGL Triangle"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// We will put our WebGL code here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes of the canvas define the viewport size, but there is a consideration that we have to take into account: WebGL expects all the vertices that we want to become visible, to be in Normalized Device Coordinates after each vertex shader run. That is, the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; coordinates of each vertex should be between &lt;code&gt;-1.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; values; coordinates outside this range will not be visible. These Normalized Device Coordinates and the size of the viewport are then given to the rasterizer to transform them to 2D coordinates/pixels on your screen, so we must worry about taking into account the viewport size and its aspect ratio.&lt;/p&gt;

&lt;p&gt;We will use a square canvas to make this example simpler. We will need to define three vertices to make the triangle, as we can see in the following image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksmGSBu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3em8poza4xwc58lwvd8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksmGSBu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3em8poza4xwc58lwvd8c.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the script section we will declare the vertex array first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Float32Array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
   &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// First vertex&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Second vertex&lt;/span&gt;
   &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;  &lt;span class="c1"&gt;// Third vertex&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We must skip the &lt;code&gt;z&lt;/code&gt; coordinate since we are drawing in 2D.&lt;/p&gt;

&lt;p&gt;Then, we will initialize the context and we will define the vertex shader first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webgl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Vertex shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vertexShader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    attribute vec4 position;
    void main() {
        gl_Position = position;
    }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we learned before, the vertex shader runs for each input vertex and generates a new one as output. In the example, we use the &lt;code&gt;position&lt;/code&gt; attribute as input (attributes are inputs to a Vertex Shader that get their data from buffers, more on this later) and we place the output in the &lt;code&gt;gl_Position&lt;/code&gt; variable (the built-in &lt;code&gt;gl_Position&lt;/code&gt; variable holds the output vertex in the Vertex Shader). No conversions are made so the output vertex will be the same as the input one. We will see how to initialize the buffer with the input vertex array in a moment.&lt;/p&gt;

&lt;p&gt;Now we will define the Fragment Shader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Fragment shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fragmentShader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    precision mediump float;
    uniform vec4 color;
    void main() {
        gl_FragColor = color;
    }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using a uniform that holds the color of the fragment (uniforms are values that stay the same for all vertices of a single draw call). Just as the Vertex Shader, the built-in &lt;code&gt;gl_FragColor&lt;/code&gt; variable holds the output color of the shader. As we can see no color conversions are made.&lt;br&gt;
At last, we will compile these shaders so that the GPU can run them and we will define a WebGL program attaching these shaders to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Compile vertex shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERTEX_SHADER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shaderSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertexShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Compile fragment shader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FRAGMENT_SHADER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shaderSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fragmentShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create and initialize the WebGL program&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProgram&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have defined and compiled these shaders we must provide the input data of our triangle.&lt;/p&gt;

&lt;p&gt;First, we will create a array buffer and fill it with the vertex coordinates. The Vertex Shader we defined before will use this buffer as input through the &lt;code&gt;position&lt;/code&gt; attribute. To make this, we create the buffer with the &lt;code&gt;gl.createBuffer&lt;/code&gt; method and bind it as a &lt;code&gt;gl.ARRAY_BUFFER&lt;/code&gt; type. Then, we fill this buffer with data using the &lt;code&gt;gl.bufferData&lt;/code&gt; method. Finally, we point the position attribute to the buffer and bind it calling the &lt;code&gt;gl.vertexAttribPointer&lt;/code&gt; and &lt;code&gt;gl.enableVertexAttribArray&lt;/code&gt; methods, respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Shader attribute variable for position&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create the GPU array buffer with the vertices&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARRAY_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATIC_DRAW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Target&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;// Chunk size (send the values 3 by 3)&lt;/span&gt;
  &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Type&lt;/span&gt;
  &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// Normalize&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;// Stride&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;         &lt;span class="c1"&gt;// Offset&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will define the color using the &lt;code&gt;gl.uniform4f&lt;/code&gt; method and pass it to the Fragment Shader through the color uniform:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Shader uniform variable for color (read-only)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUniformLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set color        R  G  B  A&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniform4f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the color coordinates must be defined using Normalized Device Coordinates, so we compute each coordinate using the following formula: &lt;code&gt;RGBA normalized coordinate = RGBA coordinate / 255&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we have all we need to render the triangle. Then, we clear the canvas background and we render the triangle by calling the &lt;code&gt;gl.drawArrays&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set the clear color&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Clear canvas&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Render&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TRIANGLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Mode&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// Start&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;             &lt;span class="c1"&gt;// Count&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;gl.drawArrays&lt;/code&gt; method uses the bounded array buffer as input data. In this example the three vertices are taken from the buffer and the &lt;code&gt;gl.TRIANGLES&lt;/code&gt; mode is selected to render the shape. In WebGL the following shapes are available:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cujzJVTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbcygeulr0oix7h6lv1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cujzJVTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbcygeulr0oix7h6lv1.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we could render a wireframe of our triangle simply replacing the mode with the &lt;code&gt;gl.LINE_LOOP&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Finally, we can see the triangle opening the template in the web browser. Something like the following :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Tj4yTrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngibfd3qvgbpqx3org8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Tj4yTrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngibfd3qvgbpqx3org8u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summing up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently, the WebGL API is available on most web browsers. We can use it to render accelerated 2D and 3D graphics in our web applications. Some high-level libraries are built on top of WebGL API making the programmer’s job easier. However, it is interesting to learn the low-level WebGL API and how the rendering pipeline works.&lt;/p&gt;

&lt;p&gt;In future posts we will see how to render 3D shapes and how to apply some transformations like rotation or translation. Also, we will see how to apply textures and we will take a look at some interesting libraries that work on top of WebGL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/EpicProgrammer?sub_confirmation=1"&gt;EPIC PROGRAMMER&lt;/a&gt; IS BUILDING WEBGL PROJECTS SOME THEM ARE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vSNXMMjxYVo"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pHIRj0jlNTQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Twitter:-  &lt;a href="https://twitter.com/santosh_arron"&gt;Santosh Arron&lt;/a&gt;&lt;br&gt;
Instagram:- &lt;a href="https://www.instagram.com/santosh_arron/"&gt;Santosh Arron&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basics of CI/CD</title>
      <author>Semyon Kirekov</author>
      <pubDate>Sat, 23 Oct 2021 17:32:44 +0000</pubDate>
      <link>https://dev.to/kirekov/basics-of-cicd-5e16</link>
      <guid>https://dev.to/kirekov/basics-of-cicd-5e16</guid>
      <description>&lt;p&gt;The primary goal of any software project is to earn money through the automation of the business process. The quicker you can release the new versions to the customers, the better it's for your company. But how to implement the release process in a &lt;em&gt;fast&lt;/em&gt; way? Well, you could do it manually. For example, it's possible to connect to the remote server via SSH. Then you can clone the repository with the new code, build it, and run it with the command line. Though it does work it's not an efficient approach. So, today we're discussing the automation of a product releases and development process itself.&lt;/p&gt;

&lt;p&gt;CI and CI are two abbreviations that stand for &lt;em&gt;Continuous Integration&lt;/em&gt; and &lt;em&gt;Continuous Delivery&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ci"&gt;
  &lt;/a&gt;
  CI
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Continuous Integration&lt;/em&gt; describes the process of the changes flows to the repository. Let's take a look at a simple schema that gives an example of team development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPkONuTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3w33ztmcb17bfh79azm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPkONuTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3w33ztmcb17bfh79azm.png" alt="git repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A group of people can work simultaneously. But all changes are transferred to the &lt;code&gt;master&lt;/code&gt; branch eventually. Anyway, even such a simple model raises a couple of questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How can we know that the code that goes to the &lt;code&gt;master&lt;/code&gt; branch compiles?&lt;/li&gt;
&lt;li&gt;We want the developers to write tests for the code. How can we verify that the &lt;a href="https://en.wikipedia.org/wiki/Code_coverage"&gt;test coverage&lt;/a&gt; is not decreasing?&lt;/li&gt;
&lt;li&gt;All team members should format the code with the specified code style. How can we check the possible violations?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, all of the described requirements may be validated manually. Though this approach is quite disorganized. More than that, it becomes harder to keep it going when the team grows.&lt;/p&gt;

&lt;p&gt;CI was brought to automate the stated proposals.&lt;/p&gt;

&lt;p&gt;Let's start with the first point. How do we check that the upcoming changes aren't going to ruin the build? To do this we need another block in our schema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZfl-YM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cmgttm0krfyr2wn9vno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZfl-YM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cmgttm0krfyr2wn9vno.png" alt="basic ci"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The majority of CI processes can be described according to this algorithm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On each Pull Request opening (and pushing new changes as well) Git server sends a notification to the CI server.&lt;/li&gt;
&lt;li&gt;CI server clones the repository, checkouts to the source branch (for instance, &lt;code&gt;bugfix/wrong-sorting&lt;/code&gt;), and merges with the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Then the build script is being launched. For example, &lt;code&gt;./gradlew build&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the command returns 0 code, then the build is successful. Otherwise, it's treated as the failed one.&lt;/li&gt;
&lt;li&gt;CI server sends the request with the build result to the Git server.&lt;/li&gt;
&lt;li&gt;If the build is successful, then the Pull Request is allowed to merge. Otherwise, the merge is blocked.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process guarantees that any code that goes to the &lt;code&gt;master&lt;/code&gt; branch does not break the further builds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-coverage-checking"&gt;
  &lt;/a&gt;
  Test Coverage Checking
&lt;/h3&gt;

&lt;p&gt;Let's make the task more complicated. Suppose that we want to set the minimum test coverage bar. So, at any moment, the coverage of the &lt;code&gt;master&lt;/code&gt; branch should not be lower than &lt;code&gt;50%&lt;/code&gt;. The &lt;a href="https://www.eclemma.org/jacoco/"&gt;Jacoco plugin&lt;/a&gt; can solve the problem easily. You just need to configure it in the way to fail the build, if the test coverage value is less than the accepted one.&lt;/p&gt;

&lt;p&gt;The approach implementation is piece of cake. But it has a caveat. It can only work if the plugin was configured since the project started.&lt;/p&gt;

&lt;p&gt;Imagine that you're working on a product that is five years old. Since its first commit, there has been no test coverage checking. Developers added tests randomly without any discipline. But one day you decided to increase the number of tests. You tune the Jacoco plugin so the minimum bar equals &lt;code&gt;60%&lt;/code&gt;. After a while, a developer opens a new Pull Request. Then they suddenly realise that the test coverage is only &lt;code&gt;30%&lt;/code&gt;. So, to close the task successfully it's obligatory to cover at least &lt;code&gt;30%&lt;/code&gt; of the product code. As you may guess, it's almost an unresolvable issue for the five years old project.&lt;/p&gt;

&lt;p&gt;What if we validated only the &lt;em&gt;upcoming&lt;/em&gt; code changes but not the whole product? If a developer changed 200 lines within the Pull Request, they would need to cover at least 120 of them (if the test coverage bar equals &lt;code&gt;60%&lt;/code&gt;). But it wouldn't be necessary to walk through the tons of modules that aren't part of the task. This can solve the issue. How can we apply it to the project? Thankfully, there is a solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aT_IRHyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibh48dxofu5avedhd2p0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aT_IRHyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibh48dxofu5avedhd2p0.png" alt="Git Repo Sonar CI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jacoco report is sent to the test coverage server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://sonarcloud.io/"&gt;SonarCloud&lt;/a&gt; is one the most popular solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The server keeps statistics of the previous calculations. It's a beneficial point to calculate the upcoming changes' test coverage as well as the whole code. Then the analysis result is sent to the CI server that sends it back to the Git server.&lt;/p&gt;

&lt;p&gt;This workflow provides an opportunity to apply the culture of mandatory testing at any product evolution stage. Because only the new changes are being validated.&lt;/p&gt;

&lt;p&gt;Speaking of code style there aren't many differences. You can try &lt;a href="https://checkstyle.sourceforge.io/"&gt;Checkstyle&lt;/a&gt; plugin. It automatically fails a build that violates any of the stated requirements. For example, the code might have an unused import. Besides you can look at cloud services that run the code analysis and shows the result as a bunch of charts (SonarCloud can also do that).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cd"&gt;
  &lt;/a&gt;
  CD
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Continuous Delivery&lt;/em&gt; describes the process of the new product version automatic deployment.&lt;/p&gt;

&lt;p&gt;Let's put some changes to the CI schema. That's how the CI/CD process may look like in a real project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZrN_Vr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7njggr92jww8omer77bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZrN_Vr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7njggr92jww8omer77bw.png" alt="CI/CD process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly, the CI server is named as &lt;em&gt;CI/CD server&lt;/em&gt; now. The thing is that frequently both CI and CD jobs are executed with the same task manager. So, we're looking at this approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Though that's not the rule. For example, one can delegate CI jobs to &lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI&lt;/a&gt; and CD jobs to &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The right part of the schema represents CI. We have discussed it earlier. The left one pictures CD. The CD job builds the project (or reuses the artefacts generated during the CI stage) and deploys it to the end server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's worth mentioning that &lt;em&gt;server&lt;/em&gt; is an abstraction in our case. For example, the deployment might proceed to the &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; cluster. So, there are might be several servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the deployment stage completion e-mails are usually sent. For instance, the CD server can notify subscribers of the succeeded or failed deployment.&lt;/p&gt;

&lt;p&gt;Anyway, there is an important question. When should we run CD jobs? Triggers may vary.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deploy after each Pull Request merge.&lt;/li&gt;
&lt;li&gt;Deploy according to the schedule.&lt;/li&gt;
&lt;li&gt;Deploy after each Pull Request merges to the particular branch.&lt;/li&gt;
&lt;li&gt;Combined option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first point sets the process so the CI and CD jobs always run sequentially. This approach is rather popular within open-source development. &lt;a href="https://github.com/semantic-release/semantic-release"&gt;Semantic Release&lt;/a&gt; library helps to tune the project to integrate this process transparently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's important to be aware of the &lt;code&gt;deploy&lt;/code&gt; definition. It doesn't necessarily mean that something is being launched somewhere. If you develop a library, then there is no &lt;em&gt;launching&lt;/em&gt;. Instead, the deployment process means the new library version releasing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second point is independent of the CI process. Because the project is deployed according to some predefined schedule. For example, every day at &lt;code&gt;01:00&lt;/code&gt; am.&lt;/p&gt;

&lt;p&gt;The third point is similar to the first one. Though there are differences. Suppose that we have two primary branches in our repository. The &lt;code&gt;develop&lt;/code&gt; branch and the &lt;code&gt;master&lt;/code&gt; one. The &lt;code&gt;develop&lt;/code&gt; contains the most relevant changes. While the second one has only releases. If we need to deploy the &lt;code&gt;master&lt;/code&gt; branch only, there is no need to trigger the CD job on merge to the &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last point is the aggregate of all the approaches. For instance, the &lt;code&gt;develop&lt;/code&gt; branch might be deployed according to the schedule to the dev environment. And the &lt;code&gt;master&lt;/code&gt; is deployed to the production on each Pull Request merge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;p&gt;The market offers dozens of solutions to automate CI/CD processes. Let's take a look at some of them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;. One of the most demanded CI/CD tools in the world. It has become so popular because of its open-source policy. So, you don't have to pay anything. Jenkins allows imperatively describing build pipelines with &lt;a href="https://groovy-lang.org/"&gt;Groovy&lt;/a&gt;. On the one hand, it provides more flexibility. But on the other hand, it requires a greater competence level.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. The CI/CD tool is included in GitHub and GitHub Enterprise. Unlike Jenkins, GitHub Actions provides declarative builds with YAML configuration. Besides, the solution has lots of integrations with different Quality Assurances Systems (for example, SonarCube). So, the build can be described just in a few lines of text.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI&lt;/a&gt;. It is quite similar to GitHub Actions. Nevertheless, it has special features. For instance, GitLab CI can point to the particular tests that failed the build.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.gitlab.com/ee/ci/"&gt;Travis CI&lt;/a&gt;. The cloud CI/CD service. It offers many capabilities that require no complex configuration. For example, encryption of data that ought to be hidden in the public repository. Besides, the nice bonus is the Travis CI can be applied to GitHub, GitLab, and BitBucket open-source public projects absolutely for free.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all I wanted to say about the basics of CI/CD processes. If you have any questions or suggestions, please leave your comments down below. Thanks for reading!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
