<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to easily get started with ThreeJS - Part 1</title>
      <author>Davide Mandelli</author>
      <pubDate>Tue, 23 Nov 2021 13:21:58 +0000</pubDate>
      <link>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-1-go7</link>
      <guid>https://dev.to/th3wall/how-to-easily-get-started-with-threejs-part-1-go7</guid>
      <description>&lt;p&gt;Hi guys, hope you are fine! :)&lt;/p&gt;

&lt;p&gt;Recently I came across a teaser video on &lt;a href="https://twitter.com/Th3Wall25"&gt;my Twitter&lt;/a&gt; feed: it was a &lt;a class="mentioned-user" href="https://dev.to/prismicio"&gt;@prismicio&lt;/a&gt;
 post of an interview with the great &lt;a class="mentioned-user" href="https://dev.to/brunosimon"&gt;@brunosimon&lt;/a&gt;
. During the interview he explains how to use ThreeJS to enhance a website with 3D elements.&lt;/p&gt;

&lt;p&gt;Here's a reference to that tweet:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55yvoMNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1454078456707403776/pu/img/PQU65J2ISrl6NOLv.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmOkC4qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1013754225917034497/wNvNaz0p_normal.jpg" alt="Prismic profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Prismic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prismicio"&gt;@prismicio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In this tutorial, &lt;a href="https://twitter.com/bruno_simon"&gt;@bruno_simon&lt;/a&gt; explains how to use &lt;a href="https://twitter.com/hashtag/threejs"&gt;#threejs&lt;/a&gt; to enhance a website with 3D elements.&lt;br&gt;&lt;br&gt;He takes a standard header section from basic to &lt;a href="https://twitter.com/hashtag/dynamic"&gt;#dynamic&lt;/a&gt; by swapping out the image for a cool shape with a matcap.&lt;br&gt;&lt;br&gt;Watch the full interview 👉 &lt;a href="https://t.co/Gbf2e4r2wC"&gt;youtu.be/tVr89249gwM&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:32 PM - 29 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1454078632884846600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This interview and the passion with which Bruno explains ThreeJS concepts inspired me A LOT so I've decided to start digging into this new virtual world.&lt;/p&gt;

&lt;p&gt;I'll try to recap and explain in the easiest and clearer way possible.&lt;br&gt;
&lt;em&gt;I promise you that in around 30 lines of code you will create your first working 3D element (recap at the end of the article).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;
&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;The first step is to create a new &lt;em&gt;index.html&lt;/em&gt; file that should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0, maximum-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/styles.css"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My first ThreeJS demo app&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"js/script.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we should add the two external files 'linked' inside our &lt;em&gt;index.html&lt;/em&gt; file: we create the &lt;em&gt;styles.css&lt;/em&gt; and &lt;em&gt;script.js&lt;/em&gt; files and we put them respectively inside &lt;em&gt;css&lt;/em&gt; and &lt;em&gt;js&lt;/em&gt; folders.&lt;/p&gt;

&lt;p&gt;Now it's time to initialize our package manager for the configuration of our project so we launch a&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My default package manager is NPM but you can obviously use Yarn instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#threejs-installation-and-setup"&gt;
  &lt;/a&gt;
  Three.js installation and setup
&lt;/h2&gt;

&lt;p&gt;In order to start playing with Three.js, we should install it. We can do it by opening the terminal and launching:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm install three&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, inside the &lt;em&gt;script.js&lt;/em&gt; we can import Three with the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have imported it, we can start using it.&lt;/p&gt;

&lt;p&gt;The first thing to know is that once Three is installed, we have access to one very specific variable which is 'THREE'. By logging it we can already see that we have access to a lot of things that this library supports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgR-zKwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0qy7vvgv0a8urr7bz37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgR-zKwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0qy7vvgv0a8urr7bz37.png" alt="Screenshot of console.log(THREE)" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-a-scene-a-camera-and-aspect-ratio"&gt;
  &lt;/a&gt;
  How to add a scene, a camera and aspect ratio
&lt;/h2&gt;

&lt;p&gt;We need three things to start with: the first one is a &lt;strong&gt;scene&lt;/strong&gt;, just like a movie set. On the scene you will add &lt;strong&gt;objects&lt;/strong&gt; (that might be characters) and a &lt;strong&gt;camera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First of all we create the empty &lt;strong&gt;scene&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the scene we said that we need to add a &lt;strong&gt;camera&lt;/strong&gt;.&lt;br&gt;
Here it's necessary to know that in Three.js exists various types of camera (have a look &lt;a href="https://threejs.org/docs/index.html?q=camera"&gt;here in the docs&lt;/a&gt; for further info).&lt;br&gt;
The one we will use is the &lt;strong&gt;PerspectiveCamera&lt;/strong&gt;, which mimics the way the human eye sees, it's like a real-life camera: the nearer you are, the bigger you will see.&lt;/p&gt;

&lt;p&gt;To create the camera we need to add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The camera needs some options as parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the first option is the &lt;strong&gt;FOV (Field Of View)&lt;/strong&gt; and is intended as degrees. We might choose an open angle of 180 degrees or a very close angle of 30 degrees, like photo lenses.&lt;br&gt;
As Bruno experience, he recommends to stay in a range that goes from 40 degrees to a maximum of 70 degrees, so we will use an angle of 55 degrees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the second required option is the &lt;strong&gt;aspect ratio&lt;/strong&gt;: since we want to cover the whole background of our page, we will insert the width and the height of our viewport, and in JS we can retrieve these sizes with &lt;em&gt;window.innerWidth&lt;/em&gt; and &lt;em&gt;window.innerHeight&lt;/em&gt;.&lt;br&gt;
TL/DR: The aspect ratio is just the width divided by the height.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things to understand with Three.js is that whatever object we want to include, we have to add it to the scene, and at this stage we can already add our camera by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#add-a-mesh-to-the-scene"&gt;
  &lt;/a&gt;
  Add a mesh to the scene
&lt;/h2&gt;

&lt;p&gt;With this first article (&lt;strong&gt;yes, it will be a small series&lt;/strong&gt; 😉), we will add a cube to the scene.&lt;br&gt;
A cube is an object that we will be able to see, and in Three.js an object that we will be able to see is called &lt;strong&gt;mesh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A mesh is composed of two things: its &lt;strong&gt;geometry&lt;/strong&gt; (the &lt;em&gt;points&lt;/em&gt; that composes a geometry, like the number of vertices of a cube) and a &lt;strong&gt;material&lt;/strong&gt;, that is how the geometry will look when it will be rendered in the scene.&lt;/p&gt;

&lt;p&gt;We need to create first our geometry and since we want a cube, we will use its related class, the "BoxGeometry":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This class automatically knows that it should create the cubes points once it receives its required parameters, which are the &lt;em&gt;width&lt;/em&gt;, the &lt;em&gt;height&lt;/em&gt; and the &lt;em&gt;depth&lt;/em&gt; (&lt;a href="https://threejs.org/docs/index.html#api/en/geometries/BoxGeometry"&gt;reference to the docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now it's time to add the material that our cube will use when it renders. For this first experiment we want our cube to be completely red. So we add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "MeshBasicMaterial" class and all the available mesh and geometry classes are available in the documentation with a lot of examples. As a parameter we are passing in a color.&lt;/p&gt;

&lt;p&gt;The color parameter can be specified in many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as a string ('red');&lt;/li&gt;
&lt;li&gt;as a hexadecimal (#FF0000);&lt;/li&gt;
&lt;li&gt;as hexadecimal in base 16 (0xff0000).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we have our geometry and our material, so we can proceed to mix them in a mesh and add it to the scene:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#rendering-the-scene"&gt;
  &lt;/a&gt;
  Rendering the scene
&lt;/h2&gt;

&lt;p&gt;It's finally time to see our cube!&lt;/p&gt;

&lt;p&gt;We declare a renderer using the most common WebGL renderer, the "WebGLRenderer":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our renderer needs to know a size, and as we said before, we want our scene to take the full viewport width. So we can tell it to the renderer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see our scene, we now need to draw inside a &lt;em&gt;canvas&lt;/em&gt; 🎨.&lt;br&gt;
Looking at our renderer variable we can notice that our canvas is contained inside the &lt;strong&gt;domElement&lt;/strong&gt; property.&lt;br&gt;
If we log it we can see our canvas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOVDVk13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnvg8fpttbcvnvtl4o32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOVDVk13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnvg8fpttbcvnvtl4o32.png" alt="Screenshot of renderer.domElement property" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point we will let ThreeJS create our canvas and append it inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page; we can do it by adding the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspecting our DOM we should now see our &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element added inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a last step for our renderer, we now have to tell it to render the canvas inside the page. It requires the &lt;em&gt;scene&lt;/em&gt; (in which we should have &lt;strong&gt;added&lt;/strong&gt; all the necessary elements) and the &lt;em&gt;camera&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait a minute.&lt;br&gt;
Why can't we see the cube yet?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/hEc4k5pN17GZq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hEc4k5pN17GZq/giphy.gif" alt="John Travolta wondering" width="426" height="213"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;
&lt;h2&gt;
  &lt;a href="#fixing-the-camera-and-rotating-the-cube"&gt;
  &lt;/a&gt;
  Fixing the camera and rotating the cube
&lt;/h2&gt;

&lt;p&gt;The answer of the previous question is related to the &lt;strong&gt;camera position&lt;/strong&gt;.&lt;br&gt;
We still can't see the cube because we are &lt;strong&gt;inside the cube&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You may be wondering now: shouldn't I see everything red around me since the cube is red?&lt;br&gt;
The answer is no: by default we cannot see the "inside" of the geometry. We can see the face, but not its reverse side.&lt;/p&gt;

&lt;p&gt;So, now that we know the above, we should move the camera position &lt;em&gt;outside&lt;/em&gt; of the cube. Moving up where we defined the camera variable, we add the following below that line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to move the camera &lt;em&gt;back&lt;/em&gt;, we need to work on the &lt;em&gt;Z&lt;/em&gt; axis.&lt;br&gt;
Once done, we can finally see our cube:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUBWXSMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqnniduebjln3q5xwocv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUBWXSMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqnniduebjln3q5xwocv.png" alt="First cube screenshot" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We might also move the camera position to the left/right or to top/bottom by editing the position on the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; axis (ie: for our final demo we will move our object a little bit to the right so we can reserve a space on the left for the heading, a paragraph and maybe a CTA).&lt;/p&gt;

&lt;p&gt;Since with these settings our object is flat, it doesn't seems to be a real cube. We can rotate the cube in order to see some angles.&lt;/p&gt;

&lt;p&gt;To do a rotation, we just need to work on our mesh object.&lt;br&gt;
As Bruno says, in order to move it horizontally, we have to think about putting something a spike on the y axis, so under our mesh declaration line we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Smxoj2-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15dhph57vz2y5pgcy2qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Smxoj2-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15dhph57vz2y5pgcy2qo.png" alt="Rotated cube screenshot" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind that the unit of measure is in radiants, not degrees. So math here can be our best friend with some concepts like the &lt;em&gt;PI&lt;/em&gt;, that is half of a circle.&lt;br&gt;
If you think with PI in mind, you can think like "1/8 of a circle" and things like that, just dividing or multiplying the &lt;strong&gt;Math.PI&lt;/strong&gt; value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0"&gt;
  &lt;/a&gt;
   
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;I leave down here the full &lt;em&gt;script.js&lt;/em&gt; code block so you can have a better look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally see our 3D cube on the page and we can play around with its position, its rotation, and its color.&lt;/p&gt;

&lt;p&gt;In the next articles (coming shortly in the next days), we will &lt;strong&gt;animate&lt;/strong&gt; the cube, we will see how we can change its geometry and material and we will also see how to make the canvas &lt;strong&gt;responsive&lt;/strong&gt;.&lt;br&gt;
We will also throw in some smooth animations and some cool little interactions with our object.&lt;/p&gt;

&lt;p&gt;The final result that we will achieve is already visible at this demo link:&lt;br&gt;
👉🏼  &lt;a href="https://th3wall-threejs.netlify.app"&gt;https://th3wall-threejs.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have already learned something and I hope you find this article interesting.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/Th3Wall25"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/Th3Wall"&gt;GitHub&lt;/a&gt; &amp;amp; &lt;a href="https://hashnode.com/@th3wall"&gt;Hashnode&lt;/a&gt;.&lt;br&gt;
Let me know if you liked it!&lt;/p&gt;

&lt;p&gt;Thanks.&lt;br&gt;
Th3Wall&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>threejs</category>
      <category>webgl</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Animated content card with HTML CSS</title>
      <author>Sadee</author>
      <pubDate>Tue, 23 Nov 2021 13:01:38 +0000</pubDate>
      <link>https://dev.to/codewithsadee/animated-content-card-with-html-css-2eme</link>
      <guid>https://dev.to/codewithsadee/animated-content-card-with-html-css-2eme</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fdE02AJaRL8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to create animated content card using only html and css&lt;/p&gt;

&lt;p&gt;In this video, &lt;br&gt;
I will show you how to create responsive animated content card using only html &amp;amp; css,&lt;br&gt;
And you also learn how to pause the animation with a single line of code.&lt;/p&gt;




&lt;p&gt;HI 👋&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel 👇&lt;/p&gt;

&lt;p&gt;📺 My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
🔔 Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
🕐 New videos Every Friday &amp;amp; Tuesday&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;How to use ionicon&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fonts.google.com/specimen/Poppins?query=poppins#standard-styles"&gt;Font - Poppins&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/codewithsadee"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#others-videos"&gt;
  &lt;/a&gt;
  📹 Others Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/lDHspzUov88"&gt;Loopstudios Landing Page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ATRQj60Q3S0"&gt;Clipboard Landing Page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PLasZMtSCguZbYYb7uzDMAC0rg49A8XOsS"&gt;Personal Portfolio Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/OpbbPLPqSDc"&gt;Toggle Button with 3d Effect&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/g9VdvKx8fuM"&gt;Awesome Card Design for Website&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  💙 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Best Way to Build a Free Website for Your Solopreneur Ideas.</title>
      <author>Debuzzify</author>
      <pubDate>Tue, 23 Nov 2021 12:36:43 +0000</pubDate>
      <link>https://dev.to/debuzzify/the-best-way-to-build-a-free-website-for-your-solopreneur-ideas-dej</link>
      <guid>https://dev.to/debuzzify/the-best-way-to-build-a-free-website-for-your-solopreneur-ideas-dej</guid>
      <description>&lt;p&gt;Solopreneurs are independent individual business owners who like the idea of being their own boss and working from home.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://debuzzify.com/how-do-become-a-solopreneur-5fd42b40af58"&gt;Solopreneurs usually have multiple income streams&lt;/a&gt;. A website is almost always associated with each of them. Hence, it’s a good idea to start with a free one to test the water before dumping all your money.&lt;/p&gt;

&lt;p&gt;These individuals often start a new business on a shoestring budget, so finding free resources to assist you in building a website can be beneficial for your solopreneur work.&lt;/p&gt;

&lt;p&gt;Related: &lt;a href="https://debuzzify.com/solopreneur-website-purpose-8d10ea80da6c"&gt;&lt;strong&gt;&lt;em&gt;Self-Employed Entrepreneurs Should Start a Website From Day Zero&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we get started on exactly how to build a free website for your solopreneur ideas, let’s take a look at specific types of websites that you may want to consider building.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solopreneur Idea #1: Business Website&lt;/strong&gt;&lt;br&gt;
If you are an independent business owner looking to promote your goods or services, then a website can be beneficial. A good example is an independent consultant. For example, if you are a financial consultant, then you can have a business website that allows customers to view your services and contact you for further information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solopreneur Idea #2: Personal Branding Site&lt;/strong&gt;&lt;br&gt;
If you are looking to build your brand by creating a name for yourself online, an individual website can be beneficial. You can make a website that allows you to publish work samples, blog posts, YouTube videos, or any other type of content that shows who you are. This will enable people to get an idea of who you are and what kind of work you are doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solopreneur Idea #3: Individual Blog&lt;/strong&gt;&lt;br&gt;
Many people have a personal blog for their solopreneur ideas. This is a perfect way to share your stories, helpful hints, and things you are interested in. The best news is that blogging can help you earn some extra cash every month.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-best-way-to-build-a-free-website-for-your-solopreneur-ideas"&gt;
  &lt;/a&gt;
  What’s the Best Way to Build a Free Website for Your Solopreneur Ideas?
&lt;/h2&gt;

&lt;p&gt;For most self-employed entrepreneurs, the easiest way to build a free website is through Weebly. It is a popular website-building platform that makes it simple to design and host your free website or blog.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No link in this post is an affiliate link. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building a website with Weebly is super simple. You can start with a template and modify it any way you want. Weebly also offers a drag-and-drop website builder so that you can add your text and images to existing templates.&lt;/p&gt;

&lt;p&gt;Within minutes a sleek website for your new solopreneur business is live on the vast internet.&lt;/p&gt;

&lt;p&gt;What makes Weebly more attractive?&lt;/p&gt;

&lt;p&gt;Weebly sites rank well on Google because the platform uses clean code. You don’t have to worry about search engine optimization because Weebly already has you covered… and, guess what? If you do want to change anything with your site’s SEO, you can.&lt;/p&gt;

&lt;p&gt;Weebly also makes it easy to directly track your site’s traffic and get insights into your audience, subscriptions, and sales. Their integrated analytics make it simple to see what’s working and adjust your site if needed.&lt;/p&gt;

&lt;p&gt;In addition, you can capture leads using their email capture forms. You can also use the platform to sell products, create an e-commerce store, accept donations and even provide event registration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-weebly"&gt;
  &lt;/a&gt;
  Getting Started with Weebly
&lt;/h2&gt;

&lt;p&gt;You can create a Weebly site in a few simple steps.&lt;br&gt;
Go to weebly.com and sign up for a new account. It’s free and straightforward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xlx31Eqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2Ac3MWOzM2prLp61FI8di7EQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlx31Eqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2Ac3MWOzM2prLp61FI8di7EQ.png" alt="Weebly is the best way to create a free website for self-employed entrepreneurs (solopreneurs)" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to choose a template and enter some basic information about yourself. Weebly templates are optimized for speed and user experience. You can also pick the category that fits your needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WeStFVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2AYTNj-1I3oMp3_YKdhL01bQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WeStFVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2AYTNj-1I3oMp3_YKdhL01bQ.png" alt="Weebly templates allows solopreneurs create a beautiful website for free." width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also pick your own domain name or use Weebly’s free domain. Domain name costs vary depending on the demand and availability of your chosen name. If you already have one purchased with a different domain registrar you can configure them too.&lt;/p&gt;

&lt;p&gt;A different option is to stick with Weebly's subdomain itself. For most new sites, this is okay unless if you want to build a brand from day zero (which is a good idea on too)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HftXTFTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2ApvCKIwZNfNrSWrHmcY1A4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HftXTFTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/963/1%2ApvCKIwZNfNrSWrHmcY1A4A.png" alt="Self-employed entrepreneurs can purchase domain for their website without leaving Weebly" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you can choose your site’s design and colors to make it look exactly how you want it to.&lt;/p&gt;

&lt;p&gt;Go on and publish Your Weebly Website&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>html</category>
      <category>website</category>
    </item>
    <item>
      <title>Tutorial: Build Serverless functions with C#</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 23 Nov 2021 12:32:28 +0000</pubDate>
      <link>https://dev.to/dashbird/tutorial-build-serverless-functions-with-c-2f33</link>
      <guid>https://dev.to/dashbird/tutorial-build-serverless-functions-with-c-2f33</guid>
      <description>&lt;p&gt;The world of cloud computing has been revolutionized by a solution called serverless computing. It has been an absolute joy for developers to use.&lt;/p&gt;

&lt;p&gt;Before this innovation, developers had to worry about the resources powering their code. Since the launch of serverless computing, the developer's focus on operating-system and hardware architecture is now a thing of the past. It handles all the server management while focusing on what you do well --- writing good quality code.&lt;/p&gt;

&lt;p&gt;This article will explain how to build serverless functions on the primary cloud providers services: Azure and AWS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you are new to serverless computing or need to dig deep into the origins and evolutions of serverless, check out this&lt;/em&gt; &lt;a href="https://dashbird.io/blog/origin-of-serverless/"&gt;&lt;em&gt;article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-c-with-azure-functions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using C# with Azure Functions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Two essential prerequisites need to be met to build serverless Azure Functions applications with C#:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Have an active Microsoft Azure subscription. If you don't have one already, you can &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;create a free account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Get an Azure Storage account. You can create a storage account if you don't have this by signing into &lt;a href="https://portal.azure.com/"&gt;the Azure portal&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a C# developer, you are already familiar with the various tools for building your applications, including Visual Studio Code and Visual Studio IDE. Both tools help create applications with Azure Functions, depending on whichever one you are most comfortable with. Let's dig a little deeper into these two tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code is a lightweight but powerful code editor with different versions available for Windows, Linux, and macOS.&lt;/p&gt;

&lt;p&gt;To build apps for Azure functions, you will need to get Azure Tools for Visual Studio Code which will give you convenient commands to access or create resources directly from the VS Code editor.&lt;/p&gt;

&lt;p&gt;To set up Azure Tools, install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-azureextensionpack"&gt;Azure Extension Pack&lt;/a&gt; by firing up your editor and navigating to the extension marketplace on the left side menu. The extension marketplace interface in VS Code should look like this:&lt;/p&gt;

&lt;p&gt;When you are done with the setup of Azure for VS Code, log in to Azure from the code editor by firing the Command Palette with the commands &lt;strong&gt;CTRL+Shift+P&lt;/strong&gt; and typing "&lt;strong&gt;Azure: Login&lt;/strong&gt;" in the text field that appears. Click the corresponding result that appears, and a code will be generated by the editor with instructions on how to complete the process.&lt;/p&gt;

&lt;p&gt;Another vital extension if you will be developing in C# with VS Code is the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp"&gt;C# for Visual Studio Code&lt;/a&gt;. As of the time of this writing, the extension supports basic debugging capabilities, full details of &lt;a href="http://aka.ms/vscclrdebugger"&gt;which can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-studio-2017-ide"&gt;
  &lt;/a&gt;
  Visual Studio 2017 IDE
&lt;/h2&gt;

&lt;p&gt;From version 15.5, the Azure Development workload comes bundled with Azure Functions tools. This implies if you plan on installing the latest version of Visual Studio 2019, you need to include Azure Development workload in your installation process.&lt;/p&gt;

&lt;p&gt;Once installation is complete, sign in to your Microsoft account in Visual Studio and create a new Azure Functions project, and you are good to go.&lt;/p&gt;

&lt;p&gt;Now that we've highlighted what you need to know if you want to build serverless functions in C# with Azure functions, let's move over to discussing what you need to begin running serverless apps on the AWS Lambda serverless framework&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-c-with-aws-lambda"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using C# with AWS Lambda&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;AWS Lambda is the compute part of the AWS serverless architecture and requires almost zero administration. It is one of the most popular options for serverless, and though AWS launched it in 2014, in 2018, AWS announced official support for &lt;a href="https://aws.amazon.com/about-aws/whats-new/2018/01/aws-lambda-supports-c-sharp-dot-net-core-2-0/"&gt;a .NET Core 2.0 runtime&lt;/a&gt;, and in &lt;a href="https://aws.amazon.com/blogs/compute/announcing-aws-lambda-supports-for-net-core-3-1/"&gt;2020 for version 3.1&lt;/a&gt;. It is crucial to understand that .NET Core is different from the .NET framework, and here are a few reasons AWS chose .NET Core over the .NET framework&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  .NET Core is the newly redesigned version of .NET that focuses on more modern applications and, in particular, cloud-enabled applications, which has significant benefits when writing Lambda functions&lt;/li&gt;
&lt;li&gt;  .NET Core was designed with a modularized design which means you only get to include the part of .NET you will need when writing your Lambda functions. This leads to lesser memory usage, and since Lambda charges you for memory usage, lesser memory demands by your functions will lead to lesser costs for using AWS Lambda.&lt;/li&gt;
&lt;li&gt;  .NET Core is open-source and validated against Amazon Linux -- the underlying platform for AWS Lambda, making it possible for AWS to respond to security issues that might arise with using it.&lt;/li&gt;
&lt;li&gt;  With .NET Core, you can now write your C# code on any platform instead of earlier days with .NET, where you could write C# code on only Windows environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To begin building Lambda functions in C# with Visual Studio, you will need to understand AWS Lambda has a laid-down pattern for authoring code for your Lambda function. This pattern includes the following concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Handler&lt;/strong&gt; -- the handler function is a function called by AWS Lambda to begin execution of your Lambda function. AWS Lambda passes any input data into this function as the first parameter and passes a context object as a second parameter.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Context Object&lt;/strong&gt; -- is the second parameter passed into the handler function, and it provides information through which your code interacts with AWS Lambda.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Logging&lt;/strong&gt; -- a sound logging system is a critical component of a well-written function. AWS Lambda writes these logs to CloudWatch Logs.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Exceptions&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know the framework for writing for AWS Lambda, let's see how all this works together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-c-code-for-aws-lambda-with-visual-studio"&gt;
  &lt;/a&gt;
  Writing C# code for AWS Lambda with Visual Studio
&lt;/h2&gt;

&lt;p&gt;A few prerequisites are required to begin writing code for Lambda functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you don't have one, you can &lt;a href="https://portal.aws.amazon.com/billing/signup?nc2=h_ct&amp;amp;src=header_signup&amp;amp;redirect_url=https%3A%2F%2Faws.amazon.com%2Fregistration-confirmation#/start"&gt;create an AWS account here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://visualstudio.microsoft.com/downloads/"&gt;Download&lt;/a&gt; and install Visual Studio IDE 2019.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2017"&gt;Download&lt;/a&gt; and install the AWS Toolkit for Visual Studio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you've installed all prerequisites, open Visual Studio and fill in the AWS credentials on the &lt;strong&gt;Getting Started with the AWS Toolkit for Visual Studio&lt;/strong&gt; window displayed next to the Start Page tab. The credentials (Access Key and Secret Key) can be obtained by following the instructions outlined in the window.&lt;/p&gt;

&lt;p&gt;With all set, let's move on to build our Lambda project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Create a .NET Core Lambda project&lt;/li&gt;
&lt;li&gt;  Open Visual Studio IDE and go to file&amp;gt; New &amp;gt; Project&lt;/li&gt;
&lt;li&gt;  On the Installed pane, Click Visual C# and then AWS Lambda Project (.NET Core) as shown below:&lt;/li&gt;
&lt;li&gt;  Fill out the project name with a name of your choice and click OK, leaving the defaults as they are, then move on to selecting the type of Lambda project you want to build.&lt;/li&gt;
&lt;li&gt;  Click Finish to create the project and review the project code and structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A critical file created with your project is the &lt;code&gt;aws-lambda-tools-defaults.json&lt;/code&gt; file, where you set your function handler and other options. &lt;/p&gt;

&lt;p&gt;The contents of the file should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRX0q_DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqa19aqkuds0czbfhjp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRX0q_DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqa19aqkuds0czbfhjp1.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets see the &lt;a href="https://dashbird.io/blog/serverless-and-c-what-you-need-to-know/"&gt;original article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-to-aws-lambda"&gt;
  &lt;/a&gt;
  Publishing to AWS Lambda
&lt;/h2&gt;

&lt;p&gt;The next step to running our code on AWS Lambda is to publish it. This is done after the code has been reviewed and you are convinced it is good to go. The following steps outline what you need to do to get your code published.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  On the right side, you can see the project. There, in the Solution Explorer, click Publish to AWS Lambda.&lt;/li&gt;
&lt;li&gt;  Next, fill in the Function Name in the Upload to AWS Lambda window that appears. You can give any preferred name to your function at this point. Once you are done, click Next.&lt;/li&gt;
&lt;li&gt;  On the Advanced Function Details page, fill the Role Name section with a role associated with your AWS account. This is a required field to supply before proceeding to the next stage of the upload process. Other sections include the VPC section (only applicable if your function will be accessing resources on Amazon VPC) and the Environment section.&lt;/li&gt;
&lt;li&gt;  Once your function begins uploading, a window is displayed showing the status of the upload, after which a function view page is displayed where you can test your function and view logs, respectively.&lt;/li&gt;
&lt;li&gt;  The Invoke button begins testing the function while the log output displays the output from the test. These logs are also saved into CloudWatch Logs in AWS, where more details on the logs can be viewed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, you have a quick peek into what you need to know to build and publish serverless applications with the powerful C# programming language, and though at &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;, we are more inclined towards AWS Lambda, nothing is stopping you from exploring both the Microsoft Azure functions and AWS Lambda options in getting that serverless infrastructure for your applications.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-get-overview-c-lambdas/"&gt;How to get an overview of C# Lambda functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/aws-vs-azure/"&gt;AWS vs Azure, a quick comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/observability/serverless-observability-real-time-debugging/"&gt;Serverless observability and real-time troubleshooting&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>csharp</category>
      <category>serverless</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 JavaScript Array methods you need to know!</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Tue, 23 Nov 2021 12:29:52 +0000</pubDate>
      <link>https://dev.to/avneesh0612/5-javascript-array-methods-you-need-to-know-34kj</link>
      <guid>https://dev.to/avneesh0612/5-javascript-array-methods-you-need-to-know-34kj</guid>
      <description>&lt;p&gt;While building applications you would have noticed yourself using Array's a lot. So let's take a look at the 5 Array methods.&lt;/p&gt;

&lt;p&gt;To show you all the methods with examples, I am going to create a simple Array with some fruits and their prices-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fruits = [
   {
    name: "Mango",
    price: 3,
  },
  {
    name: "Apple",
    price: 5,
  },
  {
    name: "Banana",
    price: 10,
  },
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-map"&gt;
  &lt;/a&gt;
  1. Map
&lt;/h3&gt;

&lt;p&gt;A map function is similar to loop and if you are a React developer you probably have seen this function be used quite a lot. So let's understand this properly with an example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getFruitNames() {
  return fruits.map((fruit) =&amp;gt; fruit.name);
}

console.log(getFruitNames());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getFruitNames&lt;/code&gt; maps through the fruits Array and returns the name of each fruit. So if we run the function it will return an Array with all the fruit names-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Mango', 'Apple', 'Banana']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-filter"&gt;
  &lt;/a&gt;
  2. Filter
&lt;/h3&gt;

&lt;p&gt;If you want to filter some products out based on some conditions like getting the fruits that cost more than 4 then we will use the filter function to do so. This is how you use a filter function-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getCostlyFruits() {
  return fruits.filter((fruit) =&amp;gt; fruit.price &amp;gt; 4);
}

console.log(getCostlyFruits());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function returns-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  { name: "Apple", quantity: 5 },
  { name: "Banana", quantity: 10 },
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-reduce"&gt;
  &lt;/a&gt;
  3. Reduce
&lt;/h3&gt;

&lt;p&gt;Reduce lets you add up a bunch of numbers inside an Array, in a very easy way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MTMsl-dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DHqth0hVQoIzS/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTMsl-dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DHqth0hVQoIzS/200.gif" alt="The Math GIF" width="466" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see it in action-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getTotalCost() {
  return fruits.reduce((acc, fruit) =&amp;gt; acc + fruit.price, 0);
}

console.log(getTotalCost());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the first parameter is the number formed by adding the previous numbers and the second parameter is the amount that will get added to the first value. The 0 that you see at the end can be replaced with the number you want the count to start with.&lt;/p&gt;

&lt;p&gt;This function outputs a number, in this case- &lt;code&gt;18&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-find"&gt;
  &lt;/a&gt;
  4. Find
&lt;/h3&gt;

&lt;p&gt;If you want to find fruit based on its price or by its name, then this is the method you are looking for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getFruitByName(name) {
  return fruits.find((fruit) =&amp;gt; fruit.name === name);
}

console.log(getFruitByName("Mango"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the Mango object when run-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ name: 'Mango', price: 3 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-includes"&gt;
  &lt;/a&gt;
  5. Includes
&lt;/h3&gt;

&lt;p&gt;This method lets you check if there is an item in that Array. Suppose I want to check if banana is present in the fruits Array. If it is present then it will return true, otherwise false. You can't check items inside an object in the Array, so I am going to use the Array with the names from our &lt;code&gt;getFruitNames&lt;/code&gt; function-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fruitNames = getFruitNames();

console.log(fruitNames.includes("Orange"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return &lt;code&gt;false&lt;/code&gt; as Orange isn't inside the fruits Array, but if we try Apple then it would return &lt;code&gt;true&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fruitNames = getFruitNames();

console.log(fruitNames.includes("Apple"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you found this useful. If you have any questions, drop them down in the comments. Until next time Peace ✌️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful Links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/avneesh0612-the-bold/pen/ExvzLgB"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;Connect with me&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>array</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>C# Arrays</title>
      <author>Grant</author>
      <pubDate>Tue, 23 Nov 2021 12:16:23 +0000</pubDate>
      <link>https://dev.to/gweaths/c-arrays-47m0</link>
      <guid>https://dev.to/gweaths/c-arrays-47m0</guid>
      <description>&lt;p&gt;In previous chapter we learnt about collections (Lists, Stacks, Queues, Dictionaries), and I gave a special mention to &lt;code&gt;Arrays&lt;/code&gt;. Why was this, well arrays can store a collection of objects too just like the aforementioned, however we can't add to them as we go along like the others&lt;/p&gt;

&lt;p&gt;e.g&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//do other code&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is another sentance"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With arrays we have to know the length of the array to allocate memory space to it, the length needs to be known at time of instantiation. The contents of an array &lt;strong&gt;cannot&lt;/strong&gt; be changed once created !&lt;/p&gt;

&lt;p&gt;We can declare an array in a few different ways, but the common use of the &lt;code&gt;[]&lt;/code&gt; square brackets "keyword / syntax" means an array is being declared.&lt;/p&gt;

&lt;p&gt;There are a few ways you can declare an array in C#, explicitly or implicitly. For example when I said we need to know the length, this can be implicitly calculated by creating the array at point of instantiation and setting the values like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// will create an integer array with 5 values, will output 5 objects with value 0 (int default is 0)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;emptyArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="c1"&gt;//will create a string array with 5 string values, output will be the 5 names.&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Grant"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Gary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//this can also be done using alternative syntax of&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]{&lt;/span&gt;&lt;span class="s"&gt;"Grant"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Gary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//Both do the same thing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been playing with C# for a while, or have seen some intellisense tips (code helper when you type code in Visual Studio), you may have seen a method called &lt;code&gt;ToArray()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This does exactly what it says on the tin. It converts a collection to an array. Say you had a &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt; but wanted to use it as an array, I dunno to pass it to another method that only accepts an &lt;code&gt;Array&lt;/code&gt;. It's simple you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;{&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"How are you?"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;convertedArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your list is an Array, and gives you access to array methods and properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;{&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//Get number of objects &lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;countList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;countArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#array-vs-list"&gt;
  &lt;/a&gt;
  Array vs List
&lt;/h2&gt;

&lt;p&gt;So when would you use an array vs when to use a List. For me I'd usually opt for a List simply because lists in C# are far more easily sorted, searched through, and manipulated than arrays. &lt;/p&gt;

&lt;p&gt;However arrays do have a place, e.g if your data is unlikely to grow very much or if you’re dealing with a relatively large amount of data that will need to be indexed into often.&lt;/p&gt;

&lt;p&gt;Accessing Arrays is faster than Lists, this is because a List is just a .Net wrapper around an array. That unwrapping process can affect time taken to load records out of the list etc. There are few other reasons, but far too technical for this article. But we're talking milliseconds here, not huge amounts of time, however with large datasets this may be more noticeable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;Use an array when you know how much data is going into it, and the data doesn't need to be added / removed / manipulated.&lt;/p&gt;

&lt;p&gt;Use a list when you wish to add / remove data to it easily. If you want to perform multiple actions on the data, pick a list as it offers more built-in functionality.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>csharp</category>
      <category>tutorial</category>
      <category>collections</category>
    </item>
    <item>
      <title>Day 46 of 100 Days of Code &amp; Scrum: Raging at CORS, AWS Lambda, and API Gateway</title>
      <author>Rammina</author>
      <pubDate>Tue, 23 Nov 2021 12:14:27 +0000</pubDate>
      <link>https://dev.to/rammina/day-46-of-100-days-of-code-scrum-raging-at-cors-aws-lambda-and-api-gateway-49jk</link>
      <guid>https://dev.to/rammina/day-46-of-100-days-of-code-scrum-raging-at-cors-aws-lambda-and-api-gateway-49jk</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;Today was my weekly visit to the physical therapist, so I wasn't able to code much.&lt;/p&gt;

&lt;p&gt;I didn't really make that much progress because I was still stuck on the same problem as I was yesterday. I spent most of the time troubleshooting my AWS API Gateway integration and Lambda function. Apparently, there is something wrong with the preflight request part of the communication between frontend and backend. I used tools such as AWS CloudWatch Logs to retrieve the error message for the integration of the API Gateway.&lt;/p&gt;

&lt;p&gt;I'm hoping that I manage to solve this issue tomorrow.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I set up my contact form to connect with the AWS serverless backend, but I got stuck on this bug:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Access to XMLHttpRequest at API_GATEWAY_ENDPOINT from origin http://localhost:3000 has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I also selected a design scheme for my website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I spent most of my time trying to solve the bug above.&lt;/li&gt;
&lt;li&gt;reviewed how to use CloudWatch Logs to gain insight as to what's going on with the AWS services I use.&lt;/li&gt;
&lt;li&gt;learned a lot about CORS.&lt;/li&gt;
&lt;li&gt;did a lot of searching about Access Control headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I learned about why the Daily Scrum is more than just a status report.&lt;/li&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html"&gt;Using AWS Lambda with Amazon API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-troubleshooting-lambda.html"&gt;Troubleshooting issues with HTTP API Lambda integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master learning pathway | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create an iOS app? A step by step guide</title>
      <author>Anques Technolabs</author>
      <pubDate>Tue, 23 Nov 2021 12:00:50 +0000</pubDate>
      <link>https://dev.to/anquestechnolab/how-to-create-an-ios-app-a-step-by-step-guide-30m9</link>
      <guid>https://dev.to/anquestechnolab/how-to-create-an-ios-app-a-step-by-step-guide-30m9</guid>
      <description>&lt;p&gt;Are you new to the iOS app business? In this blog you will learn the whole process of how to create an iOS app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvMsx6hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.anques.com/wp-content/uploads/2021/05/create-an-iOS-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvMsx6hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.anques.com/wp-content/uploads/2021/05/create-an-iOS-app.jpg" alt="Image description" width="700" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the past decade, mobile app development has become one of the most promising and bright industries. Shows a large number of mobile apps, relying on mobile phones for everyday chores and entertainment and recreation. How to create an iOS application&lt;/p&gt;

&lt;p&gt;But the question is why do users like iOS so much? Well, first, it’s easy. Second, the app store submission process is rigorous, ensuring users get high quality mobile products. Finally, Apple has made it clear that user privacy is one of the company’s primary concerns.&lt;/p&gt;

&lt;p&gt;As a result, iOS app developers have to work hard during the iOS app development process and deliver the best product in one form or another.&lt;/p&gt;

&lt;p&gt;How the process turns out is a strange thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General flow of iOS application development process:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Application development is not just about creating a mobile application and launching it on a digital store. The process requires planning, research, proper skills and, most of all, clear attention. To ensure the success of the final product, the mobile application development company must follow a series of steps in the application development cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In general, there are five main stages in the development cycle of an application.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-planning-phase"&gt;
  &lt;/a&gt;
  1. Planning phase
&lt;/h3&gt;

&lt;p&gt;Before launching the app, it is very important to have a clear focus on what challenges the mobile app solves, what tasks are involved, who the target audience is, etc.&lt;/p&gt;

&lt;p&gt;In addition, thorough market research is required to make sure the app is competitive in your market or niche. The planning phase also includes configuring all the requirements at a later stage of the application development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-design-phase"&gt;
  &lt;/a&gt;
  2. Design phase
&lt;/h3&gt;

&lt;p&gt;At this stage, the design team presents the user interface and user experience, i.e. appearance, vision and navigation. This design is then transferred to mobile app developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-development-phase"&gt;
  &lt;/a&gt;
  3. Development phase
&lt;/h3&gt;

&lt;p&gt;This phase of the flow of the application development process involves creating a functional application from an existing design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-testing-phase"&gt;
  &lt;/a&gt;
  4. Testing phase
&lt;/h3&gt;

&lt;p&gt;When development is complete, testing the application is mandatory. QA Engineers review the application to ensure that it is fully functional and error free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-application-release-and-maintenance"&gt;
  &lt;/a&gt;
  5. Application release and maintenance
&lt;/h3&gt;

&lt;p&gt;Once the application is verified and reviewed by the customer, it can be introduced in the market. However, this application does not complete the steps of the development process, as each application requires ongoing maintenance and must be updated frequently to take into account the changing demands of the customer. So this phase only marks the beginning of the second development cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to create iOS mobile application? Step by step process:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The iOS application development workflow also follows the general pattern mentioned above. It all starts with the app plan, then designs and develops the app, tests it before launching the product and maintains it until the app runs.&lt;/p&gt;

&lt;p&gt;But, in practice, the iOS development process is not so simple. iOS developers must follow the rules of  Apple, developers to ensure a private, secure and user-friendly user experience. So, hire mobile app developers who can implement the elements and best practices needed to create a successful end product.&lt;/p&gt;

&lt;p&gt;The following section provides a detailed explanation of all the development steps of the iOS app:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-initial-steps-to-create-an-app-for-ios"&gt;
  &lt;/a&gt;
  1. Initial steps to create an app for iOS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Research analysis&lt;/strong&gt;&lt;br&gt;
There are over a million apps on the App Store. So the market is extremely competitive. To ensure that your app receives frequent traction and frequent downloads, you need to do extensive market research to see if apps already exist. Then see how those apps work and compare yourself to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compliance with app store guidelines&lt;/strong&gt;&lt;br&gt;
In addition, the process of creating an iOS application also requires that you strictly follow the Apple guide. Apple only releases applications that meet its design, security, user privacy and other requirements. And there is no other way. This is the reason why all the apps on iOS look the same without losing uniqueness, and this is the reason why most of them are performing well.&lt;/p&gt;

&lt;p&gt;Read more from source URL: &lt;a href="https://www.anques.com/how-to-create-an-ios-app-a-step-by-step-guide/"&gt;https://www.anques.com/how-to-create-an-ios-app-a-step-by-step-guide/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>appdev</category>
      <category>mobile</category>
      <category>mobileapp</category>
    </item>
    <item>
      <title>High Salary Leads to Burnout. Unobvious Career Trap No One Is Talking About</title>
      <author>Vectorly</author>
      <pubDate>Tue, 23 Nov 2021 12:00:42 +0000</pubDate>
      <link>https://dev.to/vectorly/high-salary-leads-to-burnout-unobvious-career-trap-no-one-is-talking-about-3iai</link>
      <guid>https://dev.to/vectorly/high-salary-leads-to-burnout-unobvious-career-trap-no-one-is-talking-about-3iai</guid>
      <description>&lt;p&gt;&lt;em&gt;The story was orginally published on &lt;a href="https://www.vectorly.team/vectorly-blog/high-salary-leads-to-burnout-unobvious-career-trap-no-one-is-talking-about"&gt;Vectorly blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Low salaries and boring, monotonous work are among the top reasons for employee burnout, studies on developer productivity show. &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-4221-6"&gt;link&lt;/a&gt; A lot has been written about dealing with such situations, and by now this stuff is common knowledge.&lt;/p&gt;

&lt;p&gt;However, if an employee is overpaid and is lacking in skills or experience, the situation can get even worse than that. Initial euphoria caused by a nice paycheck quickly brings boredom for the employee and jealousy from peers. A worker who is overpaid is interested in maintaining the status quo and preserving their position in the company, often at the expense of initiative and risk-taking. Here is how a company can address this issue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-salary-and-job-satisfaction-influence-developer-burnout"&gt;
  &lt;/a&gt;
  How do salary and job satisfaction influence developer burnout?
&lt;/h1&gt;

&lt;p&gt;The graph below shows the likelihood of employee burnout in relation to their level of salary and job satisfaction level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEnGbJlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mutu5na8h0jd0ko6brki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEnGbJlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mutu5na8h0jd0ko6brki.png" alt="How do salary and job satisfaction influence developer burnout?" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the X-axis is the level of job satisfaction, which can be defined as a combination of factors, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Participation in interesting projects&lt;/li&gt;
&lt;li&gt;Challenging tasks&lt;/li&gt;
&lt;li&gt;Great team and relationships with colleagues&lt;/li&gt;
&lt;li&gt;Learning and skill improvement&lt;/li&gt;
&lt;li&gt;Career opportunities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on the Y-axis, you can see the level of salary a developer gets for his work - from very low to very high (relatively, depending on the market in each individual country and a person’s perception).&lt;/p&gt;

&lt;p&gt;These two values define the following developer PSYCHOLOGICAL STATE ZONES (sketchily):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High risk of burnout (Zone 1)&lt;/li&gt;
&lt;li&gt;Professional growth (Zone 2)&lt;/li&gt;
&lt;li&gt;High salary (Zone 3)&lt;/li&gt;
&lt;li&gt;Comfort zone (Zone 4)&lt;/li&gt;
&lt;li&gt;Ideal world (Zone 5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a closer look at each of these zones and see what psychological issues a developer may experience, then move on to the career traps they can meet there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#high-risk-of-burnout-zone-1"&gt;
  &lt;/a&gt;
  High risk of burnout (Zone 1)
&lt;/h1&gt;

&lt;p&gt;Description: Low salary + low job satisfaction.&lt;/p&gt;

&lt;p&gt;Newly graduated young specialists come to companies for experience and often find themselves in this zone.&lt;/p&gt;

&lt;p&gt;Burnout risk status: the highest level of risk, obviously.&lt;/p&gt;

&lt;p&gt;Examples of companies: such an environment is often associated with agency work, low-tech startups, and outsourced work involving bad technological decisions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#professional-growth-zone-2"&gt;
  &lt;/a&gt;
  Professional growth (Zone 2)
&lt;/h1&gt;

&lt;p&gt;Description: Low salary + high job satisfaction&lt;/p&gt;

&lt;p&gt;Zone 2 environments provide engaging tasks, pleasant working conditions, and sufficient room for professional growth, but below-average salary.&lt;/p&gt;

&lt;p&gt;Burnout risk status: Employee burnout is likely but doesn't happen overnight.&lt;/p&gt;

&lt;p&gt;Examples of companies: These conditions are often found in (pre-) seed round high-tech startups, agencies, and low-level positions at FAANG-like companies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#high-salary-zone-3"&gt;
  &lt;/a&gt;
  High salary (Zone 3)
&lt;/h1&gt;

&lt;p&gt;Description: High salary + low job satisfaction&lt;/p&gt;

&lt;p&gt;Zone 3 jobs do not offer much besides a good paycheck. After the initial euphoria wears off, the employees find themselves doing boring, monotonous work without much opportunity to grow professionally, and a team that isn't very engaging or exciting to work with.&lt;/p&gt;

&lt;p&gt;Burnout risk status: The burnout risk is high for these positions, but it's not obvious and is often overlooked by employers and managers. We’ll talk more about this trap later.&lt;/p&gt;

&lt;p&gt;Examples of companies: Zone 3 environments are found in large corporations and companies which aren't prioritizing IT solutions, instead relying on outdated stacks (oil companies, for example).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comfort-zone-zone-4"&gt;
  &lt;/a&gt;
  Comfort zone (Zone 4)
&lt;/h1&gt;

&lt;p&gt;Description: Good salary + good job satisfaction (above average)&lt;/p&gt;

&lt;p&gt;A comfort zone environment is a sweet spot for both the employee and the employer. A developer, who has landed such a position, is content with their pay and engages in relatively interesting, challenging projects. There is often a lot of room for professional development and the employees are quite happy with the company.&lt;/p&gt;

&lt;p&gt;Burnout risk status: low.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ideal-world-zone-5"&gt;
  &lt;/a&gt;
  Ideal world (Zone 5)
&lt;/h1&gt;

&lt;p&gt;Description: High salary + high job satisfaction&lt;/p&gt;

&lt;p&gt;Everything is possible in the perfect world. Everything, except employee burnout. The pay is great, the projects are really fun and engaging, job satisfaction is high, and every developer is happy.&lt;/p&gt;

&lt;p&gt;Burnout risk status: low.&lt;/p&gt;

&lt;p&gt;Examples of companies: Unfortunately, such environments rarely exist in real life. The issue is that every developer has their own understanding of the ‘maximum’ in salary and job satisfaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-the-catch"&gt;
  &lt;/a&gt;
  What’s the catch?
&lt;/h1&gt;

&lt;p&gt;Juniors are usually prioritizing gaining some work experience to boost their career, hence they often start their professional journey in Zone 1. They receive a modest salary and do the unrewarding, repetitive tasks (banner layouts, simple coding, etc).&lt;/p&gt;

&lt;p&gt;These jobs provide them with professional development opportunities. However, if a person stays in such a position long enough, their dissatisfaction with the low salary and boring tasks will inevitably lead to burnout. Zone 1 has a high risk of burnout. This is an obvious problem, and there are some standard solutions for dealing with burnout in such environments.&lt;/p&gt;

&lt;p&gt;However, there is little publicly available info about the future career path of developers who have found themselves in Zone 1. So, we’ll talk more about the main scenarios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRY3ljol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzxxqnhl3jrt73h10jis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRY3ljol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzxxqnhl3jrt73h10jis.png" alt="The two common scenarios of how to exit Burnout zone" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More often than not, developers don't stay long in Zone 1, due to low pay and low-skill tasks. A developer, who has found themselves in such a position, has two options to pursue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More engaging projects and better professional development (moving right on the X-axis)&lt;/li&gt;
&lt;li&gt;Better pay (moving up on the Y-axis)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each employee determines their own level of professional development (and its maximum), but there are two most common scenarios.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scenario-1"&gt;
  &lt;/a&gt;
  Scenario 1
&lt;/h1&gt;

&lt;p&gt;Developers with high ambitions, those who don't just want to code, but are instead focused on developing their soft skills, solving problems, and taking on challenging tasks, will gravitate towards moving right on the X-axis. They prioritize job satisfaction, professional growth, and development opportunities over a high salary.&lt;/p&gt;

&lt;p&gt;The biggest risk for such a scenario is staying in Zone 2 for too long. In order to avoid this, an employee needs to be picky when it comes to changing jobs. For such a developer, the right company will provide a proportional increase in income as they acquire new skills and become more engaged with the company.&lt;/p&gt;

&lt;p&gt;If the new employee fails to receive such an increase, the risk of burnout becomes quite high. Over time, the developer will take on more and more tasks, but his income will not reflect this. At the end of the day, the developer will simply burn out and can degrade in his professional development, returning to a Zone 1 position again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#right-professional-development-for-scenario-1"&gt;
  &lt;/a&gt;
  Right professional development for scenario 1:
&lt;/h1&gt;

&lt;p&gt;One of the best ways to avoid this is to ensure an adequate increase in salary, which should scale accordingly as the amount of responsibility the developer has grown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FS8Ss-lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eomnbzlo6sehgyu56vo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FS8Ss-lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eomnbzlo6sehgyu56vo.png" alt="Scenario #1 - moving towards professional growth" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ideal career path here is to move from Zone 2, through the Comfort Zone, to the Ideal World, by increasing your market value and salary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVE7UZ-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m86b9wfqz26feye0g10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVE7UZ-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m86b9wfqz26feye0g10.png" alt="Ideal career growth" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scenario-2"&gt;
  &lt;/a&gt;
  Scenario 2
&lt;/h1&gt;

&lt;p&gt;This one is tricky. The most dangerous scenario is for the developer to go from Zone 1 straight to Zone 3. In other words, a developer without proper qualifications and experience gets tired of low salary and finds a new job that pays three times his old salary.&lt;/p&gt;

&lt;p&gt;In theory, this shouldn’t happen. But maybe the developer was interviewed by a manager who wasn't exactly qualified. So they managed to charm the interviewer and exaggerate their actual skills. Or maybe the manager was under a lot of pressure and just needed to hire someone. These things happen more often than you’d think.&lt;/p&gt;

&lt;p&gt;This leads to a situation where the developer is paid much more than he is actually worth in terms of his experience and qualifications. This leads to a situation where the developer is paid much more than he/she is actually worth in terms of his experience and qualifications, which in turn leads to blurry professional self-esteem and anxiety.&lt;/p&gt;

&lt;p&gt;The developer enjoys rapid growth in income and standard of living. They begin to increase their expenses, take out loans, and enter various financial commitments.&lt;/p&gt;

&lt;p&gt;But after a few months, they get used to a new standard of living, and the rose-colored glasses fall off. They realize that they have been doing busy-work for months. They never have a chance to learn something new as there are no better tasks. Thus, no professional growth occurs.&lt;/p&gt;

&lt;p&gt;Buried in monotonous tasks and lacking any adrenaline from growth and development, the developer realizes that they do not like their job at all. But they will not be able to leave their job, since they are already used to the standard of living provided by their higher salary.&lt;/p&gt;

&lt;p&gt;They begin to look around and see that other companies have more interesting projects, better teams, and more influence in the industry. And even though their employees get paid less, they still enjoy their comfort zone.&lt;/p&gt;

&lt;p&gt;The developer from Zone 3 looks at the employees in their comfort zone with envy. But the truth is, they won't accept a decrease in income as a trade-off for higher job satisfaction and more growth opportunities.&lt;/p&gt;

&lt;p&gt;They are trapped, since the "ideal world" zone is unattainable. Only the blue-chip seniors working for digital giants can get there.&lt;/p&gt;

&lt;p&gt;The "Ideal World" zone is a magical place. Everyone wants to get there, but most of us get trapped in Zone 3. We often make the mistake of striving for a high salary and not for a great team leader, which will help us to quickly grow in qualifications and raise our own market value.&lt;/p&gt;

&lt;p&gt;So what is the trap of Zone 3? For an employee to get out of it, they need to move back into their comfort zone - Zone 4, which means accepting a lower salary. They have to sacrifice their standard of living and think about what to do with all the new financial obligations they might've acquired. This involves a lot of risk and not many are willing to take it.&lt;/p&gt;

&lt;p&gt;Of course, this doesn’t apply to everybody. Many developers can be quite happy doing routine tasks for decades. But the risk of burnout in this zone is much higher than in Zone 2 (since it’s easier to get out of Zone 2 - to grow in salary or to search for great projects).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-escape-this-trap"&gt;
  &lt;/a&gt;
  How to escape this trap?
&lt;/h1&gt;

&lt;p&gt;Exit 1. For experienced developers&lt;/p&gt;

&lt;p&gt;If a developer enters a Zone 3 environment with enough experience and skills, they realize they are worth the money and just made the mistake of going with the wrong company, where their skills aren’t put to good use.&lt;/p&gt;

&lt;p&gt;They will quickly realize that burnout is just a matter of time. The tasks are routine, the company is unlikely to change anything about it, and the developer doesn't get much say in anything. All this leads to low levels of job satisfaction.&lt;/p&gt;

&lt;p&gt;The easy way out is to just change jobs. The employee can sacrifice a part of their salary and get a chance to make a real impact. Since they already possess the necessary experience and skills, with the right choice of company, the salary decrease will be minimal.&lt;/p&gt;

&lt;p&gt;The main conclusion here is that Zone 3 is less dangerous for experienced developers. They have options and high market value.&lt;/p&gt;

&lt;p&gt;Exit 2. For juniors/middles without much skill or experience.&lt;/p&gt;

&lt;p&gt;For developers without experience, the best strategy is to aim for a comfort Zone 4 type of environment.&lt;/p&gt;

&lt;p&gt;Hence, it’s important for them to plan their career in advance. That means an employee should accumulate some sort of a rainy day fund and go back to Zone 2, where they will get to experiment and gain skills to increase their real market value.&lt;/p&gt;

&lt;p&gt;This will allow them to participate in cool projects at a salary below what they’re used to, without sacrificing their standard of living.&lt;/p&gt;

&lt;p&gt;So the main financial advice for people who have dramatically increased their income is to set aside most of this newly found wealth. That way, they can avoid raising their standard of living too drastically. This, in turn, will allow them to be free in their choice of a career path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpMLSgov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9kjsppqabbcfm7j17dd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpMLSgov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9kjsppqabbcfm7j17dd.png" alt="Scenario #2 - moving towards high salary" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For such an employee, the most important question is: how do you find out your real market value?&lt;/p&gt;

&lt;p&gt;The first option is to begin applying for new jobs, go to the interviews, get a few offers and find out the average salary they’re being offered at. This will reflect their market value.&lt;/p&gt;

&lt;p&gt;The second option is to find a company with a transparent assessment of skills. The employees working for companies that use &lt;a href="https://www.vectorly.team/"&gt;Vectorly&lt;/a&gt; do not need to go to interviews and look for a third-party assessment of their skills. Transparent reviews and skill matrices help you see the real current value of job roles and never lose touch with reality.&lt;/p&gt;

&lt;p&gt;So, the main option for inexperienced developers to get out of Zone 3 is to create a financial buffer and search for great team leaders and challenging projects in Zone 2, without sacrificing their standard of living. Thus, a developer has a chance to develop professionally and grow their market value. This is the place where his experience starts to correlate with the salary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;To sum it up, here are the main career strategies for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers need to strive for the comfort zone, which means that their salary should grow proportionally with the development of their skills (the ‘balance’ scenario on the graph).&lt;/li&gt;
&lt;li&gt;Do not go for an unreasonably high salary, but instead look for a great team leader who will increase your market value.&lt;/li&gt;
&lt;li&gt;Choose a company that can provide you with financial growth as you gain experience.&lt;/li&gt;
&lt;li&gt;Increase your standard of living, not in relation to your salary but to your real market value.&lt;/li&gt;
&lt;li&gt;And find a company that offers opportunities for transparent evaluation of skills, so every developer there has an understanding of their real market value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These simple recipes should help you avoid burnout at every stage of your career path. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read more on engineering management &amp;amp; developers productivity in &lt;a href="https://www.vectorly.team/blog"&gt;Vectorly blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>leadership</category>
    </item>
    <item>
      <title>How to create a Gradient border BlogPostCard using Tailwind CSS and Next.js.</title>
      <author>raivikas</author>
      <pubDate>Tue, 23 Nov 2021 11:42:05 +0000</pubDate>
      <link>https://dev.to/raivikas/how-to-create-a-gradient-border-blogpostcard-using-tailwind-css-and-nextjs-57fa</link>
      <guid>https://dev.to/raivikas/how-to-create-a-gradient-border-blogpostcard-using-tailwind-css-and-nextjs-57fa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdIlEkvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97t4yvkx7h15t766ntq0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdIlEkvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97t4yvkx7h15t766ntq0.PNG" alt="Post Featured Image" width="838" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone,  I  hope you all are well, this is my first post on Dev.to I hope you will like it. &lt;/p&gt;

&lt;p&gt;This blog post  is a small tutorial  in which I have showed, how you can create a gradient border blog postcard using Tailwind CSS.&lt;br&gt;
I am assuming that you have some basic knowledge about Tailwind CSS and Next.js .&lt;/p&gt;

&lt;p&gt;For this project, I have chosen &lt;strong&gt;Next.js&lt;/strong&gt; as a framework because through this one command you can initialize a next-app with &lt;strong&gt;Tailwind CSS&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may choose other frameworks like react.js, vue.js or you can simply do this in an HTML file also by using the &lt;a href="https://tailwindcss.com/docs/installation"&gt;Tailwind CSS CDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now open the project and open the index.js file inside the &lt;strong&gt;Pages&lt;/strong&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now delete all the code inside the Home() function, so that it looks something like this.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog PostCard Tutorial&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now create a component folder in the root directory and inside that folder create a BlogPostCard.js file and write the following code shown below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jJZans8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro63kaudo5v3e5wu87r6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jJZans8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro63kaudo5v3e5wu87r6.PNG" alt="Folder Structure" width="427" height="476"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogPostCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Gradient background of same width &amp;amp; height  as Blog post card  */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* PostImage */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/postImage.png"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Post title */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              This is first title.
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Post Data/excerpt */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Everything I Know About Style Guides, Design Systems, and
              Component Libraries
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Author image with data */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
                &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/author.jpg"&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              16 Nov, 2021
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BlogPostCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see I have left spaces for the image URL, you can keep the assets in the public folder and you can access them using (/image.jpg).&lt;/p&gt;

&lt;p&gt;Now the basic Html structure is ready and now it's time to add tailwind CSS classes.&lt;/p&gt;

&lt;p&gt;So , here  I am pasting all the CSS code at once , please take your time to understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogPostCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"relative flex w-1/4 h-[500px] mx-auto mt-10"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Gradient background of same width &amp;amp; height  as Blog post card  */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" rounded-xl w-full bg-gradient-to-r p-[5px] from-[#7928ca] to-[#ff0080]"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col justify-between h-full bg-black rounded-lg p-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col justify-center text-white"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* PostImage */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/postImage.png"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-52 mb-5 rounded-lg"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Post title */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl font-extrabold mb-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              This is first title.
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Post Data/excerpt */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg md:text-lg font-medium mb-6  "&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Everything I Know About Style Guides, Design Systems, and
              Component Libraries
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Author image with data */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" flex w-full justify-between mb-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
                &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/author.jpg"&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-[75px] h-[80px] rounded-full  "&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg mr-5 font-semibold text-white flex items-center justify-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              16 Nov, 2021
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BlogPostCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After all this &lt;strong&gt;import the BlogPostCard from&lt;br&gt;
components/BlogPostCard.js&lt;/strong&gt; in the index.js file  and the component  in the &lt;strong&gt;Home() function&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BlogPostCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/BlogPostCard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-black flex flex-col min-h-screen py-2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog PostCard Tutorial&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-8xl font-bold text-indigo-500 mb-10 text-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog PostCard Tutorial&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogPostCard&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After all this hardwork , you will see an output like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7nq_7We8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtss7wzmme47of2nr05m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7nq_7We8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtss7wzmme47of2nr05m.PNG" alt="Ouput Result" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The trick for creating a gradient border is that you create two &lt;strong&gt;DIV's&lt;/strong&gt;, one nested in another and the should be relative to each other, then you give the two &lt;strong&gt;DIV's&lt;/strong&gt; same height and width, such that the two DIV's should be stacked on each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you provide the gradient background to the bottom  DIV and provide some padding to the upper div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"rounded-xl w-52 h-64 mx-auto  mt-10 bg-gradient-to-r p-[6px] from-[#6EE7B7] via-[#3B82F6] to-[#9333EA]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col justify-between h-full bg-white text-white rounded-lg p-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6J4eoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/073cqpi4fp40g24oahav.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6J4eoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/073cqpi4fp40g24oahav.PNG" alt="Example of Blog Post Card" width="653" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you will see, that the bottom DIV will look like a gradient border for the upper DIV.&lt;/p&gt;

&lt;p&gt;This was my first time creating a blog post tutorial , if  I have done any mistake plz give a feedback to me on how I can improve it more.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed building this project, and thank you for investing your time in reading this blog. If you enjoyed reading the post or building the project , don't hesitate to show your love and do visit &lt;a href="https://nextjsdev.com"&gt;NextjsDev.com&lt;/a&gt; (My personal blog webiste to read articles/post related to &lt;a href="https://nextjsdev.com/next-js-vs-react-js-which-should-you-choose-in-2021/"&gt;Next.js&lt;/a&gt;, Tailwind CSS , &lt;a href="https://nextjsdev.com/best-react-js-examples-project-that-you-can-build-as-a-beginner/"&gt;React.js&lt;/a&gt; and &lt;a href="https://nextjsdev.com/top-12-best-vs-code-extensions-you-need-in-2021/"&gt;VsCode&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Django – How to upload, view, delete file using ModelForm and MySQL
</title>
      <author>Harry Nguyen</author>
      <pubDate>Tue, 23 Nov 2021 11:25:57 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/django-how-to-upload-view-delete-file-using-modelform-and-mysql-43bh</link>
      <guid>https://dev.to/harrynguyen88/django-how-to-upload-view-delete-file-using-modelform-and-mysql-43bh</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/django-how-to-upload-file-using-modelform-tutorial-mysql"&gt;https://ozenero.com/django-how-to-upload-file-using-modelform-tutorial-mysql&lt;/a&gt;&lt;br&gt;
In this tutorial, we’re gonna look at way to upload file in Django using Django ModelForm and save its information to MySQL Database. We also have UI to view list of uploaded items and function to delete specific file.&lt;br&gt;
Read more&lt;br&gt;
&lt;a href="https://ozenero.com/django-how-to-upload-file-using-modelform-tutorial-mysql"&gt;https://ozenero.com/django-how-to-upload-file-using-modelform-tutorial-mysql&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Basic server side caching using Redis in nodejs</title>
      <author>Utkarsh Singh</author>
      <pubDate>Tue, 23 Nov 2021 11:20:21 +0000</pubDate>
      <link>https://dev.to/singhutkarshh/basic-server-side-caching-using-redis-4e1f</link>
      <guid>https://dev.to/singhutkarshh/basic-server-side-caching-using-redis-4e1f</guid>
      <description>&lt;p&gt;Caching is the process of storing copies of files in a cache, or temporary storage location, so that they can be accessed more quickly. &lt;br&gt;
Caching helps us in making our website more faster, respond to user queries faster by acting as a middleware between server and database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QfVKxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeahoy.com/img/cache-aside.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QfVKxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeahoy.com/img/cache-aside.png" alt="Caching process" width="763" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is commonly two types of caching :-&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Server side caches are generally used to avoid making expensive database operations repeatedly to serve up the same content to lots of different clients. &lt;/p&gt;

&lt;p&gt;2) Client side caches are used to avoid transferring the same data over the network repeatedly.&lt;/p&gt;

&lt;p&gt;Today we will learn basic server side caching using redis(a fast, open source, in-memory, key-value data store).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Installing Redis:-&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly we will need to install redis before using it in our project.&lt;/p&gt;

&lt;p&gt;Installing redis on Mac using Homebrew -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install redis
brew services start redis
redis-server /usr/local/etc/redis.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Installing redis on Windows -&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install redis-server
sudo service redis-server restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Installing redis on ubuntu -&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt install redis-server
sudo nano /etc/redis/redis.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the file, find the supervised directive. This directive allows you to declare an init system to manage Redis as a service, providing you with more control over its operation. The supervised directive is set to no by default. Since you are running Ubuntu, which uses the systemd init system, change this to systemd:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;. . .

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not enable continuous liveness pings back to your supervisor.
supervised systemd

. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally restart redis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart redis.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;1)&lt;/em&gt;&lt;/strong&gt; In the project folder initialise the project using npm init and install express, redis and node-fetch(same as fetch in javascript for making requests to rest clients ). Also install nodemon as dev dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
npm install --save express redis
npm install --dev nodemon 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;2)&lt;/em&gt;&lt;/strong&gt; In the project folder paste this code in app.js importing express , nodefetch and redis and start basic server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const redis = require("redis");
const fetch = require("node-fetch");

app.get("/", (req, res) =&amp;gt; {
    res.status(200).send("This is homepage!");
})

app.listen(8080, () =&amp;gt; {
     console.log("Server started!");
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;3)&lt;/em&gt;&lt;/strong&gt; Create a redis client passing default redis port(6379) as parameter and also create a new route(/post) that will fetch data from &lt;a href="https://api.github.com/users"&gt;https://api.github.com/users&lt;/a&gt; and send data as response.&lt;br&gt;
We will cache this data on our first visit to server and after that in all visits we will check if data is stored in cache or not . If it is stored we will not fetch it instead send response from cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const redis = require("redis");
const fetch = require("node-fetch");

const client = redis.createClient(6379);

app.get("/posts", (req, res) =&amp;gt; {
    console.log("fetching data")    // this will tell uswe are fetching data  from api
    fetch(`https://api.github.com/users`,((response)=&amp;gt;{
       const data = response.json();
       client.set("userData",data);   // save data(key,value pair) in redis in form of cache

     res.send({data:data});
   })
})

app.listen(8080, () =&amp;gt; {
     console.log("Server started!");
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used client.set(key,value) for saving data in redis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4)&lt;/em&gt;&lt;/strong&gt; We will now create a middleware and add it in "/post" route for checking if cache already exists.If data is already present in cache we will return it directly else we will leave our middleware and fetch it from the route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const checkDataInCache = (req,res,next) =&amp;gt;{
  const  data = client.get("userData"); //get data from cache and check if it exists
  if(data !== null){
    res.send({data:data});
  }else{
    next();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are almost done with our code(full code given at last) and now we will test it.&lt;/p&gt;

&lt;p&gt;If we send a get request at "/posts" at first we will see log as " fetching .." that  shows that we are fetching data from api.&lt;br&gt;
But after that in all requests there will be no log and data will be loaded more quickly.&lt;br&gt;
(We can check for the speed by going in console and them network).&lt;/p&gt;

&lt;p&gt;This was basic representation of how to use caching.Full code given below.&lt;br&gt;
Hope it helps!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const redis = require("redis");
const fetch = require("node-fetch");

const client = redis.createClient(6379);

app.get("/posts",checkDataInCache, (req, res) =&amp;gt; {
    console.log("fetching data")    // this will tell us if we are fetching data  from api
    fetch(`https://api.github.com/users`,((response)=&amp;gt;{
       const data = response.json();
       client.set("userData",data);   // save data(key,value pair) in redis in form of cache

     res.send({data:data});
   })
})

const checkDataInCache = (req,res,next) =&amp;gt;{
  const  data = client.get("userData"); //get data from cache and check if it exists
  if(data !== null){
    res.send({data:data});
  }else{
    next();
  }
}
app.listen(8080, () =&amp;gt; {
     console.log("Server started!");
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>node</category>
      <category>redis</category>
      <category>caching</category>
    </item>
  </channel>
</rss>
