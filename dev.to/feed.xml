<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Bits of Xperience: Supercharged Page Custom Data Fields</title>
      <author>Sean G. Wright</author>
      <pubDate>Mon, 27 Sep 2021 14:12:57 +0000</pubDate>
      <link>https://dev.to/wiredviews/bits-of-xperience-supercharged-page-custom-data-fields-2h4h</link>
      <guid>https://dev.to/wiredviews/bits-of-xperience-supercharged-page-custom-data-fields-2h4h</guid>
      <description>&lt;p&gt;Kentico Xperience's custom Page Types let us model a site's content using a combination of powerful built-in Form Controls and the flexible structuring of information in a site's Content Tree.&lt;/p&gt;

&lt;p&gt;Usually, with Page Type fields, each field maps to one value (as a column in a database table), and each Page Type has a unique set of fields. But, what if we want to store multiple fields in a single database column, or have multiple Page Types that store data in a single location, making it easy to query 🤔?&lt;/p&gt;

&lt;p&gt;There might not be an out-of-the-box solution, but fortunately, with a little code and configuration 🤓, we can use Page "Custom Data" to achieve both of these things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to jump to the solution, check out our new NuGet package that does all the coding for you, &lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-will-we-learn"&gt;
  &lt;/a&gt;
  📚 What Will We Learn?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What are Page "Custom Data" fields?&lt;/li&gt;
&lt;li&gt;What do the "Custom Data" Page fields lack?&lt;/li&gt;
&lt;li&gt;Using Global Events with Page "Custom Data"&lt;/li&gt;
&lt;li&gt;Using Custom Form Controls and a Control Extender&lt;/li&gt;
&lt;li&gt;Storing Page data directly in "Custom Data" fields&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-page-custom-data-fields"&gt;
  &lt;/a&gt;
  ❓ What are Page "Custom Data" fields?
&lt;/h2&gt;

&lt;p&gt;Before we get going, let's level set. Page "Custom Data" fields are the &lt;code&gt;DocumentCustomData&lt;/code&gt; column in the &lt;code&gt;CMS_Document&lt;/code&gt; table and the &lt;code&gt;NodeCustomData&lt;/code&gt; column in the &lt;code&gt;CMS_Tree&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;Anything in, or related to, the &lt;code&gt;CMS_Tree&lt;/code&gt; table is going to apply to all cultures for a Page in the Content Tree, and likewise, anything in, or related to, the &lt;code&gt;CMS_Document&lt;/code&gt; table is going to be specific to a single culture. Many sites only have a single culture, so this distinction might not be something you're used to thinking about 🤨.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more about the &lt;a href="https://docs.xperience.io/custom-development/working-with-pages-in-the-api/page-database-structure"&gt;Kentico Xperience Page database architecture&lt;/a&gt; 🧐.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All "Custom Data" database columns (there are many in non-Page ones Xperience) have an XML structure, and the C# API to interact with them works with a &lt;code&gt;XmlData&lt;/code&gt; container behind the scenes, almost like a &lt;code&gt;string&lt;/code&gt;-keyed dictionary.&lt;/p&gt;

&lt;p&gt;"Custom Data" columns let us switch from a relational database architecture to more of a document structure where the schema of the data isn't defined in the database, but instead in our code.&lt;/p&gt;

&lt;p&gt;It would be great 👍🏾 to leverage this alternate way of storing data to achieve what was discussed earlier (multiple values per column and Pages storing field values for multiple Page Types in the same location, instead of separate Page Type database tables).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%83-what-do-the-page-custom-data-page-fields-lack"&gt;
  &lt;/a&gt;
  🗃 What do the Page "Custom Data" Page Fields Lack?
&lt;/h2&gt;

&lt;p&gt;First, let's review why we can't 😞 use Page "Custom Data" fields as they currently exist in Xperience.&lt;/p&gt;

&lt;p&gt;If we look at the the documentation on the features of the &lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/reference-field-editor#ReferenceFieldeditor-Creatingnewfields"&gt;field editor&lt;/a&gt;, which is used for creating fields for custom Page Types, we can see there are a couple options for the "Field type". The one we are interested in is the "Page Field":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Page field – only available for page type fields. Allows you to choose a general page column from the &lt;code&gt;CMS_Tree&lt;/code&gt; or &lt;code&gt;CMS_Document&lt;/code&gt; table, and link it to the page field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When creating a new Page Type field and selecting a &lt;em&gt;Field type&lt;/em&gt; of &lt;em&gt;Page field&lt;/em&gt; we can select either &lt;code&gt;Page fields&lt;/code&gt; or &lt;code&gt;Node fields&lt;/code&gt; for the Group. This equates to columns from the &lt;code&gt;CMS_Document&lt;/code&gt; and &lt;code&gt;CMS_Tree&lt;/code&gt; tables.&lt;/p&gt;

&lt;p&gt;If we select &lt;code&gt;Page fields&lt;/code&gt; and then pick the &lt;em&gt;Field name&lt;/em&gt; of &lt;code&gt;DocumentCustomData&lt;/code&gt;, we can start interacting directly with this value for each Page of the given Page Type 😀.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8EGZ3Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qfvguiohzrzczm4leg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8EGZ3Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qfvguiohzrzczm4leg.jpg" alt="Page Type field editor using DocumentCustomData directly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the XML schema of these fields is flexible, there's no special "Custom Data" Form Control 😦 that let's us modify that XML in a way that is friendly to Content Managers.&lt;/p&gt;

&lt;p&gt;The best we can do is a Rich Text editor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1I0mdw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ms5sdvphpwjb4zh2yie.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1I0mdw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ms5sdvphpwjb4zh2yie.jpg" alt="Rich text editor showing plain text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it falls way too short of something usable for Content Managers 😣:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rskyt0da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7o5omucm08on69wizry.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rskyt0da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7o5omucm08on69wizry.jpg" alt="Rich text editor showing XML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what are we going to do if we want to leverage the schema flexibility of "Custom Data" fields for a Page? What Form Control gives us a good Content Management experience? Do we have to build a bunch of custom Web Forms Form Controls ☠?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-global-events-and-page-custom-data"&gt;
  &lt;/a&gt;
  📅 Using Global Events and Page "Custom Data"
&lt;/h2&gt;

&lt;p&gt;Fortunately there's a couple different ways we can approach this problem 😅.&lt;/p&gt;

&lt;p&gt;We already have a bunch of pre-built Form Controls which are designed for ease-of-use for Content Managers. Let's make sure our solution includes those 👏🏼 and doesn't require us to rewrite them!&lt;/p&gt;

&lt;p&gt;Let's create a new field on our Page Type named &lt;code&gt;ArticleIsInSitemap&lt;/code&gt;, using all the standard Page Type field functionality:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCrt0aFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otf3ssd2rnx87e2t6t3o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCrt0aFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otf3ssd2rnx87e2t6t3o.jpg" alt="Page Type field dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we create new fields on our Page Type and use the appropriate standard Form Controls for those fields, we can get a solid Content Management experience, but the values go into individual database columns in each Page Type's database table 🤦🏽‍♀️ instead of the Page "Custom Data" columns.&lt;/p&gt;

&lt;p&gt;Thankfully, Kentico Xperience has a full set of &lt;a href="https://docs.xperience.io/custom-development/handling-global-events"&gt;Global Events&lt;/a&gt; that allow developers to react to things happening within the system 👨🏿‍🔬. We can use these events to copy data from our Page Type fields to the "Custom Data" XML structures of the Page.&lt;/p&gt;

&lt;p&gt;Let's create a Custom Module that will give us a place to react to these events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS.DataEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS.DocumentEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMSApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;RegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;CMSApp&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentEventsModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;DocumentEvents&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Insert_Before&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;DocumentEvents&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Update_Before&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update_Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Insert_Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both of the event handlers above let us run our logic when any Page is inserted or updated with the following method:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;article&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsInSitemap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsInSitemap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it! Every time an Article is inserted into the Content Tree or updated, the value in &lt;code&gt;ArticleIsInSitemap&lt;/code&gt; will be copied to an XML element in &lt;code&gt;CMS_DocumentCustomData&lt;/code&gt; 😊, which will look like this in the database:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;CustomData&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;IsInSitemap&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/IsInSitemap&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/CustomData&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What's the benefit here? Don't we already have the value in the &lt;code&gt;DancingGoatCore_Article&lt;/code&gt; table's &lt;code&gt;ArticleIsInSitemap&lt;/code&gt; column?&lt;/p&gt;

&lt;p&gt;Well, for data that determines whether or not a Page is in the sitemap, we want to be able to query across &lt;strong&gt;all&lt;/strong&gt; Pages of the site, not just  Articles, so that we generate the correct &lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;XML sitemap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we have a column in each table for all of our custom Page Types, we'd end up with a real ugly SQL &lt;code&gt;UNION&lt;/code&gt; to get all the Pages in the sitemap. By copying the value to &lt;code&gt;DocumentCustomData&lt;/code&gt;, we ensure the full sitemap can be generated by &lt;em&gt;only&lt;/em&gt; querying the &lt;code&gt;CMS_Document&lt;/code&gt; table 💪🏻:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CMS_Document&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;CAST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'(//CustomData/IsInSitemap/text())[1]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Checkout Microsoft's documentation to read about &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/xml/xml-data-type-methods?view=sql-server-ver15"&gt;querying XML in SQL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is great 👍🏾! But it would be &lt;em&gt;really&lt;/em&gt; great if we didn't have to have an extra database table column per-Page Type and duplicate this data. We would prefer to write directly to the Page "Custom Data" field 😏.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%9B-custom-form-controls-and-control-extenders"&gt;
  &lt;/a&gt;
  🎛 Custom Form Controls and Control Extenders
&lt;/h2&gt;

&lt;p&gt;Lucky for us, Kentico Xperience provides a convenient feature in the CMS architecture - &lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/inheriting-from-existing-form-controls"&gt;Control Extenders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Control Extenders let us enhance the functionality of inherited Form Controls. But what does that mean?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OQSNhk5ICTI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can create new Form Controls in the Administration application, with either new code or inheriting the code and functionality from an existing Form Control. The 2nd option is preferable because it means less work for us 😄!&lt;/p&gt;

&lt;p&gt;When we create a new Form Control that inherits from another, we can apply a Control Extender to it. A Control Extender is a component that wraps the original Form Control and gets to intercept interactions with the Control 🧐.&lt;/p&gt;

&lt;p&gt;This is a valuable feature for us, because it will let us source the Control's value from &lt;code&gt;DocumentCustomData&lt;/code&gt; when it is read and write it to &lt;code&gt;DocumentCustomData&lt;/code&gt; when the Control value is updated - all without modifying the code or functionality of the original control. We can also apply this Control Extender to &lt;em&gt;any&lt;/em&gt; inheriting Form Control 😮.&lt;/p&gt;

&lt;p&gt;In summary, this is what we want to accomplish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔ Create a Control Extender that redirects interactions with the Form Control's value to the &lt;code&gt;DocumentCustomData&lt;/code&gt; field and store the value in an XML element with the same name as the field's name&lt;/li&gt;
&lt;li&gt;✔ Create a new Form Control that inherits from the standard Check box Form Control and apply the Control Extender to the new Form Control&lt;/li&gt;
&lt;li&gt;✔ Use the new Form Control as the control for our &lt;code&gt;Article&lt;/code&gt; Page Type &lt;code&gt;IsInSitemap&lt;/code&gt; field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%97-control-extender"&gt;
  &lt;/a&gt;
  🏗 Control Extender
&lt;/h3&gt;

&lt;p&gt;The code for the Control Extender is pretty simple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomDataControlExtender&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;ControlExtender&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormEngineUserControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// logic here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are multiple events the Control emits that we can register event handlers for and when the underlying Form Control initializes, we register our event handlers in &lt;code&gt;Control_Init&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Control_Init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Control_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnGetControlValue&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Form_OnGetControlValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnAfterDataLoad&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Form_OnAfterDataLoad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to be creating our Page Type field as a "Field without database representation", which means it won't be listed in the &lt;code&gt;FieldControls&lt;/code&gt; or &lt;code&gt;ColumnNames&lt;/code&gt; collections that get processed when we load/save our Form, so we explicitly add it.&lt;/p&gt;

&lt;p&gt;This way the Form treats our field as though it needs to be persisted/retrieved just like the other ones.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Form_OnAfterDataLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Form_OnGetControlValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FormEngineUserControlEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we define two event handlers - the first supplies the Form Control value from the correct Page "Custom Data" field when the value is loaded by the Control, and the second accepts the value coming from the Control and stores it in the correct Page "Custom Data" field.&lt;/p&gt;

&lt;p&gt;After our interception, the Page gets created or saved and the field's value is saved along with it, except it's inside &lt;code&gt;DocumentCustomData&lt;/code&gt; and not a Page Type specific database column 🤩.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inheriting-a-form-control"&gt;
  &lt;/a&gt;
  👵🏽 Inheriting a Form Control
&lt;/h3&gt;

&lt;p&gt;Inheriting from an existing Form Control and applying a Control Extender only takes a few steps!&lt;/p&gt;

&lt;p&gt;First, navigate to the "Administration interface" module in the CMS application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1yYXiyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r470gaphltyfcxin3zy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1yYXiyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r470gaphltyfcxin3zy.jpg" alt="Administration interface menu item"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then create a new "inheriting" Form Control, using the Check box Form Control as the source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onxgiusD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay5cva2ijs9wg65kwh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onxgiusD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay5cva2ijs9wg65kwh.jpg" alt="New Form Control dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to select the Control Extender you just created!&lt;/p&gt;

&lt;p&gt;Finally, select the places where this Form Control can be used. For our example it will be for "Boolean (Yes/No)" fields for "Page Types":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCLyRb9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvdysx1zwykg7ihvufs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCLyRb9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvdysx1zwykg7ihvufs.jpg" alt="Form Control assignment configuration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-a-page-custom-data-form-control"&gt;
  &lt;/a&gt;
  📃 Using a Page "Custom Data" Form Control
&lt;/h3&gt;

&lt;p&gt;Now we can create the new field for our Page Type 😊!&lt;/p&gt;

&lt;p&gt;Be sure to select &lt;strong&gt;"Field without database representation"&lt;/strong&gt; for the Field type (otherwise the value will be saved in a newly created database table column for the Page Type 😬) and use our new extended Form Control (otherwise the value won't be saved &lt;em&gt;at all&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Whatever we name this new field will end up being the XML element that the value is stored in, so a field named &lt;code&gt;ABC&lt;/code&gt; would end up as &lt;code&gt;&amp;lt;CustomData&amp;gt;&amp;lt;ABC&amp;gt;value&amp;lt;/ABC&amp;gt;&amp;lt;/CustomData&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgVmXs2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivhidsqpv6ahumn8v2vy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgVmXs2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivhidsqpv6ahumn8v2vy.jpg" alt="New Page Type field dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! When we save a Page of this Page Type, this specific field will only be saved to &lt;code&gt;DocumentCustomData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can add as many "Custom Data" fields to a Page Type as we want, and if we define the same field on multiple Page Types, they'll all put data of the same XML schema in our &lt;code&gt;CMS_Document.DocumentCustomData&lt;/code&gt; database column.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🏁 Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope by now both the motivation and process for using Page "Custom Data" fields as the backing store of Page Type fields are clear 🔍.&lt;/p&gt;

&lt;p&gt;There's a few steps to set everything up - create a Control Extender, define new inheriting Form Controls using the Control Extender, and add a fields to Page Types using the extended Form Control - but the initial setup definitely pays off. It's worth noting the first step (creating a Control Extender) only needs performed once, and the second (creating an extended Form Control) only once per Form Control type (eg Text Box, Check Box, Page Selector).&lt;/p&gt;

&lt;p&gt;Our "Sitemap" example saves us from performing a large SQL &lt;code&gt;UNION&lt;/code&gt; when we generate a site's XML sitemap, but that's not the only use case.&lt;/p&gt;

&lt;p&gt;What about &lt;a href="https://ogp.me/"&gt;Open Graph&lt;/a&gt; metadata values for a Page - wouldn't it be nice to not have to create a separate database column for each value?&lt;/p&gt;

&lt;p&gt;Or, a standard field inherited from a base Page Type that we aren't going to be likely to filter in SQL - like a 'primary image path'.&lt;/p&gt;

&lt;p&gt;We could even make mixins, letting multiple Page Types share sets of fields and then access those field values across Page Types by querying the &lt;code&gt;CMS_Document&lt;/code&gt; table only 🧐.&lt;/p&gt;

&lt;p&gt;Are you thinking about implementing this yourself? Well, it's dangerous to go alone... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFEU83ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ElSNi8FdSB7RS/giphy.gif%3Fcid%3Decf05e47ef4jrqak87upnitkvd0qjmetu2ynz0iu87w40p54%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFEU83ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ElSNi8FdSB7RS/giphy.gif%3Fcid%3Decf05e47ef4jrqak87upnitkvd0qjmetu2ynz0iu87w40p54%26rid%3Dgiphy.gif%26ct%3Dg" alt="zelda meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, take this... the &lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;, a NuGet package containing an enhanced version of the above Control Extender with detailed setup instructions 👐.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading 🙏!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/reference-field-editor#ReferenceFieldeditor-Creatingnewfields"&gt;Creating new fields in the Kentico Xperience field editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/handling-global-events"&gt;Kentico Xperience Global Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;Google - XML sitemaps Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/xml/xml-data-type-methods?view=sql-server-ver15"&gt;SQL Server - xml Data Type Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/inheriting-from-existing-form-controls"&gt;Kentico Xperience - Control Extenders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We've put together a list over on &lt;a href="https://github.com/Kentico/Home/blob/master/RESOURCES.md"&gt;Kentico's GitHub account&lt;/a&gt; of developer resources. Go check it out!&lt;/p&gt;

&lt;p&gt;If you are looking for additional Kentico content, checkout the Kentico or Xperience tags here on DEV.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5339"&gt;
  
    .ltag__tag__id__5339 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kentico" class="ltag__tag__link"&gt;kentico&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__tag ltag__tag__id__57801"&gt;
  
    .ltag__tag__id__57801 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/xperience" class="ltag__tag__link"&gt;xperience&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or my &lt;a href="https://dev.to/seangwright/series"&gt;Kentico Xperience blog series&lt;/a&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/8185"&gt;Kentico Xperience Xplorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/9483"&gt;Kentico Xperience MVC Widget Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/10963"&gt;Kentico Xperience Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>xperience</category>
      <category>kentico</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to stop procrastinating and change your life</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 27 Sep 2021 14:04:17 +0000</pubDate>
      <link>https://dev.to/noriller/how-to-stop-procrastinating-and-change-your-life-463m</link>
      <guid>https://dev.to/noriller/how-to-stop-procrastinating-and-change-your-life-463m</guid>
      <description>&lt;p&gt;I'm sorry.&lt;/p&gt;

&lt;p&gt;Why I'm sorry? Because I'm late this week!&lt;/p&gt;

&lt;p&gt;I wanted to make this (post writing, I mean) a weekly deal, every weekend I would go and post.&lt;/p&gt;

&lt;p&gt;First time? No pressure, I just made it and posted it.&lt;/p&gt;

&lt;p&gt;Second time? I stalled to the limit, but managed to release it in time.&lt;/p&gt;

&lt;p&gt;Third, this one? I remembered when it was already late enough and started rambling... It was way past my sleep time and I was just making a mess. I stopped and gone to sleep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-this-sound-familiar-to-you"&gt;
  &lt;/a&gt;
  Does this sound familiar to you?
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#do-you-show-up-late-to-work"&gt;
  &lt;/a&gt;
  Do you show up late to work?
&lt;/h2&gt;

&lt;p&gt;I'm guessing you would only show up late if something extreme happened right?&lt;/p&gt;

&lt;p&gt;Then, why can't we be more punctual with the stuff for &lt;strong&gt;US&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-not-just-about-routine"&gt;
  &lt;/a&gt;
  It's not just about routine!
&lt;/h3&gt;

&lt;p&gt;Routine does play a part, yes. But it's more than that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-people"&gt;
  &lt;/a&gt;
  It's about PEOPLE!
&lt;/h3&gt;

&lt;p&gt;People depending on &lt;strong&gt;YOU&lt;/strong&gt;! Or you just not wanting to let people down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-honoring-your-promises-or-debts"&gt;
  &lt;/a&gt;
  It's about honoring your promises (or debts)!
&lt;/h3&gt;

&lt;p&gt;You show up to work because it's a contract (a promise if you will), it's also a way to earn money to honor your debts (a promise of payment).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-fun-and-a-major-part-of-your-life"&gt;
  &lt;/a&gt;
  It's fun and a major part of your life!
&lt;/h3&gt;

&lt;p&gt;This could be controversial... not everyone can work on what they really wanted or other factors make it not being "fun".&lt;/p&gt;

&lt;p&gt;But it IS a major part of your life and it should be fun, or else it loses meaning.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-we-dont-have-time-for-the-important-stuff"&gt;
  &lt;/a&gt;
  Why we "don't have time" for the important stuff?
&lt;/h2&gt;

&lt;p&gt;The boss needs you to make overtime? Sure boss! (you might not &lt;em&gt;want&lt;/em&gt; to, but you probably will... specially when it's sporadic and &lt;em&gt;they&lt;/em&gt; really, really need you.)&lt;/p&gt;

&lt;p&gt;This is basically the default, working 8 hours a day. But I had a internship of 4 hours a day and also worked almost 9 hours a day. I also worked 6 hours a day and I gotta say... 6 hours is a sweet spot and those extra hours you get I wouldn't trade for anything. That said... I will work 8 hours a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-stuff-outside-work"&gt;
  &lt;/a&gt;
  What about stuff outside work?
&lt;/h3&gt;

&lt;p&gt;Studying? No time!&lt;/p&gt;

&lt;p&gt;Bingeing a series? Hell yeah!&lt;/p&gt;

&lt;p&gt;Running? To tired...&lt;/p&gt;

&lt;p&gt;Games? I'm ready!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-know-the-drill"&gt;
  &lt;/a&gt;
  You know the drill...
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#what-can-we-even-do"&gt;
  &lt;/a&gt;
  What can we even do?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-meeting-with-yourself"&gt;
  &lt;/a&gt;
  A meeting with yourself
&lt;/h3&gt;

&lt;p&gt;You know those endless meetings? You attend them because people barged in and put them in &lt;strong&gt;YOUR&lt;/strong&gt; schedule right? How about &lt;strong&gt;YOU&lt;/strong&gt; put a meeting there &lt;strong&gt;YOURSELF&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;That will be your &lt;em&gt;ME&lt;/em&gt; time for you to do stuff for &lt;em&gt;YOU&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-to-announce-to-others"&gt;
  &lt;/a&gt;
  Wait to announce to others
&lt;/h3&gt;

&lt;p&gt;Who never said to someone: "I will do this thing!" and then never again?&lt;/p&gt;

&lt;p&gt;I've read somewhere you might end up with a &lt;em&gt;"mission accomplished"&lt;/em&gt; feeling if you speak of something too soon, you feel like you're already done something and then you just... stop.&lt;/p&gt;

&lt;p&gt;So, wait for it. Have something concrete to show and when you do announce it... make the people you've announce it to &lt;em&gt;want more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If they start being dependent on that, all that about not letting people down and about honoring your promises will kick in and when you're feeling like procrastinating, that will help you keep going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-it-worth-your-while"&gt;
  &lt;/a&gt;
  Make it worth your while
&lt;/h3&gt;

&lt;p&gt;For work, we have money... but why do you want to study? &lt;/p&gt;

&lt;p&gt;What do you hope to achieve with whatever you want to do?&lt;/p&gt;

&lt;p&gt;If you can focus on that... you can really do it.&lt;/p&gt;

&lt;p&gt;For me, these posts are a way to connect to people, to share experiences and knowledge and to make myself visible to the world. I want to change my life! I might find a new opportunity or even more. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nothing-is-too-small"&gt;
  &lt;/a&gt;
  Nothing is too small!
&lt;/h2&gt;

&lt;p&gt;But what if all you want to learn how to juggle... just because? &lt;/p&gt;

&lt;p&gt;Any challenge gives you a thrill.&lt;/p&gt;

&lt;p&gt;Well, satisfaction in itself is something worth going for too.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mXuVFrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb0vze1tmvesteacr8ez.png" alt="Buy me a Coffe!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@bullterriere?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Simon Hurry&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>procrastination</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Laser Focus priority strategy</title>
      <author>Cihat Gündüz</author>
      <pubDate>Mon, 27 Sep 2021 14:03:47 +0000</pubDate>
      <link>https://dev.to/jeehut/laser-focus-priority-strategy-31ok</link>
      <guid>https://dev.to/jeehut/laser-focus-priority-strategy-31ok</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Have you ever worked on a bigger change for an app and struggled with the release schedule? Have you ever wanted to get feedback from users early but weren't sure when exactly the right time is? Here's a simple but effective prioritization technique that can help slim down your scope and give you more confidence in it with different stages that can be mapped to Alpha, Beta &amp;amp; Release.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are lots of prioritization techniques that aim to solve different problems. You've probably already used some form of value vs. effort-based prioritization techniques, such as &lt;a href="https://www.productplan.com/glossary/rice-scoring-model/"&gt;RICE&lt;/a&gt;. Maybe you've even asked your target audience with a purposefully designed survey to learn from them, e.g. using the &lt;a href="https://en.wikipedia.org/wiki/Kano_model"&gt;KANO model&lt;/a&gt;. Every prioritization technique has its use cases and maybe they already helped you make a lot of useful decisions.&lt;/p&gt;

&lt;p&gt;But these strategies are designed for a &lt;strong&gt;higher-level&lt;/strong&gt; kind of &lt;strong&gt;prioritization&lt;/strong&gt;, as in deciding if you should be implementing feature A or feature B first or if feature C is even needed in the next version at all. They &lt;strong&gt;don't scale down&lt;/strong&gt; to tasks or even sub-tasks of your features though, so it's quite possible to do too much within a specific feature. Also, they don't help answer when you can start putting the feature in users' hands for early feedback to apply user-focused approaches, such as the &lt;a href="https://en.wikipedia.org/wiki/Lean_startup"&gt;Lean Startup&lt;/a&gt; methodology. One could of course opt for a method that is independent of scale, like the &lt;a href="https://en.wikipedia.org/wiki/MoSCoW_method"&gt;MoSCoW method&lt;/a&gt;, but their categories wouldn't be easy to rate because they're so abstract that different people would have different expectations for each category.&lt;/p&gt;

&lt;p&gt;The goal of the Laser Focus prioritization strategy is to provide clear rating categories, help with task scopes and provide an easy to apply method for interpretation. All three aspects together help you stay laser-focused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-categories"&gt;
  &lt;/a&gt;
  Laser Focus categories
&lt;/h2&gt;

&lt;p&gt;There are three goals we want to reach with our categories: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Decide which tasks are &lt;strong&gt;in the scope&lt;/strong&gt; of the currently planned release. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prioritize&lt;/strong&gt; tasks needed for an Alpha or Beta version &lt;strong&gt;higher&lt;/strong&gt; than the others.&lt;/li&gt;
&lt;li&gt;The Categories names should have an actionable, self-contained &lt;strong&gt;meaning&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're suggesting the following categories which fulfill all requirements:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQYUGd45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv363gqbqzboan3ocvl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQYUGd45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv363gqbqzboan3ocvl1.png" alt="VECtOR"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vital"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Absolute minimum needed for the first round of testing. Can be ugly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This allows for shipping a product with just "Vital" features or tasks implemented to a small group of testers to get feedback early. Of course, the scope of this Alpha testing should be made clear stating what basic features or tasks are still missing so they are not unnecessarily reported by the testers. But the vitals of the product or feature can be tested already and we get a first round of feedback if we're headed in the right direction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#essential"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Core aspects required for basic functionality. Can have rough edges.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A second and bigger round of testing can be started as soon as all "Essential" features or tasks are implemented. At this level, no specific testing scope needs to be communicated, it should be enough to call the version a "Beta" version where the base features are available but still a lot of things are missing or incomplete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ironing out rough-edges and completing aspects of functionality.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The "Completing" level defines the scope where the final product is ready to be released. In some situations, e.g. if a new version was announced for a specific date, the product can also be released while still, some "Completing" tasks are open, but then it should be publicly marked as "Beta". Typically this level includes all kinds of features or tasks that are important for a bigger customer base but are not relevant to evaluate the core of the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Nice-to-haves that can be delayed to later (versions) or skipped entirely.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The "Optional" level has the notion that the features or tasks rated as such are wanted things, but that they are in no way necessary to release a finalized version of a product, even long term. Hence they can also be easily delayed or scrapped if needed as per the resources of the team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retracting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Retracting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Nice-to-haves (at first sight) that can (potentially) cause more harm than improve things.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike "Optional", features or tasks rated as "Retracting" should be &lt;em&gt;actively avoided&lt;/em&gt;. That means it can make sense to document or keep them somewhere including the rationale why they should be avoided for long-term decision making. This saves time when the same idea comes up again sometime in the future. Also, if multiple people are involved in the rating, it can help identify the tasks where discussion might be necessary to clarify the effect of a task on the product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-matrix"&gt;
  &lt;/a&gt;
  Laser Focus matrix
&lt;/h2&gt;

&lt;p&gt;The second pillar of the Laser Focus strategy is its &lt;strong&gt;multi-dimensional scalability&lt;/strong&gt;. To explain what this means and why it is important, let's apply the categories we have so far with an example: Let's develop a stopwatch app to track time for different things done throughout a day. This is the initial list of feature ideas, rated using the Laser Focus categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create projects → &lt;strong&gt;Essential&lt;/strong&gt; (essential to app, but pre-filled projects enough for first test)&lt;/li&gt;
&lt;li&gt;Edit projects → &lt;strong&gt;Completing&lt;/strong&gt; (not a necessity for testing purposes, but for final release)&lt;/li&gt;
&lt;li&gt;Delete projects → &lt;strong&gt;Completing&lt;/strong&gt; (cleanup task, not needed for testing purposes, but for final)&lt;/li&gt;
&lt;li&gt;Start/Stop a timer → &lt;strong&gt;Vital&lt;/strong&gt; (core idea of app, vital part of the app)&lt;/li&gt;
&lt;li&gt;Select a project for the timer → &lt;strong&gt;Vital&lt;/strong&gt; (without selecting project, app idea not fulfilled)&lt;/li&gt;
&lt;li&gt;Edit past tracked times → &lt;strong&gt;Retracting&lt;/strong&gt; (V2 with competitive feature, risk of cheating)&lt;/li&gt;
&lt;li&gt;Delete past tracked times → &lt;strong&gt;Optional&lt;/strong&gt; (nice to have, no risk of cheating as no added time)&lt;/li&gt;
&lt;li&gt;Show historical time tracked on a selected project → &lt;strong&gt;Essential&lt;/strong&gt; (core use case for app)&lt;/li&gt;
&lt;li&gt;Show projects with the most tracked time → &lt;strong&gt;Essential&lt;/strong&gt; (core use case for app)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks to the categorization, we can already exclude two features from the first release and recognized even a feature we should probably never implement (6) that should be permanently documented. But more importantly, we now know that 4 and 5 are the "Vital" features to implement first. Let's start working on their sub-tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start/Stop a timer → &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design Start/Stop button layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design Start/Stop button coloring &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Design Start/Stop button pulsating shadow effect (animations)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button coloring &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button pulsating shadow effect (animations)&lt;/li&gt;
&lt;li&gt;Setup basic tracked time database models&lt;/li&gt;
&lt;li&gt;Persist Start/Stop actions into the database&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Select a project for the timer → &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Persist selected project into the tracked time database model&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All clear, let's get started, right? &lt;em&gt;Right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No. I'm sure you noticed it already while reading/skimming through them. There's a problem. We have prioritized the features thinking about what's really necessary for being testable, for putting the app into users' hands. But now we have the same problem again, just on a different level. These tasks (and potentially also their sub-tasks) aren't all "Vital" for our very first version to put in users' hands. How can we fix this? Should we apply another rating for the tasks, too?&lt;/p&gt;

&lt;p&gt;Yes, absolutely! This is actually a requirement in the Laser Focus strategy: Apply the rating on all levels down the road! Not necessarily above levels, where you are allowed to choose any alternative prioritization technique. But the lower levels from wherever you want to start from should all be rated like this. Let's assign the Laser Focus categories to the tasks, too and then see what this means for overall priority:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start/Stop a timer → &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design Start/Stop button layout (low fidelity) → &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design Start/Stop button coloring &amp;amp; icons (high fidelity) → &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design Start/Stop button pulsating shadow effect (animations) → &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button layout (low fidelity) → &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button coloring &amp;amp; icons (high fidelity) → &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button pulsating shadow effect (animations) → &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Setup basic tracked time database models → &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Persist Start/Stop actions into database → &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Select a project for the timer → &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity) → &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity) → &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement project selector navigation &amp;amp; layout (low fidelity) → &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement project selector shapes, colors &amp;amp; icons (high fidelity) → &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Persist selected project into tracked time database model → &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's important to note that the reference value for the ratings of the tasks was the feature because it's the direct parent. This means that I asked myself the question "Is persisting Start/Stop actions into database vital or essential &lt;em&gt;to the feature&lt;/em&gt; Start/Stop a timer?" and not to the app or anything else. This makes answering the questions much easier.&lt;/p&gt;

&lt;p&gt;Let's visualize these two different levels of rating with a simple matrix. On the X-axis we put the ratings of the features. On the Y-axis the ratings of the tasks. The circles represent the tasks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4LInRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lsufkxgoiiuwxicxlw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4LInRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lsufkxgoiiuwxicxlw5.png" alt="Example Matrix"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see, tasks 4a, 4d, 5a, and 5c are in the bottom left field, the "Vital-Vital" field, or short "VV". The field's background is tinted red. It contains all tasks the focus should be on first. Once they're all implemented, the very first testing round can begin, the Alpha phase starts.&lt;/p&gt;

&lt;p&gt;The tasks 4g, 4h, and 5e in the yellow-tinted field "Vital-Essential" or short "VE" should be tackled next. Once all tasks in all three yellow-tinted fields are completed, the Beta phase starts.&lt;/p&gt;

&lt;p&gt;The "VC" field with its "Completing" tasks for the "Vital" features should be tackled last among the tasks we defined so far. Once all tasks in all green-tinted fields are done, it's Release time.&lt;/p&gt;

&lt;p&gt;In the above example, we skipped the tasks for all non-Vital features. If we had rated them also, the full matrix could have looked something like this, including also the "Retracting" rating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GB4b-NaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgxx6ldb4ff81zrht2md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GB4b-NaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgxx6ldb4ff81zrht2md.png" alt="General Matrix"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can see how the Alpha, Beta, and Release tasks are circularly layered around the origin point (bottom left corner), visually providing us a priority for each task based on its distance to the origin. This easily scales to a third axis if for example sub-tasks were added to each task. Formally speaking, this scales to any number of dimensions. To calculate the overall category of any given element, just look up all ancestors and just select the lowest priority as the overall category of the "atomic" (lowest level) element. For example, imagine a sub-task with the category rating "Essential", a parent task rated "Vital" and its parent feature rated "Completing". Overall, the lowest priority is "Completing", so this is the overall category of the sub-task.&lt;/p&gt;

&lt;p&gt;Calculating the overall category alone can lead to many tasks being on the same level, especially at "Completing" where we have 5 different fields. A way of prioritizing features or tasks within the same category is by calculating the average of its own category combined with that of all its ancestor's categories. To do this, let's assign each category a number (from 1 "Vital" to 5 "Retracting"), the lowest level (e.g. a sub-task) can then be represented by a tuple, e.g. &lt;code&gt;(2, 1, 3)&lt;/code&gt; in the above example. The average of these numbers is simply calculated by &lt;code&gt;(2 + 1 + 3) / 3 = 2.0&lt;/code&gt;. Another task with more ancestors and the same overall "Completing" category might be rated as &lt;code&gt;(3, 2, 3, 1)&lt;/code&gt; and therefore have an average of &lt;code&gt;(3 + 2 + 3 + 1) / 4 = 2.25&lt;/code&gt;, so it should be prioritized lower. The higher the overall average, the lower the priority – that makes a lot of sense as the average number roughly resembles the distance to the origin – the highest possible priority.&lt;/p&gt;

&lt;p&gt;But don't worry, you don't actually have to calculate these averages, there's a simpler way based on the matrix we've seen above with enough precision:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-9ak1X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c648lfmlqhowe2430cfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-9ak1X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c648lfmlqhowe2430cfr.png" alt="Priority Order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above diagram shows in which order the fields should be tackled, based on origin distance. Note that there are two fields placed 2nd, 4th, and 5th each. For these fields, there's a choice to be made that can be different depending on the situation: Should we focus more on adding more features? Or should we focus more on improving the already started features? For a feature focus expansion first, you should continue in direction of the "Feature category", e.g. "EV" before "VE". For improving existing features first, it should be the other way around. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-breakdown"&gt;
  &lt;/a&gt;
  Laser Focus breakdown
&lt;/h2&gt;

&lt;p&gt;In the above section, we learned that categorization on multiple levels is key to the Laser Focus concept. If you try to apply this to your project right away, you may realize though that many or even all of your features or tasks are actually "Vital" or "Essential" to you. If this is the case, then it's a sign that you have probably not efficiently split your tasks yet.&lt;/p&gt;

&lt;p&gt;That's why it's important to break down your tasks the right way before categorizing them. The guiding question you should ask yourself while splitting features into tasks or tasks into sub-tasks should not be restricted to "which steps do I need to make to finalize it". You should also think about the effort for each step and if the effort isn't negligibly small, you might want to consider splitting it away. Sometimes it might seem to be hard doing that, but more often than not, it's a good idea to follow the approach "make it work, then make it better" while splitting the tasks.&lt;/p&gt;

&lt;p&gt;For example, for the above feature "Start/Stop a timer" we could have split it up into 3 tasks: "Design the Start/Stop buttons", "Implement the Start/Stop buttons" and "Persist data". The problem with this is that there are no different levels of completion. It's better to break it down even further. Of course, we could do that as sub-tasks under these tasks, but to make priority calculation easier, it is recommended to do it in fewer levels. So instead we opted for "Design the Start/Stop button &lt;em&gt;layout&lt;/em&gt;", "Implement Start/Stop button &lt;em&gt;layout&lt;/em&gt;" and the same two tasks also for "... coloring &amp;amp; icons" and "... pulsating shadow effect".&lt;/p&gt;

&lt;p&gt;Ask yourself which parts have their own effort and split them so each task is worth being prioritized based on the effort needed. Don't split micro-tasks away, it's not worth prioritizing such small tasks, just keep them as part of another task.&lt;/p&gt;

&lt;p&gt;A proper breakdown is very important for the Laser Focus strategy to be effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Let's sum up the Laser Focus prioritization strategy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Break down&lt;/strong&gt; your features and tasks into smaller steps of different completion levels&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rate them&lt;/strong&gt; on each level with "Vital", "Essential", "Completing", "Optional" or "Retracting"&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visualize or calculate&lt;/strong&gt; the overall priority for the lowest level by considering all ancestors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apply these steps at any given time for your project and it will help you keep focusing on the important things and confidently putting your work-in-progress versions into users' hands early.&lt;/p&gt;

&lt;p&gt;I hope this helps!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was written &lt;strong&gt;by &lt;a href="https://twitter.com/Jeehut"&gt;Cihat Gündüz&lt;/a&gt;&lt;/strong&gt;,&lt;br&gt;
Head of Mobile at &lt;strong&gt;&lt;a href="https://www.papershift.com/"&gt;Papershift&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>prioritization</category>
      <category>efficiency</category>
      <category>focus</category>
    </item>
    <item>
      <title>Simplify your unit tests with auto-mocking and TypeBuilder</title>
      <author>Cesar Aguirre</author>
      <pubDate>Mon, 27 Sep 2021 13:52:26 +0000</pubDate>
      <link>https://dev.to/canro91/simplify-your-unit-tests-with-auto-mocking-and-typebuilder-442b</link>
      <guid>https://dev.to/canro91/simplify-your-unit-tests-with-auto-mocking-and-typebuilder-442b</guid>
      <description>&lt;p&gt;&lt;em&gt;I originally posted an extended version of this post &lt;a href="https://canro91.github.io/2021/06/21/WriteSimplerTestsTypeBuilderAndAutoFixture/"&gt;on my blog&lt;/a&gt; a couple of weeks ago. It's part of a series I've been publishing, called "Unit Testing 101"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Writing tests for services with lots of collaborators can be tedious. I know, I know! You will end up with complex Arrange parts and lots of fakes. Let's see how to write simpler tests using auto-mocking with TypeBuilder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To write simpler tests for services with lots of collaborators, use builder methods to create only the fakes needed in every test. As alternative, use auto-mocking to create a service with its collaborators replaced by fakes or test doubles.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To show auto-mocking, let's bring back our &lt;code&gt;OrderService&lt;/code&gt; class. We used it to show the &lt;a href="https://canro91.github.io/2021/05/24/WhatAreFakesInTesting/"&gt;difference between stubs and mocks&lt;/a&gt;. Again, the &lt;code&gt;OrderService&lt;/code&gt; checks if an item has stock available to then charge a credit card.&lt;/p&gt;

&lt;p&gt;This time, let's add a &lt;code&gt;IDeliveryService&lt;/code&gt; to create a shipment order and a &lt;code&gt;IOrderRepository&lt;/code&gt; to keep track of an order status. With these two changes, our &lt;code&gt;OrderService&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IPaymentGateway&lt;/span&gt; &lt;span class="n"&gt;_paymentGateway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IStockService&lt;/span&gt; &lt;span class="n"&gt;_stockService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDeliveryService&lt;/span&gt; &lt;span class="n"&gt;_deliveryService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IOrderRepository&lt;/span&gt; &lt;span class="n"&gt;_orderRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;OrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPaymentGateway&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;IStockService&lt;/span&gt; &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;IDeliveryService&lt;/span&gt; &lt;span class="n"&gt;deliveryService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;IOrderRepository&lt;/span&gt; &lt;span class="n"&gt;orderRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_paymentGateway&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_stockService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_deliveryService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deliveryService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_orderRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orderRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;OrderResult&lt;/span&gt; &lt;span class="nf"&gt;PlaceOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_stockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsStockAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OutOfStockException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Process payment, ship items and store order status...&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PlaceOrderResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's write a test to check if the payment gateway is called when we place an order. We're using &lt;a href="https://canro91.github.io/2020/08/11/HowToCreateFakesWithMoq/"&gt;Moq to write fakes&lt;/a&gt;. This test will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.VisualStudio.TestTools.UnitTesting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Moq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WithoutAnyBuilders&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestClass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceTestsBefore&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PlaceOrder_ItemInStock_CallsPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;stockService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsStockAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;deliveryService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDeliveryService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orderRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrderRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="n"&gt;deliveryService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="n"&gt;orderRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PlaceOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ProcessPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtmSsr6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1512207736890-6ffed8a84e8d%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxhbGx8fHx8fHx8fHwxNjIzNjkyODcw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtmSsr6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1512207736890-6ffed8a84e8d%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxhbGx8fHx8fHx8fHwxNjIzNjkyODcw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" alt="Men at work"&gt;&lt;/a&gt;&lt;/p&gt;
Let's use builders to write simpler tests. Photo by &lt;a href="https://unsplash.com/@ripato?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ricardo Gomez Angel&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#write-simpler-tests-with-builder-methods"&gt;
  &lt;/a&gt;
  Write simpler tests with Builder methods
&lt;/h2&gt;

&lt;p&gt;One easy alternative to write simpler test is to use builder methods.&lt;/p&gt;

&lt;p&gt;With a builder method, we only create the fakes we need inside our tests. And, inside the builder, we create "empty" fakes for the collaborators we don't need for the tested scenario. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PlaceOrder_ItemInStock_CallsPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;stockService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsStockAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// We add a new MakeOrderService() method&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orderService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;MakeOrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;orderService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PlaceOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ProcessPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Notice we only pass the fakes we need&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;OrderService&lt;/span&gt; &lt;span class="nf"&gt;MakeOrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IStockService&lt;/span&gt; &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IPaymentGateway&lt;/span&gt; &lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;deliveryService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDeliveryService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orderRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrderRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paymentGateway&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;stockService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;deliveryService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;orderRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the &lt;code&gt;MakeOrderService()&lt;/code&gt; builder method, we only deal with the fake we care about in our test, &lt;code&gt;IStockService&lt;/code&gt;. This new method takes care of creating the rest of fakes to comply with the &lt;code&gt;OrderService&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automocking-with-typebuilder"&gt;
  &lt;/a&gt;
  Auto-mocking with TypeBuilder
&lt;/h2&gt;

&lt;p&gt;Builder methods are fine. But, if we have lots of testing scenarios, we need to create builders for every combination of dependencies needed to mock in our tests.&lt;/p&gt;

&lt;p&gt;As alternative to plain builder methods, we can use an special builder to automatically create fakes for every dependency of the tested service. That's why we call this technique auto-mocking. Well, to be precise, I would be auto-faking. You got the idea!&lt;/p&gt;

&lt;p&gt;Let me introduce you, &lt;code&gt;TypeBuilder&lt;/code&gt;. This is a helper class I've been using in one of my client's projects to create services inside our unit tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TypeBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_mocks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ConstructorInfo&lt;/span&gt; &lt;span class="n"&gt;ctor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConstructors&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ParameterInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetParameters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;paramType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParameterType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;paramType&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;mockType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&amp;gt;).&lt;/span&gt;&lt;span class="nf"&gt;MakeGenericType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;ConstructorInfo&lt;/span&gt; &lt;span class="n"&gt;mockCtor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mockType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConstructors&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mockCtor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;paramType&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ctor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TypeBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;WithMock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mockExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockExpression&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="nf"&gt;mockExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TryGetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

            &lt;span class="n"&gt;_mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;TypeBuilder&lt;/code&gt; class uses reflection to find all the parameters in the constructor of the service to build. And, it uses Moq to build fakes for each parameter.&lt;/p&gt;

&lt;p&gt;Let's rewrite our sample test to use the &lt;code&gt;TypeBuilder&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.VisualStudio.TestTools.UnitTesting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Moq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WithTypeBuilder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestClass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceTestsTypeBuilder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PlaceOrder_ItemInStock_CallsPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 1. Create a builder&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;typeBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TypeBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OrderService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;// 2. Configure a IStockService fake with Moq&lt;/span&gt;
            &lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithMock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsStockAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;// 3. Build a OrderService instance&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PlaceOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// 4. Retrieve a fake from the builder&lt;/span&gt;
            &lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ProcessPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what happened. First, we created a builder with &lt;code&gt;var typeBuilder = new TypeBuilder&amp;lt;OrderService&amp;gt;();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we customized the &lt;code&gt;IStockService&lt;/code&gt; fake to always return &lt;code&gt;true&lt;/code&gt; with the &lt;code&gt;WithMock&amp;lt;T&amp;gt;()&lt;/code&gt; method. We did it in these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithMock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IStockService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsStockAvailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, with the method &lt;code&gt;Build()&lt;/code&gt; we got an instance of the &lt;code&gt;OrderService&lt;/code&gt; class with fakes for all its parameters. But, the fake for &lt;code&gt;IStockService&lt;/code&gt; has the behavior we added in the previous step.&lt;/p&gt;

&lt;p&gt;Finally, in the Assert part, we retrieved a fake from the builder with &lt;code&gt;Mock&amp;lt;T&amp;gt;()&lt;/code&gt;. We use it to verify if the payment gateway was called or not. We did this here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;typeBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPaymentGateway&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ProcessPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice we didn't have to write fakes for every collaborator? We only did it for the &lt;code&gt;IStockService&lt;/code&gt;. The &lt;code&gt;TypeBuilder&lt;/code&gt; took care of creating fakes for all others.&lt;/p&gt;

&lt;p&gt;Voilà! That's how we can use auto-mocking with a &lt;code&gt;TypeBuilder&lt;/code&gt; helper class to simplify the Arrange parts of our tests. If you prefer a more robust alternative, use AutoFixture. It's a free and open source library to create test data with support for auto-mocking with Moq. To read how to use AutoFixture for auto-mocking, check my post &lt;a href="https://canro91.github.io/2021/06/21/WriteSimplerTestsTypeBuilderAndAutoFixture/"&gt;Write simpler tests with Type Builders and AutoFixture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To read more content on unit testing, check my &lt;a href="https://canro91.github.io/2021/07/05/UnitTestingBestPractices/"&gt;Unit Testing best practices checklist&lt;/a&gt; and &lt;a href="https://canro91.github.io/2021/08/02/LetsRefactorATest/"&gt;Let's refactor a real test&lt;/a&gt;. And grab a free copy of that checklist on my eBook &lt;a href="https://canro91.github.io/UnitTesting"&gt;Unit Testing 101 - eBook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy testing!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>beginners</category>
      <category>showdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>C# - Enums and Bug Resilience</title>
      <author>Aviad Pineles</author>
      <pubDate>Mon, 27 Sep 2021 13:20:30 +0000</pubDate>
      <link>https://dev.to/paviad/c-enums-and-bug-resilience-2mb7</link>
      <guid>https://dev.to/paviad/c-enums-and-bug-resilience-2mb7</guid>
      <description>&lt;p&gt;Our domain is made of sets. Some sets are trivial such as all integers (&lt;code&gt;int&lt;/code&gt;) or all booleans (&lt;code&gt;bool&lt;/code&gt;) but often we are dealing with sets that are more narrow, for example the possible states of an order (&lt;code&gt;Incomplete&lt;/code&gt;, &lt;code&gt;Unpaid&lt;/code&gt;, &lt;code&gt;Paid&lt;/code&gt;, &lt;code&gt;Shipped&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;p&gt;In our database we assign a number or a string that represents each possible value, and in our code we use an &lt;code&gt;Enum&lt;/code&gt; for that. This is good, but if we are not careful, then at some point in the future, when we change the composition of the set (for example by adding another state &lt;code&gt;Received&lt;/code&gt;), we might create hard to debug errors in our program.&lt;/p&gt;

&lt;p&gt;We want to always use &lt;code&gt;switch&lt;/code&gt; when dealing with these sets, so that when the set changes, the compiler automatically warns us about all the places where code might need to be changed.&lt;/p&gt;

&lt;p&gt;However there's one case where this is tricky: when dealing with the database. For example, we have a query in our code that fetches all orders that are paid, so our LINQ condition could be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OrderStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Paid&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;
      &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OrderStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shipped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what happens when we now add the new &lt;code&gt;Received&lt;/code&gt; state? This query is now broken because received orders are also paid, but the compiler doesn't have any way of knowing that!&lt;/p&gt;

&lt;p&gt;We need to somehow add a &lt;code&gt;switch&lt;/code&gt; to this operation to make it safe. What we must do is filter all the elements of the enum by our condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OrderStatus&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetOrderStatusValuesWhichArePaid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;IsPaid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrderStatus&lt;/span&gt; &lt;span class="n"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;orderStatus&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;OrderkStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Incomplete&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;OrderkStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unpaid&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;OrderkStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Paid&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;OrderkStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shipped&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValues&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OrderStatus&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsPaid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can use it in our LINQ query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;paidStatusValues&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetOrderStatusValuesWhichArePaid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Orders&lt;/span&gt;
            &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;paidStatusValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we add the new &lt;code&gt;Received&lt;/code&gt; state, the compiler can warn us that the switch statement in the function &lt;code&gt;IsPaid&lt;/code&gt; is not covering all cases properly.&lt;/p&gt;

</description>
      <category>csharp</category>
    </item>
    <item>
      <title>SigNoz - Open-source alternative to New Relic</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 27 Sep 2021 13:06:33 +0000</pubDate>
      <link>https://dev.to/signoz/signoz-open-source-alternative-to-new-relic-138n</link>
      <guid>https://dev.to/signoz/signoz-open-source-alternative-to-new-relic-138n</guid>
      <description>&lt;p&gt;If you're looking for an open-source alternative to New Relic, then you're at the right place. SigNoz is a perfect open-source alternative to New Relic. SigNoz provides a unified UI for both metrics and traces with advanced tagging and filtering capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In today's digital economy, more and more companies are shifting to cloud-native and microservice architecture to support global scale and distributed teams. But distributed systems also make it impossible for engineering teams to track how user requests perform across services. Application performance monitoring tools provide the visibility needed to resolve performance issues quickly in distributed systems.&lt;/p&gt;

&lt;p&gt;New Relic is a great SaaS tool when it comes to application performance monitoring. But there are a few challenges when it comes to enterprise SaaS products, and it's just not a great fit for every company.&lt;/p&gt;

&lt;p&gt;A relatively newer concept in the field of application performance monitoring is observability. Making a system observable is the pursuit of achieving a state of proactiveness to solve unknown issues. Logs, metrics, and traces are usually considered the three pillars of observability.&lt;/p&gt;

&lt;p&gt;Some of the key features of good observability tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Out of the box application metrics&lt;/li&gt;
&lt;li&gt;Way to go from metrics to traces to find why some issues are happening&lt;/li&gt;
&lt;li&gt;Seamless flow between metrics, traces &amp;amp; logs — the three pillars of observability&lt;/li&gt;
&lt;li&gt;Filtering of traces based on different tags and filters&lt;/li&gt;
&lt;li&gt;Ability to set dynamic thresholds for alerts&lt;/li&gt;
&lt;li&gt;Transparency in pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-an-opensource-alternative-to-new-relic"&gt;
  &lt;/a&gt;
  Why choose an open-source alternative to New Relic?
&lt;/h2&gt;

&lt;p&gt;APM and observability tools are critical tools in a developer's kit. These tools improve developer efficiency, save bandwidth by resolving issues quickly, and increase developer productivity.&lt;/p&gt;

&lt;p&gt;An open-source product is always a better choice for any developer tool. Some of the key advantages of open-source developer tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open codebase&lt;/strong&gt;&lt;br&gt;
Developers can judge the quality of the code of the tool they want to choose and work with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;&lt;br&gt;
If an extra feature or customization is required, developers can build on top of the open-source tool without waiting for the enterprise support team to include their request in the next product cycle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Community support&lt;/strong&gt;&lt;br&gt;
One of the best parts about open-source projects is the community. An example is &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;, which is becoming the world standard for generating and managing telemetry data in distributed systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transparency&lt;/strong&gt;&lt;br&gt;
With open-source projects, you know what you're dealing with. There is no black box.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;On-prem installation&lt;/strong&gt;&lt;br&gt;
If your data privacy policies are stringent, you can use open-source tools within your infra with no fear of breaching data privacy laws like GDPR.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But most open-source projects don't provide a great user experience as SaaS products do. It takes a lot of time and effort to get them working, figuring out the long-term storage, etc.&lt;/p&gt;

&lt;p&gt;And that's where SigNoz shines. It is very simple to get started, supports multiple tech-stack, and comes with a SaaS-like web user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-signoz-a-new-relic-alternative"&gt;
  &lt;/a&gt;
  Key Features of SigNoz - a New Relic alternative
&lt;/h2&gt;

&lt;p&gt;Some of our key features which makes SigNoz vastly superior to current open-source products and a great alternative to New Relic are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Out of the box application metrics&lt;/li&gt;
&lt;li&gt;Seamless flow between metrics &amp;amp; traces&lt;/li&gt;
&lt;li&gt;Filtering based on tags&lt;/li&gt;
&lt;li&gt;Custom aggregates on filtered traces&lt;/li&gt;
&lt;li&gt;Detailed Flamegraphs &amp;amp; Gantt charts&lt;/li&gt;
&lt;li&gt;Natively built to support OpenTelemetry&lt;/li&gt;
&lt;li&gt;Transparent usage Data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#out-of-box-application-metrics"&gt;
  &lt;/a&gt;
  Out of box application metrics
&lt;/h3&gt;

&lt;p&gt;Get p90, p99 latencies, RPS, Error rates, and top endpoints for a service out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz dashboard showing popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seamless-flow-between-metrics-amp-traces"&gt;
  &lt;/a&gt;
  Seamless flow between metrics &amp;amp; traces
&lt;/h3&gt;

&lt;p&gt;Found something suspicious in a metric, just click that point in the graph &amp;amp; get details of traces that may be causing the issues. Seamless, Intuitive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0TA0hda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/metrics_to_traces_signoz-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0TA0hda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/metrics_to_traces_signoz-min.png" alt="Seamless flow between metrics and traces"&gt;&lt;/a&gt;Move from metrics to traces at any point of time which needs more analysis&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-based-on-tags"&gt;
  &lt;/a&gt;
  Filtering based on tags
&lt;/h3&gt;

&lt;p&gt;For example, you can find latency experienced by customers who have customer_type set as &lt;code&gt;premium&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghJiO2En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/tags_based_filtering_signoz-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghJiO2En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/tags_based_filtering_signoz-min.png" alt="Filtering based on tags"&gt;&lt;/a&gt;Filter traces for a specific user group using tags&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-aggregates-on-filtered-traces"&gt;
  &lt;/a&gt;
  Custom aggregates on filtered traces
&lt;/h3&gt;

&lt;p&gt;Create custom metrics from filtered traces to find metrics of any type of request. Want to find p99 latency of customer_type: premium who are seeing status_code:400. Just set the filters, and you have the graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5tow4p7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/metrics_on_filtered_traces-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5tow4p7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/metrics_on_filtered_traces-min.png" alt="Custom aggregates on filtered traces"&gt;&lt;/a&gt;Find custom aggregates on filtered traces&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#natively-built-to-support-opentelemetry"&gt;
  &lt;/a&gt;
  Natively built to support OpenTelemetry
&lt;/h3&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. OpenTelemetry is becoming the world standard when it comes to generating and managing telemetry data(logs, metrics, and traces). &lt;/p&gt;

&lt;p&gt;Some of the key advantages of using OpenTelemetry are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduces performance overhead on your application to generate and manage telemetry data&lt;/li&gt;
&lt;li&gt;Supports multiple popular programming languages like Java, Javascript, C++, Go, Python, etc.&lt;/li&gt;
&lt;li&gt;Provides libraries and agents to auto-instrument popular libraries and frameworks requiring minimal changes to your codebase&lt;/li&gt;
&lt;li&gt;Backed by technology giants like Google, Microsoft, and other big cloud vendors.&lt;/li&gt;
&lt;li&gt;No vendor lock-in. Freedom to switch to new backend analysis tools by using relevant exporters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#transparent-usage-data"&gt;
  &lt;/a&gt;
  Transparent usage Data
&lt;/h3&gt;

&lt;p&gt;You can drill down details of how many events is each application sending or at what granularity so that you can adjust your sampling rate as needed and not get a shock at the end of the month (case with SaaS vendors many times)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpUPM5ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/transparent_usage_data-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpUPM5ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/transparent_usage_data-min.png" alt="Transparent usage data"&gt;&lt;/a&gt;SigNoz provides usage explorer so that you are always informed about your usage&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#detailed-flamegraphs-amp-gantt-charts"&gt;
  &lt;/a&gt;
  Detailed Flamegraphs &amp;amp; Gantt charts
&lt;/h3&gt;

&lt;p&gt;Detailed flamegraph &amp;amp; Gantt charts to find the exact cause of the issue and which underlying requests are causing the problem. Is it a SQL query gone rogue or a Redis operation is causing an issue?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Detailed Flamegraphs &amp;amp; Gantt charts"&gt;&lt;/a&gt;Spans of a trace visualized with the help of flamegraphs and gantt charts in SigNoz dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-signoz"&gt;
  &lt;/a&gt;
  Getting started with SigNoz
&lt;/h2&gt;

&lt;p&gt;If you have docker installed, getting started with SigNoz just takes three easy steps at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about deploying SigNoz from its &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you liked what you read, then check out our GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our slack community is a great place to get your queries solved instantly and get community support for SigNoz. Link to join 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;SigNoz slack community&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Pure waterfall development model</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 27 Sep 2021 12:42:58 +0000</pubDate>
      <link>https://dev.to/aatmaj/pure-waterfall-development-model-5hem</link>
      <guid>https://dev.to/aatmaj/pure-waterfall-development-model-5hem</guid>
      <description>&lt;p&gt;In the waterfall model, a project progresses through an orderly sequence of steps from the initial software concept through system testing. The project holds a review at the end of each stage to determine whether it is ready to advance to the next phase. If not, it remains in the same phase.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfIpxzgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oosvmrzhnibvjysillq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfIpxzgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oosvmrzhnibvjysillq.jpeg" alt="WhatsApp Image 2021-09-27 at 9.32.39 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pure waterfall model performs well for product cycles in which you have a stable product defination and when you are working with well understood technical methodologies. In such cases, the waterfall model helps you to find out errors in the early, low cost stages of the product. It provides the requirements stability that developers crave. If you are building a well defined maintenance release of an existing product or porting an existing product to a new platform, a waterfall lifecycle might be the right choice for rapid development&lt;/p&gt;

&lt;p&gt;The pure waterfall model helps to minimize planning overhead because you can do all the planning up front. It doesn't provide tangible results in the form of software until the end of the lifecycle, but to someone who is familiar with it, the documentation it generates provides meaningful indications of progress throughout the lifecycle. The waterfall model works well for projects that are well defined, well understood and complex, because you can benifit from tackling complexity in an orderly way. It works well when quality requirements dominate cost and schedule requirements. Elimination of midstream changes eliminates a huge and common source of potential errors.&lt;/p&gt;

&lt;p&gt;The waterfall model works especially well if you have a technically weak staff or an inexperienced staff, because it provides the project with a structure that helps to minimize wasted effort.&lt;/p&gt;

&lt;p&gt;The disadvantages of the pure waterfall model arise from the difficulty of fully specifying requirements at the beginning of the project, before any design work has been done and before any code has been written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The major problem with the waterfall model is that it is not flexible. You have to fully specify the requirements at the beginning of the project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notes and images from &lt;a href="https://www.amazon.com/Rapid-Development-Taming-Software-Schedules/dp/1556159005"&gt;Rapid Development: Taming Wild Software Schedules by Steve McConnell&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Building a chat app with Firebase DB</title>
      <author>TheHappieDog</author>
      <pubDate>Mon, 27 Sep 2021 12:32:54 +0000</pubDate>
      <link>https://dev.to/thehappiedog/building-a-chat-app-with-firebase-db-2a0m</link>
      <guid>https://dev.to/thehappiedog/building-a-chat-app-with-firebase-db-2a0m</guid>
      <description>&lt;p&gt;In this blog I am going to cover some basic stuff about the Firebase real-time database. So let's get started by creating basic HTML elements: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34y-INK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fd5l4i5nmnkpo4oknx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34y-INK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fd5l4i5nmnkpo4oknx.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
Notice we have created a input and a button and that is because for entering a message and sending it. One more thing is that we have used&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and that is because we want to show the input and the button in the same line. &lt;/p&gt;

&lt;p&gt;Next lets setup a new Firebase project and a app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opmZG7A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvo6iyx8og5dqidt40d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opmZG7A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvo6iyx8og5dqidt40d2.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TgspGMJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/let7u49vxppe8vaybsg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgspGMJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/let7u49vxppe8vaybsg7.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets create a new web app in the console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NbQnJK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o8jgdvngk9y3u6gjxpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NbQnJK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o8jgdvngk9y3u6gjxpk.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give it a name and you can enable firebase hosting if you want but I don't want to do it now so I will uncheck it.&lt;/p&gt;

&lt;p&gt;Then to use the Real-time database we will have create it so lets do that&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtDyGm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn2omjfw3vbfzdbm0wkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtDyGm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn2omjfw3vbfzdbm0wkp.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
after you have set up the database lets write some code&lt;br&gt;
First of all lets import our database and our app&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5sA0Utz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q8fno4t22skixdhbz93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5sA0Utz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q8fno4t22skixdhbz93.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
Now we will have to import our cdn in our JavaScript file and you can find that cdn in your project settings&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUliQqrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/436o1mt6dbsa0ox4xzq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUliQqrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/436o1mt6dbsa0ox4xzq9.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf3HTOO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk36hvhmpobtd0f3gisq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf3HTOO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk36hvhmpobtd0f3gisq.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
Now let's configure firebase database and you can do it by copy pasting this snippet:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const db = firebase.database();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now to get users data we will render a prompt: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpHbtbY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v9mlm81ao6rk05xu96k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpHbtbY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v9mlm81ao6rk05xu96k.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we will listen for submit event on the form and call the postChat function:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  document.getElementById("message-form").addEventListener("submit", sendMessage);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next: We will send the message to the database&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzBc6pAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgp5jgic7c21kqmnu4np.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzBc6pAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgp5jgic7c21kqmnu4np.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will add a auto scroll to bottom functionality so that the user doesn't has to scroll down for a whole lot of time:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KCcGDZOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46kgktqypq8f5aa8q99l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KCcGDZOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46kgktqypq8f5aa8q99l.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets display the messages from our collection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JeO9im4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf3w5oe5v2mtjqk9yj3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JeO9im4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf3w5oe5v2mtjqk9yj3a.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you send a message it automatically updates in our database in the messages collection&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5BmJRx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8un4fbqarf9oykup7jb7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5BmJRx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8un4fbqarf9oykup7jb7.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxcMWx82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/617w0sbqtma0bneev9gn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxcMWx82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/617w0sbqtma0bneev9gn.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets add some bootstrap to enhance the user experience&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TxS8rJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daa9v5drm7frvl788yy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TxS8rJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daa9v5drm7frvl788yy3.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mii7WMwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r80fajm2deavspu9ho9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mii7WMwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r80fajm2deavspu9ho9w.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
Yes! I love it &lt;br&gt;
You can find the whole code here: &lt;a href="https://github.com/TheHappieDog/chat-app-blog"&gt;https://github.com/TheHappieDog/chat-app-blog&lt;/a&gt;&lt;br&gt;
To support me you can follow me on github: &lt;a href="https://github.com/TheHappieDog"&gt;https://github.com/TheHappieDog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>boostrap</category>
      <category>vanillajs</category>
    </item>
    <item>
      <title>Introduction to Django Architecture and Django Settings</title>
      <author>Fahid Latheef A</author>
      <pubDate>Mon, 27 Sep 2021 12:31:47 +0000</pubDate>
      <link>https://dev.to/fahidlatheef/introduction-to-django-architecture-and-django-settings-36e6</link>
      <guid>https://dev.to/fahidlatheef/introduction-to-django-architecture-and-django-settings-36e6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Django is a Python-based web framework that allows us to quickly create web applications. Django takes care of much of the hassle of web development, so we can focus on writing our app without needing to reinvent the wheel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-architecture"&gt;
  &lt;/a&gt;
  Django Architecture
&lt;/h2&gt;

&lt;p&gt;Django is based on  Model-View-Template (MVT) pattern. MVT consists of 3 components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;: Model is responsible for maintaining the data structure of the project, through databases (PostgreSQL, MySQL etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;: Views perform operations and return a response to the user. This response can be the HTML contents of a Web page, or a redirect, or a 404 error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Templates&lt;/strong&gt;: Templates is used to generate dynamic HTML pages by using Django's template system. For example, with the use of jinja2, we will be able to display dynamic content on our web pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWI6yAnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.javatpoint.com/django/images/django-mvt-based-control-flow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWI6yAnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.javatpoint.com/django/images/django-mvt-based-control-flow.png" alt="Django MVT"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-django-security-features"&gt;
  &lt;/a&gt;
  Few Django Security Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#xss-attack-protection"&gt;
  &lt;/a&gt;
  XSS Attack Protection
&lt;/h3&gt;

&lt;p&gt;XSS (&lt;strong&gt;Cross Site Scripting&lt;/strong&gt;) attacks allow a user to inject client-side scripts into the browsers of other users.&lt;/p&gt;

&lt;p&gt;Django does have protection against it by using a escape filter that converts potentially harmful HTML characters to unharmful ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csrf-protection"&gt;
  &lt;/a&gt;
  CSRF Protection
&lt;/h3&gt;

&lt;p&gt;CSRF (&lt;strong&gt;Cross-site request forgery&lt;/strong&gt;) attacks allow a malicious user to execute actions using the credentials of another user without that user’s knowledge or consent.&lt;/p&gt;

&lt;p&gt;Django checks for a secret code in each POST request. This ensures that a malicious user cannot “replay” a form POST to our website and have another logged in user unknowingly submit that form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql-injection-protection"&gt;
  &lt;/a&gt;
  SQL Injection Protection
&lt;/h3&gt;

&lt;p&gt;SQL injection is a type of attack where a malicious user can execute arbitrary SQL code on a database. This can result in records being deleted or data leakage.&lt;/p&gt;

&lt;p&gt;Django’s querysets are protected from SQL injection since their queries are constructed using query parameterization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-settings-file"&gt;
  &lt;/a&gt;
  Django settings file
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;DISCLAIMER: The Django version I used to generate the project is 2.2. These settings may or may not exist in future/previous versions of Django.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we create a new project in Django, a new folder with our &lt;code&gt;project name&lt;/code&gt; is created. The 3 files which are found in the folder are &lt;code&gt;settings.py&lt;/code&gt;, &lt;code&gt;urls.py&lt;/code&gt; and &lt;code&gt;wsgi.py&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt; configures our project urls, and &lt;code&gt;wsgi.py&lt;/code&gt; configures  Django’s primary deployment platform, &lt;a href="https://wsgi.readthedocs.io/en/latest/"&gt;WSGI&lt;/a&gt;, which is used to deploy our project live.&lt;/p&gt;

&lt;p&gt;The most important file among these three is the &lt;code&gt;settings.py&lt;/code&gt; file, which is used for configuring all settings of our project. Here is a detailed explanation of what each line in &lt;code&gt;settings.py&lt;/code&gt; does for our project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-settingspy-endraw-detailed-explanation"&gt;
  &lt;/a&gt;
  &lt;code&gt;settings.py&lt;/code&gt; detailed explanation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;BASE_DIR&lt;/strong&gt;: This refers to the absolute path in which &lt;code&gt;manage.py&lt;/code&gt; file exists. The manage.py is integral in creating new apps, running server, running django shell etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SECRET_KEY&lt;/strong&gt;: It is used to provide cryptographic signing, and should be set to a unique, unpredictable value. It is used for saving cookies cache. If someone has the secret key, they will be able to modify cookies sent by the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEBUG&lt;/strong&gt;: This is a toggle that turns on/off debug mode. When in debug mode, we can get detailed error pages, which helps in fixing our application quicker. Moreover, the modifications are dynamically changed when debug is on without the need of manually restarting the server after each change.&lt;/p&gt;

&lt;p&gt;Due to the detailed error messages which may expose a lot of important metadata, it is very dangerous to keep &lt;em&gt;DEBUG=True&lt;/em&gt; in production and is not advised to do so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ALLOWED_HOSTS&lt;/strong&gt;: A list of strings representing the host/domain names that this Django site can serve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;: A list of strings designating all applications that are enabled in the Django Project. After creating new applications, we have to manually add the application to the Django Installed Apps. Moreover, other outside applications have to be added to the list, so that it works with our project (Eg: crispy_forms).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MIDDLEWARE&lt;/strong&gt;:  Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output. For example, Security Middleware is used to maintain the security of the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROOT_URLCONF&lt;/strong&gt;: This is a string representing the relative path to the &lt;code&gt;urls.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TEMPLATES&lt;/strong&gt;: Settings of Django Template Language used for our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WSGI_APPLICATION&lt;/strong&gt;: Path to wsgi.py file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DATABASES&lt;/strong&gt;: A dictionary containing the settings for all databases to be used with Django. By default, Django uses SQLite as the database engine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AUTH_PASSWORD_VALIDATORS&lt;/strong&gt;: The list of validators that are used to check the strength of a user’s passwords. By default, no validation is performed and all passwords are accepted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LANGUAGE_CODE&lt;/strong&gt;: Represents the name of a language. For example &lt;code&gt;'en-us'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIME_ZONE&lt;/strong&gt;: Represents the timezone. For example &lt;code&gt;'UTC'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USE_I18N&lt;/strong&gt;: A boolean that specifies whether Django’s translation system should be enabled. This provides a way to turn it off, for performance. If this is set to &lt;code&gt;False&lt;/code&gt;, Django will make some optimizations so as not to load the translation machinery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USE_L10N&lt;/strong&gt;: A boolean that specifies if localized formatting of data will be enabled by default or not. If this is set to &lt;code&gt;True&lt;/code&gt;, Django will display numbers and dates using the format of the current locale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USE_TZ&lt;/strong&gt;: A boolean that specifies if datetimes will be timezone-aware by default or not. If this is set to &lt;code&gt;True&lt;/code&gt;, Django will use timezone-aware datetimes internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STATIC_ROOT&lt;/strong&gt;: The absolute path to the directory where &lt;code&gt;./manage.py collectstatic&lt;/code&gt; will collect static files for deployment. So we have to only serve this folder while deploying.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STATIC_URL&lt;/strong&gt;: The &lt;code&gt;URL&lt;/code&gt; of which the static files in &lt;code&gt;STATIC_ROOT&lt;/code&gt; directory are served.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.javatpoint.com/django"&gt;Django Javatpoint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/2.2/"&gt;Django Official Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>An ultimate guide to building a website like Airbnb: cost, time, features</title>
      <author>Arateg</author>
      <pubDate>Mon, 27 Sep 2021 12:21:29 +0000</pubDate>
      <link>https://dev.to/arateg/an-ultimate-guide-to-building-a-website-like-airbnb-cost-time-features-383i</link>
      <guid>https://dev.to/arateg/an-ultimate-guide-to-building-a-website-like-airbnb-cost-time-features-383i</guid>
      <description>&lt;p&gt;When aiming to make a website like Airbnb and generate revenue, it is crucial to plan out a budget and estimate the timeline necessary to launch a product. In addition, an organization needs to research competitors to discover their strong and weak sides.&lt;/p&gt;

&lt;p&gt;To create a quality solution and achieve success, you should partner with a trustworthy marketplace development company that will provide assistance in prioritizing features and choosing a technology stack.&lt;/p&gt;

&lt;p&gt;This article considers how to build a platform like Airbnb, including project cost and implementation time. Our software experts have also described the story of the Airbnb online lodging marketplace to identify the winning formula. Let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-of-a-vacation-rental-marketplace-like-airbnb"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design of a vacation rental marketplace like Airbnb&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Experts at SWEOR report that 88% of customers will not revisit a website after receiving a poor experience. According to WebFX, design has a 75% impact on the audience’s credibility to the web solution. Therefore, it is important to focus on this stage of building a website like Airbnb.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When making an online lodging marketplace, it is essential to:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Provide a seamless user experience (UX). Travelers and hosts should be able to easily find everything they need while interacting with the product without thinking. For this purpose, designers have to provide search across numerous filters and categories. The navigation has to be smooth, the flow of pages or screens has to be logically organized, menu structure must be simple and convenient.&lt;/p&gt;

&lt;p&gt;Create a self-explanatory user interface (UI). Pages of a vacation rental marketplace should not be overwhelmed with various elements such as text content and buttons. A color scheme should be clear and consistent.&lt;/p&gt;

&lt;p&gt;Develop a unique branding theme. If you want to make a website like Airbnb while gaining a competitive advantage, you should develop a unique branding style that meets user preferences.&lt;/p&gt;

&lt;p&gt;However, when using a market-ready template, there is a risk to meet a clone of an online lodging marketplace. Furthermore, it may be challenging to optimize a website for search engines in this case. To deliver the best user experience while preventing these issues, we recommend that you create a custom UI/UX design.&lt;/p&gt;

&lt;p&gt;Ensure responsiveness. At the beginning of 2021, 54.8% of global web traffic came from mobile devices, excluding tablets. It is worth noting that mobile devices have been consistently hovering nearly 50% since 2017. Therefore, a website should look and perform great across all operating systems.&lt;/p&gt;

&lt;p&gt;Time: 200 hours&lt;/p&gt;

&lt;p&gt;To learn more about building a superior product, explore the &lt;a href="https://smallbizclub.com/technology/7-key-principles-to-creating-ui-ux-design/?utm_source=blogpost&amp;amp;utm_medium=free&amp;amp;utm_campaign=devto"&gt;top 7 principles of a quality software design&lt;/a&gt; described by Andrew Volchek, CEO and Co-founder at Arateg, who has in-depth expertise in UI/UX design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-functionality-of-an-online-lodging-marketplace-like-airbnb"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The functionality of an online lodging marketplace like Airbnb&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#features-for-travelers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features for travelers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Registration and authorization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A vacation rental marketplace has to enable customers to sign up/in for creating a user profile and booking accommodations. When building a website like Airbnb, it is crucial to provide various methods to sign in/up, for instance, via an email, phone number, Google, and social media accounts such as Facebook, Instagram, Twitter.&lt;/p&gt;

&lt;p&gt;For the purpose of improving user satisfaction and preventing churn, do not force travelers to register when travelers visit a marketplace platform for the first time. Signing up should be obligatory to make a reservation but not earlier.&lt;/p&gt;

&lt;p&gt;Time: 40-80 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. User profile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A user profile is a key feature of an online lodging marketplace. The profile usually contains information such as name, surname, age, location.&lt;/p&gt;

&lt;p&gt;To build a website like Airbnb, you need to use a peer-to-peer model, this way allowing travelers to act as hosts renting out properties and inversely. Thanks to this, it will be easier to attract and engage the audience.&lt;/p&gt;

&lt;p&gt;Time: 80 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Accommodation search and catalog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When creating a platform like Airbnb, it is important to enable search across a catalog using a variety of filters, for example, location, arrival/departure date, the number of guests and rooms, property type, price, basic and additional facilities, as well as languages known by hosts.&lt;/p&gt;

&lt;p&gt;You should also enable users to search for accommodations by house rules such as “pets allowed” and “smoking allowed”.&lt;/p&gt;

&lt;p&gt;Time: 100-120 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Accommodation description page&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An online lodging marketplace has to provide property descriptions to facilitate search while helping vendors attract travelers. The page generally contains information such as overview, address, price, photos, amenities, as well as host’s name and contacts.&lt;/p&gt;

&lt;p&gt;For the purpose of boosting customer loyalty, you can display customer reviews and the overall rating score on the page. When building a website like Airbnb, it is reasonable to let users set up the arrival and departure dates for checking out reservation availability. Furthermore, consumers should be able to view the property on the map.&lt;/p&gt;

&lt;p&gt;Time: 100 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Reviews and ratings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By adding this feature to a vacation rental marketplace, you will increase user credibility in rendered services. To prevent fake testimonials, it is crucial to allow only registered customers who have actually stayed in accommodation to leave their comments and score services.&lt;/p&gt;

&lt;p&gt;With reviews and ratings, travelers will be able to estimate the quality of rendered services and make more informed booking decisions. Hosts, in their turn, will have the opportunity to find out what attracts their customers and what pushes them aside.&lt;/p&gt;

&lt;p&gt;Time: 120 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Geolocation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Geolocation is another key feature of a vacation rental marketplace that serves for identifying user location. Thanks to this, a software platform like Airbnb can create personalized offers, for instance, showcasing accommodations situated near customers.&lt;/p&gt;

&lt;p&gt;Time: 120 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Accommodation search by moving the map&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search by moving the map is a valuable feature that allows users to seek accommodations in certain locations using zoom in/out. Thanks to this, travelers will be able to view sightseeing attractions, cafes, restaurants nearby.&lt;/p&gt;

&lt;p&gt;When building a website like Airbnb, online marketplace developers can provide the possibility to look through property previews and make reservations with a few clicks. As a result, you will improve customer engagement and increase the conversion rate.&lt;/p&gt;

&lt;p&gt;For this purpose, software engineers can integrate an application programming interface (API), for example, Google Maps or Google Places. Using an API, the team will not have to implement this functionality from scratch, this way saving you time and costs.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://arateg.com/integrations?utm_source=blogpost&amp;amp;utm_medium=free&amp;amp;utm_campaign=devto"&gt;third-party services&lt;/a&gt; —for inventory tracking, order management, data analytics, digital payment, and more—that you can integrate into an online lodging marketplace.&lt;/p&gt;

&lt;p&gt;Time: 60 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Accommodation booking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accommodation booking is an essential feature of a marketplace platform like Airbnb. When creating a marketplace website, software developers have to enable reservation by property type, arrival and departure dates, the number of guests and rooms, amenities, price, and other characteristics.&lt;/p&gt;

&lt;p&gt;Time: 160 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Online payments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to Invesp, 11% of customers abandon their shopping carts due to a complex checkout process while 7% of users say they are not willing to make a purchase when the system does not offer enough payment options.&lt;/p&gt;

&lt;p&gt;To prevent these issues, a marketplace development team can integrate a payment gateway acting as an analog of a third-party virtual terminal. With a gateway solution, you will allow for carrying out transactions via a range of methods.&lt;/p&gt;

&lt;p&gt;For instance, Braintree enables users to make money transfers using credit and debit cards, digital wallets, ACH Direct, as well as online banking services (e.g., Trustly, SOFORT, GiroPay). What’s more, payment gateways include features such as 3D Secure, CVV (card verification code check), and AVS (Address Verification System) to enforce security.&lt;/p&gt;

&lt;p&gt;Popular gateway systems often take complementary measures to safeguard sensitive data. PayPal, for example, utilizes artificial intelligence to instantaneously identify suspicious activities and protect against fraud.&lt;/p&gt;

&lt;p&gt;Time: 120 hours&lt;/p&gt;

&lt;p&gt;Find out &lt;a href="https://arateg.com/blog/how-to-choose-a-payment-gateway-for-an-online-marketplace?utm_source=blogpost&amp;amp;utm_medium=free&amp;amp;utm_campaign=devto"&gt;how to choose a payment gateway for a marketplace website&lt;/a&gt; like Airbnb.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-for-hosts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features for hosts&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Registration and authorization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During registration on a vacation rental marketplace, vendors fill out information like name, address, contacts, property category, and available payment options. Hosts should also provide accommodation descriptions, and upload photos.&lt;/p&gt;

&lt;p&gt;Time: 80 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Property listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arateg.com/blog/how-to-build-a-marketplace-like-Airbnb?utm_source=blogpost&amp;amp;utm_medium=free&amp;amp;utm_campaign=devto"&gt;Continue reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>mobile</category>
      <category>startup</category>
    </item>
    <item>
      <title>Créer un backend en Javascript : Introduction à Node.js</title>
      <author> Eric Le Codeur</author>
      <pubDate>Mon, 27 Sep 2021 12:11:33 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-introduction-a-node-js-3014</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-introduction-a-node-js-3014</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questce-que-nodejs-"&gt;
  &lt;/a&gt;
  Qu'est-ce que Node.js ?
&lt;/h2&gt;

&lt;p&gt;NodeJS permet d’exécuter du code Javascript en dehors d’un navigateur.&lt;/p&gt;

&lt;p&gt;Node.js est un environnement serveur, open source, gratuit, et qui utilise le language Javascript pour créer des applications Web côté serveur. (backend)&lt;/p&gt;

&lt;p&gt;Node.js fonctionne sur différentes plateformes (Windows, Linux, Unix, Mac OS X, etc.) Avec Node.js, nous pouvons créer une application Web rapide et hautement évolutive. &lt;/p&gt;

&lt;p&gt;L'utilisation de Node.js signifie également que nous pouvons utiliser Javascript sur l'ensemble du stack c’est à dire le même language pour le frontend et le backend. Donc un développement plus rapide et efficace.&lt;/p&gt;

&lt;p&gt;Node.js a une énorme bibliothèque de packages prêts à l'emploi et qui vous feront gagner beaucoup de temps. Ces bibliothèques sont gérées par NPM (Node Package Manager) &lt;/p&gt;

&lt;p&gt;Une particularité de Node.js est qu'il utilise la programmation asynchrone (exécution de plusieurs tâches en même temps) vs la programmation synchrone (exécution d'une tâche à la fois) que l'on trouve sur de nombreux langages de programmation côté serveur comme PHP et Ruby.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-de-nodejs"&gt;
  &lt;/a&gt;
  Installation de Node.js
&lt;/h2&gt;

&lt;p&gt;Node.js peut être installé directement à partir de son site Web : &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Une documentation détaillée est également disponible sur le site Web de Node.js : &lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Une fois l’installation terminé, vous pouvez vérifier la version installé avec cette commande&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# v16.9.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Tradition oblige, le premier truc que nous allons faire est le classique 'Hello World'&lt;/p&gt;

&lt;p&gt;La façon la plus rapide et la plus simple d'exécuter du code avec Node, c'est l'utilisation du REPL. Pour lancer le REPL, il suffit d'exécuter cette commande :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node
Welcome to Node.js v16.9.1
Type &lt;span class="s2"&gt;".help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;
&lt;span class="nx"&gt;undefided&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le REPL permet d'exécuter du javascript mais vous l'aurez compris est très limité. Le REPL est utilisé pour exécuter de petites commandes ou pour des tests uniquement.&lt;/p&gt;

&lt;p&gt;Si vous désirez écrire un programme complet en NodeJS, il faudra créer un fichier et l'exécuter.&lt;/p&gt;

&lt;p&gt;Créer et ouvrez le fichier app.js, saisir la ligne suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chaque fichier  est considérer par NodeJS comme étant un module et peut donc être exécuté. &lt;/p&gt;

&lt;p&gt;Pour ce faire, à partir du terminal saisir:  node &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà, bravo vous venez de créer votre première application NodeJS !&lt;/p&gt;

&lt;p&gt;Chaque fois que vous devez exécuter du code NodeJS il faudra le faire avec cette commande.&lt;/p&gt;

&lt;p&gt;Nous verrons, plus tard qu'il existe un façon de créer un serveur NodeJS qui permettra d'exécuter du code automatiquement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-navigateur-vs-javascript-serveur"&gt;
  &lt;/a&gt;
  Javascript navigateur vs JavaScript serveur
&lt;/h2&gt;

&lt;p&gt;Comme vous l'avez constaté grâce à NodeJS vous pouvez exécuter du code Javascript sans navigateur ! C'est bien mais malgré cela, tout n'est pas exactement la même chose.&lt;/p&gt;

&lt;p&gt;Voici une liste des différences principales entre le code Javascript navigateur et NodeJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Une application navigateur s'exécuter sur le poste du client&lt;/li&gt;
&lt;li&gt;Une application NodeJS s'exécute sur le serveur&lt;/li&gt;
&lt;li&gt;Avec NodeJS, il n'y a pas de navigateur donc pas de DOM et pas d'object Window&lt;/li&gt;
&lt;li&gt;Avec NodeJS il est possible d'accéder au file system&lt;/li&gt;
&lt;li&gt;Avec NodeJS, le système de module appelé 'CommonJS' ne fonctionne pas avec la même syntaxe que les modules Javascript ES6&lt;/li&gt;
&lt;li&gt;Il existe en NodeJS des objets qui sont disponible partout dans votre code. Ces objets sont appelé les Globals.

&lt;ul&gt;
&lt;li&gt;Voici quelques un de ces objets. Vous apprendrez à la utiliser en temps et lieu :

&lt;ul&gt;
&lt;li&gt;__dirname (retourne le path du dossier en cours)&lt;/li&gt;
&lt;li&gt;__filename (retourne le nom du fichier en cours d'exécution)&lt;/li&gt;
&lt;li&gt;require (permet de charger des modules)&lt;/li&gt;
&lt;li&gt;module (retourne info sur le module en cours)&lt;/li&gt;
&lt;li&gt;process (retourne info à propos de l'environnement en cours)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to sort lists alphabetically in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 27 Sep 2021 11:58:46 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-sort-lists-alphabetically-in-python-2ecc</link>
      <guid>https://dev.to/hrishikesh1990/how-to-sort-lists-alphabetically-in-python-2ecc</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to sort list alphabetically in Python. We look at the various methods and discuss their use cases.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-sort-lists-alphabetically-in-python"&gt;How to sort lists alphabetically in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-sort-method"&gt;Using the sort() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-sorted-method"&gt;Using the sorted() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-sort-lists-alphabetically-in-python"&gt;
  &lt;/a&gt;
  How to sort lists alphabetically in Python?
&lt;/h2&gt;

&lt;p&gt;Lists are used to store a collection of items and quite often it may contain data in an unpredictable order. This could largely be due to the order they have been added by the user. Due to this, when it comes to user input data there is no way they can be ordered. Hence it is important to have a couple of methods that can be used to sort a list.&lt;/p&gt;

&lt;p&gt;Lists can be sorted using two methods, the sort() and the sorted() method. The former permanently sorts the list whereas sorted() is used to sort the list temporarily.&lt;/p&gt;

&lt;p&gt;Let us take a closer look at both the methods below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-sort-method"&gt;
  &lt;/a&gt;
  Using the sort() method:
&lt;/h2&gt;

&lt;p&gt;As aforementioned, the sort() method can be used to sort a list alphabetically in Python. However, this method permanently changes the order of the items in the list. In practice use cases this might not be a problem, however, while dealing with real-world data there might be instances where the order of the list must be preserved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet outputs the following value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have used sort() to sort the list in alphabetical order in Python. We then print the original list and the values have been changed permanently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-sorted-method"&gt;
  &lt;/a&gt;
  Using the sorted() method:
&lt;/h2&gt;

&lt;p&gt;In case you want to sort the list alphabetically in Python but want to preserve the original list, the sorted() method can be used. This method sorts and displays the list but does not change the original list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above code snippet, we have first sorted and printed the list after which we have printed the original list and this is the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, the list was sorted but the original list was not affected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts:
&lt;/h2&gt;

&lt;p&gt;We have covered two methods to sort a list and discussed their use cases. Although our examples use alphabets, they can be used to sort lists based on numbers as well.&lt;/p&gt;

&lt;p&gt;As a next step, I would recommend trying to sort an alphabetical list containing items in various cases.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
