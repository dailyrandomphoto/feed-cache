<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to make money selling courses online in 2021 (as a developer)</title>
      <author>Gr√©gory D'Angelo</author>
      <pubDate>Wed, 29 Sep 2021 15:05:55 +0000</pubDate>
      <link>https://dev.to/alterclass/how-to-make-money-selling-courses-online-in-2021-as-a-developer-2f32</link>
      <guid>https://dev.to/alterclass/how-to-make-money-selling-courses-online-in-2021-as-a-developer-2f32</guid>
      <description>&lt;p&gt;As a developer, there are a &lt;a href="https://www.florin-pop.com/blog/2019/08/ways-to-make-money-as-a-developer/"&gt;lot of different ways&lt;/a&gt; to make an (extra) income from your skills other than your day-to-day job. Among all of the options you have, creating and selling courses online to make money is probably the most promising.&lt;/p&gt;

&lt;p&gt;Indeed, the demand for flexible and interactive online courses has been extremely high over the past three to five years, and it will grow even more: the e-Learning market surpassed $250 billion in 2020 and is expected to &lt;a href="https://www.gminsights.com/industry-analysis/elearning-market-size"&gt;reach $1 trillion by 2027&lt;/a&gt;. In other words, the online courses market is gigantic, and there are a lot of buyers out there looking for high-quality courses to upgrade their skills so they can upscale their career.&lt;/p&gt;

&lt;p&gt;And because &lt;a href="https://alterclass.io/teaching"&gt;AlterClass&lt;/a&gt; is all about online education for developers, below are some critical steps and pieces of advice you can follow right now to create and sell programming courses online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choose-the-right-topic"&gt;
  &lt;/a&gt;
  1. Choose the right topic
&lt;/h2&gt;

&lt;p&gt;As obvious as it sounds, the very first thing to do when it comes to creating a new online course is to choose a topic.&lt;/p&gt;

&lt;p&gt;Choosing the right topic to teach can be tricky, but it is crucial for you as the instructor but also for your future students. Indeed, you don't want to choose a subject that no one cares about anymore, like teaching about an outdated web framework, for example, or a topic you are not comfortable with.&lt;/p&gt;

&lt;p&gt;You need to find that sweet spot where you have enough practical experience about an in-demand technology in the industry. People are NOT looking to spend hours learning a new technical skill just for the fun of it (well, some of them do, but they are by far not the majority). Instead, people are looking to acquire new skills that will help them in their career, either with their current job or to look for a new job.&lt;/p&gt;

&lt;p&gt;So you must choose a topic for your students, so they get real employable skills by learning from your online course. In other words, you have to choose a topic that will impact the life of your students and not just a simple thing they can learn about by watching a 15-minutes Youtube video.&lt;/p&gt;

&lt;p&gt;On the other end, you need to have enough experience with the technology you'd like to teach. Indeed, you need to create high-quality content for your course to teach the theory and come up with practical exercises so your students can learn by doing. You can only do that if you have enough practical experience with what you teach.&lt;/p&gt;

&lt;p&gt;But don't get me wrong! You don't need to be an expert with 15 years of experience in your chosen topic. You can very well choose a subject you've learned three months ago and have been using so far. You'll be well suited to teach it to beginners with zero experience in this specific topic as you'll know how to speak to them.&lt;/p&gt;

&lt;p&gt;Finally, don't think you can't teach something just because there is already a course about it somewhere on the web. It is just the opposite! It probably means that there is a high demand for this topic. Plus, we all have different teaching styles, and because of that, your course will be better suited for some students than any of the existing courses.&lt;/p&gt;

&lt;p&gt;You can also find a niche inside the topic you'd like to teach. For example, there is a lot of React JS courses out there. But what about Testing React JS applications? Or you can teach your students about a topic they can apply in a particular situation, like building an e-commerce website with Next.js, FaunaDB, and Stripe?&lt;/p&gt;

&lt;p&gt;If you are a software developer, you have something to teach. So think about it and find your niche topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hq0tFi5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/ideas.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hq0tFi5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/ideas.jpeg" alt="Choose the right topic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-create-your-online-course"&gt;
  &lt;/a&gt;
  2. Create your online course
&lt;/h2&gt;

&lt;p&gt;Once you have your topic for your online coding course, it is time to create the content.&lt;/p&gt;

&lt;p&gt;Most of the programming content we can find on the internet is video-based, either on YouTube or an e-learning platform like Udemy. You also have a lot of text-based content through blogging platforms like Hashnode or Medium.&lt;/p&gt;

&lt;p&gt;But I'd like you to think about it for a moment. How do you think you learn the best technical/programming skill?&lt;/p&gt;

&lt;p&gt;Is it by watching hours of videos of someone coding? Or is it by practicing as you learn at your own pace?&lt;/p&gt;

&lt;p&gt;What I'm trying to say here is that you don't learn such practical skills as programming just by watching others coding, like you don't learn to drive just by watching others driving a car.&lt;/p&gt;

&lt;p&gt;So, for the content of your online programming course, you need to create interactive and engaging lessons. What I mean by that is that you need, on top of the theory (which you could provide through videos and text), to give your students the opportunity to practice the skills you are teaching and to learn on their own through exercises, programming assignments, and projects.&lt;/p&gt;

&lt;p&gt;It's also important to include several quizzes throughout your online course to test the knowledge of your students along the way and help them assess their learning.&lt;/p&gt;

&lt;p&gt;You'll definitely pass the most out of your time creating the content of your online course. So you must have the right tool to help you with that. However, there is not a lot of options out there for creating high-quality and interactive programming courses online, which is why we've built &lt;a href="https://alterclass.io/teaching"&gt;AlterClass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S96S3I1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/course-editor.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S96S3I1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/course-editor.jpeg" alt="The modular online course platform for developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-choose-your-platform-to-host-and-sell-your-course"&gt;
  &lt;/a&gt;
  3. Choose your platform to host and sell your course
&lt;/h2&gt;

&lt;p&gt;At this point, you should have the content of your online course ready to be published (or part of it if you'd like to release it in phases).&lt;/p&gt;

&lt;p&gt;Now, you need to choose a platform that enables you to create the best learning experience for your students and makes it easy for you to sell your online course with integrated payment processing.&lt;/p&gt;

&lt;p&gt;Fortunately, there are many existing e-learning platforms/marketplaces you can use to host and sell your course quickly. Some of the most popular are Udemy, Teachable, Thinkific, and &lt;a href="https://alterclass.io/teaching"&gt;AlterClass&lt;/a&gt;. They all have their pros and cons regarding the type of content you can use to create your online course or the pricing model they use. You need to consider that when choosing the platform for your course. More on that in a future article.&lt;/p&gt;

&lt;p&gt;Or you can either build your own platform and host your online course on it. The advantage of doing so is that you have full control over it. However, you'll spend a LOT of time (probably months) working on things like authentication, payments, hosting, and more before being able to publish your course. Plus, you'll not have this time to focus on creating the content of your course, which is by far the most important thing here.&lt;/p&gt;

&lt;p&gt;Keep in mind that there is no good or bad solution. Choose the option that best suits your needs, budget, and time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L7OdY8_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/cloud-computing.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7OdY8_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/cloud-computing.jpeg" alt="Cloud platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-decide-how-much-to-charge-for-your-course"&gt;
  &lt;/a&gt;
  4. Decide how much to charge for your course
&lt;/h2&gt;

&lt;p&gt;Now that you are all set, you need to decide how much to charge for your online course. While you should not overthink it, there are still a few things you need to consider to choose the price of your course.&lt;/p&gt;

&lt;p&gt;First, you need to check the competition and see where you stand within the market. Here are a few questions you may ask yourself to assess it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you offering a course on a topic that is widely available in the market or a course on a specific niche topic?&lt;/li&gt;
&lt;li&gt;How does your course differ from the existing ones?&lt;/li&gt;
&lt;li&gt;Do you have a specific teaching style compared to your competitors? Or do you have an innovative teaching approach with your course?&lt;/li&gt;
&lt;li&gt;Is your course mainly video/text-based, or does it include a lot of interactive content?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, you need to measure somehow the value you are offering your students with your online course. In step 1, when choosing the topic for your course, you should already have come up with a topic that brings value to your students' careers.&lt;/p&gt;

&lt;p&gt;Indeed, the more they can apply what they have learned throughout their learning journey with your online course, in the real world, in their career, the highest the value you are providing, or in other words, the higher the price of your course.&lt;/p&gt;

&lt;p&gt;Finally, you also need to take into account the cost of production. For example, if you include videos, you should take into account the cost of the gears you have been using (camera, microphone, software, etc...), and the cost of filming and editing those videos as well.&lt;/p&gt;

&lt;p&gt;But you should also consider the cost of running your course. Indeed, depending on the platform you choose to host and sell your course, you probably have some fees for using the service. So make sure to include those fees in your calculation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2gyzfjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/calculator.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2gyzfjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alterclass.io/assets/blog/calculator.jpeg" alt="Calculator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-you-got-skills-monetize-them"&gt;
  &lt;/a&gt;
  Summary - You got skills. Monetize them!
&lt;/h2&gt;

&lt;p&gt;In summary, creating and selling online programming courses is an excellent way to generate (extra) income as a developer and to help your peers learn from your skills and experience.&lt;/p&gt;

&lt;p&gt;In 2021, more and more people are moving online to learn new things and gain the skills they need to improve their careers and future. Plus, technical skills are in high demand in the industry. So as a developer, you have more than ever the opportunity to monetize your skills online.&lt;/p&gt;

&lt;p&gt;However, creating an interactive and engaging technical course online is not an easy task. Most of the platforms available do not provide the necessary tools to do it, and some of them are charging high fees for their service.&lt;/p&gt;

&lt;p&gt;Luckily, with the &lt;a href="https://alterclass.io/teaching"&gt;AlterClass&lt;/a&gt; all-in-one platform, you can build better online programming courses more easily and deliver the best learning experience for your students.&lt;/p&gt;

&lt;p&gt;So if you are serious about monetizing your skills online, checkout &lt;a href="https://alterclass.io/teaching"&gt;AlterClass&lt;/a&gt; as it is free to use.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published here: &lt;a href="https://alterclass.io/blog/how-to-make-money-selling-courses-online-in-2021-as-a-developer"&gt;How to make money selling courses online in 2021 (as a developer)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Getting to know Flutter: Advanced use of ModalBottomSheet</title>
      <author>TheOtherDev/s</author>
      <pubDate>Wed, 29 Sep 2021 15:03:28 +0000</pubDate>
      <link>https://dev.to/theotherdevs/getting-to-know-flutter-advanced-use-of-modalbottomsheet-1hjf</link>
      <guid>https://dev.to/theotherdevs/getting-to-know-flutter-advanced-use-of-modalbottomsheet-1hjf</guid>
      <description>&lt;p&gt;Do you want to present a simple modal picker to the user or just show a nice feedback to a user action? In this tutorial you will learn how to use the &lt;a href="https://api.flutter.dev/flutter/material/showModalBottomSheet.html"&gt;showModalBottomSheet&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;Let's start by creating a simple bottom sheet,  with a text and a button. As you can see to close a modal bottom sheet you will use the &lt;code&gt;.pop()&lt;/code&gt; function of the Navigator, as you do when closing &lt;code&gt;Scaffold&lt;/code&gt; Widgets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModalBottomSheetsPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ModalBottomSheetsPage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Modal bottom sheets'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ElevatedButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Show modal bottom sheet'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_showBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_showBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;showModalBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SafeArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;symmetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;vertical:&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;mainAxisSize:&lt;/span&gt; &lt;span class="n"&gt;MainAxisSize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;crossAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;
                &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="s"&gt;'This is a Modal bottom sheet!'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;textTheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headline4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;textAlign:&lt;/span&gt; &lt;span class="n"&gt;TextAlign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;ElevatedButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Close BottomSheet'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some fanciness and sound the top corners of our bottom sheet, this is incredibly easy, you just need to add the &lt;code&gt;shape&lt;/code&gt; parameter to the &lt;code&gt;showModalBottomSheet&lt;/code&gt; function, specifying the shape that we want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;    &lt;span class="n"&gt;showModalBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;RoundedRectangleBorder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vertical&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SafeArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will do a more complex example, we will display in the bottom sheet a list of 100 elements, and the sheet will expand/collapse while the user scrolls through the list. To do so we will use the &lt;a href="https://api.flutter.dev/flutter/widgets/DraggableScrollableSheet-class.html"&gt;DraggableScrollableSheet&lt;/a&gt; widget.&lt;br&gt;&lt;br&gt;
This widget has been created to do this types of sheet, it has a builder function that exposes a &lt;code&gt;ScrollController&lt;/code&gt; that we will need to use in our ListView to keep the scrolling of the list in sync with the state of the bottom sheet.&lt;/p&gt;

&lt;p&gt;In this case we're also passing the index of the list tile pressed in the pop function, so we could use it later. It will be the result of the &lt;code&gt;Future&lt;/code&gt; of the &lt;code&gt;showModalBottomSheet&lt;/code&gt; function, and we're retrieving it awaiting on&lt;code&gt;showModalBottomSheet&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_showBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;showModalBottomSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;isScrollControlled:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;isDismissible:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;RoundedRectangleBorder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vertical&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DraggableScrollableSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;initialChildSize:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;minChildSize:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;maxChildSize:&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;expand:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scrollController&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SafeArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;controller:&lt;/span&gt; &lt;span class="n"&gt;scrollController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
              &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>flutter</category>
      <category>beginners</category>
      <category>dart</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Bulk Address Verification With the Lob API</title>
      <author>Lob</author>
      <pubDate>Wed, 29 Sep 2021 14:56:08 +0000</pubDate>
      <link>https://dev.to/lob/bulk-address-verification-with-the-lob-api-536o</link>
      <guid>https://dev.to/lob/bulk-address-verification-with-the-lob-api-536o</guid>
      <description>&lt;p&gt;This article is a hands-on tutorial that will show you how to create an app using Lob‚Äôs Address Verification API to verify records from a database in bulk. This tutorial will show you the capabilities of Lob‚Äôs API to help make your direct mail process more efficient.&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you‚Äôre a Node.js developer working with an extensive pre-existing database of address records. The database may contain invalid records, so we use the Lob API to quickly verify the addresses in bulk and flag any bad records found in the database.&lt;/p&gt;

&lt;p&gt;Before getting started, you need to ensure that you have &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt;, npm, &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, and &lt;a href="https://www.postgresql.org/docs/13/app-psql.html"&gt;psql&lt;/a&gt; installed on your development machine.&lt;/p&gt;

&lt;p&gt;You can install Node.js and npm by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the correct installer binary for your system from the &lt;a href="https://nodejs.org/"&gt;official website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install Node.js and npm using the package manager of your system.&lt;/li&gt;
&lt;li&gt;Use a Node.js version manager, such as &lt;a href="https://github.com/nvm-sh/nvm"&gt;NVM&lt;/a&gt;. This also enables you to easily manage multiple versions of Node.js on your development machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can follow one of these tutorials for installing and setting up PostgreSQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart"&gt;Linux&lt;/a&gt; | &lt;a href="https://www.codementor.io/@engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb"&gt;Mac&lt;/a&gt; | &lt;a href="https://www.postgresqltutorial.com/install-postgresql/"&gt;Windows&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bulk-address-verification"&gt;
  &lt;/a&gt;
  Bulk Address Verification
&lt;/h2&gt;

&lt;p&gt;In this section, we‚Äôll review how to create a complete Node.js web app step by step using PostgreSQL and the Lob API to accomplish address verification in bulk. Let‚Äôs start by setting up a PostgreSQL database with fields for address information (name, street address, state, city, ZIP code, and so on). &lt;/p&gt;

&lt;p&gt;Open a new terminal and run the following command: &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Provide the password and press Enter by default there isn‚Äôt a password.&lt;/p&gt;

&lt;p&gt;If you see postgres=# in your terminal, you have successfully logged in.&lt;/p&gt;

&lt;p&gt;If psql can‚Äôt connect to server-  &lt;a href="https://stackoverflow.com/questions/31645550/postgresql-why-psql-cant-connect-to-server"&gt;verify the postgres database is running&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create the addresses table. Use the serial type to create an &lt;a href="https://www.techiediaries.com/auto-increment-primary-key-postgresql/"&gt;auto-incremented primary key&lt;/a&gt;. The code is as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;You can run the following command to see the created table:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Next, let‚Äôs fill the table with some dummy records with both valid and invalid addresses. Use a &lt;a href="https://github.com/EthanRBrown/rrad"&gt;public location&lt;/a&gt; for valid addresses without sensitive info. You can use the following SQL queries:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç&lt;br&gt;
If you want to see the new rows inserted in your database table - &lt;a href="https://www.postgresqltutorial.com/postgresql-show-tables/"&gt;checkout this tutorial&lt;/a&gt;.

&lt;p&gt;Now, let‚Äôs create a web application with Node.js. We use Express.js, a popular framework for powering web apps built on top of Node.js.&lt;/p&gt;

&lt;p&gt;Head over to your terminal and run the following command:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç‚Äç

&lt;p&gt;This creates a package.json file with the following contents:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Next, install the dependencies using the following command:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We installed &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; for the server and &lt;a href="https://node-postgres.com/"&gt;node-postgres (pg)&lt;/a&gt; to connect to PostgreSQL. We also &lt;a href="https://30daysofjavascript.com/nodemon/"&gt;installed nodemon for automatically restarting&lt;/a&gt; the Node application when there are file changes in the directory.&lt;/p&gt;

&lt;p&gt;Now, we must create an index.js file that we use as the main entry point for our app:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Open the package.json file and add the following script to start our app in watch mode using nodemon:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;In the index.js file, we must import the express and path modules and set our app and port variables as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Next, set up the Express app as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Now, let‚Äôs add a route for the GET request to the root (/) URL, and return the HTML page:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Start the server as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Next, create a public/main.html file with the following HTML contents:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Here, we use the &lt;a href="https://www.webtutpro.com/ejs-template-engine-f148420c9ca5"&gt;EJS template syntax&lt;/a&gt; to display the title variable passed from the index.js file.&lt;/p&gt;

&lt;p&gt;Now, start the app using the following command:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç&lt;br&gt;
This starts a server that‚Äôs listening on port 3000. Go to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; with your web browser. You should see a blank page with the ‚ÄúThis is a title!!!‚Äù text.

&lt;h2&gt;
  &lt;a href="#connecting-to-the-postgresql-database"&gt;
  &lt;/a&gt;
  Connecting to the PostgreSQL database
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs connect to the database and retrieve some records. Go to your terminal and run the following command to &lt;a href="https://node-postgres.com/"&gt;install node-postgres (pg)&lt;/a&gt; to connect to PostgreSQL:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;We use the node-postgres module to create a &lt;a href="https://www.techiediaries.com/postgresql-connection-pool-client-example"&gt;pool of connections&lt;/a&gt;. This is useful if we don‚Äôt want to open a client and close it for each query to the database.&lt;/p&gt;

&lt;p&gt;Some resources you won‚Äôt need for this tutorial, but can explore later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kb.objectrocket.com/postgresql/how-to-list-users-in-postgresql-782"&gt;Listing users in psql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chartio.com/resources/tutorials/how-to-set-the-default-user-password-in-postgresql/"&gt;Updating/resetting the password&lt;/a&gt; of a known user&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e"&gt;Creating a user&lt;/a&gt;, a db, and giving the new user permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go back to the index.js file and add the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;h2&gt;
  &lt;a href="#getting-data-from-the-database"&gt;
  &lt;/a&gt;
  Getting data from the database
&lt;/h2&gt;

&lt;p&gt;Update the existing app.get method in your code as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Next, open the main.html file and update it as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Create an HTML table, and loop over the addresses array passed from the index.js file to create the table rows using the &lt;a href="https://ejs.co/#docs"&gt;embedded JavaScript template&lt;/a&gt;. Go to your browser and refresh your app. You should see something like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5Ac7RWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16vuxo7wv7ov9n6kqti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5Ac7RWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16vuxo7wv7ov9n6kqti.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this stage, we can retrieve records from our database. Next, let‚Äôs see how to use &lt;a href="https://docs.lob.com/node#us_verifications"&gt;Lob‚Äôs Node.js Address Verification API SDK&lt;/a&gt; to check whether the address records are valid.&lt;/p&gt;

&lt;p&gt;Our app is in Node.js, so we rely on the Node SDK from Lob. Lob also offers various SDK options for other languages, including Python, Ruby, PHP, Java, and Elixir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-addresses-with-the-lob-api"&gt;
  &lt;/a&gt;
  Verifying addresses with the Lob API
&lt;/h2&gt;

&lt;p&gt;First, create an account at &lt;a href="https://dashboard.lob.com/#/register"&gt;Lob.com&lt;/a&gt; to obtain a live API Key. The key is available in the &lt;a href="https://dashboard.lob.com/#/settings"&gt;Lob Settings Panel&lt;/a&gt; and uses the format, live_*.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBWT_7----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffzm4r9mguv6u9y50mot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBWT_7----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffzm4r9mguv6u9y50mot.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, head over to your terminal and run the following command to install the lob-node package:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç&lt;br&gt;
Now open the index.js file and start by adding the following line after the const port = 3000:


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç&lt;br&gt;
Update the GET route by adding the following code. First, in the rows array of the results object remove the name and id attributes from the rows as follows:


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç

&lt;p&gt;Next, we call the bulkUSVerifications.verify method to verify the addresses in bulk:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç&lt;br&gt;
‚Äç

&lt;p&gt;If there are no errors, add the other two attributes ‚Äî the &lt;a href="https://docs.lob.com/#us_verifications_object"&gt;deliverability&lt;/a&gt; status and the address returned from the Lob API ‚Äî in each row of the rows array. Then render the main.html file with verified addresses, the number of scanned records, and the valid and invalid addresses.&lt;/p&gt;

&lt;p&gt;We use the deliverability string returned from the Lob API to determine the required action according to the different statuses returned by Lob:&lt;/p&gt;

&lt;p&gt;If it returns a deliverable status, we take no action.&lt;br&gt;
If it returns an unnecessary, incorrect, or missing unit status, we flag the address for updating, correcting, or manually reviewing.&lt;br&gt;
If it returns an undeliverable status, we flag it for removal from the database.&lt;br&gt;
Add the following switch statement where we have the /* switch statement */ comment:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;Finally, in the main.html file, let‚Äôs display the status and action for each address, the number of records scanned, and how many valid and invalid results we detected:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
‚Äç

&lt;p&gt;This is a screenshot of the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ3zGWGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb3sp2ho2ozviod9o6q6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ3zGWGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb3sp2ho2ozviod9o6q6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we used Node.js to build a web application that integrates with the Lob API to quickly verify addresses in bulk batches and flag bad records found in the database. We used PostgreSQL as a database with fields for address information (name, street address, state, city, and ZIP codes, including valid and invalid addresses). We tested connecting to our database and retrieving records. Then we used Lob‚Äôs Node.js Address Verification API SDK to check if the address records are valid.&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in bulk address verification and related topics, you can experiment with Lob‚Äôs API for free by &lt;a href="https://dashboard.lob.com/#/register"&gt;signing up&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>node</category>
      <category>postgres</category>
      <category>beginners</category>
    </item>
    <item>
      <title>12+ Github Repositories to Help You Ace Your Job Interview</title>
      <author>Olubisi Idris Ayindeüí°</author>
      <pubDate>Wed, 29 Sep 2021 14:40:39 +0000</pubDate>
      <link>https://dev.to/olanetsoft/12-github-repositories-to-help-you-ace-your-job-interview-2a08</link>
      <guid>https://dev.to/olanetsoft/12-github-repositories-to-help-you-ace-your-job-interview-2a08</guid>
      <description>&lt;p&gt;The word "interview" is frequently associated with anxiety and discomfort. However, you may prepare vital tools to brighten up and organise fruitful interviews with this article's assistance.&lt;/p&gt;

&lt;p&gt;I'll provide you with a list of GitHub repositories that will assist you in preparing for your next technical/coding interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-coding-university-interview"&gt;
  &lt;/a&gt;
  1. Coding University Interview
&lt;/h2&gt;

&lt;p&gt;This excellent repository has everything you'll need for a coding interview. It began as the repository owner's study plan and evolved into a study plan for many others. The author is now employed as a software engineer at Amazon.&lt;/p&gt;

&lt;p&gt;To ace any big tech company's interview, you'll need a multi-month study strategy. &lt;/p&gt;

&lt;p&gt;The technique progresses from programming fundamentals through an advanced data structure, system design, and essential computer science ideas.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jwasham"&gt;
        jwasham
      &lt;/a&gt; / &lt;a href="https://github.com/jwasham/coding-interview-university"&gt;
        coding-interview-university
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A complete computer science study plan to become a software engineer.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Coding Interview University&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I originally created this as a short to-do list of study topics for becoming a software engineer
but it grew to the large list you see today. After going through this study plan, &lt;a href="https://startupnextdoor.com/ive-been-acquired-by-amazon/?src=ciu" rel="nofollow"&gt;I got hired
as a Software Development Engineer at Amazon&lt;/a&gt;
You probably won't have to study as much as I did. Anyway, everything you need is here.&lt;/p&gt;
&lt;p&gt;I studied about 8-12 hours a day, for several months. This is my story: &lt;a href="https://medium.freecodecamp.org/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13" rel="nofollow"&gt;Why I studied full-time for 8 months for a Google interview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; You won't need to study as much as I did. I wasted a lot of time on things I didn't need to know. More info about that below. I'll help you get there without wasting your precious time.&lt;/p&gt;
&lt;p&gt;The items listed here will prepare you well for a technical interview at just about any software company
including the giants:‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jwasham/coding-interview-university"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-build-your-own-x"&gt;
  &lt;/a&gt;
  2. Build Your Own X
&lt;/h2&gt;

&lt;p&gt;Here are some instances of how to impress the employer by developing your own Git, Docker, or framework, among other things.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/danistefanovic"&gt;
        danistefanovic
      &lt;/a&gt; / &lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;
        build-your-own-x
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ü§ì Build your own (insert technology here)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;strong&gt;[&lt;a href="https://github.com/danistefanovic/build-your-own-x/issues/new"&gt;Submit tutorial&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/danistefanovic/build-your-own-xfeynman.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eO6EABbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/danistefanovic/build-your-own-xfeynman.png" alt="Build your own X"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-3d-renderer"&gt;3D Renderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-augmented-reality"&gt;Augmented Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-bittorrent-client"&gt;BitTorrent Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency"&gt;Blockchain / Cryptocurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-bot"&gt;Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-command-line-tool"&gt;Command-Line Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-emulator--virtual-machine"&gt;Emulator / Virtual Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-front-end-framework--library"&gt;Front-end Framework / Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-game"&gt;Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-git"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-network-stack"&gt;Network Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-neural-network"&gt;Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-operating-system"&gt;Operating System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-physics-engine"&gt;Physics Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-programming-language"&gt;Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-regex-engine"&gt;Regex Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-search-engine"&gt;Search Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-shell"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-template-engine"&gt;Template Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-text-editor"&gt;Text Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-visual-recognition-system"&gt;Visual Recognition System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-voxel-engine"&gt;Voxel Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-web-search-engine"&gt;Web Search Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-web-server"&gt;Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#uncategorized"&gt;Uncategorized&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Tutorials&lt;/h2&gt;
&lt;h4&gt;
Build your own &lt;code&gt;3D Renderer&lt;/code&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work" rel="nofollow"&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Introduction to Ray Tracing: a Simple Method for Creating 3D Images&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ssloy/tinyrenderer/wiki"&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How OpenGL works: software rendering in 500 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lodev.org/cgtutor/raycasting.html" rel="nofollow"&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Raycasting engine of Wolfenstein 3D&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pbr-book.org/" rel="nofollow"&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Physically Based Rendering:From Theory To Implementation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm" rel="nofollow"&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Rasterization: a Practical Implementation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.davrous.com/2013/06/13/tutorial-series-learning-how-to-write-a-3d-soft-engine-from-scratch-in-c-typescript-or-javascript/" rel="nofollow"&gt;&lt;strong&gt;C# / TypeScript / JavaScript&lt;/strong&gt;: &lt;em&gt;Learning how to write a 3D soft engine from scratch in C#, TypeScript or JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avik-das.github.io/build-your-own-raytracer/" rel="nofollow"&gt;&lt;strong&gt;Java / JavaScript&lt;/strong&gt;: &lt;em&gt;Build your own 3D renderer&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://blog.rogach.org/2015/08/how-to-create-your-own-simple-3d-render.html" rel="nofollow"&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;How to create your own&lt;/em&gt;&lt;/a&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/danistefanovic/build-your-own-x"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-tech-interview-handbook"&gt;
  &lt;/a&gt;
  3. Tech Interview Handbook
&lt;/h2&gt;

&lt;p&gt;This is your technical interview manual. This one was the most well-organized and straightforward to navigate. It also includes advice on how to deal with behavioural questions, which can be tricky at times.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yangshun"&gt;
        yangshun
      &lt;/a&gt; / &lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;
        tech-interview-handbook
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üíØ Curated interview preparation materials for busy engineers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Tech Interview Handbook&lt;/h1&gt;
&lt;div&gt;
  &lt;a href="https://techinterviewhandbook.org/" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTOyV8Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/yangshun/tech-interview-handbookwebsite/static/img/logo.svg" alt="Tech Interview Handbook" width="400"&gt;
  &lt;/a&gt;
  &lt;br&gt;
  &lt;a href="https://gitpod.io/#https://github.com/yangshun/tech-interview-handbook" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ab059fd13892f6ad2c0b59661ce3265669cac8204fafa8b379ec9c56f67c4391/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d52656164792d2d746f2d2d436f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready to Code"&gt;
  &lt;/a&gt;
  &lt;br&gt;
  &lt;p&gt;
    &lt;em&gt;Credits: &lt;a href="https://dribbble.com/shots/3831443-Tech-Interview-Handbook" rel="nofollow"&gt;Illustration&lt;/a&gt; by &lt;a href="https://dribbble.com/leftaligned" rel="nofollow"&gt;@leftaligned&lt;/a&gt;&lt;/em&gt;
  &lt;/p&gt;
  &lt;h3&gt;
    &lt;a href="https://techinterviewhandbook.org/" rel="nofollow"&gt;Read on the website&lt;/a&gt; | &lt;a href="https://facebook.com/techinterviewhandbook" rel="nofollow"&gt;Follow us on Facebook&lt;/a&gt;
  &lt;/h3&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;
Get paid more. Moonchaser has negotiated hundreds of tech offers. Get 1-1 guidance from their experienced team of ex-FAANG PMs, SWEs, and Recruiters. &lt;a href="https://www.moonchaser.io/?utm_source=techinterviewhandbook&amp;amp;utm_medium=referral&amp;amp;utm_content=github" rel="nofollow"&gt;Find out more&lt;/a&gt;
&lt;/h3&gt;
&lt;/div&gt;

&lt;h2&gt;
What is this?&lt;/h2&gt;
&lt;p&gt;No one has time to do a few hundred LeetCode questions. Here's &lt;em&gt;free and curated&lt;/em&gt; technical interview preparation materials for busy engineers, brought to you by the author of the &lt;a href="https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU" rel="nofollow"&gt;Blind 75 List&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides the usual algorithm questions, other &lt;strong&gt;awesome&lt;/strong&gt; stuff includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/coding-round-overview" rel="nofollow"&gt;How to prepare&lt;/a&gt; for coding interviews&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/cheatsheet" rel="nofollow"&gt;Interview Cheatsheet&lt;/a&gt; - Straight-to-the-point Do's and Don'ts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/algorithms/introduction" rel="nofollow"&gt;Algorithm tips and the best practice questions&lt;/a&gt; categorized by topic&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/interview-formats" rel="nofollow"&gt;Interview formats&lt;/a&gt; of the top tech companies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/behavioral-questions" rel="nofollow"&gt;Behavioral questions&lt;/a&gt; asked by the top tech companies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/questions-to-ask" rel="nofollow"&gt;Good questions to ask your interviewers&lt;/a&gt; at the end of the interviews&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techinterviewhandbook.org/resume" rel="nofollow"&gt;Helpful resume tips&lt;/a&gt; to get your resume noticed and the Do's and‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/yangshun/tech-interview-handbook"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-how-to-secure-anything"&gt;
  &lt;/a&gt;
  4. How to Secure Anything
&lt;/h2&gt;

&lt;p&gt;The repository is well-organized, and it has a wealth of other resources to support your learning.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/veeral-patel"&gt;
        veeral-patel
      &lt;/a&gt; / &lt;a href="https://github.com/veeral-patel/how-to-secure-anything"&gt;
        how-to-secure-anything
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      How to systematically secure anything: a repository about security engineering
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
How to Secure Anything&lt;/h1&gt;
&lt;p&gt;Security engineering is the discipline of building secure systems.&lt;/p&gt;
&lt;p&gt;Its lessons are not just applicable to computer security. In fact, in this repo, I aim to document a process for securing anything, whether it's a medieval castle, an art museum, or a computer network.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please contribute! Create a pull request or just &lt;a href="https://github.com/veeral-patel/how-to-secure-anything/issues/new"&gt;create a issue&lt;/a&gt; for content you'd like to add: I'll add it for you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#what-is-security-engineering"&gt;What is security engineering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#high-level-process"&gt;High level process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#follow-known-best-practices"&gt;Follow known best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#understand-your-adversaries"&gt;Understand your adversaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#security-policies"&gt;Security policies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#security-models"&gt;Security models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#improve-defenses"&gt;Improve defenses&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#minimize-attack-surface"&gt;Minimize attack surface&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#minimize-and-verify-your-trusted-computing-base-tcb"&gt;Minimize and verify your trusted computing base (TCB)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#separate-privileges"&gt;Separate privileges&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#minimize-privileges"&gt;Minimize privileges&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#secure-by-default"&gt;Secure by default&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#secure-by-design"&gt;Secure by design&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#prevent-detect-respond-framework"&gt;Prevent/detect/respond framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#kill-chains"&gt;Kill chains&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#security-design-principles"&gt;Security design principles&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#find-vulnerabilities"&gt;Find vulnerabilities&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#developing-an-attacker-mindset"&gt;Developing an attacker mindset&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#think-in-graphs"&gt;Think in graphs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#attack-trees"&gt;Attack trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#on--un-bypassable--tamperproof--functionally-correct--fail-closed"&gt;On, un-bypassable, tamperproof, functionally correct, fail closed&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#example--a-burglar"&gt;Example: a burglar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#assumptions-analysis"&gt;Assumptions analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#failure-analysis"&gt;Failure analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#fault-tree-analysis"&gt;Fault tree analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/veeral-patel/how-to-secure-anything#fmea"&gt;FMEA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/veeral-patel/how-to-secure-anything"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-javascript-algorithms"&gt;
  &lt;/a&gt;
  5. JavaScript Algorithms
&lt;/h2&gt;

&lt;p&gt;The JavaScript Algorithms repository focuses on JavaScript positions. However, if you understand the principles and know how to implement them in JavaScript, you'll very certainly be able to do so in other languages as well.&lt;/p&gt;

&lt;p&gt;Each Data Structure and Algorithm has its README file, which offers links to other resources. As a result, if you don't comprehend a subject, you can always look up more information in the additional content.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trekhleb"&gt;
        trekhleb
      &lt;/a&gt; / &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;
        javascript-algorithms
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üìù Algorithms and data structures implemented in JavaScript with explanations and links to further readings
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
JavaScript Algorithms and Data Structures&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPiprYPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg" alt="CI"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/trekhleb/javascript-algorithms" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ff751911f19ea8aefdbd2b20184c1ab5fba47caf8b31a02fb18f8d7df6e43ba/68747470733a2f2f636f6465636f762e696f2f67682f7472656b686c65622f6a6176617363726970742d616c676f726974686d732f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This repository contains JavaScript based examples of many
popular algorithms and data structures.&lt;/p&gt;
&lt;p&gt;Each algorithm and data structure has its own separate README
with related explanations and links for further reading (including ones
to YouTube videos).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.zh-CN.md"&gt;&lt;em&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.zh-TW.md"&gt;&lt;em&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.ko-KR.md"&gt;&lt;em&gt;ÌïúÍµ≠Ïñ¥&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.ja-JP.md"&gt;&lt;em&gt;Êó•Êú¨Ë™û&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.pl-PL.md"&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.fr-FR.md"&gt;&lt;em&gt;Fran√ßais&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.es-ES.md"&gt;&lt;em&gt;Espa√±ol&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.pt-BR.md"&gt;&lt;em&gt;Portugu√™s&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.ru-RU.md"&gt;&lt;em&gt;–†—É—Å—Å–∫–∏–π&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.tr-TR.md"&gt;&lt;em&gt;T√ºrk&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.it-IT.md"&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.id-ID.md"&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.uk-UA.md"&gt;&lt;em&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.ar-AR.md"&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/trekhleb/javascript-algorithmsREADME.de-DE.md"&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚òù Note that this project is meant to be used for learning and researching purposes
only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Data Structures&lt;/h2&gt;
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can
be accessed and modified efficiently. More precisely, a data structure is a collection of data
values, the relationships among them, and the functions or operations that can‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trekhleb/javascript-algorithms"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6-how-the-web-works"&gt;
  &lt;/a&gt;
  6. How The Web Works
&lt;/h2&gt;

&lt;p&gt;You can learn about the DNS, HTTP protocol, and server, as well as DOM Tree, Render Tree, page painting, and other topics.&lt;/p&gt;

&lt;p&gt;It's an excellent resource for learning the fundamentals of how the internet works. Furthermore, the storage has additional links that allow you to delve deeper into various topics.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vasanthk"&gt;
        vasanthk
      &lt;/a&gt; / &lt;a href="https://github.com/vasanthk/how-web-works"&gt;
        how-web-works
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      What happens behind the scenes when we type www.google.com in a browser?
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
How Web Works&lt;/h1&gt;
&lt;p&gt;What happens behind the scenes when we type google.com in a browser?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#googles-g-key-is-pressed"&gt;Google's 'g' key is pressed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#when-you-hit-enter"&gt;When you hit 'Enter'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#parse-the-url"&gt;Parse the URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#check-hsts-list"&gt;Check HSTS list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#dns-lookup"&gt;DNS lookup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#opening-of-a-socket--tls-handshake"&gt;Opening of a socket + TLS handshake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#http-protocol"&gt;HTTP protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#http-server-request-handle"&gt;HTTP Server Request Handle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#server-response"&gt;Server Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#behind-the-scenes-of-the-browser"&gt;Behind the scenes of the Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#the-browsers-high-level-structure"&gt;The browser's high level structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#rendering-engine"&gt;Rendering Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#the-main-flow"&gt;The Main flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#parsing-basics"&gt;Parsing Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#dom-tree"&gt;DOM Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#render-tree"&gt;Render Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#render-trees-relation-to-the-dom-tree"&gt;Render tree's relation to the DOM tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#css-parsing"&gt;CSS Parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#layout"&gt;Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#painting"&gt;Painting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vasanthk/how-web-works#trivia"&gt;Trivia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Google's 'g' key is pressed&lt;/h2&gt;
&lt;p&gt;When you just press "g" the browser receives the event and the entire auto-complete machinery kicks into high gear. Depending on your browser's algorithm and if you are in private/incognito mode or not various suggestions will be presented to you in the dropbox below the URL bar. Most of these algorithms prioritize results based on search history and bookmarks. You are‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/vasanthk/how-web-works"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#7-the-algorithms"&gt;
  &lt;/a&gt;
  7. The Algorithms
&lt;/h2&gt;

&lt;p&gt;Clean, legible code with suitable comments in your preferred language can be found here. The community is fantastic and is fast to reply to any issues you may have.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/TheAlgorithms"&gt;
        TheAlgorithms
      &lt;/a&gt; / &lt;a href="https://github.com/TheAlgorithms/Javascript"&gt;
        Javascript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A repository for All algorithms implemented in Javascript (for educational purposes only)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Algorithms - JavaScript&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/TheAlgorithms/Javascript/blob/master/CONTRIBUTING.md"&gt;&lt;img src="https://camo.githubusercontent.com/67eb7c8b1ed6c9019f25d5ac1331577db2b42f15303a452aa91e94fc4565019a/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76312e7376673f6c6162656c3d436f6e747269627574696f6e73266d6573736167653d57656c636f6d6526636f6c6f723d303035396233267374796c653d666c61742d737175617265" alt="contributions welcome"&gt;&lt;/a&gt;¬†
&lt;a href="https://lgtm.com/projects/g/TheAlgorithms/Javascript/context:javascript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f7c2f45d1de634eb034a3b6ea7813b565c4e578b3c35d2bc3a008dd53bab92cb/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f546865416c676f726974686d732f4a6176617363726970742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138267374796c653d666c61742d737175617265" alt="Language grade: JavaScript"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/TheAlgorithms/Javascript/workflows/Node%20CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJKahnX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/TheAlgorithms/Javascript/workflows/Node%2520CI/badge.svg" alt="Node CI"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/TheAlgorithms/Javascript/workflows/update_directory_md/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79mAt4hf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/TheAlgorithms/Javascript/workflows/update_directory_md/badge.svg" alt="update_directory_md"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/c7MnfGFGa6" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1de46c8a86db708e5b8709e4c0f6c38f82e38e3bb26e94e256a1c8a123eee549/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3830383034353932353535363638323738322e7376673f6c6f676f3d646973636f726426636f6c6f72423d373238394441267374796c653d666c61742d737175617265" alt="Discord chat"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/67ad96b7a47f290a6bac9dddbe79ba560dd7dc93616d708267a2940bba696a9c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f546865416c676f726974686d732f4a6176617363726970742e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/67ad96b7a47f290a6bac9dddbe79ba560dd7dc93616d708267a2940bba696a9c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f546865416c676f726974686d732f4a6176617363726970742e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265" alt=""&gt;&lt;/a&gt;¬†
&lt;a href="https://standardjs.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2acd7bc792209ab5d9722e003ca4aac48f2c779750bd295aef733cabfcdf3729/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374616e646172646a732d253233663364663439" alt="standard.js"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
All algorithms implemented in JavaScript (for educational purposes only)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gitpod.io/#https://github.com/TheAlgorithms/Javascript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/76e60919474807718793857d8eb615e7a50b18b04050577e5a35c19421f260a3/68747470733a2f2f676974706f642e696f2f627574746f6e2f6f70656e2d696e2d676974706f642e737667" alt="Open in Gitpod"&gt;&lt;/a&gt;¬†&lt;/p&gt;
&lt;p&gt;These are for demonstration purposes only. There are many implementations of sorts in the JavaScript standard library that are much better for performance reasons.&lt;/p&gt;
&lt;h2&gt;
Contribution Guidelines&lt;/h2&gt;
&lt;p&gt;Read our &lt;a href="https://github.com/TheAlgorithms/JavascriptCONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt;
&lt;h2&gt;
List of Algorithms&lt;/h2&gt;
&lt;p&gt;See our &lt;a href="https://github.com/TheAlgorithms/JavascriptDIRECTORY.md"&gt;directory&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Algorithm Explanation&lt;/h2&gt;
&lt;p&gt;see our &lt;a href="https://github.com/TheAlgorithms/Javascript/wiki"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/TheAlgorithms/Javascript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#8-the-system-primer"&gt;
  &lt;/a&gt;
  8. The System Primer
&lt;/h2&gt;

&lt;p&gt;This is a collection of internet-based materials and resources‚Äîthe repository's owner compiled resources and materials from many sources. Furthermore, the repository is updated regularly, so keep an eye on it!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/donnemartin"&gt;
        donnemartin
      &lt;/a&gt; / &lt;a href="https://github.com/donnemartin/system-design-primer"&gt;
        system-design-primer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Learn how to design large-scale systems. Prep for the system design interview.  Includes Anki flashcards.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/donnemartin/system-design-primerREADME.md"&gt;English&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primerREADME-ja.md"&gt;Êó•Êú¨Ë™û&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primerREADME-zh-Hans.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primerREADME-zh-TW.md"&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt; | &lt;a href="https://github.com/donnemartin/system-design-primer/issues/170"&gt;ÿßŸÑÿπŸéÿ±Ÿéÿ®ŸêŸäŸéŸëÿ©‚Äé&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/220"&gt;‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/40"&gt;Portugu√™s do Brasil&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/186"&gt;Deutsch&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/130"&gt;ŒµŒªŒªŒ∑ŒΩŒπŒ∫Œ¨&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/272"&gt;◊¢◊ë◊®◊ô◊™&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/104"&gt;Italiano&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/102"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/110"&gt;ŸÅÿßÿ±ÿ≥€å&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/68"&gt;Polski&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/87"&gt;—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/136"&gt;Espa√±ol&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/187"&gt;‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/39"&gt;T√ºrk√ße&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/127"&gt;ti·∫øng Vi·ªát&lt;/a&gt; ‚àô &lt;a href="https://github.com/donnemartin/system-design-primer/issues/250"&gt;Fran√ßais&lt;/a&gt; | &lt;a href="https://github.com/donnemartin/system-design-primer/issues/28"&gt;Add Translation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Help &lt;a href="https://github.com/donnemartin/system-design-primerTRANSLATIONS.md"&gt;translate&lt;/a&gt; this guide!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
The System Design Primer&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/donnemartin/system-design-primerimages/jj3A5N8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCt8CCXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/donnemartin/system-design-primerimages/jj3A5N8.png"&gt;&lt;/a&gt;
  &lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn how to design large-scale systems.&lt;/p&gt;
&lt;p&gt;Prep for the system design interview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
Learn how to design large-scale systems&lt;/h3&gt;
&lt;p&gt;Learning how to design scalable systems will help you become a better engineer.&lt;/p&gt;
&lt;p&gt;System design is a broad topic.  There is a &lt;strong&gt;vast amount of resources scattered throughout the web&lt;/strong&gt; on system design principles.&lt;/p&gt;
&lt;p&gt;This repo is an &lt;strong&gt;organized collection&lt;/strong&gt; of resources to help you learn how to build systems at scale.&lt;/p&gt;
&lt;h3&gt;
Learn from the open source community&lt;/h3&gt;
&lt;p&gt;This is a continually updated, open source project.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/donnemartin/system-design-primer#contributing"&gt;Contributions&lt;/a&gt; are welcome!&lt;/p&gt;
&lt;h3&gt;
Prep for the system design interview&lt;/h3&gt;
&lt;p&gt;In addition‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/donnemartin/system-design-primer"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#9-awesome-interview-questions"&gt;
  &lt;/a&gt;
  9. Awesome Interview Questions
&lt;/h2&gt;

&lt;p&gt;Excellent Interview Questions is a selected list of "amazing" interview questions that are frequently asked.&lt;/p&gt;

&lt;p&gt;In many cases, the interviewer will ask you questions on the programming language in addition to the problem-solving questions. These ideas are crucial, and they show the interviewer how well you understand the programming language.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DopplerHQ"&gt;
        DopplerHQ
      &lt;/a&gt; / &lt;a href="https://github.com/DopplerHQ/awesome-interview-questions"&gt;
        awesome-interview-questions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      :octocat: A curated awesome list of lists of interview questions. Feel free to contribute! üéì 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
    &lt;p&gt;
        &lt;a href="https://doppler.com?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=awesome-interview&amp;amp;utm_source=github" rel="nofollow"&gt;
      &lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href="https://doppler.com?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=awesome-interview&amp;amp;utm_source=github" rel="nofollow"&gt; 
                &lt;img src="https://camo.githubusercontent.com/0b7046d12223b30accf7609035ff5ff104bb05b406d1842add5849fba4436e7d/68747470733a2f2f64617368626f6172642e646f70706c65722e636f6d2f696d67732f6c6f676f2d6c6f6e672e737667" width="260" alt="Doppler"&gt;   
            &lt;/a&gt;&lt;/div&gt;
&lt;a href="https://doppler.com?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=awesome-interview&amp;amp;utm_source=github" rel="nofollow"&gt;  
      &lt;br&gt;
            &lt;b&gt;All your environment variables, in one place&lt;/b&gt; 
            &lt;div&gt;Stop struggling with scattered API keys, hacking together home-brewed tools,&lt;/div&gt;
            &lt;div&gt;and avoiding access controls. Keep your team and servers in sync with Doppler.&lt;/div&gt;
            &lt;br&gt;
        &lt;/a&gt;    
        
&lt;/div&gt;  
&lt;h1&gt;
Awesome Interviews &lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A curated list of lists of technical interview questions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questionsawesome.md"&gt;What makes for an awesome list?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please read the &lt;a href="https://github.com/DopplerHQ/awesome-interview-questionscontributing.md"&gt;contribution guidelines&lt;/a&gt; or &lt;a href="https://github.com/DopplerHQ/awesome-interview-questionscreate-list.md"&gt;creating a list guide&lt;/a&gt; if you want to contribute.&lt;/p&gt;
&lt;h3&gt;
Table of Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#programming-languagesframeworksplatforms"&gt;Programming Languages/Frameworks/Platforms&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#android"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#angularjs"&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#backbonejs"&gt;BackboneJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#c"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#c-1"&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#c-2"&gt;C‚ôØ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#net"&gt;.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#clojure"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#css"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#cucumber"&gt;Cucumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#django"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#emberjs"&gt;EmberJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#erlang"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#golang"&gt;Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#graphql"&gt;GraphQl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#html"&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#ionic"&gt;Ionic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#ios"&gt;iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#jquery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#front-end-build-tools"&gt;Front-end build tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#knockoutjs"&gt;KnockoutJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#less"&gt;Less&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#lisp"&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#nodejs"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#objective-c"&gt;Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#reactjs"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#ruby-on-rails"&gt;Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#rust"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#sass"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#shell"&gt;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#spark"&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#swift"&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#vuejs"&gt;Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#wordpress"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#typescript"&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#database-technologies"&gt;Database technologies&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#cassandra"&gt;Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#microsoft-access"&gt;Microsoft Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#mongodb"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#mysql"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#neo4j"&gt;Neo4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#oracle"&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#postgres"&gt;Postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#sql"&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#sql-lite"&gt;SQL Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#caching-technologies"&gt;Caching technologies&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#memcached"&gt;Memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#redis"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#os"&gt;OS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#linux"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#algorithms"&gt;Algorithms&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#blockchain"&gt;Blockchain&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#coding-exercises"&gt;Coding exercises&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#comprehensive-lists"&gt;Comprehensive lists&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#design-patterns"&gt;Design patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#data-structures"&gt;Data structures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#networks"&gt;Networks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#security"&gt;Security&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/DopplerHQ/awesome-interview-questions#data-science"&gt;Data Science&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Programming Languages/Frameworks/Platforms&lt;/h2&gt;
&lt;h3&gt;
Android&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.careerride.com/android-interview-questions.aspx" rel="nofollow"&gt;10&lt;/a&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/DopplerHQ/awesome-interview-questions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10-interview-resources"&gt;
  &lt;/a&gt;
  10. Interview Resources
&lt;/h2&gt;

&lt;p&gt;This repository offers a curated assortment of helpful articles, videos, manuals, websites, books, online courses, and more for anything relevant to technical or coding interviews.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Olshansk"&gt;
        Olshansk
      &lt;/a&gt; / &lt;a href="https://github.com/Olshansk/interview"&gt;
        interview
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Everything you need to prepare for your technical interview
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://gitter.im/andreis/interview" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6288b2e809c42d199ae01e43aa2d558ab334dd2c392baad2bbe5e2cac5783da4/68747470733a2f2f6261646765732e6769747465722e696d2f616e64726569732f696e746572766965772e706e67" alt="Gitter chat"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Olshansk/interview#algorithms"&gt;Algorithms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#books-1"&gt;Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#coding-practice"&gt;Coding Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#guides"&gt;Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#misc"&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Olshansk/interview#guides-1"&gt;Guides&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#articles"&gt;Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#books"&gt;Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#courses"&gt;Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#misc-1"&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#mock-interviews"&gt;Mock interviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#qa"&gt;Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#sites"&gt;Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#videos"&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Olshansk/interview#languages-and-technologies"&gt;Languages and technologies&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#android"&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#aspnet"&gt;ASP.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#node"&gt;Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Olshansk/interview#other-topics"&gt;Other topics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#crypto"&gt;Crypto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#funny"&gt;Funny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#maths"&gt;Maths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#networking"&gt;Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#operating-systems"&gt;Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#system-design"&gt;System Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Olshansk/interview#similar-repos"&gt;Similar repos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Found a dead link? Try &lt;a href="http://archive.is/" rel="nofollow"&gt;archive.is&lt;/a&gt; or the &lt;a href="https://archive.org/web/" rel="nofollow"&gt;Wayback Machine&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Algorithms&lt;/h2&gt;
&lt;h3&gt;
Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Jeff Erickson - &lt;a href="http://jeffe.cs.illinois.edu/teaching/algorithms/" rel="nofollow"&gt;Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Steven Skiena ‚Äì &lt;a href="http://www.algorist.com/" rel="nofollow"&gt;The Algorithm Design Manual&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Udi Manber ‚Äì &lt;a href="https://www.amazon.com/Introduction-Algorithms-Creative-Udi-Manber/dp/0201120372" rel="nofollow"&gt;Introduction to Algorithms: A Creative Approach&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cormen, Leiserson, Rivest, Stein ‚Äì &lt;a href="https://mitpress.mit.edu/books/introduction-algorithms" rel="nofollow"&gt;Introduction to Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sedgewick, Wayne ‚Äì &lt;a href="http://algs4.cs.princeton.edu/home/" rel="nofollow"&gt;Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Antti Laaksonen ‚Äì &lt;a href="https://cses.fi/book.html" rel="nofollow"&gt;Competitive Programmer's Handbook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Steven &amp;amp; Felix Halim ‚Äì &lt;a href="https://cpbook.net/" rel="nofollow"&gt;Competitive Programming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Jon Bentley ‚Äì &lt;a href="http://www.wou.edu/~jcm/Spring-P-2015/Programming%20Pearls%20(2nd%20Ed)%20Bentley.pdf" rel="nofollow"&gt;Programming Pearls&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://e-maxx-eng.appspot.com/" rel="nofollow"&gt;E-Maxx Algorithms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://e-maxx.ru/algo/" rel="nofollow"&gt;Original [RU]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vhf/free-programming-books"&gt;vhf/free-programming-books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://it-ebooks.info/" rel="nofollow"&gt;it-ebooks.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;S. Dasgupta, C. H. Papadimitriou, and U. V. Vazirani -&lt;a href="http://algorithmics.lsi.upc.edu/docs/Dasgupta-Papadimitriou-Vazirani.pdf" rel="nofollow"&gt;Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Coding practice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://leetcode.com/" rel="nofollow"&gt;LeetCode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;LeetCode w/ Explanations &lt;a href="https://github.com/labuladong/fucking-algorithm/tree/english"&gt;labuladong/fucking-algorithm&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewbit.com/" rel="nofollow"&gt;InterviewBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codility.com/" rel="nofollow"&gt;Codility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervue.io/" rel="nofollow"&gt;Intervue.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/" rel="nofollow"&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://projecteuler.net/" rel="nofollow"&gt;Project Euler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spoj.com/" rel="nofollow"&gt;Spoj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/codejam/contests.html" rel="nofollow"&gt;Google Code Jam practice problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerearth.com/" rel="nofollow"&gt;HackerEarth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.topcoder.com/" rel="nofollow"&gt;Top Coder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codechef.com/" rel="nofollow"&gt;CodeChef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codewars.com/" rel="nofollow"&gt;Codewars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesignal.com" rel="nofollow"&gt;CodeSignal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codekata.com/" rel="nofollow"&gt;CodeKata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.firecode.io/" rel="nofollow"&gt;Firecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coderpad.io/" rel="nofollow"&gt;CoderPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exercism.io/" rel="nofollow"&gt;Exercism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Guides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.geeksforgeeks.org/" rel="nofollow"&gt;GeeksForGeeks&lt;/a&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Olshansk/interview"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#11-learn-go"&gt;
  &lt;/a&gt;
  11. Learn Go
&lt;/h2&gt;

&lt;p&gt;This repository is geared toward Go beginners. Before your Go developer interview, you can use this repository to review basic concepts and take some quizzes.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inancgumus"&gt;
        inancgumus
      &lt;/a&gt; / &lt;a href="https://github.com/inancgumus/learngo"&gt;
        learngo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      1000+ Hand-Crafted Go Examples, Exercises, and Quizzes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
A Huge Number of Go Examples, Exercises and Quizzes&lt;/h1&gt;
&lt;p&gt;Best way of learning is doing. Inside this repository, you will find thousands of Go examples, exercises and quizzes. I initially created this repository for my &lt;strong&gt;&lt;a href="https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang/?referralCode=5CE6EB34E2B1EF4A7D37" rel="nofollow"&gt;Go: Bootcamp Course&lt;/a&gt;&lt;/strong&gt;. Later on, I added a lot of exercises, and I wanted every programmer who is not yet enrolled in the course to learn for free as well. So here it is. Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Available in the following languages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/inancgumus/learngo"&gt;English&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/inancgumus/learngotranslation/spanish"&gt;Spanish&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(WIP: Please Contribute)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
‚ù§Ô∏è Help other fellow developers&lt;/h2&gt;
&lt;p&gt;Sharing is free but caring is priceless. &lt;a href="https://twitter.com/intent/tweet?text=I%27m%20learning%20%23golang%20with%201000%2B%20hand-crafted%20examples%2C%20exercises%2C%20and%20quizzes.&amp;amp;url=https://github.com/inancgumus/learngo&amp;amp;via=inancgumus" rel="nofollow"&gt;So, now please click here&lt;/a&gt; and share this repository on Twitter.&lt;/p&gt;
&lt;h2&gt;
Stay in touch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I usually tweet Go tips and tricks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8aba8b84e477d1962d203f9867ce54c8394d08ee93c9880e749f43aa425d355a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f696e616e6367756d75732e7376673f7374796c653d736f6369616c266c6162656c3d40696e616e6367756d7573" alt="@inancgumus"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://eepurl.com/c4DMNX" rel="nofollow"&gt;Subscribe to my newsletter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Get updates from me.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.learngoprogramming.com" rel="nofollow"&gt;Read my blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Followed by 5K+ developers, and contains dozens of illustrated articles about Go.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCYxepZhtnFIVRh8t5H_QAdg?view_as=subscriber" rel="nofollow"&gt;Watch my Youtube channel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;Whole materials are licensed‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inancgumus/learngo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#12-cleancodejavascript"&gt;
  &lt;/a&gt;
  12. clean-code-javascript
&lt;/h2&gt;

&lt;p&gt;This repository serves as a reference for writing readable, reusable, and refactorable JavaScript code. It's based on Robert C. Martin's Clean Code, but it's been tweaked to work with JavaScript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ryanmcdermott"&gt;
        ryanmcdermott
      &lt;/a&gt; / &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;
        clean-code-javascript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üõÅ Clean Code concepts adapted for JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
clean-code-javascript&lt;/h1&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#objects-and-data-structures"&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#classes"&gt;Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#solid"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#concurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#formatting"&gt;Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript#translation"&gt;Translation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/af72fb10accee2e9a59efec2a0b436242fad5bb2a00ca11494e7c759834625cc/68747470733a2f2f7777772e6f736e6577732e636f6d2f696d616765732f636f6d6963732f7774666d2e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/af72fb10accee2e9a59efec2a0b436242fad5bb2a00ca11494e7c759834625cc/68747470733a2f2f7777772e6f736e6577732e636f6d2f696d616765732f636f6d6963732f7774666d2e6a7067" alt="Humorous image of software quality estimation as a count of how many expletives you shout when reading code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software engineering principles, from Robert C. Martin's book
&lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" rel="nofollow"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;
adapted for JavaScript. This is not a style guide. It's a guide to producing
&lt;a href="https://github.com/ryanmcdermott/3rs-of-software-architecture"&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt;
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be
universally agreed upon. These are guidelines and nothing more, but they are
ones codified over many years of collective experience by the authors of
&lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are
still learning a lot. When software architecture is as old as architecture
itself, maybe then we will have harder rules to follow. For now, let these
guidelines serve as a touchstone by which to assess the quality of the
JavaScript‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#13-javascript-questions"&gt;
  &lt;/a&gt;
  13. JavaScript Questions
&lt;/h2&gt;

&lt;p&gt;This is a beginner's level of difficulty. This repository provides many multiple-choice JavaScript questions that can be used to brush up on your knowledge of the language.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lydiahallie"&gt;
        lydiahallie
      &lt;/a&gt; / &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;
        javascript-questions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A long list of (advanced) JavaScript questions, and their explanations ‚ú®  
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e1a54ddebc870cb971c713b20765f1c2ed328efff836eebe3c2bafccbc12bb0a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f3334342f6a6176617363726970742e706e67"&gt;&lt;img height="60" src="https://camo.githubusercontent.com/e1a54ddebc870cb971c713b20765f1c2ed328efff836eebe3c2bafccbc12bb0a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f3334342f6a6176617363726970742e706e67"&gt;&lt;/a&gt;
  &lt;h1&gt;
JavaScript Questions&lt;/h1&gt;

&lt;p&gt;&lt;span&gt;I post multiple choice JavaScript questions on my &lt;a href="https://www.instagram.com/theavocoder" rel="nofollow"&gt;Instagram&lt;/a&gt; &lt;strong&gt;stories&lt;/strong&gt;, which I'll also post here! Last updated: &lt;a href="https://github.com/lydiahallie/javascript-questions#20200612"&gt;&lt;b&gt;June 12th&lt;/b&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit, or prepare for your coding interview! üí™ üöÄ I update this repo regularly with new questions. I added the answers in the &lt;strong&gt;collapsed sections&lt;/strong&gt; below the questions, simply click on them to expand it. It's just for fun, good luck! ‚ù§Ô∏è&lt;/p&gt;
&lt;p&gt;Feel free to reach out to me! üòä &lt;br&gt;
&lt;a href="https://www.instagram.com/theavocoder" rel="nofollow"&gt;Instagram&lt;/a&gt; || &lt;a href="https://www.twitter.com/lydiahallie" rel="nofollow"&gt;Twitter&lt;/a&gt; || &lt;a href="https://www.linkedin.com/in/lydia-hallie" rel="nofollow"&gt;LinkedIn&lt;/a&gt; || &lt;a href="https://www.lydiahallie.dev" rel="nofollow"&gt;Blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feel free to use them in a project! üòÉ  I would &lt;em&gt;really&lt;/em&gt; appreciate a reference to this repo, I create the questions and explanations (yes I'm sad lol) and the community helps me so much to maintain and improve it! üí™üèº Thank you and have fun!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;b&gt; See 18 Available Translations üá∏üá¶üá™üá¨üáßüá¶üá©üá™üá™üá∏üá´üá∑üáÆüá©&lt;/b&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lydiahallie/javascript-questions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I hope you find these resources helpful üòä&lt;/p&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt; | &lt;a href="https://idrisolubisi.com/"&gt;Portfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Type Aliases vs Interfaces in TypeScript</title>
      <author>Tolu Agboola</author>
      <pubDate>Wed, 29 Sep 2021 14:34:18 +0000</pubDate>
      <link>https://dev.to/toluagboola/type-aliases-vs-interfaces-in-typescript-3ggg</link>
      <guid>https://dev.to/toluagboola/type-aliases-vs-interfaces-in-typescript-3ggg</guid>
      <description>&lt;p&gt;TypeScript provides two ways to create custom types for our data and they include &lt;strong&gt;Type aliases&lt;/strong&gt; and &lt;strong&gt;Interfaces&lt;/strong&gt;. This article will discuss the similarities and differences between them, and the best use cases for each. Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-aliases"&gt;
  &lt;/a&gt;
  Type aliases
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://devdocs.io/typescript/2/everyday-types#type-aliases"&gt;type alias&lt;/a&gt; is basically a name for any type. Type aliases can be used to represent not only primitives but also object types, union types, tuples and intersections. Let's take a look at some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Union type&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// Object type&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// We're making use of another type alias here&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;isWebDev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tolu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isWebDev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type aliases are declared with the &lt;code&gt;type&lt;/code&gt; keyword preceding them. Think of them like regular JavaScript variables that are used to represent certain values. Wherever you use a variable name, it is evaluated to the value that it represents. Type aliases work in a similar manner. Wherever you annotate a type by its alias, the alias will evaluate to the type(s) that it stands for. Like variables, you can't declare the same type alias more than once. Aliases are also never inferred by TypeScript, you have to explicitly annotate them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://devdocs.io/typescript/2/everyday-types#interfaces"&gt;Interfaces&lt;/a&gt; are another way to name data structures e.g objects. The declaration syntax for interfaces is different from that of type aliases. Let's rewrite the type alias &lt;code&gt;Person&lt;/code&gt; above to an interface declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;isWebDev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unions-and-intersections"&gt;
  &lt;/a&gt;
  Unions and Intersections
&lt;/h3&gt;

&lt;p&gt;A union type is formed from two or more other types, and represents a value that can be any one of them. Intersections allow us to combine multiple existing types into a single type that has all the features of those types. Take the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;speaks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;barks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;HumanAndDog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Intersection&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;HumanOrDogOrBoth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Union&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;humanAndDog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HumanAndDog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// must have all the properties of Human and Dog&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sparky&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;speaks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;barks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;humanOrDog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HumanOrDogOrBoth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// can have the properties of Human or Dog, or both&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tolu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;speaks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type aliases and interfaces can be combined into one &lt;code&gt;type&lt;/code&gt; using unions or intersections, but cannot be combined into an &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tuples"&gt;
  &lt;/a&gt;
  Tuples
&lt;/h3&gt;

&lt;p&gt;Tuples are a way to type arrays with fixed lengths, accounting for every item in said array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Mix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In TypeScript, tuples can be declared with types but not interfaces. However, tuples can be used inside interfaces, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Mix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declaration-merging"&gt;
  &lt;/a&gt;
  Declaration merging
&lt;/h3&gt;

&lt;p&gt;If you declare one &lt;code&gt;interface&lt;/code&gt; with the same name more than once, TypeScript merges them into one declaration and will treat them as a single interface. This is called &lt;strong&gt;declaration merging&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Duplicate identifier Num&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// has the properties of both instances of Person&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tolu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Declaration merging only works on interfaces. TypeScript will give an error if you declare the same type alias more than once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extends"&gt;
  &lt;/a&gt;
  Extends
&lt;/h3&gt;

&lt;p&gt;Both type aliases and interfaces can be extended. However, the syntax differs. A derived type alias or interface has all the properties and methods of its base type alias or interface, and can also define additional members.&lt;/p&gt;

&lt;p&gt;A type alias can extend another type alias using an ampersand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type aliases can also extend interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interfaces can extend type aliases with the &lt;code&gt;extends&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interfaces can extend other interfaces the same way they extend type aliases. Interfaces can also extend multiple interfaces separated by commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sparky&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interfaces-extending-classes"&gt;
  &lt;/a&gt;
  Interfaces extending classes
&lt;/h3&gt;

&lt;p&gt;TypeScript allows an interface to extend a &lt;a href="https://devdocs.io/typescript/2/classes"&gt;class&lt;/a&gt;. When this happens, the interface inherits the members of the base class, including the private and public members, but not their implementations. This means that when you create an interface that extends a class with private members, only that class or its subclasses can implement that interface. This allows you to restrict the use of the interface to the class or subclasses of the class that it extends.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;greetFriend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Interface extending the Base class&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;giveGist&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// New class that extends Base class and implements the Derived interface&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NewClass&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Base&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;giveGist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I saw this the other day...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NewClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greetFriend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hello!&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;giveGist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// I saw this the other day...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implements"&gt;
  &lt;/a&gt;
  Implements
&lt;/h3&gt;

&lt;p&gt;TypeScript supports class-based object-oriented programming. As a result, it allows classes to implement both type aliases and interfaces using the &lt;code&gt;implements&lt;/code&gt; keyword. An error will be thrown if a class fails to correctly implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Interface being implemented by a class&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SomeClass&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Type alias being implemented by a class&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SomeClass2&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A class can also implement multiple interfaces separated by commas e.g &lt;code&gt;class A implements B, C {}&lt;/code&gt;. Note that a class can not implement or extend a type alias that represents a union type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ERROR: A class can only implement an object type or intersection of object types with statically known members.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SomeClass3&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It‚Äôs important to understand that an implements clause is only a check that the class can be treated as the interface type. It doesn‚Äôt change the type of the class or its methods at all. A common source of error is to assume that an implements clause will change the class type - it doesn‚Äôt!&lt;/em&gt;&lt;br&gt;
‚Äî &lt;a href="https://www.typescriptlang.org/docs/handbook/2/classes.html#class-heritage"&gt;TypeScript official docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#which-should-i-use"&gt;
  &lt;/a&gt;
  Which should I use?
&lt;/h2&gt;

&lt;p&gt;Type aliases and interfaces are very similar and you can choose freely between them. Personally, I use type aliases when defining primitive, union, intersection, function or tuple types. However, I make use of interfaces when defining object types or to take advantage of declaration merging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have seen the differences and similarities between type aliases and interfaces.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both type aliases and interfaces can be used to describe the shape of an object or a function signature. But the syntax differs.&lt;/li&gt;
&lt;li&gt;Declaration merging only works on interfaces and not type aliases.&lt;/li&gt;
&lt;li&gt;You cannot declare a union, intersection or tuple with the &lt;code&gt;interface&lt;/code&gt; keyword. However, you can make use of them within an interface.&lt;/li&gt;
&lt;li&gt;Classes can implement both type aliases and interfaces, but not type aliases that represent a union type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that you have gained something useful from this article. Kindly leave any questions or additional information in the comment section.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Write Integration Tests Easily Using Trace-Based Testing</title>
      <author>Tom Zach</author>
      <pubDate>Wed, 29 Sep 2021 14:19:29 +0000</pubDate>
      <link>https://dev.to/aspecto/how-to-write-integration-tests-easily-using-trace-based-testing-3lm2</link>
      <guid>https://dev.to/aspecto/how-to-write-integration-tests-easily-using-trace-based-testing-3lm2</guid>
      <description>&lt;p&gt;This article is part of the &lt;strong&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;Aspecto&lt;/a&gt; Hello World series&lt;/strong&gt;, where we tackle microservices-related topics for you. Our team searches the web for common issues, then we solve them ourselves and bring you complete how-to guides. Aspecto is an OpenTelemetry-based distributed tracing platform for developers and teams of distributed applications.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Integration tests are never fun to write.&lt;/p&gt;

&lt;p&gt;Setting up an environment, finding a way to reproduce the needed state of it, populating it with relevant data, etc ‚Äì It‚Äôs all work no play.&lt;/p&gt;

&lt;p&gt;In this blog post, I will show you how to write an integration test and talk about why you want to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-motivation-for-writing-an-integration-test"&gt;
  &lt;/a&gt;
  The motivation for writing an integration test
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs begin by talking about why we even want to write one.&lt;/p&gt;

&lt;p&gt;So you finished writing all of the code of your task and everything is working.&lt;/p&gt;

&lt;p&gt;How do you make sure it stays this way and does not break when another developer changes just one tiny thing that happens to break your feature? (Not on purpose of course, or so we hope).&lt;/p&gt;

&lt;p&gt;The solution: Instead of moving onto the next feature right away, you can write an integration test to make sure that your team gets notified if something breaks (by running it in a CI/CD pipeline that alerts you). &lt;/p&gt;

&lt;p&gt;The role of the integration test is to verify that not only does each function you wrote works as a standalone (that‚Äôs unit tests), but also to verify that all of the functions play out well together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Spoiler alert: in this guide, I will also show you how to make sure that a database received the relevant params.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we will build:&lt;/p&gt;

&lt;p&gt;I like to keep everything as simple as possible, giving you only what you need to get on with your day.&lt;/p&gt;

&lt;p&gt;Therefore, I will build a simple to-do app: a nodejs express service that authenticates the user, with endpoints for creating &amp;amp; viewing his tasks.&lt;/p&gt;

&lt;p&gt;The integration test will verify the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Create a new TODO item&lt;/li&gt;
&lt;li&gt;Verify the todo item was saved with the relevant email &amp;amp; todo text was saved to the database&lt;/li&gt;
&lt;li&gt;Fetch all todo items&lt;/li&gt;
&lt;li&gt;Verify that the relevant email was used to query the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tools I will be using:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS + Express&lt;/li&gt;
&lt;li&gt;Jest ‚Äì a framework for authoring and executing nodejs tests&lt;/li&gt;
&lt;li&gt;Malabi ‚Äì a Trace-Based Testing library that lets me make assertions on real data passed to moving parts like mongodb / elasticsearch and more (I will further elaborate on this below).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#part-1-setting-up-the-tested-microservice"&gt;
  &lt;/a&gt;
  Part 1 ‚Äì Setting up the tested microservice
&lt;/h1&gt;

&lt;p&gt;Note: If you already have a service you wish to test, feel free to skip to part 2 where I show how to write the actual integration test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-set-up-the-project"&gt;
  &lt;/a&gt;
  Step 1 ‚Äì Set up the project
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs use express-generator to generate the initial code for our express app, with the pug view engine.&lt;/p&gt;

&lt;p&gt;Also, let‚Äôs install the packages we will be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator -v pug
npm i --save jsonwebtoken mongoose passport passport-jwt axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be storing the data in a MongoDB database, which you can run locally using docker like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull mongo
docker run -d -p 27017:27017 mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-create-the-views"&gt;
  &lt;/a&gt;
  Step 2 ‚Äì create the views
&lt;/h2&gt;

&lt;p&gt;We‚Äôll add a very simple UI for our imaginary users to add TODO items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;login.pug&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
 body
   form(action='/auth/login?redirectToTodos=true', method='POST')
     p
       | username:
       input(type='text', name='username', value='tom@a.com')
       |          &amp;lt;br/&amp;gt;password:
       input(type='password', name='password', value='password')
     input(type='submit', value='Submit')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;app.pug&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
   p Welcome to the app screen &amp;lt;b&amp;gt;#{user}&amp;lt;/b&amp;gt;
   form(action='/todos/', method='POST')
       p
           | new todo text:
           input(type='text', name='username', value='hi')
       input(type='submit', value='Submit')
   ul
     each val in todos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-adding-routes"&gt;
  &lt;/a&gt;
  Step 3 ‚Äì Adding routes
&lt;/h2&gt;

&lt;p&gt;In the routes folder, let‚Äôs delete the users‚Äô file, we won‚Äôt be using it.&lt;/p&gt;

&lt;p&gt;Now place the following code in the index.js file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const var express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const TOKEN_SECRET = 'SECRET';

router.get('/login', function(req, res, next) {
 res.render('login', { title: 'Express' });
});

router.post('/auth/login', function(req, res, next) {
 const email = req.body.username;
 const token = jwt.sign({ email }, TOKEN_SECRET, {
   expiresIn: 60 * 60,
 });
 res.cookie('auth', token, { httpOnly: true });
 req.query.redirectToTodos ? res.redirect('/todos') : res.json({ success: true });
});


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have two endpoints ‚Äì one for rendering the login view for our users, and the other one for performing the login with a username &amp;amp; password. We‚Äôre not verifying passwords here, as authentication is not the focus of the blog.&lt;/p&gt;

&lt;p&gt;The way it works in general: login, sign a JWT token with email, send to client with the response.&lt;/p&gt;

&lt;p&gt;I added a small modification here ‚Äì redirectToTodos param, to avoid writing client-side code.&lt;/p&gt;

&lt;p&gt;In real life, I would not add it and have the client handle the JSON response. For the purpose of this post, it‚Äôs good enough.&lt;/p&gt;

&lt;p&gt;Let‚Äôs add another routes file called todos.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');
const mongoose = require('mongoose');

async function connectToMongoose() {
 await mongoose.connect('mongodb://localhost:27017/test');
}

connectToMongoose().catch(err =&amp;gt; console.log(err));

const todoSchema = new mongoose.Schema({
 text: String,
 email: String
});

const Todo = mongoose.model('Todo', todoSchema);

router.get('/',
 (req, res, next) =&amp;gt; {
   passport.authenticate('jwt', { session: false },  async (err, user, info) =&amp;gt; {
     if (err) {
       console.log('error is', err);
       res.status(500).send('An error has occurred, we cannot greet you at the moment.');
     }
     else {
       console.log('user is', user);
       console.log('info is', info);
       const { email } = user;
       const todos = await Todo.find({ email });

       res.render('app',{ success: true, user: email, todos });
     }
   })(req, res, next);
 });

router.post('/',
 (req, res, next) =&amp;gt; {
   passport.authenticate('jwt', { session: false },  async (err, user, info) =&amp;gt; {
     if (err) {
       console.log('error is', err);
       res.status(500).send('An error has occurred, we cannot greet you at the moment.');
     }
     else {
       console.log('user is', user);
       console.log('info is', info);
       const todo = new Todo({ text: 'Hey that is my new todo', email: user.email });
       await todo.save();
       res.json({ success: true });
     }
   })(req, res, next);
 });


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file I define the mongoose Todo model and add two endpoints: GET for retrieving all todos for the current user, and POST for creating one.&lt;/p&gt;

&lt;p&gt;I use the passport-jwt strategy to decode the user‚Äôs email (which is sent with the request as a cookie)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-adding-appjs"&gt;
  &lt;/a&gt;
  Step 4 ‚Äì Adding app.js
&lt;/h2&gt;

&lt;p&gt;The app.js file contains different setups for authentication &amp;amp; routing. I won‚Äôt dive into this deeply. If you‚Äôre curious feel free to &lt;a href="https://www.aspecto.io/blog/microservices-authentication-strategies-theory-to-practice/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;check out my guide to microservices authentication strategies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var todoRouter = require('./routes/todos');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

const passport = require('passport');
const JwtStrategy = require('passport-jwt').Strategy,
 ExtractJwt = require('passport-jwt').ExtractJwt;

app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);
app.use('/todos', todoRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
 next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
 // set locals, only providing error in development
 res.locals.message = err.message;
 res.locals.error = req.app.get('env') === 'development' ? err : {};

 // render the error page
 res.status(err.status || 500);
 res.render('error');
});

const cookieExtractor = function(req) {
 let token = null;
 if (req &amp;amp;&amp;amp; req.cookies)
 {
   token = req.cookies['auth'];
 }
 return token;
};

const TOKEN_SECRET = 'SECRET';

const opts = {
 jwtFromRequest: ExtractJwt.fromExtractors([cookieExtractor]),
 secretOrKey: TOKEN_SECRET,
};

passport.use(
 'jwt',
 new JwtStrategy(opts, (jwt_payload, done) =&amp;gt; {
   try {
     console.log('jwt_payload', jwt_payload);
     done(null, jwt_payload);
   } catch (err) {
     done(err);
   }
 }),
);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-5-running-the-app"&gt;
  &lt;/a&gt;
  Step 5 ‚Äì Running the app
&lt;/h1&gt;

&lt;p&gt;Now you can simply run the app using and go to localhost:3000/login, login and submit the form to create a todo item and see that it is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#part-2-writing-an-integration-test"&gt;
  &lt;/a&gt;
  Part 2: Writing an integration test
&lt;/h1&gt;

&lt;p&gt;In this part, we will be using jest &amp;amp; Malabi to write our integration test.&lt;/p&gt;

&lt;p&gt;Jest is a library that lets you author and execute tests for nodejs. &lt;/p&gt;

&lt;p&gt;As for Malabi ‚Äì an explanation follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aspecto-io/malabi?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;Malabi&lt;/a&gt; is an open-source Javascript framework based on OpenTelemetry that allows you to leverage trace data and improve assertion capabilities. This library introduces a new way of testing services: Trace-based testing (TBT).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Here‚Äôs a quick tutorial on Malabi and how it works:&lt;/em&gt;&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UWtnqGA6E44"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trace-based-testing"&gt;
  &lt;/a&gt;
  Trace based testing
&lt;/h2&gt;

&lt;p&gt;So what is Trace Based Testing anyway? Good thing you ask.&lt;/p&gt;

&lt;p&gt;It is a new approach that utilizes &lt;a href="http://opentelemtry.io/"&gt;OpenTelemetry&lt;/a&gt; to our advantage in testing.&lt;/p&gt;

&lt;p&gt;Opentelemetry gives us SDKs that let us instrument our application, meaning to create data of what calls are being made to endpoints, databases and essentially is aimed at giving us visibility on our microservices.&lt;/p&gt;

&lt;p&gt;You can read more about Malabi and Trace-based testing in &lt;a href="https://www.aspecto.io/blog/trace-based-testing-with-opentelemetry-meet-open-source-malabi/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By instrumenting our tested microservice, we‚Äôre able to make assertions on what API calls were made, with what parameters. &lt;/p&gt;

&lt;p&gt;We can also assert how a database was queried ‚Äì in our case, which exact parameter did Mongo receive when it was asked for all todos by the current user. We want to assert the current user and know we don‚Äôt have a bug causing us to log in with one user but query another user‚Äôs data. &lt;/p&gt;

&lt;p&gt;Malabi wraps the opentelemetry SDK, creates spans (actions performed in the service), and exposes an HTTP endpoint for you to query &amp;amp; assert on.&lt;/p&gt;

&lt;p&gt;Enough theory for now ‚Äì Let‚Äôs begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-perform-installs"&gt;
  &lt;/a&gt;
  Step 1 ‚Äì perform installs
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev jest malabi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following lines at the top of our app.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const malabi = require('malabi');
malabi.instrument();
malabi.serveMalabiFromHttpApp(18393);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Malabi to create spans for us (actions we can assert on, for example ‚Äì a MongoDB query and an HTTP request are 2 examples of possible spans).&lt;/p&gt;

&lt;p&gt;It also tells malabi to expose an API endpoint at port 18393 that lets the test runner get these spans and then assert on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-a-new-folder-amp-test-file-testsintegspecjs"&gt;
  &lt;/a&gt;
  Step 2- add a new folder &amp;amp; test file: tests/integ.spec.js
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios').default;
const { fetchRemoteTelemetry, clearRemoteTelemetry } = require('malabi');
const getMalabiTelemetryRepository = async () =&amp;gt; await fetchRemoteTelemetry({ portOrBaseUrl: 18393 });

describe('testing service-under-test remotely', () =&amp;gt; {
 beforeEach(async () =&amp;gt; {
   // We must reset all collected spans between tests to make sure span aren't leaking between tests.
   await clearRemoteTelemetry({ portOrBaseUrl: 18393 });
 });

 it('successful /todo request', async () =&amp;gt; {
   // simulate login
   const loginRes = await axios.post(`http://localhost:3000/auth/login`, { username: 'tom@a.com', password: 'password' });
   const authCookie = loginRes.headers['set-cookie'];

   // Create a new todo item
   const newTodoRes = await axios.post(`http://localhost:3000/todos`, {}, { headers: {
       Cookie: authCookie
   } });
   // console.log('newTodoRes', newTodoRes);

   // call to the service under test - internally it will call another API to fetch the todo items.
   await axios(`http://localhost:3000/todos/`, { headers: {
       Cookie: authCookie
   } });

   // Get instrumented spans
   const repo = await getMalabiTelemetryRepository({ portOrBaseUrl: 13893 });

   // This is the span that holds data from the creation of the new todo item
   const postTodoSpan = repo.spans.mongo().first;
   const emailUsedForCreatingNewTodo = JSON.parse(postTodoSpan.dbStatement).document.email;
   console.log('emailUsedForCreatingNewTodo', emailUsedForCreatingNewTodo);
   // Assert the email was saved equals the email we logged in with
   expect(emailUsedForCreatingNewTodo).toEqual("tom@a.com")

   // This is the span that holds data from the fetching of todos from mongo for current user
   const getTodosSpan = repo.spans.mongo().second;
   const emailUsedInMongoQuery = JSON.parse(getTodosSpan.dbStatement).condition.email;

   // Assert the email was used for querying equals the email we logged in with
   expect(emailUsedInMongoQuery).toEqual("tom@a.com")
 });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to note about the above file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getMalabiTelemetryRepository&lt;/code&gt; ‚Äì fetches spans created in the current run, from the malabi endpoint.&lt;/p&gt;

&lt;p&gt;We can then use the received object to query for specific span types, like all Mongo spans, all http requests, etc.&lt;/p&gt;

&lt;p&gt;We also have clearRemoteTelemetry that cleans up the in-memory cache of spans between test runs. This helps maintain our test clean &amp;amp; not polluted between test runs.&lt;/p&gt;

&lt;p&gt;Notice we have made 2 assertions: one that the post request saved the todo item with the relevant email (the one we logged in with), and the second one verifies that we fetched only todos that belong to that user.&lt;/p&gt;

&lt;p&gt;You can now run the test using the ‚Äújest‚Äù command, and see that everything is working as expected.&lt;/p&gt;

&lt;p&gt;As you can see, this is a very simple and clean way we can make sure the connections between our different functions and moving parts are working as expected.&lt;/p&gt;

&lt;p&gt;Of course, in production, you would most likely set this up as part of a CI/CD workflow, but this is not the focus of this guide.&lt;/p&gt;

&lt;p&gt;That‚Äôs basically it, I hope this guide was useful for you, feel free to reach out to me &lt;a href="https://twitter.com/magnificoder"&gt;@magnificoder&lt;/a&gt; for any questions you may have!&lt;/p&gt;




&lt;p&gt;Feel free to check out some of my other articles, like this one: &lt;a href="https://www.aspecto.io/blog/how-to-deploy-jaeger-on-aws-a-comprehensive-step-by-step-guide/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;How to Deploy Jaeger on AWS: a Comprehensive Step-by-Step Guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>microservices</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>State of Solid - September 2021</title>
      <author>Ryan Carniato</author>
      <pubDate>Wed, 29 Sep 2021 14:10:05 +0000</pubDate>
      <link>https://dev.to/ryansolid/state-of-solid-september-2021-4mi2</link>
      <guid>https://dev.to/ryansolid/state-of-solid-september-2021-4mi2</guid>
      <description>&lt;p&gt;A lot of exciting things have been going in the Solid in the last few months since the 1.0 release.&lt;/p&gt;

&lt;p&gt;Let's start with some big news.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#netlify-joins-up-as-an-official-deployment-partner"&gt;
  &lt;/a&gt;
  Netlify joins up as an Official Deployment Partner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSxcnxhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w00wmhamyf0r5ek6b901.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSxcnxhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w00wmhamyf0r5ek6b901.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are super excited to announce that Netlify has come on board as a Deployment partner and sponsor for the project. They will be contributing &lt;a href="https://opencollective.com/solid"&gt;$500 a month&lt;/a&gt; towards the development and growth of Solid.&lt;/p&gt;

&lt;p&gt;We will be adding the &lt;a href="https://www.netlify.com/blog/2016/11/29/introducing-the-deploy-to-netlify-button/"&gt;Deploy with Netlify&lt;/a&gt; to our official &lt;a href="https://github.com/solidjs/templates"&gt;starter templates&lt;/a&gt; to make it easier than ever to deploy Solid applications.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-release-and-response"&gt;
  &lt;/a&gt;
  1.0 Release and Response
&lt;/h2&gt;

&lt;p&gt;We've had an incredible response to the 1.0 release. It is great to see years of work come to fruition. See what some of the voices in the industry have been saying about Solid:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPA7btCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/754886061872979968/BzaOWhs1_normal.jpg" alt="üßÅüç® Mark Dalgleish profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        üßÅüç® Mark Dalgleish
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/markdalgleish"&gt;@markdalgleish&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Wow, I didn't expect this‚Äîa React alternative that actually looks convincing to me.&lt;br&gt;&lt;br&gt;Also, looks like vanilla-extract would be a perfect fit with this.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JeusgXwojH"&gt;solidjs.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:50 AM - 29 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkIzey0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/619677584805208064/RwwbnNpi_normal.jpg" alt="David K. üéπ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        David K. üéπ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/davidkpiano"&gt;@davidkpiano&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Solid has the reactivity that React should have had, and the impressive performance benefits that come with it. This is going to be a framework well worth exploring.&lt;br&gt;&lt;br&gt;(Also, XState example in the release! üíØ) &lt;a href="https://t.co/yOn2c5sHbD"&gt;twitter.com/solid_js/statu‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:19 PM - 28 Jun 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            SolidJS
          &lt;/span&gt;
          @solid_js
        &lt;/div&gt;
        üöÄ We are so happy to announce Solid is 1.0!! üéâ 

@RyanCarniato #DEVCommunity #solidjs #javascript #webdev https://t.co/CkK9UoWZOJ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4NYLqAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1192174732189339649/NYGFeR-K_normal.jpg" alt="Michel Weststrate profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michel Weststrate
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @mweststrate
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Not a revolution, but really solid (pun) evolution; clean component model, really efficient run-time model, deeply embedded reactivity. Definitely think it's worth giving it a shot in fresh new, limited scope projects! &lt;a href="https://t.co/iOiE30T2fz"&gt;twitter.com/solid_js/statu‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:47 PM - 28 Jun 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            SolidJS
          &lt;/span&gt;
          @solid_js
        &lt;/div&gt;
        üöÄ We are so happy to announce Solid is 1.0!! üéâ 

@RyanCarniato #DEVCommunity #solidjs #javascript #webdev https://t.co/CkK9UoWZOJ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JD7T770--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1284159487453081601/P0IRO1B9_normal.jpg" alt="Dominic Gannaway profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominic Gannaway
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @trueadm
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      After reading through the source of SolidJS and understanding some of the design constraints, I'm really excited about its future. You can see lots of inspiration taken from other libraries, and lots of innovation too.&lt;br&gt;&lt;br&gt;I recommend checking it out too: &lt;a href="https://t.co/xZhTrMBMP3"&gt;github.com/solidjs/solid&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:25 PM - 10 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47T0nuZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8YtWoJVoBkgRx0.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwNG1SN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1272979356529221632/sxvncugt_normal.jpg" alt="fks profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        fks
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fredkschott"&gt;@fredkschott&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm not sure I fully appreciated how fast &lt;a href="https://twitter.com/solid_js"&gt;@solid_js&lt;/a&gt; is until I checked out this benchmark. Awesome job &lt;a href="https://twitter.com/RyanCarniato"&gt;@RyanCarniato&lt;/a&gt; and team.&lt;br&gt;&lt;a href="https://t.co/4Lgubv4doi"&gt;krausest.github.io/js-framework-b‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;br&gt;raw javascript &amp;gt; solid &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; svelte &amp;gt; preact &amp;amp; vue &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; react 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:33 PM - 09 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#expanding-the-team"&gt;
  &lt;/a&gt;
  Expanding the Team
&lt;/h2&gt;

&lt;p&gt;I started this project and ran it on my own for many years but it had definitely grown beyond me. We've been expanding the team. Since I've never formally introduced the rest of the team I will take the opportunity now:&lt;/p&gt;

&lt;p&gt;David Di Biase - Web Site/Community Manager&lt;/p&gt;

&lt;p&gt;Alexandre Mouton Brady - Templates/Integrations&lt;/p&gt;

&lt;p&gt;Milo M. - Tooling&lt;/p&gt;

&lt;p&gt;Ryan Turnquist - Router/Libraries&lt;/p&gt;

&lt;p&gt;Dan Jutan - Documentation/Training&lt;/p&gt;

&lt;p&gt;There are also a small group of contributors making some great adds to Solid's ecosystem. You can see &lt;a href="https://www.solidjs.com/contributors"&gt;bios here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#growing-ecosystem"&gt;
  &lt;/a&gt;
  Growing Ecosystem
&lt;/h2&gt;

&lt;p&gt;Every day it seems like new libraries are coming out that showcase what you can do with Solid. So I thought I'd highlight a few of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davedbase/solid-primitives"&gt;Solid Primitives&lt;/a&gt; - Our "React Use". A set of high-quality reusable primitives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/otonashixav/solid-flip"&gt;Solid Flip&lt;/a&gt; - A new animation library that makes it easier than ever to do flip animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thisbeyond/solid-dnd"&gt;Solid DND&lt;/a&gt; - Drag and drop port of dnd-kit made to leverage Solid's fine-grained reactivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pablo-abc/felte/blob/main/packages/solid/README.md"&gt;@felte/solid&lt;/a&gt; - A port of the Felte form library for Svelte available in Solid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Acidic9/solid-urql"&gt;Solid URQL&lt;/a&gt; - A URQL wrapper to make using GraphQL in Solid easier than ever.&lt;/p&gt;

&lt;p&gt;While not complete, there are several Component libraries currently being worked on:&lt;br&gt;
&lt;a href="https://github.com/LXSMNSYC/solid-headless"&gt;Solid Headless&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/atk/solid-blocks"&gt;Solid Blocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And recently with the question of DSL a few projects have been attempting to bring Svelte-like syntax into Solid:&lt;br&gt;
&lt;a href="https://github.com/LXSMNSYC/babel-plugin-solid-labels"&gt;Babel Plugin Solid Labels&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/orenelbaum/babel-plugin-solid-undestructure"&gt;Babel Plugin Undestructure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested in seeing more. Check out the &lt;a href="https://www.solidjs.com/resources"&gt;Resources section&lt;/a&gt; of the website or the community-driven &lt;a href="https://github.com/one-aalam/awesome-solid-js"&gt;Awesome Solid&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#translations"&gt;
  &lt;/a&gt;
  Translations
&lt;/h2&gt;

&lt;p&gt;We could have never anticipated the interest in translations right out the gate but so much great work being done by contributors. We now have documentation on &lt;a href="https://solidjs.com"&gt;solidjs.com&lt;/a&gt; available in 10 languages.&lt;/p&gt;

&lt;p&gt;The full tutorials are being translated as well and are currently available in English, Japanese, and Chinese.&lt;/p&gt;

&lt;p&gt;Thanks so much to:&lt;br&gt;
Gaving Cong üá®üá≥&lt;br&gt;
Jun Shindo üáØüáµ&lt;br&gt;
David Di Biase üáÆüáπ&lt;br&gt;
Candido Sales Gomez üáßüá∑&lt;br&gt;
Steven Yung üá´üá∑&lt;br&gt;
Mehdi (MidouWebDev) üá´üá∑&lt;br&gt;
Athif Humam üáÆüá©&lt;br&gt;
Alex Lohr üá©üá™&lt;br&gt;
Pheianox üá∑üá∫&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#content-explosion"&gt;
  &lt;/a&gt;
  Content Explosion
&lt;/h2&gt;

&lt;p&gt;In a similar vein, the amount of new Solid content that has been pouring in has been amazing. Honestly, there is so much between featured on &lt;a href="https://www.youtube.com/watch?v=cuHDQhDhvPE"&gt;Fireship&lt;/a&gt;, to the many independent streams and interviews/podcasts I participated in. But here's a couple that really stood out:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#articles"&gt;
  &lt;/a&gt;
  Articles
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/introduction-to-the-solid-javascript-library/"&gt;Introduction to the Solid JavaScript Library by Charlie Gerard&lt;/a&gt; - CSS-Tricks&lt;br&gt;
One of the best introductions we've seen written to date. A really good overview of all the core features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://segmentfault.com/a/1190000040275257/en"&gt;SolidJS said stiffly: I am more react than React by Kasong&lt;/a&gt; - Segment Fault&lt;br&gt;
Despite the translation, you can get the humor of this article which provides some great examples to illustrate Solid's approach.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://podrocket.logrocket.com/solidjs"&gt;SolidJS with Ryan Carniato&lt;/a&gt; - PodRocket&lt;br&gt;
We talk about a lot more than just Solid but trends in frontend in general.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://show.nikoskatsikanis.com/episodes/ryan-carniato"&gt;React vs Svelte vs Solid &amp;amp; MicroFrontends | Ryan Carniato&lt;/a&gt; - Nikos Show&lt;br&gt;
This podcast talks about developments in compilers and in server-side rendering in JavaScript Frameworks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OqcHoLWyyIw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/StLjM0Ki6iA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And if you haven't seen it yet check out my talk at React Finland which is a great introduction to SolidJS for those coming from a React background.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2iK9zzhSKo4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I've also started streaming on &lt;a href="https://www.youtube.com/channel/UCLLVlcmcCP4CUe7xSqVEnxw"&gt;my Youtube channel&lt;/a&gt;. So if you are interested in the inner workings of the framework could be worth checking out.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#current-development"&gt;
  &lt;/a&gt;
  Current Development
&lt;/h2&gt;

&lt;p&gt;New things are coming down the pipeline for Solid in the coming months. Mostly we want to make it easier for people to approach using Solid. For that reason, there are 3 things we are working on that we feel will aid in that process a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;While my tireless nights writing those over a couple months in the spring got us here, we can do better. Dan Jutan has been doing a great job focusing on the language to make the tutorials more accessible to developers with all levels of familiarity. We are also working on more beginner-focused, long-form tutorials to help onboarding people newer to web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-side-rendering"&gt;
  &lt;/a&gt;
  Server Side Rendering
&lt;/h3&gt;

&lt;p&gt;Consolidating and generalizing on use cases to make it easier to use Solid in a variety of projects. This will include better documentation and rounding out a lot of the rough edges. The flagship experience for Single Page App SSR will be present through our new &lt;a href="https://github.com/solidjs/solid-start"&gt;Solid Start&lt;/a&gt; project which is an official minimal Meta-Framework built on top of &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; with support of deploying to various platforms. But this work will also include better support for integration with &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt; for those interested in Multi-Page Apps. So no matter what type of web application you are building we have you covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactive-performance"&gt;
  &lt;/a&gt;
  Reactive Performance
&lt;/h3&gt;

&lt;p&gt;Finally, I'm personally doing a rework and optimization of our core reactive system. The last time I gave it a good tune was back in February 2020. We've added a lot of features since then and it's time to streamline out the edge cases and improve performance. This is especially important as we look to support custom renderers, for things like WebGL or native.&lt;/p&gt;




&lt;p&gt;And that's it for now. We're going to be doing these updates more often in the future. So much incredible stuff has been going on and I can only imagine what more we will have to share next time.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Different features on DEV and FOREM?</title>
      <author>dezuhan</author>
      <pubDate>Wed, 29 Sep 2021 14:02:18 +0000</pubDate>
      <link>https://dev.to/dezuhan/different-features-on-dev-and-forem-k20</link>
      <guid>https://dev.to/dezuhan/different-features-on-dev-and-forem-k20</guid>
      <description>&lt;p&gt;I recently discovered &lt;strong&gt;FOREM&lt;/strong&gt; and it turns out that &lt;strong&gt;FOREM&lt;/strong&gt; is like a same thing with &lt;strong&gt;DEV&lt;/strong&gt;, but I'm still confused about what the difference is? Which is better in terms of features, community and more?&lt;/p&gt;

&lt;p&gt;Because it's not appropriate if a programmer / community / organization has many blog sites with all the same posts, I think instead of wasting time writing / recopying, it's better to focus on 1 platform, but maximized in creating content.&lt;/p&gt;

&lt;p&gt;I still don't know much about &lt;strong&gt;FOREM&lt;/strong&gt; and &lt;strong&gt;DEV&lt;/strong&gt; which is better, built first and how big is the community between them? I hope someone can help me with this problem and from this article it can help our friends who are still confused about which one is better.&lt;/p&gt;

</description>
      <category>forem</category>
      <category>dev</category>
      <category>qna</category>
      <category>compare</category>
    </item>
    <item>
      <title>I made a CLI tool in Rust to play mechanical keyboard sound effects globally</title>
      <author>Kunal Bagaria</author>
      <pubDate>Wed, 29 Sep 2021 13:58:54 +0000</pubDate>
      <link>https://dev.to/kb24x7/i-made-a-cli-tool-in-rust-to-play-mechanical-keyboard-sound-effects-globally-23a8</link>
      <guid>https://dev.to/kb24x7/i-made-a-cli-tool-in-rust-to-play-mechanical-keyboard-sound-effects-globally-23a8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#rustyvibes"&gt;
  &lt;/a&gt;
  Rustyvibes
&lt;/h3&gt;

&lt;p&gt;A Rust CLI that makes mechanical keyboard sound effects on every key press. It was a collaborative effort that took months to make, is now finally releasing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  macOS:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install kb24x7/rustyvibes/rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#windows-linux"&gt;
  &lt;/a&gt;
  Windows / Linux:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo install rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rustyvibes &amp;lt;soundpack_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" alt="Screen Shot 2021-09-29 at 7.23.10 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-soundpacks-here"&gt;
  &lt;/a&gt;
  Download Soundpacks: &lt;a href="https://drive.google.com/file/d/1LQEQ9aOVQAs_wgVecXkjaA9K4LXnCdp_/view?usp=sharing"&gt;Here&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#mechvibes-vs-rustyvibes"&gt;
  &lt;/a&gt;
  Mechvibes vs. Rustyvibes
&lt;/h3&gt;

&lt;p&gt;How does Rustyvibes compare to its competitors like Mechvibes? Mechvibes uses Electron and Chromium which is very resource intensive. Rustyvibes on the other hand is made with Rust and can be upto 10x-100x more resource efficient.&lt;/p&gt;

&lt;p&gt;Mechvibes Soundpacks: &lt;a href="https://docs.google.com/spreadsheets/d/1PimUN_Qn3CWqfn-93YdVW8OWy8nzpz3w3me41S8S494/edit#gid=0"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h3&gt;

&lt;p&gt;Rustyvibes is a fully &lt;a href="https://github.com/kb24x7/rustyvibes"&gt;open-sourced&lt;/a&gt; project and never uses any network activity at all.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>showdev</category>
      <category>sound</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Solidity Basics for JavaScript Devs</title>
      <author>K</author>
      <pubDate>Wed, 29 Sep 2021 13:48:24 +0000</pubDate>
      <link>https://dev.to/fllstck/solidity-basics-for-javascript-devs-57c</link>
      <guid>https://dev.to/fllstck/solidity-basics-for-javascript-devs-57c</guid>
      <description>&lt;p&gt;With all the NFT hype around, it happened that I got tasked to write an article about NFTs and serverless. So, last three weeks, I dived into books, courses, and videos about tokens and smart contracts.&lt;/p&gt;

&lt;p&gt;It's an exciting topic, and I think despite the downsides of the token economy, it can be the next step for the internet, being a solution to many problems we currently face.&lt;/p&gt;

&lt;p&gt;But in this blog post, I won't go deeper into my opinions about all this and teach you something. I will explain smart contracts written in Solidity with JavaScript equivalents to clear things up a bit and explain some main differences between these languages. I won't go deep here; I want to explain the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-vs-dynamic-typing"&gt;
  &lt;/a&gt;
  Static vs. Dynamic Typing
&lt;/h2&gt;

&lt;p&gt;The main difference between JavaScript and Solidity is typing. Solidity is statically typed at build time, and JavaScript is dynamically typed. &lt;/p&gt;

&lt;p&gt;The reasoning being that the Ethereum Virtual Machine (EVM) is very nitpicky about the costs of calculations and storage. Everything has to be accounted for so you can be charged accordingly.&lt;/p&gt;

&lt;p&gt;JavaScript's goal was a bit more ease of use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, Solidity is a bit like Java or C in that regard.&lt;/p&gt;

&lt;p&gt;You also have to type your function arguments and return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have more complex types like arrays or structs, the typing system requires you to define the memory location the data will be live. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;calldata&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I defined the first argument &lt;code&gt;a' as an array of&lt;/code&gt;int256&lt;code&gt;and said it should be stored in the&lt;/code&gt;calldata&lt;code&gt;location.&lt;/code&gt;calldata&lt;code&gt;isn't persistent and can't be modified, and I only read&lt;/code&gt;a' and never write it in the function.&lt;/p&gt;

&lt;p&gt;The other variables are either explicitly stored in the &lt;code&gt;memory&lt;/code&gt; location or have basic types that don't require defining the location.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integers-vs-numbers"&gt;
  &lt;/a&gt;
  Integers vs. Numbers
&lt;/h2&gt;

&lt;p&gt;Another fundamental difference between the two languages is their default number type. JavaScript uses &lt;code&gt;number&lt;/code&gt;, which is always a floating-point number. Solidity uses various sizes of &lt;code&gt;int&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The idea behind this is that Solidity, deep down at its core, is about payments, and if you have a currency that is worth thousands of dollars per one whole unit, it could get costly to have rounding errors, which are the norm with JavaScript's &lt;code&gt;number&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;It's a bit like working with the dollar and using 1234 cents as storage type instead of 12,34 dollars.&lt;/p&gt;

&lt;p&gt;Also, Solidity programmers like the &lt;code&gt;int256&lt;/code&gt; type as their default type, which can't be mapped 1:1 to JavaScript's &lt;code&gt;number&lt;/code&gt;. Luckily JavaScipt got a new number type some time ago called &lt;code&gt;BigInt&lt;/code&gt;, which can store all Solidity numbers with no problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// will become 10,000,000,000,000,000&lt;/span&gt;
&lt;span class="c1"&gt;// because the number type can't store that big numbers reliably&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// will become 9,999,999,999,999,999&lt;/span&gt;
&lt;span class="c1"&gt;// because the n at the end tells JS that this is a BigInt and not a number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contract-vs-class"&gt;
  &lt;/a&gt;
  Contract vs Class
&lt;/h2&gt;

&lt;p&gt;Solidity's contracts are similar to JavaScript classes, but they are different. These contracts are why Solidity applications are called smart contracts.&lt;/p&gt;

&lt;p&gt;Solidity is a bit like Java in the regard that a contract is the entry point of a Solidity application. Contracts look like classes in JavaScript, but the difference lies in the instance creation. &lt;/p&gt;

&lt;p&gt;When you create an object from a class in JavaScript, that is a relatively straightforward task. You use the &lt;code&gt;new&lt;/code&gt; keyword with the class name and be done with it.&lt;/p&gt;

&lt;p&gt;This can be done with contracts too. Using the &lt;code&gt;new&lt;/code&gt; keyword on a contract name also leads to a new instance deployed to the blockchain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;this&lt;/code&gt; is implied in contract methods. So, the attributes of the contract are always in scope in all methods.&lt;/p&gt;

&lt;p&gt;The contracts instance, the object, so to say, and its data live on the blockchain and not just inside your Solidity applications memory. &lt;/p&gt;

&lt;p&gt;When you deploy a contract to the Ethereum blockchain, you're essentially instancing the contract, and then you can call it from other contracts or a blockchain Client like Ethers.js.&lt;/p&gt;

&lt;p&gt;The contract gets an address which you can use later to interact with it. If you deploy the contract multiple times, you have multiple addresses to interact with the different instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// creates a new instance
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// uses an existing instace
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In JavaScript, the objects you create are done if you close the application; in Solidity, the contract instances are persistent on the blockchain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;You need the contract's code to use an already deployed contract, which isn't always available. That's why Solidity also has interfaces, which you can define and use as the type when loading an existing contract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// uses an existing instace
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many standardized interfaces for contracts. For example, fungible and non-fungible tokens are standardized, which means we can look in the standard, copy the function signatures we need, and create an interface to call them inside our contracts. Projects like &lt;a href="https://docs.openzeppelin.com/contracts/4.x/"&gt;OpenZeppelin&lt;/a&gt; also supply us with libraries that already include these well-known interfaces; we don't have to create them ourselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-for-package-management"&gt;
  &lt;/a&gt;
  NPM for Package Management
&lt;/h2&gt;

&lt;p&gt;Solidity uses the NPM package manager we already know from JavaScript; this way, we can reuse many of the skills we already have.&lt;/p&gt;

&lt;p&gt;With the following command, we get a library with all the interfaces that are out in the wild:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i @openzeppelin/contracts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#global-variables-and-raw-payable-endraw-"&gt;
  &lt;/a&gt;
  Global Variables and &lt;code&gt;payable&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Some hidden global variables are available in every function. Just like the &lt;code&gt;window&lt;/code&gt; object in JavaScript, there is a &lt;code&gt;msg&lt;/code&gt; object in Solidity that contains the data of the caller of the function.&lt;/p&gt;

&lt;p&gt;Here is an example in JavaScript that loads data from the global &lt;code&gt;window&lt;/code&gt; object into a private attribute of a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same in Solidity, but this time, the contract owner will be set from the global &lt;code&gt;msg&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;paybale&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;msg&lt;/code&gt; variable contains information about the sender of a message. In this case, the address that was used to deploy the contract.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; is called automatically when a new instance of a contract is created, just with new objects from classes in JavaScript. Someone had to create the instance, so their blockchain address ended up in the &lt;code&gt;msg.sender&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;In the example, all these functions and variables are defined as &lt;code&gt;payable&lt;/code&gt;, which means a caller can send Ether to them.&lt;/p&gt;

&lt;p&gt;This is pretty awesome because it allows us to use payments for our Solidity application standardized for the whole Ethereum eco-system right in at language level. There isn't an equivalent in JavaScript; we would have to program it on our own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Solidity is a straightforward language, and its baked-in payment mechanisms are probably the killer feature that will propel it in the long run.&lt;/p&gt;

&lt;p&gt;JavaScript developers should be very familiar with most of the syntax, and the few differences that exist can be learned relatively quickly. The fact that the eco-system also uses NPM makes things even more excellent for JavaScript devs.&lt;/p&gt;

&lt;p&gt;This guide isn't exhaustive and talks about a few basics that I saw. I'm by no means a Solidity pro since I only played around with it for three weeks or so.&lt;/p&gt;

&lt;p&gt;If you are interested in more content in that direction, let me know!&lt;/p&gt;

&lt;p&gt;Also, let me know if I got something wrong :D&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Color Flipper App ==&gt;&gt; Basic DOM Project</title>
      <author>Gaurav Singh Mehra</author>
      <pubDate>Wed, 29 Sep 2021 13:46:24 +0000</pubDate>
      <link>https://dev.to/thegolumehra/color-flipper-app-basic-dom-project-52je</link>
      <guid>https://dev.to/thegolumehra/color-flipper-app-basic-dom-project-52je</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfH9B0jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkave5iltwutijaqvdtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfH9B0jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkave5iltwutijaqvdtu.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction*&lt;/li&gt;
&lt;li&gt;What is this Project?*&lt;/li&gt;
&lt;li&gt;Concepts used*&lt;/li&gt;
&lt;li&gt;Notes and Syntax*&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It is said that for getting into Web Development , one must have a good hand in JavaScript. Learning JS can be very challenging if your approach is not project based. The most likely route of Full Stack Web Development goes through DOM Scripting.&lt;/p&gt;

&lt;p&gt;And for the sake of learning DOM, i am making these posts on Projects i made while learning DOM and VanillaJS.&lt;br&gt;
Concepts used in projects are kind of explained here.&lt;/p&gt;

&lt;p&gt;Here is the link of very basic level DOM Project &lt;br&gt;
--&amp;gt; &lt;a href="https://basic-vanillajs-project-color-flipper.netlify.app/"&gt;colorflipper.live&lt;/a&gt;&lt;br&gt;
and here is its code in Github &lt;br&gt;
--&amp;gt; &lt;a href="https://github.com/thegolumehra/color-flipper"&gt;colorflipper.source&lt;/a&gt;&lt;br&gt;
and here is the link of tutorial video i am learning from&lt;br&gt;
--&amp;gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=421s"&gt;freecodecamp.projects&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-is-this-project"&gt;
  &lt;/a&gt;
  What is this Project?
&lt;/h2&gt;

&lt;p&gt;This is basic level DOM Project to make you familiar with writing code using JS. In this project we learn how can we get random background color with just a click by user. Plus the color will that is new background color displays on screen each time we click.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#concepts-used-"&gt;
  &lt;/a&gt;
  Concepts used :
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;arrays&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;array.length&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.getElementById()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.querySelector()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;addEventListener()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.body.style.backgroundColor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.floor()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.random&lt;/em&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#notes-and-syntax"&gt;
  &lt;/a&gt;
  Notes and Syntax
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;An array is a data structure, which can store a fixed-size collection of elements of the same data type.&lt;br&gt;
Example of an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let fruits = ['PineApple', 'Guava','Banana','Mango']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also,Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations.ü•µ&lt;br&gt;
For example, if we use some methods on 'fruits' array we made earlier, we wil get this on console.üòÉ :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accesing the array item using its index number
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(fruits[0])
// PineApple

console.log(fruits[fruits.length - 1])
// Mango

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For knowing more array methods in JS , read from here &lt;br&gt;
--&amp;gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;array-js-mdn&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arraylength"&gt;
  &lt;/a&gt;
  array.length
&lt;/h3&gt;

&lt;p&gt;Obviously array.length is method to get length of an array.&lt;br&gt;
Using 'fruits' array from last topic we can find out how to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(fruits.length)

// 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#documentgetelementbyid"&gt;
  &lt;/a&gt;
  document.getElementById()
&lt;/h3&gt;

&lt;p&gt;The Document method returns an Element object representing the element whose id property matches the specified string.&lt;br&gt;
Syntax :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var element = document.getElementById('id');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we know, id‚Äôs should be unique, so it‚Äôs a very helpful method to get only the element you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentqueryselector"&gt;
  &lt;/a&gt;
  document.querySelector()
&lt;/h3&gt;

&lt;p&gt;The Document method returns the first Element within the document that matches the specified CSS selector.&lt;br&gt;
Syntax :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var element = document.querySelector('selectors');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eventtargetaddeventlistener"&gt;
  &lt;/a&gt;
  EventTarget.addEventListener()
&lt;/h3&gt;

&lt;p&gt;The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.This looks tough right thats why you should read about it more to understand more.Also it seems like i am talking to me by saying you.&lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;target.addEventListener(type, listener);
target.addEventListener(type, listener, options);
target.addEventListener(type, listener, useCapture);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you want to know more in detail--&amp;gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"&gt;addEventListener-mdn&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentbodystylebackgroundcolor"&gt;
  &lt;/a&gt;
  document.body.style.backgroundColor
&lt;/h3&gt;

&lt;p&gt;Very easy to guess no, it changes background Color of the body. That's why i don't think its syntax is needed hereüòÉ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mathfloor"&gt;
  &lt;/a&gt;
  Math.floor
&lt;/h3&gt;

&lt;p&gt;This function returns the largest integer less than or equal to a given number.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(Math.floor(5.95));
// 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mathrandom"&gt;
  &lt;/a&gt;
  Math.random
&lt;/h3&gt;

&lt;p&gt;This function returns a floating-point, pseudo-random number in the range 0 to less than 1. Basicallly this provides a random number between 0 to 1. And do you how many numbers are posssible between zero to one. Comment Below.&lt;/p&gt;

&lt;p&gt;Know more about this function from here--&amp;gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;math.random-mdn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it for today.&lt;br&gt;
Thank you for reading till here.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Cloud Computing Virtual Events to Attend in October 2021</title>
      <author>Didicodes</author>
      <pubDate>Wed, 29 Sep 2021 13:41:56 +0000</pubDate>
      <link>https://dev.to/didicodes/top-10-cloud-computing-virtual-events-to-attend-in-october-2021-3f3h</link>
      <guid>https://dev.to/didicodes/top-10-cloud-computing-virtual-events-to-attend-in-october-2021-3f3h</guid>
      <description>&lt;p&gt;One of the fastest and most enjoyable ways to keep learning as a developer is to attend an event or conference. It can broaden your horizon, expand your network, strengthen your existing skillset, and more!&lt;/p&gt;

&lt;p&gt;But with so many virtual events, how do you find the right one to attend?&lt;/p&gt;

&lt;p&gt;In this article, I highlight the top 10 Cloud Computing virtual events that are worth attending in October. I bet you will find one or more events that will be beneficial for you. üòÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-kubecon-cloudnativecon-na"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;KubeCon + CloudNativeCon NA&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRdDZXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crk0a0wdsq42ecsf6bnx.png" alt="KubeCon + CloudNativeCon NA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in the Cloud Native space, then you most likely know about the most talked-about KubeCon event happening in a few weeks. KubeCon is a Cloud Native Computing Foundation‚Äôs flagship conference that gathers adopters and technologists from leading open source and cloud native communities worldwide. &lt;/p&gt;

&lt;p&gt;This year‚Äôs version will be an &lt;a href="https://en.wikipedia.org/wiki/Hybrid_event"&gt;hybrid event&lt;/a&gt;, so you‚Äôd get a chance to attend even if you are not in Los Angeles. This conference will include keynotes, breakout sessions and provide an opportunity for you to further the education and advancement of cloud native computing. &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/"&gt;Learn more and register&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dev-house"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.getambassador.io/dev-house/"&gt;Dev House&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.getambassador.io/dev-house/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgiOkye3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg4dboge0os8sg1h372z.png" alt="Dev House"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dev House is a virtual Kubernetes event for application developers looking to improve how they code, ship, and run their applications. Whether you‚Äôre new to Kubernetes or a seasoned veteran, Dev House will supercharge your cloud-native developer experience through a series of tech talks, expert panels, and a &lt;a href="https://www.getambassador.io/dev-house/workshop/registration/"&gt;four-hour Kubernetes hands-on training course&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Best part? It is 100% free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-container-orchestration"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.devopsinstitute.com/co-2021/"&gt;Container Orchestration&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.devopsinstitute.com/co-2021/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMoyyyTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6miwkl6vqcfuj2lbz8w.png" alt="Container Orchestration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Container Orchestration is the automation of much of the operational effort required to run containerized workloads and services. This event will help you get up to speed with all things Container orchestration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-hashiconf-global"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://hashiconf.com/global/"&gt;HashiConf Global&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hashiconf.com/global/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zViHM6V1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnvuklzlmeh0h3hcoc0t.png" alt="HashiConf Global"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HashiConf is an interactive digital experience organized for the HashiCorp community. In this conference, you will hear keynotes and product updates, dive deep with hands-on labs and technical sessions and make connections around the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-microservices-world"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://microservicesworld.co/"&gt;Microservices World&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://microservicesworld.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqwRzsC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be9p7lreghb8fbxoxipf.png" alt="Microservices World"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microservices World is one of the world‚Äôs largest virtual microservices conferences. You will get to learn about the technologies and best practices in microservices architecture and DevOps engineering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-google-cloud-next-21"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://cloud.withgoogle.com/next"&gt;Google Cloud Next '21&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.withgoogle.com/next"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqVn6Fr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t0b2rr14brfvvslh16v.png" alt="Google Cloud Next"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud Next '21 will help you explore dynamic content across all learning levels and dive deep into technologies and solutions spanning the Google Cloud and Google Workspace portfolio through breakout sessions, demos, and hands-on training. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-a-beginners-guide-to-containers"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://developer.ibm.com/events/crowdcast-virtual-event-container-101-a-beginners-guide-to-containers-1629721814469/"&gt;A beginners guide to Containers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.ibm.com/events/crowdcast-virtual-event-container-101-a-beginners-guide-to-containers-1629721814469/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAE4lxRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnq1o92nts3adjlexojb.png" alt="A beginners guide to Containers&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are starting your journey into the containerized world, the first thing you‚Äôll come across is Docker. This Webinar will give you a quick start: it will provide you with the tools to play with Docker. You will also get a glimpse of orchestration solutions like Kubernetes and Openshift.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-dash"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.dashcon.io/"&gt;Dash&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.dashcon.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_8EKMuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz4av6x2espskzjlz0hs.png" alt="Dash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dash is an annual conference about building and scaling the next generation of applications, infrastructure, and technical teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-vmworld-2021"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.vmware.com/vmworld/en/index.html"&gt;VMworld 2021&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.vmware.com/vmworld/en/index.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMKqycuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwsf7p8ydxztbwkoyg1c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you can build and evolve what comes next, you have to imagine it‚Äìeven as the world seems to shift on its axis. VMworld can help make this world a reality. &lt;/p&gt;

&lt;p&gt;VMworld is a can't-miss learning experience for developers interested in multi-cloud, Security, Edge, and Networking.&lt;br&gt;
‚Äã&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-open-networking-amp-edge-summit-kubernetes-on-edge-day"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.lfnetworking.org/event/open-networking-edge-forum-north-america/"&gt;Open Networking &amp;amp; Edge Summit + Kubernetes on Edge Day&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.lfnetworking.org/event/open-networking-edge-forum-north-america/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGK6ByBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fist3dehnwprs8n9x1qd.png" alt="Kubernetes on Edge Day"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Networking &amp;amp; Edge Summit + Kubernetes on Edge Day is the industry‚Äôs premier open networking event now expanded to cover Edge Computing, Edge Cloud &amp;amp; IoT comprehensively. This event enables the collaborative development necessary to shape the future of networking and edge computing.&lt;/p&gt;




&lt;p&gt;Thanks for reading up to this point. I hope you discovered a fantastic event to attend in October. üòÄ&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
  </channel>
</rss>
