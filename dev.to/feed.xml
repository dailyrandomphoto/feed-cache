<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do i add Cardview to RecyclerView android kotlin example</title>
      <author>rrtutors</author>
      <pubDate>Mon, 22 Nov 2021 18:31:28 +0000</pubDate>
      <link>https://dev.to/rrtutors/how-do-i-add-cardview-to-recyclerview-android-kotlin-example-5elm</link>
      <guid>https://dev.to/rrtutors/how-do-i-add-cardview-to-recyclerview-android-kotlin-example-5elm</guid>
      <description>&lt;p&gt;We know how to user Recyclerview in android and we have created Recyclerview Item Click events in the previous post.&lt;br&gt;
In this post we will learn add CardView to Recyclerview&lt;/p&gt;

&lt;p&gt;What is CardView?&lt;br&gt;
CardView is a Material Widget which acts ad Framelayout with adding extra features like background color, round the corners, elevation and shadow to the background&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-8i4BBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Recyclerview-cardview.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-8i4BBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Recyclerview-cardview.jpg" alt="How do i add Cardview to RecyclerView android kotlin example" width="500" height="1083"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 1: Create Android application in Android studio&lt;br&gt;
Step 2: Add Recyclerview inside xml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraintlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ConstraintLayout&lt;/span&gt; &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
        &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="nl"&gt;tools:&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;".recyclerview.RecycleRippleEffect"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recyclerview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RecyclerView&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/recyclerView"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraintlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ConstraintLayout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Create a model data class which represents the students list where we will read data from local json file from assets folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.rrtutors.kotlinprograms.recyclerview&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="nl"&gt;name:&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="nl"&gt;rollNo:&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: Let's create Recyclerview child layout by adding CardView as parent widget&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cardview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CardView&lt;/span&gt; &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="nl"&gt;xmlns:&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5dp"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5dp"&lt;/span&gt;
        &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;contentPadding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5dp"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"?android:attr/selectableItemBackground"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraintlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ConstraintLayout&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ImageView&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/img"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"60dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@mipmap/ic_launcher"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"60dp"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintBottom_toBottomOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextView&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/st_name"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;textSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"22sp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_marginLeft&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;textStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bold"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintTop_toTopOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintStart_toEndOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/img"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextView&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/st_number"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;textSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18sp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"No"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;textStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"italic"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintStart_toStartOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/st_name"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintEnd_toEndOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="nl"&gt;app:&lt;/span&gt;&lt;span class="n"&gt;layout_constraintTop_toBottomOf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@id/st_name"&lt;/span&gt;
            &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_marginTop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraintlayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ConstraintLayout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cardview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CardView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added &lt;a href="https://rrtutors.com/tutorials/Android-Recyclerview-Item-Click-Event-with-Ripple-Effect-Add-Custom-Ripple-Color-"&gt;Custom Ripple Effect&lt;/a&gt; to CardView as background.&lt;/p&gt;

&lt;p&gt;Download complete example code for &lt;a href="https://rrtutors.com/tutorials/How-do-i-add-Cardview-to-RecyclerView-android-kotlin-example"&gt;How do i add Cardview to RecyclerView android kotlin example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>programming</category>
      <category>begi</category>
    </item>
    <item>
      <title>website to dextop App In six steps with electron</title>
      <author>kartiks26</author>
      <pubDate>Mon, 22 Nov 2021 18:27:17 +0000</pubDate>
      <link>https://dev.to/kartiks26/website-to-dextop-app-in-six-steps-with-electron-3nnn</link>
      <guid>https://dev.to/kartiks26/website-to-dextop-app-in-six-steps-with-electron-3nnn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#convert-url-to-desktop-app-with-electron"&gt;
  &lt;/a&gt;
  Convert Url To Desktop App With Electron
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#perquisites"&gt;
  &lt;/a&gt;
  Perquisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;node JS - &lt;a href="https://nodejs.org/en/download/"&gt;install&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step-1
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-folder-and-in-terminal-run-this-commands"&gt;
  &lt;/a&gt;
  Create Folder And in Terminal Run This Commands
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;just hit enter unless you end up .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-paste-this-to-packagejson-and-change-your-name-description-author-if-you-want"&gt;
  &lt;/a&gt;
  copy paste this to package.json and change your "name" , "description" , "author" if you want
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tutorial"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron ."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#note-your-packagejson-must-have"&gt;
  &lt;/a&gt;
  Note : Your package.json must have
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {

        "start": "electron ."
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#now-file-structure-should-be"&gt;
  &lt;/a&gt;
  now file structure should be
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
tutorial
|package.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step-2
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-this-command"&gt;
  &lt;/a&gt;
  Run This Command
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev electron
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#it-will-create-packagejson-file-and-it-will-add-this-electron-dependency-to-packagejson-file"&gt;
  &lt;/a&gt;
  it will create package.json file and it will add this electron dependency to package.json file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tutorial"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron ."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"electron"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.0.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-file-structure-should-be"&gt;
  &lt;/a&gt;
  now file structure should be
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
tutorial
        |node modules
            |(All Node Modules)
        |package.json
        |package-lock.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#ignore-if-there-is-no-packagelockjson"&gt;
  &lt;/a&gt;
  ignore if there is no package-lock.json
&lt;/h5&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step3"&gt;
  &lt;/a&gt;
  Step-3
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now create a file named main.js and paste this code in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nativeTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Tutorial&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// You Can Set Custom Height and Width&lt;/span&gt;
        &lt;span class="c1"&gt;// width:800,&lt;/span&gt;
        &lt;span class="c1"&gt;// height:600,&lt;/span&gt;
        &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Tutorial&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;titleBarOverlay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// Only If you Want to add Icons&lt;/span&gt;
        &lt;span class="c1"&gt;// _______________________________&lt;/span&gt;
        &lt;span class="c1"&gt;// icon: path.join(__dirname, Icon Path / Icon),&lt;/span&gt;
        &lt;span class="c1"&gt;//_______________________________&lt;/span&gt;
        &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// Here You Have To Put Your Website Link inside the quotes&lt;/span&gt;
    &lt;span class="c1"&gt;// _______________________________________________&lt;/span&gt;
    &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://musicapp-kohl.vercel.app/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// _______________________________________________&lt;/span&gt;
    &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// To keep it in small window comment next line&lt;/span&gt;
    &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maximize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whenReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#to-add-your-own-link-to-the-app-just-replace-the-link-in"&gt;
  &lt;/a&gt;
  To Add Your Own Link To The App Just Replace The Link In
&lt;/h2&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From -&lt;/span&gt;
&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://musicapp-kohl.vercel.app/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// To -&lt;/span&gt;
&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Link Here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-file-structure-should-be"&gt;
  &lt;/a&gt;
  now file structure should be
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
tutorial
        |node modules
            |(All Node Modules)
        |package.json
        |package-lock.json
        |main.js

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step4"&gt;
  &lt;/a&gt;
  Step-4
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now run this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;on ideal condition it will open new window in full screen mode with close button and all other buttons&lt;/p&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#like-this"&gt;
  &lt;/a&gt;
  Like This
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6nZCrtRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv9l3jlof4aychtykcag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nZCrtRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv9l3jlof4aychtykcag.jpg" alt="Image description" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step5"&gt;
  &lt;/a&gt;
  Step-5
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now We Need to bundle this package into some exe and platform based&lt;br&gt;
Thats why we need to install electron-packager&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install electron-packager
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will install electron globally into your system&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step6"&gt;
  &lt;/a&gt;
  Step-6
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we will be shifting to cmd and not in powershell strictly&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For All Platforms Generation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;electron-packager . &amp;lt;APP Name You Want To Give&amp;gt; --all --asar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Linux Generation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;electron-packager . &amp;lt;APP Name You Want To Give&amp;gt; --platform=linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Windows Generation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;electron-packager . &amp;lt;APP Name You Want To Give&amp;gt; --platform=win32 --asar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Mac-Os Generation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;electron-packager . &amp;lt;APP Name You Want To Give&amp;gt; --platform=darwin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#this-might-give-error-due-to-some-package-if-i-find-any-solution-i-will-update-this"&gt;
  &lt;/a&gt;
  This might give Error due to some package If i find any solution i will update this
&lt;/h5&gt;







&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#now-you-will-have-packages-like-this"&gt;
  &lt;/a&gt;
  Now You Will Have Packages Like this
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#and-you-can-find-applications-in-this-respective-folders"&gt;
  &lt;/a&gt;
  and you can find applications in this respective folders
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6gr9mH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67q7l806zeu2j8u51vxc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6gr9mH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67q7l806zeu2j8u51vxc.jpg" alt="Image description" width="268" height="442"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#by-this-you-have-completed-the-tutorial-and-you-have-all-the-folders-with-all-platforms"&gt;
  &lt;/a&gt;
  By This You Have Completed The Tutorial And You have all the folders with all platforms
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org/docs/latest/tutorial/quick-start"&gt;getting started official Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/aNJDdCjdDpU"&gt;Video Reference for generation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/31529772/how-to-set-app-icon-for-electron-atom-shell-app"&gt;Icon Change&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contact Me At &lt;a href="mailto:kartikshikhare26@gmail.com"&gt;kartikshikhare26@gmail.com&lt;/a&gt; For Any Query&lt;br&gt;
Follow For More .&lt;/p&gt;

</description>
      <category>electron</category>
      <category>javascript</category>
      <category>node</category>
      <category>dextopapp</category>
    </item>
    <item>
      <title>VSCode Productivity Hack #1</title>
      <author>Siddeshwar Navaaneetharan</author>
      <pubDate>Mon, 22 Nov 2021 18:21:01 +0000</pubDate>
      <link>https://dev.to/infinityintellect/vscode-productivity-hack-1-1lph</link>
      <guid>https://dev.to/infinityintellect/vscode-productivity-hack-1-1lph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#coveted-comparisons"&gt;
  &lt;/a&gt;
  Coveted Comparisons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GAlidmFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ox9p3ysqjrzce71e9p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GAlidmFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ox9p3ysqjrzce71e9p.jpg" alt="Intro Image" width="640" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me paint you a picture; you're working on a project that has several identical configuration files. The difference between these files is that each is used in different environments i.e. one file for the development environment, one file for the staging environment and another for the production environment.&lt;/p&gt;

&lt;p&gt;Now wouldn't it be easier if you could open the side by side and make a comparison to see what's missing present in one and missing in the other ? Well, look no further, for &lt;code&gt;VSCode&lt;/code&gt; has the all-powerful &lt;code&gt;Select to compare&lt;/code&gt; and &lt;code&gt;Compare Selected&lt;/code&gt; feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Right click the first file you want to compare against and click &lt;code&gt;Select For Compare&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw2-mYk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6bp0uwpylm5l8mgbqk.png" alt="Select for compare image" width="543" height="817"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right the second file, which you want to compare with the first and click &lt;code&gt;Compare with Selected&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgWQ9-g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feqd8aw3f393t65maqpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WgWQ9-g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feqd8aw3f393t65maqpq.png" alt="Compare with selected image" width="553" height="790"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Voila ! There you have it, two files one beside the other with the diffs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiCbPCXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnjalw06j8kjpvar8xrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiCbPCXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnjalw06j8kjpvar8xrw.png" alt="Result image" width="880" height="477"&gt;&lt;/a&gt;&lt;br&gt;
That's all for today folks !&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tutorial: How To Integrate A Bubble App With A Backendless Backend</title>
      <author>Backendless</author>
      <pubDate>Mon, 22 Nov 2021 18:16:57 +0000</pubDate>
      <link>https://dev.to/backendless/tutorial-how-to-integrate-a-bubble-app-with-a-backendless-backend-4bd6</link>
      <guid>https://dev.to/backendless/tutorial-how-to-integrate-a-bubble-app-with-a-backendless-backend-4bd6</guid>
      <description>&lt;p&gt;&lt;a href="https://bubble.io/?utm_source=backendless"&gt;Bubble.io&lt;/a&gt; is one of the most popular no-code app builders on the market. When you integrate a feature-rich no-code Backendless backend with your Bubble app, you get a &lt;a href="https://backendless.com/features/backendless-core/backendless-database"&gt;visual relational database&lt;/a&gt;, &lt;a href="https://backendless.com/features/backendless-core/user-management"&gt;user management&lt;/a&gt;, &lt;a href="https://backendless.com/features/backendless-core/security"&gt;bulletproof security&lt;/a&gt;, highly-scalable serverless hosting, and much more.&lt;/p&gt;

&lt;p&gt;A successful app requires much more than just an impressive user interface. Most apps will be supported by their backend, including servers, data storage, user management, and in many cases, logic.&lt;/p&gt;

&lt;p&gt;The more capable an app’s backend, the more effective the app and the better the user experience.&lt;/p&gt;

&lt;p&gt;Bubble has taken the no-code development world by storm, but for all the strengths the platform offers on the frontend, it’s backend capabilities are lacking.&lt;/p&gt;

&lt;p&gt;Bubble apps come with a built-in database that is adequate for an early stage business, but will struggle mightily if you intend to scale. To make up for this shortcoming, Bubble offers an API Connector plugin to facilitate working with a third-party backend and database.&lt;/p&gt;

&lt;p&gt;When it comes to server-side logic, a Bubble backend will likely leave you wanting as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s where &lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; comes in.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With a powerful visual database, &lt;a href="https://backendless.com/docs/rest/index.html"&gt;huge assortment of pre-built APIs&lt;/a&gt; and the capability to &lt;a href="https://backendless.com/features/api-services/codeless"&gt;build your own codeless APIs&lt;/a&gt;, Backendless easily fills in all the backend gaps in your Bubble app.&lt;/p&gt;

&lt;p&gt;Backendless scales infinitely out of the box, meaning you never need to worry about your server infrastructure holding up under heavy traffic. Additionally, you can &lt;a href="https://backendless.com/pricing/backendless-cloud/"&gt;host your app on Backendless’ cloud servers&lt;/a&gt; in the United States or European Union (&lt;a href="https://backendless.com/european-union-hosting-cluster/"&gt;perfect for GDPR compliance&lt;/a&gt;) or &lt;a href="https://backendless.com/pricing/backendless-pro/"&gt;on your own on-premise servers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/what-is-serverless-computing/"&gt;Learn more about how serverless hosting works here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bubblebackendless-stack"&gt;
  &lt;/a&gt;
  The Bubble-Backendless Stack
&lt;/h2&gt;

&lt;p&gt;In this article, we’re going to walk you through the process of integrating several basic backend functions into your Bubble app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Registration&lt;/li&gt;
&lt;li&gt;User Login&lt;/li&gt;
&lt;li&gt;Save Data&lt;/li&gt;
&lt;li&gt;Query Your Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above items merely scratch the surface of the benefits of connecting your Bubble app to Backendless. You will also gain access to no-code features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://backendless.com/docs/rest/index.html"&gt;A large pre-built API collection,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://backendless.com/what-is-serverless-computing/"&gt;Serverless hosting,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://backendless.com/features/backendless-core/codeless"&gt;Codeless logic builder,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://backendless.com/features/backendless-core/cloud-code/"&gt;Cloud Code, timers, and event handlers,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://backendless.com/features/#user-engagement"&gt;Email and push notification support,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://backendless.com/features/build-faster/team-driven-development"&gt;Team-driven development,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started, you will need a &lt;a href="https://bubble.io/"&gt;Bubble account&lt;/a&gt; as well as a &lt;a href="https://develop.backendless.com/login"&gt;Backendless account&lt;/a&gt; (&lt;a href="https://develop.backendless.com/registration"&gt;register here for free&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-registration-in-a-bubble-app-with-backendless"&gt;
  &lt;/a&gt;
  User Registration In A Bubble App With Backendless
&lt;/h2&gt;

&lt;p&gt;User registration and login are critical components of any app seeking to personalize its user’s experience.&lt;/p&gt;

&lt;p&gt;User login opens up the entire set of &lt;a href="https://backendless.com/features/backendless-core/user-management"&gt;user management&lt;/a&gt; functions in Backendless. These include session management, password management, user roles, and relating user to other data objects.&lt;/p&gt;

&lt;p&gt;User registration also opens up user engagement opportunities such as &lt;a href="https://backendless.com/features/user-engagement/email-marketing"&gt;email messaging&lt;/a&gt;, &lt;a href="https://backendless.com/features/user-engagement/email-marketing"&gt;push notifications&lt;/a&gt;, and &lt;a href="https://backendless.com/features/backendless-core/pub-sub-messaging"&gt;in-app messaging&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dive in. To get started, we are going to connect user registration in our Bubble app with our Backendless Database. Users registered by API will appear in the &lt;code&gt;Users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;First, let’s create a registration page. We will need two Input components with identifiers &lt;code&gt;Input Email&lt;/code&gt; (content format: Email) and &lt;code&gt;Input Password&lt;/code&gt; (content format: Password), a button with ID &lt;code&gt;Button Register User&lt;/code&gt; and an Alert with ID &lt;code&gt;Registration Result Alert&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdItOcO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-01-600x360.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdItOcO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-01-600x360.png" alt="" width="600" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For integration between the platforms, we will use REST requests, which we will create using the API Connector plugin.&lt;/p&gt;

&lt;p&gt;You can install this plugin immediately after creating a new application, or later through the Assistant. To add a connector, go to the &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add plugins&lt;/strong&gt; tab and add the &lt;strong&gt;API Connector&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ezZsjZct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-02-1200x421.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ezZsjZct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-02-1200x421.png" alt="Bubble app plugins" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0isIbvmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-03-1200x1118.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0isIbvmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-03-1200x1118.png" alt="" width="880" height="820"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s create an API called Backendless and add the &lt;code&gt;RegisterUser&lt;/code&gt; method with the url required for registration (&lt;code&gt;https://api.backendless.com/APP_ID/REST_API_KEY/users/register&lt;/code&gt;). &lt;strong&gt;NOTE:&lt;/strong&gt; Be sure to add your own APP_ID and REST_API_KEY. Both can be found on your Backendless dashboard.&lt;/p&gt;

&lt;p&gt;We also need the email and password parameters (&lt;a href="https://backendless.com/docs/rest/users_user_registration.html"&gt;read the user registration API docs here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We specified the parameters &lt;code&gt;email&lt;/code&gt;: &lt;code&gt;test@test.com&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;: &lt;code&gt;111&lt;/code&gt; as test data. Press &lt;strong&gt;Initialize&lt;/strong&gt; / &lt;strong&gt;Reinitialize&lt;/strong&gt; call to verify the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAJV7zJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-04-1200x977.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAJV7zJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-04-1200x977.png" alt="" width="880" height="716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is correct, we will get a response from Backendless with a registered user object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7uJN_t6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-05-932x1200.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7uJN_t6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-05-932x1200.png" alt="" width="880" height="1133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save the &lt;code&gt;RegisterUser&lt;/code&gt; method, and then clear the values ​​of the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; parameters from the corresponding inputs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfIbLMAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-06-600x77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfIbLMAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-06-600x77.png" alt="" width="600" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s return to the register page in order to add some more logic. Select the button &lt;strong&gt;Register User&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Start / Edit Workflow&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JY11Y2vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-07-513x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JY11Y2vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-07-513x600.png" alt="" width="513" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our workflow consists of 4 steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7MPr_7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-08-1200x234.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7MPr_7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-08-1200x234.png" alt="" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-verify-that-the-user-entered-values-%E2%80%8B%E2%80%8Bin-the-email-and-password-fields"&gt;
  &lt;/a&gt;
  1. Verify that the user entered values ​​in the email and password fields
&lt;/h3&gt;

&lt;p&gt;Otherwise, we will display a message that these fields must be filled.&lt;/p&gt;

&lt;p&gt;To do this, choose &lt;strong&gt;Click here to add an action&lt;/strong&gt;, select &lt;strong&gt;Element Actions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Show Message&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygWh5UsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-09-600x575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygWh5UsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-09-600x575.png" alt="" width="600" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select &lt;strong&gt;Registration Result Alert&lt;/strong&gt; as the displayed element, enter an error message and put a filter that will trigger this action only when one or both of the input fields is not filled:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3xVEvRBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-10-447x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3xVEvRBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-10-447x600.png" alt="" width="447" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-call-the-backendless-user-registration-method-directly"&gt;
  &lt;/a&gt;
  2. Call the Backendless user registration method directly
&lt;/h3&gt;

&lt;p&gt;Click &lt;strong&gt;Click here to add an action&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Backendless – RegisterUser&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o605i5IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-11-600x574.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o605i5IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-11-600x574.png" alt="" width="600" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We indicate that the data for the parameters of the &lt;code&gt;RegisterUser&lt;/code&gt; method must be taken from the &lt;code&gt;Input Email&lt;/code&gt; and &lt;code&gt;Input Password&lt;/code&gt; fields. The call should only be triggered if the values ​​of these fields are not empty:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHPX3WHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-12-600x407.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHPX3WHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-12-600x407.png" alt="" width="600" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-display-a-message-about-successful-registration"&gt;
  &lt;/a&gt;
  3. Display a message about successful registration
&lt;/h3&gt;

&lt;p&gt;Once the request returns successfully in Step 2, we move to displaying a message. To do this, similar to the first step, add a &lt;strong&gt;Registration Result Alert&lt;/strong&gt; call and configure it as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPMTKLVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-13-452x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPMTKLVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-13-452x600.png" alt="" width="452" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Registration Result Alert&lt;/strong&gt; as the displayed element and enter a message about successful registration. Then, use the &lt;strong&gt;Insert Dynamic Data&lt;/strong&gt; button to send the registered user’s email received in step 2.&lt;/p&gt;

&lt;p&gt;We display this message only if we have a field in the response in step 2 &lt;code&gt;objectId&lt;/code&gt; for the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-clear-the-input-login-and-input-password-values"&gt;
  &lt;/a&gt;
  4. Clear the Input Login and Input Password values
&lt;/h3&gt;

&lt;p&gt;To do this, click &lt;strong&gt;Click here to add action&lt;/strong&gt;, select &lt;strong&gt;Element Actions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Reset inputs&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgtILI7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-14-600x571.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgtILI7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-14-600x571.png" alt="" width="600" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic is ready. In the upper right corner, click on the Preview button, enter the email and password of the new user and click &lt;strong&gt;Register User&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IxCUjuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IxCUjuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-15.png" alt="" width="822" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If registration was successful, we will receive a message about successful registration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3_ZPjcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-16-600x396.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3_ZPjcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-16-600x396.png" alt="" width="600" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an error occurs during registration (for example, user tries to register an already-registered email address), then we will receive the following notification:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjVj99NZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-17-600x298.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjVj99NZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-17-600x298.png" alt="" width="600" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href="https://backendless.com/docs/rest/backendless_error_codes.html"&gt;list of response error codes&lt;/a&gt; to set up specific error messages for your users, or simply display the error message received from the backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-with-backendless"&gt;
  &lt;/a&gt;
  Login with Backendless
&lt;/h2&gt;

&lt;p&gt;Now that we have registration set up, let’s build our Login page.&lt;/p&gt;

&lt;p&gt;On the page, we will need two Input components with identifiers &lt;code&gt;Input Login&lt;/code&gt; (content format: Text) and &lt;code&gt;Input Password&lt;/code&gt; (content format: Password), a button &lt;code&gt;Button Login&lt;/code&gt; and Alert &lt;code&gt;Login Result Alert&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw6ohqiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-18-600x409.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw6ohqiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-18-600x409.png" alt="" width="600" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the API call to Backendless, add the Login method with the url required for the login &lt;code&gt;https://api.backendless.com/APP_ID/REST_API_KEY/users/login&lt;/code&gt; (replace with your own &lt;code&gt;APP_ID&lt;/code&gt; and &lt;code&gt;REST_API_KEY&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/docs/rest/users_login.html"&gt;Per the docs&lt;/a&gt;, we will need the login and password parameters. As test data, we specified the parameters &lt;code&gt;login&lt;/code&gt;: &lt;code&gt;test@test.com&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;: &lt;code&gt;111&lt;/code&gt;. Press &lt;strong&gt;Initialize / Reinitialize&lt;/strong&gt; call to verify the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--es9Kv2H0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-19-1200x879.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--es9Kv2H0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-19-1200x879.png" alt="" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is correct, we will get a response from Backendless with a logged-in user object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EG4FcR__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-20-884x1200.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EG4FcR__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-20-884x1200.png" alt="" width="880" height="1195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save the &lt;code&gt;Login&lt;/code&gt; method, after which we clear the values ​​of the &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; parameters from the corresponding inputs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKr_c-Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-21-600x83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKr_c-Zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-21-600x83.png" alt="" width="600" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s return to the main page in order to write some additional logic. Select the &lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Start / Edit Workflow&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Again, our workflow consists of 4 steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c7_i1R9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-22-1200x204.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7_i1R9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-22-1200x204.png" alt="" width="880" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-verify-that-the-user-has-entered-values-%E2%80%8B%E2%80%8Bin-the-bubble-apps-login-and-password-fields"&gt;
  &lt;/a&gt;
  1. Verify that the user has entered values ​​in the Bubble app’s login and password fields
&lt;/h3&gt;

&lt;p&gt;Otherwise, we will display a message that these fields must be filled.&lt;/p&gt;

&lt;p&gt;To do this, click &lt;strong&gt;Click here to add an action&lt;/strong&gt;, select &lt;strong&gt;Element Actions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Show Message&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXOWt1gE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-23-600x575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXOWt1gE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-23-600x575.png" alt="" width="600" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select &lt;strong&gt;Login Result Alert&lt;/strong&gt; as the displayed element and enter an error message. Put a filter that will trigger this action only when one or both of the input fields is not filled:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9-GZCPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9-GZCPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-24.png" alt="" width="666" height="902"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-calling-the-users-login-method-directly-in-backendless"&gt;
  &lt;/a&gt;
  2. Calling the user’s login method directly in Backendless
&lt;/h3&gt;

&lt;p&gt;Click &lt;strong&gt;Click here to add an action&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Backendless – Login&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CgtwuaZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-25-600x578.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgtwuaZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-25-600x578.png" alt="" width="600" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We indicate that the data for the parameters of the &lt;code&gt;Login&lt;/code&gt; method must be taken from the &lt;code&gt;Input Login&lt;/code&gt; and &lt;code&gt;Input Password&lt;/code&gt; fields, and the call should be triggered only if the values ​​of these fields are not empty:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Em_Kwpnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-26-600x482.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Em_Kwpnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-26-600x482.png" alt="" width="600" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-display-a-message-about-a-successful-login"&gt;
  &lt;/a&gt;
  3. Display a message about a successful login
&lt;/h3&gt;

&lt;p&gt;Once we’ve gotten a successful result in step 2, we can move on to this step. To display the message, similarly to the first step, add a &lt;strong&gt;Login Result Alert&lt;/strong&gt; call and configure it as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GKAFQIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-27-451x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GKAFQIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-27-451x600.png" alt="" width="451" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Login Result Alert&lt;/strong&gt; as the displayed element and enter a message about a successful login. Then, use the &lt;strong&gt;Insert Dynamic Data&lt;/strong&gt; button to send the email of the logged in user received in step 2.&lt;/p&gt;

&lt;p&gt;We display this message only if we receive the logged-in user’s &lt;code&gt;objectId&lt;/code&gt; field in the response from step 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-clear-the-login-input-and-password-input-values"&gt;
  &lt;/a&gt;
  4. Clear the Login Input and Password Input values
&lt;/h3&gt;

&lt;p&gt;To do this, click &lt;strong&gt;Click here to add an action&lt;/strong&gt;, select &lt;strong&gt;Element Actions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Reset inputs&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn2jECa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-28-600x571.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn2jECa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-28-600x571.png" alt="" width="600" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic is now ready. In the upper right corner, click on the &lt;strong&gt;Preview&lt;/strong&gt; button, enter the user login and password, and click &lt;strong&gt;Login&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g52SciqJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-29-600x396.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g52SciqJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-29-600x396.png" alt="" width="600" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the login was successful, we will receive a message about a successful login:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6QbCSv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-30-600x393.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6QbCSv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-30-600x393.png" alt="" width="600" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an error occurred during registration (for example, the user does not exist), then we will receive the following notification:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfA_ZkOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-31-600x279.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfA_ZkOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-31-600x279.png" alt="" width="600" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-bubble-app-data-in-the-backend"&gt;
  &lt;/a&gt;
  Save Bubble App Data in the Backend
&lt;/h2&gt;

&lt;p&gt;Bubble offers a built-in database that can be adequate for simple projects or MVP-level applications. When it comes time to scale, and you have tens of thousands of records to store and retrieve, a Bubble database can become a liability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/features/backendless-core/backendless-database"&gt;Backendless Database&lt;/a&gt; is what sets Backendless apart from every other no-code platform out there. Your database can store a wide range of data types (including &lt;a href="https://backendless.com/new-release-featuring-spatial-data-and-console-visibility-controls/"&gt;spatial/geo data&lt;/a&gt; and &lt;a href="https://backendless.com/how-to-add-json-objects-in-backendless-database/"&gt;JSON objects&lt;/a&gt;) and makes it trivially easy to create relations between objects. Plus, a Backendless database can scale infinitely out of the box.&lt;/p&gt;

&lt;p&gt;Backendless Database uses a SQL-based querying system. (We will touch on that more in the next section.) This approach allows you to easily query your data and display exactly what you want the user to see.&lt;/p&gt;

&lt;p&gt;To start working with our data, let’s first take a look at how to save data into our Backendless Database from our Bubble app. Let’s build a simple new page to try it out.&lt;/p&gt;

&lt;p&gt;On the page, we will need two Input components with identifiers &lt;code&gt;Input Name&lt;/code&gt; (content format: Text) and &lt;code&gt;Input Age&lt;/code&gt; (content format: Text (numbers only)), a button &lt;code&gt;Button Save&lt;/code&gt; and an alert &lt;code&gt;Save Result Alert&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybHVl5sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-32-600x382.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybHVl5sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-32-600x382.png" alt="" width="600" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will save a new object to a table called &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the API call to Backendless, add the &lt;code&gt;SaveObject&lt;/code&gt; method with the url required to save the object &lt;code&gt;https://api.backendless.com/APP_ID/REST_API_KEY/data/Person&lt;/code&gt; (replace with your own &lt;code&gt;APP_ID&lt;/code&gt; and &lt;code&gt;REST_API_KEY&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/docs/rest/data_single_object_create.html"&gt;Per the docs&lt;/a&gt;, we’ll also need the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; parameters. Let’s specify the parameters &lt;code&gt;name&lt;/code&gt;: &lt;code&gt;Bob&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;: &lt;code&gt;30&lt;/code&gt; as test data. Press &lt;strong&gt;Initialize / Reinitialize&lt;/strong&gt; call to verify the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--df1gF7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-33-1200x872.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--df1gF7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-33-1200x872.png" alt="" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is correct, we will get a response from Backendless with a saved object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSTFV6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-34-1200x1171.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSTFV6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-34-1200x1171.png" alt="" width="880" height="859"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save the &lt;code&gt;SaveObject&lt;/code&gt; method, after which we clear the values ​​of the name and age parameters from the corresponding inputs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QO7zJMzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-35-600x78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QO7zJMzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-35-600x78.png" alt="" width="600" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s return to the main page to add more logic. Select the &lt;strong&gt;Save object&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Start / Edit Workflow button&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaFUOt7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-36-600x200.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaFUOt7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-36-600x200.png" alt="" width="600" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once more, our workflow consists of 4 steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMOHzSpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-37-600x578.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMOHzSpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-37-600x578.png" alt="" width="600" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-calling-the-method-for-saving-a-new-object-in-backendless"&gt;
  &lt;/a&gt;
  1. Calling the method for saving a new object in Backendless
&lt;/h3&gt;

&lt;p&gt;Click &lt;strong&gt;Click here to add an action&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Backendless – SaveObject&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DmIcKsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-38-600x380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DmIcKsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-38-600x380.png" alt="" width="600" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We indicate that the data for the parameters of the &lt;code&gt;SaveObject&lt;/code&gt; method must be taken from the &lt;code&gt;Input Name&lt;/code&gt; and &lt;code&gt;Input Age&lt;/code&gt; fields:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGwCIMg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-39-442x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGwCIMg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-39-442x600.png" alt="" width="442" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve confirmed that this executed properly, we can move on to the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-display-a-message-about-successful-saving"&gt;
  &lt;/a&gt;
  2. Display a message about successful saving
&lt;/h3&gt;

&lt;p&gt;To do this, add a &lt;strong&gt;Save Result Alert&lt;/strong&gt; call and configure it as follows:&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Save Result Alert&lt;/strong&gt; as the displayed item and enter a message about successful saving. Use the &lt;strong&gt;Insert Dynamic Data&lt;/strong&gt; button to transfer the &lt;code&gt;objectId&lt;/code&gt; of the saved object obtained in step 1 to the message.&lt;/p&gt;

&lt;p&gt;We will display this message only if we receive the &lt;code&gt;objectId&lt;/code&gt; of the stored object in the request response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-clear-the-input-name-and-input-age-values"&gt;
  &lt;/a&gt;
  3. Clear the Input Name and Input Age values
&lt;/h3&gt;

&lt;p&gt;To do this, click &lt;strong&gt;Click here to add an action&lt;/strong&gt;, select &lt;strong&gt;Element Actions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Reset inputs&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1IZBdwX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-40-600x571.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1IZBdwX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-40-600x571.png" alt="" width="600" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the logic is ready. In the upper right corner, click on the &lt;strong&gt;Preview&lt;/strong&gt; button, enter name and age and click &lt;strong&gt;Save object&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5PVJgPCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-41-600x380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PVJgPCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-41-600x380.png" alt="" width="600" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the save is successful, we will receive the message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3-VlYu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-42-600x399.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3-VlYu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-42-600x399.png" alt="" width="600" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-a-query-in-backendless"&gt;
  &lt;/a&gt;
  Run a Query in Backendless
&lt;/h2&gt;

&lt;p&gt;Finally, let’s walk through how to retrieve data from your database by running a query. We will again create a simple page for demonstration.&lt;/p&gt;

&lt;p&gt;For this example, on the main page, we only need one Input component with the &lt;code&gt;Input Where Clause&lt;/code&gt; identifier (content format: Text), a &lt;code&gt;Button Find&lt;/code&gt; button, and a component called Repeating Group with ID &lt;code&gt;Find Result Repeating Group&lt;/code&gt; to display the search results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jw7oGdK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-43-600x408.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jw7oGdK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-43-600x408.png" alt="" width="600" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be querying our previously-created &lt;code&gt;Person&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;In the API call to Backendless, add the &lt;code&gt;Find&lt;/code&gt; method with the urls required for fetching &lt;code&gt;https://api.backendless.com/APP_ID/REST_API_KEY/data/Person&lt;/code&gt; (replace with your own &lt;code&gt;APP_ID&lt;/code&gt; and &lt;code&gt;REST_API_KEY&lt;/code&gt;) and an optional &lt;code&gt;where&lt;/code&gt; parameter (&lt;a href="https://backendless.com/docs/rest/data_search_with_where_clause.html"&gt;read the docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Press &lt;strong&gt;Initialize / Reinitialize&lt;/strong&gt; call to validate the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUOVhIMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-44-1200x884.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUOVhIMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-44-1200x884.png" alt="" width="880" height="648"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is correct, we will get a response from Backendless with an array of selected objects:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AgSfxblU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-45-831x1200.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AgSfxblU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-45-831x1200.png" alt="" width="831" height="1200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save the &lt;code&gt;Find&lt;/code&gt; method and return to the main page where we’ll add further logic.&lt;/p&gt;

&lt;p&gt;Let’s select the button &lt;strong&gt;Find&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Start / Edit Workflow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this case, our workflow consists of 3 steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7fRod3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-46-1200x383.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7fRod3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-46-1200x383.png" alt="" width="880" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-calling-the-method-for-fetching-objects-from-backendless"&gt;
  &lt;/a&gt;
  1. Calling the method for fetching objects from Backendless
&lt;/h3&gt;

&lt;p&gt;Click &lt;strong&gt;Click here to add an action&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Backendless – Find&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFNZFUJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-47-600x577.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFNZFUJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-47-600x577.png" alt="" width="600" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data for the where parameter of the Find method should be taken from the &lt;code&gt;Input Where Clause&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gx3hSGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-48-600x338.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gx3hSGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-48-600x338.png" alt="" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the request completes successfully, we can move on to step 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-make-the-find-result-repeating-group-element-visible"&gt;
  &lt;/a&gt;
  2. Make the Find Result Repeating Group element visible
&lt;/h3&gt;

&lt;p&gt;Select &lt;strong&gt;Click here to add an action&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Show an element&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CL8HQGRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-49-600x264.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CL8HQGRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-49-600x264.png" alt="" width="600" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the element &lt;code&gt;Find Result Repeating Group&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgWC3QY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-50-600x316.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgWC3QY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-50-600x316.png" alt="" width="600" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-transfer-the-data-obtained-in-step-1-to-find-result-repeating-group"&gt;
  &lt;/a&gt;
  3. Transfer the data obtained in step 1 to Find Result Repeating Group
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2RNOwv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-51-600x407.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2RNOwv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-51-600x407.png" alt="" width="600" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s return to the main screen to complete the settings. Let’s configure Find Result Repeating Group as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5T89ovVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-52-426x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5T89ovVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-52-426x600.png" alt="" width="426" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the &lt;strong&gt;Type of content&lt;/strong&gt; to &lt;code&gt;Find&lt;/code&gt; – this component will display the data received as a result of a Find request. The &lt;strong&gt;Layout style&lt;/strong&gt; will be &lt;code&gt;Full list&lt;/code&gt; – the number of cells in the component will change dynamically depending on the number of objects received in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This element is visible on page load&lt;/strong&gt; should be left &lt;strong&gt;unchecked&lt;/strong&gt; – when loading the page, we will not display the Repeatable Group component; we will display it only when we load data from the server.&lt;/p&gt;

&lt;p&gt;Next, let’s add a Text component to the &lt;code&gt;Find Result Repeating Group&lt;/code&gt; cell:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drQMN_AR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-53-1200x737.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drQMN_AR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-53-1200x737.png" alt="" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we have specified the &lt;code&gt;Find Result Repeating Group&lt;/code&gt; type as the result of the &lt;code&gt;Find&lt;/code&gt; query, we can now configure it to display the name and age fields of objects retrieved from the &lt;code&gt;Person&lt;/code&gt; table. To do this, use the &lt;strong&gt;Insert dynamic data&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7WWe-B3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-54-483x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7WWe-B3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-54-483x600.png" alt="" width="483" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic is now ready. Click on the &lt;strong&gt;Preview&lt;/strong&gt; button, then optionally enter a &lt;a href="https://backendless.com/docs/rest/data_search_with_where_clause.html"&gt;where clause&lt;/a&gt; and click &lt;strong&gt;Find&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sG5ONZvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-55-600x518.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sG5ONZvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-55-600x518.png" alt="" width="600" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result of a query with the &lt;code&gt;whereClause&lt;/code&gt; of &lt;code&gt;age&amp;gt; 25&lt;/code&gt;, we receive a list of &lt;code&gt;Person&lt;/code&gt; table objects with &lt;code&gt;age&lt;/code&gt; greater than 25. If we execute a &lt;code&gt;Find&lt;/code&gt; query without specifying a &lt;code&gt;whereClause&lt;/code&gt;, we get a list of all objects:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDFuNB0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-56-473x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDFuNB0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2020/10/Bubble-Integration-With-Backendless-56-473x600.png" alt="" width="473" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;You should now have a basic handle on how to interact with a &lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; backend via a Bubble app, but this is just the tip of the iceberg. Adding a Backendless backend and database to a Bubble app gives your app incredible flexibility.&lt;/p&gt;

&lt;p&gt;With Bubble’s easy frontend interface and Backendless’ many pre-built APIs, your possibilities become endless.&lt;/p&gt;

&lt;p&gt;In addition to managing users and data, Backendless gives you access to timers, event handlers, and whatever Codeless logic you can think of on the backend.&lt;/p&gt;

&lt;p&gt;Your app is virtually limitless.&lt;/p&gt;

&lt;p&gt;Thanks for reading and Happy Codeless Coding!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Started with Algolia API</title>
      <author>Malik Gabroun</author>
      <pubDate>Mon, 22 Nov 2021 18:15:40 +0000</pubDate>
      <link>https://dev.to/malroun1/getting-started-with-algolia-api-3o31</link>
      <guid>https://dev.to/malroun1/getting-started-with-algolia-api-3o31</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this course, you will learn how the Algolia API works by understanding its main components. The end goal is for you to be able to integrate Algolia into your application to deliver tailored, fast search experiences.&lt;/p&gt;

&lt;p&gt;In the first half, you will learn how to build a full search experience using Algolia's search API and by utilising Algolia's InstantSearch library. In the second half, you will learn how to extend Algolia's widgets by building a custom search experience.&lt;/p&gt;

&lt;p&gt;By the end of this course, you will have gained hands-on experience by building a fully functional search experience using Algolia.&lt;/p&gt;

&lt;p&gt;You can check it out &lt;a href="https://www.educative.io/courses/start-algolia-api"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-contents"&gt;
  &lt;/a&gt;
  List of Contents
&lt;/h2&gt;

&lt;p&gt;Below you can find the list of lessons you will learn in this course:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overview of Algolia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get introduced to Algolia and how it works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algolia Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to create an Algolia index, get Algolia API keys, and create new ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sending Data to the Algolia Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to send data to Algolia using API or Algolia's dashboard and interact with the sample code to see how we can push data using Algolia's API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Managing Data with Algolia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to manage dataset configuration before sending it to Algolia using API or dashboard. Additionally, interact with the sample code to practice customising and sending dataset using Aloglia's API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Managing Data by Adding Custom Ranking to Our Search Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to manage results' ranking based on certain attributes using the API or dashboard. Additionally, interact with the sample code to practice customising the ranking before sending the dataset using Aloglia's API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Composition of the Search Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Break down the components of Algolia's InstantSearch in this lesson and understand what the search functionality is composed of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing a Search Box and Results Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discover what you can do with the SearchBox and Hits components and try them yourself in this lesson.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing a Highlight Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Explore how search results can be improved by adding the Highlight component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing the Stats component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Explore how we can improve search results and user experience by adding the number of hits based on user search by using the Stats component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing Filter and the Clear Filter Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Explore how we can improve search results and user experience by adding a way to filter the dataset based on facets using the RefinementList component. Also, we add a way to clear applied filters using the ClearRefinements component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing the Pagination Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to set a number of products that appear per page instead of showing all of them together and letting the user scroll endlessly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extending Algolia's Widgets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discover what you can do with Algolia's connectors by extending Algolia's InstantSearch components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find the course &lt;a href="https://www.educative.io/courses/start-algolia-api"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>algolia</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Comprehensive guide of Event Handling in Svelte</title>
      <author>Ashutosh</author>
      <pubDate>Mon, 22 Nov 2021 18:14:25 +0000</pubDate>
      <link>https://dev.to/akuks/comprehensive-guide-of-event-handling-in-svelte-1f1a</link>
      <guid>https://dev.to/akuks/comprehensive-guide-of-event-handling-in-svelte-1f1a</guid>
      <description>&lt;p&gt;Using the &lt;code&gt;on:&lt;/code&gt; directive, Svelte listens for any event on an element. Customised events convey data between child and parent components. Components in Svelte can listen for DOM and custom events. The &lt;code&gt;on:event-name&lt;/code&gt; directive specifies how an event will be handled. It's worth noting that the &lt;strong&gt;&lt;code&gt;term on comes after a comma and the name of the event&lt;/code&gt;&lt;/strong&gt;. Its value is the function that will be called after the event has been dispatched. The name of the event could be either DOM or custom. The specified function receives an event object.&lt;/p&gt;

&lt;p&gt;In this article, we learn about the event handling. Let's proceed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt; are objects that serve as communication units between an emitter and the listeners. In short, any activity that happens on the HTML web page is an event. And with the help of JavaScript (Svelte in this case), we can handle these events. For Ex- &lt;em&gt;Clicking a button&lt;/em&gt;, &lt;em&gt;Submitting a form&lt;/em&gt; is one of the few examples of Events&lt;/p&gt;

&lt;p&gt;Example of simple Event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Handle something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the App.svelte&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EventComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./EventComponent.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt; &lt;span class="nx"&gt;communication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EventComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ff3e00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you load the application, it will look like the below screenshot&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Csm2lOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ashutosh.dev/content/images/2021/11/Screenshot-2021-11-20-at-4.37.41-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Csm2lOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ashutosh.dev/content/images/2021/11/Screenshot-2021-11-20-at-4.37.41-AM.png" alt="img" width="880" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see a button, but it will not do anything. Let's add an alert only to check if our events are working correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about this '&lt;strong&gt;Inline Event Handler&lt;/strong&gt;'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an alternate way of defining the &lt;code&gt;Inline Event Handler&lt;/code&gt; using the anonymous function &lt;code&gt;on:click={ e =&amp;gt; { alert('I am clicked') } }&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-dispatcher"&gt;
  &lt;/a&gt;
  Event Dispatcher
&lt;/h3&gt;

&lt;p&gt;Event Dispatching allows developers to add logic to the Svelte application. Using an event dispatcher, we can dispatch events and communicate within the components. Components can forward events by creating and using an event dispatcher.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;EventComponent.svelte&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pass to main component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data given as the second argument to the &lt;code&gt;**dispatch** function&lt;/code&gt; is the &lt;code&gt;detail&lt;/code&gt; property of this object. Additional parameters supplied to dispatch are not taken into consideration.&lt;/p&gt;

&lt;p&gt;And in the App.svelte&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EventComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./EventComponent.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt; &lt;span class="nx"&gt;communication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EventComponent&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only the parent component receives these events. They don't float to the top of the component hierarchy by themselves. The &lt;code&gt;on:directive&lt;/code&gt; is used by parent components to listen for events from child components. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Modifiers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can modify the events in svelte using these modifiers. Following are the modifier that we can use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;once&lt;/code&gt;: remove the handler after the first time it runs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the EventComponent.svelte, modify the &lt;code&gt;button&lt;/code&gt; with the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that, when you try to click the button second time, &lt;strong&gt;&lt;em&gt;it'll not show any alert&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;preventDefault&lt;/code&gt;: calls &lt;code&gt;e.preventDefault()&lt;/code&gt; before running the handler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When used with forms, it'll prevent the default submitting of form.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stopPropagation&lt;/code&gt;: calls &lt;code&gt;e.stopPropagation()&lt;/code&gt;. Prevents the propagation of the events within the same handler.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;passive&lt;/code&gt;: improves scrolling performance.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;capture&lt;/code&gt;: fires the handler during the capture phase not on the bubbling phase.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt;: only trigger handler if event.target is the element itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#event-forwarding"&gt;
  &lt;/a&gt;
  Event Forwarding
&lt;/h3&gt;

&lt;p&gt;We already discussed, When we fire the event only the parent component receives it. It'll not go to hierarchy itself. However, sometimes, we need the events to be used by other parent components. We need to nest the events further up in hierarchy.&lt;/p&gt;

&lt;p&gt;Create a new file  &lt;code&gt;FirstEventComponent.svelte&lt;/code&gt;, modify the &lt;code&gt;button&lt;/code&gt; with the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pass to main component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventClickMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a another file  &lt;code&gt;SecondEventComponent.svelte&lt;/code&gt;, modify the &lt;code&gt;button&lt;/code&gt; with the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FirstEventComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FirstEventComponent.svlete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FirstEventComponent&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the App.svelte&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SecondEventComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SecondEventComponent.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt; &lt;span class="nx"&gt;communication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SecondEventComponent&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats all about the events. Hope you like it. See you in the next article.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>what is partial hydration and why is everyone talking about it?</title>
      <author>anthony-campolo</author>
      <pubDate>Mon, 22 Nov 2021 18:12:13 +0000</pubDate>
      <link>https://dev.to/ajcwebdev/what-is-partial-hydration-and-why-is-everyone-talking-about-it-3k56</link>
      <guid>https://dev.to/ajcwebdev/what-is-partial-hydration-and-why-is-everyone-talking-about-it-3k56</guid>
      <description>&lt;p&gt;In &lt;a href="https://addyosmani.com/blog/rehydration/"&gt;The Cost Of Client-side Rehydration (February 8, 2019)&lt;/a&gt;, Addy Osmani argued that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Server rendering a page and then rehydrating DOM client-side through a serialized version of a UI's dependencies (rehydration) can come with a real cost. It can heavily delay Time To Interactive by making UI look ready before client-side processing has completed.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He wondered if the benefits of rehydration were outweighed by the Uncanny Valley that is created for users by painting pixels early. To illustrate this point, he created the following graphic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iC7VKsur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addyosmani.com/assets/images/hydrate%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iC7VKsur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addyosmani.com/assets/images/hydrate%402x.png" alt="01-rehydration-uncanny-valley" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#to-hydrate-or-not-to-hydrate"&gt;To Hydrate or Not to Hydrate&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#partial-hydration-and-progressive-rehydration"&gt;Partial Hydration and Progressive Rehydration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#islands-of-interactivity"&gt;Islands of Interactivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#adding-partial-hydration-to-existing-frameworks"&gt;Adding Partial Hydration to Existing Frameworks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vue"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solid"&gt;Solid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#frameworks-built-for-partial-hydration"&gt;Frameworks Built for Partial Hydration&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#marko"&gt;Marko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elderjs"&gt;Elder.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#astro"&gt;Astro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#slinkity"&gt;Slinkity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%C3%AEles"&gt;îles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qwik"&gt;Qwik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-hydrate-or-not-to-hydrate"&gt;
  &lt;/a&gt;
  To Hydrate or Not to Hydrate
&lt;/h2&gt;

&lt;p&gt;Hydration (or rehydration) is a technique that uses client-side JavaScript to convert static HTML pages into dynamic web pages by attaching event handlers to the HTML elements. The JavaScript can be delivered either through static hosting or server-side rendering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partial-hydration-and-progressive-rehydration"&gt;
  &lt;/a&gt;
  Partial Hydration and Progressive Rehydration
&lt;/h3&gt;

&lt;p&gt;Partial rehydration is an extension of the idea of progressive rehydration where individual pieces of a server-rendered application are “booted up” over time. This contrasts with the approach of initializing the entire application at once. In an attempt to systematically define and compare the different commonly used rendering and hydration techniques, Addy Osmani and Jason Miller published &lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web"&gt;Rendering on the Web (February 6, 2019)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Partial rehydration has proven difficult to implement. This approach is an extension of the idea of progressive rehydration, where the individual pieces (components / views / trees) to be progressively rehydrated are analyzed and those with little interactivity or no reactivity are identified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For each of these mostly-static parts, the corresponding JavaScript code is then transformed into inert references and decorative functionality, reducing their client-side footprint to near-zero.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds great! But like all things in tech, nothing is a silver bullet (especially since silver bullets only work on &lt;a href="https://twitter.com/threepointone/status/1459574071465762820"&gt;werewolf shaped problems&lt;/a&gt; anyway).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The partial hydration approach comes with its own issues and compromises. It poses some interesting challenges for caching, and client-side navigation means we can't assume server-rendered HTML for inert parts of the application will be available without a full page load.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To summarize the points of the article, the authors included this behemoth of a comparison table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBMFinmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/updates/images/2019/02/rendering-on-the-web/infographic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBMFinmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.google.com/web/updates/images/2019/02/rendering-on-the-web/infographic.png" alt="02-comparison-chart-of-different-rendering-techniques" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this table isn't the whole story, as Jason Miller noted on &lt;a href="https://twitter.com/_developit/status/1093256348488396800"&gt;Twitter&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;One thing I want to clarify: the diagram in this tweet doesn't tell the full story, and doesn't show SSR+Hydration with possible optimizations like component caching applied.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To expand on this view point, &lt;a href="https://twitter.com/mikesherov/status/1093842567173718016"&gt;Mike Sherov&lt;/a&gt; argued:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The chart talks about Time to First Byte and Time to Interactive relative to First Contentful Paint, but not First Contentful Paint relative to Time to First Byte... so it misses out on that positive fact that SSR solutions will render faster. The chart assumes that “SSR with (re)hydration” doesn’t employ a “JavaScript as progressive enhancement”... that is, it assumes the page is only functional after all JavaScript is delivered&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next.js and others encourage JavaScript as progressive enhancement so that Time to Interactive equals First Contentful Paint still. As mentioned in the disclaimer tweet, this ignores CDN caching of SSR HTML, but ignoring it significantly changes the value prop of “SSR with JavaScript as progressive enhancement”. CDN caching of HTML is flexible AND has high Time to First Byte.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#islands-of-interactivity"&gt;
  &lt;/a&gt;
  Islands of Interactivity
&lt;/h3&gt;

&lt;p&gt;While continuing to explore this problem space, Jason Miller coined the term &lt;a href="https://jasonformat.com/islands-architecture/"&gt;Islands Architecture (August 11, 2020)&lt;/a&gt; in reference to the "Component Islands" pattern advocated by Katie Sylor-Miller. He believed web developers should aim to create "islands of interactivity" with JavaScript carefully selected for inclusion only when necessary.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In an "islands" model, server rendering is not a bolt-on optimization aimed at improving SEO or UX. Instead, it is a fundamental part of how pages are delivered to the browser. The HTML returned in response to navigation contains a meaningful and immediately renderable representation of the content the user requested.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does this mean that partial hydration and the Island's Architecture are interchangeable, or that partial hydration is an implementation of the Island's Architecture? Not exactly. According to Ryan Carniato in &lt;a href="https://dev.to/this-is-learning/is-0kb-of-javascript-in-your-future-48og"&gt;Is 0kb of JavaScript in your Future? (May 3, 2021)&lt;/a&gt;, partial hydration is a lot like the Island's architecture because the end result is Islands of interactivity but the difference is the authoring experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Instead of authoring a static layer and an Island's layer, you write your code like a single app more like a typical frontend framework. Partial hydration automatically can create the islands for you to ship the minimal code to the browser. Marko is a JavaScript library that uses its compiler to automate this partial hydration process to remove Server only rendered components from the browser bundle.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#adding-partial-hydration-to-existing-frameworks"&gt;
  &lt;/a&gt;
  Adding Partial Hydration to Existing Frameworks
&lt;/h2&gt;

&lt;p&gt;Despite the growing awareness throughout 2019 and 2020 of the difficulties of hydration and the need for some form of partial hydration, we can find discussions of the topic much earlier. Paul Lewis described three different levels of hydration (which he called "booting models") in his blog post, &lt;a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/"&gt;When everything's important, nothing is! (December 10, 2016)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztKxRbAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/0%2AKhPIdw8fgMb8uHRb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztKxRbAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/0%2AKhPIdw8fgMb8uHRb" alt="03-three-modes-of-partial-hydration-javascript-based-server-render-plus-hydrate-and-progressive-render-plus-bootstrap" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Early attempts at this were made by &lt;a href="https://github.com/angular/angular/issues/13446"&gt;Angular&lt;/a&gt; and &lt;a href="https://github.com/ember-fastboot/ember-cli-fastboot#ember-fastboot"&gt;Ember&lt;/a&gt;. These attempts appear to have struggled to gain traction. The relevant Angular issue is currently still open 5 years later and Brian Cardarella argued in &lt;a href="https://dockyard.com/blog/2017/08/01/should-you-use-ember-fastboot-or-not-part-1"&gt;Should you use Ember FastBoot or not? (August 1, 2017)&lt;/a&gt; that the costs were too high for DockYard to implement FastBoot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;The release of &lt;a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html"&gt;React v16.0&lt;/a&gt; in September 2017 introduced the &lt;a href="https://reactjs.org/docs/react-dom.html#hydrate"&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/a&gt; method as an alternative to the &lt;code&gt;render()&lt;/code&gt; method. According to Andrew Clark:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;React 16 is better at hydrating server-rendered HTML once it reaches the client. It no longer requires the initial render to exactly match the result from the server. Instead, it will attempt to reuse as much of the existing DOM as possible. No more checksums!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;hydrate()&lt;/code&gt; behaves similarly to the &lt;code&gt;render()&lt;/code&gt; method. However, instead of rendering a React element into the DOM in the supplied container and returning a reference to the component, &lt;code&gt;hydrate()&lt;/code&gt; can hydrate a container whose HTML contents are rendered by &lt;code&gt;ReactDOMServer&lt;/code&gt; and attempt to attach event listeners to the existing markup.&lt;/p&gt;

&lt;p&gt;To balance this trade off, developers were advised to use &lt;code&gt;render()&lt;/code&gt; for rendering the content solely on the client side and &lt;code&gt;hydrate()&lt;/code&gt; for rendering on top of server-side rendered markup. Much like the Google team, the React team urged caution when deciding whether to use hydration:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In general, we don’t recommend that you render different content on the client versus the server, but it can be useful in some cases (e.g. timestamps). However, it’s dangerous to have missing nodes on the server render as this might cause sibling nodes to be created with incorrect attributes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two years later, Sebastian Markbåge opened a PR to implement &lt;a href="https://github.com/facebook/react/pull/14717"&gt;Partial Hydration (January 28, 2019)&lt;/a&gt; as a native feature in React:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Partial hydration adds a mechanism for partially hydrating a server rendered result while other parts of the page are still loading the code or data. This means that you can start interacting with parts of the screen while others are still hydrating. In this model you always have to hydrate the root content first because it is what provides props to the children, which can be of arbitrary complexity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The model assumes that the root of the app is designed to be relatively shallow and then each abstraction gets progressively more complex the deeper it gets. To become interactive faster, components in the tree can themselves use progressive enhancement to add more complexity after initial hydration.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h3&gt;

&lt;p&gt;Markus Oberlehner foreshadows Slinkity (discussed more in a later section) by explaining how to combine the static site generator Eleventy with Preact in &lt;a href="https://markus.oberlehner.net/blog/building-partially-hydrated-progressively-enhanced-static-websites-with-isomorphic-preact-and-eleventy/"&gt;Building Partially Hydrated, Progressively Enhanced Static Websites with Isomorphic Preact and Eleventy (March 22, 2020)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What if I tell you that we can have it all? We can use a modern JavaScript framework, at least as powerful as React, combine it with an exceptional static site generator, and build our websites in a way that they offer real progressive enhancement and a minimal JavaScript bundle size. Combining Eleventy with Preact makes this possible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;

&lt;p&gt;Based on his work porting &lt;a href="https://github.com/maoberlehner/vue-lazy-hydration"&gt;vue-lazy-hydration&lt;/a&gt; to Vue 3, Markus Oberlehner compares different forms of partial hydration in &lt;a href="https://markus.oberlehner.net/blog/partial-hydration-concepts-lazy-and-active/"&gt;Partial Hydration Concepts: Lazy and Active (November 8, 2020)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Lazy Hydration is a form of Partial Hydration where you can trigger hydration at a later point and not immediately after loading the site. A good example is components outside of the viewport. You don’t need to hydrate them instantly, but you can delay hydration until the component is visible.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;TheNavigation/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;LazyHydrate&lt;/span&gt; &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TheBlogArticle/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/LazyHydrate&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;LazyHydrate&lt;/span&gt; &lt;span class="na"&gt;when-visible&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TheFooter/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/LazyHydrate&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Lazy Hydration concept you can see above works best when we have a mostly interactive application, but we want to exclude some parts from the hydration. Let’s imagine the other way around: we have a huge application with deeply nested components, it is a static website, but there is this one deeply nested component, which must be interactive.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;LazyHydrate&lt;/span&gt; &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;App/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/LazyHydrate&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solid"&gt;
  &lt;/a&gt;
  Solid
&lt;/h3&gt;

&lt;p&gt;Ryan Carniato, taking influence from Marko (discussed more in a later section), proposes using sub-component (or component-level) hydration in &lt;a href="https://github.com/solidjs/solid/issues/264"&gt;Partial Hydration (November 15, 2020)&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is the last core feature missing in our SSR story. Truth be told outside of Marko most libraries aren't doing amazing here. We can too consider a more manual approach here at first. I think the key innovation would be to follow Marko's footsteps and recognize there in fact 3 partial hydration modes rather than 2 other libraries are aware of. There is a middle mode that make us considerably more efficient at this. This is uniquely possible given the granular non-component tied approach used here.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#svelte"&gt;
  &lt;/a&gt;
  Svelte
&lt;/h3&gt;

&lt;p&gt;According to Rich Harris in March 2021, partial hydration is &lt;a href="https://news.ycombinator.com/item?id=26558886"&gt;on Svelte's radar but not yet on its roadmap&lt;/a&gt;. This makes sense since Svelte is already compiling an optimized build of vanilla JavaScript that does not require a runtime. However, Kevin Åberg Kultalahti proposed &lt;a href="https://github.com/sveltejs/kit/issues/1390"&gt;Partial Hydration in Svelte (May 9, 2021)&lt;/a&gt; via the &lt;code&gt;use:action&lt;/code&gt; directive. We will also see in the next section that a Svelte metaframework, Elder.js, has struck out on its own to implement partial hydration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameworks-built-for-partial-hydration"&gt;
  &lt;/a&gt;
  Frameworks Built for Partial Hydration
&lt;/h2&gt;

&lt;p&gt;As we can see, essentially every major frontend JavaScript framework has attempted to add some form of partial hydration with varying degrees of success. But there is another category entirely of frontend frameworks that consider partial hydration a key feature to be included from their inception.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marko"&gt;
  &lt;/a&gt;
  Marko
&lt;/h3&gt;

&lt;p&gt;If there is one framework that can be given credit for first introducing partial hydration as a primary feature (even before the term was invented), my money would be on Marko. Patrick Steele-Idem discussed Marko's internals at length in &lt;a href="https://tech.ebayinc.com/engineering/async-fragments-rediscovering-progressive-html-rendering-with-marko/"&gt;Async Fragments: Rediscovering Progressive HTML Rendering with Marko (December 8, 2014)&lt;/a&gt;. He also includes a wealth of links to prior art such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blog.codinghorror.com/the-lost-art-of-progressive-html-rendering/"&gt;The Lost Art of Progressive HTML Rendering (November 14, 2005)&lt;/a&gt; by Jeff Atwood.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.yahoo.com/performance/rules.html"&gt;Best Practices for Speeding Up Your Web Site (December 12, 2006)&lt;/a&gt; by Yahoo's Exceptional Performance Team (epic team name). &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.phpied.com/progressive-rendering-via-multiple-flushes/"&gt;Progressive rendering via multiple flushes (December 21, 2009)&lt;/a&gt; by Stoyan Stefanov.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.facebook.com/notes/10158791368532200/"&gt;BigPipe: Pipelining web pages for high performance (June 4, 2010)&lt;/a&gt; by Changhao Jiang.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael Rawlings takes a look at Marko's innovations from the perspective of the last few years in &lt;a href="https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec"&gt;Maybe you don’t need that SPA (May 12, 2020)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Marko allows you to build pages by composing components and some of these components can be stateful. Only those components that have state, or other logic targeted at the browser are actually sent to the browser and Marko automatically handles serializing any data from the server needed by these components and mounting them in the browser.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This means for most apps, you end up sending down much less code than you would for an equivalent SPA — even with code-splitting. And if no components need to be hydrated? Nothing is hydrated.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsCxRGQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5UGQKpjUAJAJMUtOgbJc5A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsCxRGQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5UGQKpjUAJAJMUtOgbJc5A.png" alt="04-full-page-hydration-versus-component-level-hydration-in-marko" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elderjs"&gt;
  &lt;/a&gt;
  Elder.js
&lt;/h3&gt;

&lt;p&gt;Despite Svelte core choosing to hold off on focusing on partial hydration throughout 2020-2021, one of the early entrants into the race for partial hydration leadership was Elder.js by Nick Reese, a static site generator built with Svelte. Focused primarily on SEO, Elder.js lets you hydrate just the parts of the client that need to be interactive.&lt;/p&gt;

&lt;p&gt;This lets you reduce your payloads while still having control over component lazy-loading, preloading, and eager-loading. While lesser known than Astro, Elder.js included partial hydration as early as &lt;a href="https://github.com/Elderjs/elderjs/commit/19ecd9429284e5358858bbb5fb92e17c41dea33d"&gt;August&lt;/a&gt; &lt;a href="https://github.com/Elderjs/elderjs/commit/b1bffae863228b8721ec78ed3f44822af24bc859"&gt;2020&lt;/a&gt;, roughly six months before Astro's &lt;a href="https://github.com/snowpackjs/astro/commit/af6b029e95e9c98e6fb9c642915d461b8d7f448e"&gt;initial commit&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Clock&lt;/span&gt; &lt;span class="na"&gt;hydrate&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#astro"&gt;
  &lt;/a&gt;
  Astro
&lt;/h3&gt;

&lt;p&gt;Despite the early innovations of Marko and Elder, the framework that deserves the most credit for bringing partial hydration to the mainstream is Astro. Fred K. Schott describes the architecture and goals of Astro in &lt;a href="https://astro.build/blog/introducing-astro/"&gt;Introducing Astro: Ship Less JavaScript (June 8, 2021)&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Astro works a lot like a static site generator. If you have ever used Eleventy, Hugo, or Jekyll (or even a server-side web framework like Rails, Laravel, or Django) then you should feel right at home with Astro.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In Astro, you compose your website using UI components from your favorite JavaScript web framework (React, Svelte, Vue, etc). Astro renders your entire site to static HTML during the build. The result is a fully static website with all JavaScript removed from the final page.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are already plenty of frameworks based on &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;React&lt;/a&gt;, &lt;a href="https://nuxtjs.org/announcements/going-full-static/"&gt;Vue&lt;/a&gt;, and &lt;a href="https://sapper.svelte.dev/docs#sapper_export"&gt;Svelte&lt;/a&gt; that include the ability to render your components to static HTML during build time. However, if you want to hydrate these projects on the client then you have to ship an entire bundle of dependencies along with the static HTML. Unlike these previous frameworks, Astro includes the ability to load just a single component and its dependencies where that component is needed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Of course, sometimes client-side JavaScript is inevitable for things like image carousels, shopping carts, and auto-complete search bars. This is where Astro really shines: When a component needs some JavaScript, Astro only loads that one component (and any dependencies). The rest of your site continues to exist as static, lightweight HTML.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In Astro, this kind of partial hydration is built into the tool itself. You can even automatically defer components to only load once they become visible on the page with the :visible modifier. This new approach to web architecture is called islands architecture.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Astro includes five &lt;code&gt;client:*&lt;/code&gt; directives to hydrate components on the client at runtime. A directive is a component attribute that tells Astro how your component should be rendered.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;MyComponent client:load /&amp;gt;&lt;/code&gt; - Hydrate the component on page load.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;MyComponent client:idle /&amp;gt;&lt;/code&gt; - Hydrate the component as soon as main thread is free.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;MyComponent client:visible /&amp;gt;&lt;/code&gt; - Hydrate the component as soon as the element enters the viewport. Useful for content lower down on the page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;MyComponent client:media={QUERY} /&amp;gt;&lt;/code&gt; - Hydrate the component as soon as the browser matches the given media query. Useful for sidebar toggles, or other elements that should only display on mobile or desktop devices.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;MyComponent client:only /&amp;gt;&lt;/code&gt; - Hydrates the component at page load, similar to &lt;code&gt;client:load&lt;/code&gt;. The component will be skipped at build time, useful for components that are entirely dependent on client-side APIs. Best avoided unless absolutely needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following example is hydrating a React component (&lt;code&gt;MyReactComponent&lt;/code&gt;) in the browser with &lt;code&gt;client:visible&lt;/code&gt;. &lt;code&gt;client:visible&lt;/code&gt; means the component won't load any client-side JavaScript until it becomes visible in the user's browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/MyReactComponent.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyReactComponent&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#slinkity"&gt;
  &lt;/a&gt;
  Slinkity
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://slinkity.dev/"&gt;Slinkity&lt;/a&gt; is a framework that uses Vite to bring dynamic, client side interactions to your static 11ty sites with &lt;a href="https://slinkity.dev/docs/partial-hydration/"&gt;partial hydration&lt;/a&gt;. In &lt;a href="https://www.netlify.com/blog/2021/11/12/ship-javascript-where-it-counts-with-vite-partial-hydration/"&gt;Ship JavaScript where it counts with Vite + Partial Hydration (November 12, 2021)&lt;/a&gt;, Ben Holmes makes the case for turning off partial hydration by default so the developer has to explicitly opt-in:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Right now, the Jamstack landscape definitely relies on an opt-out mindset. Too much JavaScript on initial page load? Opt-out with code splitting and lazy ESM loading. Need less JavaScript on your company’s splash page? Opt-out with server-rendered components. The world of partial hydration introduced by Astro, Slinkity + 11ty, or Îles flips that opt-out to an opt-in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Too much JavaScript on initial page load? Well, you’ll need to opt-in to JavaScript hydration for your UI components to create that problem! These frameworks default to no JavaScript shipped for your React, Vue, Svelte, etc, with hydration “modes” to decide how and when those resources should be loaded (if at all).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To choose how a given component is rendered, you'll need to pass a &lt;code&gt;render&lt;/code&gt; prop, as in a prop literally named &lt;code&gt;render&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can use a shortcode that includes &lt;code&gt;render&lt;/code&gt; and the hydration option you want to select. The default for all components is &lt;code&gt;eager&lt;/code&gt; to mirrow how previous component-based frameworks operate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- page-with-shortcode.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  {% react 'components/Example' 'render' 'eager' %}
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A component loaded with &lt;code&gt;eager&lt;/code&gt; will be rendered to static HTML, and shipped to the client as a JavaScript bundle. In the previous example, visiting &lt;code&gt;page-with-shortcode.html&lt;/code&gt; imports React and the &lt;code&gt;components/Example.jsx&lt;/code&gt; JavaScript bundle as soon as the page is done parsing, ensuring our component is interactive as soon as possible.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lazy&lt;/code&gt; is similar to &lt;code&gt;eager&lt;/code&gt; except it only loads your component's JavaScript when your component is scrolled into view by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;static&lt;/code&gt; components are rendered to HTML at build time and don't ship any JavaScript to the client, meaning no interactivity or state management. This is useful if you want to use component languages like React as just a templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%C3%AEles"&gt;
  &lt;/a&gt;
  îles
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://iles-docs.netlify.app/"&gt;îles&lt;/a&gt; is a static-site generator that provides automatic &lt;a href="https://iles-docs.netlify.app/guide/hydration"&gt;partial hydration&lt;/a&gt;. The name of the project is French for "islands," as a clever homage to both the islands architecture and it's build tool Vite. Inspired by Astro, you are able to define which components should remain interactive in the production build with &lt;code&gt;client:&lt;/code&gt; directives in components. Here is an example with MDX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
&lt;span class="gh"&gt;audio: /song-for-you.mp3
--------
&lt;/span&gt;
&lt;span class="gu"&gt;## Play a song&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;AudioPlayer&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;frontmatter&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;client:visible&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Components in the &lt;code&gt;src/components&lt;/code&gt; directory are auto-imported on demand, which is why the example above does not need to import the &lt;code&gt;AudioPlayer&lt;/code&gt; component. You can also use directives inside Vue components as seen in the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Audio&lt;/span&gt; &lt;span class="na"&gt;client:visible&lt;/span&gt; &lt;span class="na"&gt;:src=&lt;/span&gt;&lt;span class="s"&gt;"audio"&lt;/span&gt; &lt;span class="na"&gt;:initialDuration=&lt;/span&gt;&lt;span class="s"&gt;"initialDuration"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#qwik"&gt;
  &lt;/a&gt;
  Qwik
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/BuilderIO/qwik"&gt;Qwik&lt;/a&gt; focuses on resumability of server-side-rendering of HTML and fine-grained lazy-loading of code. It is designed for the best possible time to interactive. According to Miško Hevery in &lt;a href="https://dev.to/mhevery/a-first-look-at-qwik-the-html-first-framework-af"&gt;A First Look at Qwik - The HTML First Framework (June 23, 2021)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The basic goal of Qwik is to focus on the time-to-interactive metric by delaying JavaScript as much as possible to take advantage of the browser’s lazy loading capabilities. This is in stark contrast to existing frameworks that treat server-side-rendering and time-to-interactive more as an afterthought rather than a primary goal, which drives all other design decisions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now come full circle from Addy Osmani's warning to developers that slow Time to Interactive scores can cause an uncanny valley effect. Websites ship skeleton HTML that looks like it should be interactive but momentarily is not because the user has to wait for the client to hydrate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNxZwFXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3wa5ewpz9o9xoa87ys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNxZwFXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3wa5ewpz9o9xoa87ys.png" alt="05-qwik-time-to-interactive-graphic" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Qwik we now have a framework explicitly aiming to prioritize Time to Interactive which it does through resumability. But what does it mean to be resumable?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The basic idea behind Qwik is that it is resumable. It can continue where the server left off. There is but the tiniest amount of code to execute on the client. The &lt;code&gt;qwikloader&lt;/code&gt;, which takes the static HTML generated from server-side-rendering and resumes it, is less than 1kb and will execute in under 1ms... All the other interactivity of your website is downloaded lazily as you interact with the site in the smallest possible chunks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Qwik also &lt;a href="https://dev.to/mhevery/qwik-the-answer-to-optimal-fine-grained-lazy-loading-2hdp"&gt;rehydrates components asynchronously&lt;/a&gt; and out of order to ensure that the first interaction does not cause a full application download and bootstrap.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Here asynchronously means that the rendering system can pause rendering to asynchronously download a template for a component, and then continue the rendering process. This is in stark contrast to all of the existing frameworks, which have fully synchronous rendering pipelines. And because the rendering is synchronous, there is no place to insert asynchronous lazy-loading. The consequence is that all of the templates need to be present ahead of call to render.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ryan Carniato had &lt;a href="https://twitter.com/RyanCarniato/status/1458872931962933259"&gt;this&lt;/a&gt; to say about Qwik:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It's the only framework that goes from shipping basically only the JavaScript you need on a page (starting maybe even from 0kb), to being able to go full SPA. It can actually with out of order lazy hydration bring in client routing after the fact.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is the only framework that I know of today that basically operates as Islands but can morph into a single application as needed. This is coming to Marko and probably others but we shouldn't get ahead of ourselves. And it's a longer road for traditional SPAs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>partial</category>
      <category>hydration</category>
      <category>islands</category>
      <category>rendering</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 02: Emojicode</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 22 Nov 2021 18:11:13 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-02-emojicode-1lbh</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-02-emojicode-1lbh</guid>
      <description>&lt;p&gt;Most programming languages are created to address some genuine need, but some are just an art statement. One such art statement is the &lt;a href="https://www.emojicode.org/"&gt;Emojicode&lt;/a&gt; language - self-described as a "full-blown programming language consisting of emojis."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h3&gt;

&lt;p&gt;Let's start by writing &lt;code&gt;hello.🍇&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;💭𝔀𝓸𝔀
🏁 🍇
  😀 🔤🄷🄴🄻🄻🄾, 🅆🄾🅁🄻🄳🔤❗️
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, usual keywords have been replaced by emoji:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💭 are comment lines&lt;/li&gt;
&lt;li&gt;🏁 🍇 ... 🍉 is the main function&lt;/li&gt;
&lt;li&gt;🔤 is like quotes&lt;/li&gt;
&lt;li&gt;😀...❗️ is like print&lt;/li&gt;
&lt;li&gt;in general, ❗️ ends argument list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The contents of the strings and comments don't have to be emoji, &lt;a href="https://taw.github.io/imba-unicodizer/"&gt;but I used my app for fancy text to spice them up as well&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;We can put thing in variables by using ➡️. Variables go on the right, which is fairly unconventional choice, but not completely unheard of. 🧲 does string interpolation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🏁 🍇
  🔤ⓔⓥⓔⓡⓨⓞⓝⓔ🔤➡️who
  😀 🔤🄷🄴🄻🄻🄾, 🧲who🧲🔤❗️
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lists-and-for-loops"&gt;
  &lt;/a&gt;
  Lists and for loops
&lt;/h3&gt;

&lt;p&gt;Lists are created by &lt;code&gt;🍿...🍆&lt;/code&gt;. I get the first emoji, not so sure about the second one.&lt;/p&gt;

&lt;p&gt;You can loop with &lt;code&gt;🔂 iterator list 🍇 body 🍉&lt;/code&gt;, which is a decent loop emoji:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🏁 🍇
  🍿
    🔤Python🔤
    🔤JavaScript🔤
    🔤Ruby🔤
    🔤Emojicode🔤
    🔤PHP🔤
  🍆➡️languages
  😀 🔤Most important languages to learn🔤❗️
  🔂 language languages 🍇
    😀 language❗️
  🍉
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;We need a few more things here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;🔂 variable 🆕⏩ start afterend step&lt;/code&gt; is a &lt;code&gt;for i in range(start, afterend, step)&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i 🚮 15 🙌 0&lt;/code&gt; is &lt;code&gt;i % 15 == 0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;↪️, 🙅‍↪️, and 🙅 are &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with that we can write a FizzBuzz, using fancy fonts for output as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🏁 🍇
  🔂 i 🆕⏩ 1 101 1 ❗ 🍇
    ↪️ i 🚮 15 🙌 0 🍇
      😀 🔤𝔽𝕚𝕫𝕫𝔹𝕦𝕫𝕫🔤 ❗
    🍉
    🙅↪️ i 🚮 3 🙌 0 🍇
      😀 🔤𝔽𝕚𝕫𝕫🔤 ❗
    🍉
    🙅↪️ i 🚮 5 🙌 0 🍇
      😀 🔤𝔹𝕦𝕫𝕫🔤 ❗
    🍉🙅🍇
      😀 🔤🧲i🧲🔤 ❗
    🍉
  🍉
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#doubling-things"&gt;
  &lt;/a&gt;
  Doubling things
&lt;/h3&gt;

&lt;p&gt;We need one more thing - functions.&lt;/p&gt;

&lt;p&gt;Well, we're a bit lost. Documentation doesn't say anything about functions. It has closures so we'd think that this might work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🏁 🍇
  🍇 i 🔢➡️🔢
    ↩️ i➕i
  🍉 ➡️ double

  😀 🔤🧲⁉️ double 21❗🧲🔤❗
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to declare types. 🔢➡️🔢 means takes an integer, and returns an integer. ↩️ is return. ⁉️...❗ is function call. Not too bad.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#y-combinator-fail"&gt;
  &lt;/a&gt;
  Y Combinator fail
&lt;/h3&gt;

&lt;p&gt;Unfortunately these cannot be recursive, so this doesn't work at all!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🏁 🍇
  🍇 n 🔢➡️🔢
    ↪️ n ◀️ 3 🍇
      ↩️ 1
    🍉🙅🍇
      💭 Does not work
      ↩️ ⁉️ fib n➖1❗➕⁉️ fib n➖2❗
    🍉
  🍉 ➡️ fib

  😀 🔤🧲⁉️ fib 5❗🧲🔤❗
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, &lt;a href="https://en.wikipedia.org/wiki/Fixed-point_combinator"&gt;I thought about doing the old Lisp trick, and pass fib closure as argument to fib, so it can call itself, but that only works if there are no stupid types getting in the way&lt;/a&gt;. It's possible for type system to support Y combinator if it supports recursive types, but I don't think Emojicode does.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;The documentation doesn't say anything about functions, but it has classes. So let's define class 🤖 with method 🚀 that does fib:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🐇 🤖 🍇
  🆕🍇
  🍉

  ❗️ 🚀 n 🔢➡️🔢 🍇
    ↪️ n ◀️ 3 🍇
      ↩️ 1
    🍉🙅🍇
      ↩️ 🚀👇 n➖1❗➕🚀👇 n➖2❗
    🍉
  🍉
🍉

🏁 🍇
  🆕🤖❗️ ➡️ fib

  🔂 i 🆕⏩ 1 31 1 ❗ 🍇
    🚀fib i❗️ ➡️ x
    😀 🔤🧲x🧲🔤❗
  🍉
🍉
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been following along, this code shouldn't be too difficult to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;🆕🤖❗️ ➡️ fib&lt;/code&gt; - creates a new 🤖 and assigns it to &lt;code&gt;fib&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;🚀fib i❗️ ➡️ x&lt;/code&gt; - calls 🚀 on &lt;code&gt;fib&lt;/code&gt; instance, calling our only method with argument &lt;code&gt;i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;🐇 🤖 🍇 ... 🍉&lt;/code&gt; - definition of a class with name 🤖 (class names must be emoji)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;🆕🍇🍉&lt;/code&gt; - empty constructor, we need some constructor for every class, even if it doesn't do anything&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;❗️ 🚀 n 🔢➡️🔢 🍇...🍉&lt;/code&gt; - defining method 🚀...❗️  that taken one integer argument &lt;code&gt;n&lt;/code&gt; and returns an integer&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;↩️ 🚀👇 n➖1❗➕🚀👇 n➖2❗&lt;/code&gt; - recursive call, 🚀👇 n➖1❗ is &lt;code&gt;this.🚀(n-1)&lt;/code&gt; in more usual language&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h3&gt;

&lt;p&gt;This language was of course created as an art statement (or as a joke if you prefer to put it that way), but it asks an important question. Throughout the history of programming, nearly every language (APL and Raku being the most notable exception, and don't worry - we'll surely cover both in this series) limited itself to just plain text with ASCII characters.&lt;/p&gt;

&lt;p&gt;Even though ASCII symbols were clearly not enough, so symbols get reused to mean ten different things (try to list all syntactic meanings of &lt;code&gt;{}&lt;/code&gt; characters in JavaScript or actually in just about any language), and long strings of characters like &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;**=&lt;/code&gt; and such get used as fake extra characters.&lt;/p&gt;

&lt;p&gt;So the question is - should programming languages keep limiting themselves to just ASCII, or is it finally time to embrace the whole Unicode? An interesting middle ground are &lt;a href="https://github.com/tonsky/FiraCode"&gt;ligature fonts like Fira Code&lt;/a&gt; - the source code would still say &lt;code&gt;!==&lt;/code&gt;, but in the editor you'd see &lt;code&gt;≢&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-02-emojicode"&gt;Code for the Emojicode episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>emojicode</category>
    </item>
    <item>
      <title>The ephemeral miniconf - The videos</title>
      <author>Tib</author>
      <pubDate>Mon, 22 Nov 2021 18:08:27 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-the-videos-e2d</link>
      <guid>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-the-videos-e2d</guid>
      <description>&lt;p&gt;&lt;strong&gt;The ephemeral miniconf&lt;/strong&gt; was last week 😎 It went very well 👍 and it’s time to share all the videos: &lt;a href="https://m.youtube.com/channel/UCoUiZ7IoTXa1us8jvCyQl6g/videos"&gt;[The epehemeral miniconf Youtube channel]&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#native-github-actions-in-perl-juan-juli%C3%A1n-merelo-guerv%C3%B3s"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=XNi8FMEI1Wo"&gt;Native GitHub actions in Perl - Juan Julián Merelo Guervós&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=XNi8FMEI1Wo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeCN4W62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4mj9zz450226zsypew3.png" alt="Native GitHub actions in Perl" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#do-you-really-know-xml-thibault-duponchelle"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=NgsDI2XeLLY"&gt;Do you really know XML? - Thibault Duponchelle&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=NgsDI2XeLLY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tde3PcDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tkd7fobluwiok1ozmoo.png" alt="Do you really know XML?" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automatic-observability-jos%C3%A9-joaqu%C3%ADn-atria"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=a6mlym8nVHc"&gt;Automatic Observability - José Joaquín Atria&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=a6mlym8nVHc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfcTO4xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5v8xtmi54jgptj2bdqc.png" alt="Automatic Observability" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#open-food-facts-stephane-gigandet"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=9SOROdmJn4g"&gt;Open Food Facts - Stephane Gigandet&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=9SOROdmJn4g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lU6T5eag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfesxwfwua9o1mxjlcdf.png" alt="Open Food Facts" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cunninghams-law-a-year-of-being-wrong-on-the-internet-mark-gardner"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=mC_FLFH8FMw"&gt;Cunningham’s Law: A Year of Being Wrong on the Internet - Mark Gardner&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=mC_FLFH8FMw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RO6F7ewp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz8z4m815ldeidm30ccn.png" alt="Cunningham’s Law: A Year of Being Wrong on the Internet" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lemonldapng-clement-oudot"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=6jLaZt_grtM"&gt;LemonLDAP::NG - Clement Oudot&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=6jLaZt_grtM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCmF0Otk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/999f56qe1dxyyv5r67jx.png" alt="LemonLDAP::NG - Clement Oudot" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#once-upon-perl-acronyms-thibault-duponchelle"&gt;
  &lt;/a&gt;
  &lt;a href="https://m.youtube.com/watch?v=Zdp3rKWq3-I"&gt;Once Upon Perl Acronyms - Thibault Duponchelle&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=Zdp3rKWq3-I"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1hcOEtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwx8zbf3suf0lphp0ojs.png" alt="Once Upon Perl Acronyms" width="880" height="765"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#your-turn-to-watchenjoylike-them-now"&gt;
  &lt;/a&gt;
  Your turn to watch/enjoy/like them now
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#grinning"&gt;
  &lt;/a&gt;
  😀
&lt;/h1&gt;

</description>
      <category>perl</category>
      <category>conf</category>
    </item>
    <item>
      <title>What You Need to Break into DevOps and SRE</title>
      <author>Mike Levan</author>
      <pubDate>Mon, 22 Nov 2021 18:05:54 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/what-you-need-to-break-into-devops-and-sre-3fp5</link>
      <guid>https://dev.to/thenjdevopsguy/what-you-need-to-break-into-devops-and-sre-3fp5</guid>
      <description>&lt;p&gt;Something that's being seen and felt throughout the technology space in today's world is how fast everything is going. There's no such thing as "keep yourself up to date every 2-5 years" anymore like there used to be. Now it's "keep yourself up to date now.. and now.. and now". There's a massive shortage of DevOps engineers and SRE's because of this exact purpose.&lt;/p&gt;

&lt;p&gt;It's a tough gig and it's hard to keep up, but it's extremely possible.&lt;/p&gt;

&lt;p&gt;In this blog post, you'll learn about what you need to break into the DevOps and SRE space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-not-a-beginnerlevel-role"&gt;
  &lt;/a&gt;
  It's Not A Beginner-Level Role
&lt;/h2&gt;

&lt;p&gt;You'll see "junior" level DevOps and SRE roles. You'll also see several people asking how to get into DevOps or SRE as a junior-level candidate.&lt;/p&gt;

&lt;p&gt;Here's the issue; there's no such thing as a junior-level SRE or DevOps engineer. It's not a role that's meant for entry-level engineers. The reason why is because the role requires vast knowledge in so many different areas. Quite frankly, it's tough for a senior or even a principal-level engineer to keep up with.&lt;/p&gt;

&lt;p&gt;When you see a junior-level DevOps/SRE role, expect the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's probably a systems administration style role.&lt;/li&gt;
&lt;li&gt;You'll probably have to deal with fundamental programming tickets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, it's most likely an entry-level sysadmin role or an entry-level developer role with a fancy title. There's nothing wrong with that of course because you have to start somewhere, but just know what you're getting into.&lt;/p&gt;

&lt;p&gt;In the upcoming section called &lt;strong&gt;Technologies&lt;/strong&gt;, you'll see a short glimpse of what's needed right off the bat to break into DevOps and SRE. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mindset"&gt;
  &lt;/a&gt;
  Mindset
&lt;/h2&gt;

&lt;p&gt;At the end of the day, breaking into a hard engineering discipline is all about having these three components in your mindset arsenal. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Troubleshooting abilities&lt;/li&gt;
&lt;li&gt;Hunger to learn more&lt;/li&gt;
&lt;li&gt;An interest to dive deeper into what you're doing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You're never going to know every single tool or platform out there like the back of your hand. Sure, you may dabble in everything, but you won't be an expert in everything. It's just not possible, and good organizations know that, so they won't expect it from you.&lt;/p&gt;

&lt;p&gt;If you're hungry to learn more, keep up with the latest technologies, enjoy what you're doing, and don't like to be stagnant, breaking into the DevOps and SRE space is great for you.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technologies"&gt;
  &lt;/a&gt;
  Technologies
&lt;/h2&gt;

&lt;p&gt;Below is a list of the technologies you should focus on that you'll need for the current DevOps and SRE market.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A programming language (Python or Go, or both)&lt;/li&gt;
&lt;li&gt;Configuration language (Terraform which is written in HCL, JSON, YAML)&lt;/li&gt;
&lt;li&gt;Cloud (Azure or AWS is good to start with)&lt;/li&gt;
&lt;li&gt;Source control (GitHub)&lt;/li&gt;
&lt;li&gt;CICD (try out GitHub Actions since you're already using GitHub)&lt;/li&gt;
&lt;li&gt;Containerization (Docker)&lt;/li&gt;
&lt;li&gt;Orchestration (Kubernetes)&lt;/li&gt;
&lt;li&gt;Standard monitoring (systems, services, etc.)&lt;/li&gt;
&lt;li&gt;Application performance monitoring (APM)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, it's a laundry list of technologies. Not to mention all of the different platforms in each category.&lt;/p&gt;

&lt;p&gt;That's why at the beginning of this blog post, you read that DevOps and SRE roles are not entry-level. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-with-it"&gt;
  &lt;/a&gt;
  Running With It
&lt;/h3&gt;

&lt;p&gt;Let's run through a scenario with these technologies and how they can work together.&lt;/p&gt;

&lt;p&gt;Say you need to learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;CICD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are four different technologies, but you can use them all to learn from each other.&lt;/p&gt;

&lt;p&gt;First, you can learn Python. Learn the basics of the language and how to put together a web app for your "project". Next, you need to learn Docker. Take the web app you created and containerize it. After Docker, you dive into Kubernetes. Use the Docker image you created from the Python web app to orchestrate via Kubernetes. Finally, learn about CICD by taking the Docker image and deploying to it Kubernetes using CICD.&lt;/p&gt;

&lt;p&gt;As you can see, you can take four different technologies and use them all together to not only learn but reinforce what you've learned.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>engineeringmanager</category>
      <category>engineering</category>
      <category>sre</category>
    </item>
    <item>
      <title>How to Build a React Progressive Web Application?</title>
      <author>Sojy SN</author>
      <pubDate>Mon, 22 Nov 2021 17:59:53 +0000</pubDate>
      <link>https://dev.to/sojy002/how-to-build-a-react-progressive-web-application-3fd9</link>
      <guid>https://dev.to/sojy002/how-to-build-a-react-progressive-web-application-3fd9</guid>
      <description>&lt;p&gt;Classify the users and the most compatible user operations when determining if the succeeding application should be a mainstream web app, a website, or a native mobile device. A progressive web app runs in all browsers and enhances the user interface once the user's browser is updated with new and &lt;a href="https://ziniosedge.com/differences-between-api-and-microservices-heres-all-you-need-to-know/"&gt;enhanced functionality and APIs&lt;/a&gt;. As a consequence, there is no inconsistency in the user interface between a modern mobile app and a conventional website; nevertheless, you will require to recognise what features to promote offline, and you may require to help navigation. &lt;/p&gt;

&lt;p&gt;A &lt;a href="https://ziniosedge.com/web-application-automated-loan-processing-platform/"&gt;progressive web app&lt;/a&gt;, by design, would run on any platform and constantly update, getting advantage of any functionality existing on the user's device and browser. Suppose such features are necessitated for significant user activities but are not yet available due to a deficiency of cross-browser compatibility. In that case, a native mobile application could be the most suitable choice, ensuring a consistent experience for all users. &lt;/p&gt;

&lt;p&gt;Progressive Web Apps are generated employing a modern technology recognised as service workers. Service operators are scripts that are event-oriented and have access to domain-wide events. These are programmable proxies that remain between the user's browser tab and the rest of the Internet. They prevent network requests and rewrite or fabricate them to contribute very granular caching and offline service.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-of-react"&gt;
  &lt;/a&gt;
  Characteristics of React
&lt;/h2&gt;

&lt;p&gt;Currently, ReactJS obtaining quite agile fame as the most reliable JavaScript framework among web developers. It is making a significant role in the front-end ecosystem. Now, we are continuing to provide you with the essential features of ReactJS in the following section. Let us take a more familiar look at some significant features of React. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lightweight DOM For Better Performance &lt;/li&gt;
&lt;li&gt;Natural Learning Curve &lt;/li&gt;
&lt;li&gt;Components Support And Little Dependencies &lt;/li&gt;
&lt;li&gt;The desired interface can be created in a relatively simple manner. &lt;/li&gt;
&lt;li&gt;Error boundaries &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#knowing-the-progressive-web-app"&gt;
  &lt;/a&gt;
  Knowing the Progressive Web App
&lt;/h2&gt;

&lt;p&gt;While browsing something on the Internet, have you ever noticed an “Add To Home Screen”banner, as shown below images. &lt;br&gt;
Have a look:   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtHdrUo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neop9p5jxgrm38bqk0ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtHdrUo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neop9p5jxgrm38bqk0ge.png" alt="Image description" width="225" height="169"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Image istaken from Google   REF: &lt;a href="https://gfycat.com/gifs/search/progressive+web+apps%C2%A0"&gt;https://gfycat.com/gifs/search/progressive+web+apps &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SC0qBrmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21cgtk9d5z8hz5fq3feb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC0qBrmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21cgtk9d5z8hz5fq3feb.png" alt="Image description" width="263" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you hit the button, the “application” installs itself in the backdrop. When you start this application that now continues in your app drawer, you can comfortably browse the likewise experience you were doing on your browser, but now directly in your mobile phone. &lt;/p&gt;

&lt;p&gt;You know what, installing the application was so simple. But that's not even the great part. Because, when you open the app, you will be capable to browse the content even when you do not have internet access. You have offline access to that appropriate app. Now just think, how reliable is that? &lt;/p&gt;

&lt;p&gt;After the process of connecting the multiple applications in a front home screen is PWA that blends new technologies with installed best practices for creating reliable, accessible, and appealing experiences. They provide users with a native-like experience with a user-friendly opt-in installation process. &lt;/p&gt;

&lt;p&gt;Progressive Web App isn’t a distinctive frame or technology. Preferably, it is a combination of best practices to make a &lt;a href="https://ziniosedge.com/services/application-engineering/"&gt;web application&lt;/a&gt; function more comparable to a desktop or &lt;a href="https://dev.tov"&gt;mobile application&lt;/a&gt;. Here, the purpose is to have an experience where the user is unable to tell the variation between a Progressive Web App and a native mobile app. Now that you understand a little more about the progressive web apps, So let's delve into the overview of understanding how to create PWA. PWAs can support businesses to take their development backlog and the resources to get originated with such applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-areactjs-progressive-web-app"&gt;
  &lt;/a&gt;
  How to create aReact.js Progressive Web App
&lt;/h2&gt;

&lt;p&gt;We suggest using create-react-app, which is an officially supported way of creating React apps.It gives a modern setup with no configuration necessitated.You can build an app by running  npx create-react-app my-app &lt;/p&gt;

&lt;p&gt;After app production, you can use React the identical way you’d use it normally. You don’t need to install any supplementary dependencies or libraries. &lt;/p&gt;

&lt;p&gt;You don’t even have to create your service worker –create-react-app gives you their boilerplate one, although it is unregistered. We'd suggest having it that way until you’re finished with your app and required to test it as a PWA since sometimes, it makes debugging harder. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-pwa-with-createreactapp"&gt;
  &lt;/a&gt;
  Building a PWA with create-react-app
&lt;/h2&gt;

&lt;p&gt;To perform our PWA, we’re proceeding to work on create-react-app. This remarkable project has had inbuilt support for making PWAs. In modern days, that support has matured to a very satisfying level. To create ourselves a TypeScript React app using create-react-app, enter this npx command in the console: &lt;/p&gt;

&lt;p&gt;/npx create-react-app pwa-react-typescript--template typescript/ &lt;/p&gt;

&lt;p&gt;This creates you aReact web app built with TypeScript. It can be tested locally with: &lt;/p&gt;

&lt;p&gt;cd pwa-react-typescriptyarn start &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-your-react-app-a-pwa"&gt;
  &lt;/a&gt;
  Making your React app a PWA
&lt;/h2&gt;

&lt;p&gt;The two foremost elements of a PWA are a Service Worker and a Web Manifest. While it's feasible to combine both of these to an app manually, a base project from Create ReactApp (CRA) and the Ionic CLI gives this already.&lt;/p&gt;

&lt;p&gt;In the index.ts for your app, there is a request to a serviceWorker.unregister()function. The base CRA provides has service workers as an opt-in feature, so it must be approved. To enabled,callserviceWorker.register().   &lt;/p&gt;

&lt;p&gt;import React from 'react'; &lt;br&gt;
import ReactDOM from 'react-dom'; &lt;br&gt;
import App from './App'; &lt;br&gt;
import * as serviceWorker from './serviceWorker';   &lt;/p&gt;

&lt;p&gt;ReactDOM.render(, document.getElementById('root'));   &lt;br&gt;
// If you want your app to work offline and load faster, you can change &lt;br&gt;
// unregister() to register() below. Note this comes with some pitfalls. &lt;br&gt;
// Learn more about service workers: &lt;a href="https://bit.ly/CRA-PWA"&gt;https://bit.ly/CRA-PWA&lt;/a&gt; // serviceWorker.unregister(); &lt;/p&gt;

&lt;p&gt;serviceWorker.register();     &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-comparison-responsive-web-apps-and-native-apps"&gt;
  &lt;/a&gt;
  A comparison: Responsive Web apps and Native apps
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#native-app"&gt;
  &lt;/a&gt;
  Native App
&lt;/h2&gt;

&lt;p&gt;A native app is designed to run on a precise mobile operating system.A native mobile app is immediately installed on the smartphone and can work, in most instances, without internet connectivity depending on the quality of the app. The native apps can operate much quicker by checking the endowment of the processor. Native apps receive the permission of the app store they are intended for, which indicates in most of the scenarios the user can be assured of the communication, and the native app responds the way its user expects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-app"&gt;
  &lt;/a&gt;
  Responsive Web App
&lt;/h2&gt;

&lt;p&gt;A responsive web can perform comparable functionality to an appropriate app, and with limited creativity, the variation can be decreased.The web app runs via a web browser on the smartphone but entails either a cell signal or wi-fi to operate. They are much more comfortable for users to identify since their pages can be simply represented in the search results and can be listed in common search engines such as Google or Bing. The web app has the chance of being accepted on multiple devices with the only stipulation being a web browser and an internet connection. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signing-off"&gt;
  &lt;/a&gt;
  Signing Off
&lt;/h2&gt;

&lt;p&gt;Progressive Web Apps are the major apps that operate on any browser or device, online and offline and can be installed on any device except for iOS devices. If you use create-react-app, you can change your app into a Progressive Web App in just mentioned easy ways.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Princípios de Design da Apple para iOS</title>
      <author>Pedro Calado</author>
      <pubDate>Mon, 22 Nov 2021 17:57:27 +0000</pubDate>
      <link>https://dev.to/vaivoa/principios-de-design-da-apple-para-ios-5baa</link>
      <guid>https://dev.to/vaivoa/principios-de-design-da-apple-para-ios-5baa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bV5d3xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjj798xjj1wmemi4ypy4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bV5d3xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjj798xjj1wmemi4ypy4.png" alt="Human Interface Guidelines" width="880" height="783"&gt;&lt;/a&gt;&lt;br&gt;
 Por trás de todo bom aplicativo no ecossistema da Apple, que possuem excelente &lt;em&gt;user experience,&lt;/em&gt; estão boas práticas e padrões de design fornecidos pela própria Apple para cada um dos seus dispositivos, o &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/"&gt;Human Interface Guidelines&lt;/a&gt; (HIG). Desde o design dos ícones até a interação dos usuários com objetos de realidade aumentada, a ideia do HIG é fornecer padrões para que o time de produto como um todo, desde designers até desenvolvedores, consiga entregar produtos extraordinários, que os usuários gostem de usar, que sejam bonitos e simples ao mesmo tempo.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos tratar especificamente do guia de design para iOS, trazendo um overview dos princípios do guia e alguns pontos essenciais que temos que levar em consideração ao projetarmos nossas aplicações.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-faz-o-ios-ser-%C3%BAnico-na-vis%C3%A3o-da-apple"&gt;
  &lt;/a&gt;
  O que faz o iOS ser único na visão da Apple
&lt;/h2&gt;

&lt;p&gt;Existem 3 princípios que norteiam e diferenciam o iOS das demais plataformas de acordo com a Apple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clareza&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O foco do design deve ser em guiar o usuário de maneira simples e intuitiva. Textos legíveis, ícones precisos, adornos sutis e apropriados, tendo como fim principal a funcionalidade, todas essas características fazem o iOS ser diferente. Quando você precisa enviar uma mensagem, compartilhar uma foto ou até mesmo saber se uma funcionalidade está ativa ou não, você consegue facilmente identificar o que cada ícone faz, trazendo clareza para o usuário.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40P_x64c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvuhr1o15x7itz47qrlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40P_x64c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvuhr1o15x7itz47qrlo.png" alt="Exemplo de ícones" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deferência&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se olharmos o significado da palavra deferência no dicionário, encontraremos algo como "atitude de respeito e consideração a um superior ou a pessoa mais velha". E aqui a ideia é exatamente essa: o design deve realçar o conteúdo, sendo este o mais importante e o que deve ser destacado. O design deve "trabalhar" para o conteúdo. Como exemplo, quando temos um fundo borrado, o conteúdo que não está borrado é pra onde nosso foco vai, fazendo com que foquemos no que realmente importa.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iL7WCyBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3x7u9p9knr9nhc7qlwl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iL7WCyBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3x7u9p9knr9nhc7qlwl.jpeg" alt="Exemplo de foco no conteúdo" width="750" height="1334"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Profundidade&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A ideia aqui é que sua aplicação seja dividida em camadas, tendo uma certa hierarquia que facilita o usuário ao navegar pelas informações, com transições entre telas que forneçam um senso de profundidade e permitam que o usuário acesse funcionalidades sem perder o contexto.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PS1HqGkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q70s64fhw4qyqnqgmfhq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PS1HqGkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q70s64fhw4qyqnqgmfhq.jpeg" alt="Exemplo de camadas" width="750" height="1334"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#princ%C3%ADpios-de-design"&gt;
  &lt;/a&gt;
  Princípios de Design
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#integridade-est%C3%A9tica"&gt;
  &lt;/a&gt;
  Integridade Estética
&lt;/h3&gt;

&lt;p&gt;Esse ponto se refere ao quão bem a aparência e comportamento de um app se comunica com a sua funcionalidade. Uma aplicação crítica, como, por exemplo, que faz o controle de um sistema aéreo, deve focar em ter comportamentos previsíveis, evitando inserir elementos essencialmente estéticos que só trarão ruídos e não acrescentarão funcionalidade. Já uma aplicação mais imersiva como um jogo, por exemplo, deve possuir uma aparência mais cativante e até usar comportamentos imprevisíveis, permitindo que o usuário faça descobertas enquanto usa o app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consist%C3%AAncia"&gt;
  &lt;/a&gt;
  Consistência
&lt;/h3&gt;

&lt;p&gt;Consistência se refere a fazer com que o app funcione da maneira com que o usuário espere que ele se comporte, trazendo padrões de gestos familiares, usando elementos já fornecidos pelo sistema, ícones (como ícones de lixeira, compartilhamento, etc.) e palavras conhecidas. De maneira geral, os usuários de smartphones já adquiriram hábitos de utilização que são difíceis de mudar, então devemos ao máximo tentar manter esses comportamentos. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manipula%C3%A7%C3%A3o-direta"&gt;
  &lt;/a&gt;
  Manipulação Direta
&lt;/h3&gt;

&lt;p&gt;O ponto aqui é fazer com que o usuário possa ver alterações imediatas ao interagir com o app, seja rotacionando o celular ou interagindo com gestos e toques no conteúdo da tela.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APEiNr16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rm3v6wrd6shqc9z24.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APEiNr16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rm3v6wrd6shqc9z24.gif" alt="Gif de gesto para acessar a home no iPhone" width="700" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h3&gt;

&lt;p&gt;O feedback corresponde a manter os usuários informados sobre suas ações como, por exemplo, por meio de indicadores de progresso do download de arquivos, sons, alertas e a vibração do celular que ajuda o usuário a identificar o resultado de suas interações com o dispositivo e suas aplicações.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzfMCUnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rr269hu9xoz0q6u8y6p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzfMCUnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rr269hu9xoz0q6u8y6p.jpeg" alt="Indicador de loading e progresso" width="750" height="1334"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fBrQtwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3xahy3mzaqv5mbgmk7s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fBrQtwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3xahy3mzaqv5mbgmk7s.jpeg" alt="Silent mode ativado" width="750" height="1334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#met%C3%A1foras"&gt;
  &lt;/a&gt;
  Metáforas
&lt;/h3&gt;

&lt;p&gt;Metáforas são como uma digitalização de algo da vida real. Desde ícones dos apps, como o ícone do app de e-mail que representa uma carta, até aplicativos como o de gravação de áudio que simula as frequências conforme a intensidade do som gravado.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FT6Qp-3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d5t4ymdkg87odbcleer.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FT6Qp-3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d5t4ymdkg87odbcleer.jpeg" alt="Frequência de sons" width="750" height="1334"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pw3fbBHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21sbaw86op8mwxzw57kb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pw3fbBHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21sbaw86op8mwxzw57kb.jpeg" alt="Ícones usando metáforas" width="750" height="1334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controle-do-usu%C3%A1rio"&gt;
  &lt;/a&gt;
  Controle do Usuário
&lt;/h3&gt;

&lt;p&gt;A ideia aqui é que o usuário esteja no comando, e não os apps. As aplicações devem guiar o usuário, alertar sobre erros, dar feedback, mas nunca ter o controle. Por exemplo, uma aplicação que requer o uso da localização, como o Google Maps, solicitará ao usuário permissão para usar esse dado, explicando a necessidade dessa utilização. Com isso, o usuário está no controle, o que dá ao app certa confiabilidade.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrXBjIyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfwhep6smjp55uh1c8hy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrXBjIyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfwhep6smjp55uh1c8hy.jpeg" alt="Google maps solicitando uso da localização" width="750" height="1334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Esses são os princípios que guiam o design dos produtos da Apple e o que fazem, de acordo com eles, o iOS diferente das demais plataformas em termos de &lt;em&gt;user experience&lt;/em&gt;. No meu ponto de vista, ficou claro que o usuário é ponto principal em tudo o que fazem, mantendo-o no centro das decisões e fornecendo ferramentas que vão facilitar o uso das aplicações e trazer conforto e confiança.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__743191"&gt;
  
    .ltag__user__id__743191 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/pedrohcalado" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WqJJnXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jMtztxAn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/743191/a945fa4f-86cc-437b-99fb-bbab45e33c02.jpeg" alt="pedrohcalado image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pedrohcalado"&gt;Pedro Calado&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pedrohcalado"&gt;Software Developer 👨🏻‍💻  | 
Always learning and sharing.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
.&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAgiXlrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8bndcx2jkn1jz1dy98v.png" alt="linha horizontal" width="880" height="3"&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;A VaiVoa incentiva seus Desenvolvedores em seu processo de crescimento e aceleração técnica. Os artigos publicados não traduzem a opinião da VaiVoa. A publicação obedece ao propósito de estimular o debate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" alt="logo vaivoa" width="548" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ios</category>
      <category>design</category>
    </item>
  </channel>
</rss>
