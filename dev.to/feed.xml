<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>If you were the new CEO of Amazon Web Services what would be your first executive order?</title>
      <author>Andrew Brown üá®üá¶</author>
      <pubDate>Sun, 07 Feb 2021 15:35:10 +0000</pubDate>
      <link>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</link>
      <guid>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</guid>
      <description>&lt;p&gt;Andy Jassy who is the current CEO of Amazon Web Services (AWS) is going to be the new CEO of Amazon. It's uncertain who will be next to the CEO of AWS. &lt;/p&gt;

&lt;p&gt;If you could have full control of AWS what would you decree?&lt;/p&gt;

&lt;p&gt;I would add a Dark Theme to the AWS Console.&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>Formik VS React Hook Form Part I</title>
      <author>Doaa Shafik </author>
      <pubDate>Sun, 07 Feb 2021 10:29:56 +0000</pubDate>
      <link>https://dev.to/doaashafik/formik-vs-react-hook-form-aei</link>
      <guid>https://dev.to/doaashafik/formik-vs-react-hook-form-aei</guid>
      <description>&lt;p&gt;Front End Engineers work a lot with forms and with the complexity of apps we need powered forms to help us managing the form state, form validation with nested levels, form verbosity.&lt;br&gt;
&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt; comes to solve all these problems.&lt;br&gt;
Now we have a new library &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt; &lt;span&gt;was released to compete.&lt;/span&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Module Composition&lt;/h3&gt; 

&lt;p&gt;&lt;a href="https://bundlephobia.com/result?p=formik@1.5.8"&gt;Formik has nine dependencies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hnsEFqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/formik-dependencies.png%3Fresize%3D730%252C155%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hnsEFqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/formik-dependencies.png%3Fresize%3D730%252C155%26ssl%3D1" alt="formik composition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bundlephobia.com/result?p=react-hook-form@3.24.0"&gt;React Hook Form has no dependencies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idEmsfM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fw%3D730%26ssl%3D1%2520730w%2C%2520https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fresize%3D300%252C34%26ssl%3D1%2520300w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idEmsfM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fw%3D730%26ssl%3D1%2520730w%2C%2520https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fresize%3D300%252C34%26ssl%3D1%2520300w" alt="React Hook Form bundle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Controlled &amp;amp; UnControlled Component&lt;/h3&gt;

&lt;p&gt;Formik support Only Controlled Component but React-hook-form support both of them.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#controlled-component" class="anchor"&gt;
  &lt;/a&gt;
  Controlled Component
&lt;/h6&gt;

&lt;p&gt;is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component "controls" it by handling the callback and managing its own state and passing the new values as props to the controlled component.&lt;br&gt;
&lt;a href="https://react-hook-form.com/api#Controller"&gt;Controlled Component with RHF&lt;/a&gt;&lt;br&gt;
&lt;a href="https://formik.org/docs/api/field"&gt;Controlled Component with Formik&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#uncontrolled-component" class="anchor"&gt;
  &lt;/a&gt;
  Uncontrolled Component
&lt;/h6&gt;

&lt;p&gt;is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;feature&lt;/th&gt;
      &lt;th&gt;uncontrolled&lt;/th&gt;
      &lt;th&gt;controlled&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;one-time value retrieval (e.g. on submit)&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;validating on submit&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;conditionally disabling submit button&lt;/td&gt;
      &lt;td&gt;‚ùå&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;several inputs for one piece of data&lt;/td&gt;
      &lt;td&gt;‚ùå&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dynamic inputs&lt;/td&gt;
      &lt;td&gt;‚ùå&lt;/td&gt;
      &lt;td&gt;‚úÖ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Re-Rendering&lt;/h3&gt;

&lt;p&gt;We want to avoid unnecessary re-render cycles as much as possible, as this could lead to major performance issues as an app grows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-oIVSK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8GNRbz/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f664232704a2e706e67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-oIVSK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8GNRbz/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f664232704a2e706e67.png" alt="image-rerender-formik &amp;amp; react-hook-form"&gt;&lt;/a&gt;&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Dependent Fields&lt;/h3&gt;

&lt;p&gt;With React Hook Form &lt;a href="https://react-hook-form.com/api#watch"&gt;watch Function&lt;/a&gt; help you to watch specified inputs and return their values to  determine what to render. &lt;/p&gt;

&lt;p&gt;With Formik watching all fields enabled by default so you can remove or add fields depend on values prop.&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Events&lt;/h3&gt;

&lt;p&gt;With React Hook Form &lt;a href="https://react-hook-form.com/api#getValues"&gt;Read Form Values&lt;/a&gt; inside events.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note-getvalues-will-not-trigger-rerenders-or-subscribe-to-input-changes" class="anchor"&gt;
  &lt;/a&gt;
  note: getValues() will not trigger re-renders or subscribe to input changes.
&lt;/h6&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
With Formik you can read form values with values prop.&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Summarize&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;feature&lt;/th&gt;
            &lt;th&gt;formik&lt;/th&gt;
            &lt;th&gt;react-hook-form&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Size&lt;/td&gt;
            &lt;td&gt;12.6kB&lt;/td&gt;
            &lt;td&gt;5.2kB&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Weekly Downloads&lt;/td&gt;
            &lt;td&gt;1,314,511&lt;/td&gt;
            &lt;td&gt;638,419&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Dependencies&lt;/td&gt;
            &lt;td&gt;9&lt;/td&gt;
            &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Open Issues&lt;/td&gt;
            &lt;td&gt;498&lt;/td&gt;
            &lt;td&gt;6&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;React Native&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TypeScript&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Class components&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
            &lt;td&gt;‚ùå&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Clear documentation&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Yup integration&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
            &lt;td&gt;‚úÖ&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
Compare Both with Examples, See &lt;a href="https://dev.to/doaashafik/formik-vs-react-hook-form-cases-part-ii-4omi-temp-slug-5264081?preview=e42653392509226354193f68854f7627a98ae96e623513580c189866db12b7ce03c9b7205e1d83b0254124ae37f2ea476b0a0f1a560c9d7da54188e6"&gt;Formik VS React Hook Form Part II&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>formik</category>
      <category>reacthookform</category>
    </item>
    <item>
      <title>3 underrated web dev youtubers you should check out</title>
      <author>Karan Hejmadi</author>
      <pubDate>Sun, 07 Feb 2021 09:15:25 +0000</pubDate>
      <link>https://dev.to/karan316/3-underrated-web-dev-youtubers-you-should-check-out-24pm</link>
      <guid>https://dev.to/karan316/3-underrated-web-dev-youtubers-you-should-check-out-24pm</guid>
      <description>&lt;p&gt;Many of us in the web dev community are familiar with teachers like Brad Traversy, Mosh, and Net Ninja. In this post, I will share 3 YouTubers who post quality web dev content with less than 100k subscribers. If you want to learn some advanced concepts in web technologies like react, node, etc. you might want to check them out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-jack-herrington" class="anchor"&gt;
  &lt;/a&gt;
  1) Jack Herrington
&lt;/h2&gt;

&lt;p&gt;I first saw Jack's channel in one of Brad's guest videos and the way he explained everything so crisply was really good for a channel of his size. He puts out advanced react content for eg. module federation using react, hooks using typescript, building chat apps, etc. &lt;/p&gt;

&lt;p&gt;Channel link: &lt;a href="https://www.youtube.com/user/jherr2006"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-devmentorlive" class="anchor"&gt;
  &lt;/a&gt;
  2) devmentorlive
&lt;/h2&gt;

&lt;p&gt;devmentorlive is an industry experienced software developer who does coding streams about react projects. His streams are usually an hour-long where he builds some custom react component or explains some new technology. At around 9k subs, this channel surely deserves more attention.&lt;/p&gt;

&lt;p&gt;Channel link: &lt;a href="https://www.youtube.com/c/devmentorlive/featured"&gt;devmentorlive&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-javascript-mastery" class="anchor"&gt;
  &lt;/a&gt;
  3) Javascript Mastery
&lt;/h2&gt;

&lt;p&gt;With around 80k subs, this channel isn't that small as the ones above but for the quality of videos that this channel has, one must check it out. He puts on videos mainly on big react projects like building an entire MERN stack app, eCommerce, chat applications, and plenty more. If you're someone who likes learning by building projects you can check his channel out.&lt;/p&gt;

&lt;p&gt;Channel link: &lt;a href="https://www.youtube.com/channel/UCmXmlB4-HJytD7wek0Uo97A"&gt;Javascript Mastery&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>useState() like a Pro ‚ú®</title>
      <author>Shubham Sananse</author>
      <pubDate>Sun, 07 Feb 2021 08:48:33 +0000</pubDate>
      <link>https://dev.to/shubham_sns/usestate-like-a-pro-1pbc</link>
      <guid>https://dev.to/shubham_sns/usestate-like-a-pro-1pbc</guid>
      <description>&lt;p&gt;This blog post covers all you need to know about the concept of a state and react &lt;code&gt;useState&lt;/code&gt; hook from basics to advanced patterns. This blog assumes that you know about react fundamentals like Component, props, and jsx.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;counter&lt;/code&gt; is the &lt;code&gt;hello world&lt;/code&gt; of state management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-state-and-why-do-we-need-state-management-in-react" class="anchor"&gt;
  &lt;/a&gt;
  What is a state and why do we need state management in React? ‚öõÔ∏è
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// State: a counter value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Action: code that causes an update to the state when something happens&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// View: the UI definition&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;as you can see in this example there three main parts to &lt;code&gt;Counter&lt;/code&gt; component&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;State&lt;/strong&gt; is the truth that drives our application&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;View&lt;/strong&gt; is UI based on the state&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Action&lt;/strong&gt; is an event that occurs in the application and changes the state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React uses the stateful values  &lt;em&gt;(which is generated by hook APIs like useState, useReducer)&lt;/em&gt;  to know when to update the UI (View) part of an application. Whenever this state value changes React will update the component so that the state of the UI is the same as the state of the Component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate-hook" class="anchor"&gt;
  &lt;/a&gt;
  useState Hook üé£
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is a function that accepts one argument as an initial value of any type for the state, and returns 2 elements in an array, first is the state value and the second is the updater function that we use to update the state value. This returned array is usually destructured so we can name the variables whatever we want but it is good practice and a common convention to prefix the &lt;code&gt;set&lt;/code&gt; in front of the updater function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// you can pass any data-type&lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// if you don't pass anything than value will be updated with undefined &lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// String&lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Number&lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// array &lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;share&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;üíó&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// null &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In our Counter component &lt;code&gt;0&lt;/code&gt; is the initial value for the state, and using destructuring we are naming our 2 variables &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;setCounter&lt;/code&gt;. &lt;code&gt;setCounter&lt;/code&gt; is used to update the counter value by 1 every time the button is clicked.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lazy-initialization-of-state" class="anchor"&gt;
  &lt;/a&gt;
  Lazy initialization of state ü¶•
&lt;/h2&gt;

&lt;p&gt;Every time React re-renders the component, &lt;code&gt;useState(initialState)&lt;/code&gt; is executed. if the initial state is some expensive function computation, e.g reading data from localStorage, mapping over some large amount of data, the instance with multiple methods ( e.g &lt;code&gt;DraftJs&lt;/code&gt; or &lt;code&gt;ThreeJs&lt;/code&gt; instance), then the component might face some performance issues.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// format : useState(() =&amp;gt; initalState) &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;we can use the &lt;strong&gt;lazy initalization&lt;/strong&gt; to avoid the performance bottleneck for this all you need to do is put your initial state in function and that's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-state-with-callback" class="anchor"&gt;
  &lt;/a&gt;
  Update the state with callback ü§ô
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;we have changed the increment function of the previous example, now we have added asynchronous behavior in our function what do you think the output will be?&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
Take a pause and think , &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Spoilers Ahead&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You would see that after clicking the button once, even though we have 2 &lt;code&gt;setCounter&lt;/code&gt; calls, we still get a new count updated with &lt;strong&gt;1 only&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-what-is-actually-happening" class="anchor"&gt;
  &lt;/a&gt;
  So what is actually happening?  ü§î
&lt;/h3&gt;

&lt;p&gt;The problem is that the second call to the &lt;code&gt;setCounter&lt;/code&gt; is getting the same counter value as the first one. here in the example, both the &lt;code&gt;setCounter&lt;/code&gt; got the value of counter as &lt;code&gt;0&lt;/code&gt; so they updated it to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-why-2nd-the-updater-is-getting-the-value-of-0" class="anchor"&gt;
  &lt;/a&gt;
  But why 2nd the updater is getting the value of 0? üòï
&lt;/h3&gt;

&lt;p&gt;For this, you need to understand how re-rendering actually works in React, We will not into the depths of this but in short re-rendering means if your state changes your whole component is replaced with the new one, In this example whole &lt;code&gt;Counter&lt;/code&gt; is called again and then it gets the new value. here we are using multiple consecutive updates and due to  &lt;a href="https://whatthefork.is/closure"&gt;&lt;em&gt;closure&lt;/em&gt;&lt;/a&gt; &lt;code&gt;setCounter&lt;/code&gt; has access to the &lt;code&gt;counter&lt;/code&gt; variable one we got from array destructuring which has a value of 0.&lt;/p&gt;

&lt;p&gt;In the example we have the initial value as &lt;code&gt;0&lt;/code&gt; when the button is clicked we update the value from 0 -&amp;gt; 1 but to get that updated state(1) react needs to re-render the component but here we are calling the &lt;code&gt;setCounter&lt;/code&gt; again to update counter with +1 and it gets counter as &lt;code&gt;0&lt;/code&gt; so after one second when it updates the value &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For most &lt;code&gt;async&lt;/code&gt; activities &lt;code&gt;useEffect&lt;/code&gt; would be a better choice. and for more complex states &lt;code&gt;useReducer&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#solution" class="anchor"&gt;
  &lt;/a&gt;
  Solution üî•
&lt;/h3&gt;

&lt;p&gt;When the new state is dependent on the previous state you can update the state with a callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// callback inside a updater function&lt;/span&gt;
      &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you would change the increment function with this new one you would have a reference to the internal state and not the closure value of state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usecases" class="anchor"&gt;
  &lt;/a&gt;
  Use-cases üíº
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// toggle a boolean&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Update an object &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentSize&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;currentSize&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="c1"&gt;// Update items in array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;push&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MEAN / MERN Stack 100+ Learning Resources {FREE}</title>
      <author>Rahul</author>
      <pubDate>Sun, 07 Feb 2021 06:14:33 +0000</pubDate>
      <link>https://dev.to/rahxuls/mean-mern-stack-100-learning-resources-free-3897</link>
      <guid>https://dev.to/rahxuls/mean-mern-stack-100-learning-resources-free-3897</guid>
      <description>&lt;p&gt;I have gathered all the resources that you will require to become a MERN or MEAN stack developer. All these resources will include Articles, Videos, Course, Websites, Tutorials, Books etc. And everything is FREE&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MERN - MongoDB, Express, React, NodeJS&lt;/li&gt;
&lt;li&gt;MEAN - MongoDB, Express, Angular, NodeJS&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ò¢ You should know the basics of HTML, CSS AND JS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#learn-mongodb" class="anchor"&gt;
  &lt;/a&gt;
  Learn MongoDB
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#courses" class="anchor"&gt;
  &lt;/a&gt;
  Courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://university.mongodb.com/courses/catalog"&gt;MongoDB University&lt;/a&gt; -&amp;gt; This website has many course for free that will definitely take you from Zero to Hero&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/mongodb-essentials/"&gt;Understanding the basics of MongoDB&lt;/a&gt; -&amp;gt; Udemy free course for learning the basics
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/server-side-nodejs"&gt;Server-side Development with NodeJS express and MongoDB&lt;/a&gt; - Coursera course starting from 7th Febüòâ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#blogs-tutorials-docs-ebooks" class="anchor"&gt;
  &lt;/a&gt;
  Blogs  /  Tutorials /  Docs /  eBooks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ü•É &lt;a href="https://www.guru99.com/mongodb-tutorials.html"&gt;Guru99 MongoDB in 7 days Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö &lt;a href="https://docs.mongodb.com/manual/"&gt;MongoDB Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ &lt;a href="https://www.openmymind.net/2011/3/28/The-Little-MongoDB-Book/"&gt;The little MongoDB book&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚è≤ &lt;a href="https://www.koderhq.com/tutorial/mongodb/"&gt;Intro to MongoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videos" class="anchor"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t4wPUQ5RElY"&gt;MongoDB tutorial Intellipat  2Hrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOFJ9JcVW9u4PlSWO-VFoao"&gt;MongoDB - noSql database&lt;/a&gt; [Playlist]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=-56x56UppqQ"&gt;MongoDB Crash Course&lt;/a&gt; by Traversy Media [40mins Apprx]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLS1QulWo1RIZtR6bncmSaH8fB81oRl6MP"&gt;MongoDB Tutorial for beginners&lt;/a&gt; Playlist. Contains small videos and informative&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jpvoYriLI0bY8DOgWZfi6u"&gt;MongoDB Tutorial for beginners&lt;/a&gt; Playlist. &lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-express" class="anchor"&gt;
  &lt;/a&gt;
  Learn Express
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#%E2%96%B6-videos" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∂ Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L72fhGm1tfE"&gt;ExpressJS Crash Course by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lab.github.com/everydeveloper/introduction-to-node-with-express"&gt;Introduction to Node with Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-ebooks-blogs" class="anchor"&gt;
  &lt;/a&gt;
  Tutorials / eBooks / Blogs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ü¶ø&lt;a href="https://www.tutorialspoint.com/expressjs/index.htm"&gt;Tutorials Point - ExpressJS tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://www.pdfdrive.com/expressjs-guide-leanpub-e5912929.html"&gt;MongoDB Guide eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://www.hacksparrow.com/webdev/express"&gt;Hacksparrow Blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://www.rosehosting.com/blog/tag/express/"&gt;RoseHosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìñ&lt;a href="https://codewithhugo.com/tags/express/"&gt;Code with Hugo - Express&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://flaviocopes.com/page/express-handbook"&gt;Express Handbook by Flavio&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-react" class="anchor"&gt;
  &lt;/a&gt;
  Learn React
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#blogs-ebooks-tutorials-docs" class="anchor"&gt;
  &lt;/a&gt;
  Blogs / eBooks / Tutorials / Docs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/series/what-the-react-ckj29pch203pw25s1hkr8as0w"&gt;What the React - Blog Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hello-world.html"&gt;React DOCS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/jsx-in-depth.html"&gt;JSX in Depts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactpatterns.com/"&gt;React Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 JavaScript Concepts Every DEV Should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;High Order Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;Refs and DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/courses/getting-started-with-redux"&gt;EggheadIO Redux Course by Dan Abarmov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/react-composition/"&gt;React Compositon - Flavio Copes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/page/react-handbook/"&gt;React Handbook by Flavio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#course" class="anchor"&gt;
  &lt;/a&gt;
  Course
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://egghead.io/lessons/react-introduction-to-the-beginner-s-guide-to-reactjs"&gt;EggheadIO React for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ui.dev/free-react-bootcamp/"&gt;Free React Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnreact"&gt;Learn React for free - Scrima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/react-basic-in-just-1-hour/?LSNPUBID=JVFxdTr9V80&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranMID=39197&amp;amp;ranSiteID=JVFxdTr9V80-p4Roao8.OesVvhckLdQGBA&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt;React basics in 1 hr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/react-tutorial/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-IC2uTX64TKt5E9lwqC47fg&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt; React JS Frontend Web Development for Beginners &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/learning-react-and-redux-decoupling-with-stateless-components/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-FG1Z7z7TrlLvROsK9JIUJw&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;React and Redux MASTERCLASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/front-end-libraries/react/"&gt;FreeCodeCamp React Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-cheatsheets" class="anchor"&gt;
  &lt;/a&gt;
  React cheatsheets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devhints.io/react"&gt;Ultimate React cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-interview-questions" class="anchor"&gt;
  &lt;/a&gt;
  React Interview Questions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/react/interview-questions"&gt;13 Essential React Interview Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sudheerj/reactjs-interview-questions"&gt;List of React interview Questions and Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-styling" class="anchor"&gt;
  &lt;/a&gt;
  React Styling
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/styled-components/styled-components"&gt;styled-components&lt;/a&gt; - Visual primitives for the component age&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/emotion-js/emotion"&gt;emotion&lt;/a&gt; - Library designed for writing CSS styles with JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FormidableLabs/radium"&gt;radium&lt;/a&gt; - Tool for React component styling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-and-typescript" class="anchor"&gt;
  &lt;/a&gt;
  React and TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/react-&amp;amp;-webpack.html"&gt;TypeScript, React and Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/jsx.html"&gt;JSX in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet"&gt;Cheatsheets for experienced React developers getting started with TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactbyexample.github.io/"&gt;React by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#learn-angular" class="anchor"&gt;
  &lt;/a&gt;
  Learn Angular
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#course-videos" class="anchor"&gt;
  &lt;/a&gt;
  Course / Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/angular-for-beginners-course/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-agWnLiSdmEvistlFmFWgmA&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;Angular for beginners Course + Free eBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i9MHigUZKEM"&gt;AngularJS fundamentals in 60mins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Fdf5aTYRW0E"&gt;Anngular crash course by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/want-to-learn-angular-heres-our-free-33-part-course-by-dan-wahlin-fc2ff27ab451/"&gt;33-part course Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/angularjs"&gt;AngularJS on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-docs-blogs-ebooks" class="anchor"&gt;
  &lt;/a&gt;
  Tutorials / Docs / Blogs / eBooks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/angular/"&gt;W3Schools Angular Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thinkster.io/a-better-way-to-learn-angularjs"&gt;A better way to learn AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgechev.com/"&gt;Minko Gechev Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;üìö&lt;a href="https://www.syncfusion.com/ebooks/angular-succinctly/introduction"&gt;Angular Succinctly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecraft.tv/courses/"&gt;Angular from theory to courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cheatsheets" class="anchor"&gt;
  &lt;/a&gt;
  Cheatsheets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/guide/cheatsheet"&gt;Angular CheatSheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Subscribe to the Weekly Newsletter &lt;a href="https://mailchi.mp/9f73b65b9c38/rahulism"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#learn-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Learn NODEJS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webapplog.com/node-js-fundamentals-a-concise-overview-of-the-main-concepts"&gt;Node.js FUNdamentals: A Concise Overview of The Main Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js"&gt;Why The Hell Would I Use Node.js? A Case-by-Case Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pettergraff.blogspot.com/2013/01/why-node.html"&gt;Why I use Node.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://webapplog.com/php-vs-node-js/"&gt;PHP vs. Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/"&gt;Dismantling the Monoliths&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/"&gt;Node.js at PayPal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodejs.org/api/"&gt;Official Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodejs.org/api/modules.html"&gt;Node.js Modules Official Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://howtonode.org/managing-module-dependencies"&gt;Managing module dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://code.tutsplus.com/tutorials/using-nodes-event-module--net-35941"&gt;Using Node's Event Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://openmymind.net/2012/2/3/Node-Require-and-Exports/"&gt;Understanding exports vs. module.exports&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jsz4LDYc6kv3ymONOKxwBU"&gt;Node.js Tutorial&lt;/a&gt; - Node.js Crash Course Tutorial by Net Ninja.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/azat-co/you-dont-know-node"&gt;You Don't Know Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/maxogden/art-of-node#readme"&gt;The Art of Node&lt;/a&gt; - Introductory tutorial covering the basics. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodeschool.io"&gt;NodeSchool&lt;/a&gt; - Interactive self guided workshops you can also do on your own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nodepatternsbooks.com"&gt;Node Patterns&lt;/a&gt; - Short books about code and networking patterns related to Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://learnnode.com"&gt;Learn Node&lt;/a&gt; - A premium training course to learn to build apps with Node.js, Express, MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://thenodeway.io"&gt;The Node Way&lt;/a&gt; - An entire philosophy of Node.js best practices and guiding principles exists for writing maintainable modules, scalable applications, and code that is actually pleasant to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/express-js-security-tips/"&gt;Express.js Security Tips&lt;/a&gt; - How You Can Save and Secure Your App.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome-nodejs"&gt;Awesome Nodejs&lt;/a&gt; - Delightful Node.js packages and resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;nodebestpractices&lt;/a&gt; - Huge list of best practices for building node apps. Important for big projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#misc-resources" class="anchor"&gt;
  &lt;/a&gt;
  üìñMISC RESOURCESüòâ
&lt;/h2&gt;

&lt;p&gt;(THIS HAS ALL THE RESOURCES OTHER THEN THE ABOVE ONES, Some fundamentals and important)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-a-bit-advanced" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript (A bit advanced)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript30.com/"&gt;30 Days VanillaJS project challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rithmschool.com/courses/advanced-javascript"&gt;Advanced JavaScript Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=4mf_yNLlgic"&gt;Become a JavaScript Console Power-User&lt;/a&gt; - Introduction to the browsers JavaScript console.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HF1luRD4Qmk"&gt;Debugging The Web&lt;/a&gt; - Learn state of the art in debugging using Chrome dev tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udacity.com/course/javascript-basics--ud804"&gt;Udacity JavaScript Basics&lt;/a&gt; - They also offer more advanced courses.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codeschool.com/learn/javascript"&gt;Code School&lt;/a&gt; - From Basics to Best Practices. Different courses related to JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://reactivex.io/learnrx/"&gt;Functional programming&lt;/a&gt; - Learn basic principles of functional programming in an interactive way by using map, filter, concatAll, reduce and zip.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;ABOVE ARE THE RESOURCES I USE (AND WILL USE) IN MY LEARNING. I HOPE YOU'LL FIND THEM HELPFUL&lt;/p&gt;

&lt;p&gt;Resources for Front-end Development refer to this post &lt;a href="https://dev.to/rahxuls/free-ultimate-resources-for-front-end-development-in-2021-giveaway-3838"&gt;Ultimate resource for Front-End Development&lt;/a&gt; &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#giveaway" class="anchor"&gt;
  &lt;/a&gt;
  ü§©GIVEAWAYü•Ç
&lt;/h1&gt;

&lt;p&gt;I've crossed over 100k+ views 2 weeks before and I'm doing a giveaway of any Udemy course you need. &lt;/p&gt;

&lt;p&gt;Loading‚Ä¶&lt;/p&gt;




&lt;p&gt;Don't forget to subscribe to &lt;a href="https://www.youtube.com/channel/UC3z___k6TPZyJT-5lTaYNMA"&gt;POPCORN EDITZ&lt;/a&gt; (MUST)&lt;/p&gt;

&lt;p&gt;ü§©THANK YOUü•Ç&lt;/p&gt;

&lt;p&gt;Get weekly newsletter of amazing articles I posted this week and some offers or announcement. Subscribe from &lt;a href="https://mailchi.mp/9f73b65b9c38/rahulism"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rahxuls"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--finLNCLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rahulism1/image/upload/v1608182430/bmc_nbxakd.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding Ruby - Blocks, Procs, and Lambdas</title>
      <author>Brandon Weaver</author>
      <pubDate>Sun, 07 Feb 2021 05:29:05 +0000</pubDate>
      <link>https://dev.to/baweaver/understanding-ruby-blocks-procs-and-lambdas-24o0</link>
      <guid>https://dev.to/baweaver/understanding-ruby-blocks-procs-and-lambdas-24o0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Ruby is a language that uses multiple paradigms of programming, most usually Object Oriented and Functional, and with its functional nature comes the idea of functions.&lt;/p&gt;

&lt;p&gt;Ruby has three main types of functions it uses: Blocks, Procs, and Lambdas.&lt;/p&gt;

&lt;p&gt;This post will take a look at all of them, where you might find them, and things to watch out for when using each of them.&lt;/p&gt;

&lt;p&gt;The more you've used languages like Java and C++ the less likely you are to have encountered some of these ideas, but if you've spent time around Javascript a lot of this is going to look very familiar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difficulty" class="anchor"&gt;
  &lt;/a&gt;
  Difficulty
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Foundational&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No prerequisite knowledge needed. This post focuses on foundational and fundamental knowledge for Ruby programmers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blocks-procs-and-lambdas" class="anchor"&gt;
  &lt;/a&gt;
  Blocks, Procs, and Lambdas
&lt;/h1&gt;

&lt;p&gt;To start out with it should be noted that each of these three concepts are anonymous functions. In fact I've tended to call them &lt;em&gt;Block Functions&lt;/em&gt;, &lt;em&gt;Proc Functions&lt;/em&gt;, and &lt;em&gt;Lambda Functions&lt;/em&gt; to remind myself there's not really anything special about them beyond just being functions which act slightly different.&lt;/p&gt;

&lt;p&gt;That all said, what exactly is a function, and why do we care about them in Ruby? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea-of-functions" class="anchor"&gt;
  &lt;/a&gt;
  The Idea of Functions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-anonymous-function" class="anchor"&gt;
  &lt;/a&gt;
  What is an Anonymous Function?
&lt;/h3&gt;

&lt;p&gt;Why anonymous? In Javascript the difference is that one has a name and the other doesn't:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anonymousAdder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;anonymousAdder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 3&lt;/span&gt;

&lt;span class="nx"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In Ruby we don't really have an idea of named functions as much as methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above is the one-line method syntax introduced in Ruby 3.0, which is great for short methods which focus on returning results and are on the shorter side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...and for anonymous functions we have things like lambdas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This syntax, for reference, is known as "stabby lambda". The arguments are to the right of the arrow and the body of the function is between the braces. Return values are implied from the last expression evaluated, &lt;code&gt;a + b&lt;/code&gt; in this case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When does this come up in Ruby? Well it turns out a lot, because &lt;em&gt;Block Functions&lt;/em&gt; are also anonymous. Consider &lt;code&gt;map&lt;/code&gt;, the idea of applying a function to every item in a list and returning a new list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows us to express the idea of doubling every element in a list in a concise way. If we were to write that in the same way as Java or C might before modern versions introduced &lt;code&gt;map&lt;/code&gt; and other functional concepts were introduced, it'd look more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Avoid using &lt;code&gt;for ... in&lt;/code&gt; in Ruby, prefer &lt;code&gt;each&lt;/code&gt; which we will mention in a moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above anonymous function allows us to abstract the entire idea of transforming elements into one line, and with that comes a substantial amount of power.&lt;/p&gt;

&lt;p&gt;We won't get into all the fun things we can do with functions in this article, but rest assured we'll be covering it soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-functions-used" class="anchor"&gt;
  &lt;/a&gt;
  Where Are Functions Used?
&lt;/h3&gt;

&lt;p&gt;In Ruby all over the place. Consider &lt;code&gt;each&lt;/code&gt;, the way Ruby prefers to go over each element of a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# STDOUT: 1&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 3&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;STDOUT&lt;/code&gt; represents the standard output, or typically your console screen. &lt;code&gt;=&amp;gt;&lt;/code&gt; represents a return value, and &lt;code&gt;each&lt;/code&gt; returns the original &lt;code&gt;Array&lt;/code&gt;. I comment these out (&lt;code&gt;#&lt;/code&gt; for comment) just in case you copy that while trying out code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That right there? Well that's a &lt;em&gt;Block Function&lt;/em&gt;. It goes over every element of a list and gives that value to the function with the name of &lt;code&gt;v&lt;/code&gt;. Function arguments are put in pipes (&lt;code&gt;|&lt;/code&gt;) and separated by commas (&lt;code&gt;,&lt;/code&gt;) if there are many of them. The function itself is surrounded in brackets (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In this particular function we're outputting the value of &lt;code&gt;v&lt;/code&gt; to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You might also see a &lt;em&gt;Block Function&lt;/em&gt; look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# STDOUT: 1&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 3&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;They both do the same thing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nuances-of-braces-vs-do-end" class="anchor"&gt;
  &lt;/a&gt;
  Nuances of Braces vs Do / End
&lt;/h4&gt;

&lt;p&gt;Typically in Ruby people prefer to use &lt;code&gt;{}&lt;/code&gt; for one-line functions and &lt;code&gt;do ... end&lt;/code&gt; for multi-line functions. Myself? I tend to prefer the &lt;a href="https://github.com/rubocop-hq/ruby-style-guide/issues/162"&gt;Weirich method&lt;/a&gt; instead which signifies that &lt;code&gt;{}&lt;/code&gt; is used for functions whose primary role is to return a value, and &lt;code&gt;do ... end&lt;/code&gt; is to execute side effects.&lt;/p&gt;

&lt;p&gt;Either is fine, but be sure to stay consistent in whichever one you choose in your codebase, and even more-so follow the semantics and rules of established codebases rather than impose your own opinions on them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functional-differences-and-syntax-issues" class="anchor"&gt;
  &lt;/a&gt;
  Functional Differences and Syntax Issues
&lt;/h4&gt;

&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; some differences with parenthesis and how each evaluates them which you may run into. Consider RSpec code here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'something fun'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'something fun'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# SyntaxError (1337: syntax error, unexpected '{', expecting end-of-input)&lt;/span&gt;
&lt;span class="c1"&gt;# describe 'something fun' {&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The second will syntax error while the first will work just fine. That's because to the second it's ambiguous whether that's a &lt;code&gt;Hash&lt;/code&gt; argument or a function, causing Ruby to throw an error. If you put parens around &lt;code&gt;'something fun'&lt;/code&gt; it'll work just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'something fun'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...but most prefer &lt;code&gt;do ... end&lt;/code&gt; for RSpec code, as do I.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Calling a Function
&lt;/h3&gt;

&lt;p&gt;So how does one call a function versus a method? Well there are a few ways, and we'll focus again on &lt;em&gt;Lambda Functions&lt;/em&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are a few others like &lt;code&gt;===&lt;/code&gt; that only work with one-argument functions unless you do some really nasty things like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ArgumentError (wrong number of arguments (given 1, expected 2))&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# SyntaxError ((irb):157: syntax error, unexpected ',', expecting `end')&lt;/span&gt;

&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would not suggest using that, nor would I suggest explicitly using &lt;code&gt;===&lt;/code&gt; like this either. If you want more information on &lt;code&gt;===&lt;/code&gt; consider giving &lt;a href="https://dev.to/baweaver/understanding-ruby-triple-equals-2p9c"&gt;Understanding Ruby - Triple Equals&lt;/a&gt; a read.&lt;/p&gt;

&lt;p&gt;There's one last way to call a function, &lt;code&gt;yield&lt;/code&gt;, but we'll save that for the moment and explain it along with the next section on blocks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#function-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Function Arguments
&lt;/h4&gt;

&lt;p&gt;Now here's an interesting one that isn't mentioned very often: All valid method arguments are also valid function arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all_types_of_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="ss"&gt;e: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That means you can very validly do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lambda_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;lambda_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Think how that might be fun with default arguments, and especially keyword arguments, as a fun little experiment potential for later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ampersand-raw-amp-endraw-and-raw-toproc-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) and &lt;code&gt;to_proc&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;You may well see code like this in Ruby:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:even?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Searching for &lt;code&gt;&amp;amp;&lt;/code&gt; can be difficult, so let's explain it here. &lt;code&gt;&amp;amp;&lt;/code&gt; calls &lt;code&gt;to_proc&lt;/code&gt; on whatever is after it. In the case of a &lt;code&gt;Symbol&lt;/code&gt; here it calls &lt;code&gt;Symbol#to_proc&lt;/code&gt; (the &lt;code&gt;to_proc&lt;/code&gt; method on an instance of the &lt;code&gt;Symbol&lt;/code&gt; class.)&lt;/p&gt;

&lt;p&gt;It effectively generates code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...where the &lt;code&gt;Symbol&lt;/code&gt; that's coerced into a &lt;em&gt;Proc Function&lt;/em&gt; acts like a method to be called on whatever is passed into the function. For &lt;code&gt;select&lt;/code&gt; that would be the numbers &lt;code&gt;1, 2, 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also tells Ruby to treat this argument as a &lt;em&gt;Block Function&lt;/em&gt; for the sake of passing it to the underlying method, which we'll get to in a moment in our section on &lt;em&gt;Block Functions&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; is syntactic sugar for &lt;code&gt;to_proc&lt;/code&gt;, but does not work outside of this context. You can't do this for instance: &lt;code&gt;age_function = &amp;amp;:age&lt;/code&gt;. It will result in a Syntax Error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#types-of-functions" class="anchor"&gt;
  &lt;/a&gt;
  Types of Functions
&lt;/h2&gt;

&lt;p&gt;Now that we have some groundwork laid, let's take a look at the three types of functions: Block functions, &lt;em&gt;Proc Functions&lt;/em&gt;, and Lambda functions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Technically&lt;/em&gt; &lt;code&gt;method&lt;/code&gt; is another type of function, but we'll skip that section for this article and save it for a more detailed writeup later on Ruby methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#block-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Block Functions&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The first is likely the most familiar, and most likely to show up in your day to day Ruby code: The &lt;em&gt;Block Function&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As you saw earlier with &lt;code&gt;each&lt;/code&gt; it takes a &lt;em&gt;Block Function&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 1&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 3&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How do we define a function which takes a &lt;em&gt;Block Function&lt;/em&gt; like this? Well let's take a look at a few ways.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explicit-block-functions" class="anchor"&gt;
  &lt;/a&gt;
  Explicit &lt;em&gt;Block Functions&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The first way is to explicitly tell Ruby we are passing a function to a method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Functions are prefixed by &lt;code&gt;&amp;amp;&lt;/code&gt;. Frequently you will see this called &lt;code&gt;&amp;amp;block&lt;/code&gt;, but for me I tend to prefer &lt;code&gt;&amp;amp;function&lt;/code&gt; to clarify the intent that this is a function I intend to use. Frequently I abbreviate it as &lt;code&gt;&amp;amp;fn&lt;/code&gt;, but that's just my preference.&lt;/p&gt;

&lt;p&gt;For this new &lt;code&gt;map&lt;/code&gt; method we're iterating over each item in the list and putting those items into the &lt;code&gt;new_list&lt;/code&gt; after we call &lt;code&gt;function&lt;/code&gt; on each of them to transform the values. After that's done we return back the &lt;code&gt;new_list&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;My preference is for explicit functions because they let me know from the arguments of the method that it takes a function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implicit-block-functions" class="anchor"&gt;
  &lt;/a&gt;
  Implicit &lt;em&gt;Block Functions&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The next way is implied, and uses the &lt;code&gt;yield&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map_implied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;map_implied&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; is interesting here as it can be present any number of times in a method. In this case we only want it mentioned once in our iteration of the original list. We could technically do this too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one_two_three&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;one_two_three&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 3&lt;/span&gt;
&lt;span class="c1"&gt;# STDOUT: 4&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Though I have not found a use for this myself in my code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; is a keyword that yields a value to the implied function the method was called with. Once it runs out of &lt;code&gt;yield&lt;/code&gt;s it stops calling the function.&lt;/p&gt;

&lt;p&gt;Personally I do not like this as it's more confusing to me than the above, but you may well see this pattern in other Ruby code, so it's good to know it exists.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ampersand-raw-amp-endraw-and-block-functions" class="anchor"&gt;
  &lt;/a&gt;
  Ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) and &lt;em&gt;Block Functions&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;So how does Ruby know this is a function to pass to a method? In this case it's implied:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...but in this case with a lambda not quite so much:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;add_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ArgumentError (wrong number of arguments (given 2, expected 1))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's treated as an additional argument unless we prefix it with &lt;code&gt;&amp;amp;&lt;/code&gt; to tell the method that this is a &lt;em&gt;Block Function&lt;/em&gt; it needs to treat as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;add_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#block-given-and-the-missing-block" class="anchor"&gt;
  &lt;/a&gt;
  Block Given and the Missing Block
&lt;/h4&gt;

&lt;p&gt;So what happens if we forget the &lt;em&gt;Block Function&lt;/em&gt; then? In the case of our explicit style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# NoMethodError (undefined method `call' for nil:NilClass)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For our implicit one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map_implied&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# LocalJumpError (no block given (yield))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can guard against this by checking if a &lt;em&gt;Block Function&lt;/em&gt; has been given to the method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;block_given?&lt;/span&gt;

  &lt;span class="c1"&gt;# ...rest of implementation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case if we forget the &lt;em&gt;Block Function&lt;/em&gt; it returns the initial list. For Ruby itself it returns an &lt;code&gt;Enumerator&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Enumerator: [1, 2, 3]:map&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll get into &lt;code&gt;Enumerator&lt;/code&gt;s another day though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proc-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Proc Functions&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The next type of function we'll look into are &lt;em&gt;Proc Functions&lt;/em&gt;. You may have noticed &lt;code&gt;to_proc&lt;/code&gt; before, but perhaps amusingly you could return a &lt;em&gt;Lambda Function&lt;/em&gt; from that.&lt;/p&gt;

&lt;p&gt;It should be noted that &lt;em&gt;Proc Functions&lt;/em&gt; are the base for &lt;em&gt;Lambda Functions&lt;/em&gt;, and why I'm covering them first.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Proc Function&lt;/em&gt; can be defined in a few ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5&lt;/span&gt;

&lt;span class="n"&gt;adds_three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#behavior-with-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Behavior with Arguments
&lt;/h4&gt;

&lt;p&gt;What's interesting about a &lt;em&gt;Proc Function&lt;/em&gt; is that they don't care about the arguments passed to them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only reason it would is if the first argument is missing, and only because that causes an error inside the function itself. They can be quite lazy like that. This is one crucial reason why I tend to prefer &lt;em&gt;Lambda Functions&lt;/em&gt;, but we'll get into that in a moment.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#behavior-with-return" class="anchor"&gt;
  &lt;/a&gt;
  Behavior with Return
&lt;/h4&gt;

&lt;p&gt;This is another interesting case. If we use &lt;code&gt;return&lt;/code&gt; inside of a &lt;em&gt;Proc Function&lt;/em&gt; it can do some bad things:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# LocalJumpError (unexpected return)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...but if we did that inside of a method instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 8, or 4 + 4, or (1 + 3) + (1 + 3)&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;return&lt;/code&gt; actually broke out of the method itself instead of returning a value from the function. If we wanted behavior like &lt;code&gt;return&lt;/code&gt; without this we could use &lt;code&gt;next&lt;/code&gt; instead, but this is another reason I tend to prefer &lt;em&gt;Lambda Functions&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Lambda Functions&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The next type of function we'll look into are &lt;em&gt;Lambda Functions&lt;/em&gt;. To start with remember a &lt;em&gt;Lambda Function&lt;/em&gt; looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...but it can also look like this, though it's much rarer syntax to see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Interestingly &lt;em&gt;Lambda Functions&lt;/em&gt; are a type of &lt;em&gt;Proc Function&lt;/em&gt;, try it yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Proc:0x00007ff3d88c30d8 (irb):231 (lambda)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I keep using different argument names as a reminder that the names are arbitrary and could be anything as long as it's a valid variable name. If you want another interesting fact any valid method argument is also a valid argument to any function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#behavior-with-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Behavior with Arguments
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Lambda Functions&lt;/em&gt;, unlike &lt;em&gt;Proc Functions&lt;/em&gt;, are very strict about their arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;adds_four&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;adds_four&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ArgumentError (wrong number of arguments (given 3, expected 1))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;They behave much more like methods in this, and can lead to less confusing errors later.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#behavior-with-return" class="anchor"&gt;
  &lt;/a&gt;
  Behavior with Return
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Lambda Functions&lt;/em&gt; will treat &lt;code&gt;return&lt;/code&gt; as a local &lt;code&gt;return&lt;/code&gt; rather than trying to return from the outer context of the method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="n"&gt;adds_three_unless_gt_three&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="n"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That means both executions of the function will &lt;code&gt;return&lt;/code&gt; the value &lt;code&gt;5&lt;/code&gt; instead of returning &lt;code&gt;5&lt;/code&gt; for the entire function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;This was a fairly broad overview of the types of functions in Ruby, but does not get too much into why you'd want to use them. Rest assured there will be future posts covering this as well.&lt;/p&gt;

&lt;p&gt;In Ruby there are several ways to do one thing, and because of that it's useful to know what syntax does what, especially early on. Personally I prefer to pare down the syntax in certain areas, like I tend to use &lt;em&gt;Lambda Functions&lt;/em&gt; almost exclusively over &lt;em&gt;Proc Functions&lt;/em&gt;, and can't think of a case where I would need to use them instead.&lt;/p&gt;

&lt;p&gt;The real fun of functions starts when you start seeing what you can do with them. The following posts on &lt;code&gt;Enumerable&lt;/code&gt; and Functional Programming will be very interesting on that note, but until then that's all I have for today.&lt;/p&gt;

&lt;p&gt;Want to keep up to date on what I'm writing and working on? &lt;a href="https://buttondown.email/baweaver/"&gt;Take a look at my new newsletter: The Lapidary Lemur&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>functional</category>
    </item>
    <item>
      <title>How to Become a WordPress Developer in 2021</title>
      <author>Al Nahian</author>
      <pubDate>Sun, 07 Feb 2021 04:29:09 +0000</pubDate>
      <link>https://dev.to/alnahian2003/how-to-become-a-wordpress-developer-in-2021-5eib</link>
      <guid>https://dev.to/alnahian2003/how-to-become-a-wordpress-developer-in-2021-5eib</guid>
      <description>&lt;p&gt;Today we'll be learning, &lt;strong&gt;How To Become a WordPress Developer in 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we are going to focus on the main fundamentals and core things. Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bookmark this Post to Read Later.&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-main-steps" class="anchor"&gt;
  &lt;/a&gt;
  #Our Main Steps
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-goal" class="anchor"&gt;
  &lt;/a&gt;
  1. Setting Goal
&lt;/h3&gt;

&lt;p&gt;In this beginning step, we will be setting up our ultimate goal for learning. Without a goal, nothing can reach its destination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-what-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  2. What to Learn
&lt;/h3&gt;

&lt;p&gt;There are so many ways, options to become a developer. More specifically, to become a WordPress Developer.&lt;br&gt;
So we have to choose wisely, what to learn?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-where-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  3. Where to Learn?
&lt;/h3&gt;

&lt;p&gt;Too many resources are often a problem. Many of us couldn't find out, Where to Learn?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-how-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  4. How to Learn?
&lt;/h3&gt;

&lt;p&gt;Don't just watch or read, try implementing what you've learned already.&lt;br&gt;
In this step, we'll discuss in detail, How to learn?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-career" class="anchor"&gt;
  &lt;/a&gt;
  5. Career
&lt;/h3&gt;

&lt;p&gt;Believe it or not, most of the good and skilled programmer earns a huge amount of money daily, monthly or yearly.&lt;br&gt;
In this step, we will talk about love aka money. That's fun!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-big-plan" class="anchor"&gt;
  &lt;/a&gt;
  6. Big Plan
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúPlans are nothing; planning is everything.‚Äù&lt;br&gt;
‚Äï Dwight D.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This quote is saying more than a thousand words about planning something.&lt;br&gt;
So In this step, we will talk about how to Plan BIG, Real BIG!&lt;/p&gt;




&lt;p&gt;Now, I explained well and detailed the topics shown above. Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-goal" class="anchor"&gt;
  &lt;/a&gt;
  #Setting Goal
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#-set-our-mission" class="anchor"&gt;
  &lt;/a&gt;
  ‚Ä¢ Set Our Mission.
&lt;/h4&gt;

&lt;p&gt;First, we'll learn Basic Web Design.&lt;br&gt;
After learning basic Programming, we'll step into learning WordPress Development so that we can earn financial freedom.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-set-our-vision" class="anchor"&gt;
  &lt;/a&gt;
  ‚Ä¢ Set Our Vision.
&lt;/h4&gt;

&lt;p&gt;After gaining financial freedom, we will Dream Big!&lt;br&gt;
Then we will try to introduce ourselves to the next level of WordPress Development.&lt;/p&gt;

&lt;p&gt;We can dominate the world through our skills and knowledge!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  #What To Learn?
&lt;/h2&gt;

&lt;p&gt;There are so many technologies ahead, so you have to go on one by one little by little.&lt;/p&gt;

&lt;p&gt;Let's see what to learn:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-html5" class="anchor"&gt;
  &lt;/a&gt;
  1. HTML5.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#2-css3" class="anchor"&gt;
  &lt;/a&gt;
  2. CSS3.
&lt;/h6&gt;

&lt;p&gt;‚Äî Flexbox.&lt;br&gt;
‚Äî Grid.&lt;br&gt;
‚Äî Advanced CSS.&lt;br&gt;
‚Äî Complex Layout Building and many more.&lt;br&gt;
‚Äî Learn Basic SASS.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-responsive-web-design" class="anchor"&gt;
  &lt;/a&gt;
  3. Responsive Web Design.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#4-git-amp-github" class="anchor"&gt;
  &lt;/a&gt;
  4. Git &amp;amp; Github.
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#5-javascript-basic-to-intermediate" class="anchor"&gt;
  &lt;/a&gt;
  5. JavaScript Basic to Intermediate.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#6-basic-problem-solving-with-javascript" class="anchor"&gt;
  &lt;/a&gt;
  6. Basic Problem Solving with JavaScript.
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#7-jquery-and-jquery-plugins-some-must-learn-jquery-plugins-enlisted-at-the-end-of-the-post" class="anchor"&gt;
  &lt;/a&gt;
  7. jQuery and jQuery Plugins (Some must learn jQuery Plugins enlisted at the end of the post).
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#8-basic-to-advanced-bootstrap-v4xxx-v5xxx" class="anchor"&gt;
  &lt;/a&gt;
  8. Basic to Advanced Bootstrap (v4.xxx ‚Äî v5.xxx).
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#9-basic-wordpress" class="anchor"&gt;
  &lt;/a&gt;
  9. Basic WordPress.
&lt;/h5&gt;

&lt;p&gt;‚Äî Understanding the Web Hosting, cPanel, WebMail, etc.&lt;br&gt;
‚Äî Basic Fundamentals &amp;amp; Installation.&lt;br&gt;
‚Äî Exploring the WordPress Dashboard and many more.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#10-free-amp-premium-wordpress-themes-customizations" class="anchor"&gt;
  &lt;/a&gt;
  10. Free &amp;amp; Premium WordPress Themes Customizations
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#11-play-with-free-amp-premium-wordpress-plugins-to-understand-how-they-work" class="anchor"&gt;
  &lt;/a&gt;
  11. Play with Free &amp;amp; Premium WordPress Plugins to understand how they work.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#12-basic-php-fundamentals" class="anchor"&gt;
  &lt;/a&gt;
  12. Basic &lt;a href="https://dev.to/alnahian2003/what-you-should-learn-in-php-fundamentals-5ccb"&gt;PHP Fundamentals.&lt;/a&gt;
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#13-basic-to-intermediate-php-object-orianted-programming-oop" class="anchor"&gt;
  &lt;/a&gt;
  13. Basic to Intermediate PHP Object Orianted Programming (OOP).
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#14-basic-wordpress-theme-development" class="anchor"&gt;
  &lt;/a&gt;
  14. Basic WordPress Theme Development.
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#15-basic-to-advanced-laravel" class="anchor"&gt;
  &lt;/a&gt;
  15. Basic to Advanced Laravel.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#16-advanced-wordpress-theme-development" class="anchor"&gt;
  &lt;/a&gt;
  16. Advanced WordPress Theme Development.
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#17-basic-to-advanced-wordpress-plugin-development" class="anchor"&gt;
  &lt;/a&gt;
  17. Basic to Advanced WordPress Plugin Development.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#18-wordpress-page-builder-widgets-development" class="anchor"&gt;
  &lt;/a&gt;
  18. WordPress Page Builder Widgets Development.
&lt;/h6&gt;

&lt;h5&gt;
  &lt;a href="#19-skill-up-your-communicative-english-improve-spoken-english-optional" class="anchor"&gt;
  &lt;/a&gt;
  19. Skill Up Your Communicative English, Improve Spoken English. (Optional)
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#20-finally-try-your-luck-on-international-freelance-marketplaces-fiverr-upwork-freelancercom-etc" class="anchor"&gt;
  &lt;/a&gt;
  20. Finally Try Your Luck on International Freelance Marketplaces (Fiverr, Upwork, Freelancer.com, etc)
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#where-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  #Where to Learn?
&lt;/h2&gt;

&lt;p&gt;Google, YouTube, and the entire Internet is our big companion in the long path of skill development.&lt;/p&gt;

&lt;p&gt;Don't ask me to suggest some YouTube channel or any specific course, because it's your job to find the right resource for you!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Good Programmer is also Good at Googling.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  #How to Learn?
&lt;/h2&gt;

&lt;p&gt;The best way to learn is to apply.&lt;br&gt;
Consequently,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn The Fundamentals very DEEPLY.&lt;/li&gt;
&lt;li&gt;Create Projects.&lt;/li&gt;
&lt;li&gt;Just Create Projects.&lt;/li&gt;
&lt;li&gt;Never Stop Creating Projects Until You‚Äôre Having a Good Understanding in Fundamentals.&lt;/li&gt;
&lt;li&gt;Don‚Äôt Just Watch Videos and Videos. Try to Apply What You‚Äôve Learned.&lt;/li&gt;
&lt;li&gt;Read and Write Appropriate Articles.&lt;/li&gt;
&lt;li&gt;Be Consistent, Never Give Up. Don‚Äôt be Greedy of Money!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#career" class="anchor"&gt;
  &lt;/a&gt;
  #Career
&lt;/h2&gt;

&lt;p&gt;So Finally, we‚Äôve learned enough, we‚Äôve gained enough, we‚Äôve done enough. So now it‚Äôs time to think about the &lt;strong&gt;Money &amp;amp; Career&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how you can apply yourself for building a good career with what you‚Äôve learned.&lt;/p&gt;

&lt;p&gt;Before applying yourself, just keep that in mind, &lt;strong&gt;Possibilities are Just Imaginations!&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#real-job" class="anchor"&gt;
  &lt;/a&gt;
  Real Job:
&lt;/h5&gt;

&lt;p&gt;You can try to find a real job as a WordPress Developer.&lt;br&gt;
The salary range will be between $200 to $3000 according to your &lt;strong&gt;skill&lt;/strong&gt;, &lt;strong&gt;experience&lt;/strong&gt;, and &lt;strong&gt;Location&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#freelancing" class="anchor"&gt;
  &lt;/a&gt;
  Freelancing:
&lt;/h5&gt;

&lt;p&gt;Love freedom and responsibilities?&lt;br&gt;
Start working as a Freelancer. There‚Äôs no bound of the salary or earning range.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#business" class="anchor"&gt;
  &lt;/a&gt;
  Business:
&lt;/h5&gt;

&lt;p&gt;You can start your own business with WordPress Development skills. Here's a secret on my behalf,&lt;/p&gt;

&lt;p&gt;"You can make your own digital products like WP Themes, WP Plugins, HTML Templates, CMS, PHP Scripts, etc, and sell them to your own website or any code/script selling world-class marketplaces like &lt;strong&gt;Envato&lt;/strong&gt;, &lt;strong&gt;Codecanyon&lt;/strong&gt;, etc."&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#content-making" class="anchor"&gt;
  &lt;/a&gt;
  Content Making:
&lt;/h5&gt;

&lt;p&gt;You can start making content, based on your knowledge for your own Blog Websites or YouTube Channel.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#teaching-or-mentoring" class="anchor"&gt;
  &lt;/a&gt;
  Teaching or Mentoring:
&lt;/h5&gt;

&lt;p&gt;Love to teach? You can start your mentoring or teaching career with what you‚Äôve learned before!&lt;/p&gt;

&lt;p&gt;You can work as a mentor of Web Development and WordPress Development at your local IT Institutions.&lt;br&gt;
If you have enough capability, then make your own IT Institute and start spreading knowledge.&lt;/p&gt;

&lt;p&gt;You can also make tutorial videos or teaching content for Udemy, Lynda, or any other online institution.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#big-plan" class="anchor"&gt;
  &lt;/a&gt;
  #Big Plan
&lt;/h2&gt;

&lt;p&gt;Dream Big, Plan Big, Grow Big!!!&lt;/p&gt;

&lt;p&gt;If you are dreaming of something big like you want to become a full-stack developer, then welcome!&lt;/p&gt;

&lt;p&gt;For Front End Development, you can start learning ReactJS, VueJS, AngularJS, or whatever you feel comfortable to start with.&lt;/p&gt;

&lt;p&gt;For Back End Development, besides working with PHP and Laravel, you can start learning NodeJS, if you‚Äôre good at JavaScript.&lt;/p&gt;

&lt;p&gt;You can also start learning Python for advanced Machine learning or any other development processes.&lt;/p&gt;

&lt;p&gt;Whatever you do, you have to dream really big and you have to give proper time, effort, and hard work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best of Luck to You! Best of Luck to Me&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-must-learn-jquery-plugins" class="anchor"&gt;
  &lt;/a&gt;
  #Some Must Learn jQuery Plugins:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://owlcarousel2.github.io/OwlCarousel2"&gt;Owl Carousel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kenwheeler.github.io/slick"&gt;Slick Slider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wowjs.uk"&gt;WOW.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mattboldt.com/demos/typed-js"&gt;Typed.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://animejs.com"&gt;Anime.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://isotope.metafizzy.co/"&gt;Isotope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dimsemenov.com/plugins/magnific-popup"&gt;Magnific PopUp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kimmobrunfeldt.github.io/progressbar.js"&gt;Progressbar.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bfintal/Counter-Up"&gt;Counter Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matthew.wagerfield.com/parallax"&gt;Parallax.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://countdownjs.org"&gt;Countdown.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/davist11/jQuery-One-Page-Nav"&gt;jQuery One Page Nav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jqueryniceselect.hernansartorio.com"&gt;jQuery Nice Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markgoodyear.com/2013/01/scrollup-jquery-plugin"&gt;ScrollUp jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imagesloaded.desandro.com"&gt;ImagesLoaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rendro/easy-pie-chart"&gt;Easy Pie Chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chartjs.org"&gt;Chart.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gijsroge.github.io/tilt.js"&gt;Tilt.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elevateweb.co.uk/image-zoom"&gt;ElevateZoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jqueryui.com"&gt;jQuery UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marioloncarek/megamenu-js"&gt;Megamenu.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Written by &lt;a href="https://alnahian2003.github.io/me"&gt;&lt;strong&gt;Abdullah Al Nahian&lt;/strong&gt;&lt;/a&gt;, aka &lt;a href="https://github.com/alnahian2003"&gt;Al Nahian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Special Credit Goes &lt;a href="https://www.youtube.com/c/JSBangladesh"&gt;JS Bangladesh&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>wordpress</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Open Source Real-world Ruby and Rails Applications üî•</title>
      <author>Amirul Asyraf</author>
      <pubDate>Sun, 07 Feb 2021 04:18:09 +0000</pubDate>
      <link>https://dev.to/asyraf/open-source-real-world-ruby-and-rails-applications-4jfo</link>
      <guid>https://dev.to/asyraf/open-source-real-world-ruby-and-rails-applications-4jfo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDb8BjfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.codemy.net/content/images/2019/01/ruby-rails-part-1-cover.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDb8BjfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.codemy.net/content/images/2019/01/ruby-rails-part-1-cover.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rubyonrails.org/"&gt;Ruby and Rails&lt;/a&gt; is a perfect combination to build awesome stuff on the web. Indeed, use Rails as an API to integrate with mobile app stacks like React Native or Swift and other major platforms.&lt;/p&gt;

&lt;p&gt;Here, I create a list of tons of Open source Ruby and Rails applications that some of us didn't know it is open source üòÖ. For example ;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/chaskiq/chaskiq"&gt;chaskiq&lt;/a&gt; - A full featured Live Chat, Support &amp;amp; Marketing platform&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chatwoot/chatwoot"&gt;chatwoot&lt;/a&gt; - Open-source live chat software, an alternative to Intercom, Zendesk, Drift, Crisp etc. üî•üí¨&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codetriage/CodeTriage"&gt;codeTriage&lt;/a&gt; - Discover the best way to get started contributing to Open Source projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dependabot/dependabot-core"&gt;Depandabot&lt;/a&gt; - ü§ñ The core logic behind Dependabot's update PR creation, and the public issue tracker for all things Dependabot&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/discourse/discourse"&gt;Discource&lt;/a&gt; - A platform for community discussion. Free, open, simple.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feedbin/feedbin"&gt;feedbin&lt;/a&gt; - Follow your passions with RSS, email newsletters, and Twitter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lobsters/lobsters"&gt;lobster.rs&lt;/a&gt; - Computing-focused community centered around link aggregation and discussion&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tootsuite/mastodon"&gt;mastodon&lt;/a&gt; - Your self-hosted, globally interconnected microblogging community&lt;/li&gt;
&lt;li&gt;and so on......&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#this-project-is-great-for-" class="anchor"&gt;
  &lt;/a&gt;
  This project is Great for ;
&lt;/h1&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Beginners&lt;/strong&gt; ; to learn from a real-world production app &lt;br&gt;
‚úÖ &lt;strong&gt;Beginners&lt;/strong&gt; ; learn how to contribute to an open-source project&lt;br&gt;
‚úÖ &lt;strong&gt;Seniors/expert&lt;/strong&gt; ; gain pattern and extra knowledge&lt;br&gt;
‚úÖ &lt;strong&gt;New-comers&lt;/strong&gt; ; know how Awesome Ruby and Rails is üî•&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-project-contains" class="anchor"&gt;
  &lt;/a&gt;
  This project contains;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;real-world production app&lt;/li&gt;
&lt;li&gt;Clone of a real-world startup-like Kickstarter and Airbnb&lt;/li&gt;
&lt;li&gt;Ecommerce&lt;/li&gt;
&lt;li&gt;cool ruby gems&lt;/li&gt;
&lt;li&gt;website&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;and the list goes on&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-waiting-for-" class="anchor"&gt;
  &lt;/a&gt;
  What do you waiting for ???
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Js7cqIkpxFy0bILFFA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Js7cqIkpxFy0bILFFA/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://github.com/asyraffff/Open-Source-Ruby-and-Rails-Apps" rel="noopener noreferrer"&gt;Here we go üöÄ&lt;/a&gt;.&lt;/center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eg3f90cy2Mc6yVRWyR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eg3f90cy2Mc6yVRWyR/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Using the Twitter API to get tweets</title>
      <author>cameronldroberts</author>
      <pubDate>Sun, 07 Feb 2021 00:48:11 +0000</pubDate>
      <link>https://dev.to/cameronldroberts/using-the-twitter-api-to-get-tweets-11c1</link>
      <guid>https://dev.to/cameronldroberts/using-the-twitter-api-to-get-tweets-11c1</guid>
      <description>&lt;p&gt;This post will talk through the steps on how to create your own Twitter bot in Go! We will be making use of &lt;a href="https://github.com/dghubble/go-twitter"&gt;go-twitter&lt;/a&gt; which is a Go client library for the Twitter API. Big thanks to the developers over there for making an easy to use library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Twitter developer account&lt;/li&gt;
&lt;li&gt;Valid Golang installation &lt;/li&gt;
&lt;li&gt;Basic programming knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-twitter-api-key" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Twitter API key
&lt;/h2&gt;

&lt;p&gt;If you haven't already got a developer account on Twitter you will need to sign up. The steps to do this are documented &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Once you have an approved developer account head over to the &lt;a href="https://developer.twitter.com/en/portal/dashboard"&gt;dashboard&lt;/a&gt; and create a new &lt;code&gt;Project&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Take note of your API key, API key secret, access token, access token secret as we will need these in a few moments time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup" class="anchor"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;twitter-bot
&lt;span class="nb"&gt;cd &lt;/span&gt;twitter-bot
// Change this to your Github 
go mod init github.com/cameronldroberts/twitter-bot
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gocode" class="anchor"&gt;
  &lt;/a&gt;
  Go....code!
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;twitter-bot&lt;/code&gt; directory in your favourite editor and create a file named &lt;code&gt;main.go&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Firstly we will focus on authenticating with twitter. We are going to store the keys in environment variables. It's not a good idea to have sensitive information stored in our code as when it reaches our source control (Github, Gitlab, etc) it may be visible to others. &lt;/p&gt;

&lt;p&gt;Head over to the developer dashboard &lt;a href="https://developer.twitter.com/en/portal/dashboard"&gt;page&lt;/a&gt; where you should see the project you just created. On the left hand side click the name of your project under &lt;code&gt;Projects &amp;amp; Apps&lt;/code&gt;. Navigate to the &lt;code&gt;Keys and tokens&lt;/code&gt; page which is where we grab the API keys from. &lt;/p&gt;

&lt;p&gt;We need four values &lt;code&gt;CONSUMER_KEY&lt;/code&gt;, &lt;code&gt;CONSUMER_SECRET&lt;/code&gt;, &lt;code&gt;ACCESS_TOKEN&lt;/code&gt; and &lt;code&gt;ACCESS_TOKEN_SECRET&lt;/code&gt;. These can all be found on the &lt;code&gt;Keys and tokens&lt;/code&gt; page. Once you have the values populate the export commands with the right values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;API_KEY_VALUE&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;API_KEY_SECRET_VALUE&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;ACCESS_TOKEN_VALUE&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;ACCESS_TOKEN_SECRET_VALUE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once we have exported the environment variables we need to read them in via our Go code. The following code will do that and it will be the method we use when the code is complete&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Credentials&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ConsumerKey&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ConsumerKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CONSUMER_KEY"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CONSUMER_SECRET"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ACCESS_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ACCESS_TOKEN_SECRET"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%+v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This bit of the code can be divided into three sections &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imports 
This is where we import other packages that we make use of in our code. It's only a short list at the moment but we will be adding a few by the time we have completed the Twitter bot! &lt;/li&gt;
&lt;li&gt;Struct 
We define a struct to store the keys that we need to use for authenticating with Twitter. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;main&lt;/code&gt; function 
This function is slightly special in that it is the entrypoint and will be called automatically when we run our program. For now we are just going to prove that we can read in our environment variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy the code snippet into &lt;code&gt;main.go&lt;/code&gt; and run it using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This should output something similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;randomvalue1 randomvalue2 randomvalue3 randomvalue4&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In your case each of the values should be referring to the keys from twitter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authenticating-with-twitter" class="anchor"&gt;
  &lt;/a&gt;
  Authenticating with Twitter
&lt;/h2&gt;

&lt;p&gt;Now that we have exported our environment variables and are able to read them in we are ready to authenticate with Twitter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// These values are the API key and API key secret&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// These values are the consumer access token and consumer access token secret&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccountVerifyParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SkipStatus&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;IncludeEmail&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// print out the Twitter handle of the account we have used to authenticate with &lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully authenticated using the following account : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScreenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can now call this function from within our main function. Replace this line(we don't need to log the credentials out anymore)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%+v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#search-tweets" class="anchor"&gt;
  &lt;/a&gt;
  Search tweets
&lt;/h2&gt;

&lt;p&gt;As I have mentioned previously the &lt;a href="https://github.com/dghubble/go-twitter"&gt;go-twitter&lt;/a&gt; client library makes it nice and easy to talk to the Twitter  API in Go! Let's create our next function where we make use of the search functionality&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;searchTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchTweetParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bonjour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"search : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the following line to our &lt;code&gt;main()&lt;/code&gt; function (at the bottom)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;searchTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and then run the code with &lt;code&gt;go run main.go&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Your terminal window will turn into what looks like a wall of text that doesn't make a lot of sense. This code works but there's definitely room for improvement! All of the tweets that were returned were in French (Not surprising given the search parameter) and the big wall of text is not very readable. Let's make some improvements to the &lt;code&gt;searchTweets()&lt;/code&gt; function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-our-search-function" class="anchor"&gt;
  &lt;/a&gt;
  Improving our search function
&lt;/h2&gt;

&lt;p&gt;I'm not sure about you but unfortunately I'm unable to speak French so the first change we'll make is to add a language to the search parameters. We do this by adding the following parameter for English &lt;code&gt;Lang:  "en",&lt;/code&gt;. This will bring back tweets where Twitter has detected the language to be English. Let's change our search parameter to become the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchTweetParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bonjour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The second change is to parse the interesting bits of each tweet into a struct so we can ignore the bits we don't care about and more clearly see the bits we do care about! Let's try and keep things anonymous by only grabbing the tweet likes, retweets and the tweet itself. To do this let's create another struct but this time it will hold tweet data instead of credentials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;TweetData&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Tweet&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;LikeCount&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;RetweetCount&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we use the client to search tweets we get a &lt;code&gt;twitter.Search&lt;/code&gt; object back which has an array of tweets and metadata. To grab out the values we want to keep we will loop over the array of tweets creating a struct to hold the data. We will print each struct so it makes it more readable than the previous wall of text! &lt;/p&gt;

&lt;p&gt;New and improved...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;searchTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchTweetParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bonjour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Statuses&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;TweetData&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LikeCount&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FavoriteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;RetweetCount&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetweetCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%+v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Replace the existing &lt;code&gt;searchTweets()&lt;/code&gt; with the above snippet of code. Feel free to add/remove/change the &lt;code&gt;SearchTweetParams&lt;/code&gt; to something you find more interesting. You could change the query parameter to something else (maybe &lt;code&gt;"Formula 1"&lt;/code&gt;). You could also add on some additional parameters to the query.&lt;/p&gt;

&lt;p&gt;At the moment this is a pretty simple use case but hopefully it gives you a foundation to build on. We could go on and build up an array of tweets and do some kind of processing on them. We could send tweets via the client when a certain condition is true. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;If you just want to skip ahead to the completed code snippet or want to use the completed snippet for reference, here it is. If you come straight here don't forget to make sure you have your API keys setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/dghubble/go-twitter/twitter"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/dghubble/oauth1"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Credentials&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ConsumerKey&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;TweetData&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Tweet&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;LikeCount&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;RetweetCount&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ConsumerKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CONSUMER_KEY"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CONSUMER_SECRET"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ACCESS_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ACCESS_TOKEN_SECRET"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;searchTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// These values are the API key and API key secret&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumerSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// These values are the consumer access token and consumer access token secret&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;creds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccountVerifyParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SkipStatus&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;IncludeEmail&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// print out the Twitter handle of the account we have used to authenticate with&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully authenticated using the following account : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScreenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;searchTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchTweetParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Formula 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Statuses&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;TweetData&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;LikeCount&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FavoriteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;RetweetCount&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetweetCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%+v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it for this post, hopefully you enjoyed it and it made sense! &lt;br&gt;
&lt;a href="https://www.cameronroberts.dev/"&gt;https://www.cameronroberts.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>twitter</category>
      <category>tutorial</category>
      <category>code</category>
    </item>
    <item>
      <title>üöÄ Demystifying Async/Await as Generators + Promises</title>
      <author>Sagar Routh</author>
      <pubDate>Sun, 07 Feb 2021 00:00:45 +0000</pubDate>
      <link>https://dev.to/sagarrth/demystifying-async-await-as-generators-promises-91i</link>
      <guid>https://dev.to/sagarrth/demystifying-async-await-as-generators-promises-91i</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Async/Await solves the problem of Inversion of Control with callbacks.&lt;/li&gt;
&lt;li&gt;Generators build-up to Async/Await&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#async-await"&gt;Async/Await&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#async-generators"&gt;Async/Await through generators&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;







&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript being single-threaded, cannot be blocked for long-running or time-taking tasks.&lt;br&gt;
Callbacks are the answer to execute such tasks without blocking the main thread. However, they cause &lt;strong&gt;Inversion of Control&lt;/strong&gt;. &lt;em&gt;The invocation of callbacks is passed to a function over which you do not have control&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Async/Await solves that problem. In this article, we would compare the same example and break down the similar working of the async/await function with the help of generators.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Async/Await &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Async functions help us write asynchronous code (Promises) in a more synchronous manner.&lt;/p&gt;

&lt;p&gt;Things to note about async functions - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Async functions always return a Promise, returned values are enclosed in a promise if they are not thenables.&lt;/li&gt;
&lt;li&gt;Await keyword can only be used within an async function, it is used to await the value of a promise.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUqwLBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1fs0iv0xs534yb3ijn77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUqwLBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1fs0iv0xs534yb3ijn77.png" alt="async await example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above snippet, the invocation of the async function returns us the data, without having to do a .then over the two promises returned from the fetch API and its parsing process.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#generators" class="anchor"&gt;
  &lt;/a&gt;
  Generators &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generators are functions that do not run to completion. They can be paused and resumed. Until the function is completed, Its context is preserved. It returns a generator object which implements the iterable protocol. This helps us write asynchronous code in a somewhat synchronous manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxjUu_pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9msjztir2rmmqt3l70a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxjUu_pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9msjztir2rmmqt3l70a.png" alt="generator example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The generator object is compatible with the Iterable protocol, thus a .next() can be invoked to get subsequent values i.e. control goes back within the generator function.&lt;/li&gt;
&lt;li&gt;Values are exchanged between the generator function and outer code via next/yield. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr47_lza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eoo7u60zohpsgw2s3yum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr47_lza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eoo7u60zohpsgw2s3yum.png" alt="Iterator interface"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#asyncawait-through-generators" class="anchor"&gt;
  &lt;/a&gt;
  Async/Await through generators &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Understanding the generators is essential for the last part of the article. It is where Promises and Generators will be composed to create our own async/await implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VFHWGT96hbfsjDJ57S/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VFHWGT96hbfsjDJ57S/giphy.gif" alt="almost there"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code snippet is analogous to the async/await code snippet at the top. Here is the breakdown of the steps -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A generator function is required for it, yield is analogous to the await keyword.&lt;/li&gt;
&lt;li&gt;The asyncify function returns a Promise, which embodies the await logic.&lt;/li&gt;
&lt;li&gt;The manual invocation of the iterator.next() method which was seen in the generator's example is done within the promise body.&lt;/li&gt;
&lt;li&gt;The logic would be recursively invoked until the IteratorResult has 'done' as true &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DCpKcZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ns1r22fjpc1yn2hmixar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DCpKcZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ns1r22fjpc1yn2hmixar.png" alt="asyncify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ultimately, the &lt;code&gt;asyncified&lt;/code&gt; function would be consumed in a similar manner as an async function is. As it returns a Promise, it should be consumed via a success and error handler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1sdLDgVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhgabsie3dq65jjftnd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sdLDgVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhgabsie3dq65jjftnd0.png" alt="asyncified consumption"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All above snippets can be run &lt;a href="https://codepen.io/sagarrth/pen/PobNpwZ"&gt;here&lt;/a&gt;&lt;br&gt;
Reference: &lt;a href="https://exploringjs.com/es6/ch_generators.html"&gt;ExploringJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all people!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>uiweekly</category>
      <category>generators</category>
    </item>
    <item>
      <title>Coupling: The one and only software design problem</title>
      <author>Maxi Contieri</author>
      <pubDate>Sat, 06 Feb 2021 23:56:40 +0000</pubDate>
      <link>https://dev.to/mcsee/coupling-the-one-and-only-software-design-problem-2pd7</link>
      <guid>https://dev.to/mcsee/coupling-the-one-and-only-software-design-problem-2pd7</guid>
      <description>&lt;p&gt;A root cause analysis of all failures of our software will find a single culprit with multiple costumes.&lt;/p&gt;

&lt;p&gt;The enemy is always there. Many times disguised as laziness, sometimes simplification, and usually with the optimization outfit.&lt;/p&gt;

&lt;p&gt;If we analyze many common mistakes, we will always find a single culprit. The bloody coupling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#expanding-the-axioms" class="anchor"&gt;
  &lt;/a&gt;
  Expanding the axioms
&lt;/h1&gt;

&lt;p&gt;In previous articles, we talked about the definition of software design in an axiomatic way.&lt;br&gt;
We enunciated the rule to know what objects to represent in our model:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-is-wrong-with-software-5pa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is (wrong with) software&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Oct  8 '20 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#solid&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;and we showed the only principle that we should use:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/the-one-and-only-software-design-principle-3086" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The One and Only Software Design Principle&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Oct 13 '20 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;We are going to add the only mistake we should avoid by all means to this axiomatic list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coupling-examples" class="anchor"&gt;
  &lt;/a&gt;
  Coupling Examples
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#classes" class="anchor"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Global variables link a global reference from the code. This link cannot be easily broken unless we connect to interfaces instead of references and use¬†&lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;dependency inversion&lt;/a&gt;¬†(the¬†&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt;¬†D).&lt;br&gt;
Having global variables in a structured language involves being attached to a reference that cannot be replaced, mocked or deferred over time. In object-oriented programming using classification languages, ‚Äã‚Äãthe problem is the same.&lt;/p&gt;

&lt;p&gt;This is a step back to more pure functional languages where there's and explicit prohibition enforced by preventing functions from having side effects.&lt;/p&gt;

&lt;p&gt;If we take an extreme and minimalist position:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every function/method should only invoke objects in their attributes and/or their parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#settings" class="anchor"&gt;
  &lt;/a&gt;
  Settings
&lt;/h3&gt;

&lt;p&gt;Those plugs that allow us to 'configure' the software using arbitrary global references from anywhere on the code.&lt;/p&gt;

&lt;p&gt;They are a particular case of global references and prevent the correct unit test of a system. If something must be configurable, this possible configuration must be passed as an object as we proposed in this article.&lt;/p&gt;

&lt;p&gt;In this way we can replace the configuration on tests and have full control and no side effects.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-29-settings-configs-3eh3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 29 - Settings/Configs&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Nov 20 '20 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#hidden-assumptions" class="anchor"&gt;
  &lt;/a&gt;
  Hidden Assumptions
&lt;/h3&gt;

&lt;p&gt;As we have described in the note on bijections, partially ignoring this principle implies running the risk of losing information on the contract and making mistakes under different interpretations.&lt;/p&gt;

&lt;p&gt;In our previous example where we represented¬†10 meters¬†with the¬†number 10.&lt;/p&gt;

&lt;p&gt;In this case, we are coupled to the hidden assumption that¬†10¬†represents¬†10 meters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZbGGLm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1iekxeqj1qp7nwjyz63o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZbGGLm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1iekxeqj1qp7nwjyz63o.jpg" alt="Hidden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hidden assumptions appear at the worst moments of the development cycle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-references" class="anchor"&gt;
  &lt;/a&gt;
  Null References
&lt;/h3&gt;

&lt;p&gt;This is a particular case of the item above.¬†Null¬†should never be used because it violates our only non-negotiable principle since it is not bijective with any real-world entity (Null¬†only exists in the world of developers).&lt;/p&gt;

&lt;p&gt;If we decide to use a¬†null¬†as a flag of some particular behavior we are coupling the decision of the function implementer to the one who invokes it. This ambiguous semantics brings countless problems.&lt;/p&gt;

&lt;p&gt;Same issue happens when someone sets a property to¬†null coupling to the reader of the attribute.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/null-the-billion-dollar-mistake-1h1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Null: The Billion dollar mistake&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Nov 18 '20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#singletons" class="anchor"&gt;
  &lt;/a&gt;
  Singletons
&lt;/h3&gt;

&lt;p&gt;The¬†&lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;Singleton pattern&lt;/a&gt;¬†is a controversial design pattern. If we look at it under the guidance of our single design rule we will discard its use immediately. An object is represented by a¬†*Singleton¬†*if there is only one instance of its class. This also violates the principle of being declarative since the uniqueness of a concept, in general, is coupled to implementation problems, so we are violating the only design rule that we imposed ourselves.&lt;/p&gt;

&lt;p&gt;Besides,¬†*singletons¬†*are generally referenced through their class name, so we add all the problems mentioned in the first paragraph.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/singleton-the-root-of-all-evil-50bh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Singleton: The Root of all Evil&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Nov 17 '20 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#ifcaseswitch-and-all-their-friends" class="anchor"&gt;
  &lt;/a&gt;
  If/Case/Switch and all their friends
&lt;/h3&gt;

&lt;p&gt;If¬†clauses have a hidden coupling between the¬†condition¬†and the place where they are¬†evaluated¬†and violate the¬†&lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;open/closed principle&lt;/a&gt;. (The O on the solid acronym).&lt;/p&gt;

&lt;p&gt;Ifs (and hence¬†cases)¬†should be avoided unless these conditions are business rules thus related to the¬†&lt;a href="https://maximilianocontieri.com/the-one-and-only-software-design-principle"&gt;bijection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A business rule¬†&lt;em&gt;'A bonus should be paid to employees with 3 or more years at a company'&lt;/em&gt;¬†can be safely stated by an¬†If¬†clause but rules such as¬†*'If the employee's position is junior then pay them 10.000'¬†*shouldn't, since this is not essential on the business rule but accidental therefore should be treated with polymorphism.&lt;/p&gt;

&lt;p&gt;In the real world, employees are aware of their position, but they are not usually aware of their age on the company.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-36-switch-case-elseif-else-if-statements-h6c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 36 - Switch/case/elseif/else/if statements&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Nov 28 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#documentation" class="anchor"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you need to add comments to your code there's a smell you might not be declarative enough.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-05-comment-abusers-2ba5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 05 - Comment Abusers&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Oct 24 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Code documentation is many times not synced with the code itself. Many times developers change the code and don't have enough courage to change the code documentation bound to the code. This is another subtle coupling case.&lt;/p&gt;

&lt;p&gt;Some months later we read the code and the documentation and need a lot of time to figure out their meaning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ripple-effect" class="anchor"&gt;
  &lt;/a&gt;
  Ripple effect
&lt;/h1&gt;

&lt;p&gt;If we are faithful to our unique design rule and have a declarative model, we will expect, consequently, that a small change in the requirements will generate a small change in the model and so on. When this does not occur, the dreaded¬†&lt;a href="https://asu.pure.elsevier.com/en/publications/ripple-effect-analysis-of-software-maintenance"&gt;ripple effect¬†&lt;/a&gt;is produced, turning the software unpredictable and full of potential errors that hinder its maintenance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwCARWZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdvszs3e9fsb220dca9r.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwCARWZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdvszs3e9fsb220dca9r.jpeg" alt="Ripple"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-16-ripple-effect-3881" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 16‚Ää-‚ÄäRipple¬†Effect&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Nov  4 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#solutions" class="anchor"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;p&gt;There are many ways to remove coupling once identified.&lt;/p&gt;

&lt;p&gt;In this article we will see coupling reduction techniques:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mcsee.hashnode.dev/how-to-decouple-a-legacy-system"&gt;Decouple a Legacy System&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Coupling is necessary because the objects must know each other to collaborate and be able to solve the problems raised in the simulation.&lt;/p&gt;

&lt;p&gt;Finding out which binding is good versus which one is bad to avoid the wave effect requires a little experience and a lot of staying true to the rules defined in this article.&lt;/p&gt;




&lt;p&gt;Part of the objective of this series of articles is to generate spaces for debate and discussion on software design.&lt;/p&gt;

&lt;p&gt;We look forward to comments and suggestions on this article.&lt;/p&gt;

&lt;p&gt;This article is published at the same time in Spanish¬†&lt;a href="https://medium.com/@mcsee/acoplamiento-el-%C3%BAnico-problema-importante-en-el-dise%C3%B1o-de-software-ae203338c8d5"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Install coding tools for Python development</title>
      <author>Joel Buenrostro</author>
      <pubDate>Sat, 06 Feb 2021 22:37:59 +0000</pubDate>
      <link>https://dev.to/joelbuenrostro/install-coding-tools-for-python-development-5eif</link>
      <guid>https://dev.to/joelbuenrostro/install-coding-tools-for-python-development-5eif</guid>
      <description>&lt;p&gt;In this post, you'll be introduced to Visual Studio Code, Python, and Jupyter Notebooks. You'll learn how to install all the software and packages you'll need to begin writing code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A Windows, Mac, or Linux computer&lt;/li&gt;
&lt;li&gt;Knowledge of how to download programs from the Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-code" class="anchor"&gt;
  &lt;/a&gt;
  What is code?
&lt;/h2&gt;

&lt;p&gt;Lines of code are instructions that humans give to computers to make them do things. While you may hear about how smart and amazing computers are, on their own, they are only good at one thing: following explicit instructions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-visual-studio-code" class="anchor"&gt;
  &lt;/a&gt;
  What is Visual Studio Code?
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code (often referred to as VS Code) is a free, open-source, extensible, code editor. We can break this description down a little further to get a better understanding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code editor: A code editor is made specifically for writing, running, and debugging code. Code editors can be compared to an application like Microsoft Word, but having additional functionality such as autocomplete of code functions and the ability to execute, or run, code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open-source: Open Source Software (OSS) has its code available for anyone to explore, modify, and enhance. The main takeaway from this is that anyone, even you, can build a new feature in software such as Visual Studio Code and contribute it back to the source code for others to use. You can find the open-source Visual Studio project on GitHub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extensible: Extensible means that something can be extended and expanded. In the context of Visual Studio Code, being extensible means that you can download, or even create, extensions to make Visual Studio Code exactly right for your work style. Think mods in a game or customizations. If the color scheme is hurting your eyes or an obscure programming language isn't supported, you can customize Visual Studio Code to add new colors or support for the language. You can find the &lt;a href="https://marketplace.visualstudio.com/VSCode"&gt;Visual Studio Code extensions on the marketplace&lt;/a&gt; or discover how to build your extension in the Visual Studio Code documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#install-python-extension" class="anchor"&gt;
  &lt;/a&gt;
  Install Python extension
&lt;/h2&gt;

&lt;p&gt;Click on the extension tab in Visual Studio Code to access all the Python open-source tools that'll be helpful for this learning path. The extension tab looks like three blocks in the shape of an "L" with another block floating to the right.&lt;br&gt;
If you want to, you can explore the extensions marketplace and install any extensions you'd like to have, but for this tutorial, we'll install the Python extension. When you're in the extension marketplace, go to the search bar and type "Python". Look for the extension named solely Python and published by Microsoft - it should be the first result. Click on the extension and then click "install".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-5oaab---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/learn/modules/install-code-tools-python-nasa/media/install-python.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-5oaab---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/learn/modules/install-code-tools-python-nasa/media/install-python.png" alt="Python Extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-intellicode-extension" class="anchor"&gt;
  &lt;/a&gt;
  Install IntelliCode extension
&lt;/h2&gt;

&lt;p&gt;While you're in the extensions tab, go back to the search bar and type in "intellicode". Select the specified box. It should be the first result. Select Install. IntelliCode will recommend code when you're writing programs, which is a great tool for beginners who might not know the exact syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqba8LXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/learn/modules/install-code-tools-python-nasa/media/install-intellicode.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqba8LXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/learn/modules/install-code-tools-python-nasa/media/install-intellicode.png" alt="Intellicode Extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#information-about-jupyter-notebooks" class="anchor"&gt;
  &lt;/a&gt;
  Information about Jupyter Notebooks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/python/jupyter-support"&gt;Visual Studio Code Jupyter Notebooks&lt;/a&gt; has good documentation about how to use the environment. In Jupyter notebooks, you write code in cells. Click on the plus button to the left of a cell to create a new cell below the current cell. Click on the garbage can to the right to delete the selected cell and use the arrow buttons to move the cell up or down in relation to the cells around it.&lt;br&gt;
Use the green play button in each cell to run that cell. After you run a cell, a number will appear, surrounded by square brackets. This number is to help you keep track of which cells you run. This is important because, as you'll remember, you can re-run cells within a Jupyter Notebook, which might change variables or program state.&lt;br&gt;
If you look at the top of the file, you will see that you can run all cells above or below the current cell by using the play button. Finally, you can click the red pause button to force stop the program at any time.&lt;/p&gt;

&lt;p&gt;The Jupyter notebooks have been widely adopted by the data science community of practitioners to hypothesize and visualize data in a format that enables rapid prototyping of their applications.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading and happy coding!!!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>jupyter</category>
      <category>vscode</category>
    </item>
  </channel>
</rss>
