<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tools to know when starting coding</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Wed, 26 May 2021 18:38:59 +0000</pubDate>
      <link>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</link>
      <guid>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</guid>
      <description>&lt;p&gt;When we start to code, most of us really don't focus on tools. These tools can really make your programming more productive and efficient. &lt;/p&gt;

&lt;p&gt;In the tech world, there are thousands of tools that people use themselves, or probably will tell you to use these tools. How are we as beginners or intermediates know which tool is good for us. In this blog, I have talked about this in this article, &lt;strong&gt;Enjoy&lt;/strong&gt;-&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;WhatFont&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Amazing Chrome extensions help to us to identify the fond of the website.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;StackOverFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of us falls in problems related to our code or there is a bug that you are facing but can't solve, you can search that on stackoverflow and could get the solution over there.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Wappalyzer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is also a Chrome extension that helps in identifying the technology used in that website.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Redux Dev Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tool is good for debugging application made by Redux.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Vimeo Repeat and Speed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is Also an Chrome extension, most of coding tutorials made by individual websites are either hosted on Vimeo or sometimes Youtube. This extension gives you flexibility to watch vimeo videos in a your custom way. &lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Git Lens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use VS code, this vs code extension will help you find what, when changes were made and who made the changes in the code.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;VSCode-Icons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension on VS code changes the Coding window according to yourself and make it the most pleasant look for your eyes.&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Code Spell Checker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This as the name suggest checks the spelling of the code, and makes it easier for you to code, if you don't want to waste your time on learning and memorizing spellings.&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Guides&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This code guide will make sure that the brackets and parenthesis that you put in your code are correct and is in the write place, so that in the future no bugs could be found.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Auto Rename Tag&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This will automatically make the ending tag of any HTML code you do, like if you wrote  then it will automatically make  in the correct position according to your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally this big topic is over now, Now I would like to talk about my Newsletter&lt;/em&gt; -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have started a newsletter in which you will get Email twice a week directly from me. I will send you latest tech, coding &amp;amp; Other useful information. I will also be spending a one riddle each time and the first to complete the riddle will get a small gift from me&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDFP6Lsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyih1zf664aoqcwaxr17.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on Twitter as well. &lt;a href="https://twitter.com/chetanistaken"&gt;Click Here.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Integrating Scylla DB with Quarkus</title>
      <author>Jo√£o Victor Martins</author>
      <pubDate>Wed, 26 May 2021 18:18:09 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/integrating-scylla-db-with-quarkus-519d</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/integrating-scylla-db-with-quarkus-519d</guid>
      <description>&lt;p&gt;Hello, everyone!! In the previous post, we talk about Scylla DB and some characteristics of the database. For those who have not seen it yet, this is the link &lt;a href="https://dev.to/j_a_o_v_c_t_r/working-with-scylla-database-3al9"&gt;https://dev.to/j_a_o_v_c_t_r/working-with-scylla-database-3al9&lt;/a&gt;. Today I intend to integrate the database with an application Java and to help us I decided to use Java + Quarkus. Quarkus is a Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best-of-breed Java libraries and standards. It is known as Supersonic Subatomic java because it is fast and small. To those interested, the link will be at the final of the post. Ok, now that we know our goal, let's start!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-the-application"&gt;
  &lt;/a&gt;
  Creating the application
&lt;/h1&gt;

&lt;p&gt;The first step is to create the application and for that, Quarkus gives us a simple interface that we can access at this link &lt;a href="https://code.quarkus.io/"&gt;https://code.quarkus.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbtYqFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0ptpmkx367vihz2crwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbtYqFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0ptpmkx367vihz2crwy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this page we put information like &lt;em&gt;groupId&lt;/em&gt;, &lt;em&gt;artifactId&lt;/em&gt;, build tools, and select which dependencies we will use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzKNU40y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avr8dypohiqj95jtogzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzKNU40y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avr8dypohiqj95jtogzp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's know about the selected dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datastack Apache Cassandra client: Driver to connect to Apache Cassandra databases. How we saw, Scylla DB is based on Cassandra, so we can use the same client.&lt;/li&gt;
&lt;li&gt;RESTEasy JSON-B: JSON-B serialization support for RESTEasy. We will use endpoints to interact with our application&lt;/li&gt;
&lt;li&gt;RESTEasy Mutiny: Mutiny support for RESTEasy server. If we want to call async resources (We don't use them in this example).&lt;/li&gt;
&lt;li&gt;SmallRye Health: Monitor service health.&lt;/li&gt;
&lt;li&gt;Micrometer Registry Prometheus: Enable Prometheus support for micrometer, so with this dependency, we can collect metrics for our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, now we can generate our application in the Generate your application button. &lt;/p&gt;

&lt;p&gt;Let's import the application in our &lt;em&gt;IDE&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Quarkus gives us a &lt;em&gt;GET&lt;/em&gt; resource for testing, but we are not going to use it so we can delete it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msTM1R2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p8bgri3rqgxqr78h24n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msTM1R2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p8bgri3rqgxqr78h24n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want test,  is enough execute mvn package quarkus:dev command, wait application is up and call &lt;a href="http://localhost:8080/hello-reasteasy"&gt;http://localhost:8080/hello-reasteasy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can create our entity. &lt;em&gt;Entity&lt;/em&gt; class is a model for objects that we will work on. This object will be &lt;code&gt;Car&lt;/code&gt;. In the name of the class will use the annotation &lt;code&gt;@Entity&lt;/code&gt;. &lt;em&gt;The name of the class should be the same as the table of database&lt;/em&gt;. The object will have the fields &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;brand&lt;/em&gt;, &lt;em&gt;color&lt;/em&gt;, and &lt;em&gt;model&lt;/em&gt;. How we saw in the previous post, the &lt;em&gt;id&lt;/em&gt; field is a &lt;em&gt;primary key&lt;/em&gt;, so we will use the annotation &lt;code&gt;@PartitionKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the next post, I will talk about Scylla Primary Key and the differences in relation the relational databases&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7PIz9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuatj8eqk4hwec6yqn46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7PIz9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuatj8eqk4hwec6yqn46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How we can see, the class does not compile, because we need to add some dependencies in our &lt;code&gt;pom.xml&lt;/code&gt;. This dependencies are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;com.datastax.oss:java-driver-core: A modern, feature-rich, and highly tunable Java client library for Apache Cassandra¬Æ (2.1+) and DataStax Enterprise (4.7+), and DataStax Astra, using exclusively Cassandra's binary protocol and Cassandra Query Language (CQL) v3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;com.datastax.oss:java-driver-mapper-runtime: The mapper generates the boilerplate to execute queries and convert the results into application-level objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The dependencies can be downloaded in &lt;a href="https://mvnrepository.com/"&gt;https://mvnrepository.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And we need to change the original &lt;em&gt;maven-compiler-plugin&lt;/em&gt; in &lt;code&gt;pom.xml&lt;/code&gt; for the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.0&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;${java.version}&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;${java.version}&amp;lt;/target&amp;gt;
                    &amp;lt;annotationProcessorPaths&amp;gt;
                        &amp;lt;path&amp;gt;
                            &amp;lt;groupId&amp;gt;com.datastax.oss.quarkus&amp;lt;/groupId&amp;gt;
                            &amp;lt;artifactId&amp;gt;cassandra-quarkus-mapper-processor&amp;lt;/artifactId&amp;gt;
                            &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
                        &amp;lt;/path&amp;gt;
                    &amp;lt;/annotationProcessorPaths&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is necessary because Quarkus need know the annotations in compile time for injecting the resources like &lt;em&gt;DAO&lt;/em&gt; and others. We'll see that soon.&lt;/p&gt;

&lt;p&gt;After including the dependencies in &lt;code&gt;pom.xml&lt;/code&gt;, we can import annotations and include &lt;em&gt;constructors&lt;/em&gt; and &lt;em&gt;getters/setters&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W3pWnOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9o2fec5mpu49f12xk4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W3pWnOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9o2fec5mpu49f12xk4h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;rest of the methods omitted!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create the &lt;em&gt;Data Access Object&lt;/em&gt; or more commonly &lt;em&gt;DAO&lt;/em&gt;. Is enough for this post two methods, one &lt;em&gt;select&lt;/em&gt; method and one &lt;em&gt;insert&lt;/em&gt; method.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOHfMU86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kok3sscjwqrdgbnva36p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOHfMU86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kok3sscjwqrdgbnva36p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The annotation &lt;code&gt;@Dao&lt;/code&gt; comes from the DataStax Object Mapper, which will also automatically generate an implementation of this &lt;em&gt;interface&lt;/em&gt; for us. &lt;code&gt;@Insert&lt;/code&gt; and &lt;code&gt;@Select&lt;/code&gt; generate an implementation of methods. Note also the special return type of the &lt;code&gt;findAll&lt;/code&gt; method, &lt;code&gt;PagingIterable&lt;/code&gt;: it‚Äôs the base type of result sets returned by the driver. &lt;/p&gt;

&lt;p&gt;Now let's create a &lt;em&gt;mapper&lt;/em&gt; that is responsible for constructing instances of &lt;em&gt;DAOs&lt;/em&gt;. In this case, will create an instance of &lt;code&gt;CarDAO&lt;/code&gt;. The name will be &lt;code&gt;CarMapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwyzU-_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x3ga94wvvy61312s2gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwyzU-_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x3ga94wvvy61312s2gf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To interact with the saved information or save new information in the database, we will create a &lt;em&gt;REST&lt;/em&gt; endpoint and for that will create a &lt;code&gt;CarResource&lt;/code&gt; class. For our example, we will need a &lt;em&gt;POST&lt;/em&gt; and a &lt;em&gt;GET&lt;/em&gt; method.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DqPyqOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp90fsna29s34j0tpif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DqPyqOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp90fsna29s34j0tpif.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In relation to the image above, let's talk about some details. The resource for access the application will be &lt;code&gt;cars&lt;/code&gt;. We should send JSON for the application and consume JSON of the application. To save or retrieve information, we need access to the database, so for that, we inject the &lt;code&gt;CarDAO&lt;/code&gt; in &lt;code&gt;CarResource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last step will be to configure the information of the database in the application. For that, we will use &lt;code&gt;application.properties&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3l4wBIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iody4zjp0tm1dov2f5v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3l4wBIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iody4zjp0tm1dov2f5v3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we can see the information above when we up our node Scylla. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3w137yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9160elcr75s6p500selq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3w137yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9160elcr75s6p500selq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start the application using &lt;code&gt;mvn package quarkus:dev&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMwtZPUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/carcsm794k55j0j8g192.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMwtZPUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/carcsm794k55j0j8g192.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to use our browser to do a request for the application &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utOhpzKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr0t5l3t1xm9kncebl8n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utOhpzKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr0t5l3t1xm9kncebl8n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saving information&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YA9LoL4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cypr8u3xy47mki7n22fr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YA9LoL4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cypr8u3xy47mki7n22fr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New saved information&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLrcz3OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rr7lgu4m10vpflmnjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLrcz3OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rr7lgu4m10vpflmnjg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tested requests, our application is complete and functional. We can now explore more features.&lt;/p&gt;

&lt;p&gt;The reason we put in our &lt;code&gt;pom.xml&lt;/code&gt; the &lt;code&gt;quarkus-smallrye-health&lt;/code&gt; dependency is automatically add a readiness health check to validate the connection to the Scylla cluster. We can access &lt;a href="http://localhost:8080/q/health/ready"&gt;http://localhost:8080/q/health/ready&lt;/a&gt; to know if our connection is healthy or not.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5NFzVuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61mxej9evkksd91s8bmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5NFzVuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61mxej9evkksd91s8bmi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I will pause the docker that is running ScyllaDB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fT6VeaLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kiq51j317bxy541i1aa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fT6VeaLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kiq51j317bxy541i1aa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And test connection again&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X43rJzXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y78r8r4oi3dcawq7x2xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X43rJzXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y78r8r4oi3dcawq7x2xz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see the metrics of Scylla session and about individual Scylla nodes and for this is enough add a property &lt;code&gt;quarkus.cassandra.metrics.enabled=true&lt;/code&gt; in our &lt;code&gt;application.properties&lt;/code&gt; what we already did. To see metrics we can access &lt;a href="http://localhost:8080/metrics"&gt;http://localhost:8080/metrics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHhak-8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7s48ns07ledu4m21fxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHhak-8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7s48ns07ledu4m21fxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;My intention with this post is to show how we can integrate an application Java with Scylla DB and how easy that is using Quarkus. Some details can explorer yet, like primary key, but we can see this in the next post. I hope that you liked it and any doubt, critics, or suggestions tell me. Will be a pleasure to help you.&lt;/p&gt;

&lt;p&gt;References&lt;br&gt;
&lt;a href="https://quarkus.io/"&gt;https://quarkus.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://quarkus.io/guides/cassandra"&gt;https://quarkus.io/guides/cassandra&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>quarkus</category>
      <category>scylladb</category>
      <category>database</category>
    </item>
    <item>
      <title>Learn SVG animation while saving the planet üåç</title>
      <author>Francesco Pigozzi</author>
      <pubDate>Wed, 26 May 2021 18:03:49 +0000</pubDate>
      <link>https://dev.to/pigozzifr/learn-svg-animation-while-saving-the-planet-234k</link>
      <guid>https://dev.to/pigozzifr/learn-svg-animation-while-saving-the-planet-234k</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@ralphkayden?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ralph (Ravi) Kayden&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/planet-earth?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I made &lt;a href="https://savethebees.cloud"&gt;this&lt;/a&gt; landing page and wanted to make it cool so I used SVG's &lt;code&gt;animateMotion&lt;/code&gt;, docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story"&gt;
  &lt;/a&gt;
  The story
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you find stories a boring stuff, skip this section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a day like many others in &lt;a href="https://www.cubbit.io/"&gt;Cubbit&lt;/a&gt; and suddenly a message sent to the whole company saying that we have started an internal referral program üéâ&lt;/p&gt;

&lt;p&gt;What a perfect opportunity to finally build something I had in mind for quite a long time: a landing page with animated bees, Cubbit's symbol, and strong emphatic messages with the goal to spread our mission as much as possible&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, the best opportunity for everyone to get access to a nice discount code&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creative-process"&gt;
  &lt;/a&gt;
  Creative process
&lt;/h2&gt;

&lt;p&gt;A wise friend once said: &lt;em&gt;programmers, when they have an idea, start coding immediately and this is the worst error you could make!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDg73bu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhw72b55ty7crcyolgr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDg73bu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhw72b55ty7crcyolgr0.png" alt="Untitled"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, a huge step back and we are ready to start designing something and this is the result of the first draft of a sketched minimal bee&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbToDIA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eyn7e429stej8kzsnn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbToDIA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eyn7e429stej8kzsnn5.png" alt="OldBee_(1)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Not very interesting uh? Asking feedback is the best way for you to come to a better solution and so I asked to my girlfriend.&lt;/p&gt;

&lt;p&gt;This is the final result&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--724ROPB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22yogtegb8dubxshenuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--724ROPB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22yogtegb8dubxshenuv.png" alt="Bee"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Much better, right? &lt;strong&gt;Lovely&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-now-its-time-to-start-coding-right-wrong"&gt;
  &lt;/a&gt;
  So, now it‚Äôs time to start coding, right? Wrong
&lt;/h3&gt;

&lt;p&gt;First of all, you wouldn't go far with just a bunch of bees flying around and..&lt;/p&gt;

&lt;p&gt;Wait, HOW THE HECK DO I MAKE THEM FLY? Ok, I will think about this later&lt;/p&gt;

&lt;p&gt;Now it's time to design some interfaces, maybe a story line and, why not, a prototype!&lt;/p&gt;

&lt;p&gt;The very first frame looked something like this, a little bit boring right? I know, but ideas couldn't stop coming!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqdyae7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpm65lifervsw9jx1yt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqdyae7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpm65lifervsw9jx1yt7.png" alt="Frame_28"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And this is the evolution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHqCaIFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi1amkysmh9hr11jx0fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHqCaIFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi1amkysmh9hr11jx0fz.png" alt="Frame_27"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Way better, now the user won't pay much attention to the bees' details and will focus on what I have to say: time for some text!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYQtPwps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kehqq4fnbtpszclkkjgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYQtPwps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kehqq4fnbtpszclkkjgl.png" alt="Frame_29"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is good already but looks a little too flat, without any depth and some bees might interfere with the focus on the text, even if they are blurred.&lt;/p&gt;

&lt;p&gt;The same wise friend I was talking about before gave me a cool &lt;em&gt;trick&lt;/em&gt; that designers adopt when it comes to typography and readability&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Again, some feedback to the rescue!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBa3F2wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5ttodomsl72njjqviu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBa3F2wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf5ttodomsl72njjqviu.png" alt="Frame_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deceIEFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7mpmtvy4fn01gggs8m4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deceIEFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7mpmtvy4fn01gggs8m4.png" alt="Frame_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shadows are magical&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These screens are already the final result that you can enjoy on the live page&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-finally"&gt;
  &lt;/a&gt;
  Coding, finally!
&lt;/h2&gt;

&lt;p&gt;Just to give you some small details, this site is built with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;, &lt;a href="https://reactcommunity.org/react-transition-group/"&gt;React Transition Group&lt;/a&gt; and a lot of sense of humor. It's hosted on &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;Ok, building the interfaces, preparing all the styles and scaffolding the codebase was the simple part and now come the troubles&lt;/p&gt;

&lt;p&gt;Quoting myself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HOW THE HECK DO I MAKE THEM FLY?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this has been the longest and toughest challenge of this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-transform"&gt;
  &lt;/a&gt;
  CSS transform
&lt;/h3&gt;

&lt;p&gt;Ok, the very first thing I tried was to wrap everything into multiple transformed containers with some properties like &lt;code&gt;translate3d&lt;/code&gt; and &lt;code&gt;rotate3d&lt;/code&gt; ; &lt;em&gt;the &lt;code&gt;3d&lt;/code&gt; part is necessary to access the hardware acceleration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And it started to work fine until I decided to animate the bees automatically, with some sort of algorithm and random numbers: a complete failure&lt;/p&gt;

&lt;p&gt;When you deal with CSS and Javascript at the same time, you can't benefit from both with a solution that involves both of them: my problem was the huge load of computations that the main thread had to handle in order to find the next possible point for a bee to move to&lt;/p&gt;

&lt;p&gt;You can already understand that this solutions doesn't scale up very well&lt;/p&gt;

&lt;p&gt;Thank you, next!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-to-the-rescue"&gt;
  &lt;/a&gt;
  SVG to the rescue!
&lt;/h3&gt;

&lt;p&gt;So, after the previous failure I started wondering: &lt;em&gt;isn't there a way to smoothly animate an SVG without using any JS and/or CSS?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After googling a bit (ok I admit it, after googling a lot), I stumbled across this documentation on our beloved MDN: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples"&gt;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate#examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And everything started to be magical and possible again üåà&lt;/p&gt;

&lt;p&gt;This article represents the exact solution I was looking for!&lt;/p&gt;

&lt;p&gt;The problem is not to move the bees in a random set of points generated at runtime; instead, you should focus on a set of already defined paths and let the SVG magic do the rest üßô‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;This is the export of the SVG of the bee with the path&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxaorG1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx52wuajr75fn4ifzpsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxaorG1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx52wuajr75fn4ifzpsq.png" alt="BeeAndPath"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-final-code-of-the-bee"&gt;
  &lt;/a&gt;
  The final code of the Bee
&lt;/h3&gt;

&lt;p&gt;I won't make it any longer, here you can find the resulting code of a React component, with CSS transforms, SVG elements and animations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vibration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`
    from,
    to {
    transform: translate3d(0, 0, 0);
    }
    10%,
    30%,
    50%,
    70%,
    90% {
        transform: translate3d(-3px, 0, 0);
    }
    20%,
    40%,
    60%,
    80% {
        transform: translate3d(1px, 0, 0);
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VibratingWings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="s2"&gt;`
    animation: 1s &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;vibration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; infinite;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TransformProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BeeSVG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TransformProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`translate3d(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, 0px) rotate3d(0, 0, 1, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;TransformProps&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;transformProps&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BeeSVG&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;transformProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"422"&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"552"&lt;/span&gt;
            &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 422 552"&lt;/span&gt;
            &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
            &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#clip0)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
                    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"motionPath"&lt;/span&gt;
                    &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M80.4017 146.011C80.4018 1.26631 376.903 53.5395 339.785 146.011C302.666 238.483 69.0275 297.382 80.4017 402.125C91.776 506.868 339.784 543.688 339.785 402.125C339.785 260.562 80.4017 290.757 80.4017 146.011Z"&lt;/span&gt;
                    &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;
                    &lt;span class="na"&gt;strokeOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#clip1)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M0 13L3 11.268L3 14.7321L0 13Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mask&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mask0"&lt;/span&gt; &lt;span class="na"&gt;mask&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alpha"&lt;/span&gt; &lt;span class="na"&gt;maskUnits&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"userSpaceOnUse"&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="na"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"13"&lt;/span&gt; &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#E6CC74"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url(#mask0)"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10 21C5.58172 21 2 17.4183 2 13C2 8.58172 5.58172 5 10 5C14.4183 5 18 8.58172 18 13C18 17.4183 14.4183 21 10 21Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#E6CC74"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M8 -3L8 29H5L5 -3L8 -3Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M14 -3L14 29H11L11 -3L14 -3Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;VibratingWings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10.4645 3.53551C12.0266 5.09761 12.0266 7.63027 10.4645 9.19236C8.90238 10.7545 6.36972 10.7545 4.80762 9.19236C3.24552 7.63027 3.24552 5.09761 4.80762 3.53551C6.36972 1.97341 8.90238 1.97341 10.4645 3.53551Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M11.1716 2.8284C12.7337 4.3905 12.7337 6.92316 11.1716 8.48526C9.60953 10.0474 7.07687 10.0474 5.51477 8.48526C3.95268 6.92316 3.95268 4.3905 5.51477 2.8284C7.07687 1.26631 9.60953 1.26631 11.1716 2.8284Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M10.4645 22.4853C8.90238 24.0474 6.36972 24.0474 4.80762 22.4853C3.24552 20.9232 3.24552 18.3906 4.80762 16.8285C6.36972 15.2664 8.90238 15.2664 10.4645 16.8285C12.0266 18.3906 12.0266 20.9232 10.4645 22.4853Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M11.1716 23.1924C9.60947 24.7545 7.07681 24.7545 5.51471 23.1924C3.95262 21.6303 3.95262 19.0976 5.51471 17.5355C7.07681 15.9734 9.60947 15.9734 11.1716 17.5355C12.7337 19.0976 12.7337 21.6303 11.1716 23.1924Z"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#B5D2FF"&lt;/span&gt; &lt;span class="na"&gt;fillOpacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.8"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;VibratingWings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M16.5 11C16.5 11 19.25 10.5 20 10C20.75 9.50002 21 8.00002 21 8.00002"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt; &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.2"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M16.5 15C16.5 15 19.25 15.5 20 16C20.75 16.5 21 18 21 18"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#434141"&lt;/span&gt; &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.2"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rotate */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animateMotion&lt;/span&gt; &lt;span class="na"&gt;dur&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;repeatCount&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"indefinite"&lt;/span&gt; &lt;span class="na"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mpath&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#motionPath"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animateMotion&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"clip0"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"422"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"552"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"clip1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;rect&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"26.0208"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"22"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"translate(22) rotate(90)"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;clipPath&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BeeSVG&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Bee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;BeeSVG&lt;/code&gt; is the wrapper around the SVG and it accepts some props in order to make the entire SVG transformable; &lt;em&gt;in order to place the bees in a random position and rotation inside the page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;VibratingWings&lt;/code&gt; is a styled &lt;code&gt;g&lt;/code&gt; element that lets the wings simulate a vibration&lt;/p&gt;

&lt;p&gt;&lt;code&gt;animateMotion&lt;/code&gt; with &lt;code&gt;rotate="auto"&lt;/code&gt; is my best friend for this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;p&gt;Ok, I have to admit that I like a lot this final solution but unfortunately it's not performing very well neither; even though it runs at 60fps on average devices&lt;/p&gt;

&lt;p&gt;I think that in the next releases I'll think about moving to WebGL in order to benefit from real hardware acceleration&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-its-your-turn"&gt;
  &lt;/a&gt;
  Now it's your turn!
&lt;/h2&gt;

&lt;p&gt;Let me know what you think about this article and, of course, don't forget to visit my, and Cubbit's, pages about the real problem: &lt;strong&gt;our world is suffering and the bees are dying&lt;/strong&gt; üêùüåé&lt;/p&gt;

&lt;p&gt;Don't let this happen, take action! Whatever you can do is enough, you don't need to make anything big!&lt;/p&gt;

&lt;p&gt;Start with the simple things, like me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ill-bee-around"&gt;
  &lt;/a&gt;
  I'll bee around
&lt;/h2&gt;

&lt;p&gt;Hope that you enjoyed this little story and have learned something new!&lt;/p&gt;

&lt;p&gt;Leave a ü¶Ñ, if so, and a üêù in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Quick Tip: Formatting Elixir templates</title>
      <author>Murphy Randle</author>
      <pubDate>Wed, 26 May 2021 17:51:29 +0000</pubDate>
      <link>https://dev.to/mrmurphy/quick-tip-formatting-elixir-templates-hed</link>
      <guid>https://dev.to/mrmurphy/quick-tip-formatting-elixir-templates-hed</guid>
      <description>&lt;p&gt;Finding a VS Code plugin to automatically format my Elixir templates (.eex, .leex) has been some trouble. The Elixir Language Server extension doesn't do this by default. I've been using "Beautify" up until now, because at least it properly formats HTML. However, it'd leave Elixir's special forms (if, for, etc...) completely un-indented:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UAxwOtnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlywmhzwu6kdrl14bk8q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAxwOtnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlywmhzwu6kdrl14bk8q.jpeg" alt="Un-indented code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading through this issue, it's apparant that I'm not the only one who wants some indenting from a formatter: &lt;a href="https://github.com/timmhirsens/vscode-elixir/issues/129"&gt;https://github.com/timmhirsens/vscode-elixir/issues/129&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This comment solved it for me: &lt;a href="https://github.com/timmhirsens/vscode-elixir/issues/129#issuecomment-653891686"&gt;https://github.com/timmhirsens/vscode-elixir/issues/129#issuecomment-653891686&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing &lt;a href="https://marketplace.visualstudio.com/items?itemName=ouven.vscode-yab-for-eex-leex"&gt;https://marketplace.visualstudio.com/items?itemName=ouven.vscode-yab-for-eex-leex&lt;/a&gt; and the &lt;code&gt;htmlbeautifier&lt;/code&gt; gem, I configured the default formatting for my .leex files by bringing up the command palette, typing "format document with", then choosing "Configure Default Formatter...", and then selecting "YAB for eex/leex".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Adiu60RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz0d41cs8n4a2i9sqskk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Adiu60RQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz0d41cs8n4a2i9sqskk.jpeg" alt="Command palette choosing new default formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, after a file save, my indentation comes back! Well, mostly. Sadly there's no indentation support for &lt;code&gt;form_for/3&lt;/code&gt;, since it's just a variable assignment folled at the end by a &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tag, but having indentation for the rest is a huge help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHOXrqt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vglq659m9ea2gfsx8f0p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHOXrqt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vglq659m9ea2gfsx8f0p.jpeg" alt="Indentation returned"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a Distributed Turn-Based Game System in Elixir</title>
      <author>Fly.io</author>
      <pubDate>Wed, 26 May 2021 17:38:25 +0000</pubDate>
      <link>https://dev.to/superfly/building-a-distributed-turn-based-game-system-in-elixir-24p1</link>
      <guid>https://dev.to/superfly/building-a-distributed-turn-based-game-system-in-elixir-24p1</guid>
      <description>&lt;p&gt;One of the best things about building web applications in Elixir is LiveView, the &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt; feature that makes it easy to create live and responsive web pages without all the layers people normally build.&lt;/p&gt;

&lt;p&gt;Many great &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; examples exist. They often show the ease and power of LiveView but stop at multiple browsers talking to a single web server. I wanted to go further and create a fully clustered, globally distributed, privately networked, secure application. What's more, I wanted to have fun doing it.&lt;/p&gt;

&lt;p&gt;So I set out to see if I could create a fully distributed, clustered, privately networked, global game server system. &lt;strong&gt;Spoiler Alert: I did&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-didnt-have-to-build"&gt;
  &lt;/a&gt;
  What I didn't have to build
&lt;/h2&gt;

&lt;p&gt;What I find remarkable is what I &lt;strong&gt;didn't&lt;/strong&gt; need to build.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;didn't&lt;/strong&gt; build a Javascript front end using something like React.js or Vue.js. That is the typical approach. Building a JS front-end means I need JS components, a front-end router, a way to model the state in the browser, a way to transfer player actions to the server and a way to receive state updates from the server.&lt;/p&gt;

&lt;p&gt;On the server, I &lt;strong&gt;didn't&lt;/strong&gt; build an API. Typically that would be REST or GraphQL with a JSON structure for transferring data to and from the front-end.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;didn't&lt;/strong&gt; need other external systems like Amazon SQS, Kafka, or even just Redis to pass state between servers. This means the entire system requires less cross-technology knowledge or specialized skills to build and maintain it. I used &lt;code&gt;Phoenix.PubSub&lt;/code&gt; which is built on technology already in Elixir's VM, called the BEAM. I used the Horde library to provide a distributed process registry for finding and interacting with GameServers.&lt;/p&gt;

&lt;p&gt;As for &lt;a href="https://fly.io/docs/reference/privatenetwork"&gt;Fly.io's WireGuard connected private network&lt;/a&gt; between &lt;a href="https://fly.io/docs/reference/regions/"&gt;geographically distant regions&lt;/a&gt; and data centers? I don't even know how I would have done that in AWS, which is why I've always given up on the idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did-build"&gt;
  &lt;/a&gt;
  What I did build
&lt;/h2&gt;

&lt;p&gt;What I built was just a proof of concept, but I'm surprised at how it came together. I ended up with a platform that can host many different types of games, all of which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be multi-player&lt;/li&gt;
&lt;li&gt;Offer a &lt;a href="https://en.wikipedia.org/wiki/Jackbox_Games"&gt;Jackbox&lt;/a&gt;-style 4-letter game code system&lt;/li&gt;
&lt;li&gt;Have on-demand game and match creation&lt;/li&gt;
&lt;li&gt;With a fast, response UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, just one little extra detail: the platform supports multiple connected servers operating together in clusters. Elixir for the win!&lt;/p&gt;

&lt;p&gt;I created this as an open source project on Github, so you can check it out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fly-apps/tictac"&gt;https://github.com/fly-apps/tictac&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology"&gt;
  &lt;/a&gt;
  Technology
&lt;/h2&gt;

&lt;p&gt;I've worked with enough companies and teams to imagine several different approaches to build a system like this. Those approaches would all require large multi-disciplinary teams like a front-end JS team, a backend team, a DevOps team, and more. In contrast, I set out to do this by myself, in my spare time, and with a whole lot of "life" happening too.&lt;/p&gt;

&lt;p&gt;Here's what I chose to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://elixir-lang.org/"&gt;Elixir programming language&lt;/a&gt; ‚Äì A dynamic, functional language for building scalable and maintainable applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt; ‚Äì Elixir's primary web framework&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; ‚Äì Rich, real-time user experiences with server-rendered HTML delivered by websockets&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitwalker/libcluster"&gt;libcluster&lt;/a&gt; ‚Äì Automatic cluster formation/healing for Elixir applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/derekkraan/horde"&gt;Horde&lt;/a&gt; ‚Äì Elixir library that provides a distributed and supervised process registry.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fly.io/"&gt;Fly.io&lt;/a&gt; ‚Äì Hosting platform that enables private networked connections and multi-region support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#application-architecture"&gt;
  &lt;/a&gt;
  Application Architecture
&lt;/h2&gt;

&lt;p&gt;There are many guides to &lt;a href="https://www.google.com/search?hl=en&amp;amp;q=getting%20started%20with%20phoenix%20liveview"&gt;getting started with LiveView&lt;/a&gt;, I'm not focusing on that here. However, for context, this demonstrates the application architecture when running on a local machine.&lt;/p&gt;

&lt;p&gt;The "ABCD" in the graphic is a running game identified by the 4-letter code "ABCD".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTcQWh26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-single-node-game-state-and-gen-server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTcQWh26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-single-node-game-state-and-gen-server.png" alt="local system architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's walk it through.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A player uses a web browser to view the game board. The player clicks to make a move.&lt;/li&gt;
&lt;li&gt;The browser click triggers an event in the player's LiveView. There is a bi-directional websocket connection from the browser to LiveView.&lt;/li&gt;
&lt;li&gt;The LiveView process sends a message to the game server for the player's move.&lt;/li&gt;
&lt;li&gt;The GameServer uses &lt;code&gt;Phoenix.PubSub&lt;/code&gt; to publish the updated state of game ABCD.&lt;/li&gt;
&lt;li&gt;The player's LiveView is subscribed to notifications for any updates to game ABCD. The LiveView receives the new game state. This automatically triggers LiveView to re-render the game immediately pushing the UI changes out to the player's browser.&lt;/li&gt;
&lt;li&gt;All connected players see the new state of the board and game.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#we-need-a-game"&gt;
  &lt;/a&gt;
  We need a game
&lt;/h2&gt;

&lt;p&gt;I needed a simple game to play and model for this game system. I chose Tic-Tac-Toe. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's simple to understand and play.&lt;/li&gt;
&lt;li&gt;Easy to model.&lt;/li&gt;
&lt;li&gt;Doesn't bog down the project with designing a game.&lt;/li&gt;
&lt;li&gt;Quick to play through and test it being "over".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to emphasize that this system can be used to build &lt;strong&gt;many&lt;/strong&gt; turn-based, multi-user games! This simple Tic-Tac-Toe game covers all of the basics we will need. Besides, &lt;a href="https://www.youtube.com/watch?v=xHObMqUdBa8"&gt;Tic-Tac-Toe was even made into a TV Show&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This is what the game looks like with 2 players.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnduopNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://fly.io/public/images/tictac_local_playing.gif%3Fcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnduopNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://fly.io/public/images/tictac_local_playing.gif%3Fcard" alt="animated gif demoing game play"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The game system works great locally. Let's get it deployed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-on-flyio"&gt;
  &lt;/a&gt;
  Hosting on Fly.io
&lt;/h2&gt;

&lt;p&gt;Following the &lt;a href="https://fly.io/docs/getting-started/elixir/"&gt;Fly.io Getting Started Guide for Elixir&lt;/a&gt;, I created a Dockerfile to generate a release for my application. Check out the repo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fly-apps/tictac"&gt;https://github.com/fly-apps/tictac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The README file outlines both how to run it locally and deploy it globally on Fly.io.&lt;/p&gt;

&lt;p&gt;What is special about hosting it on Fly.io? Fly makes it easy to deploy a server geographically closer to the users I want to reach. When a user goes to my website, they are directed to &lt;strong&gt;my nearest server&lt;/strong&gt;. This means any responsive LiveView updates and interactions will be even faster and smoother because the regular TCP and websocket connections are just that much physically closer.&lt;/p&gt;

&lt;p&gt;But for the game, I wanted there to be a single source of truth. That GameServer can only exist in one place. Supporting a private, networked, and fully clustered environment means my server in the EU can communicate with the GameServer that might be running in the US. But my EU players have a fast and responsive UI connection close to them. This provides a better user experience!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYMKyghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-fly-region-cluster.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYMKyghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fly.io/public/images/tictac-fly-region-cluster.png" alt="Fly region clustering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is what I find compelling about Fly.io for hosting Elixir applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secure HTTPS automatically using Let's Encrypt. I didn't do anything to set that up!&lt;/li&gt;
&lt;li&gt;Distributed nodes use &lt;a href="https://fly.io/docs/reference/privatenetwork/"&gt;private network&lt;/a&gt; connections through &lt;a href="https://www.wireguard.com/"&gt;WireGuard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nodes auto-clustered using &lt;code&gt;libcluster&lt;/code&gt; and the &lt;code&gt;DNSPoll&lt;/code&gt; strategy. (See &lt;a href="https://github.com/fly-apps/tictac/blob/main/config/runtime.exs#L25"&gt;here for details&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Geographically distributed servers near my users are clustered together.&lt;/li&gt;
&lt;li&gt;This was the easiest multi-region yet still privately networked solution I've ever seen! (I have experience with AWS, DigitalOcean, and Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For a proof-of-concept, I couldn't be happier! In a short time, by myself, I created a working, clustered, distributed, multi-player, globe-spanning gaming system!&lt;/p&gt;

&lt;p&gt;The pairing of Elixir + LiveView + Fly.io is excellent. Using Elixir and LiveView, I built a powerful, resilient, and distributed system in orders of magnitude shorter time and effort. Deploying it on Fly.io let let me easily do something I would never have even tried before, namely, deploying servers in regions around the globe while keeping the application privately networked and clustered together.&lt;/p&gt;

&lt;p&gt;Whenever I've thought of creating a service with a global audience, I'd usually scapegoat the idea saying, "Well I don't know how I'd get the translations, so I'll just stick with the US. It's a huge market anyway." In short, I've never even considered a globally connected application because it would be "way too hard".&lt;/p&gt;

&lt;p&gt;But here, with Elixir + LiveView + Fly.io, I did something by myself in my spare time that larger teams using more technologies struggle to deliver. I'm still mind blown by it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-build"&gt;
  &lt;/a&gt;
  What will you build?
&lt;/h2&gt;

&lt;p&gt;Tic-Tac-Toe is a simple game and doesn't provide "hours of fun". I know &lt;strong&gt;you&lt;/strong&gt; can think of a much cooler and more interesting multi-player, turn-based game that you could build on a system like this. What do you have in mind?&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>liveview</category>
      <category>phoenix</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>AWS Exam Preparation: Strategies and Techniques to prevent you from Pulling your Hair Out! - Part 1</title>
      <author>LionelPJ</author>
      <pubDate>Wed, 26 May 2021 17:29:22 +0000</pubDate>
      <link>https://dev.to/lionelpj/aws-exam-preparation-strategies-and-techniques-to-prevent-you-from-pulling-your-hair-out-part-1-5ki</link>
      <guid>https://dev.to/lionelpj/aws-exam-preparation-strategies-and-techniques-to-prevent-you-from-pulling-your-hair-out-part-1-5ki</guid>
      <description>&lt;p&gt;This is a two part post. This article delves into common problems and strategies to overcome them. May be in the process save you some hair loss. In Part 2 of this post, we will see some answering techniques that will help you through taking the exam.&lt;/p&gt;

&lt;p&gt;To set the stage for the problems we face, imagine that you have finally reached‚Ä¶&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-day-of-the-exam"&gt;
  &lt;/a&gt;
  The Day of the Exam
&lt;/h1&gt;

&lt;p&gt;So you get to the exam and start answering questions; you are trying to settle down. It's not always that you are calm and ready to go. This article is about problems that you may face and how to prepare, so you are ready when you face them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#common-exam-problems"&gt;
  &lt;/a&gt;
  Common Exam Problems
&lt;/h1&gt;

&lt;p&gt;Let's go through some of the issues frequently faced on exam day. In this section, we will see how we can prepare ourselves based on this awareness.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keo91HTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h8wv3u854auzsfhkday.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keo91HTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h8wv3u854auzsfhkday.jpg" alt="Racking your brains"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-exam-is-hard"&gt;
  &lt;/a&gt;
  The exam is hard!
&lt;/h3&gt;

&lt;p&gt;Is it? Or are the questions bordering or infringing on topics you are not aware of? Some questions can be hard and needs more focus. Knowing your content and following the syllabus as you study will help. Take a deep breath - by this time you must be prepared for this!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#answer-impulsively"&gt;
  &lt;/a&gt;
  Answer impulsively
&lt;/h3&gt;

&lt;p&gt;Have you had the feeling that you can't read anything and your mind is set on what the problem may be or you pre-judge that this is the option? You stop reading or you scan for words related to the option you have in mind? &lt;em&gt;Are you sure that is what they are asking?&lt;/em&gt;&lt;br&gt;
The problem is that you can't shake it off. What if I tell you that even if it doesn't feel this way, you practice this every time you take a practice test, especially when you have seen a variant of this question. You do not stop to re-evaluate if this is true? It gets harder when you have possibly seen the answer earlier and it clouds your judgement. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trick-questions"&gt;
  &lt;/a&gt;
  Trick questions
&lt;/h3&gt;

&lt;p&gt;AWS makes it a point to really test your knowledge. The tricks span across multiple ways.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the keyword &lt;em&gt;not&lt;/em&gt; in the question - To make it complicated out of the 4 options there may be 2 or more answer options also containing the word &lt;em&gt;NOT&lt;/em&gt;. Double negatives are very hard to digest. The other positive answer options do not help. Why? Because you go between positive and negative - back and forth making it confusing!&lt;/li&gt;
&lt;li&gt;Common and repetitive phrases - This makes it hard because you have to closely watch what is different among them. In a hurry it's very easy to miss them and answer wrong.&lt;/li&gt;
&lt;li&gt;Verbiage - The sentences are tricky thanks to the English language; and&lt;/li&gt;
&lt;li&gt;Technical Knowledge - It can also be tricky when your question infringes on the border of your knowledge and you do not know what is this really about leaving you guessing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#overconfidence"&gt;
  &lt;/a&gt;
  Overconfidence
&lt;/h3&gt;

&lt;p&gt;Many years ago, I was preparing for the Sun Certified Java Developer exam along with a friend. While I carefully worked on the project, my friend felt he finished the project and was about to submit the exam to be graded. I appreciated his confidence, but begged him to let me write a simple program to test his code. After a lot of convincing him to let me verify his solution. In 30 minutes or less, we found that his code failed - miserably and if he would have submitted the solution, he would have failed. How is this relevant to this exam? The concept is still the same. Don't be overconfident. Let your tests speak for itself. You will know if you are ready when you are getting 3 consecutive scores of 90% or above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sickness"&gt;
  &lt;/a&gt;
  Sickness
&lt;/h3&gt;

&lt;p&gt;Let me say this. If you know that you are sick or feeling sick postpone the exam - please! Don't attend it. Give yourself a chance to heal. If you feel horrible on the day of the exam, call Pearson or PSI and ask what are your options. If you still decide to take it, remember the risk is higher.&lt;br&gt;
When I wrote my solution architect associate exam, I had a severe headache that morning. Knowing that I could not concentrate with a heavy headache, I tried some sample tests about 45 minutes before the exam to get used to the feeling and to warm myself up. This helped me in the exam. My headache remained throughout the course of the exam, but I still passed it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter Syndrome
&lt;/h3&gt;

&lt;p&gt;This is very real. This is when you start doubting yourself and you feel you are not worthy. It has happened to me twice on two of the Azure exams. I had this constant thought stuck in my head that I am not an azure architect. Of the 6 exams that I wrote, I failed on these 2 when I doubted myself. Postpone if you are not in the right space of mind. Do more hands-on activities. When you are ready schedule again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strategies-and-techniques"&gt;
  &lt;/a&gt;
  Strategies and Techniques
&lt;/h2&gt;

&lt;p&gt;Now let's talk about common strategies to handle these problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hU7VOFPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fb5y19acr5rqft36028q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hU7VOFPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fb5y19acr5rqft36028q.jpg" alt="Studies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actually-read-the-syllabus"&gt;
  &lt;/a&gt;
  Actually read the syllabus
&lt;/h3&gt;

&lt;p&gt;The most common and the most important foundation is to gain a complete understanding of the syllabus. Know it well. I would suggest that you go through it more than once. The first time you gain familiarity. On the second pass, you may find gaps or better understanding. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make Notes&lt;/em&gt;. Remember, it should be very short or you can't read these before the exam. No one wants to read a novel before the exam!! Try to write a phrase or a sentence that reminds you of the concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benchmark-your-progress"&gt;
  &lt;/a&gt;
  Benchmark your progress
&lt;/h3&gt;

&lt;p&gt;I have been teaching AWS within my company for multiple students for the last two years. The first thing we always do is to take a sample test before we start learning for the exam. The deal is to never ever get a lower score again as this becomes the threshold. Every time a new benchmark is taken, the new score becomes the benchmark. Do as many benchmarks as you see fit. I would suggest that you do this at the beginning and after you finish 2 rounds of learning content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-often"&gt;
  &lt;/a&gt;
  Test often
&lt;/h3&gt;

&lt;p&gt;That is right. Test often! Find gaps. See if you can find patterns and relate it to domains. If you do badly at the domain, read or watch those portions again. If these are specific topics, then learn them with an intention to understand what it does and when it is used. This will take you a long way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-using-different-styles"&gt;
  &lt;/a&gt;
  Learn using different styles
&lt;/h3&gt;

&lt;p&gt;While some of us love to watch videos, some like to read books. My suggestion - try them all. Each one of the styles comes with its own unique advantages. And sometimes by this practice the topic gets deeper and you may understand even better. Some of the techniques may include - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watching AWS re:Invent videos on YouTube&lt;/li&gt;
&lt;li&gt;Watching premium content courses. In my case, I was introduced to Adrian Cantrill a few years ago when he worked for Linux Academy [now a part of A Cloud Guru]. I followed him along and now he has his own site &lt;a href="https://learn.cantrill.io/courses"&gt;learn.cantrill.io&lt;/a&gt;. He is a person who really built my foundation and helped me on my AWS journey and I would recommend this to anyone who also wants to learn and become better at their craft.&lt;/li&gt;
&lt;li&gt;Reading the official guides by AWS that can be purchased from Amazon or read on &lt;a href="https://www.oreilly.com/"&gt;O'reilly&lt;/a&gt; if you have a subscription.&lt;/li&gt;
&lt;li&gt;Joining live event sessions on AWS. As an example, if you have a subscription with O'reilly, you can attend any of the advertised live events with guest speakers. &lt;/li&gt;
&lt;li&gt;Watch or attend AWS events. They often post articles on LinkedIn or other social media.&lt;/li&gt;
&lt;li&gt;Watching or reading material on &lt;a href="https://www.aws.training/"&gt;aws.training&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Reading white papers&lt;/li&gt;
&lt;li&gt;Hands-On - a lot of it!!!&lt;/li&gt;
&lt;li&gt;Do a project on topics you like. For example, I authored a liveProject for manning.com called &lt;a href="https://www.manning.com/liveproject/automating-infrastructure-for-an-e-commerce-website-with-terraform-and-aws?query=terraform"&gt;Automating Infrastructure for an E-commerce Website with Terraform and AWS&lt;/a&gt;. This builds a network from scratch, then I made a website from scratch using ECS, automated it using CodePipeline and performed some backup strategies using serverless concepts. This option can really help you in real life where you have to apply what you learned!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#practice-answering-techniques-using-logic-not-memory"&gt;
  &lt;/a&gt;
  Practice Answering Techniques using logic not memory
&lt;/h3&gt;

&lt;p&gt;Make this a point. The real exam doesn't test your memory. They want you to evaluate the answers. So, while you do those practice exams, don't memorize. Use your logic, even if you think you know what the question is about. The art of answering and the constant application of figuring out will help you in the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUSKQC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tit3imv41ytqglvkkly2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUSKQC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tit3imv41ytqglvkkly2.jpg" alt="Tricky as Jenga"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-notes-on-common-problems"&gt;
  &lt;/a&gt;
  Additional Notes on Common Problems
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#the-exam-is-hard-how-can-i-handle-this"&gt;
  &lt;/a&gt;
  The Exam is Hard - How can I handle this?
&lt;/h4&gt;

&lt;p&gt;This is something that you must prepare for ahead of time. Some of the common tips are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Download the &lt;a href="https://aws.amazon.com/certification/certification-prep/"&gt;exam guide&lt;/a&gt; from this site. Understand how many domains exist in your exam and how the weightage varies across the domains.&lt;/li&gt;
&lt;li&gt; Go through the whole syllabus at least 2 times.&lt;/li&gt;
&lt;li&gt; Don't assume you know it all. Try a test to gain some quick feedback on how much knowledge you have retained. Please don't memorize. Instead, use logic to figure out your answers. Your main exam will not have these questions verbatim. So don't waste your time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#i-am-driven-by-impulses-how-can-i-handle-this"&gt;
  &lt;/a&gt;
  I am driven by Impulses - How can I handle this?
&lt;/h4&gt;

&lt;p&gt;Let me tell you this - the real exam is not about &lt;em&gt;memorizing&lt;/em&gt; those answers. During the exam, the toolset you need to bring to the table is - the ability to figure it out. To do this well in any exam, you need to take it back to that same practice test where you thought you got this - and think along the following lines - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Why is this option right?&lt;/em&gt; or &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Why are the options wrong?&lt;/em&gt; or &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Are there keywords in the question that justify my answer choice?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#i-find-the-exam-tricky-how-can-i-handle-this"&gt;
  &lt;/a&gt;
  I find the exam tricky - How can I handle this?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When you see the word &lt;em&gt;NOT&lt;/em&gt; - it's time to really figure out if you want to fall for this kind of trap. It's best to first flag the question before you attempt any further. Then go about figuring &lt;em&gt;what are they really asking&lt;/em&gt; Translate this to simple words in your mind. For each option, if you translate it to the negative or the positive version of it and answer if this is a possibility? Would this be a candidate? And then remove choices that are noisy. Finally, sweep again to match keywords from the question that helps you qualify the right answer. Personally, I like to translate it all to a positive statement as it's easy for me to wrap my head around it. We will see examples of this later in one of the answering techniques.&lt;/li&gt;
&lt;li&gt;Common phrases in questions have no additional value. Ignore them. And really look at what is different in each option. We will also look at an example in an answering technique called &lt;em&gt;Answers First&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;The classical tricks include adding a lot of disruptors or noise in the question or answers or both. It's all about figuring out &lt;em&gt;what do they really want?&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;The tricks around technical knowledge really verify your understanding of the service. Do you know your subject well to spot these errors?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see some of these as examples, please read the second part of the post, where I show you how to handle each of these scenarios [coming soon].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[about Lionel Pulickal]&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Lionel is a Cloud Infrastructure Analyst who has worked in the IT industry since 1997. He has all the 3 AWS associate level exams and the solution architect professional exam under his belt. He loves hands-on and always loves to share the knowledge he has gained over the years.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>answeringtechniques</category>
      <category>passingexams</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Test Automation with Angie Jones</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 26 May 2021 17:03:38 +0000</pubDate>
      <link>https://dev.to/devteam/test-automation-with-angie-jones-1g5h</link>
      <guid>https://dev.to/devteam/test-automation-with-angie-jones-1g5h</guid>
      <description>&lt;p&gt;A new episode is DevDiscuss is here ‚Äî and I was lucky enough to have &lt;a href="//dev.to/molly"&gt;Molly Struve&lt;/a&gt;, Site Reliability Engineer at Forem, join me as co-host this week. &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e3-the-future-of-automation"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E3 - The Future of Automation&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e3-the-future-of-automation" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e3-the-future-of-automation" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e3-the-future-of-automation" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e3-the-future-of-automation" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e3-the-future-of-automation"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e3-the-future-of-automation"&gt;
      &lt;img id="episode-profile-image" alt="S5:E3 - The Future of Automation" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;As we discuss in the episode, test automation is the use of separate software to run tests automatically, and collect and analyze the results to improve future software quality. Who better to help us explore test automation than &lt;strong&gt;&lt;a href="//dev.to/techgirl1908"&gt;Angie Jones&lt;/a&gt;, Senior Director of Developer Relations at Applitools and creator of Test Automation University&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;A huge thanks to &lt;a class="mentioned-user" href="https://dev.to/techgirl1908"&gt;@techgirl1908&lt;/a&gt;
 for being a fantastic guest on DevDiscuss! &lt;/p&gt;

&lt;p&gt;We hope you enjoy the episode üéß &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devdiscuss/id151305388"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/5RCiCKgG7wHOo3RDcRgaMO"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzM2?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjohtiS6OfwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e3-the-future-of-automation-brOUmyhtZLC/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=163324441"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devdiscuss/episodes/166"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  üó£Ô∏èüó£Ô∏èüó£Ô∏è
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>testing</category>
    </item>
    <item>
      <title>¬øC√≥mo mejorar el rendimiento de una aplicaci√≥n hecha en Django?</title>
      <author>Eduardo Zepeda</author>
      <pubDate>Wed, 26 May 2021 16:52:15 +0000</pubDate>
      <link>https://dev.to/neon_affogato/como-mejorar-el-rendimiento-de-una-aplicacion-hecha-en-django-b8e</link>
      <guid>https://dev.to/neon_affogato/como-mejorar-el-rendimiento-de-una-aplicacion-hecha-en-django-b8e</guid>
      <description>&lt;p&gt;¬øTu aplicaci√≥n hecha en Django o la de tu compa√±ia anda lenta? Lo anterior puede tener m√∫ltiples causas: un servidor con hardware insuficiente, un paquete de hosting que necesite un upgrade para procesar mayor tr√°fico, un servidor mal configurado (en caso de que sea nginx &lt;a href="https://coffeebytes.dev/nginx-keepalive-gzip-http2-mejor-rendimiento-en-tu-sitio-web/"&gt;visita mi entrada donde explico como configurarlo para un mayor rendimiento&lt;/a&gt;), o simplemente una aplicaci√≥n no optimizada para dar el m√°ximo rendimiento en django. En esta entrada te explico algunos cambios que puedes implementar para mejorar el rendimiento de Django.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reducir-cuellos-de-botella"&gt;
  &lt;/a&gt;
  Reducir cuellos de botella
&lt;/h2&gt;

&lt;p&gt;El acceso a la base de datos suele ser el cuello de botella de la mayor√≠a de las aplicaciones. &lt;strong&gt;La acci√≥n m√°s importante a realizar es reducir el n√∫mero de queries y el impacto de cada una de estas.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es bastante com√∫n escribir c√≥digo que ocasiones m√∫ltiples consultas a la base de datos, as√≠ como b√∫squedas bastante costosas.&lt;/p&gt;

&lt;p&gt;Identifica que consultas se est√°n haciendo en tu aplicaci√≥n usando &lt;a href="https://github.com/jazzband/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; y red√∫celas, puedes usar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;select_related()&lt;/strong&gt; para evitar m√∫ltiples b√∫squedas en relaciones tipo llave for√°nea o uno a uno&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;prefetch_related()&lt;/strong&gt; para prevenir b√∫squedas excesivas en relaciones muchos a muchos o muchos a uno&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;django_annotate()&lt;/strong&gt; para agregar informaci√≥n a cada objecto de una consulta. &lt;a href="https://coffeebytes.dev/cuando-usar-annotate-y-aggregate-en-django/"&gt;Tengo una entrada donde explico annotate y aggregate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;django_aggregate()&lt;/strong&gt; para procesar toda la informaci√≥n de una sola consulta en un solo dato (sumatoria, promedios).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Objeto Q&lt;/strong&gt; para unir consultas por medio de OR o AND directamente desde la base de datos&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expresiones F&lt;/strong&gt; para realizar operaciones a nivel base de datos en lugar de en c√≥digo Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67dJ8nC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdfbdzbnapfiazohvr7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67dJ8nC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdfbdzbnapfiazohvr7x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Django debug tool bar mostrando las queries SQL de una petici√≥n en Django&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# review/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_reviews&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product__id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c1"&gt;# Ahora no se tocar√° la base de datos cada que se use review.user
&lt;/span&gt;    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usa-paginaci%C3%B3n"&gt;
  &lt;/a&gt;
  Usa paginaci√≥n
&lt;/h3&gt;

&lt;p&gt;Probablemente suene bastante obvio, a√∫n as√≠, no devuelvas todos los resultados de tu base de datos para un modelo dado, usa el objeto paginator que ofrece Django, o limita los resultados de una b√∫squeda a unos cuantos, no necesitas devolver toda una tabla de una base de datos si a tu usuario solo le interesan los primeros registros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# review/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt; 
    &lt;span class="n"&gt;paginate_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'review_list'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usa-%C3%ADndices"&gt;
  &lt;/a&gt;
  Usa √≠ndices
&lt;/h3&gt;

&lt;p&gt;Entiende tus queries m√°s complejas e intenta crear √≠ndices para ellas. El √≠ndice har√° tus b√∫squedas en Django m√°s r√°pidas, pero tambi√©n ralentizar√° las creaciones y actualizaciones de nueva informaci√≥n.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#remueve-middleware-que-no-uses"&gt;
  &lt;/a&gt;
  Remueve middleware que no uses
&lt;/h3&gt;

&lt;p&gt;Cada middleware implica un paso extra en cada petici√≥n web, por lo que remover todos aquellos middlewares que no uses supondr√° una ligera mejora en la velocidad de respuesta de tu aplicaci√≥n.&lt;/p&gt;

&lt;p&gt;Aqu√≠ te dejo algunos middleware comunes que no siempre son usados, el de mensajes, p√°ginas planas y el de localizaci√≥n, no, no me refiero a la ubicaci√≥n geogr√°fica, sino el de traducir el contenido acorde al contexto local.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="s"&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.middleware.locale.LocaleMiddleware'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cachea-contenido-en-django"&gt;
  &lt;/a&gt;
  Cachea contenido en Django
&lt;/h2&gt;

&lt;p&gt;Cuando el tiempo de respuesta de tu aplicaci√≥n se vuelve un problema, deber√≠as empezar a colocar todos los resultados costosos en tiempo y recursos en cach√©. Si tu p√°gina tiene demasiados productos, y raramente cambian, no tiene sentido acceder cada vez a la base de datos para solicitarlos con cada nueva petici√≥n HTTP. Solo coloca la respuesta de esa solicitud en cach√© y tu tiempo de respuesta mejorar√°, de esta manera cada que se pida el mismo contenido, no ser√° necesario realizar una nueva petici√≥n o c√°lculos a la base de datos, sino que el valor se devolver√° directamente de memoria.&lt;/p&gt;

&lt;p&gt;Entre las opciones disponibles est√°:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memcached&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Cache de base de datos&lt;/li&gt;
&lt;li&gt;Cache de sistema de archivos
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
&lt;/span&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'BACKEND'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.core.cache.backends.memcached.MemcachedCache'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'LOCATION'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'127.0.0.1:11211'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La cache de django es configurable a much√≠simos niveles, desde el sitio entero hasta vistas o incluso peque√±os trozos de informaci√≥n.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# myapp/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache_page&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;cache_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'myapp/template.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'time_consuming_data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_time_consuming_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Toma en cuenta que &lt;strong&gt;la cache basada en memoria (memcached, redis) es un m√©todo de almacenamiento ef√≠mero&lt;/strong&gt;, toda la cach√© desaparecer√° si el sistema se reinicia o apaga.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usa-celery-para-tareas-as%C3%ADncronas"&gt;
  &lt;/a&gt;
  Usa Celery para tareas as√≠ncronas
&lt;/h2&gt;

&lt;p&gt;A veces el cuello de botella es responsabilidad de terceros. Cuando env√≠as un email o solicitas informaci√≥n de un tercero, no tienes manera de saber cuanto tiempo demorar√° tu solicitud, una conexi√≥n lenta o un servidor sobresaturado pueden mantenerte esperando por una respuesta. No tiene caso mantener al usuario esperando decenas de segundos por el env√≠o de un correo electr√≥nico, devu√©lvele una respuesta y transfiere el env√≠o del correo electr√≥nico a una cola para que se procese m√°s tarde. &lt;a href="https://docs.celeryproject.org/en/stable/"&gt;Celery&lt;/a&gt; es la opci√≥n m√°s popular para hacerlo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# myapp/views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shared_task&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;shared_task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_order_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;email_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_data_for_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_customized_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;email_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usa-un-cdn-content-delivery-network"&gt;
  &lt;/a&gt;
  Usa un CDN (Content Delivery Network)
&lt;/h2&gt;

&lt;p&gt;Servir im√°genes y archivos est√°ticos puede dificultar la parte importante de tu aplicaci√≥n; generar contenido din√°mico. Puedes delegar la tarea de servir contenido est√°tico a una red de distribuci√≥n de contenidos (CDN, por sus siglas en ingl√©s). De esta manera tu aplicaci√≥n podr√° centrarse en su tarea principal. Existen muchas opciones de CDN disponibles, entre las opciones m√°s populares est√°n AWS, Digital Ocean, Cloud Flare, entre otras.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#denormalizaci%C3%B3n"&gt;
  &lt;/a&gt;
  Denormalizaci√≥n
&lt;/h2&gt;

&lt;p&gt;A veces hay consultas bastante costosas en tiempo de ejecuci√≥n que podr√≠an resolverse agregando redundancia, informaci√≥n repetida. Por ejemplo, imagina que quieres devolver la cantidad de productos que tienen la frase "para ni√±os" en tu p√°gina principal, realizar una query que busque la palabra y luego ejecute un conteo es bastante sencillo. Pero, ¬øy si tienes 10,000 o 100,000 o 1,000,000 de productos? En lugar de realizar un conteo, podr√≠as guardar ese n√∫mero en la base de datos o en memoria y devolverlo directamente, para mantenerlo actualizado podr√≠as usar un conteo peri√≥dico o incrementarlo con cada adici√≥n.&lt;/p&gt;

&lt;p&gt;Por supuesto esto trae el problema de que ahora tienes m√°s datos que mantener, no acoplados entre s√≠, por lo que &lt;strong&gt;solo deber√≠as usar esta opci√≥n para resolver tus problemas de rendimiento en Django si ya agotaste las dem√°s consideres&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description__icontains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"para ni√±os"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="c1"&gt;# ... denormalizando
&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"para ni√±os"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Cada fila del modelo my_count contiene una descripci√≥n y el total de resultados
&lt;/span&gt;&lt;span class="n"&gt;total_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera-usar-otro-int%C3%A9rprete-para-mejorar-el-rendimiento-en-django"&gt;
  &lt;/a&gt;
  Considera usar otro int√©rprete para mejorar el rendimiento en django
&lt;/h2&gt;

&lt;p&gt;No todo es base de datos, a veces el problema est√° en el c√≥digo Python en s√≠. Adem√°s del int√©rprete normal de Python, el que se ofrece por defecto en la p√°gina oficial de Python, existen otros int√©rpretes que aseguran darte un mayor rendimiento.&lt;/p&gt;

&lt;p&gt;Pypy es uno de ellos, se encarga de optimizar el c√≥digo Python analizando el tipo de objetos que se crean con cada ejecuci√≥n. Esta opci√≥n es ideal para aplicaciones donde Django se encargue de devolver un resultado que fue procesado principalmente usando c√≥digo Python.&lt;/p&gt;

&lt;p&gt;Pero no todo es maravilloso; los int√©rpretes de terceros, incluido &lt;a href="https://www.pypy.org/"&gt;pypy&lt;/a&gt;, no suelen ser compatibles al 100% con todo el c√≥digo Python, pero s√≠ con la mayor√≠a, por lo que, igual que la opci√≥n anterior. &lt;strong&gt;Usar un int√©rprete de terceros tambi√©n deber√≠a de ser de las √∫ltimas opciones que consideres para resolver tu problema de rendimiento en Django.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swig"&gt;
  &lt;/a&gt;
  Swig
&lt;/h2&gt;

&lt;p&gt;Si has probado todo lo anterior y a√∫n as√≠ tienes una aplicaci√≥n con cuellos de botella, probablemente est√°s exprimiendo demasiado a Python y necesites de la velocidad de otro lenguaje. Pero no te preocupes, no tienes que rehacer toda tu aplicaci√≥n en C o C++. &lt;a href="http://www.swig.org/"&gt;Swig&lt;/a&gt; te permite crear m√≥dulos en C, C++, Java u otros lenguajes de m√°s bajo nivel para importarlos directamente desde Python.&lt;/p&gt;

&lt;p&gt;Si tienes un cuello de botella causado por alg√∫n c√°lculo matem√°tico muy costoso, que pone en evidencia la falta de velocidad de Python al ser un lenguaje interpretado, quiz√°s te convenga reescribir el cuello de botella en alg√∫n lenguaje de bajo nivel para luego llamarlo usando Python. De esta manera tendr√°s la facilidad de uso de Python con la velocidad de un lenguaje de bajo nivel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-frameworks-alternativos"&gt;
  &lt;/a&gt;
  Bonus: frameworks alternativos
&lt;/h2&gt;

&lt;p&gt;Dependiendo del avance de tu aplicaci√≥n quiz√°s te convenga migrar a otro framework m√°s veloz que Django. El ORM de Django no es exactamente el m√°s veloz que existe, puedes darle una oportunidad a &lt;a href="https://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt; o si tu aplicaci√≥n no es muy compleja a nivel de base de datos, quiz√°s quieras escribir tus propias consultas sql y combinarlas con alg√∫n otro framework.&lt;/p&gt;

&lt;p&gt;La tendencia actual es separar frontend de backend, por lo anterior Django est√° us√°ndose en conjunto con Django Rest Framework para crear APIs, por lo que, si entre tus planes est√° la creaci√≥n de una API, quiz√°s te convenga considerar FastAPI, si no lo conoces date una vuelta por mi &lt;a href="https://coffeebytes.dev/python-fastapi-el-mejor-framework-de-python/"&gt;entrada donde te explico las maravillas que tiene para ofrecer FastAPI.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>tutorial</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Make your Website accessible for people with eyeüëÅ disablities</title>
      <author>KaRthick</author>
      <pubDate>Wed, 26 May 2021 16:42:56 +0000</pubDate>
      <link>https://dev.to/karthick3018/make-your-website-accessible-for-people-with-eye-disablities-3008</link>
      <guid>https://dev.to/karthick3018/make-your-website-accessible-for-people-with-eye-disablities-3008</guid>
      <description>&lt;p&gt;Before getting in to the article I would like to ask you all a question !&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;How people with eye disablities use your website ? is the website you've made is accessible for them ?&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;wait ! what ? is there a scenario like that ? üò≥ üôÑ ü§î üò≤ these were my reactions and questions I got soon after this question was thrown over me. Come on I'm doing stuff's on web for over 4 years but never thought of this scenario and I'm clueless to answer this . &lt;/p&gt;

&lt;p&gt;But the reality is big &lt;strong&gt;"YES"&lt;/strong&gt; there's a way ! to be frank this was the most shocking thing more than the question . Again the same set of reactions but this time they've doubbled  üò≥ üôÑ ü§î üò≤ üò≥ üôÑ ü§î üò≤ .&lt;/p&gt;

&lt;p&gt;Ok if yes then how ?? many of us would have used those things without knowing their use cases . &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aria-tags"&gt;
  &lt;/a&gt;
  Aria Tags
&lt;/h2&gt;

&lt;p&gt;Yeah Aria tags are the game changer here they has the capacity to handle this tricky use case .&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Accessible Rich Internet Applications (ARIA)&lt;/strong&gt; is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities. &lt;em&gt;stated in MDN&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you researched the usage of these tags while using ? I didn't üôãüèæ ! I thought they are only used for SEO kind of things . Another thing is other attributes we use can be accessed somehow like using &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQNhqnZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya3jd8lhd8x0fm2jrgwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQNhqnZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya3jd8lhd8x0fm2jrgwa.png" alt="input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;document.getElementById("demo");&lt;/li&gt;
&lt;li&gt;document.getElementsByClassName("demo-class");&lt;/li&gt;
&lt;li&gt;document.getElementsByName("demo-input");&lt;/li&gt;
&lt;li&gt;document.getElementsByTagName("input");
or you can access the values during the event handle like onChange using

&lt;code&gt;e.target.value , e.target.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but have you tried of accessing these aria tags ?? just try ! they can't be accessed like the other attributes ! these are not they've built for . Why because ARIA doesn't augment any of the element's inherent behavior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ARIA works by changing and augmenting the standard DOM accessibility tree .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#screen-reader"&gt;
  &lt;/a&gt;
  Screen Reader
&lt;/h2&gt;

&lt;p&gt;So we've added the aria tags but how it will be helpful to read for the people with disablities?. Here comes the next life saver Screen Reader . Screen Reader is an app which make use of these aria tags and make a helpful voice commands for the people to use the website. They are available as an desktop app and also as a chrome extension. Check one of them &lt;a href="https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn/related"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I've created a small form using react that supports aria tag install the extension mentioned above , close your eyes and try submitting the form ! let me know If you've made it !&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/bold-hertz-tcrvp"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;These attributes starting with aria- are the thing we're talking about !! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88iD9xCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f2es0kviqa18grg4bc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88iD9xCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f2es0kviqa18grg4bc6.png" alt="ariatags"&gt;&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;That's it ! So next time when you build an application make sure your application supports aria tags , Technology is not for particular people, Make the technology accessible for everyone üí™üèΩ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Get into these docs before starting aria tags&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"&gt;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria"&gt;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manage your Work From Home üè° issues using this &lt;a href="https://dev.to/karthick3018/manage-work-from-home-effectively-using-wfh-kit-6bc"&gt;kit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;check my dev projects on&lt;/em&gt; &lt;a href="https://github.com/karthick3018"&gt;github&lt;/a&gt;&lt;br&gt;
 &lt;em&gt;Follow me on&lt;/em&gt; &lt;a href="https://twitter.com/Karthick_R_30"&gt;twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;connect with me on&lt;/em&gt; &lt;a href="https://www.linkedin.com/in/karthick-raja-dev/"&gt;linkedIn&lt;/a&gt;&lt;br&gt;
&lt;em&gt;check my styles on&lt;/em&gt; &lt;a href="https://codepen.io/karthick30"&gt;codepen&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for your time&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Happy coding ! Keep Sharing&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Stay Safe&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>html</category>
      <category>ux</category>
    </item>
    <item>
      <title>Creative Button Animation Hover Effect</title>
      <author>Stackfindover</author>
      <pubDate>Wed, 26 May 2021 16:41:09 +0000</pubDate>
      <link>https://dev.to/stackfindover/creative-button-animation-hover-effect-5bgd</link>
      <guid>https://dev.to/stackfindover/creative-button-animation-hover-effect-5bgd</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello guys, In this video you will learn how to create creative button animation hover effect using html and css.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step:#1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Add below code inside index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Awesome Button Css&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button-outer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hover Me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step:#2
&lt;/h3&gt;

&lt;p&gt;Then we need to add code for style.css which code I provide in the below screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'IBM Plex Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button-outer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4b00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite-spinning&lt;/span&gt; &lt;span class="m"&gt;10s&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite-spinning&lt;/span&gt; &lt;span class="m"&gt;10s&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;infinite-spinning&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tr11va9bYrQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Extract Zip files recursively with NodeJS</title>
      <author>Praveen Saraogi</author>
      <pubDate>Wed, 26 May 2021 16:25:59 +0000</pubDate>
      <link>https://dev.to/saraogipraveen/extract-zip-files-recursively-with-nodejs-3n9p</link>
      <guid>https://dev.to/saraogipraveen/extract-zip-files-recursively-with-nodejs-3n9p</guid>
      <description>&lt;p&gt;Hello Coders üëã&lt;/p&gt;

&lt;p&gt;This is my first attempt at writing a technical post. Hope you find it helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;Recently, I encountered a requirement where I had to extract all the zip files present inside a &lt;strong&gt;main zip&lt;/strong&gt; file which had a random folder structure and any of the folders can have a zip file present inside it at any level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-of-the-problem"&gt;
  &lt;/a&gt;
  Breaking down of the problem
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Find Library for extracting&lt;/li&gt;
&lt;li&gt;Extract the main zip file &lt;em&gt;i.e demo.zip&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Figure out a way to traverse the whole folder structure recursively&lt;/li&gt;
&lt;li&gt;Then extract the &lt;code&gt;.zip&lt;/code&gt; file whenever it is found.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/extract-zip"&gt;&lt;strong&gt;extract-zip&lt;/strong&gt;&lt;/a&gt; library used to extract the zip files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-to-extract-zip-file"&gt;
  &lt;/a&gt;
  Method to extract zip file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It takes two input arguments source and target. 
&lt;em&gt;source&lt;/em&gt; should be absolute path of the zip file, 
&lt;em&gt;target&lt;/em&gt; is where the folder will get extracted.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extractZip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Extraction complete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oops: extractZip failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-to-traverse-folders-recursively"&gt;
  &lt;/a&gt;
  Method to traverse folders recursively
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isDirectory&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullFilePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;zippedFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;extractZip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Lot of activities in above snippet. Let's decode&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dirPath&lt;/code&gt; : file extraction path&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;fs.readdirSync()&lt;/code&gt; method is used to synchronously read the contents of a given directory. The method returns an array with all the file names or objects in the directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the main challenge was to loop through all the folders/files asynchronously. We cannot use &lt;code&gt;forEach&lt;/code&gt; since it doesn't support &lt;code&gt;async/await&lt;/code&gt; keyword. Traditional for loop syntax works with &lt;code&gt;await&lt;/code&gt; keyword. But I wanted to use the more common array method &lt;code&gt;map()&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use &lt;code&gt;await&lt;/code&gt; with &lt;code&gt;map()&lt;/code&gt; it returns array of promises. Hence, to resolve all promises &lt;code&gt;await Promise.all(arrayOfPromises)&lt;/code&gt; is used here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more details on &lt;code&gt;async/await&lt;/code&gt; in loops refer to &lt;a href="https://zellwk.com/blog/async-await-in-loops/"&gt;this&lt;/a&gt; wonderful article&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isDirectory&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To check whether current object is file or folder &lt;code&gt;isDirectory()&lt;/code&gt; method is used. If its a folder then call same method again &lt;code&gt;i.e unzipFiles()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullFilePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.zip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;zippedFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;extractZip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a file is found then we will call the &lt;code&gt;extractZip()&lt;/code&gt; method with &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; with their absolute paths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we don't specify the &lt;code&gt;target&lt;/code&gt;, or give it a current path then it will extract all the files in current directory itself. But I wanted to extract the zip to their respective folder names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To achieve this, I have spliced the folder name from .zip file passed it as a &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;extractZip()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now there is one more catch in the last line i.e&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;unzipFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;folderName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Since there is a possibility that the extracted files can also have zip files inside it, so as soon as we extract any file we will again have to call &lt;code&gt;unzipFiles()&lt;/code&gt; to traverse through the extracted files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Output will be - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KnpXPKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bs2ep0azzuyms2nns41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KnpXPKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bs2ep0azzuyms2nns41.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thanks a lot for reading üôè&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Feel free to connect üëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/saraogipraveen"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/praveensaraogi/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>automation</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Cnator: channel-based subscriptions in Go</title>
      <author>Altiano Gerung</author>
      <pubDate>Wed, 26 May 2021 16:17:03 +0000</pubDate>
      <link>https://dev.to/altiano/cnator-channel-based-subscriptions-in-go-4een</link>
      <guid>https://dev.to/altiano/cnator-channel-based-subscriptions-in-go-4een</guid>
      <description>&lt;p&gt;Channels is one of those things that makes Go awesome.&lt;/p&gt;

&lt;p&gt;I use channels quite a lot in my next open projects. One of those scenario is to model an event-driven approach.&lt;/p&gt;

&lt;p&gt;While developing these projects, I noticed that the setup is more or less the same, so I decided to make a Go module for that.&lt;/p&gt;

&lt;p&gt;It's called &lt;a href="https://gitlab.com/altiano/cnator"&gt;&lt;code&gt;Cnator&lt;/code&gt;&lt;/a&gt; (pronounce "c-nator")&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;altiano&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cnator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has 3 methods : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;New()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Subscribe(channel, subscriber)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Serve()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;that can be use it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;cnator&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cnator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;createChannels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// provide channel reference to each publisher&lt;/span&gt;
    &lt;span class="n"&gt;producerA&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewProducerA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producerB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewProducerB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producerC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewProducerC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// using cnator to subscribe to those channel events&lt;/span&gt;
    &lt;span class="n"&gt;subscriberA&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;subscriberA&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;subscriberB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;subscriberB&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;subscriberC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;subscriberC&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;cnator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscriberA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receiveChanA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cnator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscriberB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receiveChanB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cnator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chanC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscriberC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receiveChanC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="c"&gt;// start watching for events&lt;/span&gt;
    &lt;span class="n"&gt;cnator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;createChannel()&lt;/code&gt; just initialized the channels, but you should provide your own model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createChannels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;chanA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}),&lt;/span&gt;
        &lt;span class="n"&gt;chanB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;chanC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the subscribers are just callback functions with a matching data type with the channels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;subscriberA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;receiveChanA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscriber A receiving"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;subscriberB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;receiveChanB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscriber B receiving"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;subscriberC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;receiveChanC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscriber C receiving"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;except for &lt;code&gt;chanA&lt;/code&gt; that receive empty struct{}, &lt;br&gt;
you can ignore the parameter like &lt;code&gt;receiveChanA()&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;The job of &lt;code&gt;cnator.Serve()&lt;/code&gt; is to spawn a go routine for each subscription made by &lt;code&gt;cnator.Subscribe(..)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It provides some runtime validation like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;whether the subscriber function doesn't satisfy the channel data type or &lt;/li&gt;
&lt;li&gt;whether the channel has not been initialized (i.e. forget to &lt;code&gt;make(chan ..)&lt;/code&gt;) etc &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full code &amp;amp; examples can be found at this repository : &lt;a href="https://gitlab.com/altiano/cnator"&gt;Cnator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also posted on : &lt;a href="https://blog.altiano.dev/cnator-channel-based-subscription-in-go"&gt;https://blog.altiano.dev/cnator-channel-based-subscription-in-go&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>eventdriven</category>
    </item>
  </channel>
</rss>
