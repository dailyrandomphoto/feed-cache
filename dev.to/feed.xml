<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Go Crash Course Part 4: Types, Conversion and Inference</title>
      <author>Mofizur Rahman</author>
      <pubDate>Thu, 06 May 2021 03:11:59 +0000</pubDate>
      <link>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</link>
      <guid>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/moficodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsTAGJOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--z5HHrKkr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/173296/ff1c7da5-b8e7-47d6-9606-e1557494c6a5.jpeg" alt="moficodes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/moficodes/go-crash-course-part-iii-variables-and-functions-22p7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Go Crash Course Part III: Variables and Functions&lt;/h2&gt;
      &lt;h3&gt;Mofizur Rahman ・ May  5 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The code for this part is in the &lt;code&gt;types&lt;/code&gt; folder under &lt;a href="https://github.com/moficodes/go-crash-course"&gt;this github repo&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h2&gt;

&lt;p&gt;Go is a typed language. That means everything we create must have a type. &lt;/p&gt;

&lt;p&gt;There are a few basic types. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-types"&gt;
  &lt;/a&gt;
  Boolean Types
&lt;/h3&gt;

&lt;p&gt;Represents set of boolean value. With predefined constant &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;        &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#numeric-types"&gt;
  &lt;/a&gt;
  Numeric Types
&lt;/h3&gt;

&lt;p&gt;Integer and Floating point values. Following are architecture independent numeric types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="kt"&gt;uint8&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint16&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint32&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;4294967295&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint64&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;18446744073709551615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;int8&lt;/span&gt;        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int16&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;32767&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int32&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;2147483648&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;2147483647&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int64&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;9223372036854775808&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;9223372036854775807&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;float32&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="kt"&gt;float64&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;

&lt;span class="kt"&gt;complex64&lt;/span&gt;   &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float32&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;
&lt;span class="kt"&gt;complex128&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;

&lt;span class="kt"&gt;byte&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;
&lt;span class="kt"&gt;rune&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;int32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are architecture dependent. (Could be either 32 bit or 64 bit)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;     &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;
&lt;span class="kt"&gt;uintptr&lt;/span&gt;  &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;enough&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;uninterpreted&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#string-types"&gt;
  &lt;/a&gt;
  String Types
&lt;/h3&gt;

&lt;p&gt;String is a sequence of bytes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composite-types"&gt;
  &lt;/a&gt;
  Composite Types
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h4&gt;

&lt;p&gt;Arrays are fixed length and fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#slice"&gt;
  &lt;/a&gt;
  Slice
&lt;/h4&gt;

&lt;p&gt;Contiguous segment of underlying array. Has fixed type. Length can be dynamically reallocated. (More on this on a later chapter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#maps"&gt;
  &lt;/a&gt;
  Maps
&lt;/h4&gt;

&lt;p&gt;Key value store. Similar to dictionary in python or object in JavaScript. But it still has a fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;Functions are also types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;function&lt;/code&gt; has a type &lt;code&gt;func() int&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#struct"&gt;
  &lt;/a&gt;
  Struct
&lt;/h4&gt;

&lt;p&gt;Custom type defined by user. Its a sequence of named elements  with name and types. Struct can be empty too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#channel"&gt;
  &lt;/a&gt;
  Channel
&lt;/h4&gt;

&lt;p&gt;Channels are typed conduit between running go routines. We will hold off on talking about channels until we talk about go routines. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;An interface type specifies a method set called its interface. If a any type has the method set of the interface, that type implements the interface. All types implement the empty interface &lt;code&gt;interface{}&lt;/code&gt;. Interface does not have any type. Its always the underlying components type. A type can implement any number of interfaces. We will talk about interface in great details in a later post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// y now has a type of empty since that is the type of x.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type-alias-and-type-definition"&gt;
  &lt;/a&gt;
  Type Alias and Type Definition
&lt;/h3&gt;

&lt;p&gt;We already saw 2 examples of type aliases. &lt;code&gt;byte&lt;/code&gt; and &lt;code&gt;rune&lt;/code&gt; are type aliases of &lt;code&gt;uint8&lt;/code&gt; and &lt;code&gt;uint32&lt;/code&gt; respectively. This means every time we use &lt;code&gt;byte&lt;/code&gt; we are basically using an &lt;code&gt;uint8&lt;/code&gt;. We can also define our own type from another base type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// type alias&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasFloat&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5.0&lt;/span&gt; &lt;span class="c"&gt;// has type float64&lt;/span&gt;
&lt;span class="c"&gt;// type definition&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasInt&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;// has type myint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type alias is useful for moving types between packages for refactoring. Lets say we were using a struct type called &lt;code&gt;coolstuff&lt;/code&gt; in a package. If we move the &lt;code&gt;coolstuff&lt;/code&gt; to a different package, we would have to refactor all the places where &lt;code&gt;coolstuff&lt;/code&gt; were being used. One way to mitigate issues during the refactor type is to create a type alias in the old package where &lt;code&gt;coolstuff&lt;/code&gt; was.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;coolstuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coolstuff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type definition is used usually for creating enums. Or sometimes to extend existing types by attaching methods. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type int does not have any methods. But with &lt;code&gt;myint&lt;/code&gt; we can create a &lt;code&gt;double()&lt;/code&gt; method on our type. We have yet to talk about method and method receiver. We will talk about it in depth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-conversion"&gt;
  &lt;/a&gt;
  Type Conversion
&lt;/h2&gt;

&lt;p&gt;Basic numeric types can be converted with &lt;code&gt;T()&lt;/code&gt; syntax. Where &lt;code&gt;T&lt;/code&gt; is the type to be converted to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;355&lt;/span&gt;        &lt;span class="c"&gt;// type int&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c"&gt;// type float64&lt;/span&gt;
&lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c"&gt;// type byte (uint8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Struct type can be converted to and from each other as long as they have identical field names and types in identical order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="c"&gt;// try swapping these fields&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"john"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"paul"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There is a way to type case any struct to any other struct using the &lt;code&gt;unsafe&lt;/code&gt; package. This is rarely used. If you write code that uses unsafe package, you better have a solid reasoning for it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On function calls type conversion is automatic if the parameter can be converted to the desired type it gets converted. &lt;code&gt;int&lt;/code&gt; will be converted to &lt;code&gt;float&lt;/code&gt; but not the other way around because float to int can loose precision.&lt;/p&gt;

&lt;p&gt;For defined types, the conversion is uni directional. You can always use the underlying type in place of the defined type but not the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of mi=%T&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of i=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this get converted to myint type&lt;/span&gt;

&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this does not work&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inference"&gt;
  &lt;/a&gt;
  Inference
&lt;/h2&gt;

&lt;p&gt;We have seen example of inference a few times already. Every time we use the &lt;code&gt;:=&lt;/code&gt; operator, we are inferring the type of the left hand operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int because of the type of x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type inference also happens for numeric constants when passing to a function if the compiler does not detect a loss of precision or overflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;This is Part 4 of this Go crash course series.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Advices For Every Aspiring Web Developer </title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 06 May 2021 03:00:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</link>
      <guid>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</guid>
      <description>&lt;p&gt;I have been in this industry for nearly two years now. &lt;/p&gt;

&lt;p&gt;Spent those two years learning, observing, teaching, building, planning and once again, learning!&lt;/p&gt;

&lt;p&gt;Here's one thing I really want you all to know: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one knows it all.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not a complete expert, and neither is anyone out there. No one can memorize all language's syntax and rules from HTML, Git to React. &lt;/p&gt;

&lt;p&gt;Most highly proficient developers are very experienced when it comes to quickly finding  answers to their problems. They know where and when to look.&lt;/p&gt;

&lt;p&gt;Still, beginners are most likely to find themselves in a quandary regarding how to go about the interesting journey into web development, especially given the myriad of technologies present in the ecosystem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're looking for some kind of roadmap, I'll highly recommend &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React Course&lt;/a&gt; . It's very detailed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone with a fair amount of experience, here are 10 advices I have for beginners:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-start"&gt;
  &lt;/a&gt;
  Just Start.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"I don't have a computer",&lt;/em&gt;&lt;br&gt;
&lt;em&gt;"My computer is not capable enough",&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I am not smart enough",*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those are just excuses, and are not true at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a fact:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I started learning how to code websites without a computer. That's right, I used my Android phone to learn.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not smart enough?&lt;/strong&gt; Well I used think even worse of myself. Yet here I am. &lt;/p&gt;

&lt;p&gt;You will really need to set aside the excuses and put more effort into starting. You don't need any dedicated system or fancy set-up. Just a computer with a web browser and internet connection will do.&lt;/p&gt;

&lt;p&gt;As you progress, you will gain more self-confidence.&lt;/p&gt;

&lt;p&gt;Start now, thank me later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-detailed-resources"&gt;
  &lt;/a&gt;
  Find Detailed Resources
&lt;/h3&gt;

&lt;p&gt;As a Beginner, you're starting out with absolutely no knowledge of web development or programming. &lt;/p&gt;

&lt;p&gt;You don't know what HTML, CSS, JavaScript or Angular is. &lt;/p&gt;

&lt;p&gt;For this reason, it's very important that you go for courses and tutorials which contains a lot of information. &lt;/p&gt;

&lt;p&gt;I will highly recommend is &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt;. However, if you want something free, there are many sites and YouTube channels to find quality and comprehensive tutorials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-the-basics"&gt;
  &lt;/a&gt;
  Master the basics.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the basics to web development. It doesn't matter how or what you use in building your website, you'll always find HTML present.&lt;/p&gt;

&lt;p&gt;HTML has really evolved over the years. We now have a new standard which comes with more semantic elements to create meaningful markups and UX friendly websites.&lt;/p&gt;

&lt;p&gt;CSS is even more important. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one wants to navigate a site with no design, that would be horrendous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS is a very broad topic. At the start, it's very simple to use. However as you grow and build more websites professionally, you'll start to find CSS to be more interesting and perhaps difficult. That's why it's crucial you have a solid foundation.&lt;/p&gt;

&lt;p&gt;JavaScript is another very important and elementary technology to grasp. &lt;/p&gt;

&lt;p&gt;You have git, which is a source control software, DevTools for app debugging and assessment, and a text editor or IDE like VSCode.&lt;/p&gt;

&lt;p&gt;All of these are basics every Beginner must know. And once again, HTML To React covers the basics very well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-right-from-the-start"&gt;
  &lt;/a&gt;
  Practice Right From the Start.
&lt;/h3&gt;

&lt;p&gt;"HTML is so easy, I don't actually need to practice that." &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wrong Wrong Wrong.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't underrate any thing when it comes to web development. You always have something to learn, even when it may not seem like it. &lt;/p&gt;

&lt;p&gt;Start playing with code right from the beginning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-consistently-build-projects"&gt;
  &lt;/a&gt;
  Practice Consistently, Build Projects.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"The easiest way to learn something is by Constant practise" - over 1 million motivational speakers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;That statement is especially true with developers.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You might feel very confident with your abilities after watching a lengthy tutorial but I can assure you that implementation will not be as smooth. &lt;/p&gt;

&lt;p&gt;As you practice more, these things happen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You learn things which the tutor may have left out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You learn how to type faster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You internalize certain Syntax and procedures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get smarter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You buy me some coffee&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jokes aside, practicing is hands-down the best way to learn web development. &lt;/p&gt;

&lt;p&gt;It's also the most effective way to conquer your impostor syndrome. Take it from me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-an-online-developer-community"&gt;
  &lt;/a&gt;
  Join an online developer community
&lt;/h3&gt;

&lt;p&gt;This is a very crucial step, which has helped me a whole whole lot.&lt;/p&gt;

&lt;p&gt;Some of you may already know me on Twitter but for those of you who don't, I joined Twitter on December 2020 and since then some incredible things have happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have met some very friendly people&lt;/li&gt;
&lt;li&gt;I have grown to nearly 10,000 follows&lt;/li&gt;
&lt;li&gt;I made my first income&lt;/li&gt;
&lt;li&gt;I created an &lt;a href="//gumroad.com/l/WebDevBeginners"&gt;eBook&lt;/a&gt; and sold some copies&lt;/li&gt;
&lt;li&gt;I have learned a lot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You learn a whole lot when you are active in some community. &lt;/p&gt;

&lt;p&gt;Apart from Twitter which I highly recommend, here are some developer communities to consider&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Practical Dev&lt;/li&gt;
&lt;li&gt;HashNode&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;CodeWars&lt;/li&gt;
&lt;li&gt;HackerRank&lt;/li&gt;
&lt;li&gt;HackerNoon&lt;/li&gt;
&lt;li&gt;CodeNewbie&lt;/li&gt;
&lt;li&gt;FreeCodeCamp&lt;/li&gt;
&lt;li&gt;HackerNews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;p&gt;This is very important.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-tools-to-save-time"&gt;
  &lt;/a&gt;
  Use Tools To Save Time.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I am not telling you to spend $1000 dollars on some high end equipment, friend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the best IDEs, like &lt;strong&gt;VSCode&lt;/strong&gt;, provides you with a collection of highly useful extensions to save time and increase productivity.&lt;/p&gt;

&lt;p&gt;Here are some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Server&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Git History&lt;/li&gt;
&lt;li&gt;Auto Rename Tag&lt;/li&gt;
&lt;li&gt;Snippets&lt;/li&gt;
&lt;li&gt;Better Comments.&lt;/li&gt;
&lt;li&gt;Markdown All in One.&lt;/li&gt;
&lt;li&gt;Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out what these tools do and see just how useful they really are.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It would be rather unwise to abandon all these tools for drudgery, **don't you think?&lt;/em&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-repetitive-tasks"&gt;
  &lt;/a&gt;
  Automatic Repetitive Tasks
&lt;/h3&gt;

&lt;p&gt;A lot of processes and tasks are repetitive. &lt;/p&gt;

&lt;p&gt;You don't need to do the same thing over and over again. It's not just tedious and boring, it's also a waste of precious time. &lt;/p&gt;

&lt;p&gt;This is why I highly advise you get familiar with the command line. &lt;/p&gt;

&lt;p&gt;That way, instead of always typing out long commands every single time, you create a simple script that automates the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-is-your-friend"&gt;
  &lt;/a&gt;
  Google is your friend.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Wait&lt;/strong&gt;, let me rephrase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google is your friend if you know how to use it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to effectively search for solutions on Google. The accuracy of your search query may hold the balance between you remaining stuck and your salvation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-overwork-yourself"&gt;
  &lt;/a&gt;
  Don't Overwork Yourself.
&lt;/h3&gt;

&lt;p&gt;I feel attacked writing this particular part, but I am working on it.&lt;/p&gt;

&lt;p&gt;You should already know what happens when you overwork yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stress&lt;/li&gt;
&lt;li&gt;Fatigue&lt;/li&gt;
&lt;li&gt;Insomnia&lt;/li&gt;
&lt;li&gt;Mental stress&lt;/li&gt;
&lt;li&gt;Health Issues&lt;/li&gt;
&lt;li&gt;Aids&lt;/li&gt;
&lt;li&gt;Cancer &lt;/li&gt;
&lt;li&gt;Death &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I'm Joking lol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But seriously, don't overwork yourself. Take intermittent breaks while coding. Drink lots of water. Don't persist when you're faced with a very difficult bug. Personally when I confront a difficult problem I close my laptop and stare at the roof.&lt;/p&gt;

&lt;p&gt;For 20 minutes.&lt;/p&gt;

&lt;p&gt;Maybe I'm crazy, but you get the point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you got something valuable from this post. If you did, consider buying me favourite fruit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your support is highly appreciated.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>13 Unique and Fun APIs + Project ideas</title>
      <author>Dev Write Ups</author>
      <pubDate>Thu, 06 May 2021 01:51:07 +0000</pubDate>
      <link>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</link>
      <guid>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</guid>
      <description>&lt;p&gt;Being a developer is great - you can build almost anything you want! Sometimes, however, it's difficult to decide what to build next as there are so many different project ideas out there. To help you find your next project, I've come up with a list of APIs that you can play with and provided potential project ideas. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#removalai-api"&gt;
  &lt;/a&gt;
  &lt;a href="//bit.ly/removalai"&gt;RemovalAI API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" alt="Screenshot 2021-04-30 at 10-14-07 Background Remover Create Transparent Background.png"&gt;&lt;/a&gt;&lt;br&gt;
Background Removal API, Remove the background of any image* with 1 API call.  &lt;a href="//bit.ly/removalai"&gt;Removal.AI&lt;/a&gt;  makes it easy for you, it uses AI to remove background from your images, the final image which you get is more clean and good. Simple to use you just have to drag n drop your image into the website and see the awesome result.&lt;/p&gt;

&lt;p&gt;&lt;a href="//bit.ly/removalai"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com/developers"&gt;Unsplash API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" alt="Screenshot 2021-04-30 at 10-19-32 Unsplash Image API Free HD Photo API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unsplash is a website that host "beautiful, free images and photos that you can download and use for any projects". It's API can be used to fetch photos from Unsplash. The Unsplash API could be used to make an application with a background that changes to a random image at different times during the day. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/developers"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-movie-database-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.themoviedb.org/documentation/api"&gt;The Movie Database API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" alt="Screenshot 2021-04-30 at 10-44-24 The Movie Database (TMDb).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API service is for those of you interested in using our movie, TV show or actor images and/or data in your application. Our API is a system we provide for you and your team to programmatically fetch and use our data and/or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.themoviedb.org/documentation/api"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.slack.com/"&gt;Slack&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" alt="Screenshot 2021-04-30 at 10-22-10 Slack API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Slack API you can build tools that integrate directly with Slack. The Slack API can be used to build a chat-bot that can carry out various function such as setting reminders, checking the weather or communicating with other APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.slack.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotify-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" alt="Screenshot 2021-04-30 at 10-25-43 Web API Spotify for Developers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the Spotify API to create a home automation dashboard that shows what songs I'm currently playing and has controls to play, pause, skip tracks and set the volume (in addition to other functionality). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devto-api-and-hashnode-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.forem.com/api/"&gt;Dev.to API&lt;/a&gt; and  &lt;a href="https://api.hashnode.com/"&gt;Hashnode API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" alt="Screenshot 2021-04-30 at 10-27-34 DEV API (beta).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Dev.to's or Hashnode's own API you could create your own personal editor that can create, schedule and publish as well as edit old ones. While creating this app you'd have to build a markdown editor and a system to publish you articles to Dev.to. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.forem.com/api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-meal-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://themealdb.com/"&gt;The Meal API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" alt="Screenshot 2021-04-30 at 10-42-37 TheMealDB com.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mean API gived you access to random meal data to use it in your application. This API contains all the meal categories with images, ingredients, videos, the country of each meal and many more features. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://themealdb.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hue-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.meethue.com/"&gt;Hue API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" alt="Screenshot 2021-04-30 at 10-30-41 Hue Your Imaginations - Philips Hue Developer Program.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any products form the Phillips Hue family, it's likely that they can be controlled using the Hue API. The official app can become a bit busy when you have multiple devices, so you could build an app that can control Hue bulbs around the house, changing their color and brightness. You could also go back to basic and build a command-line app to control your lights!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.meethue.com/"&gt;Link &lt;/a&gt; to the API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#random-jokes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://icanhazdadjoke.com/"&gt;Random Jokes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" alt="jokes ai.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The random jokes API allows you to fetch random jokes data in an easy way using Fetch, Ajax XHR and etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://icanhazdadjoke.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-bad-quotes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://breakingbadquotes.xyz/"&gt;Breaking bad quotes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" alt="Screenshot 2021-04-30 at 10-50-07 Breaking Bad Quotes API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A free API to retrieve some quotes of Breaking Bad, bitch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://breakingbadquotes.xyz/"&gt;Link to API&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tronald-dump"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tronalddump.io/"&gt;Tronald Dump&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" alt="Screenshot 2021-04-30 at 11-01-14 Tronald Dump.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web archive for the dumbest things Donald Trump has ever said.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tronalddump.io/"&gt;Link &lt;/a&gt; to API &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marvel-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.marvel.com/"&gt; Marvel API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" alt="msd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Marvel Comics API allows developers everywhere to access information about Marvel's vast library of comics—from what's coming up, to 70 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.marvel.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;




&lt;p&gt;These and other APIs will assist you with supercharging your capacities. With dull issues dealt with, you'll be allowed to zero in with respect to your work that no one but you can perform.&lt;/p&gt;

&lt;p&gt;Thank your for Reading ⚡ We're here to see your amazing projects you will make with these APIs(Just comment it below and see 😊). Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>project</category>
      <category>programming</category>
    </item>
    <item>
      <title>Améliorer votre Python: Maîtriser les Listes</title>
      <author> </author>
      <pubDate>Thu, 06 May 2021 01:33:45 +0000</pubDate>
      <link>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</link>
      <guid>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</guid>
      <description>&lt;p&gt;*** &lt;small&gt;Je publie des articles régulièrement et en français. Pour ne rien manquer suivez moi en cliquant Follow&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Bonjour les amis!&lt;/p&gt;

&lt;p&gt;Aujourd'hui nous allons travailler sur un aspect très important pour tous ceux qui veulent devenir des experts Python: Les Listes.&lt;/p&gt;

&lt;p&gt;En Python, les listes sont une collection d'éléments dans un ordre particulier. Vous pouvez mettre tout ce que vous voulez dans une liste.&lt;/p&gt;

&lt;p&gt;Par convention, normalement, le nom de votre liste sera pluriel. Par exemple, une liste de produit peut être nommée: produits.&lt;/p&gt;

&lt;p&gt;Python utilise des crochets [] pour indiquer une liste, et les éléments individuels sont séparés par des virgules.&lt;/p&gt;

&lt;p&gt;Une liste peut être créé vide [] ou avec des éléments déjà à l'intérieur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# vide
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 

&lt;span class="c1"&gt;# Avec éléments
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iMac'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut contenir des éléments de différent type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;liste_divers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'autre'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut même contenir une autre liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il existe plusieurs façon d'ajouter des éléments à une liste:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Exemple une liste de fruits
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Ajouter un fruit à la liste
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['orange', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Insère un élément à la position x
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# Va inséré 'fraise' à la position 1
# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La liste est une base zéro. Cela signifie que la première position est 0 et la deuxième position est 1, etc. &lt;/p&gt;

&lt;p&gt;Vous pouvez d'ailleurs accéder à un élément unique de votre liste en utilisant les crochets []:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# premier item
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# dernier item
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La position -1 représente le dernier élément de la liste.&lt;/p&gt;

&lt;p&gt;Avec cette logique de position négative il est possible d'accédé à l'avant dernier élément en utilisant -2 et ainsi de suite pour le reste de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# banane
&lt;/span&gt;&lt;span class="n"&gt;avant_dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# melon
&lt;/span&gt;&lt;span class="n"&gt;avant_avant_dernier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# pomme
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour déterminer le nombre d'éléments dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;nb_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici comment accéder à une liste dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Marc
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Pierre
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d'enlever des éléments de la liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# enlève fraise
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enlever le dernier élément&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lastFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# enlever le dernier element
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de récupérer une partie (tranche) de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# ['orange', 'fraise' ,'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Même chose mais syntaxe abrégée
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# Quand le no n'est pas spécifié, Python commence à la position 0
&lt;/span&gt;
&lt;span class="c1"&gt;# Autre exemple
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;  &lt;span class="c1"&gt;# retourne les derniers items
# ['melon','banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Copie complète
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; 
&lt;span class="c1"&gt;# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Changer l'ordre. L'ajout de :-1 permet de renverser l'ordre de la tranche retournée.
&lt;/span&gt;&lt;span class="n"&gt;ma_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['pomme', 'fraise', 'orange'] 
&lt;/span&gt;
&lt;span class="c1"&gt;# Un autre exemple
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Va faire une copie et renverse l'ordre
# ['banane', ',melon', 'pomme', 'fraise', 'orange'] 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais plus simplement, il existe une méthode qui permet de renverser une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de créer une liste à partir d'un string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rouge, vert, bleu'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# La method split divise la string en éléments
#['rouge', 'vert', 'bleu']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour trier une liste vous utilisé la syntaxe suivante:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['banane', 'fraise', 'melon', 'orange', 'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Trier en ordre inversé
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['pomme', 'orange', 'melon', 'fraise', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Méthode pour fusionner / concatener deux listes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array concact
&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'jaune'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;couleurs2&lt;/span&gt; 
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;
&lt;span class="c1"&gt;# Concatener avec le "unpacking"
&lt;/span&gt;&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut être assigné à plusieurs variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assignation multiple
&lt;/span&gt;&lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# nom = 'iPhone' 
# prix = 599
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un Tuple est une liste non altérable. La syntaxe est des parenthèses a la place des crochets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Creation d'un Tuple
&lt;/span&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parcourir les éléments d'une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Itération dans la liste
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;couleurs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creation d'une liste avec un "range" de nombre&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;# 1 2 3 4 5 6 7 8 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La List Comprehension offre une syntaxe plus courte lorsque vous le souhaitez créer une nouvelle liste basée sur les valeurs d'une liste existante.&lt;/p&gt;

&lt;p&gt;Voici un exemple sans List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['banane','fraise', 'mangue']
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici un exemple avec List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La syntaxe des List Comprehension:&lt;br&gt;
 [expression for item in iterable if condition == True]&lt;/p&gt;

</description>
      <category>french</category>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 9</title>
      <author>David Tetreau</author>
      <pubDate>Thu, 06 May 2021 01:28:18 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</guid>
      <description>&lt;p&gt;Now that functions have been introduced, we will move on to some other concepts. Don't worry! We will come back to functions. There is a lot more to them. For Part 9 , we will explore objects. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;

&lt;p&gt;JavaScript objects are more complex than other data types such as strings or numbers. They store multiple collections of data. Here is an example of a JavaScript object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the object&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object is assigned to a variable, so you can easily work with it elsewhere by using just the variable's name. Also, the object has the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The object is enclosed within curly braces (mustaches)&lt;/li&gt;
&lt;li&gt;Each property has a name and value separated by a colon. We call this a "key: value" pair.&lt;/li&gt;
&lt;li&gt;The first key has the name of "breed". This key stores the value 'German Shepherd'. This value is a string. &lt;/li&gt;
&lt;li&gt; The object has three "key: value" pairs which are relevant to the variable name that they are stored in. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessing-objects"&gt;
  &lt;/a&gt;
  Accessing Objects
&lt;/h2&gt;

&lt;p&gt;Objects can be accessed in several different ways. First, you can access an object by dot notation. Here's an example with the same object from above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the value stored in breed&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name, followed by a dot, followed by the first key in the object was used to log the value stored in that key to the console. This would have worked for the other key value pairs as well (dog.color) and (dog.age).  You would have logged the value stored to both of those keys to the console. Try it!&lt;/p&gt;

&lt;p&gt;Another way to access the data stored in objects is to use bracket notation. Here's an example of bracket notation with the same object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//logs the value stored in color&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name followed by brackets containing the key inside of quotation marks was used to log the value stored in that key to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-objects"&gt;
  &lt;/a&gt;
  Changing Objects
&lt;/h2&gt;

&lt;p&gt;In addition to having the ability access the "key:value" pairs in an object, you can also change the data within the object. Here's an example using our example object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;breed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the delete operator deleted the "key:value" pair named breed. If you tried to log it to the console, undefined would be returned because it no longer exists. Adding "key:value" pairs to the dog object is just as easy. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;long haired&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hair&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//'long haired'&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding a key value pair involves nothing more than taking the object name and appending a key to it via dot or bracket notation and setting that equal to a value. This all occurs outside of the object. &lt;/p&gt;

&lt;p&gt;Take some time to manipulate the example object, add "key: value" pairs, delete "key: value" pairs, and experiment with assigning different data types to the values (objects, arrays, numbers, strings, booleans, undefined, null, etc). You will see that some of them work as values and some do not.  &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript's Strict Mode</title>
      <author>Jonathan Cohen</author>
      <pubDate>Thu, 06 May 2021 00:47:45 +0000</pubDate>
      <link>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</link>
      <guid>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</guid>
      <description>&lt;p&gt;Some devs would probably describe javascript as a flexible language. Flexible, in this case, would refer to JS allowing certain lines of code that don't fall under 'proper syntax' to run without issue. I've often heard this action be referred to as failing silently. 'Strict mode' could be used to combat this flexible behavior in a lot of cases. You could think of strict mode as a sort of JavaScript compass, pointing you in the general direction of your error.&lt;/p&gt;

&lt;p&gt;An example of not using strict mode vs. using strict mode could be seen with the variable assignment.  Not having strict mode while attempting to create a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;love = "Shovel Knight and Shield Knight" ;
love;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would run with JS considering the love variable a global variable created with the var keyword. With 'strict mode' set at the beginning of the script that variable assignment would not be allowed and JS would throw a reference error, showing you where the mistake was made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict' ;
love = "Shovel Knight and Shield Knight" ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" alt="shovel and shield"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would throw a reference error stating that love isn't defined. That error should let me know that I need to define the love variable with a keyword of either let or const. The var keyword can be considered as well but, for REASONS...... &lt;em&gt;ahem&lt;/em&gt;, we will just stick with let and const. &lt;/p&gt;

&lt;p&gt;Since realizing this was an actual thing in JS, I've been trying to make use of it as much as I can. It's helped me to get better with my syntax and there's so much more that I can do than help you avoid bad variable assignments. Give it a try if you get a chance &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Everything You Need to Know to Succeed as a Freelancer</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Thu, 06 May 2021 00:41:22 +0000</pubDate>
      <link>https://dev.to/tanoaksam/everything-you-need-to-know-to-succeed-as-a-freelancer-ffb</link>
      <guid>https://dev.to/tanoaksam/everything-you-need-to-know-to-succeed-as-a-freelancer-ffb</guid>
      <description>&lt;p&gt;First off: who am I to be offering this advice?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I've been freelancing off-and-on as a writer since 2012&lt;/li&gt;
&lt;li&gt;I have been self-employed or at least side-hustling for most of my adult life&lt;/li&gt;
&lt;li&gt;I currently freelance as a web developer and technical writer for agencies and tech startups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you follow me on &lt;a href="https://www.twitter.com/tanoaksam"&gt;Twitter&lt;/a&gt;, you're probably most interested in how to get started as a freelance web developer. &lt;/p&gt;

&lt;p&gt;If you're interested in getting paid to write, a lot of my advice will apply to you, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-need-a-vertical"&gt;
  &lt;/a&gt;
  1. You Need a Vertical
&lt;/h2&gt;

&lt;p&gt;When someone asks about your taste in music, the worst answer you can give is "I like a little bit of everything."&lt;/p&gt;

&lt;p&gt;OK, but- what are you &lt;em&gt;actually&lt;/em&gt; passionate about?&lt;/p&gt;

&lt;p&gt;The same goes for freelancing!&lt;/p&gt;

&lt;p&gt;Your "vertical" is the market or industry that you target.&lt;/p&gt;

&lt;p&gt;You need to be very specific about who you serve, and what you offer.&lt;/p&gt;

&lt;p&gt;I got my start in freelancing as a music journalist. I wrote about specific genres of music, and established a name for myself as a vocal supporter of my local music scene.&lt;/p&gt;

&lt;p&gt;I was "that local music guy."&lt;/p&gt;

&lt;p&gt;Now that I'm in tech, people know me as "that tree-hugging dude who's into the Jamstack."&lt;/p&gt;

&lt;p&gt;You need to be able to sum up your personal brand similarly.&lt;/p&gt;

&lt;p&gt;Speaking of which...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-need-a-personal-brand"&gt;
  &lt;/a&gt;
  2. You Need a Personal Brand
&lt;/h2&gt;

&lt;p&gt;I know. It sounds gross. It grossed me out for way longer than it should have.&lt;/p&gt;

&lt;p&gt;But look- if you interact with other people in public, guess what? &lt;/p&gt;

&lt;p&gt;You have a personal brand.&lt;/p&gt;

&lt;p&gt;And if you're intentional about crafting that brand, you can establish yourself as an authority on the services you offer within your vertical.&lt;/p&gt;

&lt;p&gt;This is another instance where it really pays off to "niche down." &lt;/p&gt;

&lt;p&gt;The more specific your niche is, the easier it will be for you to make yourself known as the go-to person within that niche.&lt;/p&gt;

&lt;p&gt;How do you become the go-to person for &lt;em&gt;anything?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-you-need-to-network"&gt;
  &lt;/a&gt;
  3. You Need to Network
&lt;/h2&gt;

&lt;p&gt;This was another one that I was allergic to in my younger years, and I just ended up shooting myself in the foot over the long run.&lt;/p&gt;

&lt;p&gt;Establishing professional connections doesn't have to feel weird or phony. &lt;/p&gt;

&lt;p&gt;It's only disingenuous if &lt;em&gt;you&lt;/em&gt; decide to be disingenuous about the relationships that you cultivate!&lt;/p&gt;

&lt;p&gt;The people you want to network with know how this game is played. &lt;/p&gt;

&lt;p&gt;They aren't going to think it's weird if you DM with a question or ask to have a chat. &lt;/p&gt;

&lt;p&gt;That's how we forge these relationships.&lt;/p&gt;

&lt;p&gt;Twitter is where the vast majority of my networking takes place. &lt;/p&gt;

&lt;p&gt;It's truly incredible the kinds of relationships you can build purely by sharing what you do.&lt;/p&gt;

&lt;p&gt;If you want to know more about how I tackled networking when I was brand new to the tech industry, check out my piece here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/tanoaksam/my-networking-strategy-for-making-meaningful-connections-in-tech-1702"&gt;My Networking Strategy for Making Meaningful Connections in Tech&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-need-clients"&gt;
  &lt;/a&gt;
  4. You Need Clients
&lt;/h2&gt;

&lt;p&gt;Well, duh. Easier said than done, right?&lt;/p&gt;

&lt;p&gt;How the heck do you land that first client when you don't have any experience, nor much of a professional network?&lt;/p&gt;

&lt;p&gt;The short answer is: &lt;/p&gt;

&lt;p&gt;Be very vocal about the services you offer!&lt;/p&gt;

&lt;p&gt;Your first client could easily be a family member, a friend of a friend, that dude from college you're still friends with on Facebook...&lt;/p&gt;

&lt;p&gt;Start with your personal network. You don't have to treat it like multi-level marketing or anything.&lt;/p&gt;

&lt;p&gt;Just make it known what you're up to and what you can do.&lt;/p&gt;

&lt;p&gt;You never know who might know somebody who knows somebody who might want to hire you.&lt;/p&gt;

&lt;p&gt;If that doesn't work for you, another approach is cold-emailing.&lt;/p&gt;

&lt;p&gt;I had some success at this when I was just getting started. &lt;/p&gt;

&lt;p&gt;That said: it's a numbers game. It can be &lt;em&gt;very&lt;/em&gt; tedious work, and a full-time commitment just to find &lt;em&gt;prospective&lt;/em&gt; leads.&lt;/p&gt;

&lt;p&gt;The vast majority of emails you send will be ignored.&lt;/p&gt;

&lt;p&gt;For every 100 &lt;em&gt;carefully targeted, meticulously curated&lt;/em&gt; emails you send, you might expect to close 1 or 2 deals if you're lucky.&lt;/p&gt;

&lt;p&gt;Nobody said it was easy.&lt;/p&gt;

&lt;p&gt;If you want to know more about how I did it, you can read about my workflow here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tanoaksam.hashnode.dev/freelancing-workflow"&gt;My Freelancing Workflow, From Cold Leads to Paid Invoices&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-need-patience-and-diligence"&gt;
  &lt;/a&gt;
  5. You Need Patience and Diligence
&lt;/h2&gt;

&lt;p&gt;I don't care how talented you are - this isn't going to happen overnight.&lt;/p&gt;

&lt;p&gt;The only way this is going to work over the long-term is if you are diligent about &lt;em&gt;establishing your reputation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;People who casually follow me on Twitter know me as a freelancer in the tech industry - &lt;em&gt;that wasn't an accident!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I put in the work over time, and it has paid off.&lt;/p&gt;

&lt;p&gt;Essentially all of my marketing happens on Twitter now.&lt;/p&gt;

&lt;p&gt;People approach me with work now - sometimes more than I can take on.&lt;/p&gt;

&lt;p&gt;All because I have been intentional about how I present my personal brand to the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-you-need-to-upsell"&gt;
  &lt;/a&gt;
  6. You Need to Upsell
&lt;/h2&gt;

&lt;p&gt;Who are the people you should be targeting the most with your marketing?&lt;/p&gt;

&lt;p&gt;The people who are already paying you!&lt;/p&gt;

&lt;p&gt;The simplest way to land more work is to make it known to your existing clients that you can be hired for additional work.&lt;/p&gt;

&lt;p&gt;See something that needs doing? Write a proposal outlining how you would do it, and why it matters!&lt;/p&gt;

&lt;p&gt;Ask - directly - for referrals!&lt;/p&gt;

&lt;p&gt;There's a good chance your clients know other people who might want to hire you. &lt;/p&gt;

&lt;p&gt;But most people aren't going to go out of their way to make those connections on your behalf.&lt;/p&gt;

&lt;p&gt;Unless you ask.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-you-need-multiple-revenue-streams"&gt;
  &lt;/a&gt;
  7. You Need Multiple Revenue Streams
&lt;/h2&gt;

&lt;p&gt;My career as a music journalist imploded in 2014 when my one long-term client suddenly shut down and I couldn't sustain myself off of free concert tickets alone.&lt;/p&gt;

&lt;p&gt;I put all of my eggs in one basket, and didn't prioritize forging stronger relationships with other potential clients while I was so comfortable with the one.&lt;/p&gt;

&lt;p&gt;When you're self-employed, nobody owes you a paycheck just for showing up.&lt;/p&gt;

&lt;p&gt;When the contract is fulfilled - or otherwise can't be renewed - you're on your own.&lt;/p&gt;

&lt;p&gt;Your networking and marketing efforts can't stop simply because the work is flowing steadily today.&lt;/p&gt;

&lt;p&gt;Even if you have one or two big clients paying your bills at the moment, you should always be diligent about forging new relationships and strengthening older ones. &lt;/p&gt;

&lt;p&gt;You never know where your next big deal might come from.&lt;/p&gt;

&lt;p&gt;Also- consider ways you might be able to "productize" your services.&lt;/p&gt;

&lt;p&gt;If you're a subject matter expert, you might write a book or launch a course.&lt;/p&gt;

&lt;p&gt;If you have a particular service with a process that looks pretty much the same for all clients - like an SEO audit or a content strategy consultation - you could turn this into a flat-rate product rather than charging an hourly fee.&lt;/p&gt;

&lt;p&gt;I'm not a fan of the term "passive income" - the work it takes upfront is anything but passive.&lt;/p&gt;

&lt;p&gt;That said - it never hurts to have some extra cash show up on a regular basis for work you completed months or years ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-need-tools-to-make-your-life-easier"&gt;
  &lt;/a&gt;
  8. You Need Tools to Make Your Life Easier
&lt;/h2&gt;

&lt;p&gt;I don't know what I would do without Freshbooks for accounting and invoicing.&lt;/p&gt;

&lt;p&gt;For digital contracts you can use HelloSign or DocuSign - I've found them to be pretty much the same on the free tier.&lt;/p&gt;

&lt;p&gt;All of my research, note-taking, and writing happens in &lt;a href="https://www.obsidian.md"&gt;Obsidian&lt;/a&gt;. There are many other options out there for this kind of thing, but I'm happy with my decision.&lt;/p&gt;

&lt;p&gt;You will probably want to set yourself up with Google Workspace for a custom domain email, and Search Console to keep track of analytics on your portfolio site. &lt;/p&gt;

&lt;p&gt;(You &lt;em&gt;do&lt;/em&gt; have a portfolio site, right?)&lt;/p&gt;

&lt;p&gt;Finally, consider ways to manage and track your time. &lt;/p&gt;

&lt;p&gt;Calendly is a fantastic tool for streamlining the process of scheduling meetings.&lt;/p&gt;

&lt;p&gt;I'm a big fan of the Pomodoro method for time management, which involves setting a timer for 25 minutes of focused work, followed by a 5 minute break. &lt;/p&gt;

&lt;p&gt;This is how I structure my daily schedule and keep track of how much time I invest in any given project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-you-enjoyed-this-piece-and-you-want-to-keep-up-with-my-work-you-can-sign-up-for-my-email-newsletter-through-this-link-i-promise-to-make-every-email-something-you-will-be-excited-to-open"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you enjoyed this piece and you want to keep up with my work, you can &lt;a href="https://buttondown.email/samuelsycamore"&gt;sign up for my email newsletter through this link&lt;/a&gt;. I promise to make every email something you will be excited to open!&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>freelancing</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deconstructing a bitcoin transaction</title>
      <author>thunderbiscuit</author>
      <pubDate>Thu, 06 May 2021 00:38:55 +0000</pubDate>
      <link>https://dev.to/thunderbiscuit/deconstructing-a-bitcoin-transaction-4l2n</link>
      <guid>https://dev.to/thunderbiscuit/deconstructing-a-bitcoin-transaction-4l2n</guid>
      <description>&lt;p&gt;Here is a hex dump of the raw bitcoin transaction &lt;a href="https://blockstream.info/tx/e778e8765fdbb60f62e267de4705789f526a5fe9bb0c0f5e56ab4f566c5240eb"&gt;&lt;code&gt;e778e8765fdbb60f62e267de4705789f526a5fe9bb0c0f5e56ab4f566c5240eb&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0H7oScC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbn2zkebn9s1t8zhbgc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0H7oScC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbn2zkebn9s1t8zhbgc1.png" alt="raw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've seen bitcoin transactions expressed in this form if you've ever tried to dive into the more technical bitcoin books, or have just been lurking around in the bitcoin community for long enough. They seem arcane and of impenetrable complexity, but it turns out that that's not the case at all; the above transaction, for example, is composed of 15 small building blocks, each one easy to find and interpret.&lt;/p&gt;

&lt;p&gt;Studying the structure of bitcoin transactions in their "true" form is a valuable quest for all bitcoiners. This article is written with the curious bitcoiner in mind looking to get a high level understanding of what exactly gets passed around from node to node on the network. Let's get to it.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#priors"&gt;
  &lt;/a&gt;
  Priors
&lt;/h2&gt;

&lt;p&gt;To really understand all pieces of a transaction, a basic grasp of 4 foundational, non-bitcoin concepts are important: &lt;strong&gt;bytes and hexadecimal notation&lt;/strong&gt;, &lt;strong&gt;endianness&lt;/strong&gt;, &lt;strong&gt;variable-length fields&lt;/strong&gt;, and &lt;strong&gt;varints&lt;/strong&gt;. I address all 4 of those in the sections below, but if you are familiar with computer science in general you most definitely won't need this kind of entry level review. If you are not familiar with them, however, I think you'll find them enlightening, and they will most definitely serve you well on your journey into bitcoin.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-bytes-and-hexes"&gt;
  &lt;/a&gt;
  1. Bytes and Hexes
&lt;/h4&gt;

&lt;p&gt;You might have seen "raw" bitcoin transactions printed in hexadecimal format (the transaction above is an example of that). But of course computers only speak the language of bits (0s and 1s). A bitcoin transaction in it's computer-understandable form is therefore a string of binary digits. Moreover, those 0s and 1s are always kept in small groups of 8 bits, called &lt;strong&gt;bytes&lt;/strong&gt;. Here is an example of a byte: &lt;code&gt;1101 0110&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with binary code is that it's not easy for humans to parse. The transaction above (and it's not even a big one) written in binary format is exactly 1,800 digits (&lt;code&gt;10101011100101000101100000110100000011101...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But binary numbers are still numbers; if we write them for humans we can write them in any we want that works best. Decimal notation (our regular number system), Roman numerals, Korean characters. etc.&lt;/p&gt;

&lt;p&gt;Decimal notation would be an obvious candidate, but it turns out that it is not very convenient for working with bytes. Take for example the bytes &lt;code&gt;1101 0110&lt;/code&gt; and &lt;code&gt;0000 0010&lt;/code&gt;. In decimal notation, the first number is &lt;code&gt;214&lt;/code&gt;, whereas the second number is &lt;code&gt;3&lt;/code&gt;. In fact every byte, when written in decimal notation, will take between 1 and 3 digits. That's not convenient, because then you'd never know when a byte ends and when the next one starts—how many bytes is &lt;code&gt;21431042&lt;/code&gt;? There can be multiple interpretations.&lt;/p&gt;

&lt;p&gt;Instead, a preferred numbering system for writing bytes for human consumption is the &lt;a href="https://en.wikipedia.org/wiki/Hexadecimal"&gt;hexadecimal number notation&lt;/a&gt;. A full explanation is beyond the scope of this post, but you should know that the number of possible arrangements of 4 bits is 16, and that the hexadecimal notation system has exactly... 16 digits. They map out nice and tidy with &lt;strong&gt;half a byte&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADOahvSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skphq0vhceix9nksikus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADOahvSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skphq0vhceix9nksikus.png" alt="hexes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we can now represent our bytes as two hexadecimal digits, for a clean notation. Each byte is two hexadecimal digits, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rt_vVTup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1nmvucudqvbot4iimg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rt_vVTup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1nmvucudqvbot4iimg2.png" alt="bytes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're looking at a big hexadecimal string like the one at the beginning of this post, you're really just looking at a neat little representation of a bunch of bytes, with each block of two characters representing one byte.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-bigendian-and-littleendian-ordering"&gt;
  &lt;/a&gt;
  2. Big-Endian and Little-Endian Ordering
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Endianness"&gt;Endianness&lt;/a&gt; refers to the order of bytes within a representation of a number. You can think of it as the "direction" in which bytes should be read for meaning, while understanding that either direction does not influence the ultimate meaning of the bytes. &lt;/p&gt;

&lt;p&gt;Take for example the number &lt;em&gt;one thousand five hundred and ninety two&lt;/em&gt;. You are probably used to reading a number like this in the following way: &lt;code&gt;1592&lt;/code&gt;. At the same time, if I told you that I had this weird habit of always writing my numbers from right to left, you would still know that &lt;code&gt;2951&lt;/code&gt; means &lt;em&gt;one thousand five hundred and ninety two&lt;/em&gt;, because you'd know me and understand my weird habit.&lt;/p&gt;

&lt;p&gt;It turns out that some computer architectures are more efficient when working with numbers if they are stored with the &lt;em&gt;least significant byte first&lt;/em&gt; (the equivalent of reading right to left), and so a lot of the numbers we use when communicating with computers are "translated" to that format. We call this computer version of a number &lt;em&gt;little-endian&lt;/em&gt;, because it starts with the &lt;em&gt;little end&lt;/em&gt;. When shifting from big-endian to little-endian, it's the &lt;em&gt;bytes&lt;/em&gt; that we shift. This means shifting the last two characters (remember that one byte equals two hexadecimal characters) for the two up front, and so on. &lt;/p&gt;

&lt;p&gt;The number 220,000 in hexadecimal notation is written &lt;code&gt;03 5b 60&lt;/code&gt;, but expressed in little-endian it becomes &lt;code&gt;60 5b 03&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A real life example would be our transaction id for this article, which if referred to within a bitcoin transaction will be written in its little-endian form, but if you try to look it up in a block explorer, you'll need it's "human", big-endian version:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIh5oUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj9nhxaiz1ipixq2wn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIh5oUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj9nhxaiz1ipixq2wn4.png" alt="endian"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-variablelength-fields"&gt;
  &lt;/a&gt;
  3. Variable-Length Fields
&lt;/h4&gt;

&lt;p&gt;You'll notice that the bytes in a transaction are all glued together in one big continuous blob. How does the software know where an input start and where it ends? How does it know if a certain byte belongs to the number of bitcoin transmitted or to the receiving address? The flexibility offered by bitcoin transactions implies that there are an extremely rich number of combinations possible, and that the scripts required for unlocking utxos vary greatly in length.&lt;/p&gt;

&lt;p&gt;One way to deal with this uncertainty would be to give every field a set length in bytes. This is what the version field does, for example: the version number of a transaction is always written in the first 4 bytes of a transaction (see the &lt;code&gt;01000000&lt;/code&gt; number that starts the transaction below). In a lot of cases, however the length needed to transmit the necessary data differs widely between transactions: unlocking scripts for a simple Pay to Public Key hash might be 106 bytes long like in the transaction we are using in this post, but they can easily be 5 times that size on complex multisig scripts. Giving a fixed length to that data section would not only be inefficient (a lot of transactions would not need that much space at all), it would also be limiting, because scripts would have to stay under that size.&lt;/p&gt;

&lt;p&gt;A better way to deal with this and keep both flexibility and efficiency is by using a small marker at the beginning of a variable-length section that will give the software an indication of the lenght of the  section to follow. Here is an example of a series of 6 bytes: &lt;code&gt;05 e7 78 e8 76 5a&lt;/code&gt;. If we knew that the first byte was a indicator byte for the length of the section, a plain-english reading of this would then look like this: &lt;/p&gt;

&lt;p&gt;byte 1: &lt;code&gt;05 &amp;gt;&amp;gt;&amp;gt; the following section is 5 bytes long&lt;/code&gt;&lt;br&gt;
bytes 2 to 6: &lt;code&gt;e7 78 e8 76 5a &amp;gt;&amp;gt;&amp;gt; data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin transactions use a mix of fixed-length fields and variable-length fields. I'll make note of which ones use which in the description of each parts.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-varints"&gt;
  &lt;/a&gt;
  4. Varints
&lt;/h4&gt;

&lt;p&gt;Variable Integers (varints) are a way to write a very wide range of numbers in a way that minimizes their cost on transaction space.&lt;/p&gt;

&lt;p&gt;To understand how they accomplish this, first note that the bigger the number we need to write down, the more bytes it requires. &lt;em&gt;Three&lt;/em&gt; is written as &lt;code&gt;00000010&lt;/code&gt; (1 byte), whereas &lt;code&gt;two million twenty nine thousand five hundred and twelve&lt;/code&gt; is written as &lt;code&gt;000111101111011111001000&lt;/code&gt; (3 bytes).&lt;/p&gt;

&lt;p&gt;The problem we are faced with is that all bytes are glued together in one long string of 0s and 1s, and the software needs to know exactly where each of the fields pertinent to a transaction start and end. One way to deal with this is to give fields a never-changing length, so that we always know when they end. This is what the version field does, for example: the version number of a transaction is always written in the first 4 bytes of a transaction (see the &amp;lt;code &lt;code&gt;01000000&lt;/code&gt; number that starts the transaction below). The problem with this approach is that if we sometimes need to accommodate numbers of great size, we will need to give the field a length with the ability to accommodate all of those numbers (say 8 bytes dedicated to a particular field). But if in most cases we only use the field for very small numbers, then a lot of those bytes are just wasted, because those small numbers only need 1 byte. If this type of field is required in multiple places in a transaction, all that waste starts to add up. Rather, we need a solution that will use &lt;em&gt;only the space required&lt;/em&gt; for the number we wish to write. This is what varints do; they use 1 byte for most of our use cases, and up to 9 bytes for the really big numbers we don't expect often.&lt;/p&gt;

&lt;p&gt;The way this is achieved is simple. A single byte can normally be used to represent the numbers 0 to 255. If the number we need represented (say, the number of inputs in a transaction) is &lt;em&gt;below&lt;/em&gt; 253, we write it in the first byte, and the software knows that that's all there is to it. If the number is big enough that it needs a few more bytes to write, we instead write &lt;em&gt;253&lt;/em&gt; in that first byte, which will be interpreted by the software as "read the next two bytes as the actual number I need to communicate". If the number is even bigger, we use 254 instead, meaning "read the next 4 bytes for the actual number", and if our number needs even more, we use 255, which implies the next 8 bytes are the actual representation of our number. Easy and efficient; most varints used in transactions never need to be more than one byte, but they can all grow to accommodate incredibly large numbers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-legacy-bitcoin-transaction"&gt;
  &lt;/a&gt;
  A Legacy Bitcoin Transaction
&lt;/h2&gt;

&lt;p&gt;A "legacy" bitcoin transaction is the name we give a transaction that does not implement &lt;em&gt;Segregated Witness&lt;/em&gt;, a newer form of transaction in which the "witness" data (fields 5 and 6 below) are put into their own special section (we say they are &lt;em&gt;segregated&lt;/em&gt;, hence the name).&lt;/p&gt;

&lt;p&gt;These legacy transactions are perfectly valid bitcoin transactions, but they are being used less and less because of the efficiency gains made by the segregated witness approach resulting in lower fees, as well as its fix of the &lt;em&gt;transaction malleability&lt;/em&gt; bug, enabling, among others, the creation of lightning channels. Legacy transactions are easy to identify because they involve unlocking utxo(s) belonging to addresses starting with a 1. &lt;/p&gt;

&lt;p&gt;This article breaks down a typical legacy transaction where one utxo is used and spent into two: one payment to a payee, and one payment to a change address. It contains 15 different fields, and I describe each of their purpose below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ8IZcdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeo7hh51zpi6gphyeh17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ8IZcdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeo7hh51zpi6gphyeh17.png" alt="transaction"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2auUYGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d16rdos2vz1r74dh2llz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2auUYGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d16rdos2vz1r74dh2llz.png" alt="parts"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-transaction-version-number"&gt;
  &lt;/a&gt;
  [1] transaction version number
&lt;/h4&gt;

&lt;p&gt;This field specifies the type of transaction being transmitted. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes) and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The field indicates that this transaction is of version 1.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-number-of-inputs"&gt;
  &lt;/a&gt;
  [2] number of inputs
&lt;/h4&gt;

&lt;p&gt;This field expresses how many inputs will be unlocked by the transaction. Each of those inputs will need to be identified (here with fields 3 and 4), and unlocked (here with fields 5 and 6). In our case there is only one input, and so we only need to go through this loop once, but in the case where there are many inputs, we repeat the fields 3 to 6 as many times as there are inputs. This field is a &lt;strong&gt;varint&lt;/strong&gt;, is &lt;strong&gt;little-endian&lt;/strong&gt;, and can grow up to 9 bytes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The byte indicates that the transaction unlocks only one UTXO.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-previous-transaction-id"&gt;
  &lt;/a&gt;
  [3] previous transaction id
&lt;/h4&gt;

&lt;p&gt;This field expresses the transaction which contains the output to be unlocked by the unlocking script in the coming fields 5 and 6. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (32 bytes), and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;04dde43b0e4724f1e3b45782a9bfbcc91ea764c7cb1c245fba1fefa175c3a5d0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because the field is little-endian, if you wish to search for that transaction in a block explorer you'll need to convert it to big endian first: &lt;a href="https://blockstream.info/tx/d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04"&gt;&lt;code&gt;d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04&lt;/code&gt;&lt;/a&gt;. A look at that transaction will reveal that there were 2 outputs to it. Which one of those two is unlocked by the signature script is defined in the next field.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-ouput-number-in-previous-transaction"&gt;
  &lt;/a&gt;
  [4] ouput number in previous transaction
&lt;/h4&gt;

&lt;p&gt;Defining the transaction an output comes from is not precise enough—there might be more than one. We need to know which output from that transaction is being unlocked, and this field expresses that. It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes), and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In Our Example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;01000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the number 1 written in little endian, indicating that the output being unlocked is the second one in transaction &lt;a href="https://blockstream.info/tx/d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04"&gt;&lt;code&gt;d0a5c375a1ef1fba5f241ccbc764a71ec9bcbfa98257b4e3f124470e3be4dd04&lt;/code&gt;&lt;/a&gt;. It is valid for 300,000 satoshis, or 0.00300000 bitcoin.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-size-of-the-unlocking-script"&gt;
  &lt;/a&gt;
  [5] size of the unlocking script
&lt;/h4&gt;

&lt;p&gt;This field indicates the number of bytes taken by the unlocking script, the field that follows it. It is a &lt;strong&gt;varint&lt;/strong&gt;, and can take up to 9 bytes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;6a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 106, meaning our unlocking script (field 6) will be 106 bytes long (212 hex characters).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-unlocking-script"&gt;
  &lt;/a&gt;
  [6] Unlocking script
&lt;/h4&gt;

&lt;p&gt;You can think of the unlocking script as the key that unlocks the utxo. If any of the unlocking scripts fail for any of the input utxos, the whole transaction fails. If all unlocking scripts succeed, the signer has proven they have ownership of the coins, and the transaction can move forward to the next steps. This field is of &lt;strong&gt;variable length&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;4730440220519f7867349790ee441e83e545afbd25b954a34e0733cd4da3b5f1e5588625050220166730d053c3672973bcb2bb1a977b747837023b647e3af2ac9c15728b0681da01210236ccb7ee3a9f154127f384a05870c4fd86a8727eab7316f1449a0b9e65bfd90d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The unlocking script is written in a language called &lt;em&gt;Script&lt;/em&gt;, a language unique to bitcoin. It is beyond the scope of this article to look at the exact unlocking script used in this transaction, but we know it was a valid script, since the transaction was indeed propagated by the network, and later on mined.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-sequence-number"&gt;
  &lt;/a&gt;
  [7] sequence number
&lt;/h4&gt;

&lt;p&gt;The sequence number is a field initially designed for a purpose it never fulfilled. Nowadays it is often disabled  by setting it to &lt;code&gt;ffffffff&lt;/code&gt;. It can used to signal that a transction  is replace-by-fee enabled as per &lt;a href=""&gt;BIP 125&lt;/a&gt;, by setting the field equal to any number below &lt;code&gt;ffffffff -1&lt;/code&gt;. In some cases, the field is used to set timelocks (to enable this, verion 2 of a transaction must be declared in field 1). It is of &lt;strong&gt;fixed-length&lt;/strong&gt; (4 bytes) and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;ffffffff&lt;/code&gt;&lt;br&gt;
The field is disabled in this transaction.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#8-number-of-outputs"&gt;
  &lt;/a&gt;
  [8] number of outputs
&lt;/h4&gt;

&lt;p&gt;This field expresses how many outputs the transaction will create. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;02&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The transaction has two outputs.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#9-amount-going-to-output-0"&gt;
  &lt;/a&gt;
  [9] amount going to output 0
&lt;/h4&gt;

&lt;p&gt;This field expresses the amount of bitcoin being locked in output 0, expressed in satoshis. It is a &lt;strong&gt;fixed-length&lt;/strong&gt; field of 8 bytes, and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;5d36010000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output 0 locks in 79,453 satoshis.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#10-size-of-locking-script-for-output-0"&gt;
  &lt;/a&gt;
  [10] size of locking script for output 0
&lt;/h4&gt;

&lt;p&gt;This field expresses the size of the locking script for output 0. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;19&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 25, meaning our locking script will be 25 bytes long (50 hex characters)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#11-locking-script-for-output-0"&gt;
  &lt;/a&gt;
  [11] locking script for output 0
&lt;/h4&gt;

&lt;p&gt;This field is the locking script for output 0. It is a &lt;strong&gt;variable-length&lt;/strong&gt; field.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;76a91478364a559841329304188cd791ad9dabbb2a3fdb88ac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can think of this field as a of lock we put on output 0. It is written in Script, bitcoin's own programming language.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#12-amount-going-to-output-1"&gt;
  &lt;/a&gt;
  [12] amount going to output 1
&lt;/h4&gt;

&lt;p&gt;This field expresses the amount of bitcoin being locked in output 1, expressed in satoshis. It is a &lt;strong&gt;fixed-length&lt;/strong&gt; field of 8 bytes, and is &lt;strong&gt;little-endian&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;605b030000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output 1 locks in 220,000 satoshis.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#13-size-of-locking-script-for-output-1"&gt;
  &lt;/a&gt;
  [13] size of locking script for output 1
&lt;/h4&gt;

&lt;p&gt;This field expresses the size of the locking script for output 1. It is a &lt;strong&gt;varint&lt;/strong&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;19&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This byte is the hexadecimal representation of 25, meaning our locking script will be 25 bytes long (50 hex characters).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#14-locking-script-for-output-1"&gt;
  &lt;/a&gt;
  [14] locking script for output 1
&lt;/h4&gt;

&lt;p&gt;This field is the locking script for output 0. It is a variable-length field. This is a &lt;strong&gt;variable-length&lt;/strong&gt; field.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;76a914064e0aa817486573f4c2de09f927697e1e6f233f88ac&lt;/code&gt;&lt;br&gt;
We can think of this field as a of lock we put on output 1. It is written in Script, bitcoin's own programming language.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#15-nlocktime"&gt;
  &lt;/a&gt;
  [15] nLocktime
&lt;/h4&gt;

&lt;p&gt;nLocktime field allows for a transaction to be unspendable until a certain point in the future. If the field is set to &lt;code&gt;00000000&lt;/code&gt;, the transaction is spendable right away. If they field is any number &lt;em&gt;below&lt;/em&gt; 500 million, it is intepreted as a block height. If it is &lt;em&gt;above&lt;/em&gt; 500 million, it is interpreted as a Unix timestamp. Transactions with locktimes on them will not be propagated by nodes if they are not valid at the time a node see it, hence the sender must wait until the transaction is valid before broadcasting.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#in-our-example"&gt;
  &lt;/a&gt;
  In our example:
&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;00000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our example the nLocktime field is such that the transaction is spendable right away.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-notes-on-the-above-transaction"&gt;
  &lt;/a&gt;
  Some notes on the above transaction
&lt;/h2&gt;

&lt;p&gt;The example used here is a type of transaction known as a &lt;em&gt;Pay to Public Key Hash&lt;/em&gt;, or P2PKH. It is the simplest form of transactions we see nowadays. The transaction hex has 450 characters, and the transaction is therefore 225 bytes in size.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#txid"&gt;
  &lt;/a&gt;
  TXID
&lt;/h2&gt;

&lt;p&gt;The txid (transaction identifier) is derived from hashing the transaction data twice using SHA256. You can test this with our example transaction right in your shell. The following command basically takes the hex dump of the transaction, converts it to binary, hashes it, then converts that result to binary again, and hashes it once more. It is then printed to console in little-endian, hex format. Notice that you'll need to convert it to big-endian if you want to use it in a block explorer!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;010000000104dde43b0e4724f1e3b45782a9bfbcc91ea764c7cb1c245fba1fefa175c3a5d0010000006a4730440220519f7867349790ee441e83e545afbd25b954a34e0733cd4da3b5f1e5588625050220166730d053c3672973bcb2bb1a977b747837023b647e3af2ac9c15728b0681da01210236ccb7ee3a9f154127f384a05870c4fd86a8727eab7316f1449a0b9e65bfd90dffffffff025d360100000000001976a91478364a559841329304188cd791ad9dabbb2a3fdb88ac605b0300000000001976a914064e0aa817486573f4c2de09f927697e1e6f233f88ac00000000 | xxd &lt;span class="nt"&gt;-revert&lt;/span&gt; &lt;span class="nt"&gt;-plain&lt;/span&gt; | &lt;span class="nb"&gt;sha256sum&lt;/span&gt; | xxd &lt;span class="nt"&gt;-revert&lt;/span&gt; &lt;span class="nt"&gt;-plain&lt;/span&gt; | &lt;span class="nb"&gt;sha256sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#on-signing-and-broadcasting"&gt;
  &lt;/a&gt;
  On Signing and Broadcasting
&lt;/h2&gt;

&lt;p&gt;An often overlooked aspect of bitcoin transactions is how creating them and broadcasting them are two completely separate tasks, and that they can be done independently of each other. We mostly use wallets that construct and sign transactions and &lt;em&gt;also&lt;/em&gt; broadcast them for us, but it does not have to be so.&lt;/p&gt;

&lt;p&gt;This is what projects like &lt;a href="https://txtenna.com/"&gt;TxTenna&lt;/a&gt; and the Lightning Network are leveraging.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;I hope this article proved to be an interesting way to peel the first layer on bitcoin transactions if you had not seen them this way before. More to come!&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>Explain Svelte slots like I'm five</title>
      <author>Tan Li Hau</author>
      <pubDate>Thu, 06 May 2021 00:24:33 +0000</pubDate>
      <link>https://dev.to/tanhauhau/explain-svelte-slots-like-i-m-five-4ggk</link>
      <guid>https://dev.to/tanhauhau/explain-svelte-slots-like-i-m-five-4ggk</guid>
      <description>&lt;p&gt;If you prefer watching video tutorials, you can watch me explain slots on YouTube&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rwYgOU0WmVk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-slot"&gt;
  &lt;/a&gt;
  What is a slot?
&lt;/h2&gt;

&lt;p&gt;Just like element, you can pass child element to Components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Component&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Component&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the child elements passed to a Component won't show up on the screen, unless explicitly specified using a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element in the Component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element decides where to insert the child elements of the Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Component.svelte --&amp;gt;&lt;/span&gt;
Some content #1
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Some content #2

&lt;span class="c"&gt;&amp;lt;!-- What you'll see on the DOM --&amp;gt;&lt;/span&gt;
Some content #1
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some content #2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element multiple times, it just means you want to insert the child elements multiple times in various places&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Component.svelte --&amp;gt;&lt;/span&gt;
Some content #1
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Some content #2
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Some content #3
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Some content #4

&lt;span class="c"&gt;&amp;lt;!-- What you'll see on the DOM --&amp;gt;&lt;/span&gt;
Some content #1
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some content #2
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some content #3
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Children&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some content #4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#named-slot"&gt;
  &lt;/a&gt;
  Named Slot
&lt;/h2&gt;

&lt;p&gt;But sometimes you want to have some of the child elements inserted at 1 place, and the other in another place.... &lt;/p&gt;

&lt;p&gt;That's when you want a named slot!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Component.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Some Content here
&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To specify which elements go to which named slots, you use the &lt;code&gt;slot="xxx"&lt;/code&gt; attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Component&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Component&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- What you'll see on the DOM --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some Content here
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-sveltefragment-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;svelte:fragment&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Unfortunately, if you want multiple elements going into the same slot, specifying the same slot attribute value to more than one elements end up with an error ⚠️😢&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Component&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header #1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header #2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Component&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- ⚠️ Duplicate slot name "header" in &amp;lt;Component&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's when you use a &lt;code&gt;&amp;lt;svelte:fragment&amp;gt;&lt;/code&gt; to group them!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Component&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svelte:fragment&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Header #1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Header #2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/svelte:fragment&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Component&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- What you'll see on the DOM --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Header #1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Header #2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Some Content here
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://svelte.dev/docs#svelte_fragment"&gt;Docs: &lt;code&gt;&amp;lt;svelte:fragment&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slot-fallback"&gt;
  &lt;/a&gt;
  Slot fallback
&lt;/h2&gt;

&lt;p&gt;Finally, what happens if you didn't pass elements to the Component, but the Component expects something with a slot?&lt;/p&gt;

&lt;p&gt;Nothing happens!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Component&amp;gt;
&amp;lt;/Component&amp;gt;

&amp;lt;!-- What you'll see on the DOM --&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you can always provide a fallback content if nothing is provided 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Component.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&lt;/span&gt;Fallback content&lt;span class="nt"&gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- What you'll see on the DOM --&amp;gt;&lt;/span&gt;
Fallback content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Svelte Tutorial: Slots &lt;a href="https://svelte.dev/tutorial/slots"&gt;https://svelte.dev/tutorial/slots&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Svelte Tutorial: Slots Fallbacks &lt;a href="https://svelte.dev/tutorial/slot-fallbacks"&gt;https://svelte.dev/tutorial/slot-fallbacks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Svelte Tutorial: Named Slots &lt;a href="https://svelte.dev/tutorial/named-slots"&gt;https://svelte.dev/tutorial/named-slots&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>slot</category>
    </item>
    <item>
      <title>Simple CSS Flex Tutorial</title>
      <author>Jakob Codes</author>
      <pubDate>Wed, 05 May 2021 23:23:31 +0000</pubDate>
      <link>https://dev.to/javascriptual/simple-css-flex-tutorial-2oc4</link>
      <guid>https://dev.to/javascriptual/simple-css-flex-tutorial-2oc4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_A67zBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr7cu7vypyw7xdypeet2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_A67zBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr7cu7vypyw7xdypeet2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;strong&gt;these coding books&lt;/strong&gt; &lt;a href="https://javascriptteacher.com/h/css"&gt;CSS&lt;/a&gt; ,  &lt;a href="https://javascriptteacher.com/h/jsg"&gt;JavaScript&lt;/a&gt; and &lt;a href="https://javascriptteacher.com/h/jsg"&gt;Python&lt;/a&gt;. Some of them are also available on Amazon if you need extra desk reference.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Flex is a set of CSS properties that help web designers create layouts. Officially Flex is actually called Flexbox which stands for &lt;em&gt;flexible box&lt;/em&gt;. It automatically adjusts layout spacing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flex automatically adjusts dimensions of your items inside parent container based on browser size, size of neighboring items and space between them. This makes flex an ideal tool for creating responsive website layouts.&lt;/p&gt;

&lt;p&gt;Learning as many flex property/value combinations is essential for understanding how it works. So let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parent-and-items"&gt;
  &lt;/a&gt;
  Parent And Items
&lt;/h2&gt;

&lt;p&gt;Flex block consists of parent container and nested items. Some flex properties should be applied only to parent. While others only to items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mainaxis-and-crossaxis"&gt;
  &lt;/a&gt;
  Main-axis and Cross-axis
&lt;/h2&gt;

&lt;p&gt;Thinking in flex involves knowing about main-axis and cross-axis. Main-axis - the horizontal one - is the default. Placing items inside flex container will automatically align them against main-axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfm-xbOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zs8azcdrr9hv2ebbgfvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfm-xbOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zs8azcdrr9hv2ebbgfvj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-flex-properties-raw-justifycontent-endraw-and-raw-aligncontent-endraw-"&gt;
  &lt;/a&gt;
  CSS Flex properties &lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-content&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Get used to these two properties and make them your second nature!&lt;/p&gt;

&lt;p&gt;Along Main-axis you'll use &lt;code&gt;justify-content&lt;/code&gt; property for creating spacing between items. On Cross-axis you will use &lt;code&gt;align-content&lt;/code&gt; property to do the same vertically.&lt;/p&gt;

&lt;p&gt;However &lt;code&gt;align-content&lt;/code&gt; only works if there are multiple rows of flex items. (That is, you have more items that can fit into the width of your container and "wrap" onto the next line. You'll need to apply &lt;code&gt;flex-wrap: wrap&lt;/code&gt; in order for your items to jump to next row.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-enable-flex-on-an-html-element"&gt;
  &lt;/a&gt;
  How To Enable Flex On An HTML Element?
&lt;/h2&gt;

&lt;p&gt;Flex can be applied to basic HTML elements that deal with dividing or sectioning your layout into separate blocks.&lt;/p&gt;

&lt;p&gt;To make an HTML element behave as a flex container simply apply &lt;code&gt;display:flex&lt;/code&gt; property to parent:&lt;/p&gt;

&lt;p&gt;HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id = "flex"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div#flex { display:flex }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#populating-flex-container-with-items"&gt;
  &lt;/a&gt;
  Populating flex container with items
&lt;/h3&gt;

&lt;p&gt;Now all you have to do is simply nest your flex parent container with as many items as you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id = "flex"&amp;gt;
   &amp;lt;div&amp;gt;A&amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;B&amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;C&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to apply some basic styles to each item depending on what you're trying to make. That's entirely up to you! In this example &lt;code&gt;box-shadow&lt;/code&gt; property was used to make the item stand out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tv3cYmnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxk65qe26axlntidq2qq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tv3cYmnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxk65qe26axlntidq2qq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default flex will justify content left (value &lt;code&gt;flex-start&lt;/code&gt;). This means the value &lt;code&gt;flex-start&lt;/code&gt; is applied to &lt;code&gt;justify-content&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;Now onto the fun part. Aligning items!&lt;/p&gt;

&lt;p&gt;Flex has a set of unique values you can assign to &lt;code&gt;justify-content&lt;/code&gt; property. And for the most part, this is what designing layouts with flex is all about. It's choosing amount of space you want to have between your items.&lt;/p&gt;

&lt;p&gt;Let's try this simple example first.&lt;/p&gt;

&lt;p&gt;I edited &lt;code&gt;div#flex&lt;/code&gt; style in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div#flex {
    display: flex;
    justify-content: space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simply adding &lt;code&gt;justify-content: space-evenly;&lt;/code&gt; modified our items as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYMRDmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ueqiuf1ny5p9ezj7hdcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYMRDmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ueqiuf1ny5p9ezj7hdcr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there is a multitude of different values you can apply here.&lt;/p&gt;

&lt;p&gt;They all produce similar but slightly different spacings.&lt;/p&gt;

&lt;p&gt;In the next section of this tutorial I'll go over them with a flex diagram that can help you to quickly understand how they all work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-justifycontent"&gt;
  &lt;/a&gt;
  Using justify-content
&lt;/h3&gt;

&lt;p&gt;This flex diagram makes it easy to understand how values set to &lt;code&gt;justify-content&lt;/code&gt; work. To the left you see each value name and to the right the effect it has on spacing between your flex items:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f72aae1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s608tn20n067h1iq9xkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f72aae1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s608tn20n067h1iq9xkf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Description of all &lt;code&gt;justify-content&lt;/code&gt; values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;stretch&lt;/strong&gt; Stretch all items to fill 100% of the parent's width&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-between&lt;/strong&gt; Equal space between all items. No space on outside corners.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-around&lt;/strong&gt; Equal space around all items. Half space on the outside corners.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;space-evenly&lt;/strong&gt; Equal space around all items and parent edges.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;center&lt;/strong&gt; Center all items. No space &lt;em&gt;between&lt;/em&gt; items.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;flex-end&lt;/strong&gt; Align all items right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;flex-start&lt;/strong&gt; Align all items left. (&lt;em&gt;Default&lt;/em&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind &lt;code&gt;flex-direction: row&lt;/code&gt; is the &lt;em&gt;default setting&lt;/em&gt;. This is why all items are justified on the horizontal (main) axis. However, it's possible to swap axis by setting &lt;code&gt;flex-direction&lt;/code&gt; to &lt;code&gt;column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Doing this will not affect &lt;code&gt;justify-content&lt;/code&gt; in any different way -- it simply gets swapped with cross-axis and becomes the vertical axis -- items will be now spaced vertically. (See next example.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-justifycontent-with-flexdirection-column"&gt;
  &lt;/a&gt;
  Using justify-content with flex-direction: column
&lt;/h3&gt;

&lt;p&gt;This is the same example as above. All we did was set &lt;code&gt;flex-direction&lt;/code&gt; property to &lt;code&gt;column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSW-P-Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcovbo5q1vuz3leobrbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSW-P-Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcovbo5q1vuz3leobrbg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-aligncontent-endraw-to-create-vertical-spacing"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;align-content&lt;/code&gt; to create vertical spacing
&lt;/h3&gt;

&lt;p&gt;There may be some confusion at why &lt;code&gt;align-content&lt;/code&gt; isn't working for your layout. Many try applying this property to parent in hopes of using it as an opposite to &lt;code&gt;justify-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But there is one gotcha! This property requires more than one row. Otherwise there is no effect.&lt;/p&gt;

&lt;p&gt;To make sure your items wrap to the next line, set &lt;code&gt;flex-wrap&lt;/code&gt; property to &lt;code&gt;wrap&lt;/code&gt; value in your main container first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kwtCzHXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0c08ckfud30pgzcuz0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwtCzHXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0c08ckfud30pgzcuz0f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here 12 items were strategically used to fill up an equal number of lanes.&lt;/p&gt;

&lt;p&gt;Let's apply &lt;code&gt;stretch&lt;/code&gt; value to &lt;code&gt;align-content&lt;/code&gt; property:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2XB_aA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i3ek0qby36g916nlzx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2XB_aA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i3ek0qby36g916nlzx1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This creates a grid-like layout.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-flex-references"&gt;
  &lt;/a&gt;
  Other Flex References
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://semicolon.dev/tutorial/css/flex-tutorial"&gt;CSS Flex Tutorial&lt;/a&gt; &lt;em&gt;the complete css flex tutorial&lt;/em&gt;&lt;br&gt;
&lt;a href="https://semicolon.dev/tutorial/css/learn-css-flex-patterns-in-10-minutes"&gt;Less Common CSS FLex Patterns In 10 Minutes&lt;/a&gt; &lt;em&gt;how to make grid and column-based layouts with flex&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Learning flex is an ongoing process, and there is no "one fits all" solution for creating responsive layouts with css flex. Learn from multiple resources.&lt;/p&gt;

</description>
      <category>css</category>
      <category>flex</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Reactive apps with React + RxJs</title>
      <author>Carlos Gómez Suárez</author>
      <pubDate>Wed, 05 May 2021 23:02:39 +0000</pubDate>
      <link>https://dev.to/charlintosh/reactive-app-with-react-rxjs-24b3</link>
      <guid>https://dev.to/charlintosh/reactive-app-with-react-rxjs-24b3</guid>
      <description>&lt;p&gt;A modern way to develop apps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reducing-complexity-using-redux-or-not"&gt;
  &lt;/a&gt;
  Reducing complexity using Redux... or not
&lt;/h1&gt;

&lt;p&gt;When I started to learn React I often heard a lot of &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;, the storage concepts, reducers and the stuff related with Redux pattern. I'm a such fan and advocate of the design patterns, I was so excited to setup a React app with Redux.&lt;/p&gt;

&lt;p&gt;Finally, the day arrived and I needed to setup Redux on my first React app and... I was no a such fan of it.&lt;/p&gt;

&lt;p&gt;Yes, it's true, Redux makes our React application follow a scalable and maintanable way for our app state management, but at the same time, it’s a tedious way to add new features because you need to add a lot of code: define an action, create a dispatcher, create a reducer, etc.&lt;/p&gt;

&lt;p&gt;I used Redux a few times. Obviously, I prefer to use Redux instead to use nothing in our state management application. I know that there's a lot of Redux alternatives, like MobX (I'll talk more about it in a moment) or &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; (which I like a lot, but maybe you need to plan a very complex architecture, schemas and queries).&lt;/p&gt;

&lt;p&gt;I was looking for something simple but powerful. Interestingly, what I was looking for was in Angular. I mean, not the Angular framework itself but a library that is commonly used in Angular applications: RxJS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stop-thinking-in-a-static-data-store-start-thinking-in-data-streams-instead"&gt;
  &lt;/a&gt;
  Stop thinking in a static data store, start thinking in data streams instead
&lt;/h1&gt;

&lt;p&gt;In 2017, &lt;a href="https://www.thoughtworks.com/de/radar/languages-and-frameworks/reactivex"&gt;ThoughtWorks&lt;/a&gt; recommended to adopt ReactiveX on its &lt;a href="https://www.thoughtworks.com/radar"&gt;technology radar&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Distributed systems often utilize multithreading, event-based communication and nonblocking I/O to improve the overall system efficiency. These programming techniques impose challenges such as low-level threading, synchronization, thread safety, concurrent data structures, and non-blocking I/O. The open source &lt;a href="http://reactivex.io/"&gt;ReactiveX&lt;/a&gt; library beautifully abstracts away these concerns, provides the required application plumbing, and extends the &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;observable pattern&lt;/a&gt; on streams of asynchronous events. ReactiveX also has an active developer community and supports a growing list of languages, the most recent addition being &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt;. It also implements binding to mobile and desktop platforms.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I repeat, I’m a big fan of design patterns and ReactiveX implements a pattern very well: &lt;em&gt;Observables&lt;/em&gt;. Observable pattern is a very interesting pattern and is very useful on most of scenarios. As you could read, iOS Applications uses ReactiveX too. Keep in mind that ReactiveX has a lot of &lt;a href="http://reactivex.io/languages.html"&gt;adaptations for the different programming languages&lt;/a&gt;. It can be used both in back-end and front-end.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a nutshell, there’s a data source that will emit values through time, it will be observed by at least one subscription. The &lt;code&gt;magic&lt;/code&gt; comes when the data source manipulates the received values asynchronous to obtain more sophisticated or more simple data entities. This is possible due &lt;a href="https://v6.rxjs.dev/guide/v6/pipeable-operators"&gt;pipe operators&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt; has implemented the Observable pattern too, but in my opinion, the main disavantage of this library is that uses &lt;em&gt;Object Oriented Programming&lt;/em&gt;. This limiting us a little bit to use Reactive Programming properly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-reactivex-a-modern-and-minimalist-way-to-develop-apps"&gt;
  &lt;/a&gt;
  React + ReactiveX = A modern and minimalist way to develop apps
&lt;/h1&gt;

&lt;p&gt;Since I learned ReactiveX, I changed the way I develop my applications. I really enjoy to use it. To start with the code stuff, here's an example that I've implemented on my website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-view"&gt;
  &lt;/a&gt;
  Quick view
&lt;/h2&gt;

&lt;p&gt;This is a little bit advanced, so if you don't know much about ReactiveX don't worry, I'll talk in depth later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animationFrameScheduler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pairwise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;throttleTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ScrollType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ScrollMovement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;watchScroll$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ScrollType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;undefinedWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;undefinedWindow&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;passive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})),&lt;/span&gt;
            &lt;span class="nx"&gt;throttleTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animationFrameScheduler&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nx"&gt;pairwise&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ScrollMovement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UP&lt;/span&gt;
                        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ScrollMovement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DOWN&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;distinctUntilChanged&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you was just read is a service that provides to me information about the scroll movements of the window. Window object has a lot of information but what I wanted to get was if the user was scrolling up or scrolling down, the purpose of this was enable to shown or hide a nvigation bar on my site. Look the navigation component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Nav.component.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useObservable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;watchScroll$&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./nav.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ScrollMovement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ScrollType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// other imports&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Nav&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ScrollType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;watchScroll$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ScrollMovement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;scrollDirection&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ScrollMovement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DOWN&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Nav__Item"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Logo"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Carlos Gómez"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Nav__Item"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Menu&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I'm using a custom hook called &lt;code&gt;useObservable&lt;/code&gt;, you could create your own custom hook but I decided to use this due is factory-based. This hook returns me the last emmited value by &lt;code&gt;watchScroll$&lt;/code&gt;, then it closes the suscription. This get triggered every render. I just adding the &lt;code&gt;hidden&lt;/code&gt; class to my div if the user is scrolling up, if not, that class will be removed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-how-reactivex-works"&gt;
  &lt;/a&gt;
  But, how ReactiveX works?
&lt;/h1&gt;

&lt;p&gt;Let's started with the basics. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a data source.
By convention, an observable variable uses &lt;code&gt;$&lt;/code&gt; at it's name.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case I'm using &lt;code&gt;from&lt;/code&gt; function. This creates an observable with the given params, there's a few methods that RxJS provides to create Observables like &lt;code&gt;of&lt;/code&gt; or &lt;code&gt;fromEvent&lt;/code&gt;. At this point this observable do nothing because I don't have suscriptors associate it. Remember that an observable needs at least one suscriptor to start to work.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a suscription.
Suscription method will listed every value that the source emit.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this moment the Observable already started to emit the values but we can't see it or manipulate them because I don't passing any observer at the suscription. The &lt;a href="http://reactivex.io/rxjs/class/es6/MiscJSDoc.js~ObserverDoc.html"&gt;RxJS Observer&lt;/a&gt; is an object like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can pass something like this at the &lt;code&gt;suscribe()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Next: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Observable is completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This finally will show us at the console the values that the observable emitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Next: 1
Next: 2
Next: 3
Next: 4
Next: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, Observer has a few things that I don't want to touch in this article like &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt;. So, with practical purposes I will simplify it a little bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;mySource$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works same as before.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add pipe operators.
So, at this moment we have a very basic observable that isn't useful. How about if we add a little bit of complexity to this excercise. An Observable could be emit values of any types, can emit &lt;code&gt;Objects&lt;/code&gt;, &lt;code&gt;numbers&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;JSX.Elements&lt;/code&gt;, more &lt;code&gt;Observables&lt;/code&gt;, etc. So imagine that the back-end developer sent me a list of tasks.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Imagine this comes from the back-end&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cleanup and prune system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daily backup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Execute security scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    name: "Cleanup and prune system"
    id: 1,
    completed: false
  }
  {
    name: "Daily backup",
    id: 2,
    completed: true
  }
  {
    name: "Execute security scripts",
    id: 3,
    completed: false
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-a-pipe-operator"&gt;
  &lt;/a&gt;
  What is a pipe operator?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Pipe operator is like a tweak that manipulates the observable input and returns another. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time I want to recovery only the pending tasks. For that I will use the pipe operator &lt;code&gt;reduce&lt;/code&gt; that works same as &lt;code&gt;Array.reduce()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Imagine this comes from the back-end&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cleanup and prune system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daily backup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Execute security scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pendingTasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;pendingTasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pendingTasks&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    name: "Cleanup and prune system"
    id: 1,
    completed: false
  },
  {
    name: "Execute security scripts",
    id: 3,
    completed: false
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! That's a better approach. Now, imagine that the back-end developer adds a new feature to the tasks: &lt;code&gt;priority&lt;/code&gt;, then we need to &lt;code&gt;filter&lt;/code&gt; the pending tasks by high priority only, so I added a functionality using &lt;code&gt;filter&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;MEDIUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;LOW&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Imagine this comes from the back-end&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cleanup and prune system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOW&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daily backup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HIGH&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Execute security scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MEDIUM&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verify tests&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HIGH&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pendingTasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;pendingTasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextTask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pendingTasks&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="nx"&gt;tasks$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextTasks&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pipe&lt;/code&gt; method could chain mutiple operators, it follows the order of the operators. In this case I decided to filter first, then, with the filtered values I'm creating a list of unfinished tasks. I could chain the number of operators as I need.&lt;/p&gt;

&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    name; "Verify tests",
    id: 4,
    completed: false
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#realworld-example-progress-bar"&gt;
  &lt;/a&gt;
  Real-world example (Progress Bar)
&lt;/h1&gt;

&lt;p&gt;I hope you find useful the brief introduction of RxJS. I shown a couple of RxJS examples but I want to show the full path of React + RxJS with simple but powerful implementation. Let's create a simple &lt;code&gt;Progress Bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this implementarion I'll just need three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A eact component.&lt;/li&gt;
&lt;li&gt;A service which observe the state of the window&lt;/li&gt;
&lt;li&gt;A SCSS file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, the Observable and service. I need a data source, so, I'm using &lt;code&gt;fromEvent&lt;/code&gt; which will observe the &lt;code&gt;document's scroll&lt;/code&gt; in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scroll$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I need to manipulate that values to return a number, so, I created another Observable called &lt;code&gt;progress$&lt;/code&gt;. The &lt;code&gt;scroll$&lt;/code&gt; observable is returning an &lt;code&gt;Event&lt;/code&gt;, so I will analyze that &lt;code&gt;Event&lt;/code&gt; with the &lt;code&gt;map&lt;/code&gt; operator. Inside the map I'm just calculating the percentage of the user progress at the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scroll$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;scroll$&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I scroll, the output will be recalculated and he result is a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;. Great! That's what I wanted. Next step: The React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./ProgressBar.component.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useObservable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;progress$&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./progressBar.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ProgressBar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I'm using again the custom &lt;code&gt;useObservable&lt;/code&gt; hook to subscribe and get the last value of &lt;code&gt;progress$&lt;/code&gt;. This seems good, the last step is to add the styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProgressBar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That simple. No actions, no reducers, just Observables. You see it?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-thoughts"&gt;
  &lt;/a&gt;
  Last thoughts
&lt;/h1&gt;

&lt;p&gt;State managment is a primordial topic on an application. Using ReactiveX on React applications changed my vision and how to develop my apps in a modern way, functional and reactive. I think that every React developer needs to give a chance to RxJS and maybe, just maybe, avoid Redux. Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>rxjs</category>
      <category>typescript</category>
      <category>functional</category>
    </item>
    <item>
      <title>Spring Framework Tutorial: Getting Started with Spring</title>
      <author>Ryan Thelin</author>
      <pubDate>Wed, 05 May 2021 23:00:51 +0000</pubDate>
      <link>https://dev.to/educative/spring-framework-tutorial-getting-started-with-spring-gib</link>
      <guid>https://dev.to/educative/spring-framework-tutorial-getting-started-with-spring-gib</guid>
      <description>&lt;p&gt;While often overlooked as old-fashioned, the Spring Framework is still a popular application development tool desired by enterprise companies across the globe. Spring offers unparalleled control, top-notch security, and a time-saving dependency system using Spring Beans. &lt;/p&gt;

&lt;p&gt;However, Spring is also notoriously difficult to learn due to its number of options and complex toolset.&lt;/p&gt;

&lt;p&gt;Today, we'll help you start your Spring development journey with a beginner tutorial on how and why to use Spring. In the end, we'll even get you started on your first Spring portfolio project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what"&gt;What is the Spring Framework?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Salient features of Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#architecture"&gt;Spring Architecture and Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-started"&gt;Get started with Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced"&gt;Advanced Spring concepts to learn next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Learn Spring in half the time &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Learn professional-level Spring techniques quickly with hands-on lessons.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/guide-spring-5-spring-boot-2"&gt;The Complete Guide to Spring 5 and Spring Boot 2&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-spring-framework"&gt;
  &lt;/a&gt;
  What is the Spring Framework?
&lt;/h2&gt;

&lt;p&gt;Spring is a lightweight, open-source application development framework that uses Java Enterprise Edition (Java EE) and Enterprise JavaBeans model (EJB). &lt;/p&gt;

&lt;p&gt;Spring is often thought of as a "framework of frameworks" because it supports other integrated frameworks in the Java ecosystem like Struts, Hibernate, and Tapestry. Spring comes in many variants that are tailored to particular uses such as Spring MVC, Spring Boot, or Spring Security.&lt;/p&gt;

&lt;p&gt;Spring is known for its dependency injection and Inversion of Control (IoC) systems, which allow you to create large-scale, loosely-coupled applications with ease. Spring is especially suited for financial and enterprise applications due to its speed, security, and easy-to-build transaction systems. The top employers of Spring developers are Citibank, eBay, Visa, and J.P. Morgan.&lt;/p&gt;

&lt;p&gt;Overall, Spring Framework allows you to create enterprise-scale applications that are secure and can automatically handle low-level functionalities like maintaining container lifecycles and managing dependencies. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#advantages-of-spring"&gt;
  &lt;/a&gt;
  Advantages of Spring
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Plain Old Java Object (POJO)&lt;/strong&gt;: Spring applications just use normal Java objects rather than servers or enterprise containers. This makes applications more lightweight.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modularity&lt;/strong&gt; IoC and &lt;a href="https://www.educative.io/blog/mvc-tutorial"&gt;MVC&lt;/a&gt; allows you to reuse components across your application without manually managing the dependencies of each&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strong support for Java ecosystem&lt;/strong&gt;: Spring makes innovative uses of pre-existing technologies, such as ORM frameworks, JEE, and JDK timers&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalable transactions&lt;/strong&gt;: Spring offers a consistent, scalable transaction management interface for both local transactions and global transactions. This includes caching protocols.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secure&lt;/strong&gt;: Easy to implement security modules with &lt;a href="https://www.educative.io/blog/kerberos-in-5-minutes"&gt;authentication&lt;/a&gt; and validation features.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible Configs&lt;/strong&gt;: Can opt to use Java-based annotations or XML configuration
​

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-spring"&gt;
  &lt;/a&gt;
  Disadvantages of Spring
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Complexity&lt;/strong&gt;: Spring Framework opts for increased control and complexity over ease of use. Spring is therefore harder to pick up than other web frameworks. While very powerful, Spring is best suited for experienced developers that can handle its steep learning curve.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parallel Mechanisms&lt;/strong&gt;: Spring's wide range of options means a single task can be accomplished in several ways. You'll need intricate knowledge of your available tools to choose the ideal solution and avoid cross-team confusion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lacking robust documentation&lt;/strong&gt;: Spring's documentation is missing clear guidelines on a number of topics, especially around cybersecurity techniques. It's up to users to deal with common attacks like cross-site forgery and scripting attacks.
&amp;gt; Many of these disadvantages were addressed by the invention of the Spring Boot module, which is highly opinionated and designed for &lt;a href="https://www.educative.io/blog/microservices-architecture-tutorial-all-you-need-to-get-started"&gt;microservice architectures&lt;/a&gt;. 
&amp;gt;
&amp;gt; Most modern Spring applications are built on Boot but there are many older applications still maintained by long-standing companies. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-spring"&gt;
  &lt;/a&gt;
  Features of Spring
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inversion of Control (IoC)&lt;/strong&gt;: Shifts responsibility for dependencies from objects to the framework itself. Without IoC, each object must handle its own instance of the dependency. With IoC, the object simply lists that it needs a certain dependency and the framework configures and manages it automatically. This simplifies the app development process by consolidating the dependency system and reducing the workload on individual classes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Aspect-Oriented Programming&lt;/strong&gt;: Spring AOP allows you to have different class loaders to increase modularity and separate cross-cutting concerns.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency Injection&lt;/strong&gt;: The process Spring uses to automatically manage the dependencies of beans. Spring checks which beans are required for a particular bean to function and injects them as a dependency. Spring can perform dependency injection by using a constructor or by using a setter method.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Container Lifecycle Management&lt;/strong&gt;: Automatically creates, manages, and configures application objects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MVC support&lt;/strong&gt;: Supports the MVC web architecture that separates functionalities between model, view, and controller layers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Error Handling&lt;/strong&gt;: Includes JDBC exception handling with an exception hierarchy system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spring-architecture-and-components"&gt;
  &lt;/a&gt;
  Spring Architecture and Components
&lt;/h2&gt;

&lt;p&gt;Let's break down the fundamental pieces of a Spring Framework application to help you see the big picture.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#beans"&gt;
  &lt;/a&gt;
  Beans
&lt;/h3&gt;

&lt;p&gt;Spring Beans are instances of classes that are managed by Spring. They are the most fundamental component of a Spring program. &lt;/p&gt;

&lt;p&gt;Traditionally, objects would create personal instances of their dependencies. Spring manages all the dependencies of an object and instantiates the object into a bean after injecting the required dependencies. The &lt;code&gt;@Component&lt;/code&gt; annotation is the most common method of defining beans.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beans have a set lifecycle and visibility based on their scope. There are six types of scopes: singleton, prototype, request, session, application, and websocket. The singleton and prototype scopes can be used in any application while the last four scopes are only available for a web application.&lt;/p&gt;

&lt;p&gt;The default scope of a bean is singleton, in which only one instance of the bean is created and cached in memory. Multiple requests for the bean return a shared reference to the same bean. In contrast, prototype scope results in the creation of new beans whenever a request for the bean is made to the application context.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#autowiring"&gt;
  &lt;/a&gt;
  Autowiring
&lt;/h3&gt;

&lt;p&gt;Spring's method of injecting beans into one and another. Spring identifies a selected bean's dependency, looks for a match, and then populates the dependency. The &lt;code&gt;@Autowired&lt;/code&gt; annotation tells Spring to find and inject a collaborating bean into another. If more than one bean of the same type is available, Spring throws an error. &lt;/p&gt;

&lt;p&gt;In the following scenario, two beans of type Operator are detected by Spring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nf"&gt;Arithmetic&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Operator&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Addition&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Operator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subtraction&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Operator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#ioc-container"&gt;
  &lt;/a&gt;
  IoC Container
&lt;/h3&gt;

&lt;p&gt;An IoC container is a framework that provides the Inversion of Control functionality. The IoC container manages the beans and creates any instances required.&lt;/p&gt;

&lt;p&gt;For example, say we have the class &lt;code&gt;Vehicle&lt;/code&gt; that depends on another class, &lt;code&gt;Engine&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Engine&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With IoC, the programmer only needs to mention the dependency and Spring will do the rest. The IoC container will create instances of both classes and inject &lt;code&gt;Engine&lt;/code&gt; into &lt;code&gt;Vehicle&lt;/code&gt; as a dependency.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#spring-modules-and-spring-projects"&gt;
  &lt;/a&gt;
  Spring Modules and Spring Projects
&lt;/h3&gt;

&lt;p&gt;Modules are collections of tools grouped by their intended function. Developers can specify which modules beyond the basic set they'd like to import as dependencies for any given application.&lt;/p&gt;

&lt;p&gt;Modules are organized in groups called Projects. Each Project contains modules that are specialized for working in a specific platform or application type. The project and module systems help to keep your program lightweight as you can choose to load only the tools used in the application.&lt;/p&gt;

&lt;p&gt;The modules of the basic Spring Project architecture are shown below grouped together by their layer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWH9225W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi7n68fgrbjhwxlcqc1c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWH9225W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi7n68fgrbjhwxlcqc1c.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Spring Core Container includes the 4 modules essential to use Spring: Beans, Core, Context, and Spring Expression Language (SpEL). These modules are responsible for the fundamental functionality of the Spring framework, like Inversion of Control (IoC), dependency injection, internationalization as well as support for querying the object at run time.&lt;/p&gt;

&lt;p&gt;The Spring Data access/integration layer provides support for interacting with databases and &lt;a href="https://www.educative.io/blog/java-agile-development"&gt;managing data&lt;/a&gt;. It has 4 main pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Java Database Connectivity (JDBC)&lt;/strong&gt; module, which allows the data layer to get, store, or interface with other systems without needing to write cumbersome standalone JDBC code.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Object Relational Mapping&lt;/strong&gt; (ORM) module, which allows your Spring web application to interface with ORM frameworks.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Java Messaging Service&lt;/strong&gt; (JMS) module, which allows Spring to produce messages of its own and consume messages from other systems. This is essential for reactive apps.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Object-XML Mapping&lt;/strong&gt; (OXM) module, which provides useful features to make object-to-XML file transformation easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Web layer contains the Web, Servlets, Portlets, and Sockets modules used to create web applications.&lt;/p&gt;

&lt;p&gt;The Test module addresses the cross-cutting concern of unit testing. The Spring Test framework supports testing with JUnit, TestNG, as well as creating mock objects for testing the code in isolation.&lt;/p&gt;

&lt;p&gt;The AOP module provides Aspect-Oriented Programming functionalities like method interception, pointcuts, security, and logging features. Spring has its own module called Spring AOP that offers basic, aspect-oriented programming functionality. Advanced AOP functionality can be implemented through integration with AspectJ. AOP features cross-cutting concerns from business logic.&lt;/p&gt;

&lt;p&gt;Outside of this basic project, Spring includes projects for all major use cases. These projects include modules that are too niche for a  basic project but include invaluable APIs and functionalities for the target use. &lt;/p&gt;

&lt;p&gt;For example, Spring Cloud allows the development of &lt;a href="https://www.educative.io/blog/beginners-guide-cloud-computation"&gt;cloud native applications&lt;/a&gt; that can be dynamically configured and deployed. It provides functionality for handling common patterns in distributed systems. Other projects include Spring Boot, Spring Security, Spring DAO, Spring Context, and many more.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#keep-learning-the-spring-framework" class="anchor"&gt;
  &lt;/a&gt;
  Keep learning the Spring Framework.
&lt;/h4&gt;

&lt;p&gt;Learn Spring quickly by building live projects that show you how and why to use your new skills. Educative's text-based courses are easy to skim and feature live coding environments to help you get lasting learning at your pace.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/guide-spring-5-spring-boot-2"&gt;The Complete Guide to Spring 5 and Spring Boot 2&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-spring"&gt;
  &lt;/a&gt;
  Get started with Spring
&lt;/h2&gt;

&lt;p&gt;Now we'll get you some hands-on experience with your first Spring application: a simple movie recommendation system. &lt;br&gt;
Setting up a new project with Spring Framework is difficult because you need to set up the full architecture by hand, including which Apache Maven dependencies to use, whether to use XML or Java, and you must install a web server like Tomcat. &lt;/p&gt;

&lt;p&gt;Instead, we'll use the Spring Boot project to automate much of the setup process and use its built-in web server.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#how-to-start-your-project"&gt;
  &lt;/a&gt;
  How to start your project
&lt;/h3&gt;

&lt;p&gt;We'll use Spring Initializr to create a Spring Boot project fast using its simple selection menu.&lt;/p&gt;

&lt;p&gt;First, go to &lt;code&gt;start.spring.io&lt;/code&gt;. You'll find a menu interface like the one below with settings selections and metadata fields. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gaQ3roVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7z71mvgy598ujcu9zh8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gaQ3roVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7z71mvgy598ujcu9zh8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project, we'll select "Maven Project", choose Java as our language, and choose the latest version of Spring Boot. Avoid "SNAPSHOT" versions for now because these are versions being alpha or beta-tested. Under "Project Metadata", enter &lt;code&gt;io.datajek.springbasics&lt;/code&gt; for "GroupID" and &lt;code&gt;movie-recommmender-system&lt;/code&gt; for "ArtifactID. The group ID and artifact ID are basically the package name and class name. You'd normally add module dependencies under "Dependencies", but this project only requires default Spring tools.&lt;/p&gt;

&lt;p&gt;Once you've entered everything, press "Generate" to create a zip file with setup architecture. Unzip the folder into the desired location on your hard drive. This folder will contain a &lt;code&gt;pom.xml&lt;/code&gt; file to import into &lt;a href="https://www.educative.io/blog/best-java-ides-2021#eclipse"&gt;Eclipse IDE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After a short moment, you'll see the following hierarchy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/main/java&lt;/code&gt; where the Java code will be written&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src/main/resources&lt;/code&gt; where the application properties are written&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src/test/java&lt;/code&gt; where the tests will be written
You can now right-click the &lt;code&gt;MovieRecommenderSystemApplication.java&lt;/code&gt; and run it as a Java application to produce the following console output.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.4.RELEASE)
2021-05-03 22:46:15.549  INFO 78 --- [           main] .b.m.d.MovieRecommenderSystemApplication : Starting MovieRecommenderSystemApplication v0.0.1-SNAPSHOT on b041f076fcbd with PID 78 (/Code/movie-recommender-system/target/movie-recommender-system-0.0.1-SNAPSHOT.jar started by root in /Code/movie-recommender-system/target)
2021-05-03 22:46:15.563  INFO 78 --- [           main] .b.m.d.MovieRecommenderSystemApplication : No active profile set, falling back to default profiles: default
2021-05-03 22:46:16.458  INFO 78 --- [           main] .b.m.d.MovieRecommenderSystemApplication : Started MovieRecommenderSystemApplication in 1.41 seconds (JVM running for 1.855)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Congratulations, you set up your first Spring application with Spring Boot!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#adding-a-dependencies"&gt;
  &lt;/a&gt;
  Adding a Dependencies
&lt;/h3&gt;

&lt;p&gt;Now, we'll add a simple implementation of the movie recommender using Spring's dependency system. The program will take a movie title as input and return three movie titles of the same genre. For now, we'll be hardcoding our output so you can focus on learning the program's structure.&lt;/p&gt;

&lt;p&gt;First, create a new class in &lt;code&gt;src/main/java&lt;/code&gt; named &lt;code&gt;RecommenderImplementation&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba7NJwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hf31w9tp0mmyhytagip.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba7NJwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hf31w9tp0mmyhytagip.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll add the &lt;code&gt;recommendMovies&lt;/code&gt; method to &lt;code&gt;RecommenderImplementation&lt;/code&gt;. The &lt;code&gt;recommendMovies&lt;/code&gt; method will take a String movie title as input and return the three recommendations in a String array. &lt;/p&gt;

&lt;p&gt;Use the hardcoded implementation below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;recommendMovies&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//use content based filter to find similar movies&lt;/span&gt;
    &lt;span class="c1"&gt;//return the results&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"M1"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"M2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"M3"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create an instance of the &lt;code&gt;RecommenderImplementation&lt;/code&gt; class in the &lt;code&gt;MovieRecommenderSystemApplication&lt;/code&gt; file, then call the &lt;code&gt;recommendMovies&lt;/code&gt; method through the &lt;code&gt;RecommenderImplementation&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; 
&lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;    
    &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recommendMovies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll implement content-based filtering to find recommendations. To keep &lt;code&gt;recommendMovies&lt;/code&gt; independent of the filtering logic, we'll create a new class called &lt;code&gt;ContentBasedFilter&lt;/code&gt; with a method called &lt;code&gt;getRecommendations&lt;/code&gt;. This method would be where you could implement complex filtering that looks at relevant data like watch history, user-match rating, and so on. Keep these ideas in mind for when you continue expanding this project after the tutorial.&lt;/p&gt;

&lt;p&gt;For now, we'll hardcode &lt;code&gt;getRecommendations&lt;/code&gt;  to return the same three movies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//logic of content based filter&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Happy Feet"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ice Age"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shark Tale"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use the methods of the &lt;code&gt;ContentBasedFilter&lt;/code&gt; class in the &lt;code&gt;RecommenderImplementation&lt;/code&gt; class. Replace the previous hardcoded implementation of &lt;code&gt;recommendMovies&lt;/code&gt; with the following dependency-based implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;recommendMovies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll add a &lt;code&gt;toString&lt;/code&gt; method to the &lt;code&gt;main&lt;/code&gt; method to make the String array readable as an output.&lt;br&gt;
Your program will now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieRecommenderSystemApplication&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//SpringApplication.run(MovieRecommenderSystemApplication.class, args);&lt;/span&gt;
        &lt;span class="c1"&gt;//create object of RecommenderImplementation class&lt;/span&gt;
        &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;    

        &lt;span class="c1"&gt;//call method to get recommendations&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recommendMovies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//display results&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;recommendMovies&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//use content-based filter to find similar movies&lt;/span&gt;

        &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//return the results&lt;/span&gt;
        &lt;span class="c1"&gt;//return new String[] {"M1", "M2", "M3"};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//implement logic of content-based filter&lt;/span&gt;

        &lt;span class="c1"&gt;//return movie recommendations&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Happy Feet"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ice Age"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shark Tale"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The current implementation is tightly coupled because the &lt;code&gt;RecommenderImplementation&lt;/code&gt; class depends on &lt;code&gt;ContentBasedFilter&lt;/code&gt; to work. Now, we'll decouple these components to allow for multiple types of filtering, such as a &lt;code&gt;CollaborativeFilter&lt;/code&gt;. We'll use an abstract &lt;code&gt;Filter&lt;/code&gt; interface with different implementations based on the selected filter type.&lt;/p&gt;

&lt;p&gt;Spring makes this easy by automatically creating and managing the dependent instances for each component. It will automatically detect the dependency relationship between our classes, meaning you can focus on the code.&lt;/p&gt;

&lt;p&gt;Your decoupled project will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieRecommenderSystemApplication&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//SpringApplication.run(MovieRecommenderSystemApplication.class, args);&lt;/span&gt;
        &lt;span class="c1"&gt;//passing name of the filter as constructor argument&lt;/span&gt;
        &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;    

        &lt;span class="c1"&gt;//call method to get recommendations&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recommender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recommendMovies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//display results&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollaborativeFilter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//logic of content based filter&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Finding Nemo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ice Age"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Toy Story"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContentBasedFilter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//implement logic of content-based filter&lt;/span&gt;

        &lt;span class="c1"&gt;//return movie recommendations&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Happy Feet"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ice Age"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Shark Tale"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RecommenderImplementation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//use filter interface to select filter&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RecommenderImplementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Filter&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//use a filter to find recommendations&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;recommendMovies&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//print the name of interface implementation being used&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name of the filter in use: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finding Dory"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.datajek.spring.basics.movierecommendersystem.lesson2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getRecommendations&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-spring-concepts-to-learn-next"&gt;
  &lt;/a&gt;
  Advanced Spring concepts to learn next
&lt;/h2&gt;

&lt;p&gt;Congratulations on completing your first decoupled Spring application! As you continue learning more advanced Spring concepts, try returning to this project and implementing more intricate filters and features. This will help you solidify your learning and give you a portfolio-ready project by the time you're ready to interview.&lt;/p&gt;

&lt;p&gt;Some new concepts to apply to this project are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement advanced autowiring&lt;/li&gt;
&lt;li&gt;Optimize resource management with bean scope&lt;/li&gt;
&lt;li&gt;Convert to a web application using Spring Web MVC framework&lt;/li&gt;
&lt;li&gt;Create self-repairing systems using the BeanFactory design pattern&lt;/li&gt;
&lt;li&gt;Add relational database support with Hibernate templates and Java Persistence API (JPA)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you learn these concepts and apply them to this project, Educative has created &lt;a href="https://www.educative.io/courses/guide-spring-5-spring-boot-2"&gt;&lt;strong&gt;The Complete Guide to Spring 5 and Spring Boot 2&lt;/strong&gt;&lt;/a&gt;. This course walks you through all the advanced features of Spring Framework and shows you how to use each in a project setting. By the end, you'll have hands-on experience with all of these topics and have the Spring context you need to thrive in an interview. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-spring-and-java"&gt;
  &lt;/a&gt;
  Continue reading about Spring and Java
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/spring-webflux-tutorial"&gt;Spring WebFlux tutorial: how to build a reactive web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/40-spring-interview-questions"&gt;Top 40 Questions for a Spring Framework Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/java-agile-development"&gt;Java Agile Development: Data management with Java domain models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>spring</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
